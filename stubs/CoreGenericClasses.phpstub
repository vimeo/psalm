<?php

/**
 * Interface to detect if a class is traversable using &foreach;.
 * @link http://php.net/manual/en/class.traversable.php
 *
 * @template-covariant TKey
 * @template-covariant TValue
 */
interface Traversable {
}

/**
 * @template-covariant TKey
 * @template-covariant TValue
 * @template TSend
 * @template-covariant TReturn
 *
 * @template-implements Traversable<TKey, TValue>
 */
class Generator implements Traversable {
    /**
     * @return TValue Can return any type.
     */
    public function current() {}

    /**
     * @return void Any returned value is ignored.
     */
    public function next() {}

    /**
     * @return TKey scalar on success, or null on failure.
     */
    public function key() {}

    /**
     * @return bool The return value will be casted to boolean and then evaluated.
     */
    public function valid() {}

    /**
     * @return void Any returned value is ignored.
     */
    public function rewind() {}

    /**
     * @return TReturn Can return any type.
     */
    public function getReturn() {}

    /**
     * @param TSend $value
     * @return TValue Can return any type.
     */
    public function send($value) {}

    /**
     * @return TValue Can return any type.
     */
    public function throw(Throwable $exception) {}
}

/**
 * Interface to provide accessing objects as arrays.
 * @link http://php.net/manual/en/class.arrayaccess.php
 *
 * @template TKey
 * @template TValue
 */
interface ArrayAccess {

    /**
     * Whether a offset exists
     * @link http://php.net/manual/en/arrayaccess.offsetexists.php
     *
     * @param TKey $offset An offset to check for.
     * @return bool true on success or false on failure.
     *              The return value will be casted to boolean if non-boolean was returned.
     *
     * @since 5.0.0
     */
    public function offsetExists($offset);

    /**
     * Offset to retrieve
     * @link http://php.net/manual/en/arrayaccess.offsetget.php
     *
     * @param TKey $offset The offset to retrieve.
     * @return TValue|null Can return all value types.
     * @psalm-ignore-nullable-return
     *
     * @since 5.0.0
     */
    public function offsetGet($offset);

    /**
     * Offset to set
     * @link http://php.net/manual/en/arrayaccess.offsetset.php
     *
     * @param TKey $offset The offset to assign the value to.
     * @param TValue $value The value to set.
     * @return void
     *
     * @since 5.0.0
     */
    public function offsetSet($offset, $value);

    /**
     * Offset to unset
     * @link http://php.net/manual/en/arrayaccess.offsetunset.php
     *
     * @param TKey $offset The offset to unset.
     * @return void
     *
     * @since 5.0.0
     */
    public function offsetUnset($offset);
}

/**
 * This class allows objects to work as arrays.
 * @link http://php.net/manual/en/class.arrayobject.php
 *
 * @template TKey
 * @template TValue
 * @template-implements IteratorAggregate<TKey, TValue>
 * @template-implements ArrayAccess<TKey, TValue>
 */
class ArrayObject implements IteratorAggregate, ArrayAccess, Serializable, Countable {
    /**
     * Properties of the object have their normal functionality when accessed as list (var_dump, foreach, etc.).
     */
    const STD_PROP_LIST = 1;

    /**
     * Entries can be accessed as properties (read and write).
     */
    const ARRAY_AS_PROPS = 2;

    /**
     * Construct a new array object
     * @link http://php.net/manual/en/arrayobject.construct.php
     *
     * @param array<TKey, TValue>|object $input The input parameter accepts an array or an Object.
     * @param int $flags Flags to control the behaviour of the ArrayObject object.
     * @param string $iterator_class Specify the class that will be used for iteration of the ArrayObject object. ArrayIterator is the default class used.
     * @psalm-param class-string<ArrayIterator<TKey,TValue>>|class-string<ArrayObject<TKey,TValue>> $iterator_class
     *
     * @since 5.0.0
     */
    public function __construct($input = null, $flags = 0, $iterator_class = "ArrayIterator") { }

    /**
     * Returns whether the requested index exists
     * @link http://php.net/manual/en/arrayobject.offsetexists.php
     *
     * @param TKey $index The index being checked.
     * @return bool true if the requested index exists, otherwise false
     *
     * @since 5.0.0
     */
    public function offsetExists($index) { }

    /**
     * Returns the value at the specified index
     * @link http://php.net/manual/en/arrayobject.offsetget.php
     *
     * @param TKey $index The index with the value.
     * @return TValue The value at the specified index or false.
     *
     * @since 5.0.0
     */
    public function offsetGet($index) { }

    /**
     * Sets the value at the specified index to newval
     * @link http://php.net/manual/en/arrayobject.offsetset.php
     *
     * @param TKey $index  The index being set.
     * @param TValue $newval The new value for the index.
     * @return void
     *
     * @since 5.0.0
     */
    public function offsetSet($index, $newval) { }

    /**
     * Unsets the value at the specified index
     * @link http://php.net/manual/en/arrayobject.offsetunset.php
     *
     * @param TKey $index The index being unset.
     * @return void
     *
     * @since 5.0.0
     */
    public function offsetUnset($index) { }

    /**
     * Appends the value
     * @link http://php.net/manual/en/arrayobject.append.php
     *
     * @param TValue $value The value being appended.
     * @return void
     *
     * @since 5.0.0
     */
    public function append($value) { }

    /**
     * Creates a copy of the ArrayObject.
     * @link http://php.net/manual/en/arrayobject.getarraycopy.php
     *
     * @return array<TKey, TValue>  a copy of the array. When the ArrayObject refers to an object
     *                              an array of the public properties of that object will be returned.
     *
     * @since 5.0.0
     */
    public function getArrayCopy() { }

    /**
     * Get the number of public properties in the ArrayObject
     * When the ArrayObject is constructed from an array all properties are public.
     * @link http://php.net/manual/en/arrayobject.count.php
     *
     * @return int The number of public properties in the ArrayObject.
     *
     * @since 5.0.0
     */
    public function count() { }

    /**
     * Gets the behavior flags.
     * @link http://php.net/manual/en/arrayobject.getflags.php
     *
     * @return int the behavior flags of the ArrayObject.
     *
     * @since 5.1.0
     */
    public function getFlags() { }

    /**
     * Sets the behavior flags.
     *
     * It takes on either a bitmask, or named constants. Using named
     * constants is strongly encouraged to ensure compatibility for future
     * versions.
     *
     * The available behavior flags are listed below. The actual
     * meanings of these flags are described in the
     * predefined constants.
     *
     * <table>
     * ArrayObject behavior flags
     * <tr valign="top">
     * <td>value</td>
     * <td>constant</td>
     * </tr>
     * <tr valign="top">
     * <td>1</td>
     * <td>
     * ArrayObject::STD_PROP_LIST
     * </td>
     * </tr>
     * <tr valign="top">
     * <td>2</td>
     * <td>
     * ArrayObject::ARRAY_AS_PROPS
     * </td>
     * </tr>
     * </table>
     *
     * @link http://php.net/manual/en/arrayobject.setflags.php
     *
     * @param int $flags The new ArrayObject behavior.
     * @return void
     *
     * @since 5.1.0
     */
    public function setFlags($flags) { }

    /**
     * Sort the entries by value
     * @link http://php.net/manual/en/arrayobject.asort.php
     *
     * @return void
     *
     * @since 5.2.0
     */
    public function asort() { }

    /**
     * Sort the entries by key
     * @link http://php.net/manual/en/arrayobject.ksort.php
     *
     * @return void
     *
     * @since 5.2.0
     */
    public function ksort() { }

    /**
     * Sort the entries with a user-defined comparison function and maintain key association
     * @link http://php.net/manual/en/arrayobject.uasort.php
     *
     * Function <i>cmp_function</i> should accept two
     * parameters which will be filled by pairs of entries.
     * The comparison function must return an integer less than, equal
     * to, or greater than zero if the first argument is considered to
     * be respectively less than, equal to, or greater than the
     * second.
     *
     * @param callable(TValue, TValue):int $cmp_function
     * @return void
     *
     * @since 5.2.0
     */
    public function uasort($cmp_function) { }

    /**
     * Sort the entries by keys using a user-defined comparison function
     * @link http://php.net/manual/en/arrayobject.uksort.php
     *
     * Function <i>cmp_function</i> should accept two
     * parameters which will be filled by pairs of entry keys.
     * The comparison function must return an integer less than, equal
     * to, or greater than zero if the first argument is considered to
     * be respectively less than, equal to, or greater than the
     * second.
     *
     * @param callable(TKey, TKey):int $cmp_function The callable comparison function.
     * @return void
     *
     * @since 5.2.0
     */
    public function uksort($cmp_function) { }

    /**
     * Sort entries using a "natural order" algorithm
     * @link http://php.net/manual/en/arrayobject.natsort.php
     *
     * @return void
     *
     * @since 5.2.0
     */
    public function natsort() { }

    /**
     * Sort an array using a case insensitive "natural order" algorithm
     * @link http://php.net/manual/en/arrayobject.natcasesort.php
     *
     * @return void
     *
     * @since 5.2.0
     */
    public function natcasesort() { }

    /**
     * Unserialize an ArrayObject
     * @link http://php.net/manual/en/arrayobject.unserialize.php
     *
     * @param string $serialized  The serialized ArrayObject
     * @return void The unserialized ArrayObject
     *
     * @since 5.3.0
     */
    public function unserialize($serialized) { }

    /**
     * Serialize an ArrayObject
     * @link http://php.net/manual/en/arrayobject.serialize.php
     *
     * @return string The serialized representation of the ArrayObject.
     *
     * @since 5.3.0
     */
    public function serialize() { }

    /**
     * Create a new iterator from an ArrayObject instance
     * @link http://php.net/manual/en/arrayobject.getiterator.php
     *
     * @return ArrayIterator<TKey, TValue> An iterator from an ArrayObject.
     *
     * @since 5.0.0
     */
    public function getIterator() { }

    /**
     * Exchange the array for another one.
     * @link http://php.net/manual/en/arrayobject.exchangearray.php
     *
     * @param mixed $input The new array or object to exchange with the current array.
     * @return array the old array.
     *
     * @since 5.1.0
     */
    public function exchangeArray($input) { }

    /**
     * Sets the iterator classname for the ArrayObject.
     * @link http://php.net/manual/en/arrayobject.setiteratorclass.php
     *
     * @param string $iterator_class The classname of the array iterator to use when iterating over this object.
     * @psalm-param class-string<ArrayIterator<TKey,TValue>>|class-string<ArrayObject<TKey,TValue>> $iterator_class
     * @return void
     *
     * @since 5.1.0
     */
    public function setIteratorClass($iterator_class) { }

    /**
     * Gets the iterator classname for the ArrayObject.
     * @link http://php.net/manual/en/arrayobject.getiteratorclass.php
     *
     * @return string the iterator class name that is used to iterate over this object.
     * @psalm-return class-string<ArrayIterator<TKey,TValue>>|class-string<ArrayObject<TKey,TValue>>
     *
     * @since 5.1.0
     */
    public function getIteratorClass() { }
}

/**
 * The DOMElement class
 * @link http://php.net/manual/en/class.domelement.php
 */
class DOMDocument extends DOMNode {
    /**
     * @return DOMNodeList<DOMElement>
     */
    public function getElementsByTagName($name) {}

    /**
     * @return DOMNodeList<DOMElement>
     */
    public function getElementsByTagNameNS($namespaceURI, $localName) {}
}

/**
 * The DOMElement class
 * @link http://php.net/manual/en/class.domelement.php
 */
class DOMElement extends DOMNode  {
    public function __construct(string $name, string $value = '', string $namespaceURI = '') {}

    /**
     * @return DOMNodeList<DOMElement>
     */
    public function getElementsByTagName($name) {}
    /**
     * @return DOMNodeList<DOMElement>
     */
    public function getElementsByTagNameNS($namespaceURI, $localName) {}
}

/**
 * @template-covariant TNode as DOMNode
 * @template-implements Traversable<int, TNode>
 */
class DOMNodeList implements Traversable, Countable {
    /**
     * The number of nodes in the list. The range of valid child node indices is 0 to length - 1 inclusive.
     *
     * @var int
     *
     * @since 5.0
     * @link http://php.net/manual/en/class.domnodelist.php#domnodelist.props.length
     */
    public $length;

    /**
     * @param int $index
     * @return TNode|null
     * @psalm-ignore-nullable-return
     */
    public function item($index) {}
}

/**
 * @template-covariant TNode as DOMNode
 * @template-implements Traversable<string, TNode>
 */
class DOMNamedNodeMap implements Traversable, Countable {
    /**
     * @var int
     */
    public $length;

    /**
     * @return TNode|null
     */
    public function getNamedItem(string $name): ?DOMNode {}

    /**
     * @return TNode|null
     */
    public function getNamedItemNS(string $namespaceURI, string $localName): ?DOMNode {}

    /**
     * @return TNode|null
     * @psalm-ignore-nullable-return
     */
    public function item(int $index): ?DOMNode {}
}

/**
 * The SplDoublyLinkedList class provides the main functionalities of a doubly linked list.
 * @link https://php.net/manual/en/class.spldoublylinkedlist.php
 *
 * @template TKey
 * @template TValue
 * @template-implements Iterator<TKey, TValue>
 * @template-implements ArrayAccess<TKey, TValue>
 */
class SplDoublyLinkedList implements Iterator, Countable, ArrayAccess, Serializable
{
    public function __construct() {}

    /**
     * Add/insert a new value at the specified index
     *
     * @param TKey $index The index where the new value is to be inserted.
     * @param TValue $newval The new value for the index.
     * @return void
     *
     * @link https://php.net/spldoublylinkedlist.add
     * @since 5.5.0
     */
    public function add($index, $newval) {}

    /**
     * Pops a node from the end of the doubly linked list
     * @link https://php.net/manual/en/spldoublylinkedlist.pop.php
     *
     * @return TValue The value of the popped node.
     *
     * @since 5.3.0
     */
    public function pop() {}

    /**
     * Shifts a node from the beginning of the doubly linked list
     * @link https://php.net/manual/en/spldoublylinkedlist.shift.php
     *
     * @return TValue The value of the shifted node.
     *
     * @since 5.3.0
     */
    public function shift() {}

    /**
     * Pushes an element at the end of the doubly linked list
     * @link https://php.net/manual/en/spldoublylinkedlist.push.php
     *
     * @param TValue $value The value to push.
     * @return void
     *
     * @since 5.3.0
     */
    public function push($value) {}

    /**
     * Prepends the doubly linked list with an element
     * @link https://php.net/manual/en/spldoublylinkedlist.unshift.php
     *
     * @param TValue $value The value to unshift.
     * @return void
     *
     * @since 5.3.0
     */
    public function unshift($value) {}

    /**
     * Peeks at the node from the end of the doubly linked list
     * @link https://php.net/manual/en/spldoublylinkedlist.top.php
     *
     * @return TValue The value of the last node.
     *
     * @since 5.3.0
     */
    public function top() {}

    /**
     * Peeks at the node from the beginning of the doubly linked list
     * @link https://php.net/manual/en/spldoublylinkedlist.bottom.php
     *
     * @return TValue The value of the first node.
     *
     * @since 5.3.0
     */
    public function bottom() {}

    /**
     * Counts the number of elements in the doubly linked list.
     * @link https://php.net/manual/en/spldoublylinkedlist.count.php
     *
     * @return int the number of elements in the doubly linked list.
     *
     * @since 5.3.0
     */
    public function count() {}

    /**
     * Checks whether the doubly linked list is empty.
     * @link https://php.net/manual/en/spldoublylinkedlist.isempty.php
     *
     * @return bool whether the doubly linked list is empty.
     *
     * @since 5.3.0
     */
    public function isEmpty() {}

    /**
     * Returns whether the requested $index exists
     * @link https://php.net/manual/en/spldoublylinkedlist.offsetexists.php
     *
     * @param TKey $index The index being checked.
     * @return bool true if the requested index exists, otherwise false
     *
     * @since 5.3.0
     */
    public function offsetExists($index) {}

    /**
     * Returns the value at the specified $index
     * @link https://php.net/manual/en/spldoublylinkedlist.offsetget.php
     *
     * @param TKey $index The index with the value.
     * @return TValue The value at the specified index.
     *
     * @since 5.3.0
     */
    public function offsetGet($index) {}

    /**
     * Sets the value at the specified $index to $newval
     * @link https://php.net/manual/en/spldoublylinkedlist.offsetset.php
     *
     * @param TKey $index The index being set.
     * @param TValue $newval The new value for the index.
     * @return void
     *
     * @since 5.3.0
     */
    public function offsetSet($index, $newval) {}

    /**
     * Unsets the value at the specified $index
     * @link https://php.net/manual/en/spldoublylinkedlist.offsetunset.php
     *
     * @param TKey $index The index being unset.
     * @return void
     *
     * @since 5.3.0
     */
    public function offsetUnset($index) {}

    /**
     * Return current array entry
     * @link https://php.net/manual/en/spldoublylinkedlist.current.php
     *
     * @return TValue The current node value.
     *
     * @since 5.3.0
     */
    public function current() {}

    /**
     * Return current node index
     * @link https://php.net/manual/en/spldoublylinkedlist.key.php
     *
     * @return TKey The current node index.
     *
     * @since 5.3.0
     */
    public function key() {}
}

/**
 * The SplFixedArray class provides the main functionalities of array.
 * The main differences between a SplFixedArray and a normal PHP array is that
 * the SplFixedArray is of fixed length and allows only integers within the range as indexes.
 * The advantage is that it uses less memory than a standard array.
 *
 * @link https://php.net/manual/en/class.splfixedarray.php
 *
 * @template TValue
 * @template-implements ArrayAccess<int, TValue>
 * @template-implements Iterator<int, TValue>
 */
class SplFixedArray implements Iterator, ArrayAccess, Countable {
    /**
     * Constructs a new fixed array
     *
     * Initializes a fixed array with a number of NULL values equal to size.
     * @link https://php.net/manual/en/splfixedarray.construct.php
     *
     * @param int $size The size of the fixed array. This expects a number between 0 and PHP_INT_MAX.

     * @since 5.3.0
     */
    public function __construct(int $size = 0) {}

    /**
     * Import a PHP array in a new SplFixedArray instance
     * @link https://php.net/manual/en/splfixedarray.fromarray.php
     *
     * @template TInValue
     * @param array<int, TInValue> $array The array to import
     * @param bool $save_indexes [optional] Try to save the numeric indexes used in the original array.
     *
     * @return SplFixedArray<TInValue> Instance of SplFixedArray containing the array content

     * @since 5.3.0
     */
    public static function fromArray(array $array, bool $save_indexes = true): SplFixedArray {}

    /**
     * Returns a PHP array from the fixed array
     * @link https://php.net/manual/en/splfixedarray.toarray.php
     *
     * @return array<int, TValue>

     * @since 5.3.0
     */
    public function toArray(): array {}

    /**
     * Returns the size of the array.
     * @link https://php.net/manual/en/splfixedarray.getsize.php
     *
     * @return int The size of the array

     * @see SplFixedArray::count()
     *
     * @since 5.3.0
     */
    public function getSize(): int {}

    /**
     * Returns the size of the array.
     * @link https://php.net/manual/en/splfixedarray.count.php
     *
     * @return int The size of the array
     *
     * @since 5.3.0
     */
    public function count(): int {}

    /**
     * Rewind the iterator back to the start
     * @link https://php.net/manual/en/splfixedarray.rewind.php
     *
     * @return void
     *
     * @since 5.3.0
     */
    public function rewind(): void {}

    /**
     * Check whether the array contains more elements
     * @link https://php.net/manual/en/splfixedarray.valid.php
     *
     * @return bool true if the array contains any more elements, false otherwise.
     *
     * @since 5.3.0
     */
    public function valid(): bool {}

    /**
     * Returns current array index
     * @link https://php.net/manual/en/splfixedarray.key.php
     *
     * @return int The current array index
     *
     * @since 5.3.0
     */
    public function key(): int {}

    /**
     * Returns the current array entry
     * @link https://php.net/manual/en/splfixedarray.current.php
     *
     * @return TValue The current element value
     *
     * @since 5.3.0
     */
    public function current() {}

    /**
     * Move to the next entry
     * @link https://php.net/manual/en/splfixedarray.next.php
     *
     * @return void
     *
     * @since 5.3.0
     */
    public function next(): void {}

    /**
     * Returns whether the specified index exists
     * @link https://php.net/manual/en/splfixedarray.offsetexists.php
     *
     * @param int $index The index being checked.
     * @return bool true if the requested index exists, and false otherwise.
     *
     * @since 5.3.0
     */
    public function offsetExists(int $index): bool {}

    /**
     * Sets a new value at a specified index
     * @link https://php.net/manual/en/splfixedarray.offsetset.php
     *
     * @param int $index The index being sent.
     * @param TValue $newval The new value for the index
     * @return void
     *
     * @since 5.3.0
     */
    public function offsetSet(int $index, $newval): void {}

    /**
     * Unsets the value at the specified $index
     * @link https://php.net/manual/en/splfixedarray.offsetunset.php
     *
     * @param int $index The index being unset
     * @return void
     *
     * @since 5.3.0
     */
    public function offsetUnset(int $index): void {}

    /**
     * Returns the value at the specified index
     * @link https://php.net/manual/en/splfixedarray.offsetget.php
     *
     * @param int $index The index with the value
     * @return TValue The value at the specified index
     *
     * @since 5.3.0
     */
    public function offsetGet(int $index) {}
}


/**
 * The SplStack class provides the main functionalities of a stack implemented using a doubly linked list.
 * @link https://php.net/manual/en/class.splstack.php
 *
 * @template TValue
 * @template-extends SplDoublyLinkedList<int, TValue>
 */
class SplStack extends SplDoublyLinkedList {
}

/**
 * The SplQueue class provides the main functionalities of a queue implemented using a doubly linked list.
 * @link https://php.net/manual/en/class.splqueue.php
 *
 * @template TValue
 * @template-extends SplDoublyLinkedList<int, TValue>
 */
class SplQueue extends SplDoublyLinkedList {
    /**
     * Adds an element to the queue.
     * @link https://php.net/manual/en/splqueue.enqueue.php
     *
     * @param TValue $value The value to enqueue.
     * @return void
     *
     * @since 5.3.0
     */
    public function enqueue($value) {}

    /**
     * Dequeues a node from the queue
     * @link https://php.net/manual/en/splqueue.dequeue.php
     *
     * @return TValue The value of the dequeued node.
     *
     * @since 5.3.0
     */
    public function dequeue() {}
}

/**
 * The SplHeap class provides the main functionalities of a Heap.
 * @link https://php.net/manual/en/class.splheap.php
 *
 * @template TValue
 * @template-implements Iterator<int, TValue>
 */
class SplHeap implements Iterator, Countable {
    public function __construct() {}

    /**
     * Compare elements in order to place them correctly in the heap while sifting up
     * @link https://php.net/manual/en/splheap.compare.php
     *
     * @param TValue $value1 The value of the first node being compared.
     * @param TValue $value2 The value of the second node being compared.
     * @return int Positive integer if value1 is greater than value2, 0 if they are equal, negative integer otherwise.
     *
     * @since 5.3.0
     */
    protected abstract function compare($value1, $value2): int {}

    /**
     * Counts the number of elements in the heap
     * @link https://php.net/manual/en/splheap.count.php
     *
     * @return int The number of elements in the heap.
     *
     * @since 5.3.0
     */
    public function count(): int {}

    /**
     * Get the current datastructure node.
     * @link https://php.net/manual/en/splheap.current.php
     *
     * @return TValue The current node value
     *
     * @since 5.3.0
     */
    public function current() {}

    /**
     * Extracts a node from top of the heap and sift up
     * @link https://php.net/manual/en/splheap.extract.php
     *
     * @return TValue The current node value
     *
     * @since 5.3.0
     */
    public function extract() {}

    /**
     * Inserts an element in the heap by sifting it up
     * @link https://php.net/manual/en/splheap.insert.php
     *
     * @param TValue $value The value to insert.
     * @return void
     *
     * @since 5.3.0
     */
    public function insert($value): void {}

    /**
     * Tells if the heap is in a corrupted state
     * @link https://php.net/manual/en/splheap.isCorrupted.php
     *
     * @return bool true if the heap is corrupted, false otherwise.
     *
     * @since 7.0.0
     */
    public function isCorrupted(): bool {}

    /**
     * Checks whether the heap is empty
     * @link https://php.net/manual/en/splheap.isEmpty.php
     *
     * @return bool Whether the heap is empty
     *
     * @since 5.3.0
     */
    public function isEmpty(): bool {}

    /**
     * Return current node index
     * @link https://php.net/manual/en/splheap.key.php
     *
     * @return int The current node index
     *
     * @since 5.3.0
     */
    public function key() {}

    /**
     * Move to the next node. This will delete the top node of the heap.
     * @link https://php.net/manual/en/splheap.next.php
     *
     * @return void
     *
     * @since 5.3.0
     */
    public function next(): void {}

    /**
     * Recover from the corrupted state and allow further actions on the heap
     * @link https://php.net/manual/en/splheap.recoverFromCorruption.php
     *
     * @return void
     *
     * @since 5.3.0
     */
    public function recoverFromCorruption(): void {}

    /**
     * Rewind iterator back to the start (no-op)
     * @link https://php.net/manual/en/splheap.rewind.php
     *
     * @return void
     *
     * @since 5.3.0
     */
    public function rewind(): void {}

    /**
     * Peeks at the node from the top of the heap
     * @link https://php.net/manual/en/splheap.top.php
     *
     * @return TValue The value of the node on the top.
     *
     * @since 5.3.0
     */
    public function top() {}

    /**
     * Check whether the heap contains any more nodes
     * @link https://php.net/manual/en/splheap.valid.php
     *
     * @return bool Returns true if the heap contains any more nodes, false otherwise.
     *
     * @since 5.3.0
     */
    public function valid(): bool {}
}


/**
 * The SplMaxHeap class provides the main functionalities of a heap, keeping the maximum on the top.
 * @link https://php.net/manual/en/class.splmaxheap.php
 *
 * @template TValue
 * @template-extends SplHeap<TValue>
 */
class SplMaxHeap extends SplHeap {
}

/**
 * The SplMinHeap class provides the main functionalities of a heap, keeping the maximum on the top.
 * @link https://php.net/manual/en/class.splminheap.php
 *
 * @template TValue
 * @template-extends SplHeap<TValue>
 */
class SplMinHeap extends SplHeap {
}

/**
 * The SplPriorityQueue class provides the main functionalities of a prioritized queue, implemented using a max heap.
 * @link https://php.net/manual/en/class.splpriorityqueue.php
 *
 * @template TPriority
 * @template TValue
 * @template-implements Iterator<int, TValue>
 */
class SplPriorityQueue implements Iterator, Countable {
    /**
     * Extract the data
     */
    const EXTR_DATA = 0x00000001;
    /**
     * Extract the priority
     */
    const EXTR_PRIORITY = 0x00000002;
    /**
     * Extract an array containing both
     */
    const EXTR_BOTH = 0x00000003;

    public function __construct() {}

    /**
     * Compare priorities in order to place them correctly in the queue while sifting up
     * @link https://php.net/manual/en/splpriorityqueue.compare.php
     *
     * @param TValue $priority1 The priority of the first node being compared.
     * @param TValue $priority2 The priority of the second node being compared.
     * @return int Positive integer if priority1 is greater than priority2, 0 if they are equal, negative integer otherwise.
     *
     * @since 5.3.0
     */
    public function compare($priority1, $priority2): int {}

    /**
     * Counts the number of elements in the queue
     * @link https://php.net/manual/en/splpriorityqueue.count.php
     *
     * @return int The number of elements in the queue.
     *
     * @since 5.3.0
     */
    public function count(): int {}

    /**
     * Get the current datastructure node.
     * @link https://php.net/manual/en/splpriorityqueue.current.php
     *
     * @return TValue The current node value
     *
     * @since 5.3.0
     */
    public function current() {}

    /**
     * Extracts a node from top of the queue and sift up
     * @link https://php.net/manual/en/splpriorityqueue.extract.php
     *
     * @return TValue The current node value
     *
     * @since 5.3.0
     */
    public function extract() {}

    /**
     * Get the flags of extraction
     * @link https://php.net/manual/en/splpriorityqueue.getextractflags.php
     *
     * @return SplPriorityQueue::EXTR_* Returns the current extraction mode
     *
     * @see SplPriorityQueue::setExtractFlags
     *
     * @since 5.3.0
     */
    public function getExtractFlags(): int {}

    /**
     * Inserts an element in the queue by sifting it up
     * @link https://php.net/manual/en/splpriorityqueue.insert.php
     *
     * @param TValue $value The value to insert.
     * @param TPriority $priority The associated priority.
     * @return true
     *
     * @since 5.3.0
     */
    public function insert($value, $priority): bool {}

    /**
     * Tells if the queue is in a corrupted state
     * @link https://php.net/manual/en/splpriorityqueue.isCorrupted.php
     *
     * @return bool true if the queue is corrupted, false otherwise.
     *
     * @since 7.0.0
     */
    public function isCorrupted(): bool {}

    /**
     * Checks whether the queue is empty
     * @link https://php.net/manual/en/splpriorityqueue.isEmpty.php
     *
     * @return bool Whether the queue is empty
     *
     * @since 5.3.0
     */
    public function isEmpty(): bool {}

    /**
     * Return current node index
     * @link https://php.net/manual/en/splpriorityqueue.key.php
     *
     * @return int The current node index
     *
     * @since 5.3.0
     */
    public function key() {}

    /**
     * Move to the next node.
     * @link https://php.net/manual/en/splpriorityqueue.next.php
     *
     * @return void
     *
     * @since 5.3.0
     */
    public function next(): void {}

    /**
     * Recover from the corrupted state and allow further actions on the queue
     * @link https://php.net/manual/en/splpriorityqueue.recoverFromCorruption.php
     *
     * @return void
     *
     * @since 5.3.0
     */
    public function recoverFromCorruption(): void {}

    /**
     * Rewind iterator back to the start (no-op)
     * @link https://php.net/manual/en/splpriorityqueue.rewind.php
     *
     * @return void
     *
     * @since 5.3.0
     */
    public function rewind(): void {}

    /**
     * Sets the mode of extraction
     * @link https://php.net/manual/en/splpriorityqueue.setextractflags.php
     *
     * @param SplPriorityQueue::EXTR_* $flags Defines what is extracted by SplPriorityQueue::current(), SplPriorityQueue::top() and SplPriorityQueue::extract().
     *
     * @return void
     *
     * @since 5.3.0
     */
    public function setExtractFlags(int $flags): void {}

    /**
     * Peeks at the node from the top of the queue
     * @link https://php.net/manual/en/splpriorityqueue.top.php
     *
     * @return TValue The value of the node on the top.
     *
     * @since 5.3.0
     */
    public function top() {}

    /**
     * Check whether the queue contains any more nodes
     * @link https://php.net/manual/en/splpriorityqueue.valid.php
     *
     * @return bool Returns true if the queue contains any more nodes, false otherwise.
     *
     * @since 5.3.0
     */
    public function valid(): bool {}
}


/**
 * The SplObjectStorage class provides a map from objects to data or, by
 * ignoring data, an object set. This dual purpose can be useful in many
 * cases involving the need to uniquely identify objects.
 * @link https://php.net/manual/en/class.splobjectstorage.php
 *
 * @template TObject as object
 * @template TArrayValue
 * @template-implements ArrayAccess<TObject, TArrayValue>
 * @template-implements Iterator<int, TObject>
 */
class SplObjectStorage implements Countable, Iterator, Serializable, ArrayAccess {
    public function __construct() {}

    /**
     * Adds an object in the storage
     * @link https://php.net/manual/en/splobjectstorage.attach.php
     *
     * @param TObject $object The object to add.
     * @param TArrayValue|null $data [optional] The data to associate with the object.
     * @return void
     *
     * @since 5.1.0
     */
    public function attach($object, $data = null) {}

    /**
     * Removes an object from the storage
     * @link https://php.net/manual/en/splobjectstorage.detach.php
     *
     * @param TObject $object The object to remove.
     * @return void
     *
     * @since 5.1.0
     */
    public function detach($object) {}

    /**
     * Checks if the storage contains a specific object
     * @link https://php.net/manual/en/splobjectstorage.contains.php
     *
     * @param TObject $object The object to look for.
     * @return bool true if the object is in the storage, false otherwise.
     *
     * @since 5.1.0
     */
    public function contains($object) {}

    /**
     * Adds all objects from another storage
     * @link https://php.net/manual/en/splobjectstorage.addall.php
     *
     * @param SplObjectStorage<TObject, TArrayValue> $storage The storage you want to import.
     * @return void
     *
     * @since 5.3.0
     */
    public function addAll($storage) {}

    /**
     * Removes objects contained in another storage from the current storage
     * @link https://php.net/manual/en/splobjectstorage.removeall.php
     *
     * @param SplObjectStorage<TObject, TArrayValue> $storage The storage containing the elements to remove.
     * @return void
     *
     * @since 5.3.0
     */
    public function removeAll($storage) {}

    /**
     * Removes all objects except for those contained in another storage from the current storage
     * @link https://php.net/manual/en/splobjectstorage.removeallexcept.php
     *
     * @param SplObjectStorage<TObject, TArrayValue> $storage The storage containing the elements to retain in the current storage.
     * @return void
     *
     * @since 5.3.6
     */
    public function removeAllExcept($storage) {}

    /**
     * Returns the data associated with the current iterator entry
     * @link https://php.net/manual/en/splobjectstorage.getinfo.php
     *
     * @return TArrayValue The data associated with the current iterator position.
     *
     * @since 5.3.0
     */
    public function getInfo() {}

    /**
     * Sets the data associated with the current iterator entry
     * @link https://php.net/manual/en/splobjectstorage.setinfo.php
     *
     * @param TArrayValue $data The data to associate with the current iterator entry.
     * @return void
     *
     * @since 5.3.0
     */
    public function setInfo($data) {}

    /**
     * Returns the number of objects in the storage
     * @link https://php.net/manual/en/splobjectstorage.count.php
     *
     * @return int The number of objects in the storage.
     *
     * @since 5.1.0
     */
    public function count() {}

    /**
     * Rewind the iterator to the first storage element
     * @link https://php.net/manual/en/splobjectstorage.rewind.php
     *
     * @return void
     *
     * @since 5.1.0
     */
    public function rewind() {}

    /**
     * Returns if the current iterator entry is valid
     * @link https://php.net/manual/en/splobjectstorage.valid.php
     *
     * @return bool true if the iterator entry is valid, false otherwise.
     *
     * @since 5.1.0
     */
    public function valid() {}

    /**
     * Returns the index at which the iterator currently is
     * @link https://php.net/manual/en/splobjectstorage.key.php
     *
     * @return int The index corresponding to the position of the iterator.
     *
     * @since 5.1.0
     */
    public function key() {}

    /**
     * Returns the current storage entry
     * @link https://php.net/manual/en/splobjectstorage.current.php
     *
     * @return TObject The object at the current iterator position.
     *
     * @since 5.1.0
     */
    public function current() {}

    /**
     * Move to the next entry
     * @link https://php.net/manual/en/splobjectstorage.next.php
     *
     * @return void
     *
     * @since 5.1.0
     */
    public function next() {}

    /**
     * Unserializes a storage from its string representation
     * @link https://php.net/manual/en/splobjectstorage.unserialize.php
     *
     * @param string $serialized The serialized representation of a storage.
     * @return void
     *
     * @since 5.2.2
     */
    public function unserialize($serialized) {}

    /**
     * Serializes the storage
     * @link https://php.net/manual/en/splobjectstorage.serialize.php
     *
     * @return string A string representing the storage.
     *
     * @since 5.2.2
     */
    public function serialize() {}

    /**
     * Checks whether an object exists in the storage
     * @link https://php.net/manual/en/splobjectstorage.offsetexists.php
     *
     * @param TObject $object The object to look for.
     * @return bool true if the object exists in the storage, and false otherwise.
     *
     * @since 5.3.0
     */
    public function offsetExists($object) {}

    /**
     * Associates data to an object in the storage
     * @link https://php.net/manual/en/splobjectstorage.offsetset.php
     *
     * @param TObject $object The object to associate data with.
     * @param TArrayValue|null $data [optional] The data to associate with the object.
     * @return void
     *
     * @since 5.3.0
     */
    public function offsetSet($object, $data = null) {}

    /**
     * Removes an object from the storage
     * @link https://php.net/manual/en/splobjectstorage.offsetunset.php
     *
     * @param TObject $object The object to remove.
     * @return void
     *
     * @since 5.3.0
     */
    public function offsetUnset($object) {}

    /**
     * Returns the data associated with an <type>object</type>
     * @link https://php.net/manual/en/splobjectstorage.offsetget.php
     *
     * @param TObject $object The object to look for.
     * @return TArrayValue The data previously associated with the object in the storage.
     *
     * @since 5.3.0
     */
    public function offsetGet($object) {}

    /**
     * Calculate a unique identifier for the contained objects
     * @link https://php.net/manual/en/splobjectstorage.gethash.php
     *
     * @param object $object object whose identifier is to be calculated.
     * @return string A string with the calculated identifier.
     *
     * @since 5.4.0
     */
    public function getHash($object) {}

}

/**
 * @template-covariant T as object
 *
 * @property-read class-string<T> $name
 */
class ReflectionClass implements Reflector {

    /**
     * @var class-string<T>
     */
    public $name;

    /**
     * @param T|class-string<T>|trait-string $argument
     */
    public function __construct($argument) {}

    /**
     * @return class-string<T>
     */
    public function getName(): string;

    /**
     * @param mixed ...$args
     *
     * @return T
     */
    public function newInstance(...$args): object {}

    /**
     * @param array<int, mixed> $args
     *
     * @return T
     */
    public function newInstanceArgs(array $args): object {}

    /**
     * @return T
     */
    public function newInstanceWithoutConstructor(): object;

    /**
     * @return ?array<string>
     * @psalm-ignore-nullable-return
     */
    public function getTraitNames(): array {}

    /**
     * @since 8.0
     * @template TClass as object
     * @param class-string<TClass>|null $name
     * @return array<ReflectionAttribute<TClass>>
     */
    public function getAttributes(?string $name = null, int $flags = 0): array {}
}

class ReflectionFunction implements Reflector
{
    /**
     * @since 8.0
     * @template TClass as object
     * @param class-string<TClass>|null $name
     * @return array<ReflectionAttribute<TClass>>
     */
    public function getAttributes(?string $name = null, int $flags = 0): array {}
}

class ReflectionProperty implements Reflector
{
    /**
     * @since 8.0
     * @template TClass as object
     * @param class-string<TClass>|null $name
     * @return array<ReflectionAttribute<TClass>>
     */
    public function getAttributes(?string $name = null, int $flags = 0): array {}
}

class ReflectionMethod implements Reflector
{
    /**
     * @since 8.0
     * @template TClass as object
     * @param class-string<TClass>|null $name
     * @return array<ReflectionAttribute<TClass>>
     */
    public function getAttributes(?string $name = null, int $flags = 0): array {}
}

class ReflectionClassConstant
{
    /**
     * @since 8.0
     * @template TClass as object
     * @param class-string<TClass>|null $name
     * @return array<ReflectionAttribute<TClass>>
     */
    public function getAttributes(?string $name = null, int $flags = 0): array {}
}

/**
 * @template-covariant T as object
 * @psalm-immutable
 */
final class WeakReference
{
    // always fail
    public function __construct();

    /**
     * @template TIn as object
     * @param TIn $referent
     * @return WeakReference<TIn>
     */
    public static function create(object $referent): WeakReference;

    /** @return ?T */
    public function get(): ?object;
}

class SimpleXMLElement implements \Countable, \RecursiveIterator, \ArrayAccess
{
    /** @return array */
    public function getNamespaces(bool $recursive = false)
    {
    }
    /** @return array|false */
    public function getDocNamespaces(bool $recursive = false, bool $fromRoot = true)
    {
    }
    /** @return SimpleXMLIterator */
    public function children(?string $namespaceOrPrefix = null, bool $isPrefix = false)
    {
    }
    /** @return SimpleXMLIterator */
    public function attributes(?string $namespaceOrPrefix = null, bool $isPrefix = false)
    {
    }
    public function __construct(string $data, int $options = 0, bool $dataIsURL = false, string $namespaceOrPrefix = "", bool $isPrefix = false)
    {
    }
    /** @return SimpleXMLElement */
    public function addChild(string $qualifiedName, ?string $value = null, ?string $namespace = null)
    {
    }
    /** @return SimpleXMLElement */
    public function addAttribute(string $qualifiedName, ?string $value = null, ?string $namespace = null)
    {
    }
    /** @return string */
    public function getName()
    {
    }
    public function __toString() : string
    {
    }
    /** @return int */
    public function count()
    {
    }
    /** @return void */
    public function rewind()
    {
    }
    /** @return bool */
    public function valid()
    {
    }

    /** @return SimpleXMLElement */
    public function current()
    {
    }
    /** @return string|false */
    public function key()
    {
    }
    /** @return void */
    public function next()
    {
    }
    /** @return bool */
    public function hasChildren()
    {
    }
    /** @return SimpleXMLElement|null */
    public function getChildren()
    {
    }

    public function offsetExists($offset)
    {
    }

    public function offsetGet($offset)
    {
    }

    public function offsetSet($offset, $value)
    {
    }

    public function offsetUnset($offset)
    {
    }
}

interface Serializable {
    /**
     * @return string the string representation of the object or null
     */
    public function serialize();

    /**
     * @param string $serialized <p>
     * @return void
     */
    public function unserialize($serialized);
}
