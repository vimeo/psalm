<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="dev-master@29b654e3e5d59c0fb5cc008d9a24026f1fd8592d">
  <file src="examples/TemplateChecker.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$comment_block-&gt;tags['variablesfrom'][0]</code>
      <code>$matches[1]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="examples/TemplateScanner.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$comment_block-&gt;tags['variablesfrom'][0]</code>
      <code>$matches[1]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Codebase.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$const_name</code>
      <code>$const_name</code>
      <code>$matches[0]</code>
      <code>$property_name</code>
      <code>$symbol_name</code>
      <code>$symbol_parts[1]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Config/FileFilter.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>explode('::', $method_id)[1]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/ErrorBaseline.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$matches[1]</code>
      <code>$matches[2]</code>
      <code>$matches[3]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/ClassAnalyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$comments[0]</code>
      <code>$property_name</code>
      <code>$stmt-&gt;props[0]</code>
      <code>$uninitialized_variables[0]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/ClassLikeAnalyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$property_name</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/ProjectAnalyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$destination_parts[1]</code>
      <code>$destination_parts[1]</code>
      <code>$destination_parts[1]</code>
      <code>$php_minor_version</code>
      <code>$source_parts[1]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Block/ForAnalyzer.php">
    <ArgumentTypeCoercion>
      <code>$stmt-&gt;cond</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Block/ForeachAnalyzer.php">
    <ConflictingReferenceConstraint>
      <code>if (AtomicTypeComparator::isContainedBy(</code>
      <code>if (AtomicTypeComparator::isContainedBy(</code>
    </ConflictingReferenceConstraint>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Block/SwitchAnalyzer.php">
    <InvalidPropertyAssignmentValue>
      <code>$context-&gt;assigned_var_ids += $switch_scope-&gt;new_assigned_var_ids</code>
    </InvalidPropertyAssignmentValue>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Block/SwitchCaseAnalyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$new_case_equality_expr-&gt;getArgs()[1]</code>
      <code>$switch_scope-&gt;leftover_statements[0]</code>
      <code>$traverser-&gt;traverse([$switch_condition])[0]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/AssertionFinder.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$assertion-&gt;rule[0]</code>
      <code>$assertion-&gt;rule[0]</code>
      <code>$assertion-&gt;rule[0]</code>
      <code>$assertion-&gt;rule[0]</code>
      <code>$assertion-&gt;rule[0]</code>
      <code>$assertion-&gt;rule[0]</code>
      <code>$assertion-&gt;rule[0]</code>
      <code>$count_expr-&gt;getArgs()[0]</code>
      <code>$count_expr-&gt;getArgs()[0]</code>
      <code>$count_expr-&gt;getArgs()[0]</code>
      <code>$count_expr-&gt;getArgs()[0]</code>
      <code>$count_expr-&gt;getArgs()[0]</code>
      <code>$counted_expr-&gt;getArgs()[0]</code>
      <code>$expr-&gt;getArgs()[0]</code>
      <code>$expr-&gt;getArgs()[0]</code>
      <code>$expr-&gt;getArgs()[0]</code>
      <code>$expr-&gt;getArgs()[0]</code>
      <code>$expr-&gt;getArgs()[0]</code>
      <code>$expr-&gt;getArgs()[0]</code>
      <code>$expr-&gt;getArgs()[0]</code>
      <code>$expr-&gt;getArgs()[0]</code>
      <code>$expr-&gt;getArgs()[1]</code>
      <code>$expr-&gt;getArgs()[1]</code>
      <code>$get_debug_type_expr-&gt;getArgs()[0]</code>
      <code>$get_debug_type_expr-&gt;getArgs()[0]</code>
      <code>$getclass_expr-&gt;getArgs()[0]</code>
      <code>$gettype_expr-&gt;getArgs()[0]</code>
      <code>$gettype_expr-&gt;getArgs()[0]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/Assignment/StaticPropertyAssignmentAnalyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$new_property_name</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/BinaryOp/ArithmeticOpAnalyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$invalid_left_messages[0]</code>
      <code>$invalid_right_messages[0]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/Call/ArgumentAnalyzer.php">
    <ComplexMethod>
      <code>verifyType</code>
    </ComplexMethod>
    <PossiblyUndefinedIntArrayOffset>
      <code>$method_name</code>
      <code>$parts[1]</code>
      <code>explode('::', $cased_method_id)[1]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/Call/ArrayFunctionArgumentsAnalyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$args[0]</code>
      <code>$args[0]</code>
      <code>$args[1]</code>
      <code>$callmap_callables[0]</code>
      <code>$method_name</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/Call/FunctionCallAnalyzer.php">
    <PossiblyUndefinedArrayOffset>
      <code>$stmt-&gt;getArgs()[0]</code>
    </PossiblyUndefinedArrayOffset>
    <PossiblyUndefinedIntArrayOffset>
      <code>$parts[1]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/Call/FunctionCallReturnTypeFetcher.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$method</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/Call/MethodCallAnalyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$result-&gt;invalid_method_call_types[0]</code>
      <code>$result-&gt;non_existent_class_method_ids[0]</code>
      <code>$result-&gt;non_existent_class_method_ids[0]</code>
      <code>$result-&gt;non_existent_interface_method_ids[0]</code>
      <code>$result-&gt;non_existent_interface_method_ids[0]</code>
      <code>$result-&gt;non_existent_magic_method_ids[0]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/Call/StaticMethod/ExistingAtomicStaticCallAnalyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$new_method_name</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/CallAnalyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$callable_arg-&gt;items[0]</code>
      <code>$callable_arg-&gt;items[1]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/ClassConstAnalyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$new_const_name</code>
      <code>$new_const_name</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/Fetch/ArrayFetchAnalyzer.php">
    <ReferenceConstraintViolation>
      <code>$stmt_type</code>
      <code>$stmt_type</code>
      <code>$stmt_type</code>
    </ReferenceConstraintViolation>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/Fetch/AtomicPropertyFetchAnalyzer.php">
    <ReferenceConstraintViolation>
      <code>$stmt_type</code>
    </ReferenceConstraintViolation>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/Fetch/InstancePropertyFetchAnalyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$invalid_fetch_types[0]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/Fetch/StaticPropertyFetchAnalyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$new_property_name</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/YieldAnalyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$atomic_return_type-&gt;type_params[2]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/ReturnAnalyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$method_name</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/UnusedAssignmentRemover.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$token_list[$iter]</code>
      <code>$token_list[$iter]</code>
      <code>$token_list[$iter]</code>
      <code>$token_list[$iter]</code>
      <code>$token_list[0]</code>
      <code>$token_list[1]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/StatementsAnalyzer.php">
    <PossiblyUndefinedArrayOffset>
      <code>$stmt-&gt;expr-&gt;getArgs()[0]</code>
    </PossiblyUndefinedArrayOffset>
    <PossiblyUndefinedIntArrayOffset>
      <code>$check_type_string</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Cli/LanguageServer.php">
    <PossiblyInvalidArgument>
      <code>$options['tcp'] ?? null</code>
    </PossiblyInvalidArgument>
  </file>
  <file src="src/Psalm/Internal/Cli/Refactor.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$identifier_name</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Codebase/Analyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$trait</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Codebase/ClassLikes.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$destination_name</code>
      <code>$destination_name</code>
      <code>$destination_name</code>
      <code>$source_const_name</code>
      <code>$stub</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Codebase/Functions.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$stub</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Codebase/InternalCallMapHandler.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$callables[0]</code>
      <code>$callables[0]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Codebase/Methods.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$function_callables[0]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Codebase/Properties.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$property_name</code>
      <code>$property_name</code>
      <code>$property_name</code>
      <code>$property_name</code>
      <code>$property_name</code>
      <code>$property_name</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Diff/ClassStatementsDiffer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$a-&gt;props[0]</code>
      <code>$a-&gt;stmts[0]</code>
      <code>$a_stmt_comments[0]</code>
      <code>$b-&gt;props[0]</code>
      <code>$b-&gt;stmts[0]</code>
      <code>$b_stmt_comments[0]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Diff/FileDiffer.php">
    <InvalidArrayOffset>
      <code>$b[$y]</code>
    </InvalidArrayOffset>
  </file>
  <file src="src/Psalm/Internal/ExecutionEnvironment/GitInfoCollector.php">
    <PossiblyUndefinedArrayOffset>
      <code>$exploded[1]</code>
      <code>$url</code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="src/Psalm/Internal/FileManipulation/PropertyDocblockManipulator.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$stmt-&gt;props[0]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/LanguageServer/LanguageClient.php">
    <DocblockTypeContradiction>
      <code>$type &lt; 1</code>
      <code>$type &lt; 1 || $type &gt; 4</code>
      <code>$type &gt; 4</code>
    </DocblockTypeContradiction>
  </file>
  <file src="src/Psalm/Internal/LanguageServer/LanguageServer.php">
    <PossiblyUnusedParam>
      <code>$capabilities</code>
      <code>$processId</code>
    </PossiblyUnusedParam>
  </file>
  <file src="src/Psalm/Internal/LanguageServer/Message.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$pair[1]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/LanguageServer/ProtocolStreamReader.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$parts[1]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/LanguageServer/Server/TextDocument.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$contentChanges[0]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/MethodIdentifier.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$method_id_parts[1]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/PhpVisitor/PartialParserVisitor.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$cs[0]</code>
      <code>$match[0]</code>
      <code>$match[1]</code>
      <code>$match[2]</code>
      <code>$node-&gt;stmts[0]</code>
      <code>$replacement_stmts[0]</code>
      <code>$replacement_stmts[0]</code>
      <code>$replacement_stmts[0]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/PhpVisitor/Reflector/ClassLikeDocblockParser.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$doc_line_parts[1]</code>
      <code>$matches[0]</code>
      <code>$method_tree-&gt;children[0]</code>
      <code>$method_tree-&gt;children[1]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/PhpVisitor/Reflector/ClassLikeNodeScanner.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$l[4]</code>
      <code>$r[4]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/PhpVisitor/Reflector/ExpressionScanner.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$node-&gt;getArgs()[0]</code>
      <code>$node-&gt;getArgs()[1]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/PhpVisitor/Reflector/FunctionLikeDocblockParser.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$since_parts[1]</code>
    </PossiblyUndefinedIntArrayOffset>
    <RedundantCondition>
      <code>count($line_parts) &gt; 0</code>
    </RedundantCondition>
  </file>
  <file src="src/Psalm/Internal/PhpVisitor/Reflector/FunctionLikeDocblockScanner.php">
    <PossiblyInvalidArrayOffset>
      <code>$fixed_type_tokens[$i - 1]</code>
    </PossiblyInvalidArrayOffset>
    <PossiblyUndefinedArrayOffset>
      <code>$source_param_string</code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="src/Psalm/Internal/PhpVisitor/Reflector/FunctionLikeNodeScanner.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$stmt-&gt;stmts[0]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/PhpVisitor/SimpleNameResolver.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$cs[0]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Provider/ReturnTypeProvider/ArrayMapReturnTypeProvider.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$callable_method_name</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Provider/ReturnTypeProvider/ArrayMergeReturnTypeProvider.php">
    <InvalidArgument>
      <code>$class_strings ?: null</code>
    </InvalidArgument>
  </file>
  <file src="src/Psalm/Internal/Provider/ReturnTypeProvider/ArrayReduceReturnTypeProvider.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$method_name</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Type/Comparator/AtomicTypeComparator.php">
    <ComplexMethod>
      <code>isContainedBy</code>
    </ComplexMethod>
    <PossiblyUndefinedIntArrayOffset>
      <code>$array-&gt;properties[0]</code>
      <code>$array-&gt;properties[0]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Type/Comparator/CallableTypeComparator.php">
    <LessSpecificReturnStatement>
      <code>$callable</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code>TCallable|TClosure|null</code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Psalm/Internal/Type/SimpleAssertionReconciler.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$array_atomic_type-&gt;properties[0]</code>
      <code>$properties[0]</code>
      <code>$properties[0]</code>
      <code>$properties[0]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Type/TemplateStandinTypeReplacer.php">
    <ImpureMethodCall>
      <code>getClassTemplateTypes</code>
      <code>has</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Psalm/Internal/Type/TypeCombiner.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$combination-&gt;array_type_params[1]</code>
      <code>$combination-&gt;array_type_params[1]</code>
      <code>$combination-&gt;array_type_params[1]</code>
      <code>$combination-&gt;array_type_params[1]</code>
      <code>$combination-&gt;array_type_params[1]</code>
      <code>$combination-&gt;array_type_params[1]</code>
      <code>$combination-&gt;array_type_params[1]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Type/TypeExpander.php">
    <InvalidArgument>
      <code>$fallback_params</code>
    </InvalidArgument>
  </file>
  <file src="src/Psalm/Internal/Type/TypeParser.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$const_name</code>
      <code>$const_name</code>
      <code>$intersection_types[0]</code>
      <code>$parse_tree-&gt;children[0]</code>
      <code>$parse_tree-&gt;condition-&gt;children[0]</code>
      <code>array_keys($offset_template_data)[0]</code>
      <code>array_keys($template_type_map[$array_param_name])[0]</code>
      <code>array_keys($template_type_map[$class_name])[0]</code>
      <code>array_keys($template_type_map[$fq_classlike_name])[0]</code>
      <code>array_keys($template_type_map[$template_param_name])[0]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Type/TypeTokenizer.php">
    <PossiblyInvalidArrayOffset>
      <code>$type_tokens[$i - 1]</code>
      <code>$type_tokens[$i - 1]</code>
      <code>$type_tokens[$i - 1]</code>
      <code>$type_tokens[$i - 1]</code>
    </PossiblyInvalidArrayOffset>
  </file>
  <file src="src/Psalm/Plugin/Shepherd.php">
    <DeprecatedProperty>
      <code>$codebase-&gt;config-&gt;shepherd_host</code>
    </DeprecatedProperty>
  </file>
  <file src="src/Psalm/Storage/ClassConstantStorage.php">
    <MutableDependency>
      <code>CustomMetadataTrait</code>
    </MutableDependency>
  </file>
  <file src="src/Psalm/Storage/FunctionLikeParameter.php">
    <ImpureMethodCall>
      <code>traverse</code>
      <code>traverse</code>
      <code>traverse</code>
      <code>traverse</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Psalm/Type.php">
    <ImpureStaticProperty>
      <code>self::$listKey</code>
    </ImpureStaticProperty>
  </file>
  <file src="src/Psalm/Type/Atomic.php">
    <ImpureMethodCall>
      <code>classExtendsOrImplements</code>
      <code>classExtendsOrImplements</code>
      <code>classExtendsOrImplements</code>
      <code>classOrInterfaceExists</code>
      <code>classOrInterfaceExists</code>
      <code>classOrInterfaceExists</code>
      <code>getMappedGenericTypeParams</code>
      <code>interfaceExtends</code>
      <code>interfaceExtends</code>
      <code>interfaceExtends</code>
      <code>traverse</code>
      <code>traverse</code>
    </ImpureMethodCall>
    <PossiblyUndefinedIntArrayOffset>
      <code>array_keys($template_type_map[$value])[0]</code>
    </PossiblyUndefinedIntArrayOffset>
    <ReferenceConstraintViolation>
      <code>$value</code>
    </ReferenceConstraintViolation>
  </file>
  <file src="src/Psalm/Type/Atomic/CallableTrait.php">
    <ImpureMethodCall>
      <code>replace</code>
      <code>replace</code>
      <code>replace</code>
      <code>replace</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Psalm/Type/Atomic/GenericTrait.php">
    <ImpureMethodCall>
      <code>getMappedGenericTypeParams</code>
      <code>replace</code>
      <code>replace</code>
    </ImpureMethodCall>
    <PossiblyUndefinedIntArrayOffset>
      <code>$this-&gt;type_params[1]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Type/Atomic/HasIntersectionTrait.php">
    <ImpureMethodCall>
      <code>getMostSpecificTypeFromBounds</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Psalm/Type/Atomic/TCallableList.php">
    <DeprecatedClass>
      <code>TNonEmptyList</code>
    </DeprecatedClass>
  </file>
  <file src="src/Psalm/Type/Atomic/TClassString.php">
    <ImpureMethodCall>
      <code>replace</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Psalm/Type/Atomic/TClassStringMap.php">
    <ImpureMethodCall>
      <code>getString</code>
      <code>getString</code>
      <code>replace</code>
      <code>replace</code>
    </ImpureMethodCall>
    <ImpurePropertyAssignment>
      <code>$cloned-&gt;value_param</code>
    </ImpurePropertyAssignment>
  </file>
  <file src="src/Psalm/Type/Atomic/TConditional.php">
    <ImpureMethodCall>
      <code>replace</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Psalm/Type/Atomic/TDependentListKey.php">
    <PossiblyUnusedMethod>
      <code>__construct</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Psalm/Type/Atomic/TKeyedArray.php">
    <DeprecatedClass>
      <code>TList</code>
      <code>new TList($this-&gt;getGenericValueType())</code>
      <code>new TNonEmptyList($this-&gt;getGenericValueType())</code>
    </DeprecatedClass>
    <ImpureMethodCall>
      <code>combine</code>
      <code>combine</code>
      <code>combineUnionTypes</code>
      <code>combineUnionTypes</code>
      <code>combineUnionTypes</code>
      <code>combineUnionTypes</code>
      <code>combineUnionTypes</code>
      <code>combineUnionTypes</code>
      <code>combineUnionTypes</code>
      <code>replace</code>
      <code>replace</code>
      <code>replace</code>
      <code>replace</code>
    </ImpureMethodCall>
    <ImpurePropertyAssignment>
      <code>$key_type-&gt;possibly_undefined</code>
    </ImpurePropertyAssignment>
    <PossiblyUndefinedIntArrayOffset>
      <code>$this-&gt;properties[0]</code>
      <code>$this-&gt;properties[0]</code>
      <code>$this-&gt;properties[0]</code>
    </PossiblyUndefinedIntArrayOffset>
    <PossiblyUnusedMethod>
      <code>getList</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Psalm/Type/Atomic/TList.php">
    <ImpureMethodCall>
      <code>replace</code>
      <code>replace</code>
    </ImpureMethodCall>
    <ImpurePropertyAssignment>
      <code>$cloned-&gt;type_param</code>
    </ImpurePropertyAssignment>
  </file>
  <file src="src/Psalm/Type/Atomic/TNonEmptyList.php">
    <DeprecatedClass>
      <code>TList</code>
    </DeprecatedClass>
    <PossiblyUnusedMethod>
      <code>setCount</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Psalm/Type/Atomic/TObjectWithProperties.php">
    <ImpureMethodCall>
      <code>replace</code>
      <code>replace</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Psalm/Type/Atomic/TTemplateKeyOf.php">
    <ImpureMethodCall>
      <code>replace</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Psalm/Type/Atomic/TTemplatePropertiesOf.php">
    <ImpureMethodCall>
      <code>replace</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Psalm/Type/Atomic/TTemplateValueOf.php">
    <ImpureMethodCall>
      <code>replace</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Psalm/Type/MutableUnion.php">
    <PossiblyUnusedProperty>
      <code>$allow_mutations</code>
      <code>$by_ref</code>
      <code>$failed_reconciliation</code>
      <code>$from_template_default</code>
      <code>$has_mutations</code>
      <code>$initialized_class</code>
      <code>$reference_free</code>
    </PossiblyUnusedProperty>
  </file>
  <file src="src/Psalm/Type/Reconciler.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$const_name</code>
      <code>$type[0]</code>
      <code>$type[0][0]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Type/TypeNode.php">
    <ReferenceConstraintViolation>
      <code>$node</code>
    </ReferenceConstraintViolation>
  </file>
  <file src="src/Psalm/Type/TypeVisitor.php">
    <ImpureMethodCall>
      <code>visit</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Psalm/Type/Union.php">
    <PossiblyUnusedProperty>
      <code>$ignore_isset</code>
    </PossiblyUnusedProperty>
  </file>
  <file src="src/Psalm/Type/UnionTrait.php">
    <ImpureMethodCall>
      <code>traverse</code>
      <code>traverse</code>
      <code>traverseArray</code>
      <code>traverseArray</code>
    </ImpureMethodCall>
    <MoreSpecificReturnType>
      <code>TArray|TKeyedArray|TClassStringMap</code>
    </MoreSpecificReturnType>
    <PossiblyUndefinedStringArrayOffset>
      <code>$this-&gt;types['array']</code>
    </PossiblyUndefinedStringArrayOffset>
    <PossiblyUnusedMethod>
      <code>allFloatLiterals</code>
      <code>allFloatLiterals</code>
      <code>hasLowercaseString</code>
      <code>hasLowercaseString</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="vendor/nikic/php-parser/lib/PhpParser/Node/Expr/ArrowFunction.php">
    <PossiblyUndefinedStringArrayOffset>
      <code>$subNodes['expr']</code>
    </PossiblyUndefinedStringArrayOffset>
  </file>
</files>
