<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="dev-master@1945e92b8517b2a068e3acce654348c72fa0523f">
  <file src="examples/TemplateChecker.php">
    <PossiblyUndefinedIntArrayOffset>
      <code><![CDATA[$comment_block->tags['variablesfrom'][0]]]></code>
      <code>$matches[1]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="examples/TemplateScanner.php">
    <PossiblyUndefinedIntArrayOffset>
      <code><![CDATA[$comment_block->tags['variablesfrom'][0]]]></code>
      <code>$matches[1]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Config.php">
    <PossiblyNullArgument>
      <code>$deprecated_element_xml</code>
    </PossiblyNullArgument>
    <PossiblyNullReference>
      <code>addAttribute</code>
    </PossiblyNullReference>
    <PropertyTypeCoercion>
      <code>$this</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Psalm/Config/FileFilter.php">
    <PossiblyUndefinedIntArrayOffset>
      <code><![CDATA[explode('::', $method_id)[1]]]></code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/ErrorBaseline.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$matches[1]</code>
      <code>$matches[2]</code>
      <code>$matches[3]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/ClassAnalyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$comments[0]</code>
      <code>$property_name</code>
      <code><![CDATA[$stmt->props[0]]]></code>
      <code>$uninitialized_variables[0]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/ClassLikeAnalyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$property_name</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/ProjectAnalyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$destination_parts[1]</code>
      <code>$destination_parts[1]</code>
      <code>$destination_parts[1]</code>
      <code>$php_minor_version</code>
      <code>$source_parts[1]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Block/ForAnalyzer.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$stmt->cond]]></code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Block/ForeachAnalyzer.php">
    <ConflictingReferenceConstraint>
      <code>if (AtomicTypeComparator::isContainedBy(</code>
      <code>if (AtomicTypeComparator::isContainedBy(</code>
    </ConflictingReferenceConstraint>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Block/SwitchAnalyzer.php">
    <InvalidPropertyAssignmentValue>
      <code><![CDATA[$context->assigned_var_ids += $switch_scope->new_assigned_var_ids]]></code>
    </InvalidPropertyAssignmentValue>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Block/SwitchCaseAnalyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code><![CDATA[$new_case_equality_expr->getArgs()[1]]]></code>
      <code><![CDATA[$switch_scope->leftover_statements[0]]]></code>
      <code><![CDATA[$traverser->traverse([$switch_condition])[0]]]></code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/AssertionFinder.php">
    <PossiblyUndefinedIntArrayOffset>
      <code><![CDATA[$assertion->rule[0]]]></code>
      <code><![CDATA[$assertion->rule[0]]]></code>
      <code><![CDATA[$assertion->rule[0]]]></code>
      <code><![CDATA[$assertion->rule[0]]]></code>
      <code><![CDATA[$assertion->rule[0]]]></code>
      <code><![CDATA[$assertion->rule[0]]]></code>
      <code><![CDATA[$assertion->rule[0]]]></code>
      <code><![CDATA[$count_expr->getArgs()[0]]]></code>
      <code><![CDATA[$count_expr->getArgs()[0]]]></code>
      <code><![CDATA[$count_expr->getArgs()[0]]]></code>
      <code><![CDATA[$count_expr->getArgs()[0]]]></code>
      <code><![CDATA[$count_expr->getArgs()[0]]]></code>
      <code><![CDATA[$counted_expr->getArgs()[0]]]></code>
      <code><![CDATA[$expr->getArgs()[0]]]></code>
      <code><![CDATA[$expr->getArgs()[0]]]></code>
      <code><![CDATA[$expr->getArgs()[0]]]></code>
      <code><![CDATA[$expr->getArgs()[0]]]></code>
      <code><![CDATA[$expr->getArgs()[0]]]></code>
      <code><![CDATA[$expr->getArgs()[0]]]></code>
      <code><![CDATA[$expr->getArgs()[0]]]></code>
      <code><![CDATA[$expr->getArgs()[0]]]></code>
      <code><![CDATA[$expr->getArgs()[1]]]></code>
      <code><![CDATA[$expr->getArgs()[1]]]></code>
      <code><![CDATA[$get_debug_type_expr->getArgs()[0]]]></code>
      <code><![CDATA[$get_debug_type_expr->getArgs()[0]]]></code>
      <code><![CDATA[$getclass_expr->getArgs()[0]]]></code>
      <code><![CDATA[$gettype_expr->getArgs()[0]]]></code>
      <code><![CDATA[$gettype_expr->getArgs()[0]]]></code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/Assignment/StaticPropertyAssignmentAnalyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$new_property_name</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/AssignmentAnalyzer.php">
    <UnsupportedPropertyReferenceUsage>
      <code><![CDATA[$context->vars_in_scope[$lhs_var_id] = &$context->vars_in_scope[$rhs_var_id]]]></code>
    </UnsupportedPropertyReferenceUsage>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/BinaryOp/ArithmeticOpAnalyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$invalid_left_messages[0]</code>
      <code>$invalid_right_messages[0]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/Call/ArgumentAnalyzer.php">
    <ComplexMethod>
      <code>verifyType</code>
    </ComplexMethod>
    <PossiblyUndefinedIntArrayOffset>
      <code>$method_name</code>
      <code>$parts[1]</code>
      <code><![CDATA[explode('::', $cased_method_id)[1]]]></code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/Call/ArrayFunctionArgumentsAnalyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$args[0]</code>
      <code>$args[0]</code>
      <code>$args[1]</code>
      <code>$method_name</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/Call/FunctionCallAnalyzer.php">
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$stmt->getArgs()[0]]]></code>
    </PossiblyUndefinedArrayOffset>
    <PossiblyUndefinedIntArrayOffset>
      <code>$parts[1]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/Call/FunctionCallReturnTypeFetcher.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$method</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/Call/MethodCallAnalyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code><![CDATA[$result->invalid_method_call_types[0]]]></code>
      <code><![CDATA[$result->non_existent_class_method_ids[0]]]></code>
      <code><![CDATA[$result->non_existent_class_method_ids[0]]]></code>
      <code><![CDATA[$result->non_existent_interface_method_ids[0]]]></code>
      <code><![CDATA[$result->non_existent_interface_method_ids[0]]]></code>
      <code><![CDATA[$result->non_existent_magic_method_ids[0]]]></code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/Call/StaticMethod/ExistingAtomicStaticCallAnalyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$new_method_name</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/CallAnalyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code><![CDATA[$callable_arg->items[0]]]></code>
      <code><![CDATA[$callable_arg->items[1]]]></code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/ClassConstAnalyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$new_const_name</code>
      <code>$new_const_name</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/Fetch/ArrayFetchAnalyzer.php">
    <ReferenceConstraintViolation>
      <code>$stmt_type</code>
      <code>$stmt_type</code>
      <code>$stmt_type</code>
    </ReferenceConstraintViolation>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/Fetch/AtomicPropertyFetchAnalyzer.php">
    <ReferenceConstraintViolation>
      <code>$stmt_type</code>
    </ReferenceConstraintViolation>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/Fetch/InstancePropertyFetchAnalyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$invalid_fetch_types[0]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/Fetch/StaticPropertyFetchAnalyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$new_property_name</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/Expression/YieldAnalyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code><![CDATA[$atomic_return_type->type_params[2]]]></code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/ReturnAnalyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$method_name</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/Statements/UnusedAssignmentRemover.php">
    <PossiblyUndefinedArrayOffset>
      <code>$token_list[$iter]</code>
    </PossiblyUndefinedArrayOffset>
    <PossiblyUndefinedIntArrayOffset>
      <code>$token_list[$iter]</code>
      <code>$token_list[$iter]</code>
      <code>$token_list[$iter]</code>
      <code>$token_list[$iter]</code>
      <code>$token_list[0]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Analyzer/StatementsAnalyzer.php">
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$stmt->expr->getArgs()[0]]]></code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Cli/Refactor.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$identifier_name</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Codebase/Analyzer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$trait</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Codebase/ClassLikes.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$destination_name</code>
      <code>$destination_name</code>
      <code>$destination_name</code>
      <code>$source_const_name</code>
      <code>$stub</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Codebase/Functions.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$stub</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Codebase/Methods.php">
    <InvalidArgument>
      <code><![CDATA[$class_storage->methods[$declaring_method_name]->stubbed]]></code>
    </InvalidArgument>
  </file>
  <file src="src/Psalm/Internal/Codebase/Populator.php">
    <InvalidArgument>
      <code><![CDATA[$storage->methods[$implementing_method_id->method_name]->abstract]]></code>
    </InvalidArgument>
  </file>
  <file src="src/Psalm/Internal/Codebase/Properties.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$property_name</code>
      <code>$property_name</code>
      <code>$property_name</code>
      <code>$property_name</code>
      <code>$property_name</code>
      <code>$property_name</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Diff/ClassStatementsDiffer.php">
    <PossiblyUndefinedIntArrayOffset>
      <code><![CDATA[$a->props[0]]]></code>
      <code><![CDATA[$a->stmts[0]]]></code>
      <code>$a_stmt_comments[0]</code>
      <code><![CDATA[$b->props[0]]]></code>
      <code><![CDATA[$b->stmts[0]]]></code>
      <code>$b_stmt_comments[0]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Diff/FileDiffer.php">
    <InvalidArrayOffset>
      <code>$b[$y]</code>
    </InvalidArrayOffset>
  </file>
  <file src="src/Psalm/Internal/ExecutionEnvironment/GitInfoCollector.php">
    <PossiblyUndefinedArrayOffset>
      <code>$exploded[1]</code>
      <code>$url</code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="src/Psalm/Internal/FileManipulation/PropertyDocblockManipulator.php">
    <PossiblyUndefinedIntArrayOffset>
      <code><![CDATA[$stmt->props[0]]]></code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Fork/Pool.php">
    <PossiblyFalseArgument>
      <code>$buffer</code>
    </PossiblyFalseArgument>
  </file>
  <file src="src/Psalm/Internal/LanguageServer/LanguageClient.php">
    <InvalidArrayAccess>
      <code>$config</code>
    </InvalidArrayAccess>
    <InvalidArrayOffset>
      <code>[$config]</code>
    </InvalidArrayOffset>
  </file>
  <file src="src/Psalm/Internal/LanguageServer/LanguageServer.php">
    <MixedAssignment>
      <code>$result</code>
    </MixedAssignment>
  </file>
  <file src="src/Psalm/Internal/MethodIdentifier.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$method_id_parts[1]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/PhpVisitor/PartialParserVisitor.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$cs[0]</code>
      <code>$match[0]</code>
      <code>$match[1]</code>
      <code>$match[2]</code>
      <code><![CDATA[$node->stmts[0]]]></code>
      <code>$replacement_stmts[0]</code>
      <code>$replacement_stmts[0]</code>
      <code>$replacement_stmts[0]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/PhpVisitor/Reflector/ClassLikeDocblockParser.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$doc_line_parts[1]</code>
      <code>$matches[0]</code>
      <code><![CDATA[$method_tree->children[0]]]></code>
      <code><![CDATA[$method_tree->children[1]]]></code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/PhpVisitor/Reflector/ClassLikeNodeScanner.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$l[4]</code>
      <code>$r[4]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/PhpVisitor/Reflector/ExpressionScanner.php">
    <PossiblyUndefinedIntArrayOffset>
      <code><![CDATA[$node->getArgs()[0]]]></code>
      <code><![CDATA[$node->getArgs()[1]]]></code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/PhpVisitor/Reflector/FunctionLikeDocblockParser.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$since_parts[1]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/PhpVisitor/Reflector/FunctionLikeDocblockScanner.php">
    <PossiblyUndefinedArrayOffset>
      <code>$source_param_string</code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="src/Psalm/Internal/PhpVisitor/Reflector/FunctionLikeNodeScanner.php">
    <PossiblyUndefinedIntArrayOffset>
      <code><![CDATA[$stmt->stmts[0]]]></code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/PhpVisitor/SimpleNameResolver.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$cs[0]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Provider/ReturnTypeProvider/ArrayMapReturnTypeProvider.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$callable_method_name</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Provider/ReturnTypeProvider/ArrayMergeReturnTypeProvider.php">
    <InvalidArgument>
      <code>$class_strings ?: null</code>
    </InvalidArgument>
  </file>
  <file src="src/Psalm/Internal/Provider/ReturnTypeProvider/ArrayReduceReturnTypeProvider.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$method_name</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Type/Comparator/AtomicTypeComparator.php">
    <PossiblyUndefinedIntArrayOffset>
      <code><![CDATA[$array->properties[0]]]></code>
      <code><![CDATA[$array->properties[0]]]></code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Type/Comparator/CallableTypeComparator.php">
    <LessSpecificReturnStatement>
      <code>$callable</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code>TCallable|TClosure|null</code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Psalm/Internal/Type/SimpleAssertionReconciler.php">
    <PossiblyUndefinedIntArrayOffset>
      <code><![CDATA[$array_atomic_type->properties[0]]]></code>
      <code>$properties[0]</code>
      <code>$properties[0]</code>
      <code>$properties[0]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Type/TemplateStandinTypeReplacer.php">
    <ImpureMethodCall>
      <code>getClassTemplateTypes</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Psalm/Internal/Type/TypeCombiner.php">
    <PossiblyUndefinedIntArrayOffset>
      <code><![CDATA[$combination->array_type_params[1]]]></code>
      <code><![CDATA[$combination->array_type_params[1]]]></code>
      <code><![CDATA[$combination->array_type_params[1]]]></code>
      <code><![CDATA[$combination->array_type_params[1]]]></code>
      <code><![CDATA[$combination->array_type_params[1]]]></code>
      <code><![CDATA[$combination->array_type_params[1]]]></code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Type/TypeExpander.php">
    <InvalidArgument>
      <code>$fallback_params</code>
    </InvalidArgument>
  </file>
  <file src="src/Psalm/Internal/Type/TypeParser.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$const_name</code>
      <code>$const_name</code>
      <code><![CDATA[$parse_tree->children[0]]]></code>
      <code><![CDATA[$parse_tree->condition->children[0]]]></code>
      <code>array_keys($offset_template_data)[0]</code>
      <code>array_keys($template_type_map[$array_param_name])[0]</code>
      <code>array_keys($template_type_map[$class_name])[0]</code>
      <code>array_keys($template_type_map[$fq_classlike_name])[0]</code>
      <code>array_keys($template_type_map[$template_param_name])[0]</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Internal/Type/TypeTokenizer.php">
    <PossiblyInvalidArrayOffset>
      <code>$type_tokens[$i - 1]</code>
      <code>$type_tokens[$i - 1]</code>
      <code>$type_tokens[$i - 1]</code>
      <code>$type_tokens[$i - 1]</code>
    </PossiblyInvalidArrayOffset>
  </file>
  <file src="src/Psalm/Storage/ClassConstantStorage.php">
    <MutableDependency>
      <code>CustomMetadataTrait</code>
    </MutableDependency>
  </file>
  <file src="src/Psalm/Storage/FunctionLikeParameter.php">
    <ImpureMethodCall>
      <code>traverse</code>
      <code>traverse</code>
      <code>traverse</code>
      <code>traverse</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Psalm/Type/Atomic.php">
    <ImpureMethodCall>
      <code>classOrInterfaceExists</code>
      <code>classOrInterfaceExists</code>
      <code>classOrInterfaceExists</code>
      <code>getMappedGenericTypeParams</code>
      <code>interfaceExtends</code>
      <code>interfaceExtends</code>
      <code>interfaceExtends</code>
      <code>traverse</code>
      <code>traverse</code>
    </ImpureMethodCall>
    <PossiblyUndefinedIntArrayOffset>
      <code>array_keys($template_type_map[$value])[0]</code>
    </PossiblyUndefinedIntArrayOffset>
    <ReferenceConstraintViolation>
      <code>$value</code>
    </ReferenceConstraintViolation>
  </file>
  <file src="src/Psalm/Type/Atomic/CallableTrait.php">
    <ImpureMethodCall>
      <code>replace</code>
      <code>replace</code>
      <code>replace</code>
      <code>replace</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Psalm/Type/Atomic/GenericTrait.php">
    <ImpureMethodCall>
      <code>getMappedGenericTypeParams</code>
      <code>replace</code>
      <code>replace</code>
    </ImpureMethodCall>
    <PossiblyUndefinedIntArrayOffset>
      <code><![CDATA[$this->type_params[1]]]></code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Type/Atomic/HasIntersectionTrait.php">
    <ImpureMethodCall>
      <code>getMostSpecificTypeFromBounds</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Psalm/Type/Atomic/TClassString.php">
    <ImpureMethodCall>
      <code>replace</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Psalm/Type/Atomic/TClassStringMap.php">
    <ImpureMethodCall>
      <code>getString</code>
      <code>getString</code>
      <code>replace</code>
      <code>replace</code>
    </ImpureMethodCall>
    <ImpurePropertyAssignment>
      <code><![CDATA[$cloned->value_param]]></code>
    </ImpurePropertyAssignment>
  </file>
  <file src="src/Psalm/Type/Atomic/TConditional.php">
    <ImpureMethodCall>
      <code>replace</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Psalm/Type/Atomic/TKeyedArray.php">
    <ImpureMethodCall>
      <code>combine</code>
      <code>combine</code>
      <code>combineUnionTypes</code>
      <code>combineUnionTypes</code>
      <code>combineUnionTypes</code>
      <code>combineUnionTypes</code>
      <code>combineUnionTypes</code>
      <code>combineUnionTypes</code>
      <code>combineUnionTypes</code>
      <code>replace</code>
      <code>replace</code>
      <code>replace</code>
      <code>replace</code>
    </ImpureMethodCall>
    <ImpurePropertyAssignment>
      <code><![CDATA[$key_type->possibly_undefined]]></code>
    </ImpurePropertyAssignment>
    <PossiblyUndefinedIntArrayOffset>
      <code><![CDATA[$this->properties[0]]]></code>
      <code><![CDATA[$this->properties[0]]]></code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Type/Atomic/TObjectWithProperties.php">
    <ImpureMethodCall>
      <code>replace</code>
      <code>replace</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Psalm/Type/Atomic/TTemplateKeyOf.php">
    <ImpureMethodCall>
      <code>replace</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Psalm/Type/Atomic/TTemplatePropertiesOf.php">
    <ImpureMethodCall>
      <code>replace</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Psalm/Type/Atomic/TTemplateValueOf.php">
    <ImpureMethodCall>
      <code>replace</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Psalm/Type/MutableUnion.php">
    <PossiblyUnusedProperty>
      <code>$allow_mutations</code>
      <code>$by_ref</code>
      <code>$failed_reconciliation</code>
      <code>$from_template_default</code>
      <code>$has_mutations</code>
      <code>$initialized_class</code>
      <code>$reference_free</code>
    </PossiblyUnusedProperty>
  </file>
  <file src="src/Psalm/Type/Reconciler.php">
    <PossiblyUndefinedIntArrayOffset>
      <code>$const_name</code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="src/Psalm/Type/TypeNode.php">
    <ReferenceConstraintViolation>
      <code>$node</code>
    </ReferenceConstraintViolation>
  </file>
  <file src="src/Psalm/Type/TypeVisitor.php">
    <ImpureMethodCall>
      <code>visit</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Psalm/Type/Union.php">
    <PossiblyUnusedProperty>
      <code>$ignore_isset</code>
    </PossiblyUnusedProperty>
  </file>
  <file src="src/Psalm/Type/UnionTrait.php">
    <ImpureMethodCall>
      <code>traverse</code>
      <code>traverse</code>
      <code>traverseArray</code>
      <code>traverseArray</code>
    </ImpureMethodCall>
    <MoreSpecificReturnType>
      <code>TArray|TKeyedArray|TClassStringMap</code>
    </MoreSpecificReturnType>
    <PossiblyUndefinedStringArrayOffset>
      <code><![CDATA[$this->types['array']]]></code>
    </PossiblyUndefinedStringArrayOffset>
    <PossiblyUnusedMethod>
      <code>allFloatLiterals</code>
      <code>allFloatLiterals</code>
      <code>hasLowercaseString</code>
      <code>hasLowercaseString</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="tests/TestConfig.php">
    <InvalidExtendClass>
      <code>Config</code>
    </InvalidExtendClass>
    <MethodSignatureMismatch>
      <code>public function __construct()</code>
      <code>public function getComposerFilePathForClassLike(string $fq_classlike_name): bool</code>
      <code>public function getProjectDirectories(): array</code>
    </MethodSignatureMismatch>
  </file>
  <file src="vendor/nikic/php-parser/lib/PhpParser/Node/Expr/ArrowFunction.php">
    <PossiblyUndefinedStringArrayOffset>
      <code><![CDATA[$subNodes['expr']]]></code>
    </PossiblyUndefinedStringArrayOffset>
  </file>
</files>
