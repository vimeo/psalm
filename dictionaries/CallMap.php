<?php // phpcs:ignoreFile

return array (
  '_' => 
  array (
    0 => 'string',
    'message' => 'string',
  ),
  '__halt_compiler' => 
  array (
    0 => 'void',
  ),
  'abs' => 
  array (
    0 => 'int<0, max>',
    'num' => 'int',
  ),
  'abs\'1' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'abs\'2' => 
  array (
    0 => 'numeric',
    'num' => 'numeric',
  ),
  'accelerator_get_configuration' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'accelerator_get_scripts' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'accelerator_get_status' => 
  array (
    0 => 'array<array-key, mixed>',
    'fetch_scripts' => 'bool',
  ),
  'accelerator_reset' => 
  array (
    0 => 'mixed',
  ),
  'accelerator_set_status' => 
  array (
    0 => 'void',
    'status' => 'bool',
  ),
  'acos' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'acosh' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'addcslashes' => 
  array (
    0 => 'string',
    'string' => 'string',
    'characters' => 'string',
  ),
  'addslashes' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'AMQPBasicProperties::__construct' => 
  array (
    0 => 'void',
    'content_type=' => 'string',
    'content_encoding=' => 'string',
    'headers=' => 'array<array-key, mixed>',
    'delivery_mode=' => 'int',
    'priority=' => 'int',
    'correlation_id=' => 'string',
    'reply_to=' => 'string',
    'expiration=' => 'string',
    'message_id=' => 'string',
    'timestamp=' => 'int',
    'type=' => 'string',
    'user_id=' => 'string',
    'app_id=' => 'string',
    'cluster_id=' => 'string',
  ),
  'AMQPBasicProperties::getAppId' => 
  array (
    0 => 'string',
  ),
  'AMQPBasicProperties::getClusterId' => 
  array (
    0 => 'string',
  ),
  'AMQPBasicProperties::getContentEncoding' => 
  array (
    0 => 'string',
  ),
  'AMQPBasicProperties::getContentType' => 
  array (
    0 => 'string',
  ),
  'AMQPBasicProperties::getCorrelationId' => 
  array (
    0 => 'string',
  ),
  'AMQPBasicProperties::getDeliveryMode' => 
  array (
    0 => 'int',
  ),
  'AMQPBasicProperties::getExpiration' => 
  array (
    0 => 'string',
  ),
  'AMQPBasicProperties::getHeaders' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'AMQPBasicProperties::getMessageId' => 
  array (
    0 => 'string',
  ),
  'AMQPBasicProperties::getPriority' => 
  array (
    0 => 'int',
  ),
  'AMQPBasicProperties::getReplyTo' => 
  array (
    0 => 'string',
  ),
  'AMQPBasicProperties::getTimestamp' => 
  array (
    0 => 'string',
  ),
  'AMQPBasicProperties::getType' => 
  array (
    0 => 'string',
  ),
  'AMQPBasicProperties::getUserId' => 
  array (
    0 => 'string',
  ),
  'AMQPChannel::__construct' => 
  array (
    0 => 'void',
    'amqp_connection' => 'AMQPConnection',
  ),
  'AMQPChannel::basicRecover' => 
  array (
    0 => 'mixed',
    'requeue=' => 'bool',
  ),
  'AMQPChannel::close' => 
  array (
    0 => 'mixed',
  ),
  'AMQPChannel::commitTransaction' => 
  array (
    0 => 'bool',
  ),
  'AMQPChannel::confirmSelect' => 
  array (
    0 => 'mixed',
  ),
  'AMQPChannel::getChannelId' => 
  array (
    0 => 'int',
  ),
  'AMQPChannel::getConnection' => 
  array (
    0 => 'AMQPConnection',
  ),
  'AMQPChannel::getConsumers' => 
  array (
    0 => 'array<array-key, AMQPQueue>',
  ),
  'AMQPChannel::getPrefetchCount' => 
  array (
    0 => 'int',
  ),
  'AMQPChannel::getPrefetchSize' => 
  array (
    0 => 'int',
  ),
  'AMQPChannel::isConnected' => 
  array (
    0 => 'bool',
  ),
  'AMQPChannel::qos' => 
  array (
    0 => 'bool',
    'size' => 'int',
    'count' => 'int',
  ),
  'AMQPChannel::rollbackTransaction' => 
  array (
    0 => 'bool',
  ),
  'AMQPChannel::setConfirmCallback' => 
  array (
    0 => 'mixed',
    'ack_callback=' => 'callable|null',
    'nack_callback=' => 'callable|null',
  ),
  'AMQPChannel::setPrefetchCount' => 
  array (
    0 => 'bool',
    'count' => 'int',
  ),
  'AMQPChannel::setPrefetchSize' => 
  array (
    0 => 'bool',
    'size' => 'int',
  ),
  'AMQPChannel::setReturnCallback' => 
  array (
    0 => 'mixed',
    'return_callback=' => 'callable|null',
  ),
  'AMQPChannel::startTransaction' => 
  array (
    0 => 'bool',
  ),
  'AMQPChannel::waitForBasicReturn' => 
  array (
    0 => 'mixed',
    'timeout=' => 'float',
  ),
  'AMQPChannel::waitForConfirm' => 
  array (
    0 => 'mixed',
    'timeout=' => 'float',
  ),
  'AMQPConnection::__construct' => 
  array (
    0 => 'void',
    'credentials=' => 'array<array-key, mixed>',
  ),
  'AMQPConnection::connect' => 
  array (
    0 => 'bool',
  ),
  'AMQPConnection::disconnect' => 
  array (
    0 => 'bool',
  ),
  'AMQPConnection::getCACert' => 
  array (
    0 => 'string',
  ),
  'AMQPConnection::getCert' => 
  array (
    0 => 'string',
  ),
  'AMQPConnection::getHeartbeatInterval' => 
  array (
    0 => 'int',
  ),
  'AMQPConnection::getHost' => 
  array (
    0 => 'string',
  ),
  'AMQPConnection::getKey' => 
  array (
    0 => 'string',
  ),
  'AMQPConnection::getLogin' => 
  array (
    0 => 'string',
  ),
  'AMQPConnection::getMaxChannels' => 
  array (
    0 => 'int|null',
  ),
  'AMQPConnection::getMaxFrameSize' => 
  array (
    0 => 'int',
  ),
  'AMQPConnection::getPassword' => 
  array (
    0 => 'string',
  ),
  'AMQPConnection::getPort' => 
  array (
    0 => 'int',
  ),
  'AMQPConnection::getReadTimeout' => 
  array (
    0 => 'float',
  ),
  'AMQPConnection::getTimeout' => 
  array (
    0 => 'float',
  ),
  'AMQPConnection::getUsedChannels' => 
  array (
    0 => 'int',
  ),
  'AMQPConnection::getVerify' => 
  array (
    0 => 'bool',
  ),
  'AMQPConnection::getVhost' => 
  array (
    0 => 'string',
  ),
  'AMQPConnection::getWriteTimeout' => 
  array (
    0 => 'float',
  ),
  'AMQPConnection::isConnected' => 
  array (
    0 => 'bool',
  ),
  'AMQPConnection::isPersistent' => 
  array (
    0 => 'bool|null',
  ),
  'AMQPConnection::pconnect' => 
  array (
    0 => 'bool',
  ),
  'AMQPConnection::pdisconnect' => 
  array (
    0 => 'bool',
  ),
  'AMQPConnection::preconnect' => 
  array (
    0 => 'bool',
  ),
  'AMQPConnection::reconnect' => 
  array (
    0 => 'bool',
  ),
  'AMQPConnection::setCACert' => 
  array (
    0 => 'mixed',
    'cacert' => 'string',
  ),
  'AMQPConnection::setCert' => 
  array (
    0 => 'mixed',
    'cert' => 'string',
  ),
  'AMQPConnection::setHost' => 
  array (
    0 => 'bool',
    'host' => 'string',
  ),
  'AMQPConnection::setKey' => 
  array (
    0 => 'mixed',
    'key' => 'string',
  ),
  'AMQPConnection::setLogin' => 
  array (
    0 => 'bool',
    'login' => 'string',
  ),
  'AMQPConnection::setPassword' => 
  array (
    0 => 'bool',
    'password' => 'string',
  ),
  'AMQPConnection::setPort' => 
  array (
    0 => 'bool',
    'port' => 'int',
  ),
  'AMQPConnection::setReadTimeout' => 
  array (
    0 => 'bool',
    'timeout' => 'int',
  ),
  'AMQPConnection::setTimeout' => 
  array (
    0 => 'bool',
    'timeout' => 'int',
  ),
  'AMQPConnection::setVerify' => 
  array (
    0 => 'mixed',
    'verify' => 'bool',
  ),
  'AMQPConnection::setVhost' => 
  array (
    0 => 'bool',
    'vhost' => 'string',
  ),
  'AMQPConnection::setWriteTimeout' => 
  array (
    0 => 'bool',
    'timeout' => 'int',
  ),
  'AMQPDecimal::__construct' => 
  array (
    0 => 'void',
    'exponent' => 'mixed',
    'significand' => 'mixed',
  ),
  'AMQPDecimal::getExponent' => 
  array (
    0 => 'int',
  ),
  'AMQPDecimal::getSignificand' => 
  array (
    0 => 'int',
  ),
  'AMQPEnvelope::__construct' => 
  array (
    0 => 'void',
  ),
  'AMQPEnvelope::getAppId' => 
  array (
    0 => 'string',
  ),
  'AMQPEnvelope::getBody' => 
  array (
    0 => 'string',
  ),
  'AMQPEnvelope::getClusterId' => 
  array (
    0 => 'string',
  ),
  'AMQPEnvelope::getConsumerTag' => 
  array (
    0 => 'string',
  ),
  'AMQPEnvelope::getContentEncoding' => 
  array (
    0 => 'string',
  ),
  'AMQPEnvelope::getContentType' => 
  array (
    0 => 'string',
  ),
  'AMQPEnvelope::getCorrelationId' => 
  array (
    0 => 'string',
  ),
  'AMQPEnvelope::getDeliveryMode' => 
  array (
    0 => 'int',
  ),
  'AMQPEnvelope::getDeliveryTag' => 
  array (
    0 => 'string',
  ),
  'AMQPEnvelope::getExchangeName' => 
  array (
    0 => 'string',
  ),
  'AMQPEnvelope::getExpiration' => 
  array (
    0 => 'string',
  ),
  'AMQPEnvelope::getHeader' => 
  array (
    0 => 'false|string',
    'header_key' => 'string',
  ),
  'AMQPEnvelope::getHeaders' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'AMQPEnvelope::getMessageId' => 
  array (
    0 => 'string',
  ),
  'AMQPEnvelope::getPriority' => 
  array (
    0 => 'int',
  ),
  'AMQPEnvelope::getReplyTo' => 
  array (
    0 => 'string',
  ),
  'AMQPEnvelope::getRoutingKey' => 
  array (
    0 => 'string',
  ),
  'AMQPEnvelope::getTimeStamp' => 
  array (
    0 => 'string',
  ),
  'AMQPEnvelope::getType' => 
  array (
    0 => 'string',
  ),
  'AMQPEnvelope::getUserId' => 
  array (
    0 => 'string',
  ),
  'AMQPEnvelope::hasHeader' => 
  array (
    0 => 'bool',
    'header_key' => 'string',
  ),
  'AMQPEnvelope::isRedelivery' => 
  array (
    0 => 'bool',
  ),
  'AMQPExchange::__construct' => 
  array (
    0 => 'void',
    'amqp_channel' => 'AMQPChannel',
  ),
  'AMQPExchange::bind' => 
  array (
    0 => 'bool',
    'exchange_name' => 'string',
    'routing_key=' => 'string',
    'arguments=' => 'array<array-key, mixed>',
  ),
  'AMQPExchange::declareExchange' => 
  array (
    0 => 'bool',
  ),
  'AMQPExchange::delete' => 
  array (
    0 => 'bool',
    'exchangeName=' => 'string',
    'flags=' => 'int',
  ),
  'AMQPExchange::getArgument' => 
  array (
    0 => 'false|int|string',
    'key' => 'string',
  ),
  'AMQPExchange::getArguments' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'AMQPExchange::getChannel' => 
  array (
    0 => 'AMQPChannel',
  ),
  'AMQPExchange::getConnection' => 
  array (
    0 => 'AMQPConnection',
  ),
  'AMQPExchange::getFlags' => 
  array (
    0 => 'int',
  ),
  'AMQPExchange::getName' => 
  array (
    0 => 'string',
  ),
  'AMQPExchange::getType' => 
  array (
    0 => 'string',
  ),
  'AMQPExchange::hasArgument' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'AMQPExchange::publish' => 
  array (
    0 => 'bool',
    'message' => 'string',
    'routing_key=' => 'string',
    'flags=' => 'int',
    'attributes=' => 'array<array-key, mixed>',
  ),
  'AMQPExchange::setArgument' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'int|string',
  ),
  'AMQPExchange::setArguments' => 
  array (
    0 => 'bool',
    'arguments' => 'array<array-key, mixed>',
  ),
  'AMQPExchange::setFlags' => 
  array (
    0 => 'bool',
    'flags' => 'int',
  ),
  'AMQPExchange::setName' => 
  array (
    0 => 'bool',
    'exchange_name' => 'string',
  ),
  'AMQPExchange::setType' => 
  array (
    0 => 'bool',
    'exchange_type' => 'string',
  ),
  'AMQPExchange::unbind' => 
  array (
    0 => 'bool',
    'exchange_name' => 'string',
    'routing_key=' => 'string',
    'arguments=' => 'array<array-key, mixed>',
  ),
  'AMQPQueue::__construct' => 
  array (
    0 => 'void',
    'amqp_channel' => 'AMQPChannel',
  ),
  'AMQPQueue::ack' => 
  array (
    0 => 'bool',
    'delivery_tag' => 'string',
    'flags=' => 'int',
  ),
  'AMQPQueue::bind' => 
  array (
    0 => 'bool',
    'exchange_name' => 'string',
    'routing_key=' => 'string',
    'arguments=' => 'array<array-key, mixed>',
  ),
  'AMQPQueue::cancel' => 
  array (
    0 => 'bool',
    'consumer_tag=' => 'string',
  ),
  'AMQPQueue::consume' => 
  array (
    0 => 'void',
    'callback=' => 'callable|null',
    'flags=' => 'int',
    'consumerTag=' => 'string',
  ),
  'AMQPQueue::declareQueue' => 
  array (
    0 => 'int',
  ),
  'AMQPQueue::delete' => 
  array (
    0 => 'int',
    'flags=' => 'int',
  ),
  'AMQPQueue::get' => 
  array (
    0 => 'AMQPEnvelope|false',
    'flags=' => 'int',
  ),
  'AMQPQueue::getArgument' => 
  array (
    0 => 'false|int|string',
    'key' => 'string',
  ),
  'AMQPQueue::getArguments' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'AMQPQueue::getChannel' => 
  array (
    0 => 'AMQPChannel',
  ),
  'AMQPQueue::getConnection' => 
  array (
    0 => 'AMQPConnection',
  ),
  'AMQPQueue::getConsumerTag' => 
  array (
    0 => 'null|string',
  ),
  'AMQPQueue::getFlags' => 
  array (
    0 => 'int',
  ),
  'AMQPQueue::getName' => 
  array (
    0 => 'string',
  ),
  'AMQPQueue::hasArgument' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'AMQPQueue::nack' => 
  array (
    0 => 'bool',
    'delivery_tag' => 'string',
    'flags=' => 'int',
  ),
  'AMQPQueue::purge' => 
  array (
    0 => 'bool',
  ),
  'AMQPQueue::reject' => 
  array (
    0 => 'bool',
    'delivery_tag' => 'string',
    'flags=' => 'int',
  ),
  'AMQPQueue::setArgument' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'mixed',
  ),
  'AMQPQueue::setArguments' => 
  array (
    0 => 'bool',
    'arguments' => 'array<array-key, mixed>',
  ),
  'AMQPQueue::setFlags' => 
  array (
    0 => 'bool',
    'flags' => 'int',
  ),
  'AMQPQueue::setName' => 
  array (
    0 => 'bool',
    'queue_name' => 'string',
  ),
  'AMQPQueue::unbind' => 
  array (
    0 => 'bool',
    'exchange_name' => 'string',
    'routing_key=' => 'string',
    'arguments=' => 'array<array-key, mixed>',
  ),
  'AMQPTimestamp::__construct' => 
  array (
    0 => 'void',
    'timestamp' => 'string',
  ),
  'AMQPTimestamp::__toString' => 
  array (
    0 => 'string',
  ),
  'AMQPTimestamp::getTimestamp' => 
  array (
    0 => 'string',
  ),
  'apache_child_terminate' => 
  array (
    0 => 'bool',
  ),
  'apache_get_modules' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'apache_get_version' => 
  array (
    0 => 'false|string',
  ),
  'apache_getenv' => 
  array (
    0 => 'false|string',
    'variable' => 'string',
    'walk_to_top=' => 'bool',
  ),
  'apache_lookup_uri' => 
  array (
    0 => 'object',
    'filename' => 'string',
  ),
  'apache_note' => 
  array (
    0 => 'false|string',
    'note_name' => 'string',
    'note_value=' => 'string',
  ),
  'apache_request_headers' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'apache_reset_timeout' => 
  array (
    0 => 'bool',
  ),
  'apache_response_headers' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'apache_setenv' => 
  array (
    0 => 'bool',
    'variable' => 'string',
    'value' => 'string',
    'walk_to_top=' => 'bool',
  ),
  'apc_add' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'var' => 'mixed',
    'ttl=' => 'int',
  ),
  'apc_add\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'values' => 'array<array-key, mixed>',
    'unused=' => 'mixed',
    'ttl=' => 'int',
  ),
  'apc_bin_dump' => 
  array (
    0 => 'false|null|string',
    'files=' => 'array<array-key, mixed>',
    'user_vars=' => 'array<array-key, mixed>',
  ),
  'apc_bin_dumpfile' => 
  array (
    0 => 'false|int',
    'files' => 'array<array-key, mixed>',
    'user_vars' => 'array<array-key, mixed>',
    'filename' => 'string',
    'flags=' => 'int',
    'context=' => 'resource',
  ),
  'apc_bin_load' => 
  array (
    0 => 'bool',
    'data' => 'string',
    'flags=' => 'int',
  ),
  'apc_bin_loadfile' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'context=' => 'resource',
    'flags=' => 'int',
  ),
  'apc_cache_info' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'cache_type=' => 'string',
    'limited=' => 'bool',
  ),
  'apc_cas' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'old' => 'int',
    'new' => 'int',
  ),
  'apc_clear_cache' => 
  array (
    0 => 'bool',
    'cache_type=' => 'string',
  ),
  'apc_compile_file' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'atomic=' => 'bool',
  ),
  'apc_dec' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'step=' => 'int',
    '&w_success=' => 'bool',
  ),
  'apc_define_constants' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'constants' => 'array<array-key, mixed>',
    'case_sensitive=' => 'bool',
  ),
  'apc_delete' => 
  array (
    0 => 'bool',
    'key' => 'APCIterator|array<array-key, string>|string',
  ),
  'apc_delete_file' => 
  array (
    0 => 'array<array-key, string>|bool',
    'keys' => 'mixed',
  ),
  'apc_exists' => 
  array (
    0 => 'bool',
    'keys' => 'string',
  ),
  'apc_exists\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'array<array-key, string>',
  ),
  'apc_fetch' => 
  array (
    0 => 'false|mixed',
    'key' => 'string',
    '&w_success=' => 'bool',
  ),
  'apc_fetch\'1' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'key' => 'array<array-key, string>',
    '&w_success=' => 'bool',
  ),
  'apc_inc' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'step=' => 'int',
    '&w_success=' => 'bool',
  ),
  'apc_load_constants' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'case_sensitive=' => 'bool',
  ),
  'apc_sma_info' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'limited=' => 'bool',
  ),
  'apc_store' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'var' => 'mixed',
    'ttl=' => 'int',
  ),
  'apc_store\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'values' => 'array<array-key, mixed>',
    'unused=' => 'mixed',
    'ttl=' => 'int',
  ),
  'APCIterator::__construct' => 
  array (
    0 => 'void',
    'cache' => 'string',
    'search=' => 'array<array-key, string>|null|string',
    'format=' => 'int',
    'chunk_size=' => 'int',
    'list=' => 'int',
  ),
  'APCIterator::current' => 
  array (
    0 => 'false|mixed',
  ),
  'APCIterator::getTotalCount' => 
  array (
    0 => 'false|int',
  ),
  'APCIterator::getTotalHits' => 
  array (
    0 => 'false|int',
  ),
  'APCIterator::getTotalSize' => 
  array (
    0 => 'false|int',
  ),
  'APCIterator::key' => 
  array (
    0 => 'string',
  ),
  'APCIterator::next' => 
  array (
    0 => 'void',
  ),
  'APCIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'APCIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'apcu_add' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'var' => 'mixed',
    'ttl=' => 'int',
  ),
  'apcu_add\'1' => 
  array (
    0 => 'array<string, int>',
    'values' => 'array<string, mixed>',
    'unused=' => 'mixed',
    'ttl=' => 'int',
  ),
  'apcu_cache_info' => 
  array (
    0 => 'array<string, mixed>|false',
    'limited=' => 'bool',
  ),
  'apcu_cas' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'old' => 'int',
    'new' => 'int',
  ),
  'apcu_clear_cache' => 
  array (
    0 => 'bool',
  ),
  'apcu_dec' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'step=' => 'int',
    '&w_success=' => 'bool',
    'ttl=' => 'int',
  ),
  'apcu_delete' => 
  array (
    0 => 'bool',
    'key' => 'APCuIterator|string',
  ),
  'apcu_delete\'1' => 
  array (
    0 => 'list<string>',
    'key' => 'array<array-key, string>',
  ),
  'apcu_enabled' => 
  array (
    0 => 'bool',
  ),
  'apcu_entry' => 
  array (
    0 => 'mixed',
    'key' => 'string',
    'generator' => 'callable(string):mixed',
    'ttl=' => 'int',
  ),
  'apcu_exists' => 
  array (
    0 => 'bool',
    'keys' => 'string',
  ),
  'apcu_exists\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'array<array-key, string>',
  ),
  'apcu_fetch' => 
  array (
    0 => 'false|mixed',
    'key' => 'string',
    '&w_success=' => 'bool',
  ),
  'apcu_fetch\'1' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'key' => 'array<array-key, string>',
    '&w_success=' => 'bool',
  ),
  'apcu_inc' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'step=' => 'int',
    '&w_success=' => 'bool',
    'ttl=' => 'int',
  ),
  'apcu_key_info' => 
  array (
    0 => 'array<array-key, mixed>|null',
    'key' => 'string',
  ),
  'apcu_sma_info' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'limited=' => 'bool',
  ),
  'apcu_store' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'var=' => 'mixed',
    'ttl=' => 'int',
  ),
  'apcu_store\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'values' => 'array<array-key, mixed>',
    'unused=' => 'mixed',
    'ttl=' => 'int',
  ),
  'APCuIterator::__construct' => 
  array (
    0 => 'void',
    'search=' => 'array<array-key, string>|null|string',
    'format=' => 'int',
    'chunk_size=' => 'int',
    'list=' => 'int',
  ),
  'APCuIterator::current' => 
  array (
    0 => 'mixed',
  ),
  'APCuIterator::getTotalCount' => 
  array (
    0 => 'int',
  ),
  'APCuIterator::getTotalHits' => 
  array (
    0 => 'int',
  ),
  'APCuIterator::getTotalSize' => 
  array (
    0 => 'int',
  ),
  'APCuIterator::key' => 
  array (
    0 => 'string',
  ),
  'APCuIterator::next' => 
  array (
    0 => 'void',
  ),
  'APCuIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'APCuIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'apd_breakpoint' => 
  array (
    0 => 'bool',
    'debug_level' => 'int',
  ),
  'apd_callstack' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'apd_clunk' => 
  array (
    0 => 'void',
    'warning' => 'string',
    'delimiter=' => 'string',
  ),
  'apd_continue' => 
  array (
    0 => 'bool',
    'debug_level' => 'int',
  ),
  'apd_croak' => 
  array (
    0 => 'void',
    'warning' => 'string',
    'delimiter=' => 'string',
  ),
  'apd_dump_function_table' => 
  array (
    0 => 'void',
  ),
  'apd_dump_persistent_resources' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'apd_dump_regular_resources' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'apd_echo' => 
  array (
    0 => 'bool',
    'output' => 'string',
  ),
  'apd_get_active_symbols' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'apd_set_pprof_trace' => 
  array (
    0 => 'string',
    'dump_directory=' => 'string',
    'fragment=' => 'string',
  ),
  'apd_set_session' => 
  array (
    0 => 'void',
    'debug_level' => 'int',
  ),
  'apd_set_session_trace' => 
  array (
    0 => 'void',
    'debug_level' => 'int',
    'dump_directory=' => 'string',
  ),
  'apd_set_session_trace_socket' => 
  array (
    0 => 'bool',
    'tcp_server' => 'string',
    'socket_type' => 'int',
    'port' => 'int',
    'debug_level' => 'int',
  ),
  'AppendIterator::__construct' => 
  array (
    0 => 'void',
  ),
  'AppendIterator::append' => 
  array (
    0 => 'void',
    'iterator' => 'Iterator',
  ),
  'AppendIterator::current' => 
  array (
    0 => 'mixed',
  ),
  'AppendIterator::getArrayIterator' => 
  array (
    0 => 'ArrayIterator',
  ),
  'AppendIterator::getInnerIterator' => 
  array (
    0 => 'Iterator',
  ),
  'AppendIterator::getIteratorIndex' => 
  array (
    0 => 'int',
  ),
  'AppendIterator::key' => 
  array (
    0 => 'scalar',
  ),
  'AppendIterator::next' => 
  array (
    0 => 'void',
  ),
  'AppendIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'AppendIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'ArgumentCountError::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'ArgumentCountError::__toString' => 
  array (
    0 => 'string',
  ),
  'ArgumentCountError::__wakeup' => 
  array (
    0 => 'void',
  ),
  'ArgumentCountError::getCode' => 
  array (
    0 => 'int',
  ),
  'ArgumentCountError::getFile' => 
  array (
    0 => 'string',
  ),
  'ArgumentCountError::getLine' => 
  array (
    0 => 'int',
  ),
  'ArgumentCountError::getMessage' => 
  array (
    0 => 'string',
  ),
  'ArgumentCountError::getPrevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'ArgumentCountError::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'ArgumentCountError::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'ArithmeticError::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'ArithmeticError::__toString' => 
  array (
    0 => 'string',
  ),
  'ArithmeticError::__wakeup' => 
  array (
    0 => 'void',
  ),
  'ArithmeticError::getCode' => 
  array (
    0 => 'int',
  ),
  'ArithmeticError::getFile' => 
  array (
    0 => 'string',
  ),
  'ArithmeticError::getLine' => 
  array (
    0 => 'int',
  ),
  'ArithmeticError::getMessage' => 
  array (
    0 => 'string',
  ),
  'ArithmeticError::getPrevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'ArithmeticError::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'ArithmeticError::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'array_change_key_case' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'case=' => 'int',
  ),
  'array_chunk' => 
  array (
    0 => 'list<array<array-key, array<array-key, mixed>>>',
    'array' => 'array<array-key, mixed>',
    'length' => 'int',
    'preserve_keys=' => 'bool',
  ),
  'array_column' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'column_key' => 'int|null|string',
    'index_key=' => 'int|null|string',
  ),
  'array_combine' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'array<array-key, int|string>',
    'values' => 'array<array-key, mixed>',
  ),
  'array_count_values' => 
  array (
    0 => 'array<array-key, int>',
    'array' => 'array<array-key, int|string>',
  ),
  'array_diff' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    '...arrays=' => 'array<array-key, mixed>',
  ),
  'array_diff_assoc' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    '...arrays=' => 'array<array-key, mixed>',
  ),
  'array_diff_key' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    '...arrays=' => 'array<array-key, mixed>',
  ),
  'array_diff_uassoc' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'rest' => 'array<array-key, mixed>',
    'data_comp_func' => 'callable(mixed, mixed):int',
  ),
  'array_diff_uassoc\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'rest' => 'array<array-key, mixed>',
    'arr3' => 'array<array-key, mixed>',
    'arg4' => 'array<array-key, mixed>|callable(mixed, mixed):int',
    '...rest=' => 'array<array-key, mixed>|callable(mixed, mixed):int',
  ),
  'array_diff_ukey' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'rest' => 'array<array-key, mixed>',
    'key_comp_func' => 'callable(mixed, mixed):int',
  ),
  'array_diff_ukey\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'rest' => 'array<array-key, mixed>',
    'arr3' => 'array<array-key, mixed>',
    'arg4' => 'array<array-key, mixed>|callable(mixed, mixed):int',
    '...rest=' => 'array<array-key, mixed>|callable(mixed, mixed):int',
  ),
  'array_fill' => 
  array (
    0 => 'array<int, mixed>',
    'start_index' => 'int',
    'count' => 'int',
    'value' => 'mixed',
  ),
  'array_fill_keys' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'array<array-key, mixed>',
    'value' => 'mixed',
  ),
  'array_filter' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'callback=' => 'callable(mixed, array-key=):mixed|null',
    'mode=' => 'int',
  ),
  'array_flip' => 
  array (
    0 => 'array<array-key, int|string>',
    'array' => 'array<array-key, int|string>',
  ),
  'array_intersect' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    '...arrays=' => 'array<array-key, mixed>',
  ),
  'array_intersect_assoc' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    '...arrays=' => 'array<array-key, mixed>',
  ),
  'array_intersect_key' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    '...arrays=' => 'array<array-key, mixed>',
  ),
  'array_intersect_uassoc' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'rest' => 'array<array-key, mixed>',
    'key_compare_func' => 'callable(mixed, mixed):int',
  ),
  'array_intersect_uassoc\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'rest' => 'array<array-key, mixed>',
    'arr3' => 'array<array-key, mixed>',
    'arg4' => 'array<array-key, mixed>|callable(mixed, mixed):int',
    '...rest' => 'array<array-key, mixed>|callable(mixed, mixed):int',
  ),
  'array_intersect_ukey' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'rest' => 'array<array-key, mixed>',
    'key_compare_func' => 'callable(mixed, mixed):int',
  ),
  'array_intersect_ukey\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'rest' => 'array<array-key, mixed>',
    'arr3' => 'array<array-key, mixed>',
    'arg4' => 'array<array-key, mixed>|callable(mixed, mixed):int',
    '...rest' => 'array<array-key, mixed>|callable(mixed, mixed):int',
  ),
  'array_is_list' => 
  array (
    0 => 'bool',
    'array' => 'array<array-key, mixed>',
  ),
  'array_key_exists' => 
  array (
    0 => 'bool',
    'key' => 'int|string',
    'array' => 'array<array-key, mixed>',
  ),
  'array_key_first' => 
  array (
    0 => 'int|null|string',
    'array' => 'array<array-key, mixed>',
  ),
  'array_key_last' => 
  array (
    0 => 'int|null|string',
    'array' => 'array<array-key, mixed>',
  ),
  'array_keys' => 
  array (
    0 => 'list<int|string>',
    'array' => 'array<array-key, mixed>',
    'filter_value=' => 'mixed',
    'strict=' => 'bool',
  ),
  'array_map' => 
  array (
    0 => 'array<array-key, mixed>',
    'callback' => 'callable|null',
    'array' => 'array<array-key, mixed>',
    '...arrays=' => 'array<array-key, mixed>',
  ),
  'array_merge' => 
  array (
    0 => 'array<array-key, mixed>',
    '...arrays=' => 'array<array-key, mixed>',
  ),
  'array_merge_recursive' => 
  array (
    0 => 'array<array-key, mixed>',
    '...arrays=' => 'array<array-key, mixed>',
  ),
  'array_multisort' => 
  array (
    0 => 'bool',
    '&rw_array' => 'array<array-key, mixed>',
    'rest=' => 'array<array-key, mixed>|int',
    'array1_sort_flags=' => 'array<array-key, mixed>|int',
    '...args=' => 'array<array-key, mixed>|int',
  ),
  'array_pad' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'length' => 'int',
    'value' => 'mixed',
  ),
  'array_pop' => 
  array (
    0 => 'mixed',
    '&rw_array' => 'array<array-key, mixed>',
  ),
  'array_product' => 
  array (
    0 => 'float|int',
    'array' => 'array<array-key, mixed>',
  ),
  'array_push' => 
  array (
    0 => 'int',
    '&rw_array' => 'array<array-key, mixed>',
    '...values=' => 'mixed',
  ),
  'array_rand' => 
  array (
    0 => 'array<int, int|string>|int|string',
    'array' => 'non-empty-array<array-key, mixed>',
    'num' => 'int',
  ),
  'array_rand\'1' => 
  array (
    0 => 'int|string',
    'array' => 'array<array-key, mixed>',
  ),
  'array_reduce' => 
  array (
    0 => 'mixed',
    'array' => 'array<array-key, mixed>',
    'callback' => 'callable(mixed, mixed):mixed',
    'initial=' => 'mixed',
  ),
  'array_replace' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    '...replacements=' => 'array<array-key, mixed>',
  ),
  'array_replace_recursive' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    '...replacements=' => 'array<array-key, mixed>',
  ),
  'array_reverse' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'preserve_keys=' => 'bool',
  ),
  'array_search' => 
  array (
    0 => 'false|int|string',
    'needle' => 'mixed',
    'haystack' => 'array<array-key, mixed>',
    'strict=' => 'bool',
  ),
  'array_shift' => 
  array (
    0 => 'mixed|null',
    '&rw_array' => 'array<array-key, mixed>',
  ),
  'array_slice' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'offset' => 'int',
    'length=' => 'int|null',
    'preserve_keys=' => 'bool',
  ),
  'array_splice' => 
  array (
    0 => 'array<array-key, mixed>',
    '&rw_array' => 'array<array-key, mixed>',
    'offset' => 'int',
    'length=' => 'int|null',
    'replacement=' => 'array<array-key, mixed>|string',
  ),
  'array_sum' => 
  array (
    0 => 'float|int',
    'array' => 'array<array-key, mixed>',
  ),
  'array_udiff' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'rest' => 'array<array-key, mixed>',
    'data_comp_func' => 'callable(mixed, mixed):int',
  ),
  'array_udiff\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'rest' => 'array<array-key, mixed>',
    'arr3' => 'array<array-key, mixed>',
    'arg4' => 'array<array-key, mixed>|callable(mixed, mixed):int',
    '...rest=' => 'array<array-key, mixed>|callable(mixed, mixed):int',
  ),
  'array_udiff_assoc' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'rest' => 'array<array-key, mixed>',
    'key_comp_func' => 'callable(mixed, mixed):int',
  ),
  'array_udiff_assoc\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'rest' => 'array<array-key, mixed>',
    'arr3' => 'array<array-key, mixed>',
    'arg4' => 'array<array-key, mixed>|callable(mixed, mixed):int',
    '...rest=' => 'array<array-key, mixed>|callable(mixed, mixed):int',
  ),
  'array_udiff_uassoc' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'rest' => 'array<array-key, mixed>',
    'data_comp_func' => 'callable(mixed, mixed):int',
    'key_comp_func' => 'callable(mixed, mixed):int',
  ),
  'array_udiff_uassoc\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'rest' => 'array<array-key, mixed>',
    'arr3' => 'array<array-key, mixed>',
    'arg4' => 'array<array-key, mixed>|callable(mixed, mixed):int',
    'arg5' => 'array<array-key, mixed>|callable(mixed, mixed):int',
    '...rest=' => 'array<array-key, mixed>|callable(mixed, mixed):int',
  ),
  'array_uintersect' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'rest' => 'array<array-key, mixed>',
    'data_compare_func' => 'callable(mixed, mixed):int',
  ),
  'array_uintersect\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'rest' => 'array<array-key, mixed>',
    'arr3' => 'array<array-key, mixed>',
    'arg4' => 'array<array-key, mixed>|callable(mixed, mixed):int',
    '...rest=' => 'array<array-key, mixed>|callable(mixed, mixed):int',
  ),
  'array_uintersect_assoc' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'rest' => 'array<array-key, mixed>',
    'data_compare_func' => 'callable(mixed, mixed):int',
  ),
  'array_uintersect_assoc\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'rest' => 'array<array-key, mixed>',
    'arr3' => 'array<array-key, mixed>',
    'arg4' => 'array<array-key, mixed>|callable',
    '...rest=' => 'array<array-key, mixed>|callable(mixed, mixed):int',
  ),
  'array_uintersect_uassoc' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'rest' => 'array<array-key, mixed>',
    'data_compare_func' => 'callable(mixed, mixed):int',
    'key_compare_func' => 'callable(mixed, mixed):int',
  ),
  'array_uintersect_uassoc\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'rest' => 'array<array-key, mixed>',
    'arr3' => 'array<array-key, mixed>',
    'arg4' => 'array<array-key, mixed>|callable(mixed, mixed):int',
    'arg5' => 'array<array-key, mixed>|callable(mixed, mixed):int',
    '...rest=' => 'array<array-key, mixed>|callable(mixed, mixed):int',
  ),
  'array_unique' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'array_unshift' => 
  array (
    0 => 'int',
    '&rw_array' => 'array<array-key, mixed>',
    '...values=' => 'mixed',
  ),
  'array_values' => 
  array (
    0 => 'list<mixed>',
    'array' => 'array<array-key, mixed>',
  ),
  'array_walk' => 
  array (
    0 => 'bool',
    '&rw_array' => 'array<array-key, mixed>',
    'callback' => 'callable',
    'arg=' => 'mixed',
  ),
  'array_walk\'1' => 
  array (
    0 => 'bool',
    '&rw_array' => 'object',
    'callback' => 'callable',
    'arg=' => 'mixed',
  ),
  'array_walk_recursive' => 
  array (
    0 => 'bool',
    '&rw_array' => 'array<array-key, mixed>',
    'callback' => 'callable',
    'arg=' => 'mixed',
  ),
  'array_walk_recursive\'1' => 
  array (
    0 => 'bool',
    '&rw_array' => 'object',
    'callback' => 'callable',
    'arg=' => 'mixed',
  ),
  'ArrayAccess::offsetExists' => 
  array (
    0 => 'bool',
    'offset' => 'int|string',
  ),
  'ArrayAccess::offsetGet' => 
  array (
    0 => 'mixed',
    'offset' => 'int|string',
  ),
  'ArrayAccess::offsetSet' => 
  array (
    0 => 'void',
    'offset' => 'int|null|string',
    'value' => 'mixed',
  ),
  'ArrayAccess::offsetUnset' => 
  array (
    0 => 'void',
    'offset' => 'int|string',
  ),
  'ArrayIterator::__construct' => 
  array (
    0 => 'void',
    'array=' => 'array<array-key, mixed>|object',
    'flags=' => 'int',
  ),
  'ArrayIterator::append' => 
  array (
    0 => 'void',
    'value' => 'mixed',
  ),
  'ArrayIterator::asort' => 
  array (
    0 => 'true',
    'flags=' => 'int',
  ),
  'ArrayIterator::count' => 
  array (
    0 => 'int',
  ),
  'ArrayIterator::current' => 
  array (
    0 => 'mixed',
  ),
  'ArrayIterator::getArrayCopy' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ArrayIterator::getFlags' => 
  array (
    0 => 'int',
  ),
  'ArrayIterator::key' => 
  array (
    0 => 'int|null|string',
  ),
  'ArrayIterator::ksort' => 
  array (
    0 => 'true',
    'flags=' => 'int',
  ),
  'ArrayIterator::natcasesort' => 
  array (
    0 => 'true',
  ),
  'ArrayIterator::natsort' => 
  array (
    0 => 'true',
  ),
  'ArrayIterator::next' => 
  array (
    0 => 'void',
  ),
  'ArrayIterator::offsetExists' => 
  array (
    0 => 'bool',
    'key' => 'int|string',
  ),
  'ArrayIterator::offsetGet' => 
  array (
    0 => 'mixed',
    'key' => 'int|string',
  ),
  'ArrayIterator::offsetSet' => 
  array (
    0 => 'void',
    'key' => 'int|null|string',
    'value' => 'mixed',
  ),
  'ArrayIterator::offsetUnset' => 
  array (
    0 => 'void',
    'key' => 'int|string',
  ),
  'ArrayIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'ArrayIterator::seek' => 
  array (
    0 => 'void',
    'offset' => 'int',
  ),
  'ArrayIterator::serialize' => 
  array (
    0 => 'string',
  ),
  'ArrayIterator::setFlags' => 
  array (
    0 => 'void',
    'flags' => 'int',
  ),
  'ArrayIterator::uasort' => 
  array (
    0 => 'true',
    'callback' => 'callable(mixed, mixed):int',
  ),
  'ArrayIterator::uksort' => 
  array (
    0 => 'true',
    'callback' => 'callable(mixed, mixed):int',
  ),
  'ArrayIterator::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'ArrayIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'ArrayObject::__construct' => 
  array (
    0 => 'void',
    'array=' => 'array<array-key, mixed>|object',
    'flags=' => 'int',
    'iteratorClass=' => 'class-string',
  ),
  'ArrayObject::append' => 
  array (
    0 => 'void',
    'value' => 'mixed',
  ),
  'ArrayObject::asort' => 
  array (
    0 => 'true',
    'flags=' => 'int',
  ),
  'ArrayObject::count' => 
  array (
    0 => 'int',
  ),
  'ArrayObject::exchangeArray' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>|object',
  ),
  'ArrayObject::getArrayCopy' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ArrayObject::getFlags' => 
  array (
    0 => 'int',
  ),
  'ArrayObject::getIterator' => 
  array (
    0 => 'ArrayIterator',
  ),
  'ArrayObject::getIteratorClass' => 
  array (
    0 => 'string',
  ),
  'ArrayObject::ksort' => 
  array (
    0 => 'true',
    'flags=' => 'int',
  ),
  'ArrayObject::natcasesort' => 
  array (
    0 => 'true',
  ),
  'ArrayObject::natsort' => 
  array (
    0 => 'true',
  ),
  'ArrayObject::offsetExists' => 
  array (
    0 => 'bool',
    'key' => 'int|string',
  ),
  'ArrayObject::offsetGet' => 
  array (
    0 => 'mixed|null',
    'key' => 'int|string',
  ),
  'ArrayObject::offsetSet' => 
  array (
    0 => 'void',
    'key' => 'int|null|string',
    'value' => 'mixed',
  ),
  'ArrayObject::offsetUnset' => 
  array (
    0 => 'void',
    'key' => 'int|string',
  ),
  'ArrayObject::serialize' => 
  array (
    0 => 'string',
  ),
  'ArrayObject::setFlags' => 
  array (
    0 => 'void',
    'flags' => 'int',
  ),
  'ArrayObject::setIteratorClass' => 
  array (
    0 => 'void',
    'iteratorClass' => 'class-string',
  ),
  'ArrayObject::uasort' => 
  array (
    0 => 'true',
    'callback' => 'callable(mixed, mixed):int',
  ),
  'ArrayObject::uksort' => 
  array (
    0 => 'true',
    'callback' => 'callable(mixed, mixed):int',
  ),
  'ArrayObject::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'arsort' => 
  array (
    0 => 'true',
    '&rw_array' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'asin' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'asinh' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'asort' => 
  array (
    0 => 'true',
    '&rw_array' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'assert' => 
  array (
    0 => 'bool',
    'assertion' => 'bool|int|string',
    'description=' => 'Throwable|null|string',
  ),
  'assert_options' => 
  array (
    0 => 'false|mixed',
    'option' => 'int',
    'value=' => 'mixed',
  ),
  'ast\\get_kind_name' => 
  array (
    0 => 'string',
    'kind' => 'int',
  ),
  'ast\\get_metadata' => 
  array (
    0 => 'array<int, ast\\Metadata>',
  ),
  'ast\\get_supported_versions' => 
  array (
    0 => 'array<int, int>',
    'exclude_deprecated=' => 'bool',
  ),
  'ast\\kind_uses_flags' => 
  array (
    0 => 'bool',
    'kind' => 'int',
  ),
  'ast\\Node::__construct' => 
  array (
    0 => 'void',
    'kind=' => 'int',
    'flags=' => 'int',
    'children=' => 'array<array-key, ast\\Node|ast\\Node\\Decl|null|scalar>',
    'start_line=' => 'int',
  ),
  'ast\\parse_code' => 
  array (
    0 => 'ast\\Node',
    'code' => 'string',
    'version' => 'int',
    'filename=' => 'string',
  ),
  'ast\\parse_file' => 
  array (
    0 => 'ast\\Node',
    'filename' => 'string',
    'version' => 'int',
  ),
  'atan' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'atan2' => 
  array (
    0 => 'float',
    'y' => 'float',
    'x' => 'float',
  ),
  'atanh' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'BadFunctionCallException::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'BadFunctionCallException::__toString' => 
  array (
    0 => 'string',
  ),
  'BadFunctionCallException::getCode' => 
  array (
    0 => 'int',
  ),
  'BadFunctionCallException::getFile' => 
  array (
    0 => 'string',
  ),
  'BadFunctionCallException::getLine' => 
  array (
    0 => 'int',
  ),
  'BadFunctionCallException::getMessage' => 
  array (
    0 => 'string',
  ),
  'BadFunctionCallException::getPrevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'BadFunctionCallException::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'BadFunctionCallException::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'BadMethodCallException::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'BadMethodCallException::__toString' => 
  array (
    0 => 'string',
  ),
  'BadMethodCallException::getCode' => 
  array (
    0 => 'int',
  ),
  'BadMethodCallException::getFile' => 
  array (
    0 => 'string',
  ),
  'BadMethodCallException::getLine' => 
  array (
    0 => 'int',
  ),
  'BadMethodCallException::getMessage' => 
  array (
    0 => 'string',
  ),
  'BadMethodCallException::getPrevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'BadMethodCallException::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'BadMethodCallException::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'base64_decode' => 
  array (
    0 => 'string',
    'string' => 'string',
    'strict=' => 'false',
  ),
  'base64_decode\'1' => 
  array (
    0 => 'false|string',
    'string' => 'string',
    'strict=' => 'true',
  ),
  'base64_encode' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'base_convert' => 
  array (
    0 => 'string',
    'num' => 'string',
    'from_base' => 'int',
    'to_base' => 'int',
  ),
  'basename' => 
  array (
    0 => 'string',
    'path' => 'string',
    'suffix=' => 'string',
  ),
  'bbcode_add_element' => 
  array (
    0 => 'bool',
    'bbcode_container' => 'resource',
    'tag_name' => 'string',
    'tag_rules' => 'array<array-key, mixed>',
  ),
  'bbcode_add_smiley' => 
  array (
    0 => 'bool',
    'bbcode_container' => 'resource',
    'smiley' => 'string',
    'replace_by' => 'string',
  ),
  'bbcode_create' => 
  array (
    0 => 'resource',
    'bbcode_initial_tags=' => 'array<array-key, mixed>',
  ),
  'bbcode_destroy' => 
  array (
    0 => 'bool',
    'bbcode_container' => 'resource',
  ),
  'bbcode_parse' => 
  array (
    0 => 'string',
    'bbcode_container' => 'resource',
    'to_parse' => 'string',
  ),
  'bbcode_set_arg_parser' => 
  array (
    0 => 'bool',
    'bbcode_container' => 'resource',
    'bbcode_arg_parser' => 'resource',
  ),
  'bbcode_set_flags' => 
  array (
    0 => 'bool',
    'bbcode_container' => 'resource',
    'flags' => 'int',
    'mode=' => 'int',
  ),
  'bcadd' => 
  array (
    0 => 'numeric-string',
    'num1' => 'numeric-string',
    'num2' => 'numeric-string',
    'scale=' => 'int|null',
  ),
  'bccomp' => 
  array (
    0 => 'int',
    'num1' => 'numeric-string',
    'num2' => 'numeric-string',
    'scale=' => 'int|null',
  ),
  'bcdiv' => 
  array (
    0 => 'numeric-string',
    'num1' => 'numeric-string',
    'num2' => 'numeric-string',
    'scale=' => 'int|null',
  ),
  'bcmod' => 
  array (
    0 => 'numeric-string',
    'num1' => 'numeric-string',
    'num2' => 'numeric-string',
    'scale=' => 'int|null',
  ),
  'bcmul' => 
  array (
    0 => 'numeric-string',
    'num1' => 'numeric-string',
    'num2' => 'numeric-string',
    'scale=' => 'int|null',
  ),
  'bcompiler_load' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'bcompiler_load_exe' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'bcompiler_parse_class' => 
  array (
    0 => 'bool',
    'class' => 'string',
    'callback' => 'string',
  ),
  'bcompiler_read' => 
  array (
    0 => 'bool',
    'filehandle' => 'resource',
  ),
  'bcompiler_write_class' => 
  array (
    0 => 'bool',
    'filehandle' => 'resource',
    'classname' => 'string',
    'extends=' => 'string',
  ),
  'bcompiler_write_constant' => 
  array (
    0 => 'bool',
    'filehandle' => 'resource',
    'constantname' => 'string',
  ),
  'bcompiler_write_exe_footer' => 
  array (
    0 => 'bool',
    'filehandle' => 'resource',
    'startpos' => 'int',
  ),
  'bcompiler_write_file' => 
  array (
    0 => 'bool',
    'filehandle' => 'resource',
    'filename' => 'string',
  ),
  'bcompiler_write_footer' => 
  array (
    0 => 'bool',
    'filehandle' => 'resource',
  ),
  'bcompiler_write_function' => 
  array (
    0 => 'bool',
    'filehandle' => 'resource',
    'functionname' => 'string',
  ),
  'bcompiler_write_functions_from_file' => 
  array (
    0 => 'bool',
    'filehandle' => 'resource',
    'filename' => 'string',
  ),
  'bcompiler_write_header' => 
  array (
    0 => 'bool',
    'filehandle' => 'resource',
    'write_ver=' => 'string',
  ),
  'bcompiler_write_included_filename' => 
  array (
    0 => 'bool',
    'filehandle' => 'resource',
    'filename' => 'string',
  ),
  'bcpow' => 
  array (
    0 => 'numeric-string',
    'num' => 'numeric-string',
    'exponent' => 'numeric-string',
    'scale=' => 'int|null',
  ),
  'bcpowmod' => 
  array (
    0 => 'numeric-string',
    'num' => 'numeric-string',
    'exponent' => 'numeric-string',
    'modulus' => 'numeric-string',
    'scale=' => 'int|null',
  ),
  'bcscale' => 
  array (
    0 => 'int',
    'scale=' => 'int|null',
  ),
  'bcsqrt' => 
  array (
    0 => 'numeric-string',
    'num' => 'numeric-string',
    'scale=' => 'int|null',
  ),
  'bcsub' => 
  array (
    0 => 'numeric-string',
    'num1' => 'numeric-string',
    'num2' => 'numeric-string',
    'scale=' => 'int|null',
  ),
  'bin2hex' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'bind_textdomain_codeset' => 
  array (
    0 => 'string',
    'domain' => 'string',
    'codeset' => 'null|string',
  ),
  'bindec' => 
  array (
    0 => 'float|int',
    'binary_string' => 'string',
  ),
  'bindtextdomain' => 
  array (
    0 => 'string',
    'domain' => 'string',
    'directory' => 'null|string',
  ),
  'birdstep_autocommit' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'birdstep_close' => 
  array (
    0 => 'bool',
    'id' => 'int',
  ),
  'birdstep_commit' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'birdstep_connect' => 
  array (
    0 => 'int',
    'server' => 'string',
    'user' => 'string',
    'pass' => 'string',
  ),
  'birdstep_exec' => 
  array (
    0 => 'int',
    'index' => 'int',
    'exec_str' => 'string',
  ),
  'birdstep_fetch' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'birdstep_fieldname' => 
  array (
    0 => 'string',
    'index' => 'int',
    'col' => 'int',
  ),
  'birdstep_fieldnum' => 
  array (
    0 => 'int',
    'index' => 'int',
  ),
  'birdstep_freeresult' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'birdstep_off_autocommit' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'birdstep_result' => 
  array (
    0 => 'mixed',
    'index' => 'int',
    'col' => 'mixed',
  ),
  'birdstep_rollback' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'blenc_encrypt' => 
  array (
    0 => 'string',
    'plaintext' => 'string',
    'encodedfile' => 'string',
    'encryption_key=' => 'string',
  ),
  'boolval' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'bson_decode' => 
  array (
    0 => 'array<array-key, mixed>',
    'bson' => 'string',
  ),
  'bson_encode' => 
  array (
    0 => 'string',
    'anything' => 'mixed',
  ),
  'bzclose' => 
  array (
    0 => 'bool',
    'bz' => 'resource',
  ),
  'bzcompress' => 
  array (
    0 => 'int|string',
    'data' => 'string',
    'block_size=' => 'int',
    'work_factor=' => 'int',
  ),
  'bzdecompress' => 
  array (
    0 => 'false|int|string',
    'data' => 'string',
    'use_less_memory=' => 'bool',
  ),
  'bzerrno' => 
  array (
    0 => 'int',
    'bz' => 'resource',
  ),
  'bzerror' => 
  array (
    0 => 'array<array-key, mixed>',
    'bz' => 'resource',
  ),
  'bzerrstr' => 
  array (
    0 => 'string',
    'bz' => 'resource',
  ),
  'bzflush' => 
  array (
    0 => 'bool',
    'bz' => 'resource',
  ),
  'bzopen' => 
  array (
    0 => 'false|resource',
    'file' => 'resource|string',
    'mode' => 'string',
  ),
  'bzread' => 
  array (
    0 => 'false|string',
    'bz' => 'resource',
    'length=' => 'int',
  ),
  'bzwrite' => 
  array (
    0 => 'false|int',
    'bz' => 'resource',
    'data' => 'string',
    'length=' => 'int|null',
  ),
  'CachingIterator::__construct' => 
  array (
    0 => 'void',
    'iterator' => 'Iterator',
    'flags=' => 'int',
  ),
  'CachingIterator::__toString' => 
  array (
    0 => 'string',
  ),
  'CachingIterator::count' => 
  array (
    0 => 'int',
  ),
  'CachingIterator::current' => 
  array (
    0 => 'mixed',
  ),
  'CachingIterator::getCache' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'CachingIterator::getFlags' => 
  array (
    0 => 'int',
  ),
  'CachingIterator::getInnerIterator' => 
  array (
    0 => 'Iterator',
  ),
  'CachingIterator::hasNext' => 
  array (
    0 => 'bool',
  ),
  'CachingIterator::key' => 
  array (
    0 => 'scalar',
  ),
  'CachingIterator::next' => 
  array (
    0 => 'void',
  ),
  'CachingIterator::offsetExists' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'CachingIterator::offsetGet' => 
  array (
    0 => 'mixed',
    'key' => 'string',
  ),
  'CachingIterator::offsetSet' => 
  array (
    0 => 'void',
    'key' => 'string',
    'value' => 'mixed',
  ),
  'CachingIterator::offsetUnset' => 
  array (
    0 => 'void',
    'key' => 'string',
  ),
  'CachingIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'CachingIterator::setFlags' => 
  array (
    0 => 'void',
    'flags' => 'int',
  ),
  'CachingIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'cal_days_in_month' => 
  array (
    0 => 'int',
    'calendar' => 'int',
    'month' => 'int',
    'year' => 'int',
  ),
  'cal_from_jd' => 
  array (
    0 => 'array{abbrevdayname: string, abbrevmonth: string, date: string, day: int, dayname: string, dow: int, month: int, monthname: string, year: int}',
    'julian_day' => 'int',
    'calendar' => 'int',
  ),
  'cal_info' => 
  array (
    0 => 'array<array-key, mixed>',
    'calendar=' => 'int',
  ),
  'cal_to_jd' => 
  array (
    0 => 'int',
    'calendar' => 'int',
    'month' => 'int',
    'day' => 'int',
    'year' => 'int',
  ),
  'calcul_hmac' => 
  array (
    0 => 'string',
    'clent' => 'string',
    'siretcode' => 'string',
    'price' => 'string',
    'reference' => 'string',
    'validity' => 'string',
    'taxation' => 'string',
    'devise' => 'string',
    'language' => 'string',
  ),
  'calculhmac' => 
  array (
    0 => 'string',
    'clent' => 'string',
    'data' => 'string',
  ),
  'call_user_func' => 
  array (
    0 => 'false|mixed',
    'callback' => 'callable',
    '...args=' => 'mixed',
  ),
  'call_user_func_array' => 
  array (
    0 => 'false|mixed',
    'callback' => 'callable',
    'args' => 'list<mixed>',
  ),
  'call_user_method' => 
  array (
    0 => 'mixed',
    'method_name' => 'string',
    'object' => 'object',
    'parameter=' => 'mixed',
    '...args=' => 'mixed',
  ),
  'call_user_method_array' => 
  array (
    0 => 'mixed',
    'method_name' => 'string',
    'object' => 'object',
    'params' => 'list<mixed>',
  ),
  'CallbackFilterIterator::__construct' => 
  array (
    0 => 'void',
    'iterator' => 'Iterator',
    'callback' => 'callable(mixed, mixed=, mixed=):bool',
  ),
  'CallbackFilterIterator::accept' => 
  array (
    0 => 'bool',
  ),
  'CallbackFilterIterator::current' => 
  array (
    0 => 'mixed',
  ),
  'CallbackFilterIterator::getInnerIterator' => 
  array (
    0 => 'Iterator',
  ),
  'CallbackFilterIterator::key' => 
  array (
    0 => 'mixed',
  ),
  'CallbackFilterIterator::next' => 
  array (
    0 => 'void',
  ),
  'CallbackFilterIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'CallbackFilterIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'ceil' => 
  array (
    0 => 'float',
    'num' => 'float|int',
  ),
  'chdb::__construct' => 
  array (
    0 => 'void',
    'pathname' => 'string',
  ),
  'chdb::get' => 
  array (
    0 => 'string',
    'key' => 'string',
  ),
  'chdb_create' => 
  array (
    0 => 'bool',
    'pathname' => 'string',
    'data' => 'array<array-key, mixed>',
  ),
  'chdir' => 
  array (
    0 => 'bool',
    'directory' => 'string',
  ),
  'checkdate' => 
  array (
    0 => 'bool',
    'month' => 'int',
    'day' => 'int',
    'year' => 'int',
  ),
  'checkdnsrr' => 
  array (
    0 => 'bool',
    'hostname' => 'string',
    'type=' => 'string',
  ),
  'chgrp' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'group' => 'int|string',
  ),
  'chmod' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'permissions' => 'int',
  ),
  'chop' => 
  array (
    0 => 'string',
    'string' => 'string',
    'characters=' => 'string',
  ),
  'chown' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'user' => 'int|string',
  ),
  'chr' => 
  array (
    0 => 'non-empty-string',
    'codepoint' => 'int',
  ),
  'chroot' => 
  array (
    0 => 'bool',
    'directory' => 'string',
  ),
  'chunk_split' => 
  array (
    0 => 'string',
    'string' => 'string',
    'length=' => 'int',
    'separator=' => 'string',
  ),
  'class_alias' => 
  array (
    0 => 'bool',
    'class' => 'string',
    'alias' => 'string',
    'autoload=' => 'bool',
  ),
  'class_exists' => 
  array (
    0 => 'bool',
    'class' => 'string',
    'autoload=' => 'bool',
  ),
  'class_implements' => 
  array (
    0 => 'array<interface-string, interface-string>|false',
    'object_or_class' => 'object|string',
    'autoload=' => 'bool',
  ),
  'class_parents' => 
  array (
    0 => 'array<class-string, class-string>|false',
    'object_or_class' => 'object|string',
    'autoload=' => 'bool',
  ),
  'class_uses' => 
  array (
    0 => 'array<trait-string, trait-string>|false',
    'object_or_class' => 'object|string',
    'autoload=' => 'bool',
  ),
  'classkit_import' => 
  array (
    0 => 'array<array-key, mixed>',
    'filename' => 'string',
  ),
  'classkit_method_add' => 
  array (
    0 => 'bool',
    'classname' => 'string',
    'methodname' => 'string',
    'args' => 'string',
    'code' => 'string',
    'flags=' => 'int',
  ),
  'classkit_method_copy' => 
  array (
    0 => 'bool',
    'dclass' => 'string',
    'dmethod' => 'string',
    'sclass' => 'string',
    'smethod=' => 'string',
  ),
  'classkit_method_redefine' => 
  array (
    0 => 'bool',
    'classname' => 'string',
    'methodname' => 'string',
    'args' => 'string',
    'code' => 'string',
    'flags=' => 'int',
  ),
  'classkit_method_remove' => 
  array (
    0 => 'bool',
    'classname' => 'string',
    'methodname' => 'string',
  ),
  'classkit_method_rename' => 
  array (
    0 => 'bool',
    'classname' => 'string',
    'methodname' => 'string',
    'newname' => 'string',
  ),
  'classObj::__construct' => 
  array (
    0 => 'void',
    'layer' => 'layerObj',
    'class' => 'classObj',
  ),
  'classObj::addLabel' => 
  array (
    0 => 'int',
    'label' => 'labelObj',
  ),
  'classObj::convertToString' => 
  array (
    0 => 'string',
  ),
  'classObj::createLegendIcon' => 
  array (
    0 => 'imageObj',
    'width' => 'int',
    'height' => 'int',
  ),
  'classObj::deletestyle' => 
  array (
    0 => 'int',
    'index' => 'int',
  ),
  'classObj::drawLegendIcon' => 
  array (
    0 => 'int',
    'width' => 'int',
    'height' => 'int',
    'im' => 'imageObj',
    'dstX' => 'int',
    'dstY' => 'int',
  ),
  'classObj::free' => 
  array (
    0 => 'void',
  ),
  'classObj::getExpressionString' => 
  array (
    0 => 'string',
  ),
  'classObj::getLabel' => 
  array (
    0 => 'labelObj',
    'index' => 'int',
  ),
  'classObj::getMetaData' => 
  array (
    0 => 'int',
    'name' => 'string',
  ),
  'classObj::getStyle' => 
  array (
    0 => 'styleObj',
    'index' => 'int',
  ),
  'classObj::getTextString' => 
  array (
    0 => 'string',
  ),
  'classObj::movestyledown' => 
  array (
    0 => 'int',
    'index' => 'int',
  ),
  'classObj::movestyleup' => 
  array (
    0 => 'int',
    'index' => 'int',
  ),
  'classObj::ms_newClassObj' => 
  array (
    0 => 'classObj',
    'layer' => 'layerObj',
    'class' => 'classObj',
  ),
  'classObj::removeLabel' => 
  array (
    0 => 'labelObj',
    'index' => 'int',
  ),
  'classObj::removeMetaData' => 
  array (
    0 => 'int',
    'name' => 'string',
  ),
  'classObj::set' => 
  array (
    0 => 'int',
    'property_name' => 'string',
    'new_value' => 'mixed',
  ),
  'classObj::setExpression' => 
  array (
    0 => 'int',
    'expression' => 'string',
  ),
  'classObj::setMetaData' => 
  array (
    0 => 'int',
    'name' => 'string',
    'value' => 'string',
  ),
  'classObj::settext' => 
  array (
    0 => 'int',
    'text' => 'string',
  ),
  'classObj::updateFromString' => 
  array (
    0 => 'int',
    'snippet' => 'string',
  ),
  'clearstatcache' => 
  array (
    0 => 'void',
    'clear_realpath_cache=' => 'bool',
    'filename=' => 'string',
  ),
  'cli_get_process_title' => 
  array (
    0 => 'null|string',
  ),
  'cli_set_process_title' => 
  array (
    0 => 'bool',
    'title' => 'string',
  ),
  'ClosedGeneratorException::__toString' => 
  array (
    0 => 'string',
  ),
  'ClosedGeneratorException::getCode' => 
  array (
    0 => 'int',
  ),
  'ClosedGeneratorException::getFile' => 
  array (
    0 => 'string',
  ),
  'ClosedGeneratorException::getLine' => 
  array (
    0 => 'int',
  ),
  'ClosedGeneratorException::getMessage' => 
  array (
    0 => 'string',
  ),
  'ClosedGeneratorException::getPrevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'ClosedGeneratorException::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'ClosedGeneratorException::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'closedir' => 
  array (
    0 => 'void',
    'dir_handle=' => 'resource',
  ),
  'closelog' => 
  array (
    0 => 'true',
  ),
  'Closure::__construct' => 
  array (
    0 => 'void',
  ),
  'Closure::__invoke' => 
  array (
    0 => 'mixed',
    '...args=' => 'mixed',
  ),
  'Closure::bind' => 
  array (
    0 => 'Closure|null',
    'closure' => 'Closure',
    'newThis' => 'null|object',
    'newScope=' => 'null|object|string',
  ),
  'Closure::bindTo' => 
  array (
    0 => 'Closure|null',
    'newThis' => 'null|object',
    'newScope=' => 'null|object|string',
  ),
  'Closure::call' => 
  array (
    0 => 'mixed',
    'newThis' => 'object',
    '...args=' => 'mixed',
  ),
  'Closure::fromCallable' => 
  array (
    0 => 'Closure',
    'callback' => 'callable',
  ),
  'clusterObj::convertToString' => 
  array (
    0 => 'string',
  ),
  'clusterObj::getFilterString' => 
  array (
    0 => 'string',
  ),
  'clusterObj::getGroupString' => 
  array (
    0 => 'string',
  ),
  'clusterObj::setFilter' => 
  array (
    0 => 'int',
    'expression' => 'string',
  ),
  'clusterObj::setGroup' => 
  array (
    0 => 'int',
    'expression' => 'string',
  ),
  'Collator::__construct' => 
  array (
    0 => 'void',
    'locale' => 'string',
  ),
  'Collator::asort' => 
  array (
    0 => 'bool',
    '&rw_array' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'Collator::compare' => 
  array (
    0 => 'false|int',
    'string1' => 'string',
    'string2' => 'string',
  ),
  'Collator::create' => 
  array (
    0 => 'Collator|null',
    'locale' => 'string',
  ),
  'Collator::getAttribute' => 
  array (
    0 => 'false|int',
    'attribute' => 'int',
  ),
  'Collator::getErrorCode' => 
  array (
    0 => 'int',
  ),
  'Collator::getErrorMessage' => 
  array (
    0 => 'string',
  ),
  'Collator::getLocale' => 
  array (
    0 => 'string',
    'type' => 'int',
  ),
  'Collator::getSortKey' => 
  array (
    0 => 'false|string',
    'string' => 'string',
  ),
  'Collator::getStrength' => 
  array (
    0 => 'int',
  ),
  'Collator::setAttribute' => 
  array (
    0 => 'bool',
    'attribute' => 'int',
    'value' => 'int',
  ),
  'Collator::setStrength' => 
  array (
    0 => 'bool',
    'strength' => 'int',
  ),
  'Collator::sort' => 
  array (
    0 => 'bool',
    '&rw_array' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'Collator::sortWithSortKeys' => 
  array (
    0 => 'bool',
    '&rw_array' => 'array<array-key, mixed>',
  ),
  'collator_asort' => 
  array (
    0 => 'bool',
    'object' => 'collator',
    '&rw_array' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'collator_compare' => 
  array (
    0 => 'int',
    'object' => 'collator',
    'string1' => 'string',
    'string2' => 'string',
  ),
  'collator_create' => 
  array (
    0 => 'Collator|null',
    'locale' => 'string',
  ),
  'collator_get_attribute' => 
  array (
    0 => 'false|int',
    'object' => 'collator',
    'attribute' => 'int',
  ),
  'collator_get_error_code' => 
  array (
    0 => 'int',
    'object' => 'collator',
  ),
  'collator_get_error_message' => 
  array (
    0 => 'string',
    'object' => 'collator',
  ),
  'collator_get_locale' => 
  array (
    0 => 'string',
    'object' => 'collator',
    'type' => 'int',
  ),
  'collator_get_sort_key' => 
  array (
    0 => 'string',
    'object' => 'collator',
    'string' => 'string',
  ),
  'collator_get_strength' => 
  array (
    0 => 'int',
    'object' => 'collator',
  ),
  'collator_set_attribute' => 
  array (
    0 => 'bool',
    'object' => 'collator',
    'attribute' => 'int',
    'value' => 'int',
  ),
  'collator_set_strength' => 
  array (
    0 => 'bool',
    'object' => 'collator',
    'strength' => 'int',
  ),
  'collator_sort' => 
  array (
    0 => 'bool',
    'object' => 'collator',
    '&rw_array' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'collator_sort_with_sort_keys' => 
  array (
    0 => 'bool',
    'object' => 'collator',
    '&rw_array' => 'array<array-key, mixed>',
  ),
  'Collectable::isGarbage' => 
  array (
    0 => 'bool',
  ),
  'Collectable::setGarbage' => 
  array (
    0 => 'void',
  ),
  'colorObj::setHex' => 
  array (
    0 => 'int',
    'hex' => 'string',
  ),
  'colorObj::toHex' => 
  array (
    0 => 'string',
  ),
  'COM::__call' => 
  array (
    0 => 'mixed',
    'name' => 'mixed',
    'args' => 'mixed',
  ),
  'COM::__construct' => 
  array (
    0 => 'void',
    'module_name' => 'string',
    'server_name=' => 'mixed',
    'codepage=' => 'int',
    'typelib=' => 'string',
  ),
  'COM::__get' => 
  array (
    0 => 'mixed',
    'name' => 'mixed',
  ),
  'COM::__set' => 
  array (
    0 => 'void',
    'name' => 'mixed',
    'value' => 'mixed',
  ),
  'com_addref' => 
  array (
    0 => 'mixed',
  ),
  'com_create_guid' => 
  array (
    0 => 'string',
  ),
  'com_event_sink' => 
  array (
    0 => 'bool',
    'variant' => 'VARIANT',
    'sink_object' => 'object',
    'sink_interface=' => 'mixed',
  ),
  'com_get_active_object' => 
  array (
    0 => 'VARIANT',
    'prog_id' => 'string',
    'codepage=' => 'int',
  ),
  'com_isenum' => 
  array (
    0 => 'bool',
    'com_module' => 'variant',
  ),
  'com_load_typelib' => 
  array (
    0 => 'bool',
    'typelib_name' => 'string',
    'case_insensitive=' => 'true',
  ),
  'com_message_pump' => 
  array (
    0 => 'bool',
    'timeout_milliseconds=' => 'int',
  ),
  'com_print_typeinfo' => 
  array (
    0 => 'bool',
    'variant' => 'object',
    'dispatch_interface=' => 'string',
    'display_sink=' => 'bool',
  ),
  'commonmark\\cql::__invoke' => 
  array (
    0 => 'mixed',
    'root' => 'CommonMark\\Node',
    'handler' => 'callable',
  ),
  'commonmark\\interfaces\\ivisitable::accept' => 
  array (
    0 => 'void',
    'visitor' => 'CommonMark\\Interfaces\\IVisitor',
  ),
  'commonmark\\interfaces\\ivisitor::enter' => 
  array (
    0 => 'IVisitable|int|null',
    'visitable' => 'IVisitable',
  ),
  'commonmark\\interfaces\\ivisitor::leave' => 
  array (
    0 => 'IVisitable|int|null',
    'visitable' => 'IVisitable',
  ),
  'commonmark\\node::accept' => 
  array (
    0 => 'void',
    'visitor' => 'CommonMark\\Interfaces\\IVisitor',
  ),
  'commonmark\\node::appendChild' => 
  array (
    0 => 'CommonMark\\Node',
    'child' => 'CommonMark\\Node',
  ),
  'commonmark\\node::insertAfter' => 
  array (
    0 => 'CommonMark\\Node',
    'sibling' => 'CommonMark\\Node',
  ),
  'commonmark\\node::insertBefore' => 
  array (
    0 => 'CommonMark\\Node',
    'sibling' => 'CommonMark\\Node',
  ),
  'commonmark\\node::prependChild' => 
  array (
    0 => 'CommonMark\\Node',
    'child' => 'CommonMark\\Node',
  ),
  'commonmark\\node::replace' => 
  array (
    0 => 'CommonMark\\Node',
    'target' => 'CommonMark\\Node',
  ),
  'commonmark\\node::unlink' => 
  array (
    0 => 'void',
  ),
  'commonmark\\parse' => 
  array (
    0 => 'CommonMark\\Node',
    'content' => 'string',
    'options=' => 'int',
  ),
  'commonmark\\parser::finish' => 
  array (
    0 => 'CommonMark\\Node',
  ),
  'commonmark\\parser::parse' => 
  array (
    0 => 'void',
    'buffer' => 'string',
  ),
  'commonmark\\render' => 
  array (
    0 => 'string',
    'node' => 'CommonMark\\Node',
    'options=' => 'int',
    'width=' => 'int',
  ),
  'commonmark\\render\\html' => 
  array (
    0 => 'string',
    'node' => 'CommonMark\\Node',
    'options=' => 'int',
  ),
  'commonmark\\render\\latex' => 
  array (
    0 => 'string',
    'node' => 'CommonMark\\Node',
    'options=' => 'int',
    'width=' => 'int',
  ),
  'commonmark\\render\\man' => 
  array (
    0 => 'string',
    'node' => 'CommonMark\\Node',
    'options=' => 'int',
    'width=' => 'int',
  ),
  'commonmark\\render\\xml' => 
  array (
    0 => 'string',
    'node' => 'CommonMark\\Node',
    'options=' => 'int',
  ),
  'compact' => 
  array (
    0 => 'array<string, mixed>',
    'var_name' => 'array<array-key, mixed>|string',
    '...var_names=' => 'array<array-key, mixed>|string',
  ),
  'COMPersistHelper::__construct' => 
  array (
    0 => 'void',
    'variant' => 'object',
  ),
  'COMPersistHelper::GetCurFile' => 
  array (
    0 => 'string',
  ),
  'COMPersistHelper::GetCurFileName' => 
  array (
    0 => 'string',
  ),
  'COMPersistHelper::GetMaxStreamSize' => 
  array (
    0 => 'int',
  ),
  'COMPersistHelper::InitNew' => 
  array (
    0 => 'int',
  ),
  'COMPersistHelper::LoadFromFile' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'flags' => 'int',
  ),
  'COMPersistHelper::LoadFromStream' => 
  array (
    0 => 'mixed',
    'stream' => 'mixed',
  ),
  'COMPersistHelper::SaveToFile' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'remember' => 'bool',
  ),
  'COMPersistHelper::SaveToStream' => 
  array (
    0 => 'int',
    'stream' => 'mixed',
  ),
  'componere\\abstract\\definition::addInterface' => 
  array (
    0 => 'Componere\\Abstract\\Definition',
    'interface' => 'string',
  ),
  'componere\\abstract\\definition::addMethod' => 
  array (
    0 => 'Componere\\Abstract\\Definition',
    'name' => 'string',
    'method' => 'Componere\\Method',
  ),
  'componere\\abstract\\definition::addTrait' => 
  array (
    0 => 'Componere\\Abstract\\Definition',
    'trait' => 'string',
  ),
  'componere\\abstract\\definition::getReflector' => 
  array (
    0 => 'ReflectionClass',
  ),
  'componere\\cast' => 
  array (
    0 => 'object',
    'arg1' => 'string',
    'object' => 'object',
  ),
  'componere\\cast_by_ref' => 
  array (
    0 => 'object',
    'arg1' => 'string',
    'object' => 'object',
  ),
  'componere\\definition::addConstant' => 
  array (
    0 => 'Componere\\Definition',
    'name' => 'string',
    'value' => 'Componere\\Value',
  ),
  'componere\\definition::addProperty' => 
  array (
    0 => 'Componere\\Definition',
    'name' => 'string',
    'value' => 'Componere\\Value',
  ),
  'componere\\definition::getClosure' => 
  array (
    0 => 'Closure',
    'name' => 'string',
  ),
  'componere\\definition::getClosures' => 
  array (
    0 => 'array<array-key, Closure>',
  ),
  'componere\\definition::isRegistered' => 
  array (
    0 => 'bool',
  ),
  'componere\\definition::register' => 
  array (
    0 => 'void',
  ),
  'componere\\method::getReflector' => 
  array (
    0 => 'ReflectionMethod',
  ),
  'componere\\method::setPrivate' => 
  array (
    0 => 'Method',
  ),
  'componere\\method::setProtected' => 
  array (
    0 => 'Method',
  ),
  'componere\\method::setStatic' => 
  array (
    0 => 'Method',
  ),
  'componere\\patch::apply' => 
  array (
    0 => 'void',
  ),
  'componere\\patch::derive' => 
  array (
    0 => 'Componere\\Patch',
    'instance' => 'object',
  ),
  'componere\\patch::getClosure' => 
  array (
    0 => 'Closure',
    'name' => 'string',
  ),
  'componere\\patch::getClosures' => 
  array (
    0 => 'array<array-key, Closure>',
  ),
  'componere\\patch::isApplied' => 
  array (
    0 => 'bool',
  ),
  'componere\\patch::revert' => 
  array (
    0 => 'void',
  ),
  'componere\\value::hasDefault' => 
  array (
    0 => 'bool',
  ),
  'componere\\value::isPrivate' => 
  array (
    0 => 'bool',
  ),
  'componere\\value::isProtected' => 
  array (
    0 => 'bool',
  ),
  'componere\\value::isStatic' => 
  array (
    0 => 'bool',
  ),
  'componere\\value::setPrivate' => 
  array (
    0 => 'Value',
  ),
  'componere\\value::setProtected' => 
  array (
    0 => 'Value',
  ),
  'componere\\value::setStatic' => 
  array (
    0 => 'Value',
  ),
  'Cond::broadcast' => 
  array (
    0 => 'bool',
    'condition' => 'long',
  ),
  'Cond::create' => 
  array (
    0 => 'long',
  ),
  'Cond::destroy' => 
  array (
    0 => 'bool',
    'condition' => 'long',
  ),
  'Cond::signal' => 
  array (
    0 => 'bool',
    'condition' => 'long',
  ),
  'Cond::wait' => 
  array (
    0 => 'bool',
    'condition' => 'long',
    'mutex' => 'long',
    'timeout=' => 'long',
  ),
  'confirm_pdo_ibm_compiled' => 
  array (
    0 => 'mixed',
  ),
  'connection_aborted' => 
  array (
    0 => 'int',
  ),
  'connection_status' => 
  array (
    0 => 'int',
  ),
  'connection_timeout' => 
  array (
    0 => 'int',
  ),
  'constant' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'convert_cyr_string' => 
  array (
    0 => 'string',
    'string' => 'string',
    'from' => 'string',
    'to' => 'string',
  ),
  'convert_uudecode' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'convert_uuencode' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'copy' => 
  array (
    0 => 'bool',
    'from' => 'string',
    'to' => 'string',
    'context=' => 'resource',
  ),
  'cos' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'cosh' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'Couchbase\\AnalyticsQuery::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\AnalyticsQuery::fromString' => 
  array (
    0 => 'Couchbase\\AnalyticsQuery',
    'statement' => 'string',
  ),
  'Couchbase\\basicDecoderV1' => 
  array (
    0 => 'mixed',
    'bytes' => 'string',
    'flags' => 'int',
    'datatype' => 'int',
    'options' => 'array<array-key, mixed>',
  ),
  'Couchbase\\basicEncoderV1' => 
  array (
    0 => 'array<array-key, mixed>',
    'value' => 'mixed',
    'options' => 'array<array-key, mixed>',
  ),
  'Couchbase\\BooleanFieldSearchQuery::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\BooleanFieldSearchQuery::boost' => 
  array (
    0 => 'Couchbase\\BooleanFieldSearchQuery',
    'boost' => 'float',
  ),
  'Couchbase\\BooleanFieldSearchQuery::field' => 
  array (
    0 => 'Couchbase\\BooleanFieldSearchQuery',
    'field' => 'string',
  ),
  'Couchbase\\BooleanFieldSearchQuery::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\BooleanSearchQuery::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\BooleanSearchQuery::boost' => 
  array (
    0 => 'Couchbase\\BooleanSearchQuery',
    'boost' => 'float',
  ),
  'Couchbase\\BooleanSearchQuery::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\BooleanSearchQuery::must' => 
  array (
    0 => 'Couchbase\\BooleanSearchQuery',
    '...queries=' => 'array<int, Couchbase\\SearchQueryPart>',
  ),
  'Couchbase\\BooleanSearchQuery::mustNot' => 
  array (
    0 => 'Couchbase\\BooleanSearchQuery',
    '...queries=' => 'array<int, Couchbase\\SearchQueryPart>',
  ),
  'Couchbase\\BooleanSearchQuery::should' => 
  array (
    0 => 'Couchbase\\BooleanSearchQuery',
    '...queries=' => 'array<int, Couchbase\\SearchQueryPart>',
  ),
  'Couchbase\\Bucket::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\Bucket::__get' => 
  array (
    0 => 'int',
    'name' => 'string',
  ),
  'Couchbase\\Bucket::__set' => 
  array (
    0 => 'int',
    'name' => 'string',
    'value' => 'int',
  ),
  'Couchbase\\Bucket::append' => 
  array (
    0 => 'Couchbase\\Document|array<array-key, mixed>',
    'ids' => 'array<array-key, mixed>|string',
    'value' => 'mixed',
    'options=' => 'array<array-key, mixed>',
  ),
  'Couchbase\\Bucket::counter' => 
  array (
    0 => 'Couchbase\\Document|array<array-key, mixed>',
    'ids' => 'array<array-key, mixed>|string',
    'delta=' => 'int',
    'options=' => 'array<array-key, mixed>',
  ),
  'Couchbase\\Bucket::decryptFields' => 
  array (
    0 => 'array<array-key, mixed>',
    'document' => 'array<array-key, mixed>',
    'fieldOptions' => 'mixed',
    'prefix=' => 'string',
  ),
  'Couchbase\\Bucket::diag' => 
  array (
    0 => 'array<array-key, mixed>',
    'reportId=' => 'string',
  ),
  'Couchbase\\Bucket::encryptFields' => 
  array (
    0 => 'array<array-key, mixed>',
    'document' => 'array<array-key, mixed>',
    'fieldOptions' => 'mixed',
    'prefix=' => 'string',
  ),
  'Couchbase\\Bucket::get' => 
  array (
    0 => 'Couchbase\\Document|array<array-key, mixed>',
    'ids' => 'array<array-key, mixed>|string',
    'options=' => 'array<array-key, mixed>',
  ),
  'Couchbase\\Bucket::getAndLock' => 
  array (
    0 => 'Couchbase\\Document|array<array-key, mixed>',
    'ids' => 'array<array-key, mixed>|string',
    'lockTime' => 'int',
    'options=' => 'array<array-key, mixed>',
  ),
  'Couchbase\\Bucket::getAndTouch' => 
  array (
    0 => 'Couchbase\\Document|array<array-key, mixed>',
    'ids' => 'array<array-key, mixed>|string',
    'expiry' => 'int',
    'options=' => 'array<array-key, mixed>',
  ),
  'Couchbase\\Bucket::getFromReplica' => 
  array (
    0 => 'Couchbase\\Document|array<array-key, mixed>',
    'ids' => 'array<array-key, mixed>|string',
    'options=' => 'array<array-key, mixed>',
  ),
  'Couchbase\\Bucket::getName' => 
  array (
    0 => 'string',
  ),
  'Couchbase\\Bucket::insert' => 
  array (
    0 => 'Couchbase\\Document|array<array-key, mixed>',
    'ids' => 'array<array-key, mixed>|string',
    'value' => 'mixed',
    'options=' => 'array<array-key, mixed>',
  ),
  'Couchbase\\Bucket::listExists' => 
  array (
    0 => 'bool',
    'id' => 'string',
    'value' => 'mixed',
  ),
  'Couchbase\\Bucket::listGet' => 
  array (
    0 => 'mixed',
    'id' => 'string',
    'index' => 'int',
  ),
  'Couchbase\\Bucket::listPush' => 
  array (
    0 => 'mixed',
    'id' => 'string',
    'value' => 'mixed',
  ),
  'Couchbase\\Bucket::listRemove' => 
  array (
    0 => 'mixed',
    'id' => 'string',
    'index' => 'int',
  ),
  'Couchbase\\Bucket::listSet' => 
  array (
    0 => 'mixed',
    'id' => 'string',
    'index' => 'int',
    'value' => 'mixed',
  ),
  'Couchbase\\Bucket::listShift' => 
  array (
    0 => 'mixed',
    'id' => 'string',
    'value' => 'mixed',
  ),
  'Couchbase\\Bucket::listSize' => 
  array (
    0 => 'int',
    'id' => 'string',
  ),
  'Couchbase\\Bucket::lookupIn' => 
  array (
    0 => 'Couchbase\\LookupInBuilder',
    'id' => 'string',
  ),
  'Couchbase\\Bucket::manager' => 
  array (
    0 => 'Couchbase\\BucketManager',
  ),
  'Couchbase\\Bucket::mapAdd' => 
  array (
    0 => 'mixed',
    'id' => 'string',
    'key' => 'string',
    'value' => 'mixed',
  ),
  'Couchbase\\Bucket::mapGet' => 
  array (
    0 => 'mixed',
    'id' => 'string',
    'key' => 'string',
  ),
  'Couchbase\\Bucket::mapRemove' => 
  array (
    0 => 'mixed',
    'id' => 'string',
    'key' => 'string',
  ),
  'Couchbase\\Bucket::mapSize' => 
  array (
    0 => 'int',
    'id' => 'string',
  ),
  'Couchbase\\Bucket::mutateIn' => 
  array (
    0 => 'Couchbase\\MutateInBuilder',
    'id' => 'string',
    'cas' => 'string',
  ),
  'Couchbase\\Bucket::ping' => 
  array (
    0 => 'array<array-key, mixed>',
    'services=' => 'int',
    'reportId=' => 'string',
  ),
  'Couchbase\\Bucket::prepend' => 
  array (
    0 => 'Couchbase\\Document|array<array-key, mixed>',
    'ids' => 'array<array-key, mixed>|string',
    'value' => 'mixed',
    'options=' => 'array<array-key, mixed>',
  ),
  'Couchbase\\Bucket::query' => 
  array (
    0 => 'object',
    'query' => 'Couchbase\\AnalyticsQuery|Couchbase\\N1qlQuery|Couchbase\\SearchQuery|Couchbase\\SpatialViewQuery|Couchbase\\ViewQuery',
    'jsonAsArray=' => 'bool',
  ),
  'Couchbase\\Bucket::queueAdd' => 
  array (
    0 => 'mixed',
    'id' => 'string',
    'value' => 'mixed',
  ),
  'Couchbase\\Bucket::queueExists' => 
  array (
    0 => 'bool',
    'id' => 'string',
    'value' => 'mixed',
  ),
  'Couchbase\\Bucket::queueRemove' => 
  array (
    0 => 'mixed',
    'id' => 'string',
  ),
  'Couchbase\\Bucket::queueSize' => 
  array (
    0 => 'int',
    'id' => 'string',
  ),
  'Couchbase\\Bucket::remove' => 
  array (
    0 => 'Couchbase\\Document|array<array-key, mixed>',
    'ids' => 'array<array-key, mixed>|string',
    'options=' => 'array<array-key, mixed>',
  ),
  'Couchbase\\Bucket::replace' => 
  array (
    0 => 'Couchbase\\Document|array<array-key, mixed>',
    'ids' => 'array<array-key, mixed>|string',
    'value' => 'mixed',
    'options=' => 'array<array-key, mixed>',
  ),
  'Couchbase\\Bucket::retrieveIn' => 
  array (
    0 => 'Couchbase\\DocumentFragment',
    'id' => 'string',
    '...paths=' => 'array<int, string>',
  ),
  'Couchbase\\Bucket::setAdd' => 
  array (
    0 => 'mixed',
    'id' => 'string',
    'value' => 'scalar',
  ),
  'Couchbase\\Bucket::setExists' => 
  array (
    0 => 'bool',
    'id' => 'string',
    'value' => 'scalar',
  ),
  'Couchbase\\Bucket::setRemove' => 
  array (
    0 => 'mixed',
    'id' => 'string',
    'value' => 'scalar',
  ),
  'Couchbase\\Bucket::setSize' => 
  array (
    0 => 'int',
    'id' => 'string',
  ),
  'Couchbase\\Bucket::setTranscoder' => 
  array (
    0 => 'mixed',
    'encoder' => 'callable',
    'decoder' => 'callable',
  ),
  'Couchbase\\Bucket::touch' => 
  array (
    0 => 'Couchbase\\Document|array<array-key, mixed>',
    'ids' => 'array<array-key, mixed>|string',
    'expiry' => 'int',
    'options=' => 'array<array-key, mixed>',
  ),
  'Couchbase\\Bucket::unlock' => 
  array (
    0 => 'Couchbase\\Document|array<array-key, mixed>',
    'ids' => 'array<array-key, mixed>|string',
    'options=' => 'array<array-key, mixed>',
  ),
  'Couchbase\\Bucket::upsert' => 
  array (
    0 => 'Couchbase\\Document|array<array-key, mixed>',
    'ids' => 'array<array-key, mixed>|string',
    'value' => 'mixed',
    'options=' => 'array<array-key, mixed>',
  ),
  'Couchbase\\BucketManager::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\BucketManager::createN1qlIndex' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'fields' => 'array<array-key, mixed>',
    'whereClause=' => 'string',
    'ignoreIfExist=' => 'bool',
    'defer=' => 'bool',
  ),
  'Couchbase\\BucketManager::createN1qlPrimaryIndex' => 
  array (
    0 => 'mixed',
    'customName=' => 'string',
    'ignoreIfExist=' => 'bool',
    'defer=' => 'bool',
  ),
  'Couchbase\\BucketManager::dropN1qlIndex' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'ignoreIfNotExist=' => 'bool',
  ),
  'Couchbase\\BucketManager::dropN1qlPrimaryIndex' => 
  array (
    0 => 'mixed',
    'customName=' => 'string',
    'ignoreIfNotExist=' => 'bool',
  ),
  'Couchbase\\BucketManager::flush' => 
  array (
    0 => 'mixed',
  ),
  'Couchbase\\BucketManager::getDesignDocument' => 
  array (
    0 => 'array<array-key, mixed>',
    'name' => 'string',
  ),
  'Couchbase\\BucketManager::info' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\BucketManager::insertDesignDocument' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'document' => 'array<array-key, mixed>',
  ),
  'Couchbase\\BucketManager::listDesignDocuments' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\BucketManager::listN1qlIndexes' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\BucketManager::removeDesignDocument' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'Couchbase\\BucketManager::upsertDesignDocument' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'document' => 'array<array-key, mixed>',
  ),
  'Couchbase\\ClassicAuthenticator::bucket' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'password' => 'string',
  ),
  'Couchbase\\ClassicAuthenticator::cluster' => 
  array (
    0 => 'mixed',
    'username' => 'string',
    'password' => 'string',
  ),
  'Couchbase\\Cluster::__construct' => 
  array (
    0 => 'void',
    'connstr' => 'string',
  ),
  'Couchbase\\Cluster::authenticate' => 
  array (
    0 => 'null',
    'authenticator' => 'Couchbase\\Authenticator',
  ),
  'Couchbase\\Cluster::authenticateAs' => 
  array (
    0 => 'null',
    'username' => 'string',
    'password' => 'string',
  ),
  'Couchbase\\Cluster::manager' => 
  array (
    0 => 'Couchbase\\ClusterManager',
    'username=' => 'string',
    'password=' => 'string',
  ),
  'Couchbase\\Cluster::openBucket' => 
  array (
    0 => 'Couchbase\\Bucket',
    'name=' => 'string',
    'password=' => 'string',
  ),
  'Couchbase\\ClusterManager::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\ClusterManager::createBucket' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'Couchbase\\ClusterManager::getUser' => 
  array (
    0 => 'array<array-key, mixed>',
    'username' => 'string',
    'domain=' => 'int',
  ),
  'Couchbase\\ClusterManager::info' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\ClusterManager::listBuckets' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\ClusterManager::listUsers' => 
  array (
    0 => 'array<array-key, mixed>',
    'domain=' => 'int',
  ),
  'Couchbase\\ClusterManager::removeBucket' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'Couchbase\\ClusterManager::removeUser' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'domain=' => 'int',
  ),
  'Couchbase\\ClusterManager::upsertUser' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'settings' => 'Couchbase\\UserSettings',
    'domain=' => 'int',
  ),
  'Couchbase\\ConjunctionSearchQuery::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\ConjunctionSearchQuery::boost' => 
  array (
    0 => 'Couchbase\\ConjunctionSearchQuery',
    'boost' => 'float',
  ),
  'Couchbase\\ConjunctionSearchQuery::every' => 
  array (
    0 => 'Couchbase\\ConjunctionSearchQuery',
    '...queries=' => 'array<int, Couchbase\\SearchQueryPart>',
  ),
  'Couchbase\\ConjunctionSearchQuery::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\DateRangeSearchFacet::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\DateRangeSearchFacet::addRange' => 
  array (
    0 => 'Couchbase\\DateRangeSearchFacet',
    'name' => 'string',
    'start' => 'int|string',
    'end' => 'int|string',
  ),
  'Couchbase\\DateRangeSearchFacet::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\DateRangeSearchQuery::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\DateRangeSearchQuery::boost' => 
  array (
    0 => 'Couchbase\\DateRangeSearchQuery',
    'boost' => 'float',
  ),
  'Couchbase\\DateRangeSearchQuery::dateTimeParser' => 
  array (
    0 => 'Couchbase\\DateRangeSearchQuery',
    'dateTimeParser' => 'string',
  ),
  'Couchbase\\DateRangeSearchQuery::end' => 
  array (
    0 => 'Couchbase\\DateRangeSearchQuery',
    'end' => 'int|string',
    'inclusive=' => 'bool',
  ),
  'Couchbase\\DateRangeSearchQuery::field' => 
  array (
    0 => 'Couchbase\\DateRangeSearchQuery',
    'field' => 'string',
  ),
  'Couchbase\\DateRangeSearchQuery::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\DateRangeSearchQuery::start' => 
  array (
    0 => 'Couchbase\\DateRangeSearchQuery',
    'start' => 'int|string',
    'inclusive=' => 'bool',
  ),
  'Couchbase\\defaultDecoder' => 
  array (
    0 => 'mixed',
    'bytes' => 'string',
    'flags' => 'int',
    'datatype' => 'int',
  ),
  'Couchbase\\defaultEncoder' => 
  array (
    0 => 'array<array-key, mixed>',
    'value' => 'mixed',
  ),
  'Couchbase\\DisjunctionSearchQuery::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\DisjunctionSearchQuery::boost' => 
  array (
    0 => 'Couchbase\\DisjunctionSearchQuery',
    'boost' => 'float',
  ),
  'Couchbase\\DisjunctionSearchQuery::either' => 
  array (
    0 => 'Couchbase\\DisjunctionSearchQuery',
    '...queries=' => 'array<int, Couchbase\\SearchQueryPart>',
  ),
  'Couchbase\\DisjunctionSearchQuery::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\DisjunctionSearchQuery::min' => 
  array (
    0 => 'Couchbase\\DisjunctionSearchQuery',
    'min' => 'int',
  ),
  'Couchbase\\DocIdSearchQuery::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\DocIdSearchQuery::boost' => 
  array (
    0 => 'Couchbase\\DocIdSearchQuery',
    'boost' => 'float',
  ),
  'Couchbase\\DocIdSearchQuery::docIds' => 
  array (
    0 => 'Couchbase\\DocIdSearchQuery',
    '...documentIds=' => 'array<int, string>',
  ),
  'Couchbase\\DocIdSearchQuery::field' => 
  array (
    0 => 'Couchbase\\DocIdSearchQuery',
    'field' => 'string',
  ),
  'Couchbase\\DocIdSearchQuery::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\fastlzCompress' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'Couchbase\\fastlzDecompress' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'Couchbase\\GeoBoundingBoxSearchQuery::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\GeoBoundingBoxSearchQuery::boost' => 
  array (
    0 => 'Couchbase\\GeoBoundingBoxSearchQuery',
    'boost' => 'float',
  ),
  'Couchbase\\GeoBoundingBoxSearchQuery::field' => 
  array (
    0 => 'Couchbase\\GeoBoundingBoxSearchQuery',
    'field' => 'string',
  ),
  'Couchbase\\GeoBoundingBoxSearchQuery::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\GeoDistanceSearchQuery::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\GeoDistanceSearchQuery::boost' => 
  array (
    0 => 'Couchbase\\GeoDistanceSearchQuery',
    'boost' => 'float',
  ),
  'Couchbase\\GeoDistanceSearchQuery::field' => 
  array (
    0 => 'Couchbase\\GeoDistanceSearchQuery',
    'field' => 'string',
  ),
  'Couchbase\\GeoDistanceSearchQuery::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\LookupInBuilder::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\LookupInBuilder::execute' => 
  array (
    0 => 'Couchbase\\DocumentFragment',
  ),
  'Couchbase\\LookupInBuilder::exists' => 
  array (
    0 => 'Couchbase\\LookupInBuilder',
    'path' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'Couchbase\\LookupInBuilder::get' => 
  array (
    0 => 'Couchbase\\LookupInBuilder',
    'path' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'Couchbase\\LookupInBuilder::getCount' => 
  array (
    0 => 'Couchbase\\LookupInBuilder',
    'path' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'Couchbase\\MatchAllSearchQuery::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\MatchAllSearchQuery::boost' => 
  array (
    0 => 'Couchbase\\MatchAllSearchQuery',
    'boost' => 'float',
  ),
  'Couchbase\\MatchAllSearchQuery::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\MatchNoneSearchQuery::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\MatchNoneSearchQuery::boost' => 
  array (
    0 => 'Couchbase\\MatchNoneSearchQuery',
    'boost' => 'float',
  ),
  'Couchbase\\MatchNoneSearchQuery::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\MatchPhraseSearchQuery::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\MatchPhraseSearchQuery::analyzer' => 
  array (
    0 => 'Couchbase\\MatchPhraseSearchQuery',
    'analyzer' => 'string',
  ),
  'Couchbase\\MatchPhraseSearchQuery::boost' => 
  array (
    0 => 'Couchbase\\MatchPhraseSearchQuery',
    'boost' => 'float',
  ),
  'Couchbase\\MatchPhraseSearchQuery::field' => 
  array (
    0 => 'Couchbase\\MatchPhraseSearchQuery',
    'field' => 'string',
  ),
  'Couchbase\\MatchPhraseSearchQuery::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\MatchSearchQuery::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\MatchSearchQuery::analyzer' => 
  array (
    0 => 'Couchbase\\MatchSearchQuery',
    'analyzer' => 'string',
  ),
  'Couchbase\\MatchSearchQuery::boost' => 
  array (
    0 => 'Couchbase\\MatchSearchQuery',
    'boost' => 'float',
  ),
  'Couchbase\\MatchSearchQuery::field' => 
  array (
    0 => 'Couchbase\\MatchSearchQuery',
    'field' => 'string',
  ),
  'Couchbase\\MatchSearchQuery::fuzziness' => 
  array (
    0 => 'Couchbase\\MatchSearchQuery',
    'fuzziness' => 'int',
  ),
  'Couchbase\\MatchSearchQuery::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\MatchSearchQuery::prefixLength' => 
  array (
    0 => 'Couchbase\\MatchSearchQuery',
    'prefixLength' => 'int',
  ),
  'Couchbase\\MutateInBuilder::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\MutateInBuilder::arrayAddUnique' => 
  array (
    0 => 'Couchbase\\MutateInBuilder',
    'path' => 'string',
    'value' => 'mixed',
    'options=' => 'array<array-key, mixed>|bool',
  ),
  'Couchbase\\MutateInBuilder::arrayAppend' => 
  array (
    0 => 'Couchbase\\MutateInBuilder',
    'path' => 'string',
    'value' => 'mixed',
    'options=' => 'array<array-key, mixed>|bool',
  ),
  'Couchbase\\MutateInBuilder::arrayAppendAll' => 
  array (
    0 => 'Couchbase\\MutateInBuilder',
    'path' => 'string',
    'values' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>|bool',
  ),
  'Couchbase\\MutateInBuilder::arrayInsert' => 
  array (
    0 => 'Couchbase\\MutateInBuilder',
    'path' => 'string',
    'value' => 'mixed',
    'options=' => 'array<array-key, mixed>',
  ),
  'Couchbase\\MutateInBuilder::arrayInsertAll' => 
  array (
    0 => 'Couchbase\\MutateInBuilder',
    'path' => 'string',
    'values' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'Couchbase\\MutateInBuilder::arrayPrepend' => 
  array (
    0 => 'Couchbase\\MutateInBuilder',
    'path' => 'string',
    'value' => 'mixed',
    'options=' => 'array<array-key, mixed>|bool',
  ),
  'Couchbase\\MutateInBuilder::arrayPrependAll' => 
  array (
    0 => 'Couchbase\\MutateInBuilder',
    'path' => 'string',
    'values' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>|bool',
  ),
  'Couchbase\\MutateInBuilder::counter' => 
  array (
    0 => 'Couchbase\\MutateInBuilder',
    'path' => 'string',
    'delta' => 'int',
    'options=' => 'array<array-key, mixed>|bool',
  ),
  'Couchbase\\MutateInBuilder::execute' => 
  array (
    0 => 'Couchbase\\DocumentFragment',
  ),
  'Couchbase\\MutateInBuilder::insert' => 
  array (
    0 => 'Couchbase\\MutateInBuilder',
    'path' => 'string',
    'value' => 'mixed',
    'options=' => 'array<array-key, mixed>|bool',
  ),
  'Couchbase\\MutateInBuilder::modeDocument' => 
  array (
    0 => 'mixed',
    'mode' => 'int',
  ),
  'Couchbase\\MutateInBuilder::remove' => 
  array (
    0 => 'Couchbase\\MutateInBuilder',
    'path' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'Couchbase\\MutateInBuilder::replace' => 
  array (
    0 => 'Couchbase\\MutateInBuilder',
    'path' => 'string',
    'value' => 'mixed',
    'options=' => 'array<array-key, mixed>',
  ),
  'Couchbase\\MutateInBuilder::upsert' => 
  array (
    0 => 'Couchbase\\MutateInBuilder',
    'path' => 'string',
    'value' => 'mixed',
    'options=' => 'array<array-key, mixed>|bool',
  ),
  'Couchbase\\MutateInBuilder::withExpiry' => 
  array (
    0 => 'Couchbase\\MutateInBuilder',
    'expiry' => 'Couchbase\\expiry',
  ),
  'Couchbase\\MutationState::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\MutationState::add' => 
  array (
    0 => 'mixed',
    'source' => 'Couchbase\\Document|Couchbase\\DocumentFragment|array<array-key, mixed>',
  ),
  'Couchbase\\MutationState::from' => 
  array (
    0 => 'Couchbase\\MutationState',
    'source' => 'Couchbase\\Document|Couchbase\\DocumentFragment|array<array-key, mixed>',
  ),
  'Couchbase\\MutationToken::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\MutationToken::bucketName' => 
  array (
    0 => 'string',
  ),
  'Couchbase\\MutationToken::from' => 
  array (
    0 => 'mixed',
    'bucketName' => 'string',
    'vbucketId' => 'int',
    'vbucketUuid' => 'string',
    'sequenceNumber' => 'string',
  ),
  'Couchbase\\MutationToken::sequenceNumber' => 
  array (
    0 => 'string',
  ),
  'Couchbase\\MutationToken::vbucketId' => 
  array (
    0 => 'int',
  ),
  'Couchbase\\MutationToken::vbucketUuid' => 
  array (
    0 => 'string',
  ),
  'Couchbase\\N1qlIndex::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\N1qlQuery::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\N1qlQuery::adhoc' => 
  array (
    0 => 'Couchbase\\N1qlQuery',
    'adhoc' => 'bool',
  ),
  'Couchbase\\N1qlQuery::consistency' => 
  array (
    0 => 'Couchbase\\N1qlQuery',
    'consistency' => 'int',
  ),
  'Couchbase\\N1qlQuery::consistentWith' => 
  array (
    0 => 'Couchbase\\N1qlQuery',
    'state' => 'Couchbase\\MutationState',
  ),
  'Couchbase\\N1qlQuery::crossBucket' => 
  array (
    0 => 'Couchbase\\N1qlQuery',
    'crossBucket' => 'bool',
  ),
  'Couchbase\\N1qlQuery::fromString' => 
  array (
    0 => 'Couchbase\\N1qlQuery',
    'statement' => 'string',
  ),
  'Couchbase\\N1qlQuery::maxParallelism' => 
  array (
    0 => 'Couchbase\\N1qlQuery',
    'maxParallelism' => 'int',
  ),
  'Couchbase\\N1qlQuery::namedParams' => 
  array (
    0 => 'Couchbase\\N1qlQuery',
    'params' => 'array<array-key, mixed>',
  ),
  'Couchbase\\N1qlQuery::pipelineBatch' => 
  array (
    0 => 'Couchbase\\N1qlQuery',
    'pipelineBatch' => 'int',
  ),
  'Couchbase\\N1qlQuery::pipelineCap' => 
  array (
    0 => 'Couchbase\\N1qlQuery',
    'pipelineCap' => 'int',
  ),
  'Couchbase\\N1qlQuery::positionalParams' => 
  array (
    0 => 'Couchbase\\N1qlQuery',
    'params' => 'array<array-key, mixed>',
  ),
  'Couchbase\\N1qlQuery::profile' => 
  array (
    0 => 'mixed',
    'profileType' => 'string',
  ),
  'Couchbase\\N1qlQuery::readonly' => 
  array (
    0 => 'Couchbase\\N1qlQuery',
    'readonly' => 'bool',
  ),
  'Couchbase\\N1qlQuery::scanCap' => 
  array (
    0 => 'Couchbase\\N1qlQuery',
    'scanCap' => 'int',
  ),
  'Couchbase\\NumericRangeSearchFacet::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\NumericRangeSearchFacet::addRange' => 
  array (
    0 => 'Couchbase\\NumericRangeSearchFacet',
    'name' => 'string',
    'min' => 'float',
    'max' => 'float',
  ),
  'Couchbase\\NumericRangeSearchFacet::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\NumericRangeSearchQuery::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\NumericRangeSearchQuery::boost' => 
  array (
    0 => 'Couchbase\\NumericRangeSearchQuery',
    'boost' => 'float',
  ),
  'Couchbase\\NumericRangeSearchQuery::field' => 
  array (
    0 => 'Couchbase\\NumericRangeSearchQuery',
    'field' => 'string',
  ),
  'Couchbase\\NumericRangeSearchQuery::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\NumericRangeSearchQuery::max' => 
  array (
    0 => 'Couchbase\\NumericRangeSearchQuery',
    'max' => 'float',
    'inclusive=' => 'bool',
  ),
  'Couchbase\\NumericRangeSearchQuery::min' => 
  array (
    0 => 'Couchbase\\NumericRangeSearchQuery',
    'min' => 'float',
    'inclusive=' => 'bool',
  ),
  'Couchbase\\passthruDecoder' => 
  array (
    0 => 'string',
    'bytes' => 'string',
    'flags' => 'int',
    'datatype' => 'int',
  ),
  'Couchbase\\passthruEncoder' => 
  array (
    0 => 'array<array-key, mixed>',
    'value' => 'string',
  ),
  'Couchbase\\PasswordAuthenticator::password' => 
  array (
    0 => 'Couchbase\\PasswordAuthenticator',
    'password' => 'string',
  ),
  'Couchbase\\PasswordAuthenticator::username' => 
  array (
    0 => 'Couchbase\\PasswordAuthenticator',
    'username' => 'string',
  ),
  'Couchbase\\PhraseSearchQuery::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\PhraseSearchQuery::boost' => 
  array (
    0 => 'Couchbase\\PhraseSearchQuery',
    'boost' => 'float',
  ),
  'Couchbase\\PhraseSearchQuery::field' => 
  array (
    0 => 'Couchbase\\PhraseSearchQuery',
    'field' => 'string',
  ),
  'Couchbase\\PhraseSearchQuery::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\PrefixSearchQuery::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\PrefixSearchQuery::boost' => 
  array (
    0 => 'Couchbase\\PrefixSearchQuery',
    'boost' => 'float',
  ),
  'Couchbase\\PrefixSearchQuery::field' => 
  array (
    0 => 'Couchbase\\PrefixSearchQuery',
    'field' => 'string',
  ),
  'Couchbase\\PrefixSearchQuery::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\QueryStringSearchQuery::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\QueryStringSearchQuery::boost' => 
  array (
    0 => 'Couchbase\\QueryStringSearchQuery',
    'boost' => 'float',
  ),
  'Couchbase\\QueryStringSearchQuery::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\RegexpSearchQuery::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\RegexpSearchQuery::boost' => 
  array (
    0 => 'Couchbase\\RegexpSearchQuery',
    'boost' => 'float',
  ),
  'Couchbase\\RegexpSearchQuery::field' => 
  array (
    0 => 'Couchbase\\RegexpSearchQuery',
    'field' => 'string',
  ),
  'Couchbase\\RegexpSearchQuery::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\SearchQuery::__construct' => 
  array (
    0 => 'void',
    'indexName' => 'string',
    'queryPart' => 'Couchbase\\SearchQueryPart',
  ),
  'Couchbase\\SearchQuery::addFacet' => 
  array (
    0 => 'Couchbase\\SearchQuery',
    'name' => 'string',
    'facet' => 'Couchbase\\SearchFacet',
  ),
  'Couchbase\\SearchQuery::boolean' => 
  array (
    0 => 'Couchbase\\BooleanSearchQuery',
  ),
  'Couchbase\\SearchQuery::booleanField' => 
  array (
    0 => 'Couchbase\\BooleanFieldSearchQuery',
    'value' => 'bool',
  ),
  'Couchbase\\SearchQuery::conjuncts' => 
  array (
    0 => 'Couchbase\\ConjunctionSearchQuery',
    '...queries=' => 'array<int, Couchbase\\SearchQueryPart>',
  ),
  'Couchbase\\SearchQuery::consistentWith' => 
  array (
    0 => 'Couchbase\\SearchQuery',
    'state' => 'Couchbase\\MutationState',
  ),
  'Couchbase\\SearchQuery::dateRange' => 
  array (
    0 => 'Couchbase\\DateRangeSearchQuery',
  ),
  'Couchbase\\SearchQuery::dateRangeFacet' => 
  array (
    0 => 'Couchbase\\DateRangeSearchFacet',
    'field' => 'string',
    'limit' => 'int',
  ),
  'Couchbase\\SearchQuery::disjuncts' => 
  array (
    0 => 'Couchbase\\DisjunctionSearchQuery',
    '...queries=' => 'array<int, Couchbase\\SearchQueryPart>',
  ),
  'Couchbase\\SearchQuery::docId' => 
  array (
    0 => 'Couchbase\\DocIdSearchQuery',
    '...documentIds=' => 'array<int, string>',
  ),
  'Couchbase\\SearchQuery::explain' => 
  array (
    0 => 'Couchbase\\SearchQuery',
    'explain' => 'bool',
  ),
  'Couchbase\\SearchQuery::fields' => 
  array (
    0 => 'Couchbase\\SearchQuery',
    '...fields=' => 'array<int, string>',
  ),
  'Couchbase\\SearchQuery::geoBoundingBox' => 
  array (
    0 => 'Couchbase\\GeoBoundingBoxSearchQuery',
    'topLeftLongitude' => 'float',
    'topLeftLatitude' => 'float',
    'bottomRightLongitude' => 'float',
    'bottomRightLatitude' => 'float',
  ),
  'Couchbase\\SearchQuery::geoDistance' => 
  array (
    0 => 'Couchbase\\GeoDistanceSearchQuery',
    'longitude' => 'float',
    'latitude' => 'float',
    'distance' => 'string',
  ),
  'Couchbase\\SearchQuery::highlight' => 
  array (
    0 => 'Couchbase\\SearchQuery',
    'style' => 'string',
    '...fields=' => 'array<int, string>',
  ),
  'Couchbase\\SearchQuery::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\SearchQuery::limit' => 
  array (
    0 => 'Couchbase\\SearchQuery',
    'limit' => 'int',
  ),
  'Couchbase\\SearchQuery::match' => 
  array (
    0 => 'Couchbase\\MatchSearchQuery',
    'match' => 'string',
  ),
  'Couchbase\\SearchQuery::matchAll' => 
  array (
    0 => 'Couchbase\\MatchAllSearchQuery',
  ),
  'Couchbase\\SearchQuery::matchNone' => 
  array (
    0 => 'Couchbase\\MatchNoneSearchQuery',
  ),
  'Couchbase\\SearchQuery::matchPhrase' => 
  array (
    0 => 'Couchbase\\MatchPhraseSearchQuery',
    '...terms=' => 'array<int, string>',
  ),
  'Couchbase\\SearchQuery::numericRange' => 
  array (
    0 => 'Couchbase\\NumericRangeSearchQuery',
  ),
  'Couchbase\\SearchQuery::numericRangeFacet' => 
  array (
    0 => 'Couchbase\\NumericRangeSearchFacet',
    'field' => 'string',
    'limit' => 'int',
  ),
  'Couchbase\\SearchQuery::prefix' => 
  array (
    0 => 'Couchbase\\PrefixSearchQuery',
    'prefix' => 'string',
  ),
  'Couchbase\\SearchQuery::queryString' => 
  array (
    0 => 'Couchbase\\QueryStringSearchQuery',
    'queryString' => 'string',
  ),
  'Couchbase\\SearchQuery::regexp' => 
  array (
    0 => 'Couchbase\\RegexpSearchQuery',
    'regexp' => 'string',
  ),
  'Couchbase\\SearchQuery::serverSideTimeout' => 
  array (
    0 => 'Couchbase\\SearchQuery',
    'serverSideTimeout' => 'int',
  ),
  'Couchbase\\SearchQuery::skip' => 
  array (
    0 => 'Couchbase\\SearchQuery',
    'skip' => 'int',
  ),
  'Couchbase\\SearchQuery::sort' => 
  array (
    0 => 'Couchbase\\SearchQuery',
    '...sort=' => 'array<int, Couchbase\\sort>',
  ),
  'Couchbase\\SearchQuery::term' => 
  array (
    0 => 'Couchbase\\TermSearchQuery',
    'term' => 'string',
  ),
  'Couchbase\\SearchQuery::termFacet' => 
  array (
    0 => 'Couchbase\\TermSearchFacet',
    'field' => 'string',
    'limit' => 'int',
  ),
  'Couchbase\\SearchQuery::termRange' => 
  array (
    0 => 'Couchbase\\TermRangeSearchQuery',
  ),
  'Couchbase\\SearchQuery::wildcard' => 
  array (
    0 => 'Couchbase\\WildcardSearchQuery',
    'wildcard' => 'string',
  ),
  'Couchbase\\SearchSort::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\SearchSort::field' => 
  array (
    0 => 'Couchbase\\SearchSortField',
    'field' => 'string',
  ),
  'Couchbase\\SearchSort::geoDistance' => 
  array (
    0 => 'Couchbase\\SearchSortGeoDistance',
    'field' => 'string',
    'longitude' => 'float',
    'latitude' => 'float',
  ),
  'Couchbase\\SearchSort::id' => 
  array (
    0 => 'Couchbase\\SearchSortId',
  ),
  'Couchbase\\SearchSort::score' => 
  array (
    0 => 'Couchbase\\SearchSortScore',
  ),
  'Couchbase\\SearchSortField::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\SearchSortField::descending' => 
  array (
    0 => 'Couchbase\\SearchSortField',
    'descending' => 'bool',
  ),
  'Couchbase\\SearchSortField::field' => 
  array (
    0 => 'Couchbase\\SearchSortField',
    'field' => 'string',
  ),
  'Couchbase\\SearchSortField::geoDistance' => 
  array (
    0 => 'Couchbase\\SearchSortGeoDistance',
    'field' => 'string',
    'longitude' => 'float',
    'latitude' => 'float',
  ),
  'Couchbase\\SearchSortField::id' => 
  array (
    0 => 'Couchbase\\SearchSortId',
  ),
  'Couchbase\\SearchSortField::jsonSerialize' => 
  array (
    0 => 'mixed',
  ),
  'Couchbase\\SearchSortField::missing' => 
  array (
    0 => 'mixed',
    'missing' => 'string',
  ),
  'Couchbase\\SearchSortField::mode' => 
  array (
    0 => 'mixed',
    'mode' => 'string',
  ),
  'Couchbase\\SearchSortField::score' => 
  array (
    0 => 'Couchbase\\SearchSortScore',
  ),
  'Couchbase\\SearchSortField::type' => 
  array (
    0 => 'mixed',
    'type' => 'string',
  ),
  'Couchbase\\SearchSortGeoDistance::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\SearchSortGeoDistance::descending' => 
  array (
    0 => 'Couchbase\\SearchSortGeoDistance',
    'descending' => 'bool',
  ),
  'Couchbase\\SearchSortGeoDistance::field' => 
  array (
    0 => 'Couchbase\\SearchSortField',
    'field' => 'string',
  ),
  'Couchbase\\SearchSortGeoDistance::geoDistance' => 
  array (
    0 => 'Couchbase\\SearchSortGeoDistance',
    'field' => 'string',
    'longitude' => 'float',
    'latitude' => 'float',
  ),
  'Couchbase\\SearchSortGeoDistance::id' => 
  array (
    0 => 'Couchbase\\SearchSortId',
  ),
  'Couchbase\\SearchSortGeoDistance::jsonSerialize' => 
  array (
    0 => 'mixed',
  ),
  'Couchbase\\SearchSortGeoDistance::score' => 
  array (
    0 => 'Couchbase\\SearchSortScore',
  ),
  'Couchbase\\SearchSortGeoDistance::unit' => 
  array (
    0 => 'Couchbase\\SearchSortGeoDistance',
    'unit' => 'string',
  ),
  'Couchbase\\SearchSortId::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\SearchSortId::descending' => 
  array (
    0 => 'Couchbase\\SearchSortId',
    'descending' => 'bool',
  ),
  'Couchbase\\SearchSortId::field' => 
  array (
    0 => 'Couchbase\\SearchSortField',
    'field' => 'string',
  ),
  'Couchbase\\SearchSortId::geoDistance' => 
  array (
    0 => 'Couchbase\\SearchSortGeoDistance',
    'field' => 'string',
    'longitude' => 'float',
    'latitude' => 'float',
  ),
  'Couchbase\\SearchSortId::id' => 
  array (
    0 => 'Couchbase\\SearchSortId',
  ),
  'Couchbase\\SearchSortId::jsonSerialize' => 
  array (
    0 => 'mixed',
  ),
  'Couchbase\\SearchSortId::score' => 
  array (
    0 => 'Couchbase\\SearchSortScore',
  ),
  'Couchbase\\SearchSortScore::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\SearchSortScore::descending' => 
  array (
    0 => 'Couchbase\\SearchSortScore',
    'descending' => 'bool',
  ),
  'Couchbase\\SearchSortScore::field' => 
  array (
    0 => 'Couchbase\\SearchSortField',
    'field' => 'string',
  ),
  'Couchbase\\SearchSortScore::geoDistance' => 
  array (
    0 => 'Couchbase\\SearchSortGeoDistance',
    'field' => 'string',
    'longitude' => 'float',
    'latitude' => 'float',
  ),
  'Couchbase\\SearchSortScore::id' => 
  array (
    0 => 'Couchbase\\SearchSortId',
  ),
  'Couchbase\\SearchSortScore::jsonSerialize' => 
  array (
    0 => 'mixed',
  ),
  'Couchbase\\SearchSortScore::score' => 
  array (
    0 => 'Couchbase\\SearchSortScore',
  ),
  'Couchbase\\SpatialViewQuery::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\SpatialViewQuery::bbox' => 
  array (
    0 => 'Couchbase\\SpatialViewQuery',
    'bbox' => 'array<array-key, mixed>',
  ),
  'Couchbase\\SpatialViewQuery::consistency' => 
  array (
    0 => 'Couchbase\\SpatialViewQuery',
    'consistency' => 'int',
  ),
  'Couchbase\\SpatialViewQuery::custom' => 
  array (
    0 => 'mixed',
    'customParameters' => 'array<array-key, mixed>',
  ),
  'Couchbase\\SpatialViewQuery::encode' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\SpatialViewQuery::endRange' => 
  array (
    0 => 'Couchbase\\SpatialViewQuery',
    'range' => 'array<array-key, mixed>',
  ),
  'Couchbase\\SpatialViewQuery::limit' => 
  array (
    0 => 'Couchbase\\SpatialViewQuery',
    'limit' => 'int',
  ),
  'Couchbase\\SpatialViewQuery::order' => 
  array (
    0 => 'Couchbase\\SpatialViewQuery',
    'order' => 'int',
  ),
  'Couchbase\\SpatialViewQuery::skip' => 
  array (
    0 => 'Couchbase\\SpatialViewQuery',
    'skip' => 'int',
  ),
  'Couchbase\\SpatialViewQuery::startRange' => 
  array (
    0 => 'Couchbase\\SpatialViewQuery',
    'range' => 'array<array-key, mixed>',
  ),
  'Couchbase\\TermRangeSearchQuery::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\TermRangeSearchQuery::boost' => 
  array (
    0 => 'Couchbase\\TermRangeSearchQuery',
    'boost' => 'float',
  ),
  'Couchbase\\TermRangeSearchQuery::field' => 
  array (
    0 => 'Couchbase\\TermRangeSearchQuery',
    'field' => 'string',
  ),
  'Couchbase\\TermRangeSearchQuery::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\TermRangeSearchQuery::max' => 
  array (
    0 => 'Couchbase\\TermRangeSearchQuery',
    'max' => 'string',
    'inclusive=' => 'bool',
  ),
  'Couchbase\\TermRangeSearchQuery::min' => 
  array (
    0 => 'Couchbase\\TermRangeSearchQuery',
    'min' => 'string',
    'inclusive=' => 'bool',
  ),
  'Couchbase\\TermSearchFacet::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\TermSearchFacet::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\TermSearchQuery::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\TermSearchQuery::boost' => 
  array (
    0 => 'Couchbase\\TermSearchQuery',
    'boost' => 'float',
  ),
  'Couchbase\\TermSearchQuery::field' => 
  array (
    0 => 'Couchbase\\TermSearchQuery',
    'field' => 'string',
  ),
  'Couchbase\\TermSearchQuery::fuzziness' => 
  array (
    0 => 'Couchbase\\TermSearchQuery',
    'fuzziness' => 'int',
  ),
  'Couchbase\\TermSearchQuery::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\TermSearchQuery::prefixLength' => 
  array (
    0 => 'Couchbase\\TermSearchQuery',
    'prefixLength' => 'int',
  ),
  'Couchbase\\UserSettings::fullName' => 
  array (
    0 => 'Couchbase\\UserSettings',
    'fullName' => 'string',
  ),
  'Couchbase\\UserSettings::password' => 
  array (
    0 => 'Couchbase\\UserSettings',
    'password' => 'string',
  ),
  'Couchbase\\UserSettings::role' => 
  array (
    0 => 'Couchbase\\UserSettings',
    'role' => 'string',
    'bucket=' => 'string',
  ),
  'Couchbase\\ViewQuery::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\ViewQuery::consistency' => 
  array (
    0 => 'Couchbase\\ViewQuery',
    'consistency' => 'int',
  ),
  'Couchbase\\ViewQuery::custom' => 
  array (
    0 => 'Couchbase\\ViewQuery',
    'customParameters' => 'array<array-key, mixed>',
  ),
  'Couchbase\\ViewQuery::encode' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\ViewQuery::from' => 
  array (
    0 => 'Couchbase\\ViewQuery',
    'designDocumentName' => 'string',
    'viewName' => 'string',
  ),
  'Couchbase\\ViewQuery::fromSpatial' => 
  array (
    0 => 'Couchbase\\SpatialViewQuery',
    'designDocumentName' => 'string',
    'viewName' => 'string',
  ),
  'Couchbase\\ViewQuery::group' => 
  array (
    0 => 'Couchbase\\ViewQuery',
    'group' => 'bool',
  ),
  'Couchbase\\ViewQuery::groupLevel' => 
  array (
    0 => 'Couchbase\\ViewQuery',
    'groupLevel' => 'int',
  ),
  'Couchbase\\ViewQuery::idRange' => 
  array (
    0 => 'Couchbase\\ViewQuery',
    'startKeyDocumentId' => 'string',
    'endKeyDocumentId' => 'string',
  ),
  'Couchbase\\ViewQuery::key' => 
  array (
    0 => 'Couchbase\\ViewQuery',
    'key' => 'mixed',
  ),
  'Couchbase\\ViewQuery::keys' => 
  array (
    0 => 'Couchbase\\ViewQuery',
    'keys' => 'array<array-key, mixed>',
  ),
  'Couchbase\\ViewQuery::limit' => 
  array (
    0 => 'Couchbase\\ViewQuery',
    'limit' => 'int',
  ),
  'Couchbase\\ViewQuery::order' => 
  array (
    0 => 'Couchbase\\ViewQuery',
    'order' => 'int',
  ),
  'Couchbase\\ViewQuery::range' => 
  array (
    0 => 'Couchbase\\ViewQuery',
    'startKey' => 'mixed',
    'endKey' => 'mixed',
    'inclusiveEnd=' => 'bool',
  ),
  'Couchbase\\ViewQuery::reduce' => 
  array (
    0 => 'Couchbase\\ViewQuery',
    'reduce' => 'bool',
  ),
  'Couchbase\\ViewQuery::skip' => 
  array (
    0 => 'Couchbase\\ViewQuery',
    'skip' => 'int',
  ),
  'Couchbase\\ViewQueryEncodable::encode' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\WildcardSearchQuery::__construct' => 
  array (
    0 => 'void',
  ),
  'Couchbase\\WildcardSearchQuery::boost' => 
  array (
    0 => 'Couchbase\\WildcardSearchQuery',
    'boost' => 'float',
  ),
  'Couchbase\\WildcardSearchQuery::field' => 
  array (
    0 => 'Couchbase\\WildcardSearchQuery',
    'field' => 'string',
  ),
  'Couchbase\\WildcardSearchQuery::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Couchbase\\zlibCompress' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'Couchbase\\zlibDecompress' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'count' => 
  array (
    0 => 'int<0, max>',
    'value' => 'Countable|array<array-key, mixed>',
    'mode=' => 'int',
  ),
  'count_chars' => 
  array (
    0 => 'array<int, int>',
    'input' => 'string',
    'mode=' => '0|1|2',
  ),
  'count_chars\'1' => 
  array (
    0 => 'string',
    'input' => 'string',
    'mode=' => '3|4',
  ),
  'Countable::count' => 
  array (
    0 => 'int',
  ),
  'crack_check' => 
  array (
    0 => 'bool',
    'dictionary' => 'mixed',
    'password' => 'string',
  ),
  'crack_closedict' => 
  array (
    0 => 'bool',
    'dictionary=' => 'resource',
  ),
  'crack_getlastmessage' => 
  array (
    0 => 'string',
  ),
  'crack_opendict' => 
  array (
    0 => 'false|resource',
    'dictionary' => 'string',
  ),
  'crash' => 
  array (
    0 => 'mixed',
  ),
  'crc32' => 
  array (
    0 => 'int',
    'string' => 'string',
  ),
  'crypt' => 
  array (
    0 => 'string',
    'string' => 'string',
    'salt' => 'string',
  ),
  'ctype_alnum' => 
  array (
    0 => 'bool',
    'text' => 'string',
  ),
  'ctype_alpha' => 
  array (
    0 => 'bool',
    'text' => 'string',
  ),
  'ctype_cntrl' => 
  array (
    0 => 'bool',
    'text' => 'string',
  ),
  'ctype_digit' => 
  array (
    0 => 'bool',
    'text' => 'string',
  ),
  'ctype_graph' => 
  array (
    0 => 'bool',
    'text' => 'string',
  ),
  'ctype_lower' => 
  array (
    0 => 'bool',
    'text' => 'string',
  ),
  'ctype_print' => 
  array (
    0 => 'bool',
    'text' => 'string',
  ),
  'ctype_punct' => 
  array (
    0 => 'bool',
    'text' => 'string',
  ),
  'ctype_space' => 
  array (
    0 => 'bool',
    'text' => 'string',
  ),
  'ctype_upper' => 
  array (
    0 => 'bool',
    'text' => 'string',
  ),
  'ctype_xdigit' => 
  array (
    0 => 'bool',
    'text' => 'string',
  ),
  'cubrid_affected_rows' => 
  array (
    0 => 'int',
    'req_identifier=' => 'mixed',
  ),
  'cubrid_bind' => 
  array (
    0 => 'bool',
    'req_identifier' => 'resource',
    'bind_param' => 'int',
    'bind_value' => 'mixed',
    'bind_value_type=' => 'string',
  ),
  'cubrid_client_encoding' => 
  array (
    0 => 'string',
    'conn_identifier=' => 'mixed',
  ),
  'cubrid_close' => 
  array (
    0 => 'bool',
    'conn_identifier=' => 'mixed',
  ),
  'cubrid_close_prepare' => 
  array (
    0 => 'bool',
    'req_identifier' => 'resource',
  ),
  'cubrid_close_request' => 
  array (
    0 => 'bool',
    'req_identifier' => 'resource',
  ),
  'cubrid_col_get' => 
  array (
    0 => 'array<array-key, mixed>',
    'conn_identifier' => 'resource',
    'oid' => 'string',
    'attr_name' => 'string',
  ),
  'cubrid_col_size' => 
  array (
    0 => 'int',
    'conn_identifier' => 'resource',
    'oid' => 'string',
    'attr_name' => 'string',
  ),
  'cubrid_column_names' => 
  array (
    0 => 'array<array-key, mixed>',
    'req_identifier' => 'resource',
  ),
  'cubrid_column_types' => 
  array (
    0 => 'array<array-key, mixed>',
    'req_identifier' => 'resource',
  ),
  'cubrid_commit' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
  ),
  'cubrid_connect' => 
  array (
    0 => 'resource',
    'host' => 'string',
    'port' => 'int',
    'dbname' => 'string',
    'userid=' => 'string',
    'passwd=' => 'string',
  ),
  'cubrid_connect_with_url' => 
  array (
    0 => 'resource',
    'conn_url' => 'string',
    'userid=' => 'string',
    'passwd=' => 'string',
  ),
  'cubrid_current_oid' => 
  array (
    0 => 'string',
    'req_identifier' => 'resource',
  ),
  'cubrid_data_seek' => 
  array (
    0 => 'bool',
    'req_identifier' => 'mixed',
    'row_number' => 'int',
  ),
  'cubrid_db_name' => 
  array (
    0 => 'string',
    'result' => 'array<array-key, mixed>',
    'index' => 'int',
  ),
  'cubrid_db_parameter' => 
  array (
    0 => 'array<array-key, mixed>',
    'conn_identifier' => 'resource',
  ),
  'cubrid_disconnect' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
  ),
  'cubrid_drop' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
    'oid' => 'string',
  ),
  'cubrid_errno' => 
  array (
    0 => 'int',
    'conn_identifier=' => 'mixed',
  ),
  'cubrid_error' => 
  array (
    0 => 'string',
    'connection=' => 'mixed',
  ),
  'cubrid_error_code' => 
  array (
    0 => 'int',
  ),
  'cubrid_error_code_facility' => 
  array (
    0 => 'int',
  ),
  'cubrid_error_msg' => 
  array (
    0 => 'string',
  ),
  'cubrid_execute' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'mixed',
    'sql' => 'string',
    'option=' => 'int',
    'request_identifier=' => 'mixed',
  ),
  'cubrid_fetch' => 
  array (
    0 => 'mixed',
    'result' => 'resource',
    'type=' => 'int',
  ),
  'cubrid_fetch_array' => 
  array (
    0 => 'array<array-key, mixed>',
    'result' => 'resource',
    'type=' => 'int',
  ),
  'cubrid_fetch_assoc' => 
  array (
    0 => 'array<array-key, mixed>',
    'result' => 'resource',
  ),
  'cubrid_fetch_field' => 
  array (
    0 => 'object',
    'result' => 'resource',
    'field_offset=' => 'int',
  ),
  'cubrid_fetch_lengths' => 
  array (
    0 => 'array<array-key, mixed>',
    'result' => 'resource',
  ),
  'cubrid_fetch_object' => 
  array (
    0 => 'object',
    'result' => 'resource',
    'class_name=' => 'string',
    'params=' => 'array<array-key, mixed>',
  ),
  'cubrid_fetch_row' => 
  array (
    0 => 'array<array-key, mixed>',
    'result' => 'resource',
  ),
  'cubrid_field_flags' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'field_offset' => 'int',
  ),
  'cubrid_field_len' => 
  array (
    0 => 'int',
    'result' => 'resource',
    'field_offset' => 'int',
  ),
  'cubrid_field_name' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'field_offset' => 'int',
  ),
  'cubrid_field_seek' => 
  array (
    0 => 'bool',
    'result' => 'resource',
    'field_offset=' => 'int',
  ),
  'cubrid_field_table' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'field_offset' => 'int',
  ),
  'cubrid_field_type' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'field_offset' => 'int',
  ),
  'cubrid_free_result' => 
  array (
    0 => 'bool',
    'req_identifier' => 'resource',
  ),
  'cubrid_get' => 
  array (
    0 => 'mixed',
    'conn_identifier' => 'resource',
    'oid' => 'string',
    'attr=' => 'mixed',
  ),
  'cubrid_get_autocommit' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
  ),
  'cubrid_get_charset' => 
  array (
    0 => 'string',
    'conn_identifier' => 'resource',
  ),
  'cubrid_get_class_name' => 
  array (
    0 => 'string',
    'conn_identifier' => 'resource',
    'oid' => 'string',
  ),
  'cubrid_get_client_info' => 
  array (
    0 => 'string',
  ),
  'cubrid_get_db_parameter' => 
  array (
    0 => 'array<array-key, mixed>',
    'conn_identifier' => 'resource',
  ),
  'cubrid_get_query_timeout' => 
  array (
    0 => 'int',
    'req_identifier' => 'resource',
  ),
  'cubrid_get_server_info' => 
  array (
    0 => 'string',
    'conn_identifier' => 'resource',
  ),
  'cubrid_insert_id' => 
  array (
    0 => 'string',
    'conn_identifier=' => 'resource',
  ),
  'cubrid_is_instance' => 
  array (
    0 => 'int',
    'conn_identifier' => 'resource',
    'oid' => 'string',
  ),
  'cubrid_list_dbs' => 
  array (
    0 => 'array<array-key, mixed>',
    'conn_identifier' => 'resource',
  ),
  'cubrid_load_from_glo' => 
  array (
    0 => 'int',
    'conn_identifier' => 'mixed',
    'oid' => 'string',
    'file_name' => 'string',
  ),
  'cubrid_lob2_bind' => 
  array (
    0 => 'bool',
    'req_identifier' => 'resource',
    'bind_index' => 'int',
    'bind_value' => 'mixed',
    'bind_value_type=' => 'string',
  ),
  'cubrid_lob2_close' => 
  array (
    0 => 'bool',
    'lob_identifier' => 'resource',
  ),
  'cubrid_lob2_export' => 
  array (
    0 => 'bool',
    'lob_identifier' => 'resource',
    'file_name' => 'string',
  ),
  'cubrid_lob2_import' => 
  array (
    0 => 'bool',
    'lob_identifier' => 'resource',
    'file_name' => 'string',
  ),
  'cubrid_lob2_new' => 
  array (
    0 => 'resource',
    'conn_identifier=' => 'resource',
    'type=' => 'string',
  ),
  'cubrid_lob2_read' => 
  array (
    0 => 'string',
    'lob_identifier' => 'resource',
    'length' => 'int',
  ),
  'cubrid_lob2_seek' => 
  array (
    0 => 'bool',
    'lob_identifier' => 'resource',
    'offset' => 'int',
    'origin=' => 'int',
  ),
  'cubrid_lob2_seek64' => 
  array (
    0 => 'bool',
    'lob_identifier' => 'resource',
    'offset' => 'string',
    'origin=' => 'int',
  ),
  'cubrid_lob2_size' => 
  array (
    0 => 'int',
    'lob_identifier' => 'resource',
  ),
  'cubrid_lob2_size64' => 
  array (
    0 => 'string',
    'lob_identifier' => 'resource',
  ),
  'cubrid_lob2_tell' => 
  array (
    0 => 'int',
    'lob_identifier' => 'resource',
  ),
  'cubrid_lob2_tell64' => 
  array (
    0 => 'string',
    'lob_identifier' => 'resource',
  ),
  'cubrid_lob2_write' => 
  array (
    0 => 'bool',
    'lob_identifier' => 'resource',
    'buf' => 'string',
  ),
  'cubrid_lob_close' => 
  array (
    0 => 'bool',
    'lob_identifier_array' => 'array<array-key, mixed>',
  ),
  'cubrid_lob_export' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
    'lob_identifier' => 'resource',
    'path_name' => 'string',
  ),
  'cubrid_lob_get' => 
  array (
    0 => 'array<array-key, mixed>',
    'conn_identifier' => 'resource',
    'sql' => 'string',
  ),
  'cubrid_lob_send' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
    'lob_identifier' => 'resource',
  ),
  'cubrid_lob_size' => 
  array (
    0 => 'string',
    'lob_identifier' => 'resource',
  ),
  'cubrid_lock_read' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
    'oid' => 'string',
  ),
  'cubrid_lock_write' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
    'oid' => 'string',
  ),
  'cubrid_move_cursor' => 
  array (
    0 => 'int',
    'req_identifier' => 'resource',
    'offset' => 'int',
    'origin=' => 'int',
  ),
  'cubrid_new_glo' => 
  array (
    0 => 'string',
    'conn_identifier' => 'mixed',
    'class_name' => 'string',
    'file_name' => 'string',
  ),
  'cubrid_next_result' => 
  array (
    0 => 'bool',
    'result' => 'resource',
  ),
  'cubrid_num_cols' => 
  array (
    0 => 'int',
    'req_identifier' => 'resource',
  ),
  'cubrid_num_fields' => 
  array (
    0 => 'int',
    'result' => 'resource',
  ),
  'cubrid_num_rows' => 
  array (
    0 => 'int',
    'req_identifier' => 'resource',
  ),
  'cubrid_pconnect' => 
  array (
    0 => 'resource',
    'host' => 'string',
    'port' => 'int',
    'dbname' => 'string',
    'userid=' => 'string',
    'passwd=' => 'string',
  ),
  'cubrid_pconnect_with_url' => 
  array (
    0 => 'resource',
    'conn_url' => 'string',
    'userid=' => 'string',
    'passwd=' => 'string',
  ),
  'cubrid_ping' => 
  array (
    0 => 'bool',
    'conn_identifier=' => 'mixed',
  ),
  'cubrid_prepare' => 
  array (
    0 => 'resource',
    'conn_identifier' => 'resource',
    'prepare_stmt' => 'string',
    'option=' => 'int',
  ),
  'cubrid_put' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
    'oid' => 'string',
    'attr=' => 'string',
    'value=' => 'mixed',
  ),
  'cubrid_query' => 
  array (
    0 => 'resource',
    'query' => 'string',
    'conn_identifier=' => 'mixed',
  ),
  'cubrid_real_escape_string' => 
  array (
    0 => 'string',
    'unescaped_string' => 'string',
    'conn_identifier=' => 'mixed',
  ),
  'cubrid_result' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'row' => 'int',
    'field=' => 'mixed',
  ),
  'cubrid_rollback' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
  ),
  'cubrid_save_to_glo' => 
  array (
    0 => 'int',
    'conn_identifier' => 'mixed',
    'oid' => 'string',
    'file_name' => 'string',
  ),
  'cubrid_schema' => 
  array (
    0 => 'array<array-key, mixed>',
    'conn_identifier' => 'resource',
    'schema_type' => 'int',
    'class_name=' => 'string',
    'attr_name=' => 'string',
  ),
  'cubrid_send_glo' => 
  array (
    0 => 'int',
    'conn_identifier' => 'mixed',
    'oid' => 'string',
  ),
  'cubrid_seq_add' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
    'oid' => 'string',
    'attr_name' => 'string',
    'seq_element' => 'string',
  ),
  'cubrid_seq_drop' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
    'oid' => 'string',
    'attr_name' => 'string',
    'index' => 'int',
  ),
  'cubrid_seq_insert' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
    'oid' => 'string',
    'attr_name' => 'string',
    'index' => 'int',
    'seq_element' => 'string',
  ),
  'cubrid_seq_put' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
    'oid' => 'string',
    'attr_name' => 'string',
    'index' => 'int',
    'seq_element' => 'string',
  ),
  'cubrid_set_add' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
    'oid' => 'string',
    'attr_name' => 'string',
    'set_element' => 'string',
  ),
  'cubrid_set_autocommit' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
    'mode' => 'bool',
  ),
  'cubrid_set_db_parameter' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
    'param_type' => 'int',
    'param_value' => 'int',
  ),
  'cubrid_set_drop' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
    'oid' => 'string',
    'attr_name' => 'string',
    'set_element' => 'string',
  ),
  'cubrid_set_query_timeout' => 
  array (
    0 => 'bool',
    'req_identifier' => 'resource',
    'timeout' => 'int',
  ),
  'cubrid_unbuffered_query' => 
  array (
    0 => 'resource',
    'query' => 'string',
    'conn_identifier=' => 'mixed',
  ),
  'cubrid_version' => 
  array (
    0 => 'string',
  ),
  'curl_close' => 
  array (
    0 => 'void',
    'handle' => 'CurlHandle',
  ),
  'curl_copy_handle' => 
  array (
    0 => 'CurlHandle|false',
    'handle' => 'CurlHandle',
  ),
  'curl_errno' => 
  array (
    0 => 'int',
    'handle' => 'CurlHandle',
  ),
  'curl_error' => 
  array (
    0 => 'string',
    'handle' => 'CurlHandle',
  ),
  'curl_escape' => 
  array (
    0 => 'false|string',
    'handle' => 'CurlHandle',
    'string' => 'string',
  ),
  'curl_exec' => 
  array (
    0 => 'bool|string',
    'handle' => 'CurlHandle',
  ),
  'curl_file_create' => 
  array (
    0 => 'CURLFile',
    'filename' => 'string',
    'mime_type=' => 'null|string',
    'posted_filename=' => 'null|string',
  ),
  'curl_getinfo' => 
  array (
    0 => 'mixed',
    'handle' => 'CurlHandle',
    'option=' => 'int|null',
  ),
  'curl_init' => 
  array (
    0 => 'CurlHandle|false',
    'url=' => 'null|string',
  ),
  'curl_multi_add_handle' => 
  array (
    0 => 'int',
    'multi_handle' => 'CurlMultiHandle',
    'handle' => 'CurlHandle',
  ),
  'curl_multi_close' => 
  array (
    0 => 'void',
    'multi_handle' => 'CurlMultiHandle',
  ),
  'curl_multi_errno' => 
  array (
    0 => 'int',
    'multi_handle' => 'CurlMultiHandle',
  ),
  'curl_multi_exec' => 
  array (
    0 => 'int',
    'multi_handle' => 'CurlMultiHandle',
    '&w_still_running' => 'int',
  ),
  'curl_multi_getcontent' => 
  array (
    0 => 'string',
    'handle' => 'CurlHandle',
  ),
  'curl_multi_info_read' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'multi_handle' => 'CurlMultiHandle',
    '&w_queued_messages=' => 'int',
  ),
  'curl_multi_init' => 
  array (
    0 => 'CurlMultiHandle',
  ),
  'curl_multi_remove_handle' => 
  array (
    0 => 'int',
    'multi_handle' => 'CurlMultiHandle',
    'handle' => 'CurlHandle',
  ),
  'curl_multi_select' => 
  array (
    0 => 'int',
    'multi_handle' => 'CurlMultiHandle',
    'timeout=' => 'float',
  ),
  'curl_multi_setopt' => 
  array (
    0 => 'bool',
    'multi_handle' => 'CurlMultiHandle',
    'option' => 'int',
    'value' => 'mixed',
  ),
  'curl_multi_strerror' => 
  array (
    0 => 'null|string',
    'error_code' => 'int',
  ),
  'curl_pause' => 
  array (
    0 => 'int',
    'handle' => 'CurlHandle',
    'flags' => 'int',
  ),
  'curl_reset' => 
  array (
    0 => 'void',
    'handle' => 'CurlHandle',
  ),
  'curl_setopt' => 
  array (
    0 => 'bool',
    'handle' => 'CurlHandle',
    'option' => 'int',
    'value' => 'callable|mixed',
  ),
  'curl_setopt_array' => 
  array (
    0 => 'bool',
    'handle' => 'CurlHandle',
    'options' => 'array<array-key, mixed>',
  ),
  'curl_share_close' => 
  array (
    0 => 'void',
    'share_handle' => 'CurlShareHandle',
  ),
  'curl_share_errno' => 
  array (
    0 => 'int',
    'share_handle' => 'CurlShareHandle',
  ),
  'curl_share_init' => 
  array (
    0 => 'CurlShareHandle',
  ),
  'curl_share_setopt' => 
  array (
    0 => 'bool',
    'share_handle' => 'CurlShareHandle',
    'option' => 'int',
    'value' => 'mixed',
  ),
  'curl_share_strerror' => 
  array (
    0 => 'null|string',
    'error_code' => 'int',
  ),
  'curl_strerror' => 
  array (
    0 => 'null|string',
    'error_code' => 'int',
  ),
  'curl_upkeep' => 
  array (
    0 => 'bool',
    'handle' => 'CurlHandle',
  ),
  'curl_unescape' => 
  array (
    0 => 'false|string',
    'handle' => 'CurlHandle',
    'string' => 'string',
  ),
  'curl_version' => 
  array (
    0 => 'array<array-key, mixed>',
    'version=' => 'int',
  ),
  'CURLFile::__construct' => 
  array (
    0 => 'void',
    'filename' => 'string',
    'mime_type=' => 'null|string',
    'posted_filename=' => 'null|string',
  ),
  'CURLFile::getFilename' => 
  array (
    0 => 'string',
  ),
  'CURLFile::getMimeType' => 
  array (
    0 => 'string',
  ),
  'CURLFile::getPostFilename' => 
  array (
    0 => 'string',
  ),
  'CURLFile::setMimeType' => 
  array (
    0 => 'void',
    'mime_type' => 'string',
  ),
  'CURLFile::setPostFilename' => 
  array (
    0 => 'void',
    'posted_filename' => 'string',
  ),
  'CURLStringFile::__construct' => 
  array (
    0 => 'void',
    'data' => 'string',
    'postname' => 'string',
    'mime=' => 'string',
  ),
  'current' => 
  array (
    0 => 'false|mixed',
    'array' => 'array<array-key, mixed>',
  ),
  'cyrus_authenticate' => 
  array (
    0 => 'void',
    'connection' => 'resource',
    'mechlist=' => 'string',
    'service=' => 'string',
    'user=' => 'string',
    'minssf=' => 'int',
    'maxssf=' => 'int',
    'authname=' => 'string',
    'password=' => 'string',
  ),
  'cyrus_bind' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
    'callbacks' => 'array<array-key, mixed>',
  ),
  'cyrus_close' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
  ),
  'cyrus_connect' => 
  array (
    0 => 'resource',
    'host=' => 'string',
    'port=' => 'string',
    'flags=' => 'int',
  ),
  'cyrus_query' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'resource',
    'query' => 'string',
  ),
  'cyrus_unbind' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
    'trigger_name' => 'string',
  ),
  'date' => 
  array (
    0 => 'string',
    'format' => 'string',
    'timestamp=' => 'int|null',
  ),
  'date_add' => 
  array (
    0 => 'DateTime',
    'object' => 'DateTime',
    'interval' => 'DateInterval',
  ),
  'date_create' => 
  array (
    0 => 'DateTime|false',
    'datetime=' => 'string',
    'timezone=' => 'DateTimeZone|null',
  ),
  'date_create_from_format' => 
  array (
    0 => 'DateTime|false',
    'format' => 'string',
    'datetime' => 'string',
    'timezone=' => 'DateTimeZone|null',
  ),
  'date_create_immutable' => 
  array (
    0 => 'DateTimeImmutable|false',
    'datetime=' => 'string',
    'timezone=' => 'DateTimeZone|null',
  ),
  'date_create_immutable_from_format' => 
  array (
    0 => 'DateTimeImmutable|false',
    'format' => 'string',
    'datetime' => 'string',
    'timezone=' => 'DateTimeZone|null',
  ),
  'date_date_set' => 
  array (
    0 => 'DateTime',
    'object' => 'DateTime',
    'year' => 'int',
    'month' => 'int',
    'day' => 'int',
  ),
  'date_default_timezone_get' => 
  array (
    0 => 'non-empty-string',
  ),
  'date_default_timezone_set' => 
  array (
    0 => 'bool',
    'timezoneId' => 'non-empty-string',
  ),
  'date_diff' => 
  array (
    0 => 'DateInterval',
    'baseObject' => 'DateTimeInterface',
    'targetObject' => 'DateTimeInterface',
    'absolute=' => 'bool',
  ),
  'date_format' => 
  array (
    0 => 'string',
    'object' => 'DateTimeInterface',
    'format' => 'string',
  ),
  'date_get_last_errors' => 
  array (
    0 => 'array{error_count: int, errors: array<int, string>, warning_count: int, warnings: array<int, string>}|false',
  ),
  'date_interval_create_from_date_string' => 
  array (
    0 => 'DateInterval',
    'datetime' => 'string',
  ),
  'date_interval_format' => 
  array (
    0 => 'string',
    'object' => 'DateInterval',
    'format' => 'string',
  ),
  'date_isodate_set' => 
  array (
    0 => 'DateTime',
    'object' => 'DateTime',
    'year' => 'int',
    'week' => 'int',
    'dayOfWeek=' => 'int',
  ),
  'date_modify' => 
  array (
    0 => 'DateTime|false',
    'object' => 'DateTime',
    'modifier' => 'string',
  ),
  'date_offset_get' => 
  array (
    0 => 'int',
    'object' => 'DateTimeInterface',
  ),
  'date_parse' => 
  array (
    0 => 'array<array-key, mixed>',
    'datetime' => 'string',
  ),
  'date_parse_from_format' => 
  array (
    0 => 'array<array-key, mixed>',
    'format' => 'string',
    'datetime' => 'string',
  ),
  'date_sub' => 
  array (
    0 => 'DateTime',
    'object' => 'DateTime',
    'interval' => 'DateInterval',
  ),
  'date_sun_info' => 
  array (
    0 => 'array<array-key, mixed>',
    'timestamp' => 'int',
    'latitude' => 'float',
    'longitude' => 'float',
  ),
  'date_sunrise' => 
  array (
    0 => 'false|float|int|string',
    'timestamp' => 'int',
    'returnFormat=' => 'int',
    'latitude=' => 'float|null',
    'longitude=' => 'float|null',
    'zenith=' => 'float|null',
    'utcOffset=' => 'float|null',
  ),
  'date_sunset' => 
  array (
    0 => 'false|float|int|string',
    'timestamp' => 'int',
    'returnFormat=' => 'int',
    'latitude=' => 'float|null',
    'longitude=' => 'float|null',
    'zenith=' => 'float|null',
    'utcOffset=' => 'float|null',
  ),
  'date_time_set' => 
  array (
    0 => 'DateTime',
    'object' => 'DateTime',
    'hour' => 'int',
    'minute' => 'int',
    'second=' => 'int',
    'microsecond=' => 'int',
  ),
  'date_timestamp_get' => 
  array (
    0 => 'int',
    'object' => 'DateTimeInterface',
  ),
  'date_timestamp_set' => 
  array (
    0 => 'DateTime',
    'object' => 'DateTime',
    'timestamp' => 'int',
  ),
  'date_timezone_get' => 
  array (
    0 => 'DateTimeZone|false',
    'object' => 'DateTimeInterface',
  ),
  'date_timezone_set' => 
  array (
    0 => 'DateTime',
    'object' => 'DateTime',
    'timezone' => 'DateTimeZone',
  ),
  'datefmt_create' => 
  array (
    0 => 'IntlDateFormatter|null',
    'locale' => 'null|string',
    'dateType=' => 'int',
    'timeType=' => 'int',
    'timezone=' => 'DateTimeZone|IntlTimeZone|null|string',
    'calendar=' => 'IntlCalendar|int|null',
    'pattern=' => 'null|string',
  ),
  'datefmt_format' => 
  array (
    0 => 'false|string',
    'formatter' => 'IntlDateFormatter',
    'datetime' => 'DateTime|IntlCalendar|array<array-key, mixed>|int',
  ),
  'datefmt_format_object' => 
  array (
    0 => 'false|string',
    'datetime' => 'object',
    'format=' => 'mixed',
    'locale=' => 'null|string',
  ),
  'datefmt_get_calendar' => 
  array (
    0 => 'int',
    'formatter' => 'IntlDateFormatter',
  ),
  'datefmt_get_calendar_object' => 
  array (
    0 => 'IntlCalendar|false|null',
    'formatter' => 'IntlDateFormatter',
  ),
  'datefmt_get_datetype' => 
  array (
    0 => 'int',
    'formatter' => 'IntlDateFormatter',
  ),
  'datefmt_get_error_code' => 
  array (
    0 => 'int',
    'formatter' => 'IntlDateFormatter',
  ),
  'datefmt_get_error_message' => 
  array (
    0 => 'string',
    'formatter' => 'IntlDateFormatter',
  ),
  'datefmt_get_locale' => 
  array (
    0 => 'false|string',
    'formatter' => 'IntlDateFormatter',
    'type=' => 'int',
  ),
  'datefmt_get_pattern' => 
  array (
    0 => 'string',
    'formatter' => 'IntlDateFormatter',
  ),
  'datefmt_get_timetype' => 
  array (
    0 => 'int',
    'formatter' => 'IntlDateFormatter',
  ),
  'datefmt_get_timezone' => 
  array (
    0 => 'IntlTimeZone|false',
    'formatter' => 'IntlDateFormatter',
  ),
  'datefmt_get_timezone_id' => 
  array (
    0 => 'false|string',
    'formatter' => 'IntlDateFormatter',
  ),
  'datefmt_is_lenient' => 
  array (
    0 => 'bool',
    'formatter' => 'IntlDateFormatter',
  ),
  'datefmt_localtime' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'formatter' => 'IntlDateFormatter',
    'string' => 'string',
    '&rw_offset=' => 'int',
  ),
  'datefmt_parse' => 
  array (
    0 => 'false|float|int',
    'formatter' => 'IntlDateFormatter',
    'string' => 'string',
    '&rw_offset=' => 'int',
  ),
  'datefmt_set_calendar' => 
  array (
    0 => 'bool',
    'formatter' => 'IntlDateFormatter',
    'calendar' => 'IntlCalendar|int|null',
  ),
  'datefmt_set_lenient' => 
  array (
    0 => 'void',
    'formatter' => 'IntlDateFormatter',
    'lenient' => 'bool',
  ),
  'datefmt_set_pattern' => 
  array (
    0 => 'bool',
    'formatter' => 'IntlDateFormatter',
    'pattern' => 'string',
  ),
  'datefmt_set_timezone' => 
  array (
    0 => 'bool',
    'formatter' => 'IntlDateFormatter',
    'timezone' => 'DateTimeZone|IntlTimeZone|null|string',
  ),
  'DateInterval::__construct' => 
  array (
    0 => 'void',
    'duration' => 'string',
  ),
  'DateInterval::__set_state' => 
  array (
    0 => 'DateInterval',
    'array' => 'array<array-key, mixed>',
  ),
  'DateInterval::__wakeup' => 
  array (
    0 => 'void',
  ),
  'DateInterval::createFromDateString' => 
  array (
    0 => 'DateInterval|false',
    'datetime' => 'string',
  ),
  'DateInterval::format' => 
  array (
    0 => 'string',
    'format' => 'string',
  ),
  'DatePeriod::__construct' => 
  array (
    0 => 'void',
    'start' => 'DateTimeInterface',
    'interval' => 'DateInterval',
    'recur' => 'int',
    'options=' => 'int',
  ),
  'DatePeriod::__construct\'1' => 
  array (
    0 => 'void',
    'start' => 'DateTimeInterface',
    'interval' => 'DateInterval',
    'end' => 'DateTimeInterface',
    'options=' => 'int',
  ),
  'DatePeriod::__construct\'2' => 
  array (
    0 => 'void',
    'iso' => 'string',
    'options=' => 'int',
  ),
  'DatePeriod::__wakeup' => 
  array (
    0 => 'void',
  ),
  'DatePeriod::getDateInterval' => 
  array (
    0 => 'DateInterval',
  ),
  'DatePeriod::getEndDate' => 
  array (
    0 => 'DateTimeInterface|null',
  ),
  'DatePeriod::getStartDate' => 
  array (
    0 => 'DateTimeInterface',
  ),
  'DateTime::__construct' => 
  array (
    0 => 'void',
    'time=' => 'string',
  ),
  'DateTime::__construct\'1' => 
  array (
    0 => 'void',
    'time' => 'null|string',
    'timezone' => 'DateTimeZone|null',
  ),
  'DateTime::__wakeup' => 
  array (
    0 => 'void',
  ),
  'DateTime::add' => 
  array (
    0 => 'static',
    'interval' => 'DateInterval',
  ),
  'DateTime::createFromFormat' => 
  array (
    0 => 'false|static',
    'format' => 'string',
    'datetime' => 'string',
    'timezone=' => 'DateTimeZone|null',
  ),
  'DateTime::createFromImmutable' => 
  array (
    0 => 'static',
    'object' => 'DateTimeImmutable',
  ),
  'DateTime::createFromInterface' => 
  array (
    0 => 'static',
    'object' => 'DateTimeInterface',
  ),
  'DateTime::diff' => 
  array (
    0 => 'DateInterval',
    'targetObject' => 'DateTimeInterface',
    'absolute=' => 'bool',
  ),
  'DateTime::format' => 
  array (
    0 => 'string',
    'format' => 'string',
  ),
  'DateTime::getLastErrors' => 
  array (
    0 => 'array{error_count: int, errors: array<int, string>, warning_count: int, warnings: array<int, string>}|false',
  ),
  'DateTime::getOffset' => 
  array (
    0 => 'int',
  ),
  'DateTime::getTimestamp' => 
  array (
    0 => 'int',
  ),
  'DateTime::getTimezone' => 
  array (
    0 => 'DateTimeZone|false',
  ),
  'DateTime::modify' => 
  array (
    0 => 'false|static',
    'modifier' => 'string',
  ),
  'DateTime::setDate' => 
  array (
    0 => 'static',
    'year' => 'int',
    'month' => 'int',
    'day' => 'int',
  ),
  'DateTime::setISODate' => 
  array (
    0 => 'static',
    'year' => 'int',
    'week' => 'int',
    'dayOfWeek=' => 'int',
  ),
  'DateTime::setTime' => 
  array (
    0 => 'static',
    'hour' => 'int',
    'minute' => 'int',
    'second=' => 'int',
    'microsecond=' => 'int',
  ),
  'DateTime::setTimestamp' => 
  array (
    0 => 'static',
    'timestamp' => 'int',
  ),
  'DateTime::setTimezone' => 
  array (
    0 => 'static',
    'timezone' => 'DateTimeZone',
  ),
  'DateTime::sub' => 
  array (
    0 => 'static',
    'interval' => 'DateInterval',
  ),
  'DateTimeImmutable::__wakeup' => 
  array (
    0 => 'void',
  ),
  'DateTimeImmutable::createFromInterface' => 
  array (
    0 => 'static',
    'object' => 'DateTimeInterface',
  ),
  'DateTimeImmutable::getLastErrors' => 
  array (
    0 => 'array{error_count: int, errors: array<int, string>, warning_count: int, warnings: array<int, string>}|false',
  ),
  'DateTimeInterface::diff' => 
  array (
    0 => 'DateInterval',
    'datetime2' => 'DateTimeInterface',
    'absolute=' => 'bool',
  ),
  'DateTimeInterface::format' => 
  array (
    0 => 'string',
    'format' => 'string',
  ),
  'DateTimeInterface::getOffset' => 
  array (
    0 => 'int',
  ),
  'DateTimeInterface::getTimestamp' => 
  array (
    0 => 'int',
  ),
  'DateTimeInterface::getTimezone' => 
  array (
    0 => 'DateTimeZone|false',
  ),
  'DateTimeInterface::__serialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'DateTimeInterface::__unserialize' => 
  array (
    0 => 'void',
    'data' => 'array<array-key, mixed>',
  ),
  'DateTimeZone::__construct' => 
  array (
    0 => 'void',
    'timezone' => 'non-empty-string',
  ),
  'DateTimeZone::__set_state' => 
  array (
    0 => 'DateTimeZone',
    'array' => 'array<array-key, mixed>',
  ),
  'DateTimeZone::__wakeup' => 
  array (
    0 => 'void',
  ),
  'DateTimeZone::getLocation' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'DateTimeZone::getName' => 
  array (
    0 => 'non-empty-string',
  ),
  'DateTimeZone::getOffset' => 
  array (
    0 => 'int',
    'datetime' => 'DateTimeInterface',
  ),
  'DateTimeZone::getTransitions' => 
  array (
    0 => 'false|list<array{abbr: string, isdst: bool, offset: int, time: string, ts: int}>',
    'timestampBegin=' => 'int',
    'timestampEnd=' => 'int',
  ),
  'DateTimeZone::listAbbreviations' => 
  array (
    0 => 'array<string, list<array{dst: bool, offset: int, timezone_id: null|string}>>',
  ),
  'DateTimeZone::listIdentifiers' => 
  array (
    0 => 'list<string>',
    'timezoneGroup=' => 'int',
    'countryCode=' => 'null|string',
  ),
  'db2_autocommit' => 
  array (
    0 => '0|1|bool',
    'connection' => 'resource',
    'value=' => '0|1',
  ),
  'db2_bind_param' => 
  array (
    0 => 'bool',
    'stmt' => 'resource',
    'parameter_number' => 'int',
    'variable_name' => 'string',
    'parameter_type=' => 'int',
    'data_type=' => 'int',
    'precision=' => 'int',
    'scale=' => 'int',
  ),
  'db2_client_info' => 
  array (
    0 => 'false|stdClass',
    'connection' => 'resource',
  ),
  'db2_close' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
  ),
  'db2_column_privileges' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'qualifier=' => 'null|string',
    'schema=' => 'null|string',
    'table_name=' => 'null|string',
    'column_name=' => 'null|string',
  ),
  'db2_columns' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'qualifier=' => 'null|string',
    'schema=' => 'null|string',
    'table_name=' => 'null|string',
    'column_name=' => 'null|string',
  ),
  'db2_commit' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
  ),
  'db2_conn_error' => 
  array (
    0 => 'string',
    'connection=' => 'resource',
  ),
  'db2_conn_errormsg' => 
  array (
    0 => 'string',
    'connection=' => 'resource',
  ),
  'db2_connect' => 
  array (
    0 => 'false|resource',
    'database' => 'string',
    'username' => 'null|string',
    'password' => 'null|string',
    'options=' => 'array<array-key, mixed>',
  ),
  'db2_cursor_type' => 
  array (
    0 => 'int',
    'stmt' => 'resource',
  ),
  'db2_escape_string' => 
  array (
    0 => 'string',
    'string_literal' => 'string',
  ),
  'db2_exec' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'statement' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'db2_execute' => 
  array (
    0 => 'bool',
    'stmt' => 'resource',
    'parameters=' => 'array<array-key, mixed>',
  ),
  'db2_fetch_array' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'stmt' => 'resource',
    'row_number=' => 'int|null',
  ),
  'db2_fetch_assoc' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'stmt' => 'resource',
    'row_number=' => 'int|null',
  ),
  'db2_fetch_both' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'stmt' => 'resource',
    'row_number=' => 'int|null',
  ),
  'db2_fetch_object' => 
  array (
    0 => 'false|stdClass',
    'stmt' => 'resource',
    'row_number=' => 'int|null',
  ),
  'db2_fetch_row' => 
  array (
    0 => 'bool',
    'stmt' => 'resource',
    'row_number=' => 'int|null',
  ),
  'db2_field_display_size' => 
  array (
    0 => 'false|int',
    'stmt' => 'resource',
    'column' => 'int|string',
  ),
  'db2_field_name' => 
  array (
    0 => 'false|string',
    'stmt' => 'resource',
    'column' => 'int|string',
  ),
  'db2_field_num' => 
  array (
    0 => 'false|int',
    'stmt' => 'resource',
    'column' => 'int|string',
  ),
  'db2_field_precision' => 
  array (
    0 => 'false|int',
    'stmt' => 'resource',
    'column' => 'int|string',
  ),
  'db2_field_scale' => 
  array (
    0 => 'false|int',
    'stmt' => 'resource',
    'column' => 'int|string',
  ),
  'db2_field_type' => 
  array (
    0 => 'false|string',
    'stmt' => 'resource',
    'column' => 'int|string',
  ),
  'db2_field_width' => 
  array (
    0 => 'false|int',
    'stmt' => 'resource',
    'column' => 'int|string',
  ),
  'db2_foreign_keys' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'qualifier' => 'null|string',
    'schema' => 'null|string',
    'table_name' => 'string',
  ),
  'db2_free_result' => 
  array (
    0 => 'bool',
    'stmt' => 'resource',
  ),
  'db2_free_stmt' => 
  array (
    0 => 'bool',
    'stmt' => 'resource',
  ),
  'db2_get_option' => 
  array (
    0 => 'false|string',
    'resource' => 'resource',
    'option' => 'string',
  ),
  'db2_last_insert_id' => 
  array (
    0 => 'null|string',
    'resource' => 'resource',
  ),
  'db2_lob_read' => 
  array (
    0 => 'false|string',
    'stmt' => 'resource',
    'colnum' => 'int',
    'length' => 'int',
  ),
  'db2_next_result' => 
  array (
    0 => 'false|resource',
    'stmt' => 'resource',
  ),
  'db2_num_fields' => 
  array (
    0 => 'false|int',
    'stmt' => 'resource',
  ),
  'db2_num_rows' => 
  array (
    0 => 'false|int',
    'stmt' => 'resource',
  ),
  'db2_pclose' => 
  array (
    0 => 'bool',
    'resource' => 'resource',
  ),
  'db2_pconnect' => 
  array (
    0 => 'false|resource',
    'database' => 'string',
    'username' => 'null|string',
    'password' => 'null|string',
    'options=' => 'array<array-key, mixed>',
  ),
  'db2_prepare' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'statement' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'db2_primary_keys' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'qualifier' => 'null|string',
    'schema' => 'null|string',
    'table_name' => 'string',
  ),
  'db2_primarykeys' => 
  array (
    0 => 'mixed',
  ),
  'db2_procedure_columns' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'qualifier' => 'null|string',
    'schema' => 'string',
    'procedure' => 'string',
    'parameter' => 'null|string',
  ),
  'db2_procedurecolumns' => 
  array (
    0 => 'mixed',
  ),
  'db2_procedures' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'qualifier' => 'null|string',
    'schema' => 'string',
    'procedure' => 'string',
  ),
  'db2_result' => 
  array (
    0 => 'mixed',
    'stmt' => 'resource',
    'column' => 'int|string',
  ),
  'db2_rollback' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
  ),
  'db2_server_info' => 
  array (
    0 => 'false|stdClass',
    'connection' => 'resource',
  ),
  'db2_set_option' => 
  array (
    0 => 'bool',
    'resource' => 'resource',
    'options' => 'array<array-key, mixed>',
    'type' => 'int',
  ),
  'db2_setoption' => 
  array (
    0 => 'mixed',
  ),
  'db2_special_columns' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'qualifier' => 'null|string',
    'schema' => 'string',
    'table_name' => 'string',
    'scope' => 'int',
  ),
  'db2_specialcolumns' => 
  array (
    0 => 'mixed',
  ),
  'db2_statistics' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'qualifier' => 'null|string',
    'schema' => 'null|string',
    'table_name' => 'string',
    'unique' => 'bool',
  ),
  'db2_stmt_error' => 
  array (
    0 => 'string',
    'stmt=' => 'resource',
  ),
  'db2_stmt_errormsg' => 
  array (
    0 => 'string',
    'stmt=' => 'resource',
  ),
  'db2_table_privileges' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'qualifier=' => 'null|string',
    'schema=' => 'null|string',
    'table_name=' => 'null|string',
  ),
  'db2_tableprivileges' => 
  array (
    0 => 'mixed',
  ),
  'db2_tables' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'qualifier=' => 'null|string',
    'schema=' => 'null|string',
    'table_name=' => 'null|string',
    'table_type=' => 'null|string',
  ),
  'dba_close' => 
  array (
    0 => 'void',
    'dba' => 'resource',
  ),
  'dba_delete' => 
  array (
    0 => 'bool',
    'key' => 'array<array-key, mixed>|string',
    'dba' => 'resource',
  ),
  'dba_exists' => 
  array (
    0 => 'bool',
    'key' => 'array<array-key, mixed>|string',
    'dba' => 'resource',
  ),
  'dba_fetch' => 
  array (
    0 => 'false|string',
    'key' => 'array<array-key, mixed>|string',
    'skip' => 'int',
    'dba' => 'resource',
  ),
  'dba_fetch\'1' => 
  array (
    0 => 'false|string',
    'key' => 'array<array-key, mixed>|string',
    'skip' => 'resource',
  ),
  'dba_firstkey' => 
  array (
    0 => 'string',
    'dba' => 'resource',
  ),
  'dba_handlers' => 
  array (
    0 => 'array<array-key, mixed>',
    'full_info=' => 'bool',
  ),
  'dba_insert' => 
  array (
    0 => 'bool',
    'key' => 'array<array-key, mixed>|string',
    'value' => 'string',
    'dba' => 'resource',
  ),
  'dba_key_split' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'key' => 'false|null|string',
  ),
  'dba_list' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'dba_nextkey' => 
  array (
    0 => 'string',
    'dba' => 'resource',
  ),
  'dba_open' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'mode' => 'string',
    'handler=' => 'null|string',
    'permission=' => 'int',
    'map_size=' => 'int',
    'flags=' => 'int|null',
  ),
  'dba_optimize' => 
  array (
    0 => 'bool',
    'dba' => 'resource',
  ),
  'dba_popen' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'mode' => 'string',
    'handler=' => 'null|string',
    'permission=' => 'int',
    'map_size=' => 'int',
    'flags=' => 'int|null',
  ),
  'dba_replace' => 
  array (
    0 => 'bool',
    'key' => 'array<array-key, mixed>|string',
    'value' => 'string',
    'dba' => 'resource',
  ),
  'dba_sync' => 
  array (
    0 => 'bool',
    'dba' => 'resource',
  ),
  'dbase_add_record' => 
  array (
    0 => 'bool',
    'dbase_identifier' => 'resource',
    'record' => 'array<array-key, mixed>',
  ),
  'dbase_close' => 
  array (
    0 => 'bool',
    'dbase_identifier' => 'resource',
  ),
  'dbase_create' => 
  array (
    0 => 'false|resource',
    'filename' => 'string',
    'fields' => 'array<array-key, mixed>',
  ),
  'dbase_delete_record' => 
  array (
    0 => 'bool',
    'dbase_identifier' => 'resource',
    'record_number' => 'int',
  ),
  'dbase_get_header_info' => 
  array (
    0 => 'array<array-key, mixed>',
    'dbase_identifier' => 'resource',
  ),
  'dbase_get_record' => 
  array (
    0 => 'array<array-key, mixed>',
    'dbase_identifier' => 'resource',
    'record_number' => 'int',
  ),
  'dbase_get_record_with_names' => 
  array (
    0 => 'array<array-key, mixed>',
    'dbase_identifier' => 'resource',
    'record_number' => 'int',
  ),
  'dbase_numfields' => 
  array (
    0 => 'int',
    'dbase_identifier' => 'resource',
  ),
  'dbase_numrecords' => 
  array (
    0 => 'int',
    'dbase_identifier' => 'resource',
  ),
  'dbase_open' => 
  array (
    0 => 'false|resource',
    'filename' => 'string',
    'mode' => 'int',
  ),
  'dbase_pack' => 
  array (
    0 => 'bool',
    'dbase_identifier' => 'resource',
  ),
  'dbase_replace_record' => 
  array (
    0 => 'bool',
    'dbase_identifier' => 'resource',
    'record' => 'array<array-key, mixed>',
    'record_number' => 'int',
  ),
  'dbplus_add' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'tuple' => 'array<array-key, mixed>',
  ),
  'dbplus_aql' => 
  array (
    0 => 'resource',
    'query' => 'string',
    'server=' => 'string',
    'dbpath=' => 'string',
  ),
  'dbplus_chdir' => 
  array (
    0 => 'string',
    'newdir=' => 'string',
  ),
  'dbplus_close' => 
  array (
    0 => 'mixed',
    'relation' => 'resource',
  ),
  'dbplus_curr' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'tuple' => 'array<array-key, mixed>',
  ),
  'dbplus_errcode' => 
  array (
    0 => 'string',
    'errno=' => 'int',
  ),
  'dbplus_errno' => 
  array (
    0 => 'int',
  ),
  'dbplus_find' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'constraints' => 'array<array-key, mixed>',
    'tuple' => 'mixed',
  ),
  'dbplus_first' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'tuple' => 'array<array-key, mixed>',
  ),
  'dbplus_flush' => 
  array (
    0 => 'int',
    'relation' => 'resource',
  ),
  'dbplus_freealllocks' => 
  array (
    0 => 'int',
  ),
  'dbplus_freelock' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'tuple' => 'string',
  ),
  'dbplus_freerlocks' => 
  array (
    0 => 'int',
    'relation' => 'resource',
  ),
  'dbplus_getlock' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'tuple' => 'string',
  ),
  'dbplus_getunique' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'uniqueid' => 'int',
  ),
  'dbplus_info' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'key' => 'string',
    'result' => 'array<array-key, mixed>',
  ),
  'dbplus_last' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'tuple' => 'array<array-key, mixed>',
  ),
  'dbplus_lockrel' => 
  array (
    0 => 'int',
    'relation' => 'resource',
  ),
  'dbplus_next' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'tuple' => 'array<array-key, mixed>',
  ),
  'dbplus_open' => 
  array (
    0 => 'resource',
    'name' => 'string',
  ),
  'dbplus_prev' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'tuple' => 'array<array-key, mixed>',
  ),
  'dbplus_rchperm' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'mask' => 'int',
    'user' => 'string',
    'group' => 'string',
  ),
  'dbplus_rcreate' => 
  array (
    0 => 'resource',
    'name' => 'string',
    'domlist' => 'mixed',
    'overwrite=' => 'bool',
  ),
  'dbplus_rcrtexact' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'relation' => 'resource',
    'overwrite=' => 'bool',
  ),
  'dbplus_rcrtlike' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'relation' => 'resource',
    'overwrite=' => 'int',
  ),
  'dbplus_resolve' => 
  array (
    0 => 'array<array-key, mixed>',
    'relation_name' => 'string',
  ),
  'dbplus_restorepos' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'tuple' => 'array<array-key, mixed>',
  ),
  'dbplus_rkeys' => 
  array (
    0 => 'mixed',
    'relation' => 'resource',
    'domlist' => 'mixed',
  ),
  'dbplus_ropen' => 
  array (
    0 => 'resource',
    'name' => 'string',
  ),
  'dbplus_rquery' => 
  array (
    0 => 'resource',
    'query' => 'string',
    'dbpath=' => 'string',
  ),
  'dbplus_rrename' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'name' => 'string',
  ),
  'dbplus_rsecindex' => 
  array (
    0 => 'mixed',
    'relation' => 'resource',
    'domlist' => 'mixed',
    'type' => 'int',
  ),
  'dbplus_runlink' => 
  array (
    0 => 'int',
    'relation' => 'resource',
  ),
  'dbplus_rzap' => 
  array (
    0 => 'int',
    'relation' => 'resource',
  ),
  'dbplus_savepos' => 
  array (
    0 => 'int',
    'relation' => 'resource',
  ),
  'dbplus_setindex' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'idx_name' => 'string',
  ),
  'dbplus_setindexbynumber' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'idx_number' => 'int',
  ),
  'dbplus_sql' => 
  array (
    0 => 'resource',
    'query' => 'string',
    'server=' => 'string',
    'dbpath=' => 'string',
  ),
  'dbplus_tcl' => 
  array (
    0 => 'string',
    'sid' => 'int',
    'script' => 'string',
  ),
  'dbplus_tremove' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'tuple' => 'array<array-key, mixed>',
    'current=' => 'array<array-key, mixed>',
  ),
  'dbplus_undo' => 
  array (
    0 => 'int',
    'relation' => 'resource',
  ),
  'dbplus_undoprepare' => 
  array (
    0 => 'int',
    'relation' => 'resource',
  ),
  'dbplus_unlockrel' => 
  array (
    0 => 'int',
    'relation' => 'resource',
  ),
  'dbplus_unselect' => 
  array (
    0 => 'int',
    'relation' => 'resource',
  ),
  'dbplus_update' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'old' => 'array<array-key, mixed>',
    'new' => 'array<array-key, mixed>',
  ),
  'dbplus_xlockrel' => 
  array (
    0 => 'int',
    'relation' => 'resource',
  ),
  'dbplus_xunlockrel' => 
  array (
    0 => 'int',
    'relation' => 'resource',
  ),
  'dbx_close' => 
  array (
    0 => 'int',
    'link_identifier' => 'object',
  ),
  'dbx_compare' => 
  array (
    0 => 'int',
    'row_a' => 'array<array-key, mixed>',
    'row_b' => 'array<array-key, mixed>',
    'column_key' => 'string',
    'flags=' => 'int',
  ),
  'dbx_connect' => 
  array (
    0 => 'object',
    'module' => 'mixed',
    'host' => 'string',
    'database' => 'string',
    'username' => 'string',
    'password' => 'string',
    'persistent=' => 'int',
  ),
  'dbx_error' => 
  array (
    0 => 'string',
    'link_identifier' => 'object',
  ),
  'dbx_escape_string' => 
  array (
    0 => 'string',
    'link_identifier' => 'object',
    'text' => 'string',
  ),
  'dbx_fetch_row' => 
  array (
    0 => 'mixed',
    'result_identifier' => 'object',
  ),
  'dbx_query' => 
  array (
    0 => 'mixed',
    'link_identifier' => 'object',
    'sql_statement' => 'string',
    'flags=' => 'int',
  ),
  'dbx_sort' => 
  array (
    0 => 'bool',
    'result' => 'object',
    'user_compare_function' => 'string',
  ),
  'dcgettext' => 
  array (
    0 => 'string',
    'domain' => 'string',
    'message' => 'string',
    'category' => 'int',
  ),
  'dcngettext' => 
  array (
    0 => 'string',
    'domain' => 'string',
    'singular' => 'string',
    'plural' => 'string',
    'count' => 'int',
    'category' => 'int',
  ),
  'deaggregate' => 
  array (
    0 => 'mixed',
    'object' => 'object',
    'class_name=' => 'string',
  ),
  'debug_backtrace' => 
  array (
    0 => 'list<array{args?: list<mixed>, class?: class-string, file?: string, function: string, line?: int, object?: object, type?: string}>',
    'options=' => 'int',
    'limit=' => 'int',
  ),
  'debug_print_backtrace' => 
  array (
    0 => 'void',
    'options=' => 'int',
    'limit=' => 'int',
  ),
  'debug_zval_dump' => 
  array (
    0 => 'void',
    'value' => 'mixed',
    '...values=' => 'mixed',
  ),
  'debugger_connect' => 
  array (
    0 => 'mixed',
  ),
  'debugger_connector_pid' => 
  array (
    0 => 'mixed',
  ),
  'debugger_get_server_start_time' => 
  array (
    0 => 'mixed',
  ),
  'debugger_print' => 
  array (
    0 => 'mixed',
  ),
  'debugger_start_debug' => 
  array (
    0 => 'mixed',
  ),
  'decbin' => 
  array (
    0 => 'string',
    'num' => 'int',
  ),
  'dechex' => 
  array (
    0 => 'string',
    'num' => 'int',
  ),
  'decoct' => 
  array (
    0 => 'string',
    'num' => 'int',
  ),
  'define' => 
  array (
    0 => 'bool',
    'constant_name' => 'string',
    'value' => 'array<array-key, mixed>|null|scalar',
    'case_insensitive=' => 'false',
  ),
  'define_syslog_variables' => 
  array (
    0 => 'void',
  ),
  'defined' => 
  array (
    0 => 'bool',
    'constant_name' => 'string',
  ),
  'deflate_add' => 
  array (
    0 => 'false|string',
    'context' => 'DeflateContext',
    'data' => 'string',
    'flush_mode=' => 'int',
  ),
  'deflate_init' => 
  array (
    0 => 'DeflateContext|false',
    'encoding' => 'int',
    'options=' => 'array<array-key, mixed>',
  ),
  'deg2rad' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'dgettext' => 
  array (
    0 => 'string',
    'domain' => 'string',
    'message' => 'string',
  ),
  'dio_close' => 
  array (
    0 => 'void',
    'fd' => 'resource',
  ),
  'dio_fcntl' => 
  array (
    0 => 'mixed',
    'fd' => 'resource',
    'cmd' => 'int',
    'args=' => 'mixed',
  ),
  'dio_open' => 
  array (
    0 => 'false|resource',
    'filename' => 'string',
    'flags' => 'int',
    'mode=' => 'int',
  ),
  'dio_read' => 
  array (
    0 => 'string',
    'fd' => 'resource',
    'length=' => 'int',
  ),
  'dio_seek' => 
  array (
    0 => 'int',
    'fd' => 'resource',
    'pos' => 'int',
    'whence=' => 'int',
  ),
  'dio_stat' => 
  array (
    0 => 'array<array-key, mixed>|null',
    'fd' => 'resource',
  ),
  'dio_tcsetattr' => 
  array (
    0 => 'bool',
    'fd' => 'resource',
    'options' => 'array<array-key, mixed>',
  ),
  'dio_truncate' => 
  array (
    0 => 'bool',
    'fd' => 'resource',
    'offset' => 'int',
  ),
  'dio_write' => 
  array (
    0 => 'int',
    'fd' => 'resource',
    'data' => 'string',
    'length=' => 'int',
  ),
  'dir' => 
  array (
    0 => 'Directory|false',
    'directory' => 'string',
    'context=' => 'resource',
  ),
  'Directory::close' => 
  array (
    0 => 'void',
  ),
  'Directory::read' => 
  array (
    0 => 'false|string',
  ),
  'Directory::rewind' => 
  array (
    0 => 'void',
  ),
  'DirectoryIterator::__construct' => 
  array (
    0 => 'void',
    'directory' => 'string',
  ),
  'DirectoryIterator::__toString' => 
  array (
    0 => 'string',
  ),
  'DirectoryIterator::current' => 
  array (
    0 => 'DirectoryIterator',
  ),
  'DirectoryIterator::getATime' => 
  array (
    0 => 'int',
  ),
  'DirectoryIterator::getBasename' => 
  array (
    0 => 'string',
    'suffix=' => 'string',
  ),
  'DirectoryIterator::getCTime' => 
  array (
    0 => 'int',
  ),
  'DirectoryIterator::getExtension' => 
  array (
    0 => 'string',
  ),
  'DirectoryIterator::getFileInfo' => 
  array (
    0 => 'SplFileInfo',
    'class=' => 'class-string|null',
  ),
  'DirectoryIterator::getFilename' => 
  array (
    0 => 'string',
  ),
  'DirectoryIterator::getGroup' => 
  array (
    0 => 'int',
  ),
  'DirectoryIterator::getInode' => 
  array (
    0 => 'int',
  ),
  'DirectoryIterator::getLinkTarget' => 
  array (
    0 => 'string',
  ),
  'DirectoryIterator::getMTime' => 
  array (
    0 => 'int',
  ),
  'DirectoryIterator::getOwner' => 
  array (
    0 => 'int',
  ),
  'DirectoryIterator::getPath' => 
  array (
    0 => 'string',
  ),
  'DirectoryIterator::getPathInfo' => 
  array (
    0 => 'SplFileInfo|null',
    'class=' => 'class-string|null',
  ),
  'DirectoryIterator::getPathname' => 
  array (
    0 => 'string',
  ),
  'DirectoryIterator::getPerms' => 
  array (
    0 => 'int',
  ),
  'DirectoryIterator::getRealPath' => 
  array (
    0 => 'non-falsy-string',
  ),
  'DirectoryIterator::getSize' => 
  array (
    0 => 'int',
  ),
  'DirectoryIterator::getType' => 
  array (
    0 => 'string',
  ),
  'DirectoryIterator::isDir' => 
  array (
    0 => 'bool',
  ),
  'DirectoryIterator::isDot' => 
  array (
    0 => 'bool',
  ),
  'DirectoryIterator::isExecutable' => 
  array (
    0 => 'bool',
  ),
  'DirectoryIterator::isFile' => 
  array (
    0 => 'bool',
  ),
  'DirectoryIterator::isLink' => 
  array (
    0 => 'bool',
  ),
  'DirectoryIterator::isReadable' => 
  array (
    0 => 'bool',
  ),
  'DirectoryIterator::isWritable' => 
  array (
    0 => 'bool',
  ),
  'DirectoryIterator::key' => 
  array (
    0 => 'string',
  ),
  'DirectoryIterator::next' => 
  array (
    0 => 'void',
  ),
  'DirectoryIterator::openFile' => 
  array (
    0 => 'SplFileObject',
    'mode=' => 'string',
    'useIncludePath=' => 'bool',
    'context=' => 'null|resource',
  ),
  'DirectoryIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'DirectoryIterator::seek' => 
  array (
    0 => 'void',
    'offset' => 'int',
  ),
  'DirectoryIterator::setFileClass' => 
  array (
    0 => 'void',
    'class=' => 'class-string',
  ),
  'DirectoryIterator::setInfoClass' => 
  array (
    0 => 'void',
    'class=' => 'class-string',
  ),
  'DirectoryIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'dirname' => 
  array (
    0 => 'string',
    'path' => 'string',
    'levels=' => 'int<1, max>',
  ),
  'disk_free_space' => 
  array (
    0 => 'false|float',
    'directory' => 'string',
  ),
  'disk_total_space' => 
  array (
    0 => 'false|float',
    'directory' => 'string',
  ),
  'diskfreespace' => 
  array (
    0 => 'false|float',
    'directory' => 'string',
  ),
  'display_disabled_function' => 
  array (
    0 => 'mixed',
  ),
  'dl' => 
  array (
    0 => 'bool',
    'extension_filename' => 'string',
  ),
  'dngettext' => 
  array (
    0 => 'string',
    'domain' => 'string',
    'singular' => 'string',
    'plural' => 'string',
    'count' => 'int',
  ),
  'dns_check_record' => 
  array (
    0 => 'bool',
    'hostname' => 'string',
    'type=' => 'string',
  ),
  'dns_get_mx' => 
  array (
    0 => 'bool',
    'hostname' => 'string',
    '&w_hosts' => 'array<array-key, mixed>',
    '&w_weights=' => 'array<array-key, mixed>',
  ),
  'dns_get_record' => 
  array (
    0 => 'false|list<array<array-key, mixed>>',
    'hostname' => 'string',
    'type=' => 'int',
    '&w_authoritative_name_servers=' => 'array<array-key, mixed>',
    '&w_additional_records=' => 'array<array-key, mixed>',
    'raw=' => 'bool',
  ),
  'dom_document_relaxNG_validate_file' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'dom_document_relaxNG_validate_xml' => 
  array (
    0 => 'bool',
    'source' => 'string',
  ),
  'dom_document_schema_validate' => 
  array (
    0 => 'bool',
    'source' => 'string',
    'flags' => 'int',
  ),
  'dom_document_schema_validate_file' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'flags' => 'int',
  ),
  'dom_document_xinclude' => 
  array (
    0 => 'int',
    'options' => 'int',
  ),
  'dom_import_simplexml' => 
  array (
    0 => 'DOMElement',
    'node' => 'SimpleXMLElement',
  ),
  'dom_xpath_evaluate' => 
  array (
    0 => 'mixed',
    'expr' => 'string',
    'context' => 'DOMNode',
    'registernodens' => 'bool',
  ),
  'dom_xpath_query' => 
  array (
    0 => 'DOMNodeList',
    'expr' => 'string',
    'context' => 'DOMNode',
    'registernodens' => 'bool',
  ),
  'dom_xpath_register_ns' => 
  array (
    0 => 'bool',
    'prefix' => 'string',
    'uri' => 'string',
  ),
  'dom_xpath_register_php_functions' => 
  array (
    0 => 'mixed',
  ),
  'DomainException::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'DomainException::__toString' => 
  array (
    0 => 'string',
  ),
  'DomainException::__wakeup' => 
  array (
    0 => 'void',
  ),
  'DomainException::getCode' => 
  array (
    0 => 'int',
  ),
  'DomainException::getFile' => 
  array (
    0 => 'string',
  ),
  'DomainException::getLine' => 
  array (
    0 => 'int',
  ),
  'DomainException::getMessage' => 
  array (
    0 => 'string',
  ),
  'DomainException::getPrevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'DomainException::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'DomainException::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'DOMAttr::__construct' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value=' => 'string',
  ),
  'DOMAttr::getLineNo' => 
  array (
    0 => 'int',
  ),
  'DOMAttr::getNodePath' => 
  array (
    0 => 'null|string',
  ),
  'DOMAttr::hasAttributes' => 
  array (
    0 => 'bool',
  ),
  'DOMAttr::hasChildNodes' => 
  array (
    0 => 'bool',
  ),
  'DOMAttr::insertBefore' => 
  array (
    0 => 'DOMNode|false',
    'node' => 'DOMNode',
    'child=' => 'DOMNode|null',
  ),
  'DOMAttr::isDefaultNamespace' => 
  array (
    0 => 'bool',
    'namespace' => 'string',
  ),
  'DOMAttr::isId' => 
  array (
    0 => 'bool',
  ),
  'DOMAttr::isSameNode' => 
  array (
    0 => 'bool',
    'otherNode' => 'DOMNode',
  ),
  'DOMAttr::isSupported' => 
  array (
    0 => 'bool',
    'feature' => 'string',
    'version' => 'string',
  ),
  'DOMAttr::lookupNamespaceUri' => 
  array (
    0 => 'null|string',
    'prefix' => 'null|string',
  ),
  'DOMAttr::lookupPrefix' => 
  array (
    0 => 'null|string',
    'namespace' => 'string',
  ),
  'DOMAttr::normalize' => 
  array (
    0 => 'void',
  ),
  'DOMAttr::removeChild' => 
  array (
    0 => 'DOMNode|false',
    'child' => 'DOMNode',
  ),
  'DOMAttr::replaceChild' => 
  array (
    0 => 'DOMNode|false',
    'node' => 'DOMNode',
    'child' => 'DOMNode',
  ),
  'DomAttribute::name' => 
  array (
    0 => 'string',
  ),
  'DomAttribute::set_value' => 
  array (
    0 => 'bool',
    'content' => 'string',
  ),
  'DomAttribute::specified' => 
  array (
    0 => 'bool',
  ),
  'DomAttribute::value' => 
  array (
    0 => 'string',
  ),
  'DOMCdataSection::__construct' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'DOMCharacterData::appendData' => 
  array (
    0 => 'true',
    'data' => 'string',
  ),
  'DOMCharacterData::deleteData' => 
  array (
    0 => 'bool',
    'offset' => 'int',
    'count' => 'int',
  ),
  'DOMCharacterData::insertData' => 
  array (
    0 => 'bool',
    'offset' => 'int',
    'data' => 'string',
  ),
  'DOMCharacterData::replaceData' => 
  array (
    0 => 'bool',
    'offset' => 'int',
    'count' => 'int',
    'data' => 'string',
  ),
  'DOMCharacterData::substringData' => 
  array (
    0 => 'string',
    'offset' => 'int',
    'count' => 'int',
  ),
  'DOMComment::__construct' => 
  array (
    0 => 'void',
    'data=' => 'string',
  ),
  'DOMDocument::__construct' => 
  array (
    0 => 'void',
    'version=' => 'string',
    'encoding=' => 'string',
  ),
  'DOMDocument::createAttribute' => 
  array (
    0 => 'DOMAttr|false',
    'localName' => 'string',
  ),
  'DOMDocument::createAttributeNS' => 
  array (
    0 => 'DOMAttr|false',
    'namespace' => 'null|string',
    'qualifiedName' => 'string',
  ),
  'DOMDocument::createCDATASection' => 
  array (
    0 => 'DOMCDATASection|false',
    'data' => 'string',
  ),
  'DOMDocument::createComment' => 
  array (
    0 => 'DOMComment',
    'data' => 'string',
  ),
  'DOMDocument::createDocumentFragment' => 
  array (
    0 => 'DOMDocumentFragment',
  ),
  'DOMDocument::createElement' => 
  array (
    0 => 'DOMElement|false',
    'localName' => 'string',
    'value=' => 'string',
  ),
  'DOMDocument::createElementNS' => 
  array (
    0 => 'DOMElement|false',
    'namespace' => 'null|string',
    'qualifiedName' => 'string',
    'value=' => 'string',
  ),
  'DOMDocument::createEntityReference' => 
  array (
    0 => 'DOMEntityReference|false',
    'name' => 'string',
  ),
  'DOMDocument::createProcessingInstruction' => 
  array (
    0 => 'DOMProcessingInstruction|false',
    'target' => 'string',
    'data=' => 'string',
  ),
  'DOMDocument::createTextNode' => 
  array (
    0 => 'DOMText',
    'data' => 'string',
  ),
  'DOMDocument::getElementById' => 
  array (
    0 => 'DOMElement|null',
    'elementId' => 'string',
  ),
  'DOMDocument::getElementsByTagName' => 
  array (
    0 => 'DOMNodeList',
    'qualifiedName' => 'string',
  ),
  'DOMDocument::getElementsByTagNameNS' => 
  array (
    0 => 'DOMNodeList',
    'namespace' => 'null|string',
    'localName' => 'string',
  ),
  'DOMDocument::importNode' => 
  array (
    0 => 'DOMNode|false',
    'node' => 'DOMNode',
    'deep=' => 'bool',
  ),
  'DOMDocument::load' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'options=' => 'int',
  ),
  'DOMDocument::loadHTML' => 
  array (
    0 => 'bool',
    'source' => 'non-empty-string',
    'options=' => 'int',
  ),
  'DOMDocument::loadHTMLFile' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'options=' => 'int',
  ),
  'DOMDocument::loadXML' => 
  array (
    0 => 'bool',
    'source' => 'non-empty-string',
    'options=' => 'int',
  ),
  'DOMDocument::normalizeDocument' => 
  array (
    0 => 'void',
  ),
  'DOMDocument::registerNodeClass' => 
  array (
    0 => 'bool',
    'baseClass' => 'string',
    'extendedClass' => 'null|string',
  ),
  'DOMDocument::relaxNGValidate' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'DOMDocument::relaxNGValidateSource' => 
  array (
    0 => 'bool',
    'source' => 'string',
  ),
  'DOMDocument::save' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
    'options=' => 'int',
  ),
  'DOMDocument::saveHTML' => 
  array (
    0 => 'false|string',
    'node=' => 'DOMNode|null',
  ),
  'DOMDocument::saveHTMLFile' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
  ),
  'DOMDocument::saveXML' => 
  array (
    0 => 'false|string',
    'node=' => 'DOMNode|null',
    'options=' => 'int',
  ),
  'DOMDocument::schemaValidate' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'flags=' => 'int',
  ),
  'DOMDocument::schemaValidateSource' => 
  array (
    0 => 'bool',
    'source' => 'string',
    'flags=' => 'int',
  ),
  'DOMDocument::validate' => 
  array (
    0 => 'bool',
  ),
  'DOMDocument::xinclude' => 
  array (
    0 => 'int',
    'options=' => 'int',
  ),
  'DOMDocumentFragment::__construct' => 
  array (
    0 => 'void',
  ),
  'DOMDocumentFragment::appendXML' => 
  array (
    0 => 'bool',
    'data' => 'string',
  ),
  'DOMElement::__construct' => 
  array (
    0 => 'void',
    'qualifiedName' => 'string',
    'value=' => 'null|string',
    'namespace=' => 'string',
  ),
  'DOMElement::getAttribute' => 
  array (
    0 => 'string',
    'qualifiedName' => 'string',
  ),
  'DOMElement::getAttributeNode' => 
  array (
    0 => 'DOMAttr',
    'qualifiedName' => 'string',
  ),
  'DOMElement::getAttributeNodeNS' => 
  array (
    0 => 'DOMAttr',
    'namespace' => 'null|string',
    'localName' => 'string',
  ),
  'DOMElement::getAttributeNS' => 
  array (
    0 => 'string',
    'namespace' => 'null|string',
    'localName' => 'string',
  ),
  'DOMElement::getElementsByTagName' => 
  array (
    0 => 'DOMNodeList',
    'qualifiedName' => 'string',
  ),
  'DOMElement::getElementsByTagNameNS' => 
  array (
    0 => 'DOMNodeList',
    'namespace' => 'null|string',
    'localName' => 'string',
  ),
  'DOMElement::hasAttribute' => 
  array (
    0 => 'bool',
    'qualifiedName' => 'string',
  ),
  'DOMElement::hasAttributeNS' => 
  array (
    0 => 'bool',
    'namespace' => 'null|string',
    'localName' => 'string',
  ),
  'DOMElement::removeAttribute' => 
  array (
    0 => 'bool',
    'qualifiedName' => 'string',
  ),
  'DOMElement::removeAttributeNode' => 
  array (
    0 => 'DOMAttr|false',
    'attr' => 'DOMAttr',
  ),
  'DOMElement::removeAttributeNS' => 
  array (
    0 => 'void',
    'namespace' => 'null|string',
    'localName' => 'string',
  ),
  'DOMElement::setAttribute' => 
  array (
    0 => 'DOMAttr|false',
    'qualifiedName' => 'string',
    'value' => 'string',
  ),
  'DOMElement::setAttributeNode' => 
  array (
    0 => 'DOMAttr|null',
    'attr' => 'DOMAttr',
  ),
  'DOMElement::setAttributeNodeNS' => 
  array (
    0 => 'DOMAttr',
    'attr' => 'DOMAttr',
  ),
  'DOMElement::setAttributeNS' => 
  array (
    0 => 'void',
    'namespace' => 'null|string',
    'qualifiedName' => 'string',
    'value' => 'string',
  ),
  'DOMElement::setIdAttribute' => 
  array (
    0 => 'void',
    'qualifiedName' => 'string',
    'isId' => 'bool',
  ),
  'DOMElement::setIdAttributeNode' => 
  array (
    0 => 'void',
    'attr' => 'DOMAttr',
    'isId' => 'bool',
  ),
  'DOMElement::setIdAttributeNS' => 
  array (
    0 => 'void',
    'namespace' => 'string',
    'qualifiedName' => 'string',
    'isId' => 'bool',
  ),
  'DOMEntityReference::__construct' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'DOMImplementation::__construct' => 
  array (
    0 => 'void',
  ),
  'DOMImplementation::createDocument' => 
  array (
    0 => 'DOMDocument|false',
    'namespace=' => 'null|string',
    'qualifiedName=' => 'string',
    'doctype=' => 'DOMDocumentType|null',
  ),
  'DOMImplementation::createDocumentType' => 
  array (
    0 => 'DOMDocumentType|false',
    'qualifiedName' => 'string',
    'publicId=' => 'string',
    'systemId=' => 'string',
  ),
  'DOMImplementation::hasFeature' => 
  array (
    0 => 'bool',
    'feature' => 'string',
    'version' => 'string',
  ),
  'DOMNamedNodeMap::count' => 
  array (
    0 => 'int',
  ),
  'DOMNamedNodeMap::getNamedItem' => 
  array (
    0 => 'DOMNode|null',
    'qualifiedName' => 'string',
  ),
  'DOMNamedNodeMap::getNamedItemNS' => 
  array (
    0 => 'DOMNode|null',
    'namespace' => 'null|string',
    'localName' => 'string',
  ),
  'DOMNamedNodeMap::item' => 
  array (
    0 => 'DOMNode|null',
    'index' => 'int',
  ),
  'DOMNode::appendChild' => 
  array (
    0 => 'DOMNode|false',
    'node' => 'DOMNode',
  ),
  'DOMNode::C14N' => 
  array (
    0 => 'false|string',
    'exclusive=' => 'bool',
    'withComments=' => 'bool',
    'xpath=' => 'array<array-key, mixed>|null',
    'nsPrefixes=' => 'array<array-key, mixed>|null',
  ),
  'DOMNode::C14NFile' => 
  array (
    0 => 'false|int',
    'uri' => 'string',
    'exclusive=' => 'bool',
    'withComments=' => 'bool',
    'xpath=' => 'array<array-key, mixed>|null',
    'nsPrefixes=' => 'array<array-key, mixed>|null',
  ),
  'DOMNode::cloneNode' => 
  array (
    0 => 'DOMNode',
    'deep=' => 'bool',
  ),
  'DOMNode::getLineNo' => 
  array (
    0 => 'int',
  ),
  'DOMNode::getNodePath' => 
  array (
    0 => 'null|string',
  ),
  'DOMNode::hasAttributes' => 
  array (
    0 => 'bool',
  ),
  'DOMNode::hasChildNodes' => 
  array (
    0 => 'bool',
  ),
  'DOMNode::insertBefore' => 
  array (
    0 => 'DOMNode|false',
    'node' => 'DOMNode',
    'child=' => 'DOMNode|null',
  ),
  'DOMNode::isDefaultNamespace' => 
  array (
    0 => 'bool',
    'namespace' => 'string',
  ),
  'DOMNode::isSameNode' => 
  array (
    0 => 'bool',
    'otherNode' => 'DOMNode',
  ),
  'DOMNode::isSupported' => 
  array (
    0 => 'bool',
    'feature' => 'string',
    'version' => 'string',
  ),
  'DOMNode::lookupNamespaceURI' => 
  array (
    0 => 'null|string',
    'prefix' => 'null|string',
  ),
  'DOMNode::lookupPrefix' => 
  array (
    0 => 'null|string',
    'namespace' => 'string',
  ),
  'DOMNode::normalize' => 
  array (
    0 => 'void',
  ),
  'DOMNode::removeChild' => 
  array (
    0 => 'DOMNode|false',
    'child' => 'DOMNode',
  ),
  'DOMNode::replaceChild' => 
  array (
    0 => 'DOMNode|false',
    'node' => 'DOMNode',
    'child' => 'DOMNode',
  ),
  'DOMNodeList::count' => 
  array (
    0 => 'int',
  ),
  'DOMNodeList::item' => 
  array (
    0 => 'DOMNode|null',
    'index' => 'int',
  ),
  'DOMProcessingInstruction::__construct' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value=' => 'string',
  ),
  'DOMText::__construct' => 
  array (
    0 => 'void',
    'data=' => 'string',
  ),
  'DOMText::isElementContentWhitespace' => 
  array (
    0 => 'bool',
  ),
  'DOMText::isWhitespaceInElementContent' => 
  array (
    0 => 'bool',
  ),
  'DOMText::splitText' => 
  array (
    0 => 'DOMText',
    'offset' => 'int',
  ),
  'domxml_new_doc' => 
  array (
    0 => 'DomDocument',
    'version' => 'string',
  ),
  'domxml_open_file' => 
  array (
    0 => 'DomDocument',
    'filename' => 'string',
    'mode=' => 'int',
    'error=' => 'array<array-key, mixed>',
  ),
  'domxml_open_mem' => 
  array (
    0 => 'DomDocument',
    'string' => 'string',
    'mode=' => 'int',
    'error=' => 'array<array-key, mixed>',
  ),
  'domxml_version' => 
  array (
    0 => 'string',
  ),
  'domxml_xmltree' => 
  array (
    0 => 'DomDocument',
    'string' => 'string',
  ),
  'domxml_xslt_stylesheet' => 
  array (
    0 => 'DomXsltStylesheet',
    'xsl_buf' => 'string',
  ),
  'domxml_xslt_stylesheet_doc' => 
  array (
    0 => 'DomXsltStylesheet',
    'xsl_doc' => 'DOMDocument',
  ),
  'domxml_xslt_stylesheet_file' => 
  array (
    0 => 'DomXsltStylesheet',
    'xsl_file' => 'string',
  ),
  'domxml_xslt_version' => 
  array (
    0 => 'int',
  ),
  'DOMXPath::__construct' => 
  array (
    0 => 'void',
    'document' => 'DOMDocument',
    'registerNodeNS=' => 'bool',
  ),
  'DOMXPath::evaluate' => 
  array (
    0 => 'mixed',
    'expression' => 'string',
    'contextNode=' => 'DOMNode|null',
    'registerNodeNS=' => 'bool',
  ),
  'DOMXPath::query' => 
  array (
    0 => 'DOMNodeList|false',
    'expression' => 'string',
    'contextNode=' => 'DOMNode|null',
    'registerNodeNS=' => 'bool',
  ),
  'DOMXPath::registerNamespace' => 
  array (
    0 => 'bool',
    'prefix' => 'string',
    'namespace' => 'string',
  ),
  'DOMXPath::registerPhpFunctions' => 
  array (
    0 => 'void',
    'restrict=' => 'array<array-key, mixed>|null|string',
  ),
  'DomXsltStylesheet::process' => 
  array (
    0 => 'DomDocument',
    'xml_doc' => 'DOMDocument',
    'xslt_params=' => 'array<array-key, mixed>',
    'is_xpath_param=' => 'bool',
    'profile_filename=' => 'string',
  ),
  'DomXsltStylesheet::result_dump_file' => 
  array (
    0 => 'string',
    'xmldoc' => 'DOMDocument',
    'filename' => 'string',
  ),
  'DomXsltStylesheet::result_dump_mem' => 
  array (
    0 => 'string',
    'xmldoc' => 'DOMDocument',
  ),
  'DOTNET::__call' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'args' => 'mixed',
  ),
  'DOTNET::__construct' => 
  array (
    0 => 'void',
    'assembly_name' => 'string',
    'datatype_name' => 'string',
    'codepage=' => 'int',
  ),
  'DOTNET::__get' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'DOTNET::__set' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'dotnet_load' => 
  array (
    0 => 'int',
    'assembly_name' => 'string',
    'datatype_name=' => 'string',
    'codepage=' => 'int',
  ),
  'doubleval' => 
  array (
    0 => 'float',
    'value' => 'mixed',
  ),
  'Ds\\Collection::clear' => 
  array (
    0 => 'void',
  ),
  'Ds\\Collection::copy' => 
  array (
    0 => 'Ds\\Collection',
  ),
  'Ds\\Collection::isEmpty' => 
  array (
    0 => 'bool',
  ),
  'Ds\\Collection::toArray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Ds\\Deque::__construct' => 
  array (
    0 => 'void',
    'values=' => 'mixed',
  ),
  'Ds\\Deque::allocate' => 
  array (
    0 => 'void',
    'capacity' => 'int',
  ),
  'Ds\\Deque::apply' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'Ds\\Deque::capacity' => 
  array (
    0 => 'int',
  ),
  'Ds\\Deque::clear' => 
  array (
    0 => 'void',
  ),
  'Ds\\Deque::contains' => 
  array (
    0 => 'bool',
    '...values=' => 'mixed',
  ),
  'Ds\\Deque::copy' => 
  array (
    0 => 'Ds\\Deque',
  ),
  'Ds\\Deque::count' => 
  array (
    0 => 'int',
  ),
  'Ds\\Deque::filter' => 
  array (
    0 => 'Ds\\Deque',
    'callback=' => 'callable',
  ),
  'Ds\\Deque::find' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
  ),
  'Ds\\Deque::first' => 
  array (
    0 => 'mixed',
  ),
  'Ds\\Deque::get' => 
  array (
    0 => 'void',
    'index' => 'int',
  ),
  'Ds\\Deque::insert' => 
  array (
    0 => 'void',
    'index' => 'int',
    '...values=' => 'mixed',
  ),
  'Ds\\Deque::isEmpty' => 
  array (
    0 => 'bool',
  ),
  'Ds\\Deque::join' => 
  array (
    0 => 'string',
    'glue=' => 'string',
  ),
  'Ds\\Deque::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Ds\\Deque::last' => 
  array (
    0 => 'mixed',
  ),
  'Ds\\Deque::map' => 
  array (
    0 => 'Ds\\Deque',
    'callback' => 'callable',
  ),
  'Ds\\Deque::merge' => 
  array (
    0 => 'Ds\\Deque',
    'values' => 'mixed',
  ),
  'Ds\\Deque::pop' => 
  array (
    0 => 'mixed',
  ),
  'Ds\\Deque::push' => 
  array (
    0 => 'void',
    '...values=' => 'mixed',
  ),
  'Ds\\Deque::reduce' => 
  array (
    0 => 'mixed',
    'callback' => 'callable',
    'initial=' => 'mixed',
  ),
  'Ds\\Deque::remove' => 
  array (
    0 => 'mixed',
    'index' => 'int',
  ),
  'Ds\\Deque::reverse' => 
  array (
    0 => 'void',
  ),
  'Ds\\Deque::reversed' => 
  array (
    0 => 'Ds\\Deque',
  ),
  'Ds\\Deque::rotate' => 
  array (
    0 => 'void',
    'rotations' => 'int',
  ),
  'Ds\\Deque::set' => 
  array (
    0 => 'void',
    'index' => 'int',
    'value' => 'mixed',
  ),
  'Ds\\Deque::shift' => 
  array (
    0 => 'mixed',
  ),
  'Ds\\Deque::slice' => 
  array (
    0 => 'Ds\\Deque',
    'index' => 'int',
    'length=' => 'int|null',
  ),
  'Ds\\Deque::sort' => 
  array (
    0 => 'void',
    'comparator=' => 'callable',
  ),
  'Ds\\Deque::sorted' => 
  array (
    0 => 'Ds\\Deque',
    'comparator=' => 'callable',
  ),
  'Ds\\Deque::sum' => 
  array (
    0 => 'float|int',
  ),
  'Ds\\Deque::toArray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Ds\\Deque::unshift' => 
  array (
    0 => 'void',
    '...values=' => 'mixed',
  ),
  'Ds\\Hashable::equals' => 
  array (
    0 => 'bool',
    'object' => 'mixed',
  ),
  'Ds\\Hashable::hash' => 
  array (
    0 => 'mixed',
  ),
  'Ds\\Map::__construct' => 
  array (
    0 => 'void',
    'values=' => 'mixed',
  ),
  'Ds\\Map::allocate' => 
  array (
    0 => 'void',
    'capacity' => 'int',
  ),
  'Ds\\Map::apply' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'Ds\\Map::capacity' => 
  array (
    0 => 'int',
  ),
  'Ds\\Map::clear' => 
  array (
    0 => 'void',
  ),
  'Ds\\Map::copy' => 
  array (
    0 => 'Ds\\Map',
  ),
  'Ds\\Map::count' => 
  array (
    0 => 'int',
  ),
  'Ds\\Map::diff' => 
  array (
    0 => 'Ds\\Map',
    'map' => 'Ds\\Map',
  ),
  'Ds\\Map::filter' => 
  array (
    0 => 'Ds\\Map',
    'callback=' => 'callable',
  ),
  'Ds\\Map::first' => 
  array (
    0 => 'Ds\\Pair',
  ),
  'Ds\\Map::get' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'default=' => 'mixed',
  ),
  'Ds\\Map::hasKey' => 
  array (
    0 => 'bool',
    'key' => 'mixed',
  ),
  'Ds\\Map::hasValue' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'Ds\\Map::intersect' => 
  array (
    0 => 'Ds\\Map',
    'map' => 'Ds\\Map',
  ),
  'Ds\\Map::isEmpty' => 
  array (
    0 => 'bool',
  ),
  'Ds\\Map::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Ds\\Map::keys' => 
  array (
    0 => 'Ds\\Set',
  ),
  'Ds\\Map::ksort' => 
  array (
    0 => 'void',
    'comparator=' => 'callable',
  ),
  'Ds\\Map::ksorted' => 
  array (
    0 => 'Ds\\Map',
    'comparator=' => 'callable',
  ),
  'Ds\\Map::last' => 
  array (
    0 => 'Ds\\Pair',
  ),
  'Ds\\Map::map' => 
  array (
    0 => 'Ds\\Map',
    'callback' => 'callable',
  ),
  'Ds\\Map::merge' => 
  array (
    0 => 'Ds\\Map',
    'values' => 'mixed',
  ),
  'Ds\\Map::pairs' => 
  array (
    0 => 'Ds\\Sequence',
  ),
  'Ds\\Map::put' => 
  array (
    0 => 'void',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'Ds\\Map::putAll' => 
  array (
    0 => 'void',
    'values' => 'mixed',
  ),
  'Ds\\Map::reduce' => 
  array (
    0 => 'mixed',
    'callback' => 'callable',
    'initial=' => 'mixed',
  ),
  'Ds\\Map::remove' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'default=' => 'mixed',
  ),
  'Ds\\Map::reverse' => 
  array (
    0 => 'void',
  ),
  'Ds\\Map::reversed' => 
  array (
    0 => 'Ds\\Map',
  ),
  'Ds\\Map::skip' => 
  array (
    0 => 'Ds\\Pair',
    'position' => 'int',
  ),
  'Ds\\Map::slice' => 
  array (
    0 => 'Ds\\Map',
    'index' => 'int',
    'length=' => 'int|null',
  ),
  'Ds\\Map::sort' => 
  array (
    0 => 'void',
    'comparator=' => 'callable',
  ),
  'Ds\\Map::sorted' => 
  array (
    0 => 'Ds\\Map',
    'comparator=' => 'callable',
  ),
  'Ds\\Map::sum' => 
  array (
    0 => 'float|int',
  ),
  'Ds\\Map::toArray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Ds\\Map::union' => 
  array (
    0 => 'Ds\\Map',
    'map' => 'Ds\\Map',
  ),
  'Ds\\Map::values' => 
  array (
    0 => 'Ds\\Sequence',
  ),
  'Ds\\Map::xor' => 
  array (
    0 => 'Ds\\Map',
    'map' => 'Ds\\Map',
  ),
  'Ds\\Pair::__construct' => 
  array (
    0 => 'void',
    'key=' => 'mixed',
    'value=' => 'mixed',
  ),
  'Ds\\Pair::clear' => 
  array (
    0 => 'void',
  ),
  'Ds\\Pair::copy' => 
  array (
    0 => 'Ds\\Pair',
  ),
  'Ds\\Pair::isEmpty' => 
  array (
    0 => 'bool',
  ),
  'Ds\\Pair::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Ds\\Pair::toArray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Ds\\PriorityQueue::__construct' => 
  array (
    0 => 'void',
  ),
  'Ds\\PriorityQueue::allocate' => 
  array (
    0 => 'void',
    'capacity' => 'int',
  ),
  'Ds\\PriorityQueue::capacity' => 
  array (
    0 => 'int',
  ),
  'Ds\\PriorityQueue::clear' => 
  array (
    0 => 'void',
  ),
  'Ds\\PriorityQueue::copy' => 
  array (
    0 => 'Ds\\PriorityQueue',
  ),
  'Ds\\PriorityQueue::count' => 
  array (
    0 => 'int',
  ),
  'Ds\\PriorityQueue::isEmpty' => 
  array (
    0 => 'bool',
  ),
  'Ds\\PriorityQueue::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Ds\\PriorityQueue::peek' => 
  array (
    0 => 'mixed',
  ),
  'Ds\\PriorityQueue::pop' => 
  array (
    0 => 'mixed',
  ),
  'Ds\\PriorityQueue::push' => 
  array (
    0 => 'void',
    'value' => 'mixed',
    'priority' => 'int',
  ),
  'Ds\\PriorityQueue::toArray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Ds\\Queue::__construct' => 
  array (
    0 => 'void',
    'values=' => 'mixed',
  ),
  'Ds\\Queue::allocate' => 
  array (
    0 => 'void',
    'capacity' => 'int',
  ),
  'Ds\\Queue::capacity' => 
  array (
    0 => 'int',
  ),
  'Ds\\Queue::clear' => 
  array (
    0 => 'void',
  ),
  'Ds\\Queue::copy' => 
  array (
    0 => 'Ds\\Queue',
  ),
  'Ds\\Queue::count' => 
  array (
    0 => 'int',
  ),
  'Ds\\Queue::isEmpty' => 
  array (
    0 => 'bool',
  ),
  'Ds\\Queue::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Ds\\Queue::peek' => 
  array (
    0 => 'mixed',
  ),
  'Ds\\Queue::pop' => 
  array (
    0 => 'mixed',
  ),
  'Ds\\Queue::push' => 
  array (
    0 => 'void',
    '...values=' => 'mixed',
  ),
  'Ds\\Queue::toArray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Ds\\Sequence::allocate' => 
  array (
    0 => 'void',
    'capacity' => 'int',
  ),
  'Ds\\Sequence::apply' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'Ds\\Sequence::capacity' => 
  array (
    0 => 'int',
  ),
  'Ds\\Sequence::contains' => 
  array (
    0 => 'bool',
    '...values=' => 'mixed',
  ),
  'Ds\\Sequence::filter' => 
  array (
    0 => 'Ds\\Sequence',
    'callback=' => 'callable',
  ),
  'Ds\\Sequence::find' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
  ),
  'Ds\\Sequence::first' => 
  array (
    0 => 'mixed',
  ),
  'Ds\\Sequence::get' => 
  array (
    0 => 'mixed',
    'index' => 'int',
  ),
  'Ds\\Sequence::insert' => 
  array (
    0 => 'void',
    'index' => 'int',
    '...values=' => 'mixed',
  ),
  'Ds\\Sequence::join' => 
  array (
    0 => 'string',
    'glue=' => 'string',
  ),
  'Ds\\Sequence::last' => 
  array (
    0 => 'void',
  ),
  'Ds\\Sequence::map' => 
  array (
    0 => 'Ds\\Sequence',
    'callback' => 'callable',
  ),
  'Ds\\Sequence::merge' => 
  array (
    0 => 'Ds\\Sequence',
    'values' => 'mixed',
  ),
  'Ds\\Sequence::pop' => 
  array (
    0 => 'mixed',
  ),
  'Ds\\Sequence::push' => 
  array (
    0 => 'void',
    '...values=' => 'mixed',
  ),
  'Ds\\Sequence::reduce' => 
  array (
    0 => 'mixed',
    'callback' => 'callable',
    'initial=' => 'mixed',
  ),
  'Ds\\Sequence::remove' => 
  array (
    0 => 'mixed',
    'index' => 'int',
  ),
  'Ds\\Sequence::reverse' => 
  array (
    0 => 'void',
  ),
  'Ds\\Sequence::reversed' => 
  array (
    0 => 'Ds\\Sequence',
  ),
  'Ds\\Sequence::rotate' => 
  array (
    0 => 'void',
    'rotations' => 'int',
  ),
  'Ds\\Sequence::set' => 
  array (
    0 => 'void',
    'index' => 'int',
    'value' => 'mixed',
  ),
  'Ds\\Sequence::shift' => 
  array (
    0 => 'mixed',
  ),
  'Ds\\Sequence::slice' => 
  array (
    0 => 'Ds\\Sequence',
    'index' => 'int',
    'length=' => 'int|null',
  ),
  'Ds\\Sequence::sort' => 
  array (
    0 => 'void',
    'comparator=' => 'callable',
  ),
  'Ds\\Sequence::sorted' => 
  array (
    0 => 'Ds\\Sequence',
    'comparator=' => 'callable',
  ),
  'Ds\\Sequence::sum' => 
  array (
    0 => 'float|int',
  ),
  'Ds\\Sequence::unshift' => 
  array (
    0 => 'void',
    '...values=' => 'mixed',
  ),
  'Ds\\Set::__construct' => 
  array (
    0 => 'void',
    'values=' => 'mixed',
  ),
  'Ds\\Set::add' => 
  array (
    0 => 'void',
    '...values=' => 'mixed',
  ),
  'Ds\\Set::allocate' => 
  array (
    0 => 'void',
    'capacity' => 'int',
  ),
  'Ds\\Set::capacity' => 
  array (
    0 => 'int',
  ),
  'Ds\\Set::clear' => 
  array (
    0 => 'void',
  ),
  'Ds\\Set::contains' => 
  array (
    0 => 'bool',
    '...values=' => 'mixed',
  ),
  'Ds\\Set::copy' => 
  array (
    0 => 'Ds\\Set',
  ),
  'Ds\\Set::count' => 
  array (
    0 => 'int',
  ),
  'Ds\\Set::diff' => 
  array (
    0 => 'Ds\\Set',
    'set' => 'Ds\\Set',
  ),
  'Ds\\Set::filter' => 
  array (
    0 => 'Ds\\Set',
    'callback=' => 'callable',
  ),
  'Ds\\Set::first' => 
  array (
    0 => 'mixed',
  ),
  'Ds\\Set::get' => 
  array (
    0 => 'mixed',
    'index' => 'int',
  ),
  'Ds\\Set::intersect' => 
  array (
    0 => 'Ds\\Set',
    'set' => 'Ds\\Set',
  ),
  'Ds\\Set::isEmpty' => 
  array (
    0 => 'bool',
  ),
  'Ds\\Set::join' => 
  array (
    0 => 'string',
    'glue=' => 'string',
  ),
  'Ds\\Set::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Ds\\Set::last' => 
  array (
    0 => 'mixed',
  ),
  'Ds\\Set::merge' => 
  array (
    0 => 'Ds\\Set',
    'values' => 'mixed',
  ),
  'Ds\\Set::reduce' => 
  array (
    0 => 'mixed',
    'callback' => 'callable',
    'initial=' => 'mixed',
  ),
  'Ds\\Set::remove' => 
  array (
    0 => 'void',
    '...values=' => 'mixed',
  ),
  'Ds\\Set::reverse' => 
  array (
    0 => 'void',
  ),
  'Ds\\Set::reversed' => 
  array (
    0 => 'Ds\\Set',
  ),
  'Ds\\Set::slice' => 
  array (
    0 => 'Ds\\Set',
    'index' => 'int',
    'length=' => 'int|null',
  ),
  'Ds\\Set::sort' => 
  array (
    0 => 'void',
    'comparator=' => 'callable',
  ),
  'Ds\\Set::sorted' => 
  array (
    0 => 'Ds\\Set',
    'comparator=' => 'callable',
  ),
  'Ds\\Set::sum' => 
  array (
    0 => 'float|int',
  ),
  'Ds\\Set::toArray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Ds\\Set::union' => 
  array (
    0 => 'Ds\\Set',
    'set' => 'Ds\\Set',
  ),
  'Ds\\Set::xor' => 
  array (
    0 => 'Ds\\Set',
    'set' => 'Ds\\Set',
  ),
  'Ds\\Stack::__construct' => 
  array (
    0 => 'void',
    'values=' => 'mixed',
  ),
  'Ds\\Stack::allocate' => 
  array (
    0 => 'void',
    'capacity' => 'int',
  ),
  'Ds\\Stack::capacity' => 
  array (
    0 => 'int',
  ),
  'Ds\\Stack::clear' => 
  array (
    0 => 'void',
  ),
  'Ds\\Stack::copy' => 
  array (
    0 => 'Ds\\Stack',
  ),
  'Ds\\Stack::count' => 
  array (
    0 => 'int',
  ),
  'Ds\\Stack::isEmpty' => 
  array (
    0 => 'bool',
  ),
  'Ds\\Stack::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Ds\\Stack::peek' => 
  array (
    0 => 'mixed',
  ),
  'Ds\\Stack::pop' => 
  array (
    0 => 'mixed',
  ),
  'Ds\\Stack::push' => 
  array (
    0 => 'void',
    '...values=' => 'mixed',
  ),
  'Ds\\Stack::toArray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Ds\\Vector::__construct' => 
  array (
    0 => 'void',
    'values=' => 'mixed',
  ),
  'Ds\\Vector::allocate' => 
  array (
    0 => 'void',
    'capacity' => 'int',
  ),
  'Ds\\Vector::apply' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'Ds\\Vector::capacity' => 
  array (
    0 => 'int',
  ),
  'Ds\\Vector::clear' => 
  array (
    0 => 'void',
  ),
  'Ds\\Vector::contains' => 
  array (
    0 => 'bool',
    '...values=' => 'mixed',
  ),
  'Ds\\Vector::copy' => 
  array (
    0 => 'Ds\\Vector',
  ),
  'Ds\\Vector::count' => 
  array (
    0 => 'int',
  ),
  'Ds\\Vector::filter' => 
  array (
    0 => 'Ds\\Vector',
    'callback=' => 'callable',
  ),
  'Ds\\Vector::find' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
  ),
  'Ds\\Vector::first' => 
  array (
    0 => 'mixed',
  ),
  'Ds\\Vector::get' => 
  array (
    0 => 'mixed',
    'index' => 'int',
  ),
  'Ds\\Vector::insert' => 
  array (
    0 => 'void',
    'index' => 'int',
    '...values=' => 'mixed',
  ),
  'Ds\\Vector::isEmpty' => 
  array (
    0 => 'bool',
  ),
  'Ds\\Vector::join' => 
  array (
    0 => 'string',
    'glue=' => 'string',
  ),
  'Ds\\Vector::jsonSerialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Ds\\Vector::last' => 
  array (
    0 => 'mixed',
  ),
  'Ds\\Vector::map' => 
  array (
    0 => 'Ds\\Vector',
    'callback' => 'callable',
  ),
  'Ds\\Vector::merge' => 
  array (
    0 => 'Ds\\Vector',
    'values' => 'mixed',
  ),
  'Ds\\Vector::pop' => 
  array (
    0 => 'mixed',
  ),
  'Ds\\Vector::push' => 
  array (
    0 => 'void',
    '...values=' => 'mixed',
  ),
  'Ds\\Vector::reduce' => 
  array (
    0 => 'mixed',
    'callback' => 'callable',
    'initial=' => 'mixed',
  ),
  'Ds\\Vector::remove' => 
  array (
    0 => 'mixed',
    'index' => 'int',
  ),
  'Ds\\Vector::reverse' => 
  array (
    0 => 'void',
  ),
  'Ds\\Vector::reversed' => 
  array (
    0 => 'Ds\\Vector',
  ),
  'Ds\\Vector::rotate' => 
  array (
    0 => 'void',
    'rotations' => 'int',
  ),
  'Ds\\Vector::set' => 
  array (
    0 => 'void',
    'index' => 'int',
    'value' => 'mixed',
  ),
  'Ds\\Vector::shift' => 
  array (
    0 => 'mixed',
  ),
  'Ds\\Vector::slice' => 
  array (
    0 => 'Ds\\Vector',
    'index' => 'int',
    'length=' => 'int|null',
  ),
  'Ds\\Vector::sort' => 
  array (
    0 => 'void',
    'comparator=' => 'callable',
  ),
  'Ds\\Vector::sorted' => 
  array (
    0 => 'Ds\\Vector',
    'comparator=' => 'callable',
  ),
  'Ds\\Vector::sum' => 
  array (
    0 => 'float|int',
  ),
  'Ds\\Vector::toArray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Ds\\Vector::unshift' => 
  array (
    0 => 'void',
    '...values=' => 'mixed',
  ),
  'easter_date' => 
  array (
    0 => 'int',
    'year=' => 'int|null',
    'mode=' => 'int',
  ),
  'easter_days' => 
  array (
    0 => 'int',
    'year=' => 'int|null',
    'mode=' => 'int',
  ),
  'echo' => 
  array (
    0 => 'void',
    'arg1' => 'string',
    '...args=' => 'string',
  ),
  'eio_busy' => 
  array (
    0 => 'resource',
    'delay' => 'int',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_cancel' => 
  array (
    0 => 'void',
    'req' => 'resource',
  ),
  'eio_chmod' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'mode' => 'int',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_chown' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'uid' => 'int',
    'gid=' => 'int',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_close' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_custom' => 
  array (
    0 => 'resource',
    'execute' => 'callable',
    'pri' => 'int',
    'callback' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_dup2' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'fd2' => 'mixed',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_event_loop' => 
  array (
    0 => 'bool',
  ),
  'eio_fallocate' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'mode' => 'int',
    'offset' => 'int',
    'length' => 'int',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_fchmod' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'mode' => 'int',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_fchown' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'uid' => 'int',
    'gid=' => 'int',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_fdatasync' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_fstat' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'pri' => 'int',
    'callback' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_fstatvfs' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'pri' => 'int',
    'callback' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_fsync' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_ftruncate' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'offset=' => 'int',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_futime' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'atime' => 'float',
    'mtime' => 'float',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_get_event_stream' => 
  array (
    0 => 'mixed',
  ),
  'eio_get_last_error' => 
  array (
    0 => 'string',
    'req' => 'resource',
  ),
  'eio_grp' => 
  array (
    0 => 'resource',
    'callback' => 'callable',
    'data=' => 'string',
  ),
  'eio_grp_add' => 
  array (
    0 => 'void',
    'grp' => 'resource',
    'req' => 'resource',
  ),
  'eio_grp_cancel' => 
  array (
    0 => 'void',
    'grp' => 'resource',
  ),
  'eio_grp_limit' => 
  array (
    0 => 'void',
    'grp' => 'resource',
    'limit' => 'int',
  ),
  'eio_init' => 
  array (
    0 => 'void',
  ),
  'eio_link' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'new_path' => 'string',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_lstat' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'pri' => 'int',
    'callback' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_mkdir' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'mode' => 'int',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_mknod' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'mode' => 'int',
    'dev' => 'int',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_nop' => 
  array (
    0 => 'resource',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_npending' => 
  array (
    0 => 'int',
  ),
  'eio_nready' => 
  array (
    0 => 'int',
  ),
  'eio_nreqs' => 
  array (
    0 => 'int',
  ),
  'eio_nthreads' => 
  array (
    0 => 'int',
  ),
  'eio_open' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'flags' => 'int',
    'mode' => 'int',
    'pri' => 'int',
    'callback' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_poll' => 
  array (
    0 => 'int',
  ),
  'eio_read' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'length' => 'int',
    'offset' => 'int',
    'pri' => 'int',
    'callback' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_readahead' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'offset' => 'int',
    'length' => 'int',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_readdir' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'flags' => 'int',
    'pri' => 'int',
    'callback' => 'callable',
    'data=' => 'string',
  ),
  'eio_readlink' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'pri' => 'int',
    'callback' => 'callable',
    'data=' => 'string',
  ),
  'eio_realpath' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'pri' => 'int',
    'callback' => 'callable',
    'data=' => 'string',
  ),
  'eio_rename' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'new_path' => 'string',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_rmdir' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_seek' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'offset' => 'int',
    'whence' => 'int',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_sendfile' => 
  array (
    0 => 'resource',
    'out_fd' => 'mixed',
    'in_fd' => 'mixed',
    'offset' => 'int',
    'length' => 'int',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'string',
  ),
  'eio_set_max_idle' => 
  array (
    0 => 'void',
    'nthreads' => 'int',
  ),
  'eio_set_max_parallel' => 
  array (
    0 => 'void',
    'nthreads' => 'int',
  ),
  'eio_set_max_poll_reqs' => 
  array (
    0 => 'void',
    'nreqs' => 'int',
  ),
  'eio_set_max_poll_time' => 
  array (
    0 => 'void',
    'nseconds' => 'float',
  ),
  'eio_set_min_parallel' => 
  array (
    0 => 'void',
    'nthreads' => 'string',
  ),
  'eio_stat' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'pri' => 'int',
    'callback' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_statvfs' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'pri' => 'int',
    'callback' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_symlink' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'new_path' => 'string',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_sync' => 
  array (
    0 => 'resource',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_sync_file_range' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'offset' => 'int',
    'nbytes' => 'int',
    'flags' => 'int',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_syncfs' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_truncate' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'offset=' => 'int',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_unlink' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_utime' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'atime' => 'float',
    'mtime' => 'float',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_write' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'string' => 'string',
    'length=' => 'int',
    'offset=' => 'int',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'empty' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'EmptyIterator::current' => 
  array (
    0 => 'never',
  ),
  'EmptyIterator::key' => 
  array (
    0 => 'never',
  ),
  'EmptyIterator::next' => 
  array (
    0 => 'void',
  ),
  'EmptyIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'EmptyIterator::valid' => 
  array (
    0 => 'false',
  ),
  'enchant_broker_describe' => 
  array (
    0 => 'array<array-key, mixed>',
    'broker' => 'EnchantBroker',
  ),
  'enchant_broker_dict_exists' => 
  array (
    0 => 'bool',
    'broker' => 'EnchantBroker',
    'tag' => 'string',
  ),
  'enchant_broker_free' => 
  array (
    0 => 'bool',
    'broker' => 'EnchantBroker',
  ),
  'enchant_broker_free_dict' => 
  array (
    0 => 'bool',
    'dictionary' => 'EnchantBroker',
  ),
  'enchant_broker_get_dict_path' => 
  array (
    0 => 'string',
    'broker' => 'EnchantBroker',
    'type' => 'int',
  ),
  'enchant_broker_get_error' => 
  array (
    0 => 'false|string',
    'broker' => 'EnchantBroker',
  ),
  'enchant_broker_init' => 
  array (
    0 => 'EnchantBroker|false',
  ),
  'enchant_broker_list_dicts' => 
  array (
    0 => 'array<int, array{lang_tag: string, provider_desc: string, provider_file: string, provider_name: string}>',
    'broker' => 'EnchantBroker',
  ),
  'enchant_broker_request_dict' => 
  array (
    0 => 'EnchantDictionary|false',
    'broker' => 'EnchantBroker',
    'tag' => 'string',
  ),
  'enchant_broker_request_pwl_dict' => 
  array (
    0 => 'EnchantDictionary|false',
    'broker' => 'EnchantBroker',
    'filename' => 'string',
  ),
  'enchant_broker_set_dict_path' => 
  array (
    0 => 'bool',
    'broker' => 'EnchantBroker',
    'type' => 'int',
    'path' => 'string',
  ),
  'enchant_broker_set_ordering' => 
  array (
    0 => 'bool',
    'broker' => 'EnchantBroker',
    'tag' => 'string',
    'ordering' => 'string',
  ),
  'enchant_dict_add_to_personal' => 
  array (
    0 => 'void',
    'dictionary' => 'EnchantDictionary',
    'word' => 'string',
  ),
  'enchant_dict_add_to_session' => 
  array (
    0 => 'void',
    'dictionary' => 'EnchantDictionary',
    'word' => 'string',
  ),
  'enchant_dict_check' => 
  array (
    0 => 'bool',
    'dictionary' => 'EnchantDictionary',
    'word' => 'string',
  ),
  'enchant_dict_describe' => 
  array (
    0 => 'array<array-key, mixed>',
    'dictionary' => 'EnchantDictionary',
  ),
  'enchant_dict_get_error' => 
  array (
    0 => 'string',
    'dictionary' => 'EnchantDictionary',
  ),
  'enchant_dict_is_in_session' => 
  array (
    0 => 'bool',
    'dictionary' => 'EnchantDictionary',
    'word' => 'string',
  ),
  'enchant_dict_quick_check' => 
  array (
    0 => 'bool',
    'dictionary' => 'EnchantDictionary',
    'word' => 'string',
    '&w_suggestions=' => 'array<int, string>',
  ),
  'enchant_dict_store_replacement' => 
  array (
    0 => 'void',
    'dictionary' => 'EnchantDictionary',
    'misspelled' => 'string',
    'correct' => 'string',
  ),
  'enchant_dict_suggest' => 
  array (
    0 => 'array<array-key, mixed>',
    'dictionary' => 'EnchantDictionary',
    'word' => 'string',
  ),
  'end' => 
  array (
    0 => 'false|mixed',
    '&r_array' => 'array<array-key, mixed>|object',
  ),
  'enum_exists' => 
  array (
    0 => 'bool',
    'enum' => 'string',
    'autoload=' => 'bool',
  ),
  'Error::__clone' => 
  array (
    0 => 'void',
  ),
  'Error::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'Error::__toString' => 
  array (
    0 => 'string',
  ),
  'Error::getCode' => 
  array (
    0 => 'int',
  ),
  'Error::getFile' => 
  array (
    0 => 'string',
  ),
  'Error::getLine' => 
  array (
    0 => 'int',
  ),
  'Error::getMessage' => 
  array (
    0 => 'string',
  ),
  'Error::getPrevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'Error::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'Error::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'error_clear_last' => 
  array (
    0 => 'void',
  ),
  'error_get_last' => 
  array (
    0 => 'array{file: string, line: int, message: string, type: int}|null',
  ),
  'error_log' => 
  array (
    0 => 'bool',
    'message' => 'string',
    'message_type=' => 'int',
    'destination=' => 'null|string',
    'additional_headers=' => 'null|string',
  ),
  'error_reporting' => 
  array (
    0 => 'int',
    'error_level=' => 'int|null',
  ),
  'ErrorException::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'severity=' => 'int',
    'filename=' => 'null|string',
    'line=' => 'int|null',
    'previous=' => 'Throwable|null',
  ),
  'ErrorException::__toString' => 
  array (
    0 => 'string',
  ),
  'ErrorException::getCode' => 
  array (
    0 => 'int',
  ),
  'ErrorException::getFile' => 
  array (
    0 => 'string',
  ),
  'ErrorException::getLine' => 
  array (
    0 => 'int',
  ),
  'ErrorException::getMessage' => 
  array (
    0 => 'string',
  ),
  'ErrorException::getPrevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'ErrorException::getSeverity' => 
  array (
    0 => 'int',
  ),
  'ErrorException::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'ErrorException::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'escapeshellarg' => 
  array (
    0 => 'string',
    'arg' => 'string',
  ),
  'escapeshellcmd' => 
  array (
    0 => 'string',
    'command' => 'string',
  ),
  'Ev::backend' => 
  array (
    0 => 'int',
  ),
  'Ev::depth' => 
  array (
    0 => 'int',
  ),
  'Ev::embeddableBackends' => 
  array (
    0 => 'int',
  ),
  'Ev::feedSignal' => 
  array (
    0 => 'void',
    'signum' => 'int',
  ),
  'Ev::feedSignalEvent' => 
  array (
    0 => 'void',
    'signum' => 'int',
  ),
  'Ev::iteration' => 
  array (
    0 => 'int',
  ),
  'Ev::now' => 
  array (
    0 => 'float',
  ),
  'Ev::nowUpdate' => 
  array (
    0 => 'void',
  ),
  'Ev::recommendedBackends' => 
  array (
    0 => 'int',
  ),
  'Ev::resume' => 
  array (
    0 => 'void',
  ),
  'Ev::run' => 
  array (
    0 => 'void',
    'flags=' => 'int',
  ),
  'Ev::sleep' => 
  array (
    0 => 'void',
    'seconds' => 'float',
  ),
  'Ev::stop' => 
  array (
    0 => 'void',
    'how=' => 'int',
  ),
  'Ev::supportedBackends' => 
  array (
    0 => 'int',
  ),
  'Ev::suspend' => 
  array (
    0 => 'void',
  ),
  'Ev::time' => 
  array (
    0 => 'float',
  ),
  'Ev::verify' => 
  array (
    0 => 'void',
  ),
  'eval' => 
  array (
    0 => 'mixed',
    'code_str' => 'string',
  ),
  'EvCheck::__construct' => 
  array (
    0 => 'void',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'EvCheck::clear' => 
  array (
    0 => 'int',
  ),
  'EvCheck::createStopped' => 
  array (
    0 => 'EvCheck',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'EvCheck::feed' => 
  array (
    0 => 'void',
    'events' => 'int',
  ),
  'EvCheck::getLoop' => 
  array (
    0 => 'EvLoop',
  ),
  'EvCheck::invoke' => 
  array (
    0 => 'void',
    'events' => 'int',
  ),
  'EvCheck::keepAlive' => 
  array (
    0 => 'void',
    'value' => 'bool',
  ),
  'EvCheck::setCallback' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'EvCheck::start' => 
  array (
    0 => 'void',
  ),
  'EvCheck::stop' => 
  array (
    0 => 'void',
  ),
  'EvChild::__construct' => 
  array (
    0 => 'void',
    'pid' => 'int',
    'trace' => 'bool',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'EvChild::clear' => 
  array (
    0 => 'int',
  ),
  'EvChild::createStopped' => 
  array (
    0 => 'EvChild',
    'pid' => 'int',
    'trace' => 'bool',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'EvChild::feed' => 
  array (
    0 => 'void',
    'events' => 'int',
  ),
  'EvChild::getLoop' => 
  array (
    0 => 'EvLoop',
  ),
  'EvChild::invoke' => 
  array (
    0 => 'void',
    'events' => 'int',
  ),
  'EvChild::keepAlive' => 
  array (
    0 => 'void',
    'value' => 'bool',
  ),
  'EvChild::set' => 
  array (
    0 => 'void',
    'pid' => 'int',
    'trace' => 'bool',
  ),
  'EvChild::setCallback' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'EvChild::start' => 
  array (
    0 => 'void',
  ),
  'EvChild::stop' => 
  array (
    0 => 'void',
  ),
  'EvEmbed::__construct' => 
  array (
    0 => 'void',
    'other' => 'object',
    'callback=' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'EvEmbed::clear' => 
  array (
    0 => 'int',
  ),
  'EvEmbed::createStopped' => 
  array (
    0 => 'EvEmbed',
    'other' => 'object',
    'callback=' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'EvEmbed::feed' => 
  array (
    0 => 'void',
    'events' => 'int',
  ),
  'EvEmbed::getLoop' => 
  array (
    0 => 'EvLoop',
  ),
  'EvEmbed::invoke' => 
  array (
    0 => 'void',
    'events' => 'int',
  ),
  'EvEmbed::keepAlive' => 
  array (
    0 => 'void',
    'value' => 'bool',
  ),
  'EvEmbed::set' => 
  array (
    0 => 'void',
    'other' => 'object',
  ),
  'EvEmbed::setCallback' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'EvEmbed::start' => 
  array (
    0 => 'void',
  ),
  'EvEmbed::stop' => 
  array (
    0 => 'void',
  ),
  'EvEmbed::sweep' => 
  array (
    0 => 'void',
  ),
  'Event::__construct' => 
  array (
    0 => 'void',
    'base' => 'EventBase',
    'fd' => 'mixed',
    'what' => 'int',
    'cb' => 'callable',
    'arg=' => 'mixed',
  ),
  'Event::add' => 
  array (
    0 => 'bool',
    'timeout=' => 'float',
  ),
  'Event::addSignal' => 
  array (
    0 => 'bool',
    'timeout=' => 'float',
  ),
  'Event::addTimer' => 
  array (
    0 => 'bool',
    'timeout=' => 'float',
  ),
  'Event::del' => 
  array (
    0 => 'bool',
  ),
  'Event::delSignal' => 
  array (
    0 => 'bool',
  ),
  'Event::delTimer' => 
  array (
    0 => 'bool',
  ),
  'Event::free' => 
  array (
    0 => 'void',
  ),
  'Event::getSupportedMethods' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Event::pending' => 
  array (
    0 => 'bool',
    'flags' => 'int',
  ),
  'Event::set' => 
  array (
    0 => 'bool',
    'base' => 'EventBase',
    'fd' => 'mixed',
    'what=' => 'int',
    'cb=' => 'callable',
    'arg=' => 'mixed',
  ),
  'Event::setPriority' => 
  array (
    0 => 'bool',
    'priority' => 'int',
  ),
  'Event::setTimer' => 
  array (
    0 => 'bool',
    'base' => 'EventBase',
    'cb' => 'callable',
    'arg=' => 'mixed',
  ),
  'Event::signal' => 
  array (
    0 => 'Event',
    'base' => 'EventBase',
    'signum' => 'int',
    'cb' => 'callable',
    'arg=' => 'mixed',
  ),
  'Event::timer' => 
  array (
    0 => 'Event',
    'base' => 'EventBase',
    'cb' => 'callable',
    'arg=' => 'mixed',
  ),
  'event_add' => 
  array (
    0 => 'bool',
    'event' => 'resource',
    'timeout=' => 'int',
  ),
  'event_base_free' => 
  array (
    0 => 'void',
    'event_base' => 'resource',
  ),
  'event_base_loop' => 
  array (
    0 => 'int',
    'event_base' => 'resource',
    'flags=' => 'int',
  ),
  'event_base_loopbreak' => 
  array (
    0 => 'bool',
    'event_base' => 'resource',
  ),
  'event_base_loopexit' => 
  array (
    0 => 'bool',
    'event_base' => 'resource',
    'timeout=' => 'int',
  ),
  'event_base_new' => 
  array (
    0 => 'false|resource',
  ),
  'event_base_priority_init' => 
  array (
    0 => 'bool',
    'event_base' => 'resource',
    'npriorities' => 'int',
  ),
  'event_base_reinit' => 
  array (
    0 => 'bool',
    'event_base' => 'resource',
  ),
  'event_base_set' => 
  array (
    0 => 'bool',
    'event' => 'resource',
    'event_base' => 'resource',
  ),
  'event_buffer_base_set' => 
  array (
    0 => 'bool',
    'bevent' => 'resource',
    'event_base' => 'resource',
  ),
  'event_buffer_disable' => 
  array (
    0 => 'bool',
    'bevent' => 'resource',
    'events' => 'int',
  ),
  'event_buffer_enable' => 
  array (
    0 => 'bool',
    'bevent' => 'resource',
    'events' => 'int',
  ),
  'event_buffer_fd_set' => 
  array (
    0 => 'void',
    'bevent' => 'resource',
    'fd' => 'resource',
  ),
  'event_buffer_free' => 
  array (
    0 => 'void',
    'bevent' => 'resource',
  ),
  'event_buffer_new' => 
  array (
    0 => 'false|resource',
    'stream' => 'resource',
    'readcb' => 'callable|null',
    'writecb' => 'callable|null',
    'errorcb' => 'callable',
    'arg=' => 'mixed',
  ),
  'event_buffer_priority_set' => 
  array (
    0 => 'bool',
    'bevent' => 'resource',
    'priority' => 'int',
  ),
  'event_buffer_read' => 
  array (
    0 => 'string',
    'bevent' => 'resource',
    'data_size' => 'int',
  ),
  'event_buffer_set_callback' => 
  array (
    0 => 'bool',
    'event' => 'resource',
    'readcb' => 'mixed',
    'writecb' => 'mixed',
    'errorcb' => 'mixed',
    'arg=' => 'mixed',
  ),
  'event_buffer_timeout_set' => 
  array (
    0 => 'void',
    'bevent' => 'resource',
    'read_timeout' => 'int',
    'write_timeout' => 'int',
  ),
  'event_buffer_watermark_set' => 
  array (
    0 => 'void',
    'bevent' => 'resource',
    'events' => 'int',
    'lowmark' => 'int',
    'highmark' => 'int',
  ),
  'event_buffer_write' => 
  array (
    0 => 'bool',
    'bevent' => 'resource',
    'data' => 'string',
    'data_size=' => 'int',
  ),
  'event_del' => 
  array (
    0 => 'bool',
    'event' => 'resource',
  ),
  'event_free' => 
  array (
    0 => 'void',
    'event' => 'resource',
  ),
  'event_new' => 
  array (
    0 => 'false|resource',
  ),
  'event_priority_set' => 
  array (
    0 => 'bool',
    'event' => 'resource',
    'priority' => 'int',
  ),
  'event_set' => 
  array (
    0 => 'bool',
    'event' => 'resource',
    'fd' => 'int|resource',
    'events' => 'int',
    'callback' => 'callable',
    'arg=' => 'mixed',
  ),
  'event_timer_add' => 
  array (
    0 => 'bool',
    'event' => 'resource',
    'timeout=' => 'int',
  ),
  'event_timer_del' => 
  array (
    0 => 'bool',
    'event' => 'resource',
  ),
  'event_timer_new' => 
  array (
    0 => 'false|resource',
  ),
  'event_timer_pending' => 
  array (
    0 => 'bool',
    'event' => 'resource',
    'timeout=' => 'int',
  ),
  'event_timer_set' => 
  array (
    0 => 'bool',
    'event' => 'resource',
    'callback' => 'callable',
    'arg=' => 'mixed',
  ),
  'EventBase::__construct' => 
  array (
    0 => 'void',
    'cfg=' => 'EventConfig',
  ),
  'EventBase::dispatch' => 
  array (
    0 => 'void',
  ),
  'EventBase::exit' => 
  array (
    0 => 'bool',
    'timeout=' => 'float',
  ),
  'EventBase::free' => 
  array (
    0 => 'void',
  ),
  'EventBase::getFeatures' => 
  array (
    0 => 'int',
  ),
  'EventBase::getMethod' => 
  array (
    0 => 'string',
    'cfg=' => 'EventConfig',
  ),
  'EventBase::getTimeOfDayCached' => 
  array (
    0 => 'float',
  ),
  'EventBase::gotExit' => 
  array (
    0 => 'bool',
  ),
  'EventBase::gotStop' => 
  array (
    0 => 'bool',
  ),
  'EventBase::loop' => 
  array (
    0 => 'bool',
    'flags=' => 'int',
  ),
  'EventBase::priorityInit' => 
  array (
    0 => 'bool',
    'n_priorities' => 'int',
  ),
  'EventBase::reInit' => 
  array (
    0 => 'bool',
  ),
  'EventBase::stop' => 
  array (
    0 => 'bool',
  ),
  'EventBuffer::__construct' => 
  array (
    0 => 'void',
  ),
  'EventBuffer::add' => 
  array (
    0 => 'bool',
    'data' => 'string',
  ),
  'EventBuffer::addBuffer' => 
  array (
    0 => 'bool',
    'buf' => 'EventBuffer',
  ),
  'EventBuffer::appendFrom' => 
  array (
    0 => 'int',
    'buf' => 'EventBuffer',
    'length' => 'int',
  ),
  'EventBuffer::copyout' => 
  array (
    0 => 'int',
    '&w_data' => 'string',
    'max_bytes' => 'int',
  ),
  'EventBuffer::drain' => 
  array (
    0 => 'bool',
    'length' => 'int',
  ),
  'EventBuffer::enableLocking' => 
  array (
    0 => 'void',
  ),
  'EventBuffer::expand' => 
  array (
    0 => 'bool',
    'length' => 'int',
  ),
  'EventBuffer::freeze' => 
  array (
    0 => 'bool',
    'at_front' => 'bool',
  ),
  'EventBuffer::lock' => 
  array (
    0 => 'void',
  ),
  'EventBuffer::prepend' => 
  array (
    0 => 'bool',
    'data' => 'string',
  ),
  'EventBuffer::prependBuffer' => 
  array (
    0 => 'bool',
    'buf' => 'EventBuffer',
  ),
  'EventBuffer::pullup' => 
  array (
    0 => 'string',
    'size' => 'int',
  ),
  'EventBuffer::read' => 
  array (
    0 => 'string',
    'max_bytes' => 'int',
  ),
  'EventBuffer::readFrom' => 
  array (
    0 => 'int',
    'fd' => 'mixed',
    'howmuch' => 'int',
  ),
  'EventBuffer::readLine' => 
  array (
    0 => 'string',
    'eol_style' => 'int',
  ),
  'EventBuffer::search' => 
  array (
    0 => 'mixed',
    'what' => 'string',
    'start=' => 'int',
    'end=' => 'int',
  ),
  'EventBuffer::searchEol' => 
  array (
    0 => 'mixed',
    'start=' => 'int',
    'eol_style=' => 'int',
  ),
  'EventBuffer::substr' => 
  array (
    0 => 'string',
    'start' => 'int',
    'length=' => 'int',
  ),
  'EventBuffer::unfreeze' => 
  array (
    0 => 'bool',
    'at_front' => 'bool',
  ),
  'EventBuffer::unlock' => 
  array (
    0 => 'bool',
  ),
  'EventBuffer::write' => 
  array (
    0 => 'int',
    'fd' => 'mixed',
    'howmuch=' => 'int',
  ),
  'EventBufferEvent::__construct' => 
  array (
    0 => 'void',
    'base' => 'EventBase',
    'socket=' => 'mixed',
    'options=' => 'int',
    'readcb=' => 'callable',
    'writecb=' => 'callable',
    'eventcb=' => 'callable',
  ),
  'EventBufferEvent::close' => 
  array (
    0 => 'void',
  ),
  'EventBufferEvent::connect' => 
  array (
    0 => 'bool',
    'addr' => 'string',
  ),
  'EventBufferEvent::connectHost' => 
  array (
    0 => 'bool',
    'dns_base' => 'EventDnsBase',
    'hostname' => 'string',
    'port' => 'int',
    'family=' => 'int',
  ),
  'EventBufferEvent::createPair' => 
  array (
    0 => 'array<array-key, mixed>',
    'base' => 'EventBase',
    'options=' => 'int',
  ),
  'EventBufferEvent::disable' => 
  array (
    0 => 'bool',
    'events' => 'int',
  ),
  'EventBufferEvent::enable' => 
  array (
    0 => 'bool',
    'events' => 'int',
  ),
  'EventBufferEvent::free' => 
  array (
    0 => 'void',
  ),
  'EventBufferEvent::getDnsErrorString' => 
  array (
    0 => 'string',
  ),
  'EventBufferEvent::getEnabled' => 
  array (
    0 => 'int',
  ),
  'EventBufferEvent::getInput' => 
  array (
    0 => 'EventBuffer',
  ),
  'EventBufferEvent::getOutput' => 
  array (
    0 => 'EventBuffer',
  ),
  'EventBufferEvent::read' => 
  array (
    0 => 'string',
    'size' => 'int',
  ),
  'EventBufferEvent::readBuffer' => 
  array (
    0 => 'bool',
    'buf' => 'EventBuffer',
  ),
  'EventBufferEvent::setCallbacks' => 
  array (
    0 => 'void',
    'readcb' => 'callable',
    'writecb' => 'callable',
    'eventcb' => 'callable',
    'arg=' => 'string',
  ),
  'EventBufferEvent::setPriority' => 
  array (
    0 => 'bool',
    'priority' => 'int',
  ),
  'EventBufferEvent::setTimeouts' => 
  array (
    0 => 'bool',
    'timeout_read' => 'float',
    'timeout_write' => 'float',
  ),
  'EventBufferEvent::setWatermark' => 
  array (
    0 => 'void',
    'events' => 'int',
    'lowmark' => 'int',
    'highmark' => 'int',
  ),
  'EventBufferEvent::sslError' => 
  array (
    0 => 'string',
  ),
  'EventBufferEvent::sslFilter' => 
  array (
    0 => 'EventBufferEvent',
    'base' => 'EventBase',
    'underlying' => 'EventBufferEvent',
    'ctx' => 'EventSslContext',
    'state' => 'int',
    'options=' => 'int',
  ),
  'EventBufferEvent::sslGetCipherInfo' => 
  array (
    0 => 'string',
  ),
  'EventBufferEvent::sslGetCipherName' => 
  array (
    0 => 'string',
  ),
  'EventBufferEvent::sslGetCipherVersion' => 
  array (
    0 => 'string',
  ),
  'EventBufferEvent::sslGetProtocol' => 
  array (
    0 => 'string',
  ),
  'EventBufferEvent::sslRenegotiate' => 
  array (
    0 => 'void',
  ),
  'EventBufferEvent::sslSocket' => 
  array (
    0 => 'EventBufferEvent',
    'base' => 'EventBase',
    'socket' => 'mixed',
    'ctx' => 'EventSslContext',
    'state' => 'int',
    'options=' => 'int',
  ),
  'EventBufferEvent::write' => 
  array (
    0 => 'bool',
    'data' => 'string',
  ),
  'EventBufferEvent::writeBuffer' => 
  array (
    0 => 'bool',
    'buf' => 'EventBuffer',
  ),
  'EventConfig::__construct' => 
  array (
    0 => 'void',
  ),
  'EventConfig::avoidMethod' => 
  array (
    0 => 'bool',
    'method' => 'string',
  ),
  'EventConfig::requireFeatures' => 
  array (
    0 => 'bool',
    'feature' => 'int',
  ),
  'EventConfig::setMaxDispatchInterval' => 
  array (
    0 => 'void',
    'max_interval' => 'int',
    'max_callbacks' => 'int',
    'min_priority' => 'int',
  ),
  'EventDnsBase::__construct' => 
  array (
    0 => 'void',
    'base' => 'EventBase',
    'initialize' => 'bool',
  ),
  'EventDnsBase::addNameserverIp' => 
  array (
    0 => 'bool',
    'ip' => 'string',
  ),
  'EventDnsBase::addSearch' => 
  array (
    0 => 'void',
    'domain' => 'string',
  ),
  'EventDnsBase::clearSearch' => 
  array (
    0 => 'void',
  ),
  'EventDnsBase::countNameservers' => 
  array (
    0 => 'int',
  ),
  'EventDnsBase::loadHosts' => 
  array (
    0 => 'bool',
    'hosts' => 'string',
  ),
  'EventDnsBase::parseResolvConf' => 
  array (
    0 => 'bool',
    'flags' => 'int',
    'filename' => 'string',
  ),
  'EventDnsBase::setOption' => 
  array (
    0 => 'bool',
    'option' => 'string',
    'value' => 'string',
  ),
  'EventDnsBase::setSearchNdots' => 
  array (
    0 => 'bool',
    'ndots' => 'int',
  ),
  'EventHttp::__construct' => 
  array (
    0 => 'void',
    'base' => 'EventBase',
    'ctx=' => 'EventSslContext',
  ),
  'EventHttp::accept' => 
  array (
    0 => 'bool',
    'socket' => 'mixed',
  ),
  'EventHttp::addServerAlias' => 
  array (
    0 => 'bool',
    'alias' => 'string',
  ),
  'EventHttp::bind' => 
  array (
    0 => 'void',
    'address' => 'string',
    'port' => 'int',
  ),
  'EventHttp::removeServerAlias' => 
  array (
    0 => 'bool',
    'alias' => 'string',
  ),
  'EventHttp::setAllowedMethods' => 
  array (
    0 => 'void',
    'methods' => 'int',
  ),
  'EventHttp::setCallback' => 
  array (
    0 => 'void',
    'path' => 'string',
    'cb' => 'string',
    'arg=' => 'string',
  ),
  'EventHttp::setDefaultCallback' => 
  array (
    0 => 'void',
    'cb' => 'string',
    'arg=' => 'string',
  ),
  'EventHttp::setMaxBodySize' => 
  array (
    0 => 'void',
    'value' => 'int',
  ),
  'EventHttp::setMaxHeadersSize' => 
  array (
    0 => 'void',
    'value' => 'int',
  ),
  'EventHttp::setTimeout' => 
  array (
    0 => 'void',
    'value' => 'int',
  ),
  'EventHttpConnection::__construct' => 
  array (
    0 => 'void',
    'base' => 'EventBase',
    'dns_base' => 'EventDnsBase',
    'address' => 'string',
    'port' => 'int',
    'ctx=' => 'EventSslContext',
  ),
  'EventHttpConnection::getBase' => 
  array (
    0 => 'EventBase',
  ),
  'EventHttpConnection::getPeer' => 
  array (
    0 => 'void',
    '&w_address' => 'string',
    '&w_port' => 'int',
  ),
  'EventHttpConnection::makeRequest' => 
  array (
    0 => 'bool',
    'req' => 'EventHttpRequest',
    'type' => 'int',
    'uri' => 'string',
  ),
  'EventHttpConnection::setCloseCallback' => 
  array (
    0 => 'void',
    'callback' => 'callable',
    'data=' => 'mixed',
  ),
  'EventHttpConnection::setLocalAddress' => 
  array (
    0 => 'void',
    'address' => 'string',
  ),
  'EventHttpConnection::setLocalPort' => 
  array (
    0 => 'void',
    'port' => 'int',
  ),
  'EventHttpConnection::setMaxBodySize' => 
  array (
    0 => 'void',
    'max_size' => 'string',
  ),
  'EventHttpConnection::setMaxHeadersSize' => 
  array (
    0 => 'void',
    'max_size' => 'string',
  ),
  'EventHttpConnection::setRetries' => 
  array (
    0 => 'void',
    'retries' => 'int',
  ),
  'EventHttpConnection::setTimeout' => 
  array (
    0 => 'void',
    'timeout' => 'int',
  ),
  'EventHttpRequest::__construct' => 
  array (
    0 => 'void',
    'callback' => 'callable',
    'data=' => 'mixed',
  ),
  'EventHttpRequest::addHeader' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'string',
    'type' => 'int',
  ),
  'EventHttpRequest::cancel' => 
  array (
    0 => 'void',
  ),
  'EventHttpRequest::clearHeaders' => 
  array (
    0 => 'void',
  ),
  'EventHttpRequest::closeConnection' => 
  array (
    0 => 'void',
  ),
  'EventHttpRequest::findHeader' => 
  array (
    0 => 'void',
    'key' => 'string',
    'type' => 'string',
  ),
  'EventHttpRequest::free' => 
  array (
    0 => 'void',
  ),
  'EventHttpRequest::getBufferEvent' => 
  array (
    0 => 'EventBufferEvent',
  ),
  'EventHttpRequest::getCommand' => 
  array (
    0 => 'void',
  ),
  'EventHttpRequest::getConnection' => 
  array (
    0 => 'EventHttpConnection',
  ),
  'EventHttpRequest::getHost' => 
  array (
    0 => 'string',
  ),
  'EventHttpRequest::getInputBuffer' => 
  array (
    0 => 'EventBuffer',
  ),
  'EventHttpRequest::getInputHeaders' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'EventHttpRequest::getOutputBuffer' => 
  array (
    0 => 'EventBuffer',
  ),
  'EventHttpRequest::getOutputHeaders' => 
  array (
    0 => 'void',
  ),
  'EventHttpRequest::getResponseCode' => 
  array (
    0 => 'int',
  ),
  'EventHttpRequest::getUri' => 
  array (
    0 => 'string',
  ),
  'EventHttpRequest::removeHeader' => 
  array (
    0 => 'void',
    'key' => 'string',
    'type' => 'string',
  ),
  'EventHttpRequest::sendError' => 
  array (
    0 => 'void',
    'error' => 'int',
    'reason=' => 'string',
  ),
  'EventHttpRequest::sendReply' => 
  array (
    0 => 'void',
    'code' => 'int',
    'reason' => 'string',
    'buf=' => 'EventBuffer',
  ),
  'EventHttpRequest::sendReplyChunk' => 
  array (
    0 => 'void',
    'buf' => 'EventBuffer',
  ),
  'EventHttpRequest::sendReplyEnd' => 
  array (
    0 => 'void',
  ),
  'EventHttpRequest::sendReplyStart' => 
  array (
    0 => 'void',
    'code' => 'int',
    'reason' => 'string',
  ),
  'EventListener::__construct' => 
  array (
    0 => 'void',
    'base' => 'EventBase',
    'cb' => 'callable',
    'data' => 'mixed',
    'flags' => 'int',
    'backlog' => 'int',
    'target' => 'mixed',
  ),
  'EventListener::disable' => 
  array (
    0 => 'bool',
  ),
  'EventListener::enable' => 
  array (
    0 => 'bool',
  ),
  'EventListener::getBase' => 
  array (
    0 => 'void',
  ),
  'EventListener::getSocketName' => 
  array (
    0 => 'bool',
    '&w_address' => 'string',
    '&w_port=' => 'mixed',
  ),
  'EventListener::setCallback' => 
  array (
    0 => 'void',
    'cb' => 'callable',
    'arg=' => 'mixed',
  ),
  'EventListener::setErrorCallback' => 
  array (
    0 => 'void',
    'cb' => 'string',
  ),
  'EventSslContext::__construct' => 
  array (
    0 => 'void',
    'method' => 'string',
    'options' => 'string',
  ),
  'EventUtil::__construct' => 
  array (
    0 => 'void',
  ),
  'EventUtil::getLastSocketErrno' => 
  array (
    0 => 'int',
    'socket=' => 'mixed',
  ),
  'EventUtil::getLastSocketError' => 
  array (
    0 => 'string',
    'socket=' => 'mixed',
  ),
  'EventUtil::getSocketFd' => 
  array (
    0 => 'int',
    'socket' => 'mixed',
  ),
  'EventUtil::getSocketName' => 
  array (
    0 => 'bool',
    'socket' => 'mixed',
    '&w_address' => 'string',
    '&w_port=' => 'mixed',
  ),
  'EventUtil::setSocketOption' => 
  array (
    0 => 'bool',
    'socket' => 'mixed',
    'level' => 'int',
    'optname' => 'int',
    'optval' => 'mixed',
  ),
  'EventUtil::sslRandPoll' => 
  array (
    0 => 'void',
  ),
  'EvFork::__construct' => 
  array (
    0 => 'void',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'EvFork::clear' => 
  array (
    0 => 'int',
  ),
  'EvFork::createStopped' => 
  array (
    0 => 'EvFork',
    'callback' => 'callable',
    'data=' => 'string',
    'priority=' => 'string',
  ),
  'EvFork::feed' => 
  array (
    0 => 'void',
    'events' => 'int',
  ),
  'EvFork::getLoop' => 
  array (
    0 => 'EvLoop',
  ),
  'EvFork::invoke' => 
  array (
    0 => 'void',
    'events' => 'int',
  ),
  'EvFork::keepAlive' => 
  array (
    0 => 'void',
    'value' => 'bool',
  ),
  'EvFork::setCallback' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'EvFork::start' => 
  array (
    0 => 'void',
  ),
  'EvFork::stop' => 
  array (
    0 => 'void',
  ),
  'EvIdle::__construct' => 
  array (
    0 => 'void',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'EvIdle::clear' => 
  array (
    0 => 'int',
  ),
  'EvIdle::createStopped' => 
  array (
    0 => 'EvIdle',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'EvIdle::feed' => 
  array (
    0 => 'void',
    'events' => 'int',
  ),
  'EvIdle::getLoop' => 
  array (
    0 => 'EvLoop',
  ),
  'EvIdle::invoke' => 
  array (
    0 => 'void',
    'events' => 'int',
  ),
  'EvIdle::keepAlive' => 
  array (
    0 => 'void',
    'value' => 'bool',
  ),
  'EvIdle::setCallback' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'EvIdle::start' => 
  array (
    0 => 'void',
  ),
  'EvIdle::stop' => 
  array (
    0 => 'void',
  ),
  'EvIo::__construct' => 
  array (
    0 => 'void',
    'fd' => 'mixed',
    'events' => 'int',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'EvIo::clear' => 
  array (
    0 => 'int',
  ),
  'EvIo::createStopped' => 
  array (
    0 => 'EvIo',
    'fd' => 'resource',
    'events' => 'int',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'EvIo::feed' => 
  array (
    0 => 'void',
    'events' => 'int',
  ),
  'EvIo::getLoop' => 
  array (
    0 => 'EvLoop',
  ),
  'EvIo::invoke' => 
  array (
    0 => 'void',
    'events' => 'int',
  ),
  'EvIo::keepAlive' => 
  array (
    0 => 'void',
    'value' => 'bool',
  ),
  'EvIo::set' => 
  array (
    0 => 'void',
    'fd' => 'resource',
    'events' => 'int',
  ),
  'EvIo::setCallback' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'EvIo::start' => 
  array (
    0 => 'void',
  ),
  'EvIo::stop' => 
  array (
    0 => 'void',
  ),
  'EvLoop::__construct' => 
  array (
    0 => 'void',
    'flags=' => 'int',
    'data=' => 'mixed',
    'io_interval=' => 'float',
    'timeout_interval=' => 'float',
  ),
  'EvLoop::backend' => 
  array (
    0 => 'int',
  ),
  'EvLoop::check' => 
  array (
    0 => 'EvCheck',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'EvLoop::child' => 
  array (
    0 => 'EvChild',
    'pid' => 'int',
    'trace' => 'bool',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'EvLoop::defaultLoop' => 
  array (
    0 => 'EvLoop',
    'flags=' => 'int',
    'data=' => 'mixed',
    'io_interval=' => 'float',
    'timeout_interval=' => 'float',
  ),
  'EvLoop::embed' => 
  array (
    0 => 'EvEmbed',
    'other' => 'EvLoop',
    'callback=' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'EvLoop::fork' => 
  array (
    0 => 'EvFork',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'EvLoop::idle' => 
  array (
    0 => 'EvIdle',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'EvLoop::invokePending' => 
  array (
    0 => 'void',
  ),
  'EvLoop::io' => 
  array (
    0 => 'EvIo',
    'fd' => 'resource',
    'events' => 'int',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'EvLoop::loopFork' => 
  array (
    0 => 'void',
  ),
  'EvLoop::now' => 
  array (
    0 => 'float',
  ),
  'EvLoop::nowUpdate' => 
  array (
    0 => 'void',
  ),
  'EvLoop::periodic' => 
  array (
    0 => 'EvPeriodic',
    'offset' => 'float',
    'interval' => 'float',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'EvLoop::prepare' => 
  array (
    0 => 'EvPrepare',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'EvLoop::resume' => 
  array (
    0 => 'void',
  ),
  'EvLoop::run' => 
  array (
    0 => 'void',
    'flags=' => 'int',
  ),
  'EvLoop::signal' => 
  array (
    0 => 'EvSignal',
    'signum' => 'int',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'EvLoop::stat' => 
  array (
    0 => 'EvStat',
    'path' => 'string',
    'interval' => 'float',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'EvLoop::stop' => 
  array (
    0 => 'void',
    'how=' => 'int',
  ),
  'EvLoop::suspend' => 
  array (
    0 => 'void',
  ),
  'EvLoop::timer' => 
  array (
    0 => 'EvTimer',
    'after' => 'float',
    'repeat' => 'float',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'EvLoop::verify' => 
  array (
    0 => 'void',
  ),
  'EvPeriodic::__construct' => 
  array (
    0 => 'void',
    'offset' => 'float',
    'interval' => 'string',
    'reschedule_cb' => 'callable',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'EvPeriodic::again' => 
  array (
    0 => 'void',
  ),
  'EvPeriodic::at' => 
  array (
    0 => 'float',
  ),
  'EvPeriodic::clear' => 
  array (
    0 => 'int',
  ),
  'EvPeriodic::createStopped' => 
  array (
    0 => 'EvPeriodic',
    'offset' => 'float',
    'interval' => 'float',
    'reschedule_cb' => 'callable',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'EvPeriodic::feed' => 
  array (
    0 => 'void',
    'events' => 'int',
  ),
  'EvPeriodic::getLoop' => 
  array (
    0 => 'EvLoop',
  ),
  'EvPeriodic::invoke' => 
  array (
    0 => 'void',
    'events' => 'int',
  ),
  'EvPeriodic::keepAlive' => 
  array (
    0 => 'void',
    'value' => 'bool',
  ),
  'EvPeriodic::set' => 
  array (
    0 => 'void',
    'offset' => 'float',
    'interval' => 'float',
  ),
  'EvPeriodic::setCallback' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'EvPeriodic::start' => 
  array (
    0 => 'void',
  ),
  'EvPeriodic::stop' => 
  array (
    0 => 'void',
  ),
  'EvPrepare::__construct' => 
  array (
    0 => 'void',
    'callback' => 'string',
    'data=' => 'string',
    'priority=' => 'string',
  ),
  'EvPrepare::clear' => 
  array (
    0 => 'int',
  ),
  'EvPrepare::createStopped' => 
  array (
    0 => 'EvPrepare',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'EvPrepare::feed' => 
  array (
    0 => 'void',
    'events' => 'int',
  ),
  'EvPrepare::getLoop' => 
  array (
    0 => 'EvLoop',
  ),
  'EvPrepare::invoke' => 
  array (
    0 => 'void',
    'events' => 'int',
  ),
  'EvPrepare::keepAlive' => 
  array (
    0 => 'void',
    'value' => 'bool',
  ),
  'EvPrepare::setCallback' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'EvPrepare::start' => 
  array (
    0 => 'void',
  ),
  'EvPrepare::stop' => 
  array (
    0 => 'void',
  ),
  'EvSignal::__construct' => 
  array (
    0 => 'void',
    'signum' => 'int',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'EvSignal::clear' => 
  array (
    0 => 'int',
  ),
  'EvSignal::createStopped' => 
  array (
    0 => 'EvSignal',
    'signum' => 'int',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'EvSignal::feed' => 
  array (
    0 => 'void',
    'events' => 'int',
  ),
  'EvSignal::getLoop' => 
  array (
    0 => 'EvLoop',
  ),
  'EvSignal::invoke' => 
  array (
    0 => 'void',
    'events' => 'int',
  ),
  'EvSignal::keepAlive' => 
  array (
    0 => 'void',
    'value' => 'bool',
  ),
  'EvSignal::set' => 
  array (
    0 => 'void',
    'signum' => 'int',
  ),
  'EvSignal::setCallback' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'EvSignal::start' => 
  array (
    0 => 'void',
  ),
  'EvSignal::stop' => 
  array (
    0 => 'void',
  ),
  'EvStat::__construct' => 
  array (
    0 => 'void',
    'path' => 'string',
    'interval' => 'float',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'EvStat::attr' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'EvStat::clear' => 
  array (
    0 => 'int',
  ),
  'EvStat::createStopped' => 
  array (
    0 => 'EvStat',
    'path' => 'string',
    'interval' => 'float',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'EvStat::feed' => 
  array (
    0 => 'void',
    'events' => 'int',
  ),
  'EvStat::getLoop' => 
  array (
    0 => 'EvLoop',
  ),
  'EvStat::invoke' => 
  array (
    0 => 'void',
    'events' => 'int',
  ),
  'EvStat::keepAlive' => 
  array (
    0 => 'void',
    'value' => 'bool',
  ),
  'EvStat::prev' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'EvStat::set' => 
  array (
    0 => 'void',
    'path' => 'string',
    'interval' => 'float',
  ),
  'EvStat::setCallback' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'EvStat::start' => 
  array (
    0 => 'void',
  ),
  'EvStat::stat' => 
  array (
    0 => 'bool',
  ),
  'EvStat::stop' => 
  array (
    0 => 'void',
  ),
  'EvTimer::__construct' => 
  array (
    0 => 'void',
    'after' => 'float',
    'repeat' => 'float',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'EvTimer::again' => 
  array (
    0 => 'void',
  ),
  'EvTimer::clear' => 
  array (
    0 => 'int',
  ),
  'EvTimer::createStopped' => 
  array (
    0 => 'EvTimer',
    'after' => 'float',
    'repeat' => 'float',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'EvTimer::feed' => 
  array (
    0 => 'void',
    'events' => 'int',
  ),
  'EvTimer::getLoop' => 
  array (
    0 => 'EvLoop',
  ),
  'EvTimer::invoke' => 
  array (
    0 => 'void',
    'events' => 'int',
  ),
  'EvTimer::keepAlive' => 
  array (
    0 => 'void',
    'value' => 'bool',
  ),
  'EvTimer::set' => 
  array (
    0 => 'void',
    'after' => 'float',
    'repeat' => 'float',
  ),
  'EvTimer::setCallback' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'EvTimer::start' => 
  array (
    0 => 'void',
  ),
  'EvTimer::stop' => 
  array (
    0 => 'void',
  ),
  'EvWatcher::__construct' => 
  array (
    0 => 'void',
  ),
  'EvWatcher::clear' => 
  array (
    0 => 'int',
  ),
  'EvWatcher::feed' => 
  array (
    0 => 'void',
    'revents' => 'int',
  ),
  'EvWatcher::getLoop' => 
  array (
    0 => 'EvLoop',
  ),
  'EvWatcher::invoke' => 
  array (
    0 => 'void',
    'revents' => 'int',
  ),
  'EvWatcher::keepalive' => 
  array (
    0 => 'bool',
    'value=' => 'bool',
  ),
  'EvWatcher::setCallback' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'EvWatcher::start' => 
  array (
    0 => 'void',
  ),
  'EvWatcher::stop' => 
  array (
    0 => 'void',
  ),
  'Exception::__clone' => 
  array (
    0 => 'void',
  ),
  'Exception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'Exception::__toString' => 
  array (
    0 => 'string',
  ),
  'Exception::getCode' => 
  array (
    0 => 'int|string',
  ),
  'Exception::getFile' => 
  array (
    0 => 'string',
  ),
  'Exception::getLine' => 
  array (
    0 => 'int',
  ),
  'Exception::getMessage' => 
  array (
    0 => 'string',
  ),
  'Exception::getPrevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'Exception::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'Exception::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'exec' => 
  array (
    0 => 'false|string',
    'command' => 'string',
    '&w_output=' => 'array<array-key, mixed>',
    '&w_result_code=' => 'int',
  ),
  'exif_imagetype' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
  ),
  'exif_read_data' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'file' => 'resource|string',
    'required_sections=' => 'null|string',
    'as_arrays=' => 'bool',
    'read_thumbnail=' => 'bool',
  ),
  'exif_tagname' => 
  array (
    0 => 'false|string',
    'index' => 'int',
  ),
  'exif_thumbnail' => 
  array (
    0 => 'false|string',
    'file' => 'string',
    '&w_width=' => 'int',
    '&w_height=' => 'int',
    '&w_image_type=' => 'int',
  ),
  'exit' => 
  array (
    0 => 'mixed',
    'status' => 'int|string',
  ),
  'exp' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'expect_expectl' => 
  array (
    0 => 'int',
    'expect' => 'resource',
    'cases' => 'array<array-key, mixed>',
    'match=' => 'array<array-key, mixed>',
  ),
  'expect_popen' => 
  array (
    0 => 'false|resource',
    'command' => 'string',
  ),
  'explode' => 
  array (
    0 => 'list<string>',
    'separator' => 'string',
    'string' => 'string',
    'limit=' => 'int',
  ),
  'expm1' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'extension_loaded' => 
  array (
    0 => 'bool',
    'extension' => 'string',
  ),
  'extract' => 
  array (
    0 => 'int',
    '&rw_array' => 'array<array-key, mixed>',
    'flags=' => 'int',
    'prefix=' => 'string',
  ),
  'ezmlm_hash' => 
  array (
    0 => 'int',
    'addr' => 'string',
  ),
  'fam_cancel_monitor' => 
  array (
    0 => 'bool',
    'fam' => 'resource',
    'fam_monitor' => 'resource',
  ),
  'fam_close' => 
  array (
    0 => 'void',
    'fam' => 'resource',
  ),
  'fam_monitor_collection' => 
  array (
    0 => 'resource',
    'fam' => 'resource',
    'dirname' => 'string',
    'depth' => 'int',
    'mask' => 'string',
  ),
  'fam_monitor_directory' => 
  array (
    0 => 'resource',
    'fam' => 'resource',
    'dirname' => 'string',
  ),
  'fam_monitor_file' => 
  array (
    0 => 'resource',
    'fam' => 'resource',
    'filename' => 'string',
  ),
  'fam_next_event' => 
  array (
    0 => 'array<array-key, mixed>',
    'fam' => 'resource',
  ),
  'fam_open' => 
  array (
    0 => 'false|resource',
    'appname=' => 'string',
  ),
  'fam_pending' => 
  array (
    0 => 'int',
    'fam' => 'resource',
  ),
  'fam_resume_monitor' => 
  array (
    0 => 'bool',
    'fam' => 'resource',
    'fam_monitor' => 'resource',
  ),
  'fam_suspend_monitor' => 
  array (
    0 => 'bool',
    'fam' => 'resource',
    'fam_monitor' => 'resource',
  ),
  'fann_cascadetrain_on_data' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'data' => 'resource',
    'max_neurons' => 'int',
    'neurons_between_reports' => 'int',
    'desired_error' => 'float',
  ),
  'fann_cascadetrain_on_file' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'filename' => 'string',
    'max_neurons' => 'int',
    'neurons_between_reports' => 'int',
    'desired_error' => 'float',
  ),
  'fann_clear_scaling_params' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
  ),
  'fann_copy' => 
  array (
    0 => 'false|resource',
    'ann' => 'resource',
  ),
  'fann_create_from_file' => 
  array (
    0 => 'resource',
    'configuration_file' => 'string',
  ),
  'fann_create_shortcut' => 
  array (
    0 => 'false|resource',
    'num_layers' => 'int',
    'num_neurons1' => 'int',
    'num_neurons2' => 'int',
    '...args=' => 'int',
  ),
  'fann_create_shortcut_array' => 
  array (
    0 => 'false|resource',
    'num_layers' => 'int',
    'layers' => 'array<array-key, mixed>',
  ),
  'fann_create_sparse' => 
  array (
    0 => 'false|resource',
    'connection_rate' => 'float',
    'num_layers' => 'int',
    'num_neurons1' => 'int',
    'num_neurons2' => 'int',
    '...args=' => 'int',
  ),
  'fann_create_sparse_array' => 
  array (
    0 => 'false|resource',
    'connection_rate' => 'float',
    'num_layers' => 'int',
    'layers' => 'array<array-key, mixed>',
  ),
  'fann_create_standard' => 
  array (
    0 => 'false|resource',
    'num_layers' => 'int',
    'num_neurons1' => 'int',
    'num_neurons2' => 'int',
    '...args=' => 'int',
  ),
  'fann_create_standard_array' => 
  array (
    0 => 'false|resource',
    'num_layers' => 'int',
    'layers' => 'array<array-key, mixed>',
  ),
  'fann_create_train' => 
  array (
    0 => 'resource',
    'num_data' => 'int',
    'num_input' => 'int',
    'num_output' => 'int',
  ),
  'fann_create_train_from_callback' => 
  array (
    0 => 'resource',
    'num_data' => 'int',
    'num_input' => 'int',
    'num_output' => 'int',
    'user_function' => 'callable',
  ),
  'fann_descale_input' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'input_vector' => 'array<array-key, mixed>',
  ),
  'fann_descale_output' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'output_vector' => 'array<array-key, mixed>',
  ),
  'fann_descale_train' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'train_data' => 'resource',
  ),
  'fann_destroy' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
  ),
  'fann_destroy_train' => 
  array (
    0 => 'bool',
    'train_data' => 'resource',
  ),
  'fann_duplicate_train_data' => 
  array (
    0 => 'resource',
    'data' => 'resource',
  ),
  'fann_get_activation_function' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
    'layer' => 'int',
    'neuron' => 'int',
  ),
  'fann_get_activation_steepness' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
    'layer' => 'int',
    'neuron' => 'int',
  ),
  'fann_get_bias_array' => 
  array (
    0 => 'array<array-key, mixed>',
    'ann' => 'resource',
  ),
  'fann_get_bit_fail' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_bit_fail_limit' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_cascade_activation_functions' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'ann' => 'resource',
  ),
  'fann_get_cascade_activation_functions_count' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_cascade_activation_steepnesses' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'ann' => 'resource',
  ),
  'fann_get_cascade_activation_steepnesses_count' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_cascade_candidate_change_fraction' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_cascade_candidate_limit' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_cascade_candidate_stagnation_epochs' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_cascade_max_cand_epochs' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_cascade_max_out_epochs' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_cascade_min_cand_epochs' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_cascade_min_out_epochs' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_cascade_num_candidate_groups' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_cascade_num_candidates' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_cascade_output_change_fraction' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_cascade_output_stagnation_epochs' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_cascade_weight_multiplier' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_connection_array' => 
  array (
    0 => 'array<array-key, mixed>',
    'ann' => 'resource',
  ),
  'fann_get_connection_rate' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_errno' => 
  array (
    0 => 'false|int',
    'errdat' => 'resource',
  ),
  'fann_get_errstr' => 
  array (
    0 => 'false|string',
    'errdat' => 'resource',
  ),
  'fann_get_layer_array' => 
  array (
    0 => 'array<array-key, mixed>',
    'ann' => 'resource',
  ),
  'fann_get_learning_momentum' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_learning_rate' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_MSE' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_network_type' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_num_input' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_num_layers' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_num_output' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_quickprop_decay' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_quickprop_mu' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_rprop_decrease_factor' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_rprop_delta_max' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_rprop_delta_min' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_rprop_delta_zero' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_rprop_increase_factor' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_sarprop_step_error_shift' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_sarprop_step_error_threshold_factor' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_sarprop_temperature' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_sarprop_weight_decay_shift' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_total_connections' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_total_neurons' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_train_error_function' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_train_stop_function' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_training_algorithm' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_init_weights' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'train_data' => 'resource',
  ),
  'fann_length_train_data' => 
  array (
    0 => 'false|int',
    'data' => 'resource',
  ),
  'fann_merge_train_data' => 
  array (
    0 => 'false|resource',
    'data1' => 'resource',
    'data2' => 'resource',
  ),
  'fann_num_input_train_data' => 
  array (
    0 => 'false|int',
    'data' => 'resource',
  ),
  'fann_num_output_train_data' => 
  array (
    0 => 'false|int',
    'data' => 'resource',
  ),
  'fann_print_error' => 
  array (
    0 => 'void',
    'errdat' => 'string',
  ),
  'fann_randomize_weights' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'min_weight' => 'float',
    'max_weight' => 'float',
  ),
  'fann_read_train_from_file' => 
  array (
    0 => 'resource',
    'filename' => 'string',
  ),
  'fann_reset_errno' => 
  array (
    0 => 'void',
    'errdat' => 'resource',
  ),
  'fann_reset_errstr' => 
  array (
    0 => 'void',
    'errdat' => 'resource',
  ),
  'fann_reset_MSE' => 
  array (
    0 => 'bool',
    'ann' => 'string',
  ),
  'fann_run' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'ann' => 'resource',
    'input' => 'array<array-key, mixed>',
  ),
  'fann_save' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'configuration_file' => 'string',
  ),
  'fann_save_train' => 
  array (
    0 => 'bool',
    'data' => 'resource',
    'file_name' => 'string',
  ),
  'fann_scale_input' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'input_vector' => 'array<array-key, mixed>',
  ),
  'fann_scale_input_train_data' => 
  array (
    0 => 'bool',
    'train_data' => 'resource',
    'new_min' => 'float',
    'new_max' => 'float',
  ),
  'fann_scale_output' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'output_vector' => 'array<array-key, mixed>',
  ),
  'fann_scale_output_train_data' => 
  array (
    0 => 'bool',
    'train_data' => 'resource',
    'new_min' => 'float',
    'new_max' => 'float',
  ),
  'fann_scale_train' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'train_data' => 'resource',
  ),
  'fann_scale_train_data' => 
  array (
    0 => 'bool',
    'train_data' => 'resource',
    'new_min' => 'float',
    'new_max' => 'float',
  ),
  'fann_set_activation_function' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'activation_function' => 'int',
    'layer' => 'int',
    'neuron' => 'int',
  ),
  'fann_set_activation_function_hidden' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'activation_function' => 'int',
  ),
  'fann_set_activation_function_layer' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'activation_function' => 'int',
    'layer' => 'int',
  ),
  'fann_set_activation_function_output' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'activation_function' => 'int',
  ),
  'fann_set_activation_steepness' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'activation_steepness' => 'float',
    'layer' => 'int',
    'neuron' => 'int',
  ),
  'fann_set_activation_steepness_hidden' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'activation_steepness' => 'float',
  ),
  'fann_set_activation_steepness_layer' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'activation_steepness' => 'float',
    'layer' => 'int',
  ),
  'fann_set_activation_steepness_output' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'activation_steepness' => 'float',
  ),
  'fann_set_bit_fail_limit' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'bit_fail_limit' => 'float',
  ),
  'fann_set_callback' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'callback' => 'callable',
  ),
  'fann_set_cascade_activation_functions' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'cascade_activation_functions' => 'array<array-key, mixed>',
  ),
  'fann_set_cascade_activation_steepnesses' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'cascade_activation_steepnesses_count' => 'array<array-key, mixed>',
  ),
  'fann_set_cascade_candidate_change_fraction' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'cascade_candidate_change_fraction' => 'float',
  ),
  'fann_set_cascade_candidate_limit' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'cascade_candidate_limit' => 'float',
  ),
  'fann_set_cascade_candidate_stagnation_epochs' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'cascade_candidate_stagnation_epochs' => 'int',
  ),
  'fann_set_cascade_max_cand_epochs' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'cascade_max_cand_epochs' => 'int',
  ),
  'fann_set_cascade_max_out_epochs' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'cascade_max_out_epochs' => 'int',
  ),
  'fann_set_cascade_min_cand_epochs' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'cascade_min_cand_epochs' => 'int',
  ),
  'fann_set_cascade_min_out_epochs' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'cascade_min_out_epochs' => 'int',
  ),
  'fann_set_cascade_num_candidate_groups' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'cascade_num_candidate_groups' => 'int',
  ),
  'fann_set_cascade_output_change_fraction' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'cascade_output_change_fraction' => 'float',
  ),
  'fann_set_cascade_output_stagnation_epochs' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'cascade_output_stagnation_epochs' => 'int',
  ),
  'fann_set_cascade_weight_multiplier' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'cascade_weight_multiplier' => 'float',
  ),
  'fann_set_error_log' => 
  array (
    0 => 'void',
    'errdat' => 'resource',
    'log_file' => 'string',
  ),
  'fann_set_input_scaling_params' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'train_data' => 'resource',
    'new_input_min' => 'float',
    'new_input_max' => 'float',
  ),
  'fann_set_learning_momentum' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'learning_momentum' => 'float',
  ),
  'fann_set_learning_rate' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'learning_rate' => 'float',
  ),
  'fann_set_output_scaling_params' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'train_data' => 'resource',
    'new_output_min' => 'float',
    'new_output_max' => 'float',
  ),
  'fann_set_quickprop_decay' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'quickprop_decay' => 'float',
  ),
  'fann_set_quickprop_mu' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'quickprop_mu' => 'float',
  ),
  'fann_set_rprop_decrease_factor' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'rprop_decrease_factor' => 'float',
  ),
  'fann_set_rprop_delta_max' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'rprop_delta_max' => 'float',
  ),
  'fann_set_rprop_delta_min' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'rprop_delta_min' => 'float',
  ),
  'fann_set_rprop_delta_zero' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'rprop_delta_zero' => 'float',
  ),
  'fann_set_rprop_increase_factor' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'rprop_increase_factor' => 'float',
  ),
  'fann_set_sarprop_step_error_shift' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'sarprop_step_error_shift' => 'float',
  ),
  'fann_set_sarprop_step_error_threshold_factor' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'sarprop_step_error_threshold_factor' => 'float',
  ),
  'fann_set_sarprop_temperature' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'sarprop_temperature' => 'float',
  ),
  'fann_set_sarprop_weight_decay_shift' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'sarprop_weight_decay_shift' => 'float',
  ),
  'fann_set_scaling_params' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'train_data' => 'resource',
    'new_input_min' => 'float',
    'new_input_max' => 'float',
    'new_output_min' => 'float',
    'new_output_max' => 'float',
  ),
  'fann_set_train_error_function' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'error_function' => 'int',
  ),
  'fann_set_train_stop_function' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'stop_function' => 'int',
  ),
  'fann_set_training_algorithm' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'training_algorithm' => 'int',
  ),
  'fann_set_weight' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'from_neuron' => 'int',
    'to_neuron' => 'int',
    'weight' => 'float',
  ),
  'fann_set_weight_array' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'connections' => 'array<array-key, mixed>',
  ),
  'fann_shuffle_train_data' => 
  array (
    0 => 'bool',
    'train_data' => 'resource',
  ),
  'fann_subset_train_data' => 
  array (
    0 => 'resource',
    'data' => 'resource',
    'pos' => 'int',
    'length' => 'int',
  ),
  'fann_test' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'input' => 'array<array-key, mixed>',
    'desired_output' => 'array<array-key, mixed>',
  ),
  'fann_test_data' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
    'data' => 'resource',
  ),
  'fann_train' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'input' => 'array<array-key, mixed>',
    'desired_output' => 'array<array-key, mixed>',
  ),
  'fann_train_epoch' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
    'data' => 'resource',
  ),
  'fann_train_on_data' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'data' => 'resource',
    'max_epochs' => 'int',
    'epochs_between_reports' => 'int',
    'desired_error' => 'float',
  ),
  'fann_train_on_file' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'filename' => 'string',
    'max_epochs' => 'int',
    'epochs_between_reports' => 'int',
    'desired_error' => 'float',
  ),
  'FANNConnection::__construct' => 
  array (
    0 => 'void',
    'from_neuron' => 'int',
    'to_neuron' => 'int',
    'weight' => 'float',
  ),
  'FANNConnection::getFromNeuron' => 
  array (
    0 => 'int',
  ),
  'FANNConnection::getToNeuron' => 
  array (
    0 => 'int',
  ),
  'FANNConnection::getWeight' => 
  array (
    0 => 'void',
  ),
  'FANNConnection::setWeight' => 
  array (
    0 => 'bool',
    'weight' => 'float',
  ),
  'fastcgi_finish_request' => 
  array (
    0 => 'bool',
  ),
  'fbsql_affected_rows' => 
  array (
    0 => 'int',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_autocommit' => 
  array (
    0 => 'bool',
    'link_identifier' => 'resource',
    'onoff=' => 'bool',
  ),
  'fbsql_blob_size' => 
  array (
    0 => 'int',
    'blob_handle' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_change_user' => 
  array (
    0 => 'bool',
    'user' => 'string',
    'password' => 'string',
    'database=' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_clob_size' => 
  array (
    0 => 'int',
    'clob_handle' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_close' => 
  array (
    0 => 'bool',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_commit' => 
  array (
    0 => 'bool',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_connect' => 
  array (
    0 => 'resource',
    'hostname=' => 'string',
    'username=' => 'string',
    'password=' => 'string',
  ),
  'fbsql_create_blob' => 
  array (
    0 => 'string',
    'blob_data' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_create_clob' => 
  array (
    0 => 'string',
    'clob_data' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_create_db' => 
  array (
    0 => 'bool',
    'database_name' => 'string',
    'link_identifier=' => 'null|resource',
    'database_options=' => 'string',
  ),
  'fbsql_data_seek' => 
  array (
    0 => 'bool',
    'result' => 'resource',
    'row_number' => 'int',
  ),
  'fbsql_database' => 
  array (
    0 => 'string',
    'link_identifier' => 'resource',
    'database=' => 'string',
  ),
  'fbsql_database_password' => 
  array (
    0 => 'string',
    'link_identifier' => 'resource',
    'database_password=' => 'string',
  ),
  'fbsql_db_query' => 
  array (
    0 => 'resource',
    'database' => 'string',
    'query' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_db_status' => 
  array (
    0 => 'int',
    'database_name' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_drop_db' => 
  array (
    0 => 'bool',
    'database_name' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_errno' => 
  array (
    0 => 'int',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_error' => 
  array (
    0 => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_fetch_array' => 
  array (
    0 => 'array<array-key, mixed>',
    'result' => 'resource',
    'result_type=' => 'int',
  ),
  'fbsql_fetch_assoc' => 
  array (
    0 => 'array<array-key, mixed>',
    'result' => 'resource',
  ),
  'fbsql_fetch_field' => 
  array (
    0 => 'object',
    'result' => 'resource',
    'field_offset=' => 'int',
  ),
  'fbsql_fetch_lengths' => 
  array (
    0 => 'array<array-key, mixed>',
    'result' => 'resource',
  ),
  'fbsql_fetch_object' => 
  array (
    0 => 'object',
    'result' => 'resource',
  ),
  'fbsql_fetch_row' => 
  array (
    0 => 'array<array-key, mixed>',
    'result' => 'resource',
  ),
  'fbsql_field_flags' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'field_offset=' => 'int',
  ),
  'fbsql_field_len' => 
  array (
    0 => 'int',
    'result' => 'resource',
    'field_offset=' => 'int',
  ),
  'fbsql_field_name' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'field_index=' => 'int',
  ),
  'fbsql_field_seek' => 
  array (
    0 => 'bool',
    'result' => 'resource',
    'field_offset=' => 'int',
  ),
  'fbsql_field_table' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'field_offset=' => 'int',
  ),
  'fbsql_field_type' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'field_offset=' => 'int',
  ),
  'fbsql_free_result' => 
  array (
    0 => 'bool',
    'result' => 'resource',
  ),
  'fbsql_get_autostart_info' => 
  array (
    0 => 'array<array-key, mixed>',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_hostname' => 
  array (
    0 => 'string',
    'link_identifier' => 'resource',
    'host_name=' => 'string',
  ),
  'fbsql_insert_id' => 
  array (
    0 => 'int',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_list_dbs' => 
  array (
    0 => 'resource',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_list_fields' => 
  array (
    0 => 'resource',
    'database_name' => 'string',
    'table_name' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_list_tables' => 
  array (
    0 => 'resource',
    'database' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_next_result' => 
  array (
    0 => 'bool',
    'result' => 'resource',
  ),
  'fbsql_num_fields' => 
  array (
    0 => 'int',
    'result' => 'resource',
  ),
  'fbsql_num_rows' => 
  array (
    0 => 'int',
    'result' => 'resource',
  ),
  'fbsql_password' => 
  array (
    0 => 'string',
    'link_identifier' => 'resource',
    'password=' => 'string',
  ),
  'fbsql_pconnect' => 
  array (
    0 => 'resource',
    'hostname=' => 'string',
    'username=' => 'string',
    'password=' => 'string',
  ),
  'fbsql_query' => 
  array (
    0 => 'resource',
    'query' => 'string',
    'link_identifier=' => 'null|resource',
    'batch_size=' => 'int',
  ),
  'fbsql_read_blob' => 
  array (
    0 => 'string',
    'blob_handle' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_read_clob' => 
  array (
    0 => 'string',
    'clob_handle' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_result' => 
  array (
    0 => 'mixed',
    'result' => 'resource',
    'row=' => 'int',
    'field=' => 'mixed',
  ),
  'fbsql_rollback' => 
  array (
    0 => 'bool',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_rows_fetched' => 
  array (
    0 => 'int',
    'result' => 'resource',
  ),
  'fbsql_select_db' => 
  array (
    0 => 'bool',
    'database_name=' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_set_characterset' => 
  array (
    0 => 'void',
    'link_identifier' => 'resource',
    'characterset' => 'int',
    'in_out_both=' => 'int',
  ),
  'fbsql_set_lob_mode' => 
  array (
    0 => 'bool',
    'result' => 'resource',
    'lob_mode' => 'int',
  ),
  'fbsql_set_password' => 
  array (
    0 => 'bool',
    'link_identifier' => 'resource',
    'user' => 'string',
    'password' => 'string',
    'old_password' => 'string',
  ),
  'fbsql_set_transaction' => 
  array (
    0 => 'void',
    'link_identifier' => 'resource',
    'locking' => 'int',
    'isolation' => 'int',
  ),
  'fbsql_start_db' => 
  array (
    0 => 'bool',
    'database_name' => 'string',
    'link_identifier=' => 'null|resource',
    'database_options=' => 'string',
  ),
  'fbsql_stop_db' => 
  array (
    0 => 'bool',
    'database_name' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_table_name' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'index' => 'int',
  ),
  'fbsql_username' => 
  array (
    0 => 'string',
    'link_identifier' => 'resource',
    'username=' => 'string',
  ),
  'fbsql_warnings' => 
  array (
    0 => 'bool',
    'onoff=' => 'bool',
  ),
  'fclose' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
  ),
  'fdf_add_doc_javascript' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'script_name' => 'string',
    'script_code' => 'string',
  ),
  'fdf_add_template' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'newpage' => 'int',
    'filename' => 'string',
    'template' => 'string',
    'rename' => 'int',
  ),
  'fdf_close' => 
  array (
    0 => 'void',
    'fdf_document' => 'resource',
  ),
  'fdf_create' => 
  array (
    0 => 'resource',
  ),
  'fdf_enum_values' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'function' => 'callable',
    'userdata=' => 'mixed',
  ),
  'fdf_errno' => 
  array (
    0 => 'int',
  ),
  'fdf_error' => 
  array (
    0 => 'string',
    'error_code=' => 'int',
  ),
  'fdf_get_ap' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'field' => 'string',
    'face' => 'int',
    'filename' => 'string',
  ),
  'fdf_get_attachment' => 
  array (
    0 => 'array<array-key, mixed>',
    'fdf_document' => 'resource',
    'fieldname' => 'string',
    'savepath' => 'string',
  ),
  'fdf_get_encoding' => 
  array (
    0 => 'string',
    'fdf_document' => 'resource',
  ),
  'fdf_get_file' => 
  array (
    0 => 'string',
    'fdf_document' => 'resource',
  ),
  'fdf_get_flags' => 
  array (
    0 => 'int',
    'fdf_document' => 'resource',
    'fieldname' => 'string',
    'whichflags' => 'int',
  ),
  'fdf_get_opt' => 
  array (
    0 => 'mixed',
    'fdf_document' => 'resource',
    'fieldname' => 'string',
    'element=' => 'int',
  ),
  'fdf_get_status' => 
  array (
    0 => 'string',
    'fdf_document' => 'resource',
  ),
  'fdf_get_value' => 
  array (
    0 => 'mixed',
    'fdf_document' => 'resource',
    'fieldname' => 'string',
    'which=' => 'int',
  ),
  'fdf_get_version' => 
  array (
    0 => 'string',
    'fdf_document=' => 'resource',
  ),
  'fdf_header' => 
  array (
    0 => 'void',
  ),
  'fdf_next_field_name' => 
  array (
    0 => 'string',
    'fdf_document' => 'resource',
    'fieldname=' => 'string',
  ),
  'fdf_open' => 
  array (
    0 => 'false|resource',
    'filename' => 'string',
  ),
  'fdf_open_string' => 
  array (
    0 => 'resource',
    'fdf_data' => 'string',
  ),
  'fdf_remove_item' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'fieldname' => 'string',
    'item' => 'int',
  ),
  'fdf_save' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'filename=' => 'string',
  ),
  'fdf_save_string' => 
  array (
    0 => 'string',
    'fdf_document' => 'resource',
  ),
  'fdf_set_ap' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'field_name' => 'string',
    'face' => 'int',
    'filename' => 'string',
    'page_number' => 'int',
  ),
  'fdf_set_encoding' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'encoding' => 'string',
  ),
  'fdf_set_file' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'url' => 'string',
    'target_frame=' => 'string',
  ),
  'fdf_set_flags' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'fieldname' => 'string',
    'whichflags' => 'int',
    'newflags' => 'int',
  ),
  'fdf_set_javascript_action' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'fieldname' => 'string',
    'trigger' => 'int',
    'script' => 'string',
  ),
  'fdf_set_on_import_javascript' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'script' => 'string',
    'before_data_import' => 'bool',
  ),
  'fdf_set_opt' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'fieldname' => 'string',
    'element' => 'int',
    'string1' => 'string',
    'string2' => 'string',
  ),
  'fdf_set_status' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'status' => 'string',
  ),
  'fdf_set_submit_form_action' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'fieldname' => 'string',
    'trigger' => 'int',
    'script' => 'string',
    'flags' => 'int',
  ),
  'fdf_set_target_frame' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'frame_name' => 'string',
  ),
  'fdf_set_value' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'fieldname' => 'string',
    'value' => 'mixed',
    'isname=' => 'int',
  ),
  'fdf_set_version' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'version' => 'string',
  ),
  'fdiv' => 
  array (
    0 => 'float',
    'num1' => 'float',
    'num2' => 'float',
  ),
  'feof' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
  ),
  'fflush' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
  ),
  'fsync' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
  ),
  'fdatasync' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
  ),
  'ffmpeg_animated_gif::__construct' => 
  array (
    0 => 'void',
    'output_file_path' => 'string',
    'width' => 'int',
    'height' => 'int',
    'frame_rate' => 'int',
    'loop_count=' => 'int',
  ),
  'ffmpeg_animated_gif::addFrame' => 
  array (
    0 => 'mixed',
    'frame_to_add' => 'ffmpeg_frame',
  ),
  'ffmpeg_frame::__construct' => 
  array (
    0 => 'void',
    'gd_image' => 'resource',
  ),
  'ffmpeg_frame::crop' => 
  array (
    0 => 'mixed',
    'crop_top' => 'int',
    'crop_bottom=' => 'int',
    'crop_left=' => 'int',
    'crop_right=' => 'int',
  ),
  'ffmpeg_frame::getHeight' => 
  array (
    0 => 'int',
  ),
  'ffmpeg_frame::getPresentationTimestamp' => 
  array (
    0 => 'int',
  ),
  'ffmpeg_frame::getPTS' => 
  array (
    0 => 'int',
  ),
  'ffmpeg_frame::getWidth' => 
  array (
    0 => 'int',
  ),
  'ffmpeg_frame::resize' => 
  array (
    0 => 'mixed',
    'width' => 'int',
    'height' => 'int',
    'crop_top=' => 'int',
    'crop_bottom=' => 'int',
    'crop_left=' => 'int',
    'crop_right=' => 'int',
  ),
  'ffmpeg_frame::toGDImage' => 
  array (
    0 => 'resource',
  ),
  'ffmpeg_movie::__construct' => 
  array (
    0 => 'void',
    'path_to_media' => 'string',
    'persistent' => 'bool',
  ),
  'ffmpeg_movie::getArtist' => 
  array (
    0 => 'string',
  ),
  'ffmpeg_movie::getAudioBitRate' => 
  array (
    0 => 'int',
  ),
  'ffmpeg_movie::getAudioChannels' => 
  array (
    0 => 'int',
  ),
  'ffmpeg_movie::getAudioCodec' => 
  array (
    0 => 'string',
  ),
  'ffmpeg_movie::getAudioSampleRate' => 
  array (
    0 => 'int',
  ),
  'ffmpeg_movie::getAuthor' => 
  array (
    0 => 'string',
  ),
  'ffmpeg_movie::getBitRate' => 
  array (
    0 => 'int',
  ),
  'ffmpeg_movie::getComment' => 
  array (
    0 => 'string',
  ),
  'ffmpeg_movie::getCopyright' => 
  array (
    0 => 'string',
  ),
  'ffmpeg_movie::getDuration' => 
  array (
    0 => 'int',
  ),
  'ffmpeg_movie::getFilename' => 
  array (
    0 => 'string',
  ),
  'ffmpeg_movie::getFrame' => 
  array (
    0 => 'false|ffmpeg_frame',
    'framenumber' => 'int',
  ),
  'ffmpeg_movie::getFrameCount' => 
  array (
    0 => 'int',
  ),
  'ffmpeg_movie::getFrameHeight' => 
  array (
    0 => 'int',
  ),
  'ffmpeg_movie::getFrameNumber' => 
  array (
    0 => 'int',
  ),
  'ffmpeg_movie::getFrameRate' => 
  array (
    0 => 'int',
  ),
  'ffmpeg_movie::getFrameWidth' => 
  array (
    0 => 'int',
  ),
  'ffmpeg_movie::getGenre' => 
  array (
    0 => 'string',
  ),
  'ffmpeg_movie::getNextKeyFrame' => 
  array (
    0 => 'false|ffmpeg_frame',
  ),
  'ffmpeg_movie::getPixelFormat' => 
  array (
    0 => 'mixed',
  ),
  'ffmpeg_movie::getTitle' => 
  array (
    0 => 'string',
  ),
  'ffmpeg_movie::getTrackNumber' => 
  array (
    0 => 'int|string',
  ),
  'ffmpeg_movie::getVideoBitRate' => 
  array (
    0 => 'int',
  ),
  'ffmpeg_movie::getVideoCodec' => 
  array (
    0 => 'string',
  ),
  'ffmpeg_movie::getYear' => 
  array (
    0 => 'int|string',
  ),
  'ffmpeg_movie::hasAudio' => 
  array (
    0 => 'bool',
  ),
  'ffmpeg_movie::hasVideo' => 
  array (
    0 => 'bool',
  ),
  'fgetc' => 
  array (
    0 => 'false|string',
    'stream' => 'resource',
  ),
  'fgetcsv' => 
  array (
    0 => 'array{0?: null|string, ...<int<0, max>, string>}|false',
    'stream' => 'resource',
    'length=' => 'int|null',
    'separator=' => 'string',
    'enclosure=' => 'string',
    'escape=' => 'string',
  ),
  'fgets' => 
  array (
    0 => 'false|string',
    'stream' => 'resource',
    'length=' => 'int|null',
  ),
  'Fiber::__construct' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'Fiber::start' => 
  array (
    0 => 'mixed',
    '...args' => 'mixed',
  ),
  'Fiber::resume' => 
  array (
    0 => 'mixed',
    'value=' => 'mixed|null',
  ),
  'Fiber::throw' => 
  array (
    0 => 'mixed',
    'exception' => 'Throwable',
  ),
  'Fiber::isStarted' => 
  array (
    0 => 'bool',
  ),
  'Fiber::isSuspended' => 
  array (
    0 => 'bool',
  ),
  'Fiber::isRunning' => 
  array (
    0 => 'bool',
  ),
  'Fiber::isTerminated' => 
  array (
    0 => 'bool',
  ),
  'Fiber::getReturn' => 
  array (
    0 => 'mixed',
  ),
  'Fiber::getCurrent' => 
  array (
    0 => 'null|self',
  ),
  'Fiber::suspend' => 
  array (
    0 => 'mixed',
    'value=' => 'mixed|null',
  ),
  'FiberError::__construct' => 
  array (
    0 => 'void',
  ),
  'file' => 
  array (
    0 => 'false|list<string>',
    'filename' => 'string',
    'flags=' => 'int',
    'context=' => 'resource',
  ),
  'file_exists' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'file_get_contents' => 
  array (
    0 => 'false|string',
    'filename' => 'string',
    'use_include_path=' => 'bool',
    'context=' => 'null|resource',
    'offset=' => 'int',
    'length=' => 'int|null',
  ),
  'file_put_contents' => 
  array (
    0 => 'false|int<0, max>',
    'filename' => 'string',
    'data' => 'array<array-key, string>|resource|string',
    'flags=' => 'int',
    'context=' => 'resource',
  ),
  'fileatime' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
  ),
  'filectime' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
  ),
  'filegroup' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
  ),
  'fileinode' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
  ),
  'filemtime' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
  ),
  'fileowner' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
  ),
  'fileperms' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
  ),
  'filepro' => 
  array (
    0 => 'bool',
    'directory' => 'string',
  ),
  'filepro_fieldcount' => 
  array (
    0 => 'int',
  ),
  'filepro_fieldname' => 
  array (
    0 => 'string',
    'field_number' => 'int',
  ),
  'filepro_fieldtype' => 
  array (
    0 => 'string',
    'field_number' => 'int',
  ),
  'filepro_fieldwidth' => 
  array (
    0 => 'int',
    'field_number' => 'int',
  ),
  'filepro_retrieve' => 
  array (
    0 => 'string',
    'row_number' => 'int',
    'field_number' => 'int',
  ),
  'filepro_rowcount' => 
  array (
    0 => 'int',
  ),
  'filesize' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
  ),
  'FilesystemIterator::__construct' => 
  array (
    0 => 'void',
    'directory' => 'string',
    'flags=' => 'int',
  ),
  'FilesystemIterator::__toString' => 
  array (
    0 => 'string',
  ),
  'FilesystemIterator::current' => 
  array (
    0 => 'FilesystemIterator|SplFileInfo|string',
  ),
  'FilesystemIterator::getATime' => 
  array (
    0 => 'int',
  ),
  'FilesystemIterator::getBasename' => 
  array (
    0 => 'string',
    'suffix=' => 'string',
  ),
  'FilesystemIterator::getCTime' => 
  array (
    0 => 'int',
  ),
  'FilesystemIterator::getExtension' => 
  array (
    0 => 'string',
  ),
  'FilesystemIterator::getFileInfo' => 
  array (
    0 => 'SplFileInfo',
    'class=' => 'class-string|null',
  ),
  'FilesystemIterator::getFilename' => 
  array (
    0 => 'string',
  ),
  'FilesystemIterator::getFlags' => 
  array (
    0 => 'int',
  ),
  'FilesystemIterator::getGroup' => 
  array (
    0 => 'int',
  ),
  'FilesystemIterator::getInode' => 
  array (
    0 => 'int',
  ),
  'FilesystemIterator::getLinkTarget' => 
  array (
    0 => 'string',
  ),
  'FilesystemIterator::getMTime' => 
  array (
    0 => 'int',
  ),
  'FilesystemIterator::getOwner' => 
  array (
    0 => 'int',
  ),
  'FilesystemIterator::getPath' => 
  array (
    0 => 'string',
  ),
  'FilesystemIterator::getPathInfo' => 
  array (
    0 => 'SplFileInfo|null',
    'class=' => 'class-string|null',
  ),
  'FilesystemIterator::getPathname' => 
  array (
    0 => 'string',
  ),
  'FilesystemIterator::getPerms' => 
  array (
    0 => 'int',
  ),
  'FilesystemIterator::getRealPath' => 
  array (
    0 => 'non-falsy-string',
  ),
  'FilesystemIterator::getSize' => 
  array (
    0 => 'int',
  ),
  'FilesystemIterator::getType' => 
  array (
    0 => 'string',
  ),
  'FilesystemIterator::isDir' => 
  array (
    0 => 'bool',
  ),
  'FilesystemIterator::isDot' => 
  array (
    0 => 'bool',
  ),
  'FilesystemIterator::isExecutable' => 
  array (
    0 => 'bool',
  ),
  'FilesystemIterator::isFile' => 
  array (
    0 => 'bool',
  ),
  'FilesystemIterator::isLink' => 
  array (
    0 => 'bool',
  ),
  'FilesystemIterator::isReadable' => 
  array (
    0 => 'bool',
  ),
  'FilesystemIterator::isWritable' => 
  array (
    0 => 'bool',
  ),
  'FilesystemIterator::key' => 
  array (
    0 => 'string',
  ),
  'FilesystemIterator::next' => 
  array (
    0 => 'void',
  ),
  'FilesystemIterator::openFile' => 
  array (
    0 => 'SplFileObject',
    'mode=' => 'string',
    'useIncludePath=' => 'bool',
    'context=' => 'null|resource',
  ),
  'FilesystemIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'FilesystemIterator::seek' => 
  array (
    0 => 'void',
    'offset' => 'int',
  ),
  'FilesystemIterator::setFileClass' => 
  array (
    0 => 'void',
    'class=' => 'class-string',
  ),
  'FilesystemIterator::setFlags' => 
  array (
    0 => 'void',
    'flags' => 'int',
  ),
  'FilesystemIterator::setInfoClass' => 
  array (
    0 => 'void',
    'class=' => 'class-string',
  ),
  'FilesystemIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'filetype' => 
  array (
    0 => 'false|string',
    'filename' => 'string',
  ),
  'filter_has_var' => 
  array (
    0 => 'bool',
    'input_type' => '0|1|2|4|5',
    'var_name' => 'string',
  ),
  'filter_id' => 
  array (
    0 => 'false|int',
    'name' => 'string',
  ),
  'filter_input' => 
  array (
    0 => 'false|mixed|null',
    'type' => '0|1|2|4|5',
    'var_name' => 'string',
    'filter=' => 'int',
    'options=' => 'array<array-key, mixed>|int',
  ),
  'filter_input_array' => 
  array (
    0 => 'array<array-key, mixed>|false|null',
    'type' => '0|1|2|4|5',
    'options=' => 'array<array-key, mixed>|int',
    'add_empty=' => 'bool',
  ),
  'filter_list' => 
  array (
    0 => 'non-empty-list<non-falsy-string>',
  ),
  'filter_var' => 
  array (
    0 => 'false|mixed',
    'value' => 'mixed',
    'filter=' => 'int',
    'options=' => 'array<array-key, mixed>|int',
  ),
  'filter_var_array' => 
  array (
    0 => 'array<array-key, mixed>|false|null',
    'array' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>|int',
    'add_empty=' => 'bool',
  ),
  'FilterIterator::__construct' => 
  array (
    0 => 'void',
    'iterator' => 'Iterator',
  ),
  'FilterIterator::accept' => 
  array (
    0 => 'bool',
  ),
  'FilterIterator::current' => 
  array (
    0 => 'mixed',
  ),
  'FilterIterator::getInnerIterator' => 
  array (
    0 => 'Iterator',
  ),
  'FilterIterator::key' => 
  array (
    0 => 'mixed',
  ),
  'FilterIterator::next' => 
  array (
    0 => 'void',
  ),
  'FilterIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'FilterIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'finfo::__construct' => 
  array (
    0 => 'void',
    'flags=' => 'int',
    'magic_database=' => 'null|string',
  ),
  'finfo::buffer' => 
  array (
    0 => 'false|string',
    'string' => 'string',
    'flags=' => 'int',
    'context=' => 'null|resource',
  ),
  'finfo::file' => 
  array (
    0 => 'false|string',
    'filename' => 'string',
    'flags=' => 'int',
    'context=' => 'null|resource',
  ),
  'finfo::set_flags' => 
  array (
    0 => 'bool',
    'flags' => 'int',
  ),
  'finfo_buffer' => 
  array (
    0 => 'false|string',
    'finfo' => 'finfo',
    'string' => 'string',
    'flags=' => 'int',
    'context=' => 'resource',
  ),
  'finfo_close' => 
  array (
    0 => 'bool',
    'finfo' => 'finfo',
  ),
  'finfo_file' => 
  array (
    0 => 'false|string',
    'finfo' => 'finfo',
    'filename' => 'string',
    'flags=' => 'int',
    'context=' => 'resource',
  ),
  'finfo_open' => 
  array (
    0 => 'false|finfo',
    'flags=' => 'int',
    'magic_database=' => 'null|string',
  ),
  'finfo_set_flags' => 
  array (
    0 => 'bool',
    'finfo' => 'finfo',
    'flags' => 'int',
  ),
  'floatval' => 
  array (
    0 => 'float',
    'value' => 'mixed',
  ),
  'flock' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
    'operation' => 'int',
    '&w_would_block=' => 'int',
  ),
  'floor' => 
  array (
    0 => 'float',
    'num' => 'float|int',
  ),
  'flush' => 
  array (
    0 => 'void',
  ),
  'fmod' => 
  array (
    0 => 'float',
    'num1' => 'float',
    'num2' => 'float',
  ),
  'fnmatch' => 
  array (
    0 => 'bool',
    'pattern' => 'string',
    'filename' => 'string',
    'flags=' => 'int',
  ),
  'fopen' => 
  array (
    0 => 'false|resource',
    'filename' => 'string',
    'mode' => 'string',
    'use_include_path=' => 'bool',
    'context=' => 'null|resource',
  ),
  'forward_static_call' => 
  array (
    0 => 'false|mixed',
    'callback' => 'callable',
    '...args=' => 'mixed',
  ),
  'forward_static_call_array' => 
  array (
    0 => 'false|mixed',
    'callback' => 'callable',
    'args' => 'list<mixed>',
  ),
  'fpassthru' => 
  array (
    0 => 'int',
    'stream' => 'resource',
  ),
  'fpm_get_status' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'fprintf' => 
  array (
    0 => 'int',
    'stream' => 'resource',
    'format' => 'string',
    '...values=' => 'float|int|string',
  ),
  'fputcsv' => 
  array (
    0 => 'false|int',
    'stream' => 'resource',
    'fields' => 'array<array-key, Stringable|null|scalar>',
    'separator=' => 'string',
    'enclosure=' => 'string',
    'escape=' => 'string',
    'eol=' => 'string',
  ),
  'fputs' => 
  array (
    0 => 'false|int',
    'stream' => 'resource',
    'data' => 'string',
    'length=' => 'int|null',
  ),
  'fread' => 
  array (
    0 => 'false|string',
    'stream' => 'resource',
    'length' => 'int',
  ),
  'frenchtojd' => 
  array (
    0 => 'int',
    'month' => 'int',
    'day' => 'int',
    'year' => 'int',
  ),
  'fribidi_log2vis' => 
  array (
    0 => 'string',
    'string' => 'string',
    'direction' => 'string',
    'charset' => 'int',
  ),
  'fscanf' => 
  array (
    0 => 'list<mixed>',
    'stream' => 'resource',
    'format' => 'string',
  ),
  'fscanf\'1' => 
  array (
    0 => 'int',
    'stream' => 'resource',
    'format' => 'string',
    '&...w_vars=' => 'float|int|string',
  ),
  'fseek' => 
  array (
    0 => 'int',
    'stream' => 'resource',
    'offset' => 'int',
    'whence=' => 'int',
  ),
  'fsockopen' => 
  array (
    0 => 'false|resource',
    'hostname' => 'string',
    'port=' => 'int',
    '&w_error_code=' => 'int',
    '&w_error_message=' => 'string',
    'timeout=' => 'float|null',
  ),
  'fstat' => 
  array (
    0 => 'array{0: int, 10: int, 11: int, 12: int, 1: int, 2: int, 3: int, 4: int, 5: int, 6: int, 7: int, 8: int, 9: int, atime: int, blksize: int, blocks: int, ctime: int, dev: int, gid: int, ino: int, mode: int, mtime: int, nlink: int, rdev: int, size: int, uid: int}|false',
    'stream' => 'resource',
  ),
  'ftell' => 
  array (
    0 => 'false|int',
    'stream' => 'resource',
  ),
  'ftok' => 
  array (
    0 => 'int',
    'filename' => 'string',
    'project_id' => 'string',
  ),
  'ftp_alloc' => 
  array (
    0 => 'bool',
    'ftp' => 'FTP\\Connection',
    'size' => 'int',
    '&w_response=' => 'string',
  ),
  'ftp_append' => 
  array (
    0 => 'bool',
    'ftp' => 'FTP\\Connection',
    'remote_filename' => 'string',
    'local_filename' => 'string',
    'mode=' => 'int',
  ),
  'ftp_cdup' => 
  array (
    0 => 'bool',
    'ftp' => 'FTP\\Connection',
  ),
  'ftp_chdir' => 
  array (
    0 => 'bool',
    'ftp' => 'FTP\\Connection',
    'directory' => 'string',
  ),
  'ftp_chmod' => 
  array (
    0 => 'false|int',
    'ftp' => 'FTP\\Connection',
    'permissions' => 'int',
    'filename' => 'string',
  ),
  'ftp_close' => 
  array (
    0 => 'bool',
    'ftp' => 'FTP\\Connection',
  ),
  'ftp_connect' => 
  array (
    0 => 'FTP\\Connection|false',
    'hostname' => 'string',
    'port=' => 'int',
    'timeout=' => 'int',
  ),
  'ftp_delete' => 
  array (
    0 => 'bool',
    'ftp' => 'FTP\\Connection',
    'filename' => 'string',
  ),
  'ftp_exec' => 
  array (
    0 => 'bool',
    'ftp' => 'FTP\\Connection',
    'command' => 'string',
  ),
  'ftp_fget' => 
  array (
    0 => 'bool',
    'ftp' => 'FTP\\Connection',
    'stream' => 'resource',
    'remote_filename' => 'string',
    'mode=' => 'int',
    'offset=' => 'int',
  ),
  'ftp_fput' => 
  array (
    0 => 'bool',
    'ftp' => 'FTP\\Connection',
    'remote_filename' => 'string',
    'stream' => 'resource',
    'mode=' => 'int',
    'offset=' => 'int',
  ),
  'ftp_get' => 
  array (
    0 => 'bool',
    'ftp' => 'FTP\\Connection',
    'local_filename' => 'string',
    'remote_filename' => 'string',
    'mode=' => 'int',
    'offset=' => 'int',
  ),
  'ftp_get_option' => 
  array (
    0 => 'false|int',
    'ftp' => 'FTP\\Connection',
    'option' => 'int',
  ),
  'ftp_login' => 
  array (
    0 => 'bool',
    'ftp' => 'FTP\\Connection',
    'username' => 'string',
    'password' => 'string',
  ),
  'ftp_mdtm' => 
  array (
    0 => 'int',
    'ftp' => 'FTP\\Connection',
    'filename' => 'string',
  ),
  'ftp_mkdir' => 
  array (
    0 => 'false|string',
    'ftp' => 'FTP\\Connection',
    'directory' => 'string',
  ),
  'ftp_mlsd' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'ftp' => 'FTP\\Connection',
    'directory' => 'string',
  ),
  'ftp_nb_continue' => 
  array (
    0 => 'int',
    'ftp' => 'FTP\\Connection',
  ),
  'ftp_nb_fget' => 
  array (
    0 => 'int',
    'ftp' => 'FTP\\Connection',
    'stream' => 'resource',
    'remote_filename' => 'string',
    'mode=' => 'int',
    'offset=' => 'int',
  ),
  'ftp_nb_fput' => 
  array (
    0 => 'int',
    'ftp' => 'FTP\\Connection',
    'remote_filename' => 'string',
    'stream' => 'resource',
    'mode=' => 'int',
    'offset=' => 'int',
  ),
  'ftp_nb_get' => 
  array (
    0 => 'int',
    'ftp' => 'FTP\\Connection',
    'local_filename' => 'string',
    'remote_filename' => 'string',
    'mode=' => 'int',
    'offset=' => 'int',
  ),
  'ftp_nb_put' => 
  array (
    0 => 'int',
    'ftp' => 'FTP\\Connection',
    'remote_filename' => 'string',
    'local_filename' => 'string',
    'mode=' => 'int',
    'offset=' => 'int',
  ),
  'ftp_nlist' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'ftp' => 'FTP\\Connection',
    'directory' => 'string',
  ),
  'ftp_pasv' => 
  array (
    0 => 'bool',
    'ftp' => 'FTP\\Connection',
    'enable' => 'bool',
  ),
  'ftp_put' => 
  array (
    0 => 'bool',
    'ftp' => 'FTP\\Connection',
    'remote_filename' => 'string',
    'local_filename' => 'string',
    'mode=' => 'int',
    'offset=' => 'int',
  ),
  'ftp_pwd' => 
  array (
    0 => 'false|string',
    'ftp' => 'FTP\\Connection',
  ),
  'ftp_quit' => 
  array (
    0 => 'bool',
    'ftp' => 'FTP\\Connection',
  ),
  'ftp_raw' => 
  array (
    0 => 'array<array-key, mixed>|null',
    'ftp' => 'FTP\\Connection',
    'command' => 'string',
  ),
  'ftp_rawlist' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'ftp' => 'FTP\\Connection',
    'directory' => 'string',
    'recursive=' => 'bool',
  ),
  'ftp_rename' => 
  array (
    0 => 'bool',
    'ftp' => 'FTP\\Connection',
    'from' => 'string',
    'to' => 'string',
  ),
  'ftp_rmdir' => 
  array (
    0 => 'bool',
    'ftp' => 'FTP\\Connection',
    'directory' => 'string',
  ),
  'ftp_set_option' => 
  array (
    0 => 'bool',
    'ftp' => 'FTP\\Connection',
    'option' => 'int',
    'value' => 'mixed',
  ),
  'ftp_site' => 
  array (
    0 => 'bool',
    'ftp' => 'FTP\\Connection',
    'command' => 'string',
  ),
  'ftp_size' => 
  array (
    0 => 'int',
    'ftp' => 'FTP\\Connection',
    'filename' => 'string',
  ),
  'ftp_ssl_connect' => 
  array (
    0 => 'FTP\\Connection|false',
    'hostname' => 'string',
    'port=' => 'int',
    'timeout=' => 'int',
  ),
  'ftp_systype' => 
  array (
    0 => 'false|string',
    'ftp' => 'FTP\\Connection',
  ),
  'ftruncate' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
    'size' => 'int',
  ),
  'func_get_arg' => 
  array (
    0 => 'false|mixed',
    'position' => 'int',
  ),
  'func_get_args' => 
  array (
    0 => 'list<mixed>',
  ),
  'func_num_args' => 
  array (
    0 => 'int',
  ),
  'function_exists' => 
  array (
    0 => 'bool',
    'function' => 'string',
  ),
  'fwrite' => 
  array (
    0 => 'false|int',
    'stream' => 'resource',
    'data' => 'string',
    'length=' => 'int|null',
  ),
  'gc_collect_cycles' => 
  array (
    0 => 'int',
  ),
  'gc_disable' => 
  array (
    0 => 'void',
  ),
  'gc_enable' => 
  array (
    0 => 'void',
  ),
  'gc_enabled' => 
  array (
    0 => 'bool',
  ),
  'gc_mem_caches' => 
  array (
    0 => 'int',
  ),
  'gc_status' => 
  array (
    0 => 'array{application_time: float, buffer_size: int, collected: int, collector_time: float, destructor_time: float, free_time: float, full: bool, protected: bool, roots: int, running: bool, runs: int, threshold: int}',
  ),
  'gd_info' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'gearman_bugreport' => 
  array (
    0 => 'mixed',
  ),
  'gearman_client_add_options' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'option' => 'mixed',
  ),
  'gearman_client_add_server' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'host' => 'mixed',
    'port' => 'mixed',
  ),
  'gearman_client_add_servers' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'servers' => 'mixed',
  ),
  'gearman_client_add_task' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'function_name' => 'mixed',
    'workload' => 'mixed',
    'context' => 'mixed',
    'unique' => 'mixed',
  ),
  'gearman_client_add_task_background' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'function_name' => 'mixed',
    'workload' => 'mixed',
    'context' => 'mixed',
    'unique' => 'mixed',
  ),
  'gearman_client_add_task_high' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'function_name' => 'mixed',
    'workload' => 'mixed',
    'context' => 'mixed',
    'unique' => 'mixed',
  ),
  'gearman_client_add_task_high_background' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'function_name' => 'mixed',
    'workload' => 'mixed',
    'context' => 'mixed',
    'unique' => 'mixed',
  ),
  'gearman_client_add_task_low' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'function_name' => 'mixed',
    'workload' => 'mixed',
    'context' => 'mixed',
    'unique' => 'mixed',
  ),
  'gearman_client_add_task_low_background' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'function_name' => 'mixed',
    'workload' => 'mixed',
    'context' => 'mixed',
    'unique' => 'mixed',
  ),
  'gearman_client_add_task_status' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'job_handle' => 'mixed',
    'context' => 'mixed',
  ),
  'gearman_client_clear_fn' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
  ),
  'gearman_client_clone' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
  ),
  'gearman_client_context' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
  ),
  'gearman_client_create' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
  ),
  'gearman_client_do' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'function_name' => 'mixed',
    'workload' => 'mixed',
    'unique' => 'mixed',
  ),
  'gearman_client_do_background' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'function_name' => 'mixed',
    'workload' => 'mixed',
    'unique' => 'mixed',
  ),
  'gearman_client_do_high' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'function_name' => 'mixed',
    'workload' => 'mixed',
    'unique' => 'mixed',
  ),
  'gearman_client_do_high_background' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'function_name' => 'mixed',
    'workload' => 'mixed',
    'unique' => 'mixed',
  ),
  'gearman_client_do_job_handle' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
  ),
  'gearman_client_do_low' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'function_name' => 'mixed',
    'workload' => 'mixed',
    'unique' => 'mixed',
  ),
  'gearman_client_do_low_background' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'function_name' => 'mixed',
    'workload' => 'mixed',
    'unique' => 'mixed',
  ),
  'gearman_client_do_normal' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'function_name' => 'string',
    'workload' => 'string',
    'unique' => 'string',
  ),
  'gearman_client_do_status' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
  ),
  'gearman_client_echo' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'workload' => 'mixed',
  ),
  'gearman_client_errno' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
  ),
  'gearman_client_error' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
  ),
  'gearman_client_job_status' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'job_handle' => 'mixed',
  ),
  'gearman_client_options' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
  ),
  'gearman_client_remove_options' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'option' => 'mixed',
  ),
  'gearman_client_return_code' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
  ),
  'gearman_client_run_tasks' => 
  array (
    0 => 'mixed',
    'data' => 'mixed',
  ),
  'gearman_client_set_complete_fn' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'callback' => 'mixed',
  ),
  'gearman_client_set_context' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'context' => 'mixed',
  ),
  'gearman_client_set_created_fn' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'callback' => 'mixed',
  ),
  'gearman_client_set_data_fn' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'callback' => 'mixed',
  ),
  'gearman_client_set_exception_fn' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'callback' => 'mixed',
  ),
  'gearman_client_set_fail_fn' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'callback' => 'mixed',
  ),
  'gearman_client_set_options' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'option' => 'mixed',
  ),
  'gearman_client_set_status_fn' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'callback' => 'mixed',
  ),
  'gearman_client_set_timeout' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'timeout' => 'mixed',
  ),
  'gearman_client_set_warning_fn' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'callback' => 'mixed',
  ),
  'gearman_client_set_workload_fn' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'callback' => 'mixed',
  ),
  'gearman_client_timeout' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
  ),
  'gearman_client_wait' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
  ),
  'gearman_job_function_name' => 
  array (
    0 => 'mixed',
    'job_object' => 'mixed',
  ),
  'gearman_job_handle' => 
  array (
    0 => 'string',
  ),
  'gearman_job_return_code' => 
  array (
    0 => 'mixed',
    'job_object' => 'mixed',
  ),
  'gearman_job_send_complete' => 
  array (
    0 => 'mixed',
    'job_object' => 'mixed',
    'result' => 'mixed',
  ),
  'gearman_job_send_data' => 
  array (
    0 => 'mixed',
    'job_object' => 'mixed',
    'data' => 'mixed',
  ),
  'gearman_job_send_exception' => 
  array (
    0 => 'mixed',
    'job_object' => 'mixed',
    'exception' => 'mixed',
  ),
  'gearman_job_send_fail' => 
  array (
    0 => 'mixed',
    'job_object' => 'mixed',
  ),
  'gearman_job_send_status' => 
  array (
    0 => 'mixed',
    'job_object' => 'mixed',
    'numerator' => 'mixed',
    'denominator' => 'mixed',
  ),
  'gearman_job_send_warning' => 
  array (
    0 => 'mixed',
    'job_object' => 'mixed',
    'warning' => 'mixed',
  ),
  'gearman_job_status' => 
  array (
    0 => 'array<array-key, mixed>',
    'job_handle' => 'string',
  ),
  'gearman_job_unique' => 
  array (
    0 => 'mixed',
    'job_object' => 'mixed',
  ),
  'gearman_job_workload' => 
  array (
    0 => 'mixed',
    'job_object' => 'mixed',
  ),
  'gearman_job_workload_size' => 
  array (
    0 => 'mixed',
    'job_object' => 'mixed',
  ),
  'gearman_task_data' => 
  array (
    0 => 'mixed',
    'task_object' => 'mixed',
  ),
  'gearman_task_data_size' => 
  array (
    0 => 'mixed',
    'task_object' => 'mixed',
  ),
  'gearman_task_denominator' => 
  array (
    0 => 'mixed',
    'task_object' => 'mixed',
  ),
  'gearman_task_function_name' => 
  array (
    0 => 'mixed',
    'task_object' => 'mixed',
  ),
  'gearman_task_is_known' => 
  array (
    0 => 'mixed',
    'task_object' => 'mixed',
  ),
  'gearman_task_is_running' => 
  array (
    0 => 'mixed',
    'task_object' => 'mixed',
  ),
  'gearman_task_job_handle' => 
  array (
    0 => 'mixed',
    'task_object' => 'mixed',
  ),
  'gearman_task_numerator' => 
  array (
    0 => 'mixed',
    'task_object' => 'mixed',
  ),
  'gearman_task_recv_data' => 
  array (
    0 => 'mixed',
    'task_object' => 'mixed',
    'data_len' => 'mixed',
  ),
  'gearman_task_return_code' => 
  array (
    0 => 'mixed',
    'task_object' => 'mixed',
  ),
  'gearman_task_send_workload' => 
  array (
    0 => 'mixed',
    'task_object' => 'mixed',
    'data' => 'mixed',
  ),
  'gearman_task_unique' => 
  array (
    0 => 'mixed',
    'task_object' => 'mixed',
  ),
  'gearman_verbose_name' => 
  array (
    0 => 'mixed',
    'verbose' => 'mixed',
  ),
  'gearman_version' => 
  array (
    0 => 'mixed',
  ),
  'gearman_worker_add_function' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
    'function_name' => 'mixed',
    'function' => 'mixed',
    'data' => 'mixed',
    'timeout' => 'mixed',
  ),
  'gearman_worker_add_options' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
    'option' => 'mixed',
  ),
  'gearman_worker_add_server' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
    'host' => 'mixed',
    'port' => 'mixed',
  ),
  'gearman_worker_add_servers' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
    'servers' => 'mixed',
  ),
  'gearman_worker_clone' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
  ),
  'gearman_worker_create' => 
  array (
    0 => 'mixed',
  ),
  'gearman_worker_echo' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
    'workload' => 'mixed',
  ),
  'gearman_worker_errno' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
  ),
  'gearman_worker_error' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
  ),
  'gearman_worker_grab_job' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
  ),
  'gearman_worker_options' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
  ),
  'gearman_worker_register' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
    'function_name' => 'mixed',
    'timeout' => 'mixed',
  ),
  'gearman_worker_remove_options' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
    'option' => 'mixed',
  ),
  'gearman_worker_return_code' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
  ),
  'gearman_worker_set_options' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
    'option' => 'mixed',
  ),
  'gearman_worker_set_timeout' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
    'timeout' => 'mixed',
  ),
  'gearman_worker_timeout' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
  ),
  'gearman_worker_unregister' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
    'function_name' => 'mixed',
  ),
  'gearman_worker_unregister_all' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
  ),
  'gearman_worker_wait' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
  ),
  'gearman_worker_work' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
  ),
  'GearmanClient::__construct' => 
  array (
    0 => 'void',
  ),
  'GearmanClient::addOptions' => 
  array (
    0 => 'bool',
    'options' => 'int',
  ),
  'GearmanClient::addServer' => 
  array (
    0 => 'bool',
    'host=' => 'string',
    'port=' => 'int',
  ),
  'GearmanClient::addServers' => 
  array (
    0 => 'bool',
    'servers=' => 'string',
  ),
  'GearmanClient::addTask' => 
  array (
    0 => 'GearmanTask|false',
    'function_name' => 'string',
    'workload' => 'string',
    'context=' => 'mixed',
    'unique=' => 'string',
  ),
  'GearmanClient::addTaskBackground' => 
  array (
    0 => 'GearmanTask|false',
    'function_name' => 'string',
    'workload' => 'string',
    'context=' => 'mixed',
    'unique=' => 'string',
  ),
  'GearmanClient::addTaskHigh' => 
  array (
    0 => 'GearmanTask|false',
    'function_name' => 'string',
    'workload' => 'string',
    'context=' => 'mixed',
    'unique=' => 'string',
  ),
  'GearmanClient::addTaskHighBackground' => 
  array (
    0 => 'GearmanTask|false',
    'function_name' => 'string',
    'workload' => 'string',
    'context=' => 'mixed',
    'unique=' => 'string',
  ),
  'GearmanClient::addTaskLow' => 
  array (
    0 => 'GearmanTask|false',
    'function_name' => 'string',
    'workload' => 'string',
    'context=' => 'mixed',
    'unique=' => 'string',
  ),
  'GearmanClient::addTaskLowBackground' => 
  array (
    0 => 'GearmanTask|false',
    'function_name' => 'string',
    'workload' => 'string',
    'context=' => 'mixed',
    'unique=' => 'string',
  ),
  'GearmanClient::addTaskStatus' => 
  array (
    0 => 'GearmanTask',
    'job_handle' => 'string',
    'context=' => 'string',
  ),
  'GearmanClient::clearCallbacks' => 
  array (
    0 => 'bool',
  ),
  'GearmanClient::clone' => 
  array (
    0 => 'GearmanClient',
  ),
  'GearmanClient::context' => 
  array (
    0 => 'string',
  ),
  'GearmanClient::data' => 
  array (
    0 => 'string',
  ),
  'GearmanClient::do' => 
  array (
    0 => 'string',
    'function_name' => 'string',
    'workload' => 'string',
    'unique=' => 'string',
  ),
  'GearmanClient::doBackground' => 
  array (
    0 => 'string',
    'function_name' => 'string',
    'workload' => 'string',
    'unique=' => 'string',
  ),
  'GearmanClient::doHigh' => 
  array (
    0 => 'string',
    'function_name' => 'string',
    'workload' => 'string',
    'unique=' => 'string',
  ),
  'GearmanClient::doHighBackground' => 
  array (
    0 => 'string',
    'function_name' => 'string',
    'workload' => 'string',
    'unique=' => 'string',
  ),
  'GearmanClient::doJobHandle' => 
  array (
    0 => 'string',
  ),
  'GearmanClient::doLow' => 
  array (
    0 => 'string',
    'function_name' => 'string',
    'workload' => 'string',
    'unique=' => 'string',
  ),
  'GearmanClient::doLowBackground' => 
  array (
    0 => 'string',
    'function_name' => 'string',
    'workload' => 'string',
    'unique=' => 'string',
  ),
  'GearmanClient::doNormal' => 
  array (
    0 => 'string',
    'function_name' => 'string',
    'workload' => 'string',
    'unique=' => 'string',
  ),
  'GearmanClient::doStatus' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'GearmanClient::echo' => 
  array (
    0 => 'bool',
    'workload' => 'string',
  ),
  'GearmanClient::error' => 
  array (
    0 => 'string',
  ),
  'GearmanClient::getErrno' => 
  array (
    0 => 'int',
  ),
  'GearmanClient::jobStatus' => 
  array (
    0 => 'array<array-key, mixed>',
    'job_handle' => 'string',
  ),
  'GearmanClient::options' => 
  array (
    0 => 'mixed',
  ),
  'GearmanClient::ping' => 
  array (
    0 => 'bool',
    'workload' => 'string',
  ),
  'GearmanClient::removeOptions' => 
  array (
    0 => 'bool',
    'options' => 'int',
  ),
  'GearmanClient::returnCode' => 
  array (
    0 => 'int',
  ),
  'GearmanClient::runTasks' => 
  array (
    0 => 'bool',
  ),
  'GearmanClient::setClientCallback' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'GearmanClient::setCompleteCallback' => 
  array (
    0 => 'bool',
    'callback' => 'callable',
  ),
  'GearmanClient::setContext' => 
  array (
    0 => 'bool',
    'context' => 'string',
  ),
  'GearmanClient::setCreatedCallback' => 
  array (
    0 => 'bool',
    'callback' => 'string',
  ),
  'GearmanClient::setData' => 
  array (
    0 => 'bool',
    'data' => 'string',
  ),
  'GearmanClient::setDataCallback' => 
  array (
    0 => 'bool',
    'callback' => 'callable',
  ),
  'GearmanClient::setExceptionCallback' => 
  array (
    0 => 'bool',
    'callback' => 'callable',
  ),
  'GearmanClient::setFailCallback' => 
  array (
    0 => 'bool',
    'callback' => 'callable',
  ),
  'GearmanClient::setOptions' => 
  array (
    0 => 'bool',
    'options' => 'int',
  ),
  'GearmanClient::setStatusCallback' => 
  array (
    0 => 'bool',
    'callback' => 'callable',
  ),
  'GearmanClient::setTimeout' => 
  array (
    0 => 'bool',
    'timeout' => 'int',
  ),
  'GearmanClient::setWarningCallback' => 
  array (
    0 => 'bool',
    'callback' => 'callable',
  ),
  'GearmanClient::setWorkloadCallback' => 
  array (
    0 => 'bool',
    'callback' => 'callable',
  ),
  'GearmanClient::timeout' => 
  array (
    0 => 'int',
  ),
  'GearmanClient::wait' => 
  array (
    0 => 'mixed',
  ),
  'GearmanJob::__construct' => 
  array (
    0 => 'void',
  ),
  'GearmanJob::complete' => 
  array (
    0 => 'bool',
    'result' => 'string',
  ),
  'GearmanJob::data' => 
  array (
    0 => 'bool',
    'data' => 'string',
  ),
  'GearmanJob::exception' => 
  array (
    0 => 'bool',
    'exception' => 'string',
  ),
  'GearmanJob::fail' => 
  array (
    0 => 'bool',
  ),
  'GearmanJob::functionName' => 
  array (
    0 => 'string',
  ),
  'GearmanJob::handle' => 
  array (
    0 => 'string',
  ),
  'GearmanJob::returnCode' => 
  array (
    0 => 'int',
  ),
  'GearmanJob::sendComplete' => 
  array (
    0 => 'bool',
    'result' => 'string',
  ),
  'GearmanJob::sendData' => 
  array (
    0 => 'bool',
    'data' => 'string',
  ),
  'GearmanJob::sendException' => 
  array (
    0 => 'bool',
    'exception' => 'string',
  ),
  'GearmanJob::sendFail' => 
  array (
    0 => 'bool',
  ),
  'GearmanJob::sendStatus' => 
  array (
    0 => 'bool',
    'numerator' => 'int',
    'denominator' => 'int',
  ),
  'GearmanJob::sendWarning' => 
  array (
    0 => 'bool',
    'warning' => 'string',
  ),
  'GearmanJob::setReturn' => 
  array (
    0 => 'bool',
    'gearman_return_t' => 'string',
  ),
  'GearmanJob::status' => 
  array (
    0 => 'bool',
    'numerator' => 'int',
    'denominator' => 'int',
  ),
  'GearmanJob::unique' => 
  array (
    0 => 'string',
  ),
  'GearmanJob::warning' => 
  array (
    0 => 'bool',
    'warning' => 'string',
  ),
  'GearmanJob::workload' => 
  array (
    0 => 'string',
  ),
  'GearmanJob::workloadSize' => 
  array (
    0 => 'int',
  ),
  'GearmanTask::__construct' => 
  array (
    0 => 'void',
  ),
  'GearmanTask::create' => 
  array (
    0 => 'GearmanTask',
  ),
  'GearmanTask::data' => 
  array (
    0 => 'false|string',
  ),
  'GearmanTask::dataSize' => 
  array (
    0 => 'false|int',
  ),
  'GearmanTask::function' => 
  array (
    0 => 'string',
  ),
  'GearmanTask::functionName' => 
  array (
    0 => 'string',
  ),
  'GearmanTask::isKnown' => 
  array (
    0 => 'bool',
  ),
  'GearmanTask::isRunning' => 
  array (
    0 => 'bool',
  ),
  'GearmanTask::jobHandle' => 
  array (
    0 => 'string',
  ),
  'GearmanTask::recvData' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'data_len' => 'int',
  ),
  'GearmanTask::returnCode' => 
  array (
    0 => 'int',
  ),
  'GearmanTask::sendData' => 
  array (
    0 => 'int',
    'data' => 'string',
  ),
  'GearmanTask::sendWorkload' => 
  array (
    0 => 'false|int',
    'data' => 'string',
  ),
  'GearmanTask::taskDenominator' => 
  array (
    0 => 'false|int',
  ),
  'GearmanTask::taskNumerator' => 
  array (
    0 => 'false|int',
  ),
  'GearmanTask::unique' => 
  array (
    0 => 'false|string',
  ),
  'GearmanTask::uuid' => 
  array (
    0 => 'string',
  ),
  'GearmanWorker::__construct' => 
  array (
    0 => 'void',
  ),
  'GearmanWorker::addFunction' => 
  array (
    0 => 'bool',
    'function_name' => 'string',
    'function' => 'callable',
    'context=' => 'mixed',
    'timeout=' => 'int',
  ),
  'GearmanWorker::addOptions' => 
  array (
    0 => 'bool',
    'option' => 'int',
  ),
  'GearmanWorker::addServer' => 
  array (
    0 => 'bool',
    'host=' => 'string',
    'port=' => 'int',
  ),
  'GearmanWorker::addServers' => 
  array (
    0 => 'bool',
    'servers' => 'string',
  ),
  'GearmanWorker::clone' => 
  array (
    0 => 'void',
  ),
  'GearmanWorker::echo' => 
  array (
    0 => 'bool',
    'workload' => 'string',
  ),
  'GearmanWorker::error' => 
  array (
    0 => 'string',
  ),
  'GearmanWorker::getErrno' => 
  array (
    0 => 'int',
  ),
  'GearmanWorker::grabJob' => 
  array (
    0 => 'mixed',
  ),
  'GearmanWorker::options' => 
  array (
    0 => 'int',
  ),
  'GearmanWorker::register' => 
  array (
    0 => 'bool',
    'function_name' => 'string',
    'timeout=' => 'int',
  ),
  'GearmanWorker::removeOptions' => 
  array (
    0 => 'bool',
    'option' => 'int',
  ),
  'GearmanWorker::returnCode' => 
  array (
    0 => 'int',
  ),
  'GearmanWorker::setId' => 
  array (
    0 => 'bool',
    'id' => 'string',
  ),
  'GearmanWorker::setOptions' => 
  array (
    0 => 'bool',
    'option' => 'int',
  ),
  'GearmanWorker::setTimeout' => 
  array (
    0 => 'bool',
    'timeout' => 'int',
  ),
  'GearmanWorker::timeout' => 
  array (
    0 => 'int',
  ),
  'GearmanWorker::unregister' => 
  array (
    0 => 'bool',
    'function_name' => 'string',
  ),
  'GearmanWorker::unregisterAll' => 
  array (
    0 => 'bool',
  ),
  'GearmanWorker::wait' => 
  array (
    0 => 'bool',
  ),
  'GearmanWorker::work' => 
  array (
    0 => 'bool',
  ),
  'Gender\\Gender::__construct' => 
  array (
    0 => 'void',
    'dsn=' => 'string',
  ),
  'Gender\\Gender::connect' => 
  array (
    0 => 'bool',
    'dsn' => 'string',
  ),
  'Gender\\Gender::country' => 
  array (
    0 => 'array<array-key, mixed>',
    'country' => 'int',
  ),
  'Gender\\Gender::get' => 
  array (
    0 => 'int',
    'name' => 'string',
    'country=' => 'int',
  ),
  'Gender\\Gender::isNick' => 
  array (
    0 => 'array<array-key, mixed>',
    'name0' => 'string',
    'name1' => 'string',
    'country=' => 'int',
  ),
  'Gender\\Gender::similarNames' => 
  array (
    0 => 'array<array-key, mixed>',
    'name' => 'string',
    'country=' => 'int',
  ),
  'Generator::current' => 
  array (
    0 => 'mixed',
  ),
  'Generator::getReturn' => 
  array (
    0 => 'mixed',
  ),
  'Generator::key' => 
  array (
    0 => 'mixed',
  ),
  'Generator::next' => 
  array (
    0 => 'void',
  ),
  'Generator::rewind' => 
  array (
    0 => 'void',
  ),
  'Generator::send' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
  ),
  'Generator::throw' => 
  array (
    0 => 'mixed',
    'exception' => 'Throwable',
  ),
  'Generator::valid' => 
  array (
    0 => 'bool',
  ),
  'geoip_asnum_by_name' => 
  array (
    0 => 'false|string',
    'hostname' => 'string',
  ),
  'geoip_continent_code_by_name' => 
  array (
    0 => 'false|string',
    'hostname' => 'string',
  ),
  'geoip_country_code3_by_name' => 
  array (
    0 => 'false|string',
    'hostname' => 'string',
  ),
  'geoip_country_code_by_name' => 
  array (
    0 => 'false|string',
    'hostname' => 'string',
  ),
  'geoip_country_name_by_name' => 
  array (
    0 => 'false|string',
    'hostname' => 'string',
  ),
  'geoip_database_info' => 
  array (
    0 => 'string',
    'database=' => 'int',
  ),
  'geoip_db_avail' => 
  array (
    0 => 'bool',
    'database' => 'int',
  ),
  'geoip_db_filename' => 
  array (
    0 => 'string',
    'database' => 'int',
  ),
  'geoip_db_get_all_info' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'geoip_domain_by_name' => 
  array (
    0 => 'string',
    'hostname' => 'string',
  ),
  'geoip_id_by_name' => 
  array (
    0 => 'int',
    'hostname' => 'string',
  ),
  'geoip_isp_by_name' => 
  array (
    0 => 'false|string',
    'hostname' => 'string',
  ),
  'geoip_netspeedcell_by_name' => 
  array (
    0 => 'false|string',
    'hostname' => 'string',
  ),
  'geoip_org_by_name' => 
  array (
    0 => 'false|string',
    'hostname' => 'string',
  ),
  'geoip_record_by_name' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'hostname' => 'string',
  ),
  'geoip_region_by_name' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'hostname' => 'string',
  ),
  'geoip_region_name_by_code' => 
  array (
    0 => 'false|string',
    'country_code' => 'string',
    'region_code' => 'string',
  ),
  'geoip_setup_custom_directory' => 
  array (
    0 => 'void',
    'path' => 'string',
  ),
  'geoip_time_zone_by_country_and_region' => 
  array (
    0 => 'false|string',
    'country_code' => 'string',
    'region_code=' => 'string',
  ),
  'GEOSGeometry::__toString' => 
  array (
    0 => 'string',
  ),
  'GEOSGeometry::project' => 
  array (
    0 => 'float',
    'other' => 'GEOSGeometry',
    'normalized' => 'bool',
  ),
  'GEOSGeometry::interpolate' => 
  array (
    0 => 'GEOSGeometry',
    'dist' => 'float',
    'normalized' => 'bool',
  ),
  'GEOSGeometry::buffer' => 
  array (
    0 => 'GEOSGeometry',
    'dist' => 'float',
    'styleArray=' => 'array<array-key, mixed>',
  ),
  'GEOSGeometry::offsetCurve' => 
  array (
    0 => 'GEOSGeometry',
    'dist' => 'float',
    'styleArray' => 'array<array-key, mixed>',
  ),
  'GEOSGeometry::envelope' => 
  array (
    0 => 'GEOSGeometry',
  ),
  'GEOSGeometry::intersection' => 
  array (
    0 => 'GEOSGeometry',
    'geom' => 'GEOSGeometry',
  ),
  'GEOSGeometry::convexHull' => 
  array (
    0 => 'GEOSGeometry',
  ),
  'GEOSGeometry::difference' => 
  array (
    0 => 'GEOSGeometry',
    'geom' => 'GEOSGeometry',
  ),
  'GEOSGeometry::symDifference' => 
  array (
    0 => 'GEOSGeometry',
    'geom' => 'GEOSGeometry',
  ),
  'GEOSGeometry::boundary' => 
  array (
    0 => 'GEOSGeometry',
  ),
  'GEOSGeometry::union' => 
  array (
    0 => 'GEOSGeometry',
    'otherGeom=' => 'GEOSGeometry',
  ),
  'GEOSGeometry::pointOnSurface' => 
  array (
    0 => 'GEOSGeometry',
  ),
  'GEOSGeometry::centroid' => 
  array (
    0 => 'GEOSGeometry',
  ),
  'GEOSGeometry::relate' => 
  array (
    0 => 'bool|string',
    'otherGeom' => 'GEOSGeometry',
    'pattern' => 'string',
  ),
  'GEOSGeometry::relateBoundaryNodeRule' => 
  array (
    0 => 'string',
    'otherGeom' => 'GEOSGeometry',
    'rule' => 'int',
  ),
  'GEOSGeometry::simplify' => 
  array (
    0 => 'GEOSGeometry',
    'tolerance' => 'float',
    'preserveTopology=' => 'bool',
  ),
  'GEOSGeometry::normalize' => 
  array (
    0 => 'GEOSGeometry',
  ),
  'GEOSGeometry::extractUniquePoints' => 
  array (
    0 => 'GEOSGeometry',
  ),
  'GEOSGeometry::disjoint' => 
  array (
    0 => 'bool',
    'geom' => 'GEOSGeometry',
  ),
  'GEOSGeometry::touches' => 
  array (
    0 => 'bool',
    'geom' => 'GEOSGeometry',
  ),
  'GEOSGeometry::intersects' => 
  array (
    0 => 'bool',
    'geom' => 'GEOSGeometry',
  ),
  'GEOSGeometry::crosses' => 
  array (
    0 => 'bool',
    'geom' => 'GEOSGeometry',
  ),
  'GEOSGeometry::within' => 
  array (
    0 => 'bool',
    'geom' => 'GEOSGeometry',
  ),
  'GEOSGeometry::contains' => 
  array (
    0 => 'bool',
    'geom' => 'GEOSGeometry',
  ),
  'GEOSGeometry::overlaps' => 
  array (
    0 => 'bool',
    'geom' => 'GEOSGeometry',
  ),
  'GEOSGeometry::covers' => 
  array (
    0 => 'bool',
    'geom' => 'GEOSGeometry',
  ),
  'GEOSGeometry::coveredBy' => 
  array (
    0 => 'bool',
    'geom' => 'GEOSGeometry',
  ),
  'GEOSGeometry::equals' => 
  array (
    0 => 'bool',
    'geom' => 'GEOSGeometry',
  ),
  'GEOSGeometry::equalsExact' => 
  array (
    0 => 'bool',
    'geom' => 'GEOSGeometry',
    'tolerance' => 'float',
  ),
  'GEOSGeometry::isEmpty' => 
  array (
    0 => 'bool',
  ),
  'GEOSGeometry::checkValidity' => 
  array (
    0 => 'array{location?: GEOSGeometry, reason?: string, valid: bool}',
  ),
  'GEOSGeometry::isSimple' => 
  array (
    0 => 'bool',
  ),
  'GEOSGeometry::isRing' => 
  array (
    0 => 'bool',
  ),
  'GEOSGeometry::hasZ' => 
  array (
    0 => 'bool',
  ),
  'GEOSGeometry::isClosed' => 
  array (
    0 => 'bool',
  ),
  'GEOSGeometry::typeName' => 
  array (
    0 => 'string',
  ),
  'GEOSGeometry::typeId' => 
  array (
    0 => 'int',
  ),
  'GEOSGeometry::getSRID' => 
  array (
    0 => 'int',
  ),
  'GEOSGeometry::setSRID' => 
  array (
    0 => 'void',
    'srid' => 'int',
  ),
  'GEOSGeometry::numGeometries' => 
  array (
    0 => 'int',
  ),
  'GEOSGeometry::geometryN' => 
  array (
    0 => 'GEOSGeometry',
    'num' => 'int',
  ),
  'GEOSGeometry::numInteriorRings' => 
  array (
    0 => 'int',
  ),
  'GEOSGeometry::numPoints' => 
  array (
    0 => 'int',
  ),
  'GEOSGeometry::getX' => 
  array (
    0 => 'float',
  ),
  'GEOSGeometry::getY' => 
  array (
    0 => 'float',
  ),
  'GEOSGeometry::interiorRingN' => 
  array (
    0 => 'GEOSGeometry',
    'num' => 'int',
  ),
  'GEOSGeometry::exteriorRing' => 
  array (
    0 => 'GEOSGeometry',
  ),
  'GEOSGeometry::numCoordinates' => 
  array (
    0 => 'int',
  ),
  'GEOSGeometry::dimension' => 
  array (
    0 => 'int',
  ),
  'GEOSGeometry::coordinateDimension' => 
  array (
    0 => 'int',
  ),
  'GEOSGeometry::pointN' => 
  array (
    0 => 'GEOSGeometry',
    'num' => 'int',
  ),
  'GEOSGeometry::startPoint' => 
  array (
    0 => 'GEOSGeometry',
  ),
  'GEOSGeometry::endPoint' => 
  array (
    0 => 'GEOSGeometry',
  ),
  'GEOSGeometry::area' => 
  array (
    0 => 'float',
  ),
  'GEOSGeometry::length' => 
  array (
    0 => 'float',
  ),
  'GEOSGeometry::distance' => 
  array (
    0 => 'float',
    'geom' => 'GEOSGeometry',
  ),
  'GEOSGeometry::hausdorffDistance' => 
  array (
    0 => 'float',
    'geom' => 'GEOSGeometry',
  ),
  'GEOSGeometry::snapTo' => 
  array (
    0 => 'GEOSGeometry',
    'geom' => 'GEOSGeometry',
    'tolerance' => 'float',
  ),
  'GEOSGeometry::node' => 
  array (
    0 => 'GEOSGeometry',
  ),
  'GEOSGeometry::delaunayTriangulation' => 
  array (
    0 => 'GEOSGeometry',
    'tolerance' => 'float',
    'onlyEdges' => 'bool',
  ),
  'GEOSGeometry::voronoiDiagram' => 
  array (
    0 => 'GEOSGeometry',
    'tolerance' => 'float',
    'onlyEdges' => 'bool',
    'extent' => 'GEOSGeometry|null',
  ),
  'GEOSLineMerge' => 
  array (
    0 => 'array<array-key, mixed>',
    'geom' => 'GEOSGeometry',
  ),
  'GEOSPolygonize' => 
  array (
    0 => 'array{cut_edges?: array<array-key, GEOSGeometry>, dangles: array<array-key, GEOSGeometry>, invalid_rings: array<array-key, GEOSGeometry>, rings: array<array-key, GEOSGeometry>}',
    'geom' => 'GEOSGeometry',
  ),
  'GEOSRelateMatch' => 
  array (
    0 => 'bool',
    'matrix' => 'string',
    'pattern' => 'string',
  ),
  'GEOSSharedPaths' => 
  array (
    0 => 'GEOSGeometry',
    'geom1' => 'GEOSGeometry',
    'geom2' => 'GEOSGeometry',
  ),
  'GEOSVersion' => 
  array (
    0 => 'string',
  ),
  'GEOSWKBReader::__construct' => 
  array (
    0 => 'void',
  ),
  'GEOSWKBReader::read' => 
  array (
    0 => 'GEOSGeometry',
    'wkb' => 'string',
  ),
  'GEOSWKBReader::readHEX' => 
  array (
    0 => 'GEOSGeometry',
    'wkb' => 'string',
  ),
  'GEOSWKBWriter::__construct' => 
  array (
    0 => 'void',
  ),
  'GEOSWKBWriter::getOutputDimension' => 
  array (
    0 => 'int',
  ),
  'GEOSWKBWriter::setOutputDimension' => 
  array (
    0 => 'void',
    'dim' => 'int',
  ),
  'GEOSWKBWriter::getByteOrder' => 
  array (
    0 => 'int',
  ),
  'GEOSWKBWriter::setByteOrder' => 
  array (
    0 => 'void',
    'byteOrder' => 'int',
  ),
  'GEOSWKBWriter::getIncludeSRID' => 
  array (
    0 => 'bool',
  ),
  'GEOSWKBWriter::setIncludeSRID' => 
  array (
    0 => 'void',
    'inc' => 'bool',
  ),
  'GEOSWKBWriter::write' => 
  array (
    0 => 'string',
    'geom' => 'GEOSGeometry',
  ),
  'GEOSWKBWriter::writeHEX' => 
  array (
    0 => 'string',
    'geom' => 'GEOSGeometry',
  ),
  'GEOSWKTReader::__construct' => 
  array (
    0 => 'void',
  ),
  'GEOSWKTReader::read' => 
  array (
    0 => 'GEOSGeometry',
    'wkt' => 'string',
  ),
  'GEOSWKTWriter::__construct' => 
  array (
    0 => 'void',
  ),
  'GEOSWKTWriter::write' => 
  array (
    0 => 'string',
    'geom' => 'GEOSGeometry',
  ),
  'GEOSWKTWriter::setTrim' => 
  array (
    0 => 'void',
    'trim' => 'bool',
  ),
  'GEOSWKTWriter::setRoundingPrecision' => 
  array (
    0 => 'void',
    'prec' => 'int',
  ),
  'GEOSWKTWriter::setOutputDimension' => 
  array (
    0 => 'void',
    'dim' => 'int',
  ),
  'GEOSWKTWriter::getOutputDimension' => 
  array (
    0 => 'int',
  ),
  'GEOSWKTWriter::setOld3D' => 
  array (
    0 => 'void',
    'val' => 'bool',
  ),
  'get_browser' => 
  array (
    0 => 'array<array-key, mixed>|false|object',
    'user_agent=' => 'null|string',
    'return_array=' => 'bool',
  ),
  'get_call_stack' => 
  array (
    0 => 'mixed',
  ),
  'get_called_class' => 
  array (
    0 => 'class-string',
  ),
  'get_cfg_var' => 
  array (
    0 => 'false|string',
    'option' => 'string',
  ),
  'get_class' => 
  array (
    0 => 'class-string',
    'object' => 'object',
  ),
  'get_class_methods' => 
  array (
    0 => 'list<non-falsy-string>',
    'object_or_class' => 'class-string|object',
  ),
  'get_class_vars' => 
  array (
    0 => 'array<non-falsy-string, mixed>',
    'class' => 'string',
  ),
  'get_current_user' => 
  array (
    0 => 'string',
  ),
  'get_debug_type' => 
  array (
    0 => 'string',
    'value' => 'mixed',
  ),
  'get_declared_classes' => 
  array (
    0 => 'list<class-string>',
  ),
  'get_declared_interfaces' => 
  array (
    0 => 'list<class-string>',
  ),
  'get_declared_traits' => 
  array (
    0 => 'list<class-string>',
  ),
  'get_defined_constants' => 
  array (
    0 => 'array<string, array<array-key, mixed>|null|resource|scalar>',
    'categorize=' => 'bool',
  ),
  'get_defined_functions' => 
  array (
    0 => 'array{internal: list<callable-string>, user: list<callable-string>}',
    'exclude_disabled=' => 'bool',
  ),
  'get_defined_vars' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'get_extension_funcs' => 
  array (
    0 => 'false|list<callable-string>',
    'extension' => 'string',
  ),
  'get_headers' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'url' => 'string',
    'associative=' => 'bool',
    'context=' => 'null|resource',
  ),
  'get_html_translation_table' => 
  array (
    0 => 'array<array-key, mixed>',
    'table=' => 'int',
    'flags=' => 'int',
    'encoding=' => 'string',
  ),
  'get_include_path' => 
  array (
    0 => 'string',
  ),
  'get_included_files' => 
  array (
    0 => 'list<string>',
  ),
  'get_loaded_extensions' => 
  array (
    0 => 'list<string>',
    'zend_extensions=' => 'bool',
  ),
  'get_magic_quotes_gpc' => 
  array (
    0 => 'false|int',
  ),
  'get_magic_quotes_runtime' => 
  array (
    0 => 'false|int',
  ),
  'get_meta_tags' => 
  array (
    0 => 'array<array-key, mixed>',
    'filename' => 'string',
    'use_include_path=' => 'bool',
  ),
  'get_object_vars' => 
  array (
    0 => 'array<string, mixed>',
    'object' => 'object',
  ),
  'get_parent_class' => 
  array (
    0 => 'class-string|false',
    'object_or_class' => 'class-string|object',
  ),
  'get_required_files' => 
  array (
    0 => 'list<string>',
  ),
  'get_resource_id' => 
  array (
    0 => 'int',
    'resource' => 'resource',
  ),
  'get_resource_type' => 
  array (
    0 => 'string',
    'resource' => 'resource',
  ),
  'get_resources' => 
  array (
    0 => 'array<int, resource>',
    'type=' => 'null|string',
  ),
  'getallheaders' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'getcwd' => 
  array (
    0 => 'false|non-falsy-string',
  ),
  'getdate' => 
  array (
    0 => 'array{0: int, hours: int<0, 23>, mday: int<1, 31>, minutes: int<0, 59>, mon: int<1, 12>, month: \'April\'|\'August\'|\'December\'|\'February\'|\'January\'|\'July\'|\'June\'|\'March\'|\'May\'|\'November\'|\'October\'|\'September\', seconds: int<0, 59>, wday: int<0, 6>, weekday: \'Friday\'|\'Monday\'|\'Saturday\'|\'Sunday\'|\'Thursday\'|\'Tuesday\'|\'Wednesday\', yday: int<0, 365>, year: int}',
    'timestamp=' => 'int|null',
  ),
  'getenv' => 
  array (
    0 => 'false|string',
    'name' => 'string',
    'local_only=' => 'bool',
  ),
  'getenv\'1' => 
  array (
    0 => 'array<string, string>',
  ),
  'gethostbyaddr' => 
  array (
    0 => 'false|string',
    'ip' => 'string',
  ),
  'gethostbyname' => 
  array (
    0 => 'string',
    'hostname' => 'string',
  ),
  'gethostbynamel' => 
  array (
    0 => 'false|list<string>',
    'hostname' => 'string',
  ),
  'gethostname' => 
  array (
    0 => 'false|string',
  ),
  'getimagesize' => 
  array (
    0 => 'array{0: int, 1: int, 2: int, 3: string, bits?: int, channels?: 3|4, mime: string}|false',
    'filename' => 'string',
    '&w_image_info=' => 'array<array-key, mixed>',
  ),
  'getimagesizefromstring' => 
  array (
    0 => 'array{0: int, 1: int, 2: int, 3: string, bits?: int, channels?: 3|4, mime: string}|false',
    'string' => 'string',
    '&w_image_info=' => 'array<array-key, mixed>',
  ),
  'getlastmod' => 
  array (
    0 => 'false|int',
  ),
  'getmxrr' => 
  array (
    0 => 'bool',
    'hostname' => 'string',
    '&w_hosts' => 'array<int, string>',
    '&w_weights=' => 'array<int, int>',
  ),
  'getmygid' => 
  array (
    0 => 'false|int',
  ),
  'getmyinode' => 
  array (
    0 => 'false|int',
  ),
  'getmypid' => 
  array (
    0 => 'false|int',
  ),
  'getmyuid' => 
  array (
    0 => 'false|int',
  ),
  'getopt' => 
  array (
    0 => 'array<string, false|list<false|string>|string>|false',
    'short_options' => 'string',
    'long_options=' => 'array<array-key, mixed>',
    '&w_rest_index=' => 'int',
  ),
  'getprotobyname' => 
  array (
    0 => 'false|int',
    'protocol' => 'string',
  ),
  'getprotobynumber' => 
  array (
    0 => 'string',
    'protocol' => 'int',
  ),
  'getrandmax' => 
  array (
    0 => 'int<1, max>',
  ),
  'getrusage' => 
  array (
    0 => 'array<array-key, mixed>',
    'mode=' => 'int',
  ),
  'getservbyname' => 
  array (
    0 => 'false|int',
    'service' => 'string',
    'protocol' => 'string',
  ),
  'getservbyport' => 
  array (
    0 => 'false|string',
    'port' => 'int',
    'protocol' => 'string',
  ),
  'gettext' => 
  array (
    0 => 'string',
    'message' => 'string',
  ),
  'gettimeofday' => 
  array (
    0 => 'array<string, int>',
  ),
  'gettimeofday\'1' => 
  array (
    0 => 'float',
    'as_float=' => 'true',
  ),
  'gettype' => 
  array (
    0 => 'string',
    'value' => 'mixed',
  ),
  'glob' => 
  array (
    0 => 'false|list{0?: string, ...<non-empty-string>}',
    'pattern' => 'string',
    'flags=' => 'int<0, max>',
  ),
  'GlobIterator::__construct' => 
  array (
    0 => 'void',
    'pattern' => 'string',
    'flags=' => 'int',
  ),
  'GlobIterator::count' => 
  array (
    0 => 'int',
  ),
  'GlobIterator::current' => 
  array (
    0 => 'FilesystemIterator|SplFileInfo|string',
  ),
  'GlobIterator::getATime' => 
  array (
    0 => 'int',
  ),
  'GlobIterator::getBasename' => 
  array (
    0 => 'string',
    'suffix=' => 'string',
  ),
  'GlobIterator::getCTime' => 
  array (
    0 => 'int',
  ),
  'GlobIterator::getExtension' => 
  array (
    0 => 'string',
  ),
  'GlobIterator::getFileInfo' => 
  array (
    0 => 'SplFileInfo',
    'class=' => 'class-string|null',
  ),
  'GlobIterator::getFilename' => 
  array (
    0 => 'string',
  ),
  'GlobIterator::getFlags' => 
  array (
    0 => 'int',
  ),
  'GlobIterator::getGroup' => 
  array (
    0 => 'int',
  ),
  'GlobIterator::getInode' => 
  array (
    0 => 'int',
  ),
  'GlobIterator::getLinkTarget' => 
  array (
    0 => 'false|string',
  ),
  'GlobIterator::getMTime' => 
  array (
    0 => 'int',
  ),
  'GlobIterator::getOwner' => 
  array (
    0 => 'int',
  ),
  'GlobIterator::getPath' => 
  array (
    0 => 'string',
  ),
  'GlobIterator::getPathInfo' => 
  array (
    0 => 'SplFileInfo|null',
    'class=' => 'class-string|null',
  ),
  'GlobIterator::getPathname' => 
  array (
    0 => 'string',
  ),
  'GlobIterator::getPerms' => 
  array (
    0 => 'int',
  ),
  'GlobIterator::getRealPath' => 
  array (
    0 => 'false|non-falsy-string',
  ),
  'GlobIterator::getSize' => 
  array (
    0 => 'int',
  ),
  'GlobIterator::getType' => 
  array (
    0 => 'false|string',
  ),
  'GlobIterator::isDir' => 
  array (
    0 => 'bool',
  ),
  'GlobIterator::isDot' => 
  array (
    0 => 'bool',
  ),
  'GlobIterator::isExecutable' => 
  array (
    0 => 'bool',
  ),
  'GlobIterator::isFile' => 
  array (
    0 => 'bool',
  ),
  'GlobIterator::isLink' => 
  array (
    0 => 'bool',
  ),
  'GlobIterator::isReadable' => 
  array (
    0 => 'bool',
  ),
  'GlobIterator::isWritable' => 
  array (
    0 => 'bool',
  ),
  'GlobIterator::key' => 
  array (
    0 => 'string',
  ),
  'GlobIterator::next' => 
  array (
    0 => 'void',
  ),
  'GlobIterator::openFile' => 
  array (
    0 => 'SplFileObject',
    'mode=' => 'string',
    'useIncludePath=' => 'bool',
    'context=' => 'null|resource',
  ),
  'GlobIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'GlobIterator::seek' => 
  array (
    0 => 'void',
    'offset' => 'int',
  ),
  'GlobIterator::setFileClass' => 
  array (
    0 => 'void',
    'class=' => 'class-string',
  ),
  'GlobIterator::setFlags' => 
  array (
    0 => 'void',
    'flags' => 'int',
  ),
  'GlobIterator::setInfoClass' => 
  array (
    0 => 'void',
    'class=' => 'class-string',
  ),
  'GlobIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'Gmagick::__construct' => 
  array (
    0 => 'void',
    'filename=' => 'string',
  ),
  'Gmagick::addimage' => 
  array (
    0 => 'Gmagick',
    'gmagick' => 'gmagick',
  ),
  'Gmagick::addnoiseimage' => 
  array (
    0 => 'Gmagick',
    'noise' => 'int',
  ),
  'Gmagick::annotateimage' => 
  array (
    0 => 'Gmagick',
    'gmagickdraw' => 'gmagickdraw',
    'x' => 'float',
    'y' => 'float',
    'angle' => 'float',
    'text' => 'string',
  ),
  'Gmagick::blurimage' => 
  array (
    0 => 'Gmagick',
    'radius' => 'float',
    'sigma' => 'float',
    'channel=' => 'int',
  ),
  'Gmagick::borderimage' => 
  array (
    0 => 'Gmagick',
    'color' => 'gmagickpixel',
    'width' => 'int',
    'height' => 'int',
  ),
  'Gmagick::charcoalimage' => 
  array (
    0 => 'Gmagick',
    'radius' => 'float',
    'sigma' => 'float',
  ),
  'Gmagick::chopimage' => 
  array (
    0 => 'Gmagick',
    'width' => 'int',
    'height' => 'int',
    'x' => 'int',
    'y' => 'int',
  ),
  'Gmagick::clear' => 
  array (
    0 => 'Gmagick',
  ),
  'Gmagick::commentimage' => 
  array (
    0 => 'Gmagick',
    'comment' => 'string',
  ),
  'Gmagick::compositeimage' => 
  array (
    0 => 'Gmagick',
    'source' => 'gmagick',
    'compose' => 'int',
    'x' => 'int',
    'y' => 'int',
  ),
  'Gmagick::cropimage' => 
  array (
    0 => 'Gmagick',
    'width' => 'int',
    'height' => 'int',
    'x' => 'int',
    'y' => 'int',
  ),
  'Gmagick::cropthumbnailimage' => 
  array (
    0 => 'Gmagick',
    'width' => 'int',
    'height' => 'int',
  ),
  'Gmagick::current' => 
  array (
    0 => 'Gmagick',
  ),
  'Gmagick::cyclecolormapimage' => 
  array (
    0 => 'Gmagick',
    'displace' => 'int',
  ),
  'Gmagick::deconstructimages' => 
  array (
    0 => 'Gmagick',
  ),
  'Gmagick::despeckleimage' => 
  array (
    0 => 'Gmagick',
  ),
  'Gmagick::destroy' => 
  array (
    0 => 'bool',
  ),
  'Gmagick::drawimage' => 
  array (
    0 => 'Gmagick',
    'gmagickdraw' => 'gmagickdraw',
  ),
  'Gmagick::edgeimage' => 
  array (
    0 => 'Gmagick',
    'radius' => 'float',
  ),
  'Gmagick::embossimage' => 
  array (
    0 => 'Gmagick',
    'radius' => 'float',
    'sigma' => 'float',
  ),
  'Gmagick::enhanceimage' => 
  array (
    0 => 'Gmagick',
  ),
  'Gmagick::equalizeimage' => 
  array (
    0 => 'Gmagick',
  ),
  'Gmagick::flipimage' => 
  array (
    0 => 'Gmagick',
  ),
  'Gmagick::flopimage' => 
  array (
    0 => 'Gmagick',
  ),
  'Gmagick::frameimage' => 
  array (
    0 => 'Gmagick',
    'color' => 'gmagickpixel',
    'width' => 'int',
    'height' => 'int',
    'inner_bevel' => 'int',
    'outer_bevel' => 'int',
  ),
  'Gmagick::gammaimage' => 
  array (
    0 => 'Gmagick',
    'gamma' => 'float',
  ),
  'Gmagick::getcopyright' => 
  array (
    0 => 'string',
  ),
  'Gmagick::getfilename' => 
  array (
    0 => 'string',
  ),
  'Gmagick::getimagebackgroundcolor' => 
  array (
    0 => 'GmagickPixel',
  ),
  'Gmagick::getimageblueprimary' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Gmagick::getimagebordercolor' => 
  array (
    0 => 'GmagickPixel',
  ),
  'Gmagick::getimagechanneldepth' => 
  array (
    0 => 'int',
    'channel_type' => 'int',
  ),
  'Gmagick::getimagecolors' => 
  array (
    0 => 'int',
  ),
  'Gmagick::getimagecolorspace' => 
  array (
    0 => 'int',
  ),
  'Gmagick::getimagecompose' => 
  array (
    0 => 'int',
  ),
  'Gmagick::getimagedelay' => 
  array (
    0 => 'int',
  ),
  'Gmagick::getimagedepth' => 
  array (
    0 => 'int',
  ),
  'Gmagick::getimagedispose' => 
  array (
    0 => 'int',
  ),
  'Gmagick::getimageextrema' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Gmagick::getimagefilename' => 
  array (
    0 => 'string',
  ),
  'Gmagick::getimageformat' => 
  array (
    0 => 'string',
  ),
  'Gmagick::getimagegamma' => 
  array (
    0 => 'float',
  ),
  'Gmagick::getimagegreenprimary' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Gmagick::getimageheight' => 
  array (
    0 => 'int',
  ),
  'Gmagick::getimagehistogram' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Gmagick::getimageindex' => 
  array (
    0 => 'int',
  ),
  'Gmagick::getimageinterlacescheme' => 
  array (
    0 => 'int',
  ),
  'Gmagick::getimageiterations' => 
  array (
    0 => 'int',
  ),
  'Gmagick::getimagematte' => 
  array (
    0 => 'int',
  ),
  'Gmagick::getimagemattecolor' => 
  array (
    0 => 'GmagickPixel',
  ),
  'Gmagick::getimageprofile' => 
  array (
    0 => 'string',
    'name' => 'string',
  ),
  'Gmagick::getimageredprimary' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Gmagick::getimagerenderingintent' => 
  array (
    0 => 'int',
  ),
  'Gmagick::getimageresolution' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Gmagick::getimagescene' => 
  array (
    0 => 'int',
  ),
  'Gmagick::getimagesignature' => 
  array (
    0 => 'string',
  ),
  'Gmagick::getimagetype' => 
  array (
    0 => 'int',
  ),
  'Gmagick::getimageunits' => 
  array (
    0 => 'int',
  ),
  'Gmagick::getimagewhitepoint' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Gmagick::getimagewidth' => 
  array (
    0 => 'int',
  ),
  'Gmagick::getpackagename' => 
  array (
    0 => 'string',
  ),
  'Gmagick::getquantumdepth' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Gmagick::getreleasedate' => 
  array (
    0 => 'string',
  ),
  'Gmagick::getsamplingfactors' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Gmagick::getsize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Gmagick::getversion' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Gmagick::hasnextimage' => 
  array (
    0 => 'bool',
  ),
  'Gmagick::haspreviousimage' => 
  array (
    0 => 'bool',
  ),
  'Gmagick::implodeimage' => 
  array (
    0 => 'mixed',
    'radius' => 'float',
  ),
  'Gmagick::labelimage' => 
  array (
    0 => 'mixed',
    'label' => 'string',
  ),
  'Gmagick::levelimage' => 
  array (
    0 => 'mixed',
    'blackpoint' => 'float',
    'gamma' => 'float',
    'whitepoint' => 'float',
    'channel=' => 'int',
  ),
  'Gmagick::magnifyimage' => 
  array (
    0 => 'mixed',
  ),
  'Gmagick::mapimage' => 
  array (
    0 => 'Gmagick',
    'gmagick' => 'gmagick',
    'dither' => 'bool',
  ),
  'Gmagick::medianfilterimage' => 
  array (
    0 => 'void',
    'radius' => 'float',
  ),
  'Gmagick::minifyimage' => 
  array (
    0 => 'Gmagick',
  ),
  'Gmagick::modulateimage' => 
  array (
    0 => 'Gmagick',
    'brightness' => 'float',
    'saturation' => 'float',
    'hue' => 'float',
  ),
  'Gmagick::motionblurimage' => 
  array (
    0 => 'Gmagick',
    'radius' => 'float',
    'sigma' => 'float',
    'angle' => 'float',
  ),
  'Gmagick::newimage' => 
  array (
    0 => 'Gmagick',
    'width' => 'int',
    'height' => 'int',
    'background' => 'string',
    'format=' => 'string',
  ),
  'Gmagick::nextimage' => 
  array (
    0 => 'bool',
  ),
  'Gmagick::normalizeimage' => 
  array (
    0 => 'Gmagick',
    'channel=' => 'int',
  ),
  'Gmagick::oilpaintimage' => 
  array (
    0 => 'Gmagick',
    'radius' => 'float',
  ),
  'Gmagick::previousimage' => 
  array (
    0 => 'bool',
  ),
  'Gmagick::profileimage' => 
  array (
    0 => 'Gmagick',
    'name' => 'string',
    'profile' => 'string',
  ),
  'Gmagick::quantizeimage' => 
  array (
    0 => 'Gmagick',
    'numcolors' => 'int',
    'colorspace' => 'int',
    'treedepth' => 'int',
    'dither' => 'bool',
    'measureerror' => 'bool',
  ),
  'Gmagick::quantizeimages' => 
  array (
    0 => 'Gmagick',
    'numcolors' => 'int',
    'colorspace' => 'int',
    'treedepth' => 'int',
    'dither' => 'bool',
    'measureerror' => 'bool',
  ),
  'Gmagick::queryfontmetrics' => 
  array (
    0 => 'array<array-key, mixed>',
    'draw' => 'gmagickdraw',
    'text' => 'string',
  ),
  'Gmagick::queryfonts' => 
  array (
    0 => 'array<array-key, mixed>',
    'pattern=' => 'string',
  ),
  'Gmagick::queryformats' => 
  array (
    0 => 'array<array-key, mixed>',
    'pattern=' => 'string',
  ),
  'Gmagick::radialblurimage' => 
  array (
    0 => 'Gmagick',
    'angle' => 'float',
    'channel=' => 'int',
  ),
  'Gmagick::raiseimage' => 
  array (
    0 => 'Gmagick',
    'width' => 'int',
    'height' => 'int',
    'x' => 'int',
    'y' => 'int',
    'raise' => 'bool',
  ),
  'Gmagick::read' => 
  array (
    0 => 'Gmagick',
    'filename' => 'string',
  ),
  'Gmagick::readimage' => 
  array (
    0 => 'Gmagick',
    'filename' => 'string',
  ),
  'Gmagick::readimageblob' => 
  array (
    0 => 'Gmagick',
    'imagecontents' => 'string',
    'filename=' => 'string',
  ),
  'Gmagick::readimagefile' => 
  array (
    0 => 'Gmagick',
    'fp' => 'resource',
    'filename=' => 'string',
  ),
  'Gmagick::reducenoiseimage' => 
  array (
    0 => 'Gmagick',
    'radius' => 'float',
  ),
  'Gmagick::removeimage' => 
  array (
    0 => 'Gmagick',
  ),
  'Gmagick::removeimageprofile' => 
  array (
    0 => 'string',
    'name' => 'string',
  ),
  'Gmagick::resampleimage' => 
  array (
    0 => 'Gmagick',
    'xresolution' => 'float',
    'yresolution' => 'float',
    'filter' => 'int',
    'blur' => 'float',
  ),
  'Gmagick::resizeimage' => 
  array (
    0 => 'Gmagick',
    'width' => 'int',
    'height' => 'int',
    'filter' => 'int',
    'blur' => 'float',
    'fit=' => 'bool',
  ),
  'Gmagick::rollimage' => 
  array (
    0 => 'Gmagick',
    'x' => 'int',
    'y' => 'int',
  ),
  'Gmagick::rotateimage' => 
  array (
    0 => 'Gmagick',
    'color' => 'mixed',
    'degrees' => 'float',
  ),
  'Gmagick::scaleimage' => 
  array (
    0 => 'Gmagick',
    'width' => 'int',
    'height' => 'int',
    'fit=' => 'bool',
  ),
  'Gmagick::separateimagechannel' => 
  array (
    0 => 'Gmagick',
    'channel' => 'int',
  ),
  'Gmagick::setCompressionQuality' => 
  array (
    0 => 'Gmagick',
    'quality' => 'int',
  ),
  'Gmagick::setfilename' => 
  array (
    0 => 'Gmagick',
    'filename' => 'string',
  ),
  'Gmagick::setimagebackgroundcolor' => 
  array (
    0 => 'Gmagick',
    'color' => 'gmagickpixel',
  ),
  'Gmagick::setimageblueprimary' => 
  array (
    0 => 'Gmagick',
    'x' => 'float',
    'y' => 'float',
  ),
  'Gmagick::setimagebordercolor' => 
  array (
    0 => 'Gmagick',
    'color' => 'gmagickpixel',
  ),
  'Gmagick::setimagechanneldepth' => 
  array (
    0 => 'Gmagick',
    'channel' => 'int',
    'depth' => 'int',
  ),
  'Gmagick::setimagecolorspace' => 
  array (
    0 => 'Gmagick',
    'colorspace' => 'int',
  ),
  'Gmagick::setimagecompose' => 
  array (
    0 => 'Gmagick',
    'composite' => 'int',
  ),
  'Gmagick::setimagedelay' => 
  array (
    0 => 'Gmagick',
    'delay' => 'int',
  ),
  'Gmagick::setimagedepth' => 
  array (
    0 => 'Gmagick',
    'depth' => 'int',
  ),
  'Gmagick::setimagedispose' => 
  array (
    0 => 'Gmagick',
    'disposetype' => 'int',
  ),
  'Gmagick::setimagefilename' => 
  array (
    0 => 'Gmagick',
    'filename' => 'string',
  ),
  'Gmagick::setimageformat' => 
  array (
    0 => 'Gmagick',
    'imageformat' => 'string',
  ),
  'Gmagick::setimagegamma' => 
  array (
    0 => 'Gmagick',
    'gamma' => 'float',
  ),
  'Gmagick::setimagegreenprimary' => 
  array (
    0 => 'Gmagick',
    'x' => 'float',
    'y' => 'float',
  ),
  'Gmagick::setimageindex' => 
  array (
    0 => 'Gmagick',
    'index' => 'int',
  ),
  'Gmagick::setimageinterlacescheme' => 
  array (
    0 => 'Gmagick',
    'interlace' => 'int',
  ),
  'Gmagick::setimageiterations' => 
  array (
    0 => 'Gmagick',
    'iterations' => 'int',
  ),
  'Gmagick::setimageprofile' => 
  array (
    0 => 'Gmagick',
    'name' => 'string',
    'profile' => 'string',
  ),
  'Gmagick::setimageredprimary' => 
  array (
    0 => 'Gmagick',
    'x' => 'float',
    'y' => 'float',
  ),
  'Gmagick::setimagerenderingintent' => 
  array (
    0 => 'Gmagick',
    'rendering_intent' => 'int',
  ),
  'Gmagick::setimageresolution' => 
  array (
    0 => 'Gmagick',
    'xresolution' => 'float',
    'yresolution' => 'float',
  ),
  'Gmagick::setimagescene' => 
  array (
    0 => 'Gmagick',
    'scene' => 'int',
  ),
  'Gmagick::setimagetype' => 
  array (
    0 => 'Gmagick',
    'imgtype' => 'int',
  ),
  'Gmagick::setimageunits' => 
  array (
    0 => 'Gmagick',
    'resolution' => 'int',
  ),
  'Gmagick::setimagewhitepoint' => 
  array (
    0 => 'Gmagick',
    'x' => 'float',
    'y' => 'float',
  ),
  'Gmagick::setsamplingfactors' => 
  array (
    0 => 'Gmagick',
    'factors' => 'array<array-key, mixed>',
  ),
  'Gmagick::setsize' => 
  array (
    0 => 'Gmagick',
    'columns' => 'int',
    'rows' => 'int',
  ),
  'Gmagick::shearimage' => 
  array (
    0 => 'Gmagick',
    'color' => 'mixed',
    'xshear' => 'float',
    'yshear' => 'float',
  ),
  'Gmagick::solarizeimage' => 
  array (
    0 => 'Gmagick',
    'threshold' => 'int',
  ),
  'Gmagick::spreadimage' => 
  array (
    0 => 'Gmagick',
    'radius' => 'float',
  ),
  'Gmagick::stripimage' => 
  array (
    0 => 'Gmagick',
  ),
  'Gmagick::swirlimage' => 
  array (
    0 => 'Gmagick',
    'degrees' => 'float',
  ),
  'Gmagick::thumbnailimage' => 
  array (
    0 => 'Gmagick',
    'width' => 'int',
    'height' => 'int',
    'fit=' => 'bool',
  ),
  'Gmagick::trimimage' => 
  array (
    0 => 'Gmagick',
    'fuzz' => 'float',
  ),
  'Gmagick::write' => 
  array (
    0 => 'Gmagick',
    'filename' => 'string',
  ),
  'Gmagick::writeimage' => 
  array (
    0 => 'Gmagick',
    'filename' => 'string',
    'all_frames=' => 'bool',
  ),
  'GmagickDraw::annotate' => 
  array (
    0 => 'GmagickDraw',
    'x' => 'float',
    'y' => 'float',
    'text' => 'string',
  ),
  'GmagickDraw::arc' => 
  array (
    0 => 'GmagickDraw',
    'sx' => 'float',
    'sy' => 'float',
    'ex' => 'float',
    'ey' => 'float',
    'sd' => 'float',
    'ed' => 'float',
  ),
  'GmagickDraw::bezier' => 
  array (
    0 => 'GmagickDraw',
    'coordinate_array' => 'array<array-key, mixed>',
  ),
  'GmagickDraw::ellipse' => 
  array (
    0 => 'GmagickDraw',
    'ox' => 'float',
    'oy' => 'float',
    'rx' => 'float',
    'ry' => 'float',
    'start' => 'float',
    'end' => 'float',
  ),
  'GmagickDraw::getfillcolor' => 
  array (
    0 => 'GmagickPixel',
  ),
  'GmagickDraw::getfillopacity' => 
  array (
    0 => 'float',
  ),
  'GmagickDraw::getfont' => 
  array (
    0 => 'false|string',
  ),
  'GmagickDraw::getfontsize' => 
  array (
    0 => 'float',
  ),
  'GmagickDraw::getfontstyle' => 
  array (
    0 => 'int',
  ),
  'GmagickDraw::getfontweight' => 
  array (
    0 => 'int',
  ),
  'GmagickDraw::getstrokecolor' => 
  array (
    0 => 'GmagickPixel',
  ),
  'GmagickDraw::getstrokeopacity' => 
  array (
    0 => 'float',
  ),
  'GmagickDraw::getstrokewidth' => 
  array (
    0 => 'float',
  ),
  'GmagickDraw::gettextdecoration' => 
  array (
    0 => 'int',
  ),
  'GmagickDraw::gettextencoding' => 
  array (
    0 => 'false|string',
  ),
  'GmagickDraw::line' => 
  array (
    0 => 'GmagickDraw',
    'sx' => 'float',
    'sy' => 'float',
    'ex' => 'float',
    'ey' => 'float',
  ),
  'GmagickDraw::point' => 
  array (
    0 => 'GmagickDraw',
    'x' => 'float',
    'y' => 'float',
  ),
  'GmagickDraw::polygon' => 
  array (
    0 => 'GmagickDraw',
    'coordinates' => 'array<array-key, mixed>',
  ),
  'GmagickDraw::polyline' => 
  array (
    0 => 'GmagickDraw',
    'coordinate_array' => 'array<array-key, mixed>',
  ),
  'GmagickDraw::rectangle' => 
  array (
    0 => 'GmagickDraw',
    'x1' => 'float',
    'y1' => 'float',
    'x2' => 'float',
    'y2' => 'float',
  ),
  'GmagickDraw::rotate' => 
  array (
    0 => 'GmagickDraw',
    'degrees' => 'float',
  ),
  'GmagickDraw::roundrectangle' => 
  array (
    0 => 'GmagickDraw',
    'x1' => 'float',
    'y1' => 'float',
    'x2' => 'float',
    'y2' => 'float',
    'rx' => 'float',
    'ry' => 'float',
  ),
  'GmagickDraw::scale' => 
  array (
    0 => 'GmagickDraw',
    'x' => 'float',
    'y' => 'float',
  ),
  'GmagickDraw::setfillcolor' => 
  array (
    0 => 'GmagickDraw',
    'color' => 'string',
  ),
  'GmagickDraw::setfillopacity' => 
  array (
    0 => 'GmagickDraw',
    'fill_opacity' => 'float',
  ),
  'GmagickDraw::setfont' => 
  array (
    0 => 'GmagickDraw',
    'font' => 'string',
  ),
  'GmagickDraw::setfontsize' => 
  array (
    0 => 'GmagickDraw',
    'pointsize' => 'float',
  ),
  'GmagickDraw::setfontstyle' => 
  array (
    0 => 'GmagickDraw',
    'style' => 'int',
  ),
  'GmagickDraw::setfontweight' => 
  array (
    0 => 'GmagickDraw',
    'weight' => 'int',
  ),
  'GmagickDraw::setstrokecolor' => 
  array (
    0 => 'GmagickDraw',
    'color' => 'gmagickpixel',
  ),
  'GmagickDraw::setstrokeopacity' => 
  array (
    0 => 'GmagickDraw',
    'stroke_opacity' => 'float',
  ),
  'GmagickDraw::setstrokewidth' => 
  array (
    0 => 'GmagickDraw',
    'width' => 'float',
  ),
  'GmagickDraw::settextdecoration' => 
  array (
    0 => 'GmagickDraw',
    'decoration' => 'int',
  ),
  'GmagickDraw::settextencoding' => 
  array (
    0 => 'GmagickDraw',
    'encoding' => 'string',
  ),
  'GmagickPixel::__construct' => 
  array (
    0 => 'void',
    'color=' => 'string',
  ),
  'GmagickPixel::getcolor' => 
  array (
    0 => 'mixed',
    'as_array=' => 'bool',
    'normalize_array=' => 'bool',
  ),
  'GmagickPixel::getcolorcount' => 
  array (
    0 => 'int',
  ),
  'GmagickPixel::getcolorvalue' => 
  array (
    0 => 'float',
    'color' => 'int',
  ),
  'GmagickPixel::setcolor' => 
  array (
    0 => 'GmagickPixel',
    'color' => 'string',
  ),
  'GmagickPixel::setcolorvalue' => 
  array (
    0 => 'GmagickPixel',
    'color' => 'int',
    'value' => 'float',
  ),
  'gmdate' => 
  array (
    0 => 'string',
    'format' => 'string',
    'timestamp=' => 'int|null',
  ),
  'gmmktime' => 
  array (
    0 => 'false|int',
    'hour' => 'int',
    'minute=' => 'int|null',
    'second=' => 'int|null',
    'month=' => 'int|null',
    'day=' => 'int|null',
    'year=' => 'int|null',
  ),
  'GMP::__serialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'GMP::__unserialize' => 
  array (
    0 => 'void',
    'data' => 'array<array-key, mixed>',
  ),
  'gmp_abs' => 
  array (
    0 => 'GMP',
    'num' => 'GMP|int|string',
  ),
  'gmp_add' => 
  array (
    0 => 'GMP',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_and' => 
  array (
    0 => 'GMP',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_binomial' => 
  array (
    0 => 'GMP',
    'n' => 'GMP|int|string',
    'k' => 'int',
  ),
  'gmp_clrbit' => 
  array (
    0 => 'void',
    'num' => 'GMP',
    'index' => 'int',
  ),
  'gmp_cmp' => 
  array (
    0 => 'int',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_com' => 
  array (
    0 => 'GMP',
    'num' => 'GMP|int|string',
  ),
  'gmp_div' => 
  array (
    0 => 'GMP',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
    'rounding_mode=' => 'int',
  ),
  'gmp_div_q' => 
  array (
    0 => 'GMP',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
    'rounding_mode=' => 'int',
  ),
  'gmp_div_qr' => 
  array (
    0 => 'array{0: GMP, 1: GMP}',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
    'rounding_mode=' => 'int',
  ),
  'gmp_div_r' => 
  array (
    0 => 'GMP',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
    'rounding_mode=' => 'int',
  ),
  'gmp_divexact' => 
  array (
    0 => 'GMP',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_export' => 
  array (
    0 => 'string',
    'num' => 'GMP|int|string',
    'word_size=' => 'int',
    'flags=' => 'int',
  ),
  'gmp_fact' => 
  array (
    0 => 'GMP',
    'num' => 'int',
  ),
  'gmp_gcd' => 
  array (
    0 => 'GMP',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_gcdext' => 
  array (
    0 => 'array<string, GMP>',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_hamdist' => 
  array (
    0 => 'int',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_import' => 
  array (
    0 => 'GMP',
    'data' => 'string',
    'word_size=' => 'int',
    'flags=' => 'int',
  ),
  'gmp_init' => 
  array (
    0 => 'GMP',
    'num' => 'int|string',
    'base=' => 'int',
  ),
  'gmp_intval' => 
  array (
    0 => 'int',
    'num' => 'GMP|int|string',
  ),
  'gmp_invert' => 
  array (
    0 => 'GMP|false',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_jacobi' => 
  array (
    0 => 'int',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_kronecker' => 
  array (
    0 => 'int',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_lcm' => 
  array (
    0 => 'GMP',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_legendre' => 
  array (
    0 => 'int',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_mod' => 
  array (
    0 => 'GMP',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_mul' => 
  array (
    0 => 'GMP',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_neg' => 
  array (
    0 => 'GMP',
    'num' => 'GMP|int|string',
  ),
  'gmp_nextprime' => 
  array (
    0 => 'GMP',
    'num' => 'GMP|int|string',
  ),
  'gmp_or' => 
  array (
    0 => 'GMP',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_perfect_power' => 
  array (
    0 => 'bool',
    'num' => 'GMP|int|string',
  ),
  'gmp_perfect_square' => 
  array (
    0 => 'bool',
    'num' => 'GMP|int|string',
  ),
  'gmp_popcount' => 
  array (
    0 => 'int',
    'num' => 'GMP|int|string',
  ),
  'gmp_pow' => 
  array (
    0 => 'GMP',
    'num' => 'GMP|int|string',
    'exponent' => 'int',
  ),
  'gmp_powm' => 
  array (
    0 => 'GMP',
    'num' => 'GMP|int|string',
    'exponent' => 'GMP|int|string',
    'modulus' => 'GMP|int|string',
  ),
  'gmp_prob_prime' => 
  array (
    0 => 'int',
    'num' => 'GMP|int|string',
    'repetitions=' => 'int',
  ),
  'gmp_random_bits' => 
  array (
    0 => 'GMP',
    'bits' => 'int',
  ),
  'gmp_random_range' => 
  array (
    0 => 'GMP',
    'min' => 'GMP|int|string',
    'max' => 'GMP|int|string',
  ),
  'gmp_random_seed' => 
  array (
    0 => 'void',
    'seed' => 'GMP|int|string',
  ),
  'gmp_root' => 
  array (
    0 => 'GMP',
    'num' => 'GMP|int|string',
    'nth' => 'int',
  ),
  'gmp_rootrem' => 
  array (
    0 => 'array{0: GMP, 1: GMP}',
    'num' => 'GMP|int|string',
    'nth' => 'int',
  ),
  'gmp_scan0' => 
  array (
    0 => 'int',
    'num1' => 'GMP|int|string',
    'start' => 'int',
  ),
  'gmp_scan1' => 
  array (
    0 => 'int',
    'num1' => 'GMP|int|string',
    'start' => 'int',
  ),
  'gmp_setbit' => 
  array (
    0 => 'void',
    'num' => 'GMP',
    'index' => 'int',
    'value=' => 'bool',
  ),
  'gmp_sign' => 
  array (
    0 => 'int',
    'num' => 'GMP|int|string',
  ),
  'gmp_sqrt' => 
  array (
    0 => 'GMP',
    'num' => 'GMP|int|string',
  ),
  'gmp_sqrtrem' => 
  array (
    0 => 'array{0: GMP, 1: GMP}',
    'num' => 'GMP|int|string',
  ),
  'gmp_strval' => 
  array (
    0 => 'numeric-string',
    'num' => 'GMP|int|string',
    'base=' => 'int',
  ),
  'gmp_sub' => 
  array (
    0 => 'GMP',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_testbit' => 
  array (
    0 => 'bool',
    'num' => 'GMP|int|string',
    'index' => 'int',
  ),
  'gmp_xor' => 
  array (
    0 => 'GMP',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmstrftime' => 
  array (
    0 => 'false|string',
    'format' => 'string',
    'timestamp=' => 'int|null',
  ),
  'gnupg::adddecryptkey' => 
  array (
    0 => 'bool',
    'fingerprint' => 'string',
    'passphrase' => 'string',
  ),
  'gnupg::addencryptkey' => 
  array (
    0 => 'bool',
    'fingerprint' => 'string',
  ),
  'gnupg::addsignkey' => 
  array (
    0 => 'bool',
    'fingerprint' => 'string',
    'passphrase=' => 'string',
  ),
  'gnupg::cleardecryptkeys' => 
  array (
    0 => 'bool',
  ),
  'gnupg::clearencryptkeys' => 
  array (
    0 => 'bool',
  ),
  'gnupg::clearsignkeys' => 
  array (
    0 => 'bool',
  ),
  'gnupg::decrypt' => 
  array (
    0 => 'false|string',
    'text' => 'string',
  ),
  'gnupg::decryptverify' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'text' => 'string',
    '&plaintext' => 'string',
  ),
  'gnupg::encrypt' => 
  array (
    0 => 'false|string',
    'plaintext' => 'string',
  ),
  'gnupg::encryptsign' => 
  array (
    0 => 'false|string',
    'plaintext' => 'string',
  ),
  'gnupg::export' => 
  array (
    0 => 'false|string',
    'fingerprint' => 'string',
  ),
  'gnupg::geterror' => 
  array (
    0 => 'false|string',
  ),
  'gnupg::getprotocol' => 
  array (
    0 => 'int',
  ),
  'gnupg::import' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'keydata' => 'string',
  ),
  'gnupg::keyinfo' => 
  array (
    0 => 'array<array-key, mixed>',
    'pattern' => 'string',
  ),
  'gnupg::setarmor' => 
  array (
    0 => 'bool',
    'armor' => 'int',
  ),
  'gnupg::seterrormode' => 
  array (
    0 => 'void',
    'errormode' => 'int',
  ),
  'gnupg::setsignmode' => 
  array (
    0 => 'bool',
    'signmode' => 'int',
  ),
  'gnupg::sign' => 
  array (
    0 => 'false|string',
    'plaintext' => 'string',
  ),
  'gnupg::verify' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'signed_text' => 'string',
    'signature' => 'string',
    '&plaintext=' => 'string',
  ),
  'gnupg_adddecryptkey' => 
  array (
    0 => 'bool',
    'identifier' => 'resource',
    'fingerprint' => 'string',
    'passphrase' => 'string',
  ),
  'gnupg_addencryptkey' => 
  array (
    0 => 'bool',
    'identifier' => 'resource',
    'fingerprint' => 'string',
  ),
  'gnupg_addsignkey' => 
  array (
    0 => 'bool',
    'identifier' => 'resource',
    'fingerprint' => 'string',
    'passphrase=' => 'string',
  ),
  'gnupg_cleardecryptkeys' => 
  array (
    0 => 'bool',
    'identifier' => 'resource',
  ),
  'gnupg_clearencryptkeys' => 
  array (
    0 => 'bool',
    'identifier' => 'resource',
  ),
  'gnupg_clearsignkeys' => 
  array (
    0 => 'bool',
    'identifier' => 'resource',
  ),
  'gnupg_decrypt' => 
  array (
    0 => 'string',
    'identifier' => 'resource',
    'text' => 'string',
  ),
  'gnupg_decryptverify' => 
  array (
    0 => 'array<array-key, mixed>',
    'identifier' => 'resource',
    'text' => 'string',
    'plaintext' => 'string',
  ),
  'gnupg_encrypt' => 
  array (
    0 => 'string',
    'identifier' => 'resource',
    'plaintext' => 'string',
  ),
  'gnupg_encryptsign' => 
  array (
    0 => 'string',
    'identifier' => 'resource',
    'plaintext' => 'string',
  ),
  'gnupg_export' => 
  array (
    0 => 'string',
    'identifier' => 'resource',
    'fingerprint' => 'string',
  ),
  'gnupg_geterror' => 
  array (
    0 => 'string',
    'identifier' => 'resource',
  ),
  'gnupg_getprotocol' => 
  array (
    0 => 'int',
    'identifier' => 'resource',
  ),
  'gnupg_import' => 
  array (
    0 => 'array<array-key, mixed>',
    'identifier' => 'resource',
    'keydata' => 'string',
  ),
  'gnupg_init' => 
  array (
    0 => 'resource',
  ),
  'gnupg_keyinfo' => 
  array (
    0 => 'array<array-key, mixed>',
    'identifier' => 'resource',
    'pattern' => 'string',
  ),
  'gnupg_setarmor' => 
  array (
    0 => 'bool',
    'identifier' => 'resource',
    'armor' => 'int',
  ),
  'gnupg_seterrormode' => 
  array (
    0 => 'void',
    'identifier' => 'resource',
    'errormode' => 'int',
  ),
  'gnupg_setsignmode' => 
  array (
    0 => 'bool',
    'identifier' => 'resource',
    'signmode' => 'int',
  ),
  'gnupg_sign' => 
  array (
    0 => 'string',
    'identifier' => 'resource',
    'plaintext' => 'string',
  ),
  'gnupg_verify' => 
  array (
    0 => 'array<array-key, mixed>',
    'identifier' => 'resource',
    'signed_text' => 'string',
    'signature' => 'string',
    'plaintext=' => 'string',
  ),
  'gopher_parsedir' => 
  array (
    0 => 'array<array-key, mixed>',
    'dirent' => 'string',
  ),
  'grapheme_extract' => 
  array (
    0 => 'false|string',
    'haystack' => 'string',
    'size' => 'int',
    'type=' => 'int',
    'offset=' => 'int',
    '&w_next=' => 'int',
  ),
  'grapheme_stripos' => 
  array (
    0 => 'false|int',
    'haystack' => 'string',
    'needle' => 'string',
    'offset=' => 'int',
  ),
  'grapheme_stristr' => 
  array (
    0 => 'false|string',
    'haystack' => 'string',
    'needle' => 'string',
    'beforeNeedle=' => 'bool',
  ),
  'grapheme_strlen' => 
  array (
    0 => 'false|int<0, max>|null',
    'string' => 'string',
  ),
  'grapheme_strpos' => 
  array (
    0 => 'false|int',
    'haystack' => 'string',
    'needle' => 'string',
    'offset=' => 'int',
  ),
  'grapheme_strripos' => 
  array (
    0 => 'false|int',
    'haystack' => 'string',
    'needle' => 'string',
    'offset=' => 'int',
  ),
  'grapheme_strrpos' => 
  array (
    0 => 'false|int',
    'haystack' => 'string',
    'needle' => 'string',
    'offset=' => 'int',
  ),
  'grapheme_strstr' => 
  array (
    0 => 'false|string',
    'haystack' => 'string',
    'needle' => 'string',
    'beforeNeedle=' => 'bool',
  ),
  'grapheme_substr' => 
  array (
    0 => 'false|string',
    'string' => 'string',
    'offset' => 'int',
    'length=' => 'int|null',
  ),
  'gregoriantojd' => 
  array (
    0 => 'int',
    'month' => 'int',
    'day' => 'int',
    'year' => 'int',
  ),
  'gridObj::set' => 
  array (
    0 => 'int',
    'property_name' => 'string',
    'new_value' => 'mixed',
  ),
  'Grpc\\Call::__construct' => 
  array (
    0 => 'void',
    'channel' => 'Grpc\\Channel',
    'method' => 'string',
    'absolute_deadline' => 'Grpc\\Timeval',
    'host_override=' => 'mixed',
  ),
  'Grpc\\Call::cancel' => 
  array (
    0 => 'mixed',
  ),
  'Grpc\\Call::getPeer' => 
  array (
    0 => 'string',
  ),
  'Grpc\\Call::setCredentials' => 
  array (
    0 => 'int',
    'creds_obj' => 'Grpc\\CallCredentials',
  ),
  'Grpc\\Call::startBatch' => 
  array (
    0 => 'object',
    'batch' => 'array<array-key, mixed>',
  ),
  'Grpc\\CallCredentials::createComposite' => 
  array (
    0 => 'Grpc\\CallCredentials',
    'cred1' => 'Grpc\\CallCredentials',
    'cred2' => 'Grpc\\CallCredentials',
  ),
  'Grpc\\CallCredentials::createFromPlugin' => 
  array (
    0 => 'Grpc\\CallCredentials',
    'callback' => 'Closure',
  ),
  'Grpc\\Channel::__construct' => 
  array (
    0 => 'void',
    'target' => 'string',
    'args=' => 'array<array-key, mixed>',
  ),
  'Grpc\\Channel::close' => 
  array (
    0 => 'mixed',
  ),
  'Grpc\\Channel::getConnectivityState' => 
  array (
    0 => 'int',
    'try_to_connect=' => 'bool',
  ),
  'Grpc\\Channel::getTarget' => 
  array (
    0 => 'string',
  ),
  'Grpc\\Channel::watchConnectivityState' => 
  array (
    0 => 'bool',
    'last_state' => 'int',
    'deadline_obj' => 'Grpc\\Timeval',
  ),
  'Grpc\\ChannelCredentials::createComposite' => 
  array (
    0 => 'Grpc\\ChannelCredentials',
    'cred1' => 'Grpc\\ChannelCredentials',
    'cred2' => 'Grpc\\CallCredentials',
  ),
  'Grpc\\ChannelCredentials::createDefault' => 
  array (
    0 => 'Grpc\\ChannelCredentials',
  ),
  'Grpc\\ChannelCredentials::createInsecure' => 
  array (
    0 => 'null',
  ),
  'Grpc\\ChannelCredentials::createSsl' => 
  array (
    0 => 'Grpc\\ChannelCredentials',
    'pem_root_certs' => 'string',
    'pem_private_key=' => 'string',
    'pem_cert_chain=' => 'string',
  ),
  'Grpc\\ChannelCredentials::setDefaultRootsPem' => 
  array (
    0 => 'mixed',
    'pem_roots' => 'string',
  ),
  'Grpc\\Server::__construct' => 
  array (
    0 => 'void',
    'args' => 'array<array-key, mixed>',
  ),
  'Grpc\\Server::addHttp2Port' => 
  array (
    0 => 'bool',
    'addr' => 'string',
  ),
  'Grpc\\Server::addSecureHttp2Port' => 
  array (
    0 => 'bool',
    'addr' => 'string',
    'creds_obj' => 'Grpc\\ServerCredentials',
  ),
  'Grpc\\Server::requestCall' => 
  array (
    0 => 'mixed',
    'tag_new' => 'int',
    'tag_cancel' => 'int',
  ),
  'Grpc\\Server::start' => 
  array (
    0 => 'mixed',
  ),
  'Grpc\\ServerCredentials::createSsl' => 
  array (
    0 => 'object',
    'pem_root_certs' => 'string',
    'pem_private_key' => 'string',
    'pem_cert_chain' => 'string',
  ),
  'Grpc\\Timeval::__construct' => 
  array (
    0 => 'void',
    'usec' => 'int',
  ),
  'Grpc\\Timeval::add' => 
  array (
    0 => 'Grpc\\Timeval',
    'other' => 'Grpc\\Timeval',
  ),
  'Grpc\\Timeval::compare' => 
  array (
    0 => 'int',
    'a' => 'Grpc\\Timeval',
    'b' => 'Grpc\\Timeval',
  ),
  'Grpc\\Timeval::infFuture' => 
  array (
    0 => 'Grpc\\Timeval',
  ),
  'Grpc\\Timeval::infPast' => 
  array (
    0 => 'Grpc\\Timeval',
  ),
  'Grpc\\Timeval::now' => 
  array (
    0 => 'Grpc\\Timeval',
  ),
  'Grpc\\Timeval::similar' => 
  array (
    0 => 'bool',
    'a' => 'Grpc\\Timeval',
    'b' => 'Grpc\\Timeval',
    'threshold' => 'Grpc\\Timeval',
  ),
  'Grpc\\Timeval::sleepUntil' => 
  array (
    0 => 'mixed',
  ),
  'Grpc\\Timeval::subtract' => 
  array (
    0 => 'Grpc\\Timeval',
    'other' => 'Grpc\\Timeval',
  ),
  'Grpc\\Timeval::zero' => 
  array (
    0 => 'Grpc\\Timeval',
  ),
  'gupnp_context_get_host_ip' => 
  array (
    0 => 'string',
    'context' => 'resource',
  ),
  'gupnp_context_get_port' => 
  array (
    0 => 'int',
    'context' => 'resource',
  ),
  'gupnp_context_get_subscription_timeout' => 
  array (
    0 => 'int',
    'context' => 'resource',
  ),
  'gupnp_context_host_path' => 
  array (
    0 => 'bool',
    'context' => 'resource',
    'local_path' => 'string',
    'server_path' => 'string',
  ),
  'gupnp_context_new' => 
  array (
    0 => 'resource',
    'host_ip=' => 'string',
    'port=' => 'int',
  ),
  'gupnp_context_set_subscription_timeout' => 
  array (
    0 => 'void',
    'context' => 'resource',
    'timeout' => 'int',
  ),
  'gupnp_context_timeout_add' => 
  array (
    0 => 'bool',
    'context' => 'resource',
    'timeout' => 'int',
    'callback' => 'mixed',
    'arg=' => 'mixed',
  ),
  'gupnp_context_unhost_path' => 
  array (
    0 => 'bool',
    'context' => 'resource',
    'server_path' => 'string',
  ),
  'gupnp_control_point_browse_start' => 
  array (
    0 => 'bool',
    'cpoint' => 'resource',
  ),
  'gupnp_control_point_browse_stop' => 
  array (
    0 => 'bool',
    'cpoint' => 'resource',
  ),
  'gupnp_control_point_callback_set' => 
  array (
    0 => 'bool',
    'cpoint' => 'resource',
    'signal' => 'int',
    'callback' => 'mixed',
    'arg=' => 'mixed',
  ),
  'gupnp_control_point_new' => 
  array (
    0 => 'resource',
    'context' => 'resource',
    'target' => 'string',
  ),
  'gupnp_device_action_callback_set' => 
  array (
    0 => 'bool',
    'root_device' => 'resource',
    'signal' => 'int',
    'action_name' => 'string',
    'callback' => 'mixed',
    'arg=' => 'mixed',
  ),
  'gupnp_device_info_get' => 
  array (
    0 => 'array<array-key, mixed>',
    'root_device' => 'resource',
  ),
  'gupnp_device_info_get_service' => 
  array (
    0 => 'resource',
    'root_device' => 'resource',
    'type' => 'string',
  ),
  'gupnp_root_device_get_available' => 
  array (
    0 => 'bool',
    'root_device' => 'resource',
  ),
  'gupnp_root_device_get_relative_location' => 
  array (
    0 => 'string',
    'root_device' => 'resource',
  ),
  'gupnp_root_device_new' => 
  array (
    0 => 'resource',
    'context' => 'resource',
    'location' => 'string',
    'description_dir' => 'string',
  ),
  'gupnp_root_device_set_available' => 
  array (
    0 => 'bool',
    'root_device' => 'resource',
    'available' => 'bool',
  ),
  'gupnp_root_device_start' => 
  array (
    0 => 'bool',
    'root_device' => 'resource',
  ),
  'gupnp_root_device_stop' => 
  array (
    0 => 'bool',
    'root_device' => 'resource',
  ),
  'gupnp_service_action_get' => 
  array (
    0 => 'mixed',
    'action' => 'resource',
    'name' => 'string',
    'type' => 'int',
  ),
  'gupnp_service_action_return' => 
  array (
    0 => 'bool',
    'action' => 'resource',
  ),
  'gupnp_service_action_return_error' => 
  array (
    0 => 'bool',
    'action' => 'resource',
    'error_code' => 'int',
    'error_description=' => 'string',
  ),
  'gupnp_service_action_set' => 
  array (
    0 => 'bool',
    'action' => 'resource',
    'name' => 'string',
    'type' => 'int',
    'value' => 'mixed',
  ),
  'gupnp_service_freeze_notify' => 
  array (
    0 => 'bool',
    'service' => 'resource',
  ),
  'gupnp_service_info_get' => 
  array (
    0 => 'array<array-key, mixed>',
    'proxy' => 'resource',
  ),
  'gupnp_service_info_get_introspection' => 
  array (
    0 => 'mixed',
    'proxy' => 'resource',
    'callback=' => 'mixed',
    'arg=' => 'mixed',
  ),
  'gupnp_service_introspection_get_state_variable' => 
  array (
    0 => 'array<array-key, mixed>',
    'introspection' => 'resource',
    'variable_name' => 'string',
  ),
  'gupnp_service_notify' => 
  array (
    0 => 'bool',
    'service' => 'resource',
    'name' => 'string',
    'type' => 'int',
    'value' => 'mixed',
  ),
  'gupnp_service_proxy_action_get' => 
  array (
    0 => 'mixed',
    'proxy' => 'resource',
    'action' => 'string',
    'name' => 'string',
    'type' => 'int',
  ),
  'gupnp_service_proxy_action_set' => 
  array (
    0 => 'bool',
    'proxy' => 'resource',
    'action' => 'string',
    'name' => 'string',
    'value' => 'mixed',
    'type' => 'int',
  ),
  'gupnp_service_proxy_add_notify' => 
  array (
    0 => 'bool',
    'proxy' => 'resource',
    'value' => 'string',
    'type' => 'int',
    'callback' => 'mixed',
    'arg=' => 'mixed',
  ),
  'gupnp_service_proxy_callback_set' => 
  array (
    0 => 'bool',
    'proxy' => 'resource',
    'signal' => 'int',
    'callback' => 'mixed',
    'arg=' => 'mixed',
  ),
  'gupnp_service_proxy_get_subscribed' => 
  array (
    0 => 'bool',
    'proxy' => 'resource',
  ),
  'gupnp_service_proxy_remove_notify' => 
  array (
    0 => 'bool',
    'proxy' => 'resource',
    'value' => 'string',
  ),
  'gupnp_service_proxy_send_action' => 
  array (
    0 => 'array<array-key, mixed>',
    'proxy' => 'resource',
    'action' => 'string',
    'in_params' => 'array<array-key, mixed>',
    'out_params' => 'array<array-key, mixed>',
  ),
  'gupnp_service_proxy_set_subscribed' => 
  array (
    0 => 'bool',
    'proxy' => 'resource',
    'subscribed' => 'bool',
  ),
  'gupnp_service_thaw_notify' => 
  array (
    0 => 'bool',
    'service' => 'resource',
  ),
  'gzclose' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
  ),
  'gzcompress' => 
  array (
    0 => 'false|string',
    'data' => 'string',
    'level=' => 'int',
    'encoding=' => 'int',
  ),
  'gzdecode' => 
  array (
    0 => 'false|string',
    'data' => 'string',
    'max_length=' => 'int',
  ),
  'gzdeflate' => 
  array (
    0 => 'false|string',
    'data' => 'string',
    'level=' => 'int',
    'encoding=' => 'int',
  ),
  'gzencode' => 
  array (
    0 => 'false|string',
    'data' => 'string',
    'level=' => 'int',
    'encoding=' => 'int',
  ),
  'gzeof' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
  ),
  'gzfile' => 
  array (
    0 => 'false|list<string>',
    'filename' => 'string',
    'use_include_path=' => 'int',
  ),
  'gzgetc' => 
  array (
    0 => 'false|string',
    'stream' => 'resource',
  ),
  'gzgets' => 
  array (
    0 => 'false|string',
    'stream' => 'resource',
    'length=' => 'int|null',
  ),
  'gzinflate' => 
  array (
    0 => 'false|string',
    'data' => 'string',
    'max_length=' => 'int',
  ),
  'gzopen' => 
  array (
    0 => 'false|resource',
    'filename' => 'string',
    'mode' => 'string',
    'use_include_path=' => 'int',
  ),
  'gzpassthru' => 
  array (
    0 => 'int',
    'stream' => 'resource',
  ),
  'gzputs' => 
  array (
    0 => 'false|int',
    'stream' => 'resource',
    'data' => 'string',
    'length=' => 'int|null',
  ),
  'gzread' => 
  array (
    0 => 'false|string',
    'stream' => 'resource',
    'length' => 'int',
  ),
  'gzrewind' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
  ),
  'gzseek' => 
  array (
    0 => 'int',
    'stream' => 'resource',
    'offset' => 'int',
    'whence=' => 'int',
  ),
  'gztell' => 
  array (
    0 => 'false|int',
    'stream' => 'resource',
  ),
  'gzuncompress' => 
  array (
    0 => 'false|string',
    'data' => 'string',
    'max_length=' => 'int',
  ),
  'gzwrite' => 
  array (
    0 => 'false|int',
    'stream' => 'resource',
    'data' => 'string',
    'length=' => 'int|null',
  ),
  'HaruAnnotation::setBorderStyle' => 
  array (
    0 => 'bool',
    'width' => 'float',
    'dash_on' => 'int',
    'dash_off' => 'int',
  ),
  'HaruAnnotation::setHighlightMode' => 
  array (
    0 => 'bool',
    'mode' => 'int',
  ),
  'HaruAnnotation::setIcon' => 
  array (
    0 => 'bool',
    'icon' => 'int',
  ),
  'HaruAnnotation::setOpened' => 
  array (
    0 => 'bool',
    'opened' => 'bool',
  ),
  'HaruDestination::setFit' => 
  array (
    0 => 'bool',
  ),
  'HaruDestination::setFitB' => 
  array (
    0 => 'bool',
  ),
  'HaruDestination::setFitBH' => 
  array (
    0 => 'bool',
    'top' => 'float',
  ),
  'HaruDestination::setFitBV' => 
  array (
    0 => 'bool',
    'left' => 'float',
  ),
  'HaruDestination::setFitH' => 
  array (
    0 => 'bool',
    'top' => 'float',
  ),
  'HaruDestination::setFitR' => 
  array (
    0 => 'bool',
    'left' => 'float',
    'bottom' => 'float',
    'right' => 'float',
    'top' => 'float',
  ),
  'HaruDestination::setFitV' => 
  array (
    0 => 'bool',
    'left' => 'float',
  ),
  'HaruDestination::setXYZ' => 
  array (
    0 => 'bool',
    'left' => 'float',
    'top' => 'float',
    'zoom' => 'float',
  ),
  'HaruDoc::__construct' => 
  array (
    0 => 'void',
  ),
  'HaruDoc::addPage' => 
  array (
    0 => 'object',
  ),
  'HaruDoc::addPageLabel' => 
  array (
    0 => 'bool',
    'first_page' => 'int',
    'style' => 'int',
    'first_num' => 'int',
    'prefix=' => 'string',
  ),
  'HaruDoc::createOutline' => 
  array (
    0 => 'object',
    'title' => 'string',
    'parent_outline=' => 'object',
    'encoder=' => 'object',
  ),
  'HaruDoc::getCurrentEncoder' => 
  array (
    0 => 'object',
  ),
  'HaruDoc::getCurrentPage' => 
  array (
    0 => 'object',
  ),
  'HaruDoc::getEncoder' => 
  array (
    0 => 'object',
    'encoding' => 'string',
  ),
  'HaruDoc::getFont' => 
  array (
    0 => 'object',
    'fontname' => 'string',
    'encoding=' => 'string',
  ),
  'HaruDoc::getInfoAttr' => 
  array (
    0 => 'string',
    'type' => 'int',
  ),
  'HaruDoc::getPageLayout' => 
  array (
    0 => 'int',
  ),
  'HaruDoc::getPageMode' => 
  array (
    0 => 'int',
  ),
  'HaruDoc::getStreamSize' => 
  array (
    0 => 'int',
  ),
  'HaruDoc::insertPage' => 
  array (
    0 => 'object',
    'page' => 'object',
  ),
  'HaruDoc::loadJPEG' => 
  array (
    0 => 'object',
    'filename' => 'string',
  ),
  'HaruDoc::loadPNG' => 
  array (
    0 => 'object',
    'filename' => 'string',
    'deferred=' => 'bool',
  ),
  'HaruDoc::loadRaw' => 
  array (
    0 => 'object',
    'filename' => 'string',
    'width' => 'int',
    'height' => 'int',
    'color_space' => 'int',
  ),
  'HaruDoc::loadTTC' => 
  array (
    0 => 'string',
    'fontfile' => 'string',
    'index' => 'int',
    'embed=' => 'bool',
  ),
  'HaruDoc::loadTTF' => 
  array (
    0 => 'string',
    'fontfile' => 'string',
    'embed=' => 'bool',
  ),
  'HaruDoc::loadType1' => 
  array (
    0 => 'string',
    'afmfile' => 'string',
    'pfmfile=' => 'string',
  ),
  'HaruDoc::output' => 
  array (
    0 => 'bool',
  ),
  'HaruDoc::readFromStream' => 
  array (
    0 => 'string',
    'bytes' => 'int',
  ),
  'HaruDoc::resetError' => 
  array (
    0 => 'bool',
  ),
  'HaruDoc::resetStream' => 
  array (
    0 => 'bool',
  ),
  'HaruDoc::save' => 
  array (
    0 => 'bool',
    'file' => 'string',
  ),
  'HaruDoc::saveToStream' => 
  array (
    0 => 'bool',
  ),
  'HaruDoc::setCompressionMode' => 
  array (
    0 => 'bool',
    'mode' => 'int',
  ),
  'HaruDoc::setCurrentEncoder' => 
  array (
    0 => 'bool',
    'encoding' => 'string',
  ),
  'HaruDoc::setEncryptionMode' => 
  array (
    0 => 'bool',
    'mode' => 'int',
    'key_len=' => 'int',
  ),
  'HaruDoc::setInfoAttr' => 
  array (
    0 => 'bool',
    'type' => 'int',
    'info' => 'string',
  ),
  'HaruDoc::setInfoDateAttr' => 
  array (
    0 => 'bool',
    'type' => 'int',
    'year' => 'int',
    'month' => 'int',
    'day' => 'int',
    'hour' => 'int',
    'min' => 'int',
    'sec' => 'int',
    'ind' => 'string',
    'off_hour' => 'int',
    'off_min' => 'int',
  ),
  'HaruDoc::setOpenAction' => 
  array (
    0 => 'bool',
    'destination' => 'object',
  ),
  'HaruDoc::setPageLayout' => 
  array (
    0 => 'bool',
    'layout' => 'int',
  ),
  'HaruDoc::setPageMode' => 
  array (
    0 => 'bool',
    'mode' => 'int',
  ),
  'HaruDoc::setPagesConfiguration' => 
  array (
    0 => 'bool',
    'page_per_pages' => 'int',
  ),
  'HaruDoc::setPassword' => 
  array (
    0 => 'bool',
    'owner_password' => 'string',
    'user_password' => 'string',
  ),
  'HaruDoc::setPermission' => 
  array (
    0 => 'bool',
    'permission' => 'int',
  ),
  'HaruDoc::useCNSEncodings' => 
  array (
    0 => 'bool',
  ),
  'HaruDoc::useCNSFonts' => 
  array (
    0 => 'bool',
  ),
  'HaruDoc::useCNTEncodings' => 
  array (
    0 => 'bool',
  ),
  'HaruDoc::useCNTFonts' => 
  array (
    0 => 'bool',
  ),
  'HaruDoc::useJPEncodings' => 
  array (
    0 => 'bool',
  ),
  'HaruDoc::useJPFonts' => 
  array (
    0 => 'bool',
  ),
  'HaruDoc::useKREncodings' => 
  array (
    0 => 'bool',
  ),
  'HaruDoc::useKRFonts' => 
  array (
    0 => 'bool',
  ),
  'HaruEncoder::getByteType' => 
  array (
    0 => 'int',
    'text' => 'string',
    'index' => 'int',
  ),
  'HaruEncoder::getType' => 
  array (
    0 => 'int',
  ),
  'HaruEncoder::getUnicode' => 
  array (
    0 => 'int',
    'character' => 'int',
  ),
  'HaruEncoder::getWritingMode' => 
  array (
    0 => 'int',
  ),
  'HaruFont::getAscent' => 
  array (
    0 => 'int',
  ),
  'HaruFont::getCapHeight' => 
  array (
    0 => 'int',
  ),
  'HaruFont::getDescent' => 
  array (
    0 => 'int',
  ),
  'HaruFont::getEncodingName' => 
  array (
    0 => 'string',
  ),
  'HaruFont::getFontName' => 
  array (
    0 => 'string',
  ),
  'HaruFont::getTextWidth' => 
  array (
    0 => 'array<array-key, mixed>',
    'text' => 'string',
  ),
  'HaruFont::getUnicodeWidth' => 
  array (
    0 => 'int',
    'character' => 'int',
  ),
  'HaruFont::getXHeight' => 
  array (
    0 => 'int',
  ),
  'HaruFont::measureText' => 
  array (
    0 => 'int',
    'text' => 'string',
    'width' => 'float',
    'font_size' => 'float',
    'char_space' => 'float',
    'word_space' => 'float',
    'word_wrap=' => 'bool',
  ),
  'HaruImage::getBitsPerComponent' => 
  array (
    0 => 'int',
  ),
  'HaruImage::getColorSpace' => 
  array (
    0 => 'string',
  ),
  'HaruImage::getHeight' => 
  array (
    0 => 'int',
  ),
  'HaruImage::getSize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'HaruImage::getWidth' => 
  array (
    0 => 'int',
  ),
  'HaruImage::setColorMask' => 
  array (
    0 => 'bool',
    'rmin' => 'int',
    'rmax' => 'int',
    'gmin' => 'int',
    'gmax' => 'int',
    'bmin' => 'int',
    'bmax' => 'int',
  ),
  'HaruImage::setMaskImage' => 
  array (
    0 => 'bool',
    'mask_image' => 'object',
  ),
  'HaruOutline::setDestination' => 
  array (
    0 => 'bool',
    'destination' => 'object',
  ),
  'HaruOutline::setOpened' => 
  array (
    0 => 'bool',
    'opened' => 'bool',
  ),
  'HaruPage::arc' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
    'ray' => 'float',
    'ang1' => 'float',
    'ang2' => 'float',
  ),
  'HaruPage::beginText' => 
  array (
    0 => 'bool',
  ),
  'HaruPage::circle' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
    'ray' => 'float',
  ),
  'HaruPage::closePath' => 
  array (
    0 => 'bool',
  ),
  'HaruPage::concat' => 
  array (
    0 => 'bool',
    'a' => 'float',
    'b' => 'float',
    'c' => 'float',
    'd' => 'float',
    'x' => 'float',
    'y' => 'float',
  ),
  'HaruPage::createDestination' => 
  array (
    0 => 'object',
  ),
  'HaruPage::createLinkAnnotation' => 
  array (
    0 => 'object',
    'rectangle' => 'array<array-key, mixed>',
    'destination' => 'object',
  ),
  'HaruPage::createTextAnnotation' => 
  array (
    0 => 'object',
    'rectangle' => 'array<array-key, mixed>',
    'text' => 'string',
    'encoder=' => 'object',
  ),
  'HaruPage::createURLAnnotation' => 
  array (
    0 => 'object',
    'rectangle' => 'array<array-key, mixed>',
    'url' => 'string',
  ),
  'HaruPage::curveTo' => 
  array (
    0 => 'bool',
    'x1' => 'float',
    'y1' => 'float',
    'x2' => 'float',
    'y2' => 'float',
    'x3' => 'float',
    'y3' => 'float',
  ),
  'HaruPage::curveTo2' => 
  array (
    0 => 'bool',
    'x2' => 'float',
    'y2' => 'float',
    'x3' => 'float',
    'y3' => 'float',
  ),
  'HaruPage::curveTo3' => 
  array (
    0 => 'bool',
    'x1' => 'float',
    'y1' => 'float',
    'x3' => 'float',
    'y3' => 'float',
  ),
  'HaruPage::drawImage' => 
  array (
    0 => 'bool',
    'image' => 'object',
    'x' => 'float',
    'y' => 'float',
    'width' => 'float',
    'height' => 'float',
  ),
  'HaruPage::ellipse' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
    'xray' => 'float',
    'yray' => 'float',
  ),
  'HaruPage::endPath' => 
  array (
    0 => 'bool',
  ),
  'HaruPage::endText' => 
  array (
    0 => 'bool',
  ),
  'HaruPage::eofill' => 
  array (
    0 => 'bool',
  ),
  'HaruPage::eoFillStroke' => 
  array (
    0 => 'bool',
    'close_path=' => 'bool',
  ),
  'HaruPage::fill' => 
  array (
    0 => 'bool',
  ),
  'HaruPage::fillStroke' => 
  array (
    0 => 'bool',
    'close_path=' => 'bool',
  ),
  'HaruPage::getCharSpace' => 
  array (
    0 => 'float',
  ),
  'HaruPage::getCMYKFill' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'HaruPage::getCMYKStroke' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'HaruPage::getCurrentFont' => 
  array (
    0 => 'object',
  ),
  'HaruPage::getCurrentFontSize' => 
  array (
    0 => 'float',
  ),
  'HaruPage::getCurrentPos' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'HaruPage::getCurrentTextPos' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'HaruPage::getDash' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'HaruPage::getFillingColorSpace' => 
  array (
    0 => 'int',
  ),
  'HaruPage::getFlatness' => 
  array (
    0 => 'float',
  ),
  'HaruPage::getGMode' => 
  array (
    0 => 'int',
  ),
  'HaruPage::getGrayFill' => 
  array (
    0 => 'float',
  ),
  'HaruPage::getGrayStroke' => 
  array (
    0 => 'float',
  ),
  'HaruPage::getHeight' => 
  array (
    0 => 'float',
  ),
  'HaruPage::getHorizontalScaling' => 
  array (
    0 => 'float',
  ),
  'HaruPage::getLineCap' => 
  array (
    0 => 'int',
  ),
  'HaruPage::getLineJoin' => 
  array (
    0 => 'int',
  ),
  'HaruPage::getLineWidth' => 
  array (
    0 => 'float',
  ),
  'HaruPage::getMiterLimit' => 
  array (
    0 => 'float',
  ),
  'HaruPage::getRGBFill' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'HaruPage::getRGBStroke' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'HaruPage::getStrokingColorSpace' => 
  array (
    0 => 'int',
  ),
  'HaruPage::getTextLeading' => 
  array (
    0 => 'float',
  ),
  'HaruPage::getTextMatrix' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'HaruPage::getTextRenderingMode' => 
  array (
    0 => 'int',
  ),
  'HaruPage::getTextRise' => 
  array (
    0 => 'float',
  ),
  'HaruPage::getTextWidth' => 
  array (
    0 => 'float',
    'text' => 'string',
  ),
  'HaruPage::getTransMatrix' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'HaruPage::getWidth' => 
  array (
    0 => 'float',
  ),
  'HaruPage::getWordSpace' => 
  array (
    0 => 'float',
  ),
  'HaruPage::lineTo' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'HaruPage::measureText' => 
  array (
    0 => 'int',
    'text' => 'string',
    'width' => 'float',
    'wordwrap=' => 'bool',
  ),
  'HaruPage::moveTextPos' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
    'set_leading=' => 'bool',
  ),
  'HaruPage::moveTo' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'HaruPage::moveToNextLine' => 
  array (
    0 => 'bool',
  ),
  'HaruPage::rectangle' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
    'width' => 'float',
    'height' => 'float',
  ),
  'HaruPage::setCharSpace' => 
  array (
    0 => 'bool',
    'char_space' => 'float',
  ),
  'HaruPage::setCMYKFill' => 
  array (
    0 => 'bool',
    'c' => 'float',
    'm' => 'float',
    'y' => 'float',
    'k' => 'float',
  ),
  'HaruPage::setCMYKStroke' => 
  array (
    0 => 'bool',
    'c' => 'float',
    'm' => 'float',
    'y' => 'float',
    'k' => 'float',
  ),
  'HaruPage::setDash' => 
  array (
    0 => 'bool',
    'pattern' => 'array<array-key, mixed>',
    'phase' => 'int',
  ),
  'HaruPage::setFlatness' => 
  array (
    0 => 'bool',
    'flatness' => 'float',
  ),
  'HaruPage::setFontAndSize' => 
  array (
    0 => 'bool',
    'font' => 'object',
    'size' => 'float',
  ),
  'HaruPage::setGrayFill' => 
  array (
    0 => 'bool',
    'value' => 'float',
  ),
  'HaruPage::setGrayStroke' => 
  array (
    0 => 'bool',
    'value' => 'float',
  ),
  'HaruPage::setHeight' => 
  array (
    0 => 'bool',
    'height' => 'float',
  ),
  'HaruPage::setHorizontalScaling' => 
  array (
    0 => 'bool',
    'scaling' => 'float',
  ),
  'HaruPage::setLineCap' => 
  array (
    0 => 'bool',
    'cap' => 'int',
  ),
  'HaruPage::setLineJoin' => 
  array (
    0 => 'bool',
    'join' => 'int',
  ),
  'HaruPage::setLineWidth' => 
  array (
    0 => 'bool',
    'width' => 'float',
  ),
  'HaruPage::setMiterLimit' => 
  array (
    0 => 'bool',
    'limit' => 'float',
  ),
  'HaruPage::setRGBFill' => 
  array (
    0 => 'bool',
    'r' => 'float',
    'g' => 'float',
    'b' => 'float',
  ),
  'HaruPage::setRGBStroke' => 
  array (
    0 => 'bool',
    'r' => 'float',
    'g' => 'float',
    'b' => 'float',
  ),
  'HaruPage::setRotate' => 
  array (
    0 => 'bool',
    'angle' => 'int',
  ),
  'HaruPage::setSize' => 
  array (
    0 => 'bool',
    'size' => 'int',
    'direction' => 'int',
  ),
  'HaruPage::setSlideShow' => 
  array (
    0 => 'bool',
    'type' => 'int',
    'disp_time' => 'float',
    'trans_time' => 'float',
  ),
  'HaruPage::setTextLeading' => 
  array (
    0 => 'bool',
    'text_leading' => 'float',
  ),
  'HaruPage::setTextMatrix' => 
  array (
    0 => 'bool',
    'a' => 'float',
    'b' => 'float',
    'c' => 'float',
    'd' => 'float',
    'x' => 'float',
    'y' => 'float',
  ),
  'HaruPage::setTextRenderingMode' => 
  array (
    0 => 'bool',
    'mode' => 'int',
  ),
  'HaruPage::setTextRise' => 
  array (
    0 => 'bool',
    'rise' => 'float',
  ),
  'HaruPage::setWidth' => 
  array (
    0 => 'bool',
    'width' => 'float',
  ),
  'HaruPage::setWordSpace' => 
  array (
    0 => 'bool',
    'word_space' => 'float',
  ),
  'HaruPage::showText' => 
  array (
    0 => 'bool',
    'text' => 'string',
  ),
  'HaruPage::showTextNextLine' => 
  array (
    0 => 'bool',
    'text' => 'string',
    'word_space=' => 'float',
    'char_space=' => 'float',
  ),
  'HaruPage::stroke' => 
  array (
    0 => 'bool',
    'close_path=' => 'bool',
  ),
  'HaruPage::textOut' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
    'text' => 'string',
  ),
  'HaruPage::textRect' => 
  array (
    0 => 'bool',
    'left' => 'float',
    'top' => 'float',
    'right' => 'float',
    'bottom' => 'float',
    'text' => 'string',
    'align=' => 'int',
  ),
  'hash' => 
  array (
    0 => 'non-empty-string',
    'algo' => 'string',
    'data' => 'string',
    'binary=' => 'bool',
    'options=' => 'array{seed: scalar}',
  ),
  'hash_algos' => 
  array (
    0 => 'list<string>',
  ),
  'hash_copy' => 
  array (
    0 => 'HashContext',
    'context' => 'HashContext',
  ),
  'hash_equals' => 
  array (
    0 => 'bool',
    'known_string' => 'string',
    'user_string' => 'string',
  ),
  'hash_file' => 
  array (
    0 => 'false|non-empty-string',
    'algo' => 'string',
    'filename' => 'string',
    'binary=' => 'bool',
    'options=' => 'array{seed: scalar}',
  ),
  'hash_final' => 
  array (
    0 => 'non-empty-string',
    'context' => 'HashContext',
    'binary=' => 'bool',
  ),
  'hash_hkdf' => 
  array (
    0 => 'non-empty-string',
    'algo' => 'string',
    'key' => 'string',
    'length=' => 'int',
    'info=' => 'string',
    'salt=' => 'string',
  ),
  'hash_hmac' => 
  array (
    0 => 'non-empty-string',
    'algo' => 'string',
    'data' => 'string',
    'key' => 'string',
    'binary=' => 'bool',
  ),
  'hash_hmac_algos' => 
  array (
    0 => 'list<string>',
  ),
  'hash_hmac_file' => 
  array (
    0 => 'non-empty-string',
    'algo' => 'string',
    'filename' => 'string',
    'key' => 'string',
    'binary=' => 'bool',
  ),
  'hash_init' => 
  array (
    0 => 'HashContext',
    'algo' => 'string',
    'flags=' => 'int',
    'key=' => 'string',
    'options=' => 'array{seed: scalar}',
  ),
  'hash_pbkdf2' => 
  array (
    0 => 'non-empty-string',
    'algo' => 'string',
    'password' => 'string',
    'salt' => 'string',
    'iterations' => 'int',
    'length=' => 'int',
    'binary=' => 'bool',
    'options=' => 'array<array-key, mixed>',
  ),
  'hash_update' => 
  array (
    0 => 'bool',
    'context' => 'HashContext',
    'data' => 'string',
  ),
  'hash_update_file' => 
  array (
    0 => 'bool',
    'context' => 'HashContext',
    'filename' => 'string',
    'stream_context=' => 'null|resource',
  ),
  'hash_update_stream' => 
  array (
    0 => 'int',
    'context' => 'HashContext',
    'stream' => 'resource',
    'length=' => 'int',
  ),
  'hashTableObj::clear' => 
  array (
    0 => 'void',
  ),
  'hashTableObj::get' => 
  array (
    0 => 'string',
    'key' => 'string',
  ),
  'hashTableObj::nextkey' => 
  array (
    0 => 'string',
    'previousKey' => 'string',
  ),
  'hashTableObj::remove' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'hashTableObj::set' => 
  array (
    0 => 'int',
    'key' => 'string',
    'value' => 'string',
  ),
  'header' => 
  array (
    0 => 'void',
    'header' => 'string',
    'replace=' => 'bool',
    'response_code=' => 'int',
  ),
  'header_register_callback' => 
  array (
    0 => 'bool',
    'callback' => 'callable():void',
  ),
  'header_remove' => 
  array (
    0 => 'void',
    'name=' => 'null|string',
  ),
  'headers_list' => 
  array (
    0 => 'list<string>',
  ),
  'headers_sent' => 
  array (
    0 => 'bool',
    '&w_filename=' => 'string',
    '&w_line=' => 'int',
  ),
  'hebrev' => 
  array (
    0 => 'string',
    'string' => 'string',
    'max_chars_per_line=' => 'int',
  ),
  'hebrevc' => 
  array (
    0 => 'string',
    'string' => 'string',
    'max_chars_per_line=' => 'int',
  ),
  'hex2bin' => 
  array (
    0 => 'false|string',
    'string' => 'string',
  ),
  'hexdec' => 
  array (
    0 => 'float|int',
    'hex_string' => 'string',
  ),
  'highlight_file' => 
  array (
    0 => 'bool|string',
    'filename' => 'string',
    'return=' => 'bool',
  ),
  'highlight_string' => 
  array (
    0 => 'bool|string',
    'string' => 'string',
    'return=' => 'bool',
  ),
  'hrtime' => 
  array (
    0 => 'array{0: int, 1: int}|false',
    'as_number=' => 'false',
  ),
  'hrtime\'1' => 
  array (
    0 => 'false|float|int',
    'as_number=' => 'true',
  ),
  'HRTime\\PerformanceCounter::getElapsedTicks' => 
  array (
    0 => 'int',
  ),
  'HRTime\\PerformanceCounter::getFrequency' => 
  array (
    0 => 'int',
  ),
  'HRTime\\PerformanceCounter::getLastElapsedTicks' => 
  array (
    0 => 'int',
  ),
  'HRTime\\PerformanceCounter::getTicks' => 
  array (
    0 => 'int',
  ),
  'HRTime\\PerformanceCounter::getTicksSince' => 
  array (
    0 => 'int',
    'start' => 'int',
  ),
  'HRTime\\PerformanceCounter::isRunning' => 
  array (
    0 => 'bool',
  ),
  'HRTime\\PerformanceCounter::start' => 
  array (
    0 => 'void',
  ),
  'HRTime\\PerformanceCounter::stop' => 
  array (
    0 => 'void',
  ),
  'HRTime\\StopWatch::getElapsedTicks' => 
  array (
    0 => 'int',
  ),
  'HRTime\\StopWatch::getElapsedTime' => 
  array (
    0 => 'float',
    'unit=' => 'int',
  ),
  'HRTime\\StopWatch::getLastElapsedTicks' => 
  array (
    0 => 'int',
  ),
  'HRTime\\StopWatch::getLastElapsedTime' => 
  array (
    0 => 'float',
    'unit=' => 'int',
  ),
  'HRTime\\StopWatch::isRunning' => 
  array (
    0 => 'bool',
  ),
  'HRTime\\StopWatch::start' => 
  array (
    0 => 'void',
  ),
  'HRTime\\StopWatch::stop' => 
  array (
    0 => 'void',
  ),
  'html_entity_decode' => 
  array (
    0 => 'string',
    'string' => 'string',
    'flags=' => 'int',
    'encoding=' => 'null|string',
  ),
  'htmlentities' => 
  array (
    0 => 'string',
    'string' => 'string',
    'flags=' => 'int',
    'encoding=' => 'null|string',
    'double_encode=' => 'bool',
  ),
  'htmlspecialchars' => 
  array (
    0 => 'string',
    'string' => 'string',
    'flags=' => 'int',
    'encoding=' => 'null|string',
    'double_encode=' => 'bool',
  ),
  'htmlspecialchars_decode' => 
  array (
    0 => 'string',
    'string' => 'string',
    'flags=' => 'int',
  ),
  'http\\Client::__construct' => 
  array (
    0 => 'void',
    'driver=' => 'string',
    'persistent_handle_id=' => 'string',
  ),
  'http\\Client::addCookies' => 
  array (
    0 => 'http\\Client',
    'cookies=' => 'array<array-key, mixed>|null',
  ),
  'http\\Client::addSslOptions' => 
  array (
    0 => 'http\\Client',
    'ssl_options=' => 'array<array-key, mixed>|null',
  ),
  'http\\Client::attach' => 
  array (
    0 => 'void',
    'observer' => 'SplObserver',
  ),
  'http\\Client::configure' => 
  array (
    0 => 'http\\Client',
    'settings' => 'array<array-key, mixed>',
  ),
  'http\\Client::count' => 
  array (
    0 => 'int',
  ),
  'http\\Client::dequeue' => 
  array (
    0 => 'http\\Client',
    'request' => 'http\\Client\\Request',
  ),
  'http\\Client::detach' => 
  array (
    0 => 'void',
    'observer' => 'SplObserver',
  ),
  'http\\Client::enableEvents' => 
  array (
    0 => 'http\\Client',
    'enable=' => 'mixed',
  ),
  'http\\Client::enablePipelining' => 
  array (
    0 => 'http\\Client',
    'enable=' => 'mixed',
  ),
  'http\\Client::enqueue' => 
  array (
    0 => 'http\\Client',
    'request' => 'http\\Client\\Request',
    'callable=' => 'mixed',
  ),
  'http\\Client::getAvailableConfiguration' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\Client::getAvailableDrivers' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\Client::getAvailableOptions' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\Client::getCookies' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\Client::getHistory' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\Client::getObservers' => 
  array (
    0 => 'SplObjectStorage',
  ),
  'http\\Client::getOptions' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\Client::getProgressInfo' => 
  array (
    0 => 'null|object',
    'request' => 'http\\Client\\Request',
  ),
  'http\\Client::getResponse' => 
  array (
    0 => 'http\\Client\\Response|null',
    'request=' => 'http\\Client\\Request|null',
  ),
  'http\\Client::getSslOptions' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\Client::getTransferInfo' => 
  array (
    0 => 'object',
    'request' => 'http\\Client\\Request',
  ),
  'http\\Client::notify' => 
  array (
    0 => 'void',
    'request=' => 'http\\Client\\Request|null',
  ),
  'http\\Client::once' => 
  array (
    0 => 'bool',
  ),
  'http\\Client::requeue' => 
  array (
    0 => 'http\\Client',
    'request' => 'http\\Client\\Request',
    'callable=' => 'mixed',
  ),
  'http\\Client::reset' => 
  array (
    0 => 'http\\Client',
  ),
  'http\\Client::send' => 
  array (
    0 => 'http\\Client',
  ),
  'http\\Client::setCookies' => 
  array (
    0 => 'http\\Client',
    'cookies=' => 'array<array-key, mixed>|null',
  ),
  'http\\Client::setDebug' => 
  array (
    0 => 'http\\Client',
    'callback' => 'callable',
  ),
  'http\\Client::setOptions' => 
  array (
    0 => 'http\\Client',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'http\\Client::setSslOptions' => 
  array (
    0 => 'http\\Client',
    'ssl_option=' => 'array<array-key, mixed>|null',
  ),
  'http\\Client::wait' => 
  array (
    0 => 'bool',
    'timeout=' => 'mixed',
  ),
  'http\\Client\\Curl\\User::init' => 
  array (
    0 => 'mixed',
    'run' => 'callable',
  ),
  'http\\Client\\Curl\\User::once' => 
  array (
    0 => 'mixed',
  ),
  'http\\Client\\Curl\\User::send' => 
  array (
    0 => 'mixed',
  ),
  'http\\Client\\Curl\\User::socket' => 
  array (
    0 => 'mixed',
    'socket' => 'resource',
    'action' => 'int',
  ),
  'http\\Client\\Curl\\User::timer' => 
  array (
    0 => 'mixed',
    'timeout_ms' => 'int',
  ),
  'http\\Client\\Curl\\User::wait' => 
  array (
    0 => 'mixed',
    'timeout_ms=' => 'mixed',
  ),
  'http\\Client\\Request::__construct' => 
  array (
    0 => 'void',
    'method=' => 'mixed',
    'url=' => 'mixed',
    'headers=' => 'array<array-key, mixed>|null',
    'body=' => 'http\\Message\\Body|null',
  ),
  'http\\Client\\Request::__toString' => 
  array (
    0 => 'string',
  ),
  'http\\Client\\Request::addBody' => 
  array (
    0 => 'http\\Message',
    'body' => 'http\\Message\\Body',
  ),
  'http\\Client\\Request::addHeader' => 
  array (
    0 => 'http\\Message',
    'header' => 'string',
    'value' => 'mixed',
  ),
  'http\\Client\\Request::addHeaders' => 
  array (
    0 => 'http\\Message',
    'headers' => 'array<array-key, mixed>',
    'append=' => 'mixed',
  ),
  'http\\Client\\Request::addQuery' => 
  array (
    0 => 'http\\Client\\Request',
    'query_data' => 'mixed',
  ),
  'http\\Client\\Request::addSslOptions' => 
  array (
    0 => 'http\\Client\\Request',
    'ssl_options=' => 'array<array-key, mixed>|null',
  ),
  'http\\Client\\Request::count' => 
  array (
    0 => 'int',
  ),
  'http\\Client\\Request::current' => 
  array (
    0 => 'mixed',
  ),
  'http\\Client\\Request::detach' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\Client\\Request::getBody' => 
  array (
    0 => 'http\\Message\\Body',
  ),
  'http\\Client\\Request::getContentType' => 
  array (
    0 => 'null|string',
  ),
  'http\\Client\\Request::getHeader' => 
  array (
    0 => 'http\\Header|mixed',
    'header' => 'string',
    'into_class=' => 'mixed',
  ),
  'http\\Client\\Request::getHeaders' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\Client\\Request::getHttpVersion' => 
  array (
    0 => 'string',
  ),
  'http\\Client\\Request::getInfo' => 
  array (
    0 => 'null|string',
  ),
  'http\\Client\\Request::getOptions' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\Client\\Request::getParentMessage' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\Client\\Request::getQuery' => 
  array (
    0 => 'null|string',
  ),
  'http\\Client\\Request::getRequestMethod' => 
  array (
    0 => 'false|string',
  ),
  'http\\Client\\Request::getRequestUrl' => 
  array (
    0 => 'false|string',
  ),
  'http\\Client\\Request::getResponseCode' => 
  array (
    0 => 'false|int',
  ),
  'http\\Client\\Request::getResponseStatus' => 
  array (
    0 => 'false|string',
  ),
  'http\\Client\\Request::getSslOptions' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\Client\\Request::getType' => 
  array (
    0 => 'int',
  ),
  'http\\Client\\Request::isMultipart' => 
  array (
    0 => 'bool',
    '&boundary=' => 'mixed',
  ),
  'http\\Client\\Request::key' => 
  array (
    0 => 'int|string',
  ),
  'http\\Client\\Request::next' => 
  array (
    0 => 'void',
  ),
  'http\\Client\\Request::prepend' => 
  array (
    0 => 'http\\Message',
    'message' => 'http\\Message',
    'top=' => 'mixed',
  ),
  'http\\Client\\Request::reverse' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\Client\\Request::rewind' => 
  array (
    0 => 'void',
  ),
  'http\\Client\\Request::serialize' => 
  array (
    0 => 'string',
  ),
  'http\\Client\\Request::setBody' => 
  array (
    0 => 'http\\Message',
    'body' => 'http\\Message\\Body',
  ),
  'http\\Client\\Request::setContentType' => 
  array (
    0 => 'http\\Client\\Request',
    'content_type' => 'string',
  ),
  'http\\Client\\Request::setHeader' => 
  array (
    0 => 'http\\Message',
    'header' => 'string',
    'value=' => 'mixed',
  ),
  'http\\Client\\Request::setHeaders' => 
  array (
    0 => 'http\\Message',
    'headers' => 'array<array-key, mixed>',
  ),
  'http\\Client\\Request::setHttpVersion' => 
  array (
    0 => 'http\\Message',
    'http_version' => 'string',
  ),
  'http\\Client\\Request::setInfo' => 
  array (
    0 => 'http\\Message',
    'http_info' => 'string',
  ),
  'http\\Client\\Request::setOptions' => 
  array (
    0 => 'http\\Client\\Request',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'http\\Client\\Request::setQuery' => 
  array (
    0 => 'http\\Client\\Request',
    'query_data=' => 'mixed',
  ),
  'http\\Client\\Request::setRequestMethod' => 
  array (
    0 => 'http\\Message',
    'request_method' => 'string',
  ),
  'http\\Client\\Request::setRequestUrl' => 
  array (
    0 => 'http\\Message',
    'url' => 'string',
  ),
  'http\\Client\\Request::setResponseCode' => 
  array (
    0 => 'http\\Message',
    'response_code' => 'int',
    'strict=' => 'mixed',
  ),
  'http\\Client\\Request::setResponseStatus' => 
  array (
    0 => 'http\\Message',
    'response_status' => 'string',
  ),
  'http\\Client\\Request::setSslOptions' => 
  array (
    0 => 'http\\Client\\Request',
    'ssl_options=' => 'array<array-key, mixed>|null',
  ),
  'http\\Client\\Request::setType' => 
  array (
    0 => 'http\\Message',
    'type' => 'int',
  ),
  'http\\Client\\Request::splitMultipartBody' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\Client\\Request::toCallback' => 
  array (
    0 => 'http\\Message',
    'callback' => 'callable',
  ),
  'http\\Client\\Request::toStream' => 
  array (
    0 => 'http\\Message',
    'stream' => 'resource',
  ),
  'http\\Client\\Request::toString' => 
  array (
    0 => 'string',
    'include_parent=' => 'mixed',
  ),
  'http\\Client\\Request::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'http\\Client\\Request::valid' => 
  array (
    0 => 'bool',
  ),
  'http\\Client\\Response::__construct' => 
  array (
    0 => 'Iterator',
  ),
  'http\\Client\\Response::__toString' => 
  array (
    0 => 'string',
  ),
  'http\\Client\\Response::addBody' => 
  array (
    0 => 'http\\Message',
    'body' => 'http\\Message\\Body',
  ),
  'http\\Client\\Response::addHeader' => 
  array (
    0 => 'http\\Message',
    'header' => 'string',
    'value' => 'mixed',
  ),
  'http\\Client\\Response::addHeaders' => 
  array (
    0 => 'http\\Message',
    'headers' => 'array<array-key, mixed>',
    'append=' => 'mixed',
  ),
  'http\\Client\\Response::count' => 
  array (
    0 => 'int',
  ),
  'http\\Client\\Response::current' => 
  array (
    0 => 'mixed',
  ),
  'http\\Client\\Response::detach' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\Client\\Response::getBody' => 
  array (
    0 => 'http\\Message\\Body',
  ),
  'http\\Client\\Response::getCookies' => 
  array (
    0 => 'array<array-key, mixed>',
    'flags=' => 'mixed',
    'allowed_extras=' => 'mixed',
  ),
  'http\\Client\\Response::getHeader' => 
  array (
    0 => 'http\\Header|mixed',
    'header' => 'string',
    'into_class=' => 'mixed',
  ),
  'http\\Client\\Response::getHeaders' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\Client\\Response::getHttpVersion' => 
  array (
    0 => 'string',
  ),
  'http\\Client\\Response::getInfo' => 
  array (
    0 => 'null|string',
  ),
  'http\\Client\\Response::getParentMessage' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\Client\\Response::getRequestMethod' => 
  array (
    0 => 'false|string',
  ),
  'http\\Client\\Response::getRequestUrl' => 
  array (
    0 => 'false|string',
  ),
  'http\\Client\\Response::getResponseCode' => 
  array (
    0 => 'false|int',
  ),
  'http\\Client\\Response::getResponseStatus' => 
  array (
    0 => 'false|string',
  ),
  'http\\Client\\Response::getTransferInfo' => 
  array (
    0 => 'mixed|object',
    'element=' => 'mixed',
  ),
  'http\\Client\\Response::getType' => 
  array (
    0 => 'int',
  ),
  'http\\Client\\Response::isMultipart' => 
  array (
    0 => 'bool',
    '&boundary=' => 'mixed',
  ),
  'http\\Client\\Response::key' => 
  array (
    0 => 'int|string',
  ),
  'http\\Client\\Response::next' => 
  array (
    0 => 'void',
  ),
  'http\\Client\\Response::prepend' => 
  array (
    0 => 'http\\Message',
    'message' => 'http\\Message',
    'top=' => 'mixed',
  ),
  'http\\Client\\Response::reverse' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\Client\\Response::rewind' => 
  array (
    0 => 'void',
  ),
  'http\\Client\\Response::serialize' => 
  array (
    0 => 'string',
  ),
  'http\\Client\\Response::setBody' => 
  array (
    0 => 'http\\Message',
    'body' => 'http\\Message\\Body',
  ),
  'http\\Client\\Response::setHeader' => 
  array (
    0 => 'http\\Message',
    'header' => 'string',
    'value=' => 'mixed',
  ),
  'http\\Client\\Response::setHeaders' => 
  array (
    0 => 'http\\Message',
    'headers' => 'array<array-key, mixed>',
  ),
  'http\\Client\\Response::setHttpVersion' => 
  array (
    0 => 'http\\Message',
    'http_version' => 'string',
  ),
  'http\\Client\\Response::setInfo' => 
  array (
    0 => 'http\\Message',
    'http_info' => 'string',
  ),
  'http\\Client\\Response::setRequestMethod' => 
  array (
    0 => 'http\\Message',
    'request_method' => 'string',
  ),
  'http\\Client\\Response::setRequestUrl' => 
  array (
    0 => 'http\\Message',
    'url' => 'string',
  ),
  'http\\Client\\Response::setResponseCode' => 
  array (
    0 => 'http\\Message',
    'response_code' => 'int',
    'strict=' => 'mixed',
  ),
  'http\\Client\\Response::setResponseStatus' => 
  array (
    0 => 'http\\Message',
    'response_status' => 'string',
  ),
  'http\\Client\\Response::setType' => 
  array (
    0 => 'http\\Message',
    'type' => 'int',
  ),
  'http\\Client\\Response::splitMultipartBody' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\Client\\Response::toCallback' => 
  array (
    0 => 'http\\Message',
    'callback' => 'callable',
  ),
  'http\\Client\\Response::toStream' => 
  array (
    0 => 'http\\Message',
    'stream' => 'resource',
  ),
  'http\\Client\\Response::toString' => 
  array (
    0 => 'string',
    'include_parent=' => 'mixed',
  ),
  'http\\Client\\Response::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'http\\Client\\Response::valid' => 
  array (
    0 => 'bool',
  ),
  'http\\Cookie::__construct' => 
  array (
    0 => 'void',
    'cookie_string=' => 'mixed',
    'parser_flags=' => 'int',
    'allowed_extras=' => 'array<array-key, mixed>',
  ),
  'http\\Cookie::__toString' => 
  array (
    0 => 'string',
  ),
  'http\\Cookie::addCookie' => 
  array (
    0 => 'http\\Cookie',
    'cookie_name' => 'string',
    'cookie_value' => 'string',
  ),
  'http\\Cookie::addCookies' => 
  array (
    0 => 'http\\Cookie',
    'cookies' => 'array<array-key, mixed>',
  ),
  'http\\Cookie::addExtra' => 
  array (
    0 => 'http\\Cookie',
    'extra_name' => 'string',
    'extra_value' => 'string',
  ),
  'http\\Cookie::addExtras' => 
  array (
    0 => 'http\\Cookie',
    'extras' => 'array<array-key, mixed>',
  ),
  'http\\Cookie::getCookie' => 
  array (
    0 => 'null|string',
    'name' => 'string',
  ),
  'http\\Cookie::getCookies' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\Cookie::getDomain' => 
  array (
    0 => 'string',
  ),
  'http\\Cookie::getExpires' => 
  array (
    0 => 'int',
  ),
  'http\\Cookie::getExtra' => 
  array (
    0 => 'string',
    'name' => 'string',
  ),
  'http\\Cookie::getExtras' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\Cookie::getFlags' => 
  array (
    0 => 'int',
  ),
  'http\\Cookie::getMaxAge' => 
  array (
    0 => 'int',
  ),
  'http\\Cookie::getPath' => 
  array (
    0 => 'string',
  ),
  'http\\Cookie::setCookie' => 
  array (
    0 => 'http\\Cookie',
    'cookie_name' => 'string',
    'cookie_value=' => 'mixed',
  ),
  'http\\Cookie::setCookies' => 
  array (
    0 => 'http\\Cookie',
    'cookies=' => 'mixed',
  ),
  'http\\Cookie::setDomain' => 
  array (
    0 => 'http\\Cookie',
    'value=' => 'mixed',
  ),
  'http\\Cookie::setExpires' => 
  array (
    0 => 'http\\Cookie',
    'value=' => 'mixed',
  ),
  'http\\Cookie::setExtra' => 
  array (
    0 => 'http\\Cookie',
    'extra_name' => 'string',
    'extra_value=' => 'mixed',
  ),
  'http\\Cookie::setExtras' => 
  array (
    0 => 'http\\Cookie',
    'extras=' => 'mixed',
  ),
  'http\\Cookie::setFlags' => 
  array (
    0 => 'http\\Cookie',
    'value=' => 'mixed',
  ),
  'http\\Cookie::setMaxAge' => 
  array (
    0 => 'http\\Cookie',
    'value=' => 'mixed',
  ),
  'http\\Cookie::setPath' => 
  array (
    0 => 'http\\Cookie',
    'value=' => 'mixed',
  ),
  'http\\Cookie::toArray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\Cookie::toString' => 
  array (
    0 => 'string',
  ),
  'http\\Encoding\\Stream::__construct' => 
  array (
    0 => 'void',
    'flags=' => 'mixed',
  ),
  'http\\Encoding\\Stream::done' => 
  array (
    0 => 'bool',
  ),
  'http\\Encoding\\Stream::finish' => 
  array (
    0 => 'string',
  ),
  'http\\Encoding\\Stream::flush' => 
  array (
    0 => 'string',
  ),
  'http\\Encoding\\Stream::update' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'http\\Encoding\\Stream\\Debrotli::__construct' => 
  array (
    0 => 'void',
    'flags=' => 'int',
  ),
  'http\\Encoding\\Stream\\Debrotli::decode' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'http\\Encoding\\Stream\\Debrotli::done' => 
  array (
    0 => 'bool',
  ),
  'http\\Encoding\\Stream\\Debrotli::finish' => 
  array (
    0 => 'string',
  ),
  'http\\Encoding\\Stream\\Debrotli::flush' => 
  array (
    0 => 'string',
  ),
  'http\\Encoding\\Stream\\Debrotli::update' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'http\\Encoding\\Stream\\Dechunk::__construct' => 
  array (
    0 => 'void',
    'flags=' => 'mixed',
  ),
  'http\\Encoding\\Stream\\Dechunk::decode' => 
  array (
    0 => 'false|string',
    'data' => 'string',
    '&decoded_len=' => 'mixed',
  ),
  'http\\Encoding\\Stream\\Dechunk::done' => 
  array (
    0 => 'bool',
  ),
  'http\\Encoding\\Stream\\Dechunk::finish' => 
  array (
    0 => 'string',
  ),
  'http\\Encoding\\Stream\\Dechunk::flush' => 
  array (
    0 => 'string',
  ),
  'http\\Encoding\\Stream\\Dechunk::update' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'http\\Encoding\\Stream\\Deflate::__construct' => 
  array (
    0 => 'void',
    'flags=' => 'mixed',
  ),
  'http\\Encoding\\Stream\\Deflate::done' => 
  array (
    0 => 'bool',
  ),
  'http\\Encoding\\Stream\\Deflate::encode' => 
  array (
    0 => 'string',
    'data' => 'string',
    'flags=' => 'mixed',
  ),
  'http\\Encoding\\Stream\\Deflate::finish' => 
  array (
    0 => 'string',
  ),
  'http\\Encoding\\Stream\\Deflate::flush' => 
  array (
    0 => 'string',
  ),
  'http\\Encoding\\Stream\\Deflate::update' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'http\\Encoding\\Stream\\Enbrotli::__construct' => 
  array (
    0 => 'void',
    'flags=' => 'int',
  ),
  'http\\Encoding\\Stream\\Enbrotli::done' => 
  array (
    0 => 'bool',
  ),
  'http\\Encoding\\Stream\\Enbrotli::encode' => 
  array (
    0 => 'string',
    'data' => 'string',
    'flags=' => 'int',
  ),
  'http\\Encoding\\Stream\\Enbrotli::finish' => 
  array (
    0 => 'string',
  ),
  'http\\Encoding\\Stream\\Enbrotli::flush' => 
  array (
    0 => 'string',
  ),
  'http\\Encoding\\Stream\\Enbrotli::update' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'http\\Encoding\\Stream\\Inflate::__construct' => 
  array (
    0 => 'void',
    'flags=' => 'mixed',
  ),
  'http\\Encoding\\Stream\\Inflate::decode' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'http\\Encoding\\Stream\\Inflate::done' => 
  array (
    0 => 'bool',
  ),
  'http\\Encoding\\Stream\\Inflate::finish' => 
  array (
    0 => 'string',
  ),
  'http\\Encoding\\Stream\\Inflate::flush' => 
  array (
    0 => 'string',
  ),
  'http\\Encoding\\Stream\\Inflate::update' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'http\\Env::getRequestBody' => 
  array (
    0 => 'http\\Message\\Body',
    'body_class_name=' => 'mixed',
  ),
  'http\\Env::getRequestHeader' => 
  array (
    0 => 'array<array-key, mixed>|null|string',
    'header_name=' => 'mixed',
  ),
  'http\\Env::getResponseCode' => 
  array (
    0 => 'int',
  ),
  'http\\Env::getResponseHeader' => 
  array (
    0 => 'array<array-key, mixed>|null|string',
    'header_name=' => 'mixed',
  ),
  'http\\Env::getResponseStatusForAllCodes' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\Env::getResponseStatusForCode' => 
  array (
    0 => 'string',
    'code' => 'int',
  ),
  'http\\Env::negotiate' => 
  array (
    0 => 'null|string',
    'params' => 'string',
    'supported' => 'array<array-key, mixed>',
    'primary_type_separator=' => 'mixed',
    '&result_array=' => 'mixed',
  ),
  'http\\Env::negotiateCharset' => 
  array (
    0 => 'null|string',
    'supported' => 'array<array-key, mixed>',
    '&result_array=' => 'mixed',
  ),
  'http\\Env::negotiateContentType' => 
  array (
    0 => 'null|string',
    'supported' => 'array<array-key, mixed>',
    '&result_array=' => 'mixed',
  ),
  'http\\Env::negotiateEncoding' => 
  array (
    0 => 'null|string',
    'supported' => 'array<array-key, mixed>',
    '&result_array=' => 'mixed',
  ),
  'http\\Env::negotiateLanguage' => 
  array (
    0 => 'null|string',
    'supported' => 'array<array-key, mixed>',
    '&result_array=' => 'mixed',
  ),
  'http\\Env::setResponseCode' => 
  array (
    0 => 'bool',
    'code' => 'int',
  ),
  'http\\Env::setResponseHeader' => 
  array (
    0 => 'bool',
    'header_name' => 'string',
    'header_value=' => 'mixed',
    'response_code=' => 'mixed',
    'replace_header=' => 'mixed',
  ),
  'http\\Env\\Request::__construct' => 
  array (
    0 => 'void',
  ),
  'http\\Env\\Request::__toString' => 
  array (
    0 => 'string',
  ),
  'http\\Env\\Request::addBody' => 
  array (
    0 => 'http\\Message',
    'body' => 'http\\Message\\Body',
  ),
  'http\\Env\\Request::addHeader' => 
  array (
    0 => 'http\\Message',
    'header' => 'string',
    'value' => 'mixed',
  ),
  'http\\Env\\Request::addHeaders' => 
  array (
    0 => 'http\\Message',
    'headers' => 'array<array-key, mixed>',
    'append=' => 'mixed',
  ),
  'http\\Env\\Request::count' => 
  array (
    0 => 'int',
  ),
  'http\\Env\\Request::current' => 
  array (
    0 => 'mixed',
  ),
  'http\\Env\\Request::detach' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\Env\\Request::getBody' => 
  array (
    0 => 'http\\Message\\Body',
  ),
  'http\\Env\\Request::getCookie' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'type=' => 'mixed',
    'defval=' => 'mixed',
    'delete=' => 'bool',
  ),
  'http\\Env\\Request::getFiles' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\Env\\Request::getForm' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'type=' => 'mixed',
    'defval=' => 'mixed',
    'delete=' => 'bool',
  ),
  'http\\Env\\Request::getHeader' => 
  array (
    0 => 'http\\Header|mixed',
    'header' => 'string',
    'into_class=' => 'mixed',
  ),
  'http\\Env\\Request::getHeaders' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\Env\\Request::getHttpVersion' => 
  array (
    0 => 'string',
  ),
  'http\\Env\\Request::getInfo' => 
  array (
    0 => 'null|string',
  ),
  'http\\Env\\Request::getParentMessage' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\Env\\Request::getQuery' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'type=' => 'mixed',
    'defval=' => 'mixed',
    'delete=' => 'bool',
  ),
  'http\\Env\\Request::getRequestMethod' => 
  array (
    0 => 'false|string',
  ),
  'http\\Env\\Request::getRequestUrl' => 
  array (
    0 => 'false|string',
  ),
  'http\\Env\\Request::getResponseCode' => 
  array (
    0 => 'false|int',
  ),
  'http\\Env\\Request::getResponseStatus' => 
  array (
    0 => 'false|string',
  ),
  'http\\Env\\Request::getType' => 
  array (
    0 => 'int',
  ),
  'http\\Env\\Request::isMultipart' => 
  array (
    0 => 'bool',
    '&boundary=' => 'mixed',
  ),
  'http\\Env\\Request::key' => 
  array (
    0 => 'int|string',
  ),
  'http\\Env\\Request::next' => 
  array (
    0 => 'void',
  ),
  'http\\Env\\Request::prepend' => 
  array (
    0 => 'http\\Message',
    'message' => 'http\\Message',
    'top=' => 'mixed',
  ),
  'http\\Env\\Request::reverse' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\Env\\Request::rewind' => 
  array (
    0 => 'void',
  ),
  'http\\Env\\Request::serialize' => 
  array (
    0 => 'string',
  ),
  'http\\Env\\Request::setBody' => 
  array (
    0 => 'http\\Message',
    'body' => 'http\\Message\\Body',
  ),
  'http\\Env\\Request::setHeader' => 
  array (
    0 => 'http\\Message',
    'header' => 'string',
    'value=' => 'mixed',
  ),
  'http\\Env\\Request::setHeaders' => 
  array (
    0 => 'http\\Message',
    'headers' => 'array<array-key, mixed>',
  ),
  'http\\Env\\Request::setHttpVersion' => 
  array (
    0 => 'http\\Message',
    'http_version' => 'string',
  ),
  'http\\Env\\Request::setInfo' => 
  array (
    0 => 'http\\Message',
    'http_info' => 'string',
  ),
  'http\\Env\\Request::setRequestMethod' => 
  array (
    0 => 'http\\Message',
    'request_method' => 'string',
  ),
  'http\\Env\\Request::setRequestUrl' => 
  array (
    0 => 'http\\Message',
    'url' => 'string',
  ),
  'http\\Env\\Request::setResponseCode' => 
  array (
    0 => 'http\\Message',
    'response_code' => 'int',
    'strict=' => 'mixed',
  ),
  'http\\Env\\Request::setResponseStatus' => 
  array (
    0 => 'http\\Message',
    'response_status' => 'string',
  ),
  'http\\Env\\Request::setType' => 
  array (
    0 => 'http\\Message',
    'type' => 'int',
  ),
  'http\\Env\\Request::splitMultipartBody' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\Env\\Request::toCallback' => 
  array (
    0 => 'http\\Message',
    'callback' => 'callable',
  ),
  'http\\Env\\Request::toStream' => 
  array (
    0 => 'http\\Message',
    'stream' => 'resource',
  ),
  'http\\Env\\Request::toString' => 
  array (
    0 => 'string',
    'include_parent=' => 'mixed',
  ),
  'http\\Env\\Request::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'http\\Env\\Request::valid' => 
  array (
    0 => 'bool',
  ),
  'http\\Env\\Response::__construct' => 
  array (
    0 => 'void',
  ),
  'http\\Env\\Response::__invoke' => 
  array (
    0 => 'bool',
    'data' => 'string',
    'ob_flags=' => 'int',
  ),
  'http\\Env\\Response::__toString' => 
  array (
    0 => 'string',
  ),
  'http\\Env\\Response::addBody' => 
  array (
    0 => 'http\\Message',
    'body' => 'http\\Message\\Body',
  ),
  'http\\Env\\Response::addHeader' => 
  array (
    0 => 'http\\Message',
    'header' => 'string',
    'value' => 'mixed',
  ),
  'http\\Env\\Response::addHeaders' => 
  array (
    0 => 'http\\Message',
    'headers' => 'array<array-key, mixed>',
    'append=' => 'mixed',
  ),
  'http\\Env\\Response::count' => 
  array (
    0 => 'int',
  ),
  'http\\Env\\Response::current' => 
  array (
    0 => 'mixed',
  ),
  'http\\Env\\Response::detach' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\Env\\Response::getBody' => 
  array (
    0 => 'http\\Message\\Body',
  ),
  'http\\Env\\Response::getHeader' => 
  array (
    0 => 'http\\Header|mixed',
    'header' => 'string',
    'into_class=' => 'mixed',
  ),
  'http\\Env\\Response::getHeaders' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\Env\\Response::getHttpVersion' => 
  array (
    0 => 'string',
  ),
  'http\\Env\\Response::getInfo' => 
  array (
    0 => 'null|string',
  ),
  'http\\Env\\Response::getParentMessage' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\Env\\Response::getRequestMethod' => 
  array (
    0 => 'false|string',
  ),
  'http\\Env\\Response::getRequestUrl' => 
  array (
    0 => 'false|string',
  ),
  'http\\Env\\Response::getResponseCode' => 
  array (
    0 => 'false|int',
  ),
  'http\\Env\\Response::getResponseStatus' => 
  array (
    0 => 'false|string',
  ),
  'http\\Env\\Response::getType' => 
  array (
    0 => 'int',
  ),
  'http\\Env\\Response::isCachedByETag' => 
  array (
    0 => 'int',
    'header_name=' => 'string',
  ),
  'http\\Env\\Response::isCachedByLastModified' => 
  array (
    0 => 'int',
    'header_name=' => 'string',
  ),
  'http\\Env\\Response::isMultipart' => 
  array (
    0 => 'bool',
    '&boundary=' => 'mixed',
  ),
  'http\\Env\\Response::key' => 
  array (
    0 => 'int|string',
  ),
  'http\\Env\\Response::next' => 
  array (
    0 => 'void',
  ),
  'http\\Env\\Response::prepend' => 
  array (
    0 => 'http\\Message',
    'message' => 'http\\Message',
    'top=' => 'mixed',
  ),
  'http\\Env\\Response::reverse' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\Env\\Response::rewind' => 
  array (
    0 => 'void',
  ),
  'http\\Env\\Response::send' => 
  array (
    0 => 'bool',
    'stream=' => 'resource',
  ),
  'http\\Env\\Response::serialize' => 
  array (
    0 => 'string',
  ),
  'http\\Env\\Response::setBody' => 
  array (
    0 => 'http\\Message',
    'body' => 'http\\Message\\Body',
  ),
  'http\\Env\\Response::setCacheControl' => 
  array (
    0 => 'http\\Env\\Response',
    'cache_control' => 'string',
  ),
  'http\\Env\\Response::setContentDisposition' => 
  array (
    0 => 'http\\Env\\Response',
    'disposition_params' => 'array<array-key, mixed>',
  ),
  'http\\Env\\Response::setContentEncoding' => 
  array (
    0 => 'http\\Env\\Response',
    'content_encoding' => 'int',
  ),
  'http\\Env\\Response::setContentType' => 
  array (
    0 => 'http\\Env\\Response',
    'content_type' => 'string',
  ),
  'http\\Env\\Response::setCookie' => 
  array (
    0 => 'http\\Env\\Response',
    'cookie' => 'mixed',
  ),
  'http\\Env\\Response::setEnvRequest' => 
  array (
    0 => 'http\\Env\\Response',
    'env_request' => 'http\\Message',
  ),
  'http\\Env\\Response::setEtag' => 
  array (
    0 => 'http\\Env\\Response',
    'etag' => 'string',
  ),
  'http\\Env\\Response::setHeader' => 
  array (
    0 => 'http\\Message',
    'header' => 'string',
    'value=' => 'mixed',
  ),
  'http\\Env\\Response::setHeaders' => 
  array (
    0 => 'http\\Message',
    'headers' => 'array<array-key, mixed>',
  ),
  'http\\Env\\Response::setHttpVersion' => 
  array (
    0 => 'http\\Message',
    'http_version' => 'string',
  ),
  'http\\Env\\Response::setInfo' => 
  array (
    0 => 'http\\Message',
    'http_info' => 'string',
  ),
  'http\\Env\\Response::setLastModified' => 
  array (
    0 => 'http\\Env\\Response',
    'last_modified' => 'int',
  ),
  'http\\Env\\Response::setRequestMethod' => 
  array (
    0 => 'http\\Message',
    'request_method' => 'string',
  ),
  'http\\Env\\Response::setRequestUrl' => 
  array (
    0 => 'http\\Message',
    'url' => 'string',
  ),
  'http\\Env\\Response::setResponseCode' => 
  array (
    0 => 'http\\Message',
    'response_code' => 'int',
    'strict=' => 'mixed',
  ),
  'http\\Env\\Response::setResponseStatus' => 
  array (
    0 => 'http\\Message',
    'response_status' => 'string',
  ),
  'http\\Env\\Response::setThrottleRate' => 
  array (
    0 => 'http\\Env\\Response',
    'chunk_size' => 'int',
    'delay=' => 'float|int',
  ),
  'http\\Env\\Response::setType' => 
  array (
    0 => 'http\\Message',
    'type' => 'int',
  ),
  'http\\Env\\Response::splitMultipartBody' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\Env\\Response::toCallback' => 
  array (
    0 => 'http\\Message',
    'callback' => 'callable',
  ),
  'http\\Env\\Response::toStream' => 
  array (
    0 => 'http\\Message',
    'stream' => 'resource',
  ),
  'http\\Env\\Response::toString' => 
  array (
    0 => 'string',
    'include_parent=' => 'mixed',
  ),
  'http\\Env\\Response::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'http\\Env\\Response::valid' => 
  array (
    0 => 'bool',
  ),
  'http\\Header::__construct' => 
  array (
    0 => 'void',
    'name=' => 'mixed',
    'value=' => 'mixed',
  ),
  'http\\Header::__toString' => 
  array (
    0 => 'string',
  ),
  'http\\Header::getParams' => 
  array (
    0 => 'http\\Params',
    'param_sep=' => 'mixed',
    'arg_sep=' => 'mixed',
    'val_sep=' => 'mixed',
    'flags=' => 'mixed',
  ),
  'http\\Header::match' => 
  array (
    0 => 'bool',
    'value' => 'string',
    'flags=' => 'mixed',
  ),
  'http\\Header::negotiate' => 
  array (
    0 => 'null|string',
    'supported' => 'array<array-key, mixed>',
    '&result=' => 'mixed',
  ),
  'http\\Header::parse' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'string' => 'string',
    'header_class=' => 'mixed',
  ),
  'http\\Header::serialize' => 
  array (
    0 => 'string',
  ),
  'http\\Header::toString' => 
  array (
    0 => 'string',
  ),
  'http\\Header::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'http\\Header\\Parser::getState' => 
  array (
    0 => 'int',
  ),
  'http\\Header\\Parser::parse' => 
  array (
    0 => 'int',
    'data' => 'string',
    'flags' => 'int',
    '&headers' => 'array<array-key, mixed>',
  ),
  'http\\Header\\Parser::stream' => 
  array (
    0 => 'int',
    'stream' => 'resource',
    'flags' => 'int',
    '&headers' => 'array<array-key, mixed>',
  ),
  'http\\Message::__construct' => 
  array (
    0 => 'void',
    'message=' => 'mixed',
    'greedy=' => 'bool',
  ),
  'http\\Message::__toString' => 
  array (
    0 => 'string',
  ),
  'http\\Message::addBody' => 
  array (
    0 => 'http\\Message',
    'body' => 'http\\Message\\Body',
  ),
  'http\\Message::addHeader' => 
  array (
    0 => 'http\\Message',
    'header' => 'string',
    'value' => 'mixed',
  ),
  'http\\Message::addHeaders' => 
  array (
    0 => 'http\\Message',
    'headers' => 'array<array-key, mixed>',
    'append=' => 'mixed',
  ),
  'http\\Message::count' => 
  array (
    0 => 'int',
  ),
  'http\\Message::current' => 
  array (
    0 => 'mixed',
  ),
  'http\\Message::detach' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\Message::getBody' => 
  array (
    0 => 'http\\Message\\Body',
  ),
  'http\\Message::getHeader' => 
  array (
    0 => 'http\\Header|mixed',
    'header' => 'string',
    'into_class=' => 'mixed',
  ),
  'http\\Message::getHeaders' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\Message::getHttpVersion' => 
  array (
    0 => 'string',
  ),
  'http\\Message::getInfo' => 
  array (
    0 => 'null|string',
  ),
  'http\\Message::getParentMessage' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\Message::getRequestMethod' => 
  array (
    0 => 'false|string',
  ),
  'http\\Message::getRequestUrl' => 
  array (
    0 => 'false|string',
  ),
  'http\\Message::getResponseCode' => 
  array (
    0 => 'false|int',
  ),
  'http\\Message::getResponseStatus' => 
  array (
    0 => 'false|string',
  ),
  'http\\Message::getType' => 
  array (
    0 => 'int',
  ),
  'http\\Message::isMultipart' => 
  array (
    0 => 'bool',
    '&boundary=' => 'mixed',
  ),
  'http\\Message::key' => 
  array (
    0 => 'int|string',
  ),
  'http\\Message::next' => 
  array (
    0 => 'void',
  ),
  'http\\Message::prepend' => 
  array (
    0 => 'http\\Message',
    'message' => 'http\\Message',
    'top=' => 'mixed',
  ),
  'http\\Message::reverse' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\Message::rewind' => 
  array (
    0 => 'void',
  ),
  'http\\Message::serialize' => 
  array (
    0 => 'string',
  ),
  'http\\Message::setBody' => 
  array (
    0 => 'http\\Message',
    'body' => 'http\\Message\\Body',
  ),
  'http\\Message::setHeader' => 
  array (
    0 => 'http\\Message',
    'header' => 'string',
    'value=' => 'mixed',
  ),
  'http\\Message::setHeaders' => 
  array (
    0 => 'http\\Message',
    'headers' => 'array<array-key, mixed>',
  ),
  'http\\Message::setHttpVersion' => 
  array (
    0 => 'http\\Message',
    'http_version' => 'string',
  ),
  'http\\Message::setInfo' => 
  array (
    0 => 'http\\Message',
    'http_info' => 'string',
  ),
  'http\\Message::setRequestMethod' => 
  array (
    0 => 'http\\Message',
    'request_method' => 'string',
  ),
  'http\\Message::setRequestUrl' => 
  array (
    0 => 'http\\Message',
    'url' => 'string',
  ),
  'http\\Message::setResponseCode' => 
  array (
    0 => 'http\\Message',
    'response_code' => 'int',
    'strict=' => 'mixed',
  ),
  'http\\Message::setResponseStatus' => 
  array (
    0 => 'http\\Message',
    'response_status' => 'string',
  ),
  'http\\Message::setType' => 
  array (
    0 => 'http\\Message',
    'type' => 'int',
  ),
  'http\\Message::splitMultipartBody' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\Message::toCallback' => 
  array (
    0 => 'http\\Message',
    'callback' => 'callable',
  ),
  'http\\Message::toStream' => 
  array (
    0 => 'http\\Message',
    'stream' => 'resource',
  ),
  'http\\Message::toString' => 
  array (
    0 => 'string',
    'include_parent=' => 'mixed',
  ),
  'http\\Message::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'http\\Message::valid' => 
  array (
    0 => 'bool',
  ),
  'http\\Message\\Body::__construct' => 
  array (
    0 => 'void',
    'stream=' => 'resource',
  ),
  'http\\Message\\Body::__toString' => 
  array (
    0 => 'string',
  ),
  'http\\Message\\Body::addForm' => 
  array (
    0 => 'http\\Message\\Body',
    'fields=' => 'array<array-key, mixed>|null',
    'files=' => 'array<array-key, mixed>|null',
  ),
  'http\\Message\\Body::addPart' => 
  array (
    0 => 'http\\Message\\Body',
    'message' => 'http\\Message',
  ),
  'http\\Message\\Body::append' => 
  array (
    0 => 'http\\Message\\Body',
    'string' => 'string',
  ),
  'http\\Message\\Body::etag' => 
  array (
    0 => 'false|string',
  ),
  'http\\Message\\Body::getBoundary' => 
  array (
    0 => 'null|string',
  ),
  'http\\Message\\Body::getResource' => 
  array (
    0 => 'resource',
  ),
  'http\\Message\\Body::serialize' => 
  array (
    0 => 'string',
  ),
  'http\\Message\\Body::stat' => 
  array (
    0 => 'int|object',
    'field=' => 'mixed',
  ),
  'http\\Message\\Body::toCallback' => 
  array (
    0 => 'http\\Message\\Body',
    'callback' => 'callable',
    'offset=' => 'mixed',
    'maxlen=' => 'mixed',
  ),
  'http\\Message\\Body::toStream' => 
  array (
    0 => 'http\\Message\\Body',
    'stream' => 'resource',
    'offset=' => 'mixed',
    'maxlen=' => 'mixed',
  ),
  'http\\Message\\Body::toString' => 
  array (
    0 => 'string',
  ),
  'http\\Message\\Body::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'http\\Message\\Parser::getState' => 
  array (
    0 => 'int',
  ),
  'http\\Message\\Parser::parse' => 
  array (
    0 => 'int',
    'data' => 'string',
    'flags' => 'int',
    '&message' => 'http\\Message',
  ),
  'http\\Message\\Parser::stream' => 
  array (
    0 => 'int',
    'stream' => 'resource',
    'flags' => 'int',
    '&message' => 'http\\Message',
  ),
  'http\\Params::__construct' => 
  array (
    0 => 'void',
    'params=' => 'mixed',
    'param_sep=' => 'mixed',
    'arg_sep=' => 'mixed',
    'val_sep=' => 'mixed',
    'flags=' => 'mixed',
  ),
  'http\\Params::__toString' => 
  array (
    0 => 'string',
  ),
  'http\\Params::offsetExists' => 
  array (
    0 => 'bool',
    'name' => 'int|string',
  ),
  'http\\Params::offsetGet' => 
  array (
    0 => 'mixed',
    'name' => 'int|string',
  ),
  'http\\Params::offsetSet' => 
  array (
    0 => 'void',
    'name' => 'int|null|string',
    'value' => 'mixed',
  ),
  'http\\Params::offsetUnset' => 
  array (
    0 => 'void',
    'name' => 'int|string',
  ),
  'http\\Params::toArray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\Params::toString' => 
  array (
    0 => 'string',
  ),
  'http\\QueryString::__construct' => 
  array (
    0 => 'void',
    'querystring' => 'string',
  ),
  'http\\QueryString::__toString' => 
  array (
    0 => 'string',
  ),
  'http\\QueryString::get' => 
  array (
    0 => 'http\\QueryString|mixed|string',
    'name=' => 'string',
    'type=' => 'mixed',
    'defval=' => 'mixed',
    'delete=' => 'bool',
  ),
  'http\\QueryString::getArray' => 
  array (
    0 => 'array<array-key, mixed>|mixed',
    'name' => 'string',
    'defval=' => 'mixed',
    'delete=' => 'bool',
  ),
  'http\\QueryString::getBool' => 
  array (
    0 => 'bool|mixed',
    'name' => 'string',
    'defval=' => 'mixed',
    'delete=' => 'bool',
  ),
  'http\\QueryString::getFloat' => 
  array (
    0 => 'float|mixed',
    'name' => 'string',
    'defval=' => 'mixed',
    'delete=' => 'bool',
  ),
  'http\\QueryString::getGlobalInstance' => 
  array (
    0 => 'http\\QueryString',
  ),
  'http\\QueryString::getInt' => 
  array (
    0 => 'int|mixed',
    'name' => 'string',
    'defval=' => 'mixed',
    'delete=' => 'bool',
  ),
  'http\\QueryString::getIterator' => 
  array (
    0 => 'IteratorAggregate',
  ),
  'http\\QueryString::getObject' => 
  array (
    0 => 'mixed|object',
    'name' => 'string',
    'defval=' => 'mixed',
    'delete=' => 'bool',
  ),
  'http\\QueryString::getString' => 
  array (
    0 => 'mixed|string',
    'name' => 'string',
    'defval=' => 'mixed',
    'delete=' => 'bool',
  ),
  'http\\QueryString::mod' => 
  array (
    0 => 'http\\QueryString',
    'params=' => 'mixed',
  ),
  'http\\QueryString::offsetExists' => 
  array (
    0 => 'bool',
    'offset' => 'int|string',
  ),
  'http\\QueryString::offsetGet' => 
  array (
    0 => 'mixed|null',
    'offset' => 'int|string',
  ),
  'http\\QueryString::offsetSet' => 
  array (
    0 => 'void',
    'offset' => 'int|null|string',
    'value' => 'mixed',
  ),
  'http\\QueryString::offsetUnset' => 
  array (
    0 => 'void',
    'offset' => 'int|string',
  ),
  'http\\QueryString::serialize' => 
  array (
    0 => 'string',
  ),
  'http\\QueryString::set' => 
  array (
    0 => 'http\\QueryString',
    'params' => 'mixed',
  ),
  'http\\QueryString::toArray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\QueryString::toString' => 
  array (
    0 => 'string',
  ),
  'http\\QueryString::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'http\\QueryString::xlate' => 
  array (
    0 => 'http\\QueryString',
  ),
  'http\\Url::__construct' => 
  array (
    0 => 'void',
    'old_url=' => 'mixed',
    'new_url=' => 'mixed',
    'flags=' => 'int',
  ),
  'http\\Url::__toString' => 
  array (
    0 => 'string',
  ),
  'http\\Url::mod' => 
  array (
    0 => 'http\\Url',
    'parts' => 'mixed',
    'flags=' => 'float|int|mixed',
  ),
  'http\\Url::toArray' => 
  array (
    0 => 'array<array-key, string>',
  ),
  'http\\Url::toString' => 
  array (
    0 => 'string',
  ),
  'http_build_cookie' => 
  array (
    0 => 'string',
    'cookie' => 'array<array-key, mixed>',
  ),
  'http_build_query' => 
  array (
    0 => 'string',
    'data' => 'array<array-key, mixed>|object',
    'numeric_prefix=' => 'string',
    'arg_separator=' => 'null|string',
    'encoding_type=' => 'int',
  ),
  'http_build_str' => 
  array (
    0 => 'string',
    'query' => 'array<array-key, mixed>',
    'prefix=' => 'null|string',
    'arg_separator=' => 'string',
  ),
  'http_build_url' => 
  array (
    0 => 'string',
    'url=' => 'array<array-key, mixed>|string',
    'parts=' => 'array<array-key, mixed>|string',
    'flags=' => 'int',
    'new_url=' => 'array<array-key, mixed>',
  ),
  'http_cache_etag' => 
  array (
    0 => 'bool',
    'etag=' => 'string',
  ),
  'http_cache_last_modified' => 
  array (
    0 => 'bool',
    'timestamp_or_expires=' => 'int',
  ),
  'http_chunked_decode' => 
  array (
    0 => 'false|string',
    'encoded' => 'string',
  ),
  'http_date' => 
  array (
    0 => 'string',
    'timestamp=' => 'int',
  ),
  'http_deflate' => 
  array (
    0 => 'null|string',
    'data' => 'string',
    'flags=' => 'int',
  ),
  'http_get' => 
  array (
    0 => 'string',
    'url' => 'string',
    'options=' => 'array<array-key, mixed>',
    'info=' => 'array<array-key, mixed>',
  ),
  'http_get_request_body' => 
  array (
    0 => 'null|string',
  ),
  'http_get_request_body_stream' => 
  array (
    0 => 'null|resource',
  ),
  'http_get_request_headers' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http_head' => 
  array (
    0 => 'string',
    'url' => 'string',
    'options=' => 'array<array-key, mixed>',
    'info=' => 'array<array-key, mixed>',
  ),
  'http_inflate' => 
  array (
    0 => 'null|string',
    'data' => 'string',
  ),
  'http_match_etag' => 
  array (
    0 => 'bool',
    'etag' => 'string',
    'for_range=' => 'bool',
  ),
  'http_match_modified' => 
  array (
    0 => 'bool',
    'timestamp=' => 'int',
    'for_range=' => 'bool',
  ),
  'http_match_request_header' => 
  array (
    0 => 'bool',
    'header' => 'string',
    'value' => 'string',
    'match_case=' => 'bool',
  ),
  'http_negotiate_charset' => 
  array (
    0 => 'string',
    'supported' => 'array<array-key, mixed>',
    'result=' => 'array<array-key, mixed>',
  ),
  'http_negotiate_content_type' => 
  array (
    0 => 'string',
    'supported' => 'array<array-key, mixed>',
    'result=' => 'array<array-key, mixed>',
  ),
  'http_negotiate_language' => 
  array (
    0 => 'string',
    'supported' => 'array<array-key, mixed>',
    'result=' => 'array<array-key, mixed>',
  ),
  'http_parse_cookie' => 
  array (
    0 => 'false|stdClass',
    'cookie' => 'string',
    'flags=' => 'int',
    'allowed_extras=' => 'array<array-key, mixed>',
  ),
  'http_parse_headers' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'header' => 'string',
  ),
  'http_parse_message' => 
  array (
    0 => 'object',
    'message' => 'string',
  ),
  'http_parse_params' => 
  array (
    0 => 'stdClass',
    'param' => 'string',
    'flags=' => 'int',
  ),
  'http_persistent_handles_clean' => 
  array (
    0 => 'string',
    'ident=' => 'string',
  ),
  'http_persistent_handles_count' => 
  array (
    0 => 'false|stdClass',
  ),
  'http_persistent_handles_ident' => 
  array (
    0 => 'false|string',
    'ident=' => 'string',
  ),
  'http_post_data' => 
  array (
    0 => 'string',
    'url' => 'string',
    'data' => 'string',
    'options=' => 'array<array-key, mixed>',
    'info=' => 'array<array-key, mixed>',
  ),
  'http_post_fields' => 
  array (
    0 => 'string',
    'url' => 'string',
    'data' => 'array<array-key, mixed>',
    'files=' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
    'info=' => 'array<array-key, mixed>',
  ),
  'http_put_data' => 
  array (
    0 => 'string',
    'url' => 'string',
    'data' => 'string',
    'options=' => 'array<array-key, mixed>',
    'info=' => 'array<array-key, mixed>',
  ),
  'http_put_file' => 
  array (
    0 => 'string',
    'url' => 'string',
    'file' => 'string',
    'options=' => 'array<array-key, mixed>',
    'info=' => 'array<array-key, mixed>',
  ),
  'http_put_stream' => 
  array (
    0 => 'string',
    'url' => 'string',
    'stream' => 'resource',
    'options=' => 'array<array-key, mixed>',
    'info=' => 'array<array-key, mixed>',
  ),
  'http_redirect' => 
  array (
    0 => 'false|int',
    'url=' => 'string',
    'params=' => 'array<array-key, mixed>',
    'session=' => 'bool',
    'status=' => 'int',
  ),
  'http_request' => 
  array (
    0 => 'string',
    'method' => 'int',
    'url' => 'string',
    'body=' => 'string',
    'options=' => 'array<array-key, mixed>',
    'info=' => 'array<array-key, mixed>',
  ),
  'http_request_body_encode' => 
  array (
    0 => 'false|string',
    'fields' => 'array<array-key, mixed>',
    'files' => 'array<array-key, mixed>',
  ),
  'http_request_method_exists' => 
  array (
    0 => 'bool',
    'method' => 'mixed',
  ),
  'http_request_method_name' => 
  array (
    0 => 'false|string',
    'method' => 'int',
  ),
  'http_request_method_register' => 
  array (
    0 => 'false|int',
    'method' => 'string',
  ),
  'http_request_method_unregister' => 
  array (
    0 => 'bool',
    'method' => 'mixed',
  ),
  'http_response_code' => 
  array (
    0 => 'bool|int',
    'response_code=' => 'int',
  ),
  'http_send_content_disposition' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'inline=' => 'bool',
  ),
  'http_send_content_type' => 
  array (
    0 => 'bool',
    'content_type=' => 'string',
  ),
  'http_send_data' => 
  array (
    0 => 'bool',
    'data' => 'string',
  ),
  'http_send_file' => 
  array (
    0 => 'bool',
    'file' => 'string',
  ),
  'http_send_last_modified' => 
  array (
    0 => 'bool',
    'timestamp=' => 'int',
  ),
  'http_send_status' => 
  array (
    0 => 'bool',
    'status' => 'int',
  ),
  'http_send_stream' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
  ),
  'http_support' => 
  array (
    0 => 'int',
    'feature=' => 'int',
  ),
  'http_throttle' => 
  array (
    0 => 'void',
    'sec' => 'float',
    'bytes=' => 'int',
  ),
  'HttpDeflateStream::__construct' => 
  array (
    0 => 'void',
    'flags=' => 'int',
  ),
  'HttpDeflateStream::factory' => 
  array (
    0 => 'HttpDeflateStream',
    'flags=' => 'int',
    'class_name=' => 'string',
  ),
  'HttpDeflateStream::finish' => 
  array (
    0 => 'string',
    'data=' => 'string',
  ),
  'HttpDeflateStream::flush' => 
  array (
    0 => 'false|string',
    'data=' => 'string',
  ),
  'HttpDeflateStream::update' => 
  array (
    0 => 'false|string',
    'data' => 'string',
  ),
  'HttpInflateStream::__construct' => 
  array (
    0 => 'void',
    'flags=' => 'int',
  ),
  'HttpInflateStream::factory' => 
  array (
    0 => 'HttpInflateStream',
    'flags=' => 'int',
    'class_name=' => 'string',
  ),
  'HttpInflateStream::finish' => 
  array (
    0 => 'string',
    'data=' => 'string',
  ),
  'HttpInflateStream::flush' => 
  array (
    0 => 'false|string',
    'data=' => 'string',
  ),
  'HttpInflateStream::update' => 
  array (
    0 => 'false|string',
    'data' => 'string',
  ),
  'HttpMessage::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
  ),
  'HttpMessage::__toString' => 
  array (
    0 => 'string',
  ),
  'HttpMessage::addHeaders' => 
  array (
    0 => 'void',
    'headers' => 'array<array-key, mixed>',
    'append=' => 'bool',
  ),
  'HttpMessage::count' => 
  array (
    0 => 'int',
  ),
  'HttpMessage::current' => 
  array (
    0 => 'mixed',
  ),
  'HttpMessage::detach' => 
  array (
    0 => 'HttpMessage',
  ),
  'HttpMessage::factory' => 
  array (
    0 => 'HttpMessage|null',
    'raw_message=' => 'string',
    'class_name=' => 'string',
  ),
  'HttpMessage::fromEnv' => 
  array (
    0 => 'HttpMessage|null',
    'message_type' => 'int',
    'class_name=' => 'string',
  ),
  'HttpMessage::fromString' => 
  array (
    0 => 'HttpMessage|null',
    'raw_message=' => 'string',
    'class_name=' => 'string',
  ),
  'HttpMessage::getBody' => 
  array (
    0 => 'string',
  ),
  'HttpMessage::getHeader' => 
  array (
    0 => 'null|string',
    'header' => 'string',
  ),
  'HttpMessage::getHeaders' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'HttpMessage::getHttpVersion' => 
  array (
    0 => 'string',
  ),
  'HttpMessage::getInfo' => 
  array (
    0 => 'mixed',
  ),
  'HttpMessage::getParentMessage' => 
  array (
    0 => 'HttpMessage',
  ),
  'HttpMessage::getRequestMethod' => 
  array (
    0 => 'false|string',
  ),
  'HttpMessage::getRequestUrl' => 
  array (
    0 => 'false|string',
  ),
  'HttpMessage::getResponseCode' => 
  array (
    0 => 'int',
  ),
  'HttpMessage::getResponseStatus' => 
  array (
    0 => 'string',
  ),
  'HttpMessage::getType' => 
  array (
    0 => 'int',
  ),
  'HttpMessage::guessContentType' => 
  array (
    0 => 'false|string',
    'magic_file' => 'string',
    'magic_mode=' => 'int',
  ),
  'HttpMessage::key' => 
  array (
    0 => 'int|string',
  ),
  'HttpMessage::next' => 
  array (
    0 => 'void',
  ),
  'HttpMessage::prepend' => 
  array (
    0 => 'void',
    'message' => 'HttpMessage',
    'top=' => 'bool',
  ),
  'HttpMessage::reverse' => 
  array (
    0 => 'HttpMessage',
  ),
  'HttpMessage::rewind' => 
  array (
    0 => 'void',
  ),
  'HttpMessage::send' => 
  array (
    0 => 'bool',
  ),
  'HttpMessage::serialize' => 
  array (
    0 => 'string',
  ),
  'HttpMessage::setBody' => 
  array (
    0 => 'void',
    'body' => 'string',
  ),
  'HttpMessage::setHeaders' => 
  array (
    0 => 'void',
    'headers' => 'array<array-key, mixed>',
  ),
  'HttpMessage::setHttpVersion' => 
  array (
    0 => 'bool',
    'version' => 'string',
  ),
  'HttpMessage::setInfo' => 
  array (
    0 => 'mixed',
    'http_info' => 'mixed',
  ),
  'HttpMessage::setRequestMethod' => 
  array (
    0 => 'bool',
    'method' => 'string',
  ),
  'HttpMessage::setRequestUrl' => 
  array (
    0 => 'bool',
    'url' => 'string',
  ),
  'HttpMessage::setResponseCode' => 
  array (
    0 => 'bool',
    'code' => 'int',
  ),
  'HttpMessage::setResponseStatus' => 
  array (
    0 => 'bool',
    'status' => 'string',
  ),
  'HttpMessage::setType' => 
  array (
    0 => 'void',
    'type' => 'int',
  ),
  'HttpMessage::toMessageTypeObject' => 
  array (
    0 => 'HttpRequest|HttpResponse|null',
  ),
  'HttpMessage::toString' => 
  array (
    0 => 'string',
    'include_parent=' => 'bool',
  ),
  'HttpMessage::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'HttpMessage::valid' => 
  array (
    0 => 'bool',
  ),
  'HttpQueryString::__construct' => 
  array (
    0 => 'void',
    'global=' => 'bool',
    'add=' => 'mixed',
  ),
  'HttpQueryString::__toString' => 
  array (
    0 => 'string',
  ),
  'HttpQueryString::factory' => 
  array (
    0 => 'mixed',
    'global' => 'mixed',
    'params' => 'mixed',
    'class_name' => 'mixed',
  ),
  'HttpQueryString::get' => 
  array (
    0 => 'mixed',
    'key=' => 'string',
    'type=' => 'mixed',
    'defval=' => 'mixed',
    'delete=' => 'bool',
  ),
  'HttpQueryString::getArray' => 
  array (
    0 => 'mixed',
    'name' => 'mixed',
    'defval' => 'mixed',
    'delete' => 'mixed',
  ),
  'HttpQueryString::getBool' => 
  array (
    0 => 'mixed',
    'name' => 'mixed',
    'defval' => 'mixed',
    'delete' => 'mixed',
  ),
  'HttpQueryString::getFloat' => 
  array (
    0 => 'mixed',
    'name' => 'mixed',
    'defval' => 'mixed',
    'delete' => 'mixed',
  ),
  'HttpQueryString::getInt' => 
  array (
    0 => 'mixed',
    'name' => 'mixed',
    'defval' => 'mixed',
    'delete' => 'mixed',
  ),
  'HttpQueryString::getObject' => 
  array (
    0 => 'mixed',
    'name' => 'mixed',
    'defval' => 'mixed',
    'delete' => 'mixed',
  ),
  'HttpQueryString::getString' => 
  array (
    0 => 'mixed',
    'name' => 'mixed',
    'defval' => 'mixed',
    'delete' => 'mixed',
  ),
  'HttpQueryString::mod' => 
  array (
    0 => 'HttpQueryString',
    'params' => 'mixed',
  ),
  'HttpQueryString::offsetExists' => 
  array (
    0 => 'bool',
    'offset' => 'int|string',
  ),
  'HttpQueryString::offsetGet' => 
  array (
    0 => 'mixed',
    'offset' => 'int|string',
  ),
  'HttpQueryString::offsetSet' => 
  array (
    0 => 'void',
    'offset' => 'int|null|string',
    'value' => 'mixed',
  ),
  'HttpQueryString::offsetUnset' => 
  array (
    0 => 'void',
    'offset' => 'int|string',
  ),
  'HttpQueryString::serialize' => 
  array (
    0 => 'string',
  ),
  'HttpQueryString::set' => 
  array (
    0 => 'string',
    'params' => 'mixed',
  ),
  'HttpQueryString::singleton' => 
  array (
    0 => 'HttpQueryString',
    'global=' => 'bool',
  ),
  'HttpQueryString::toArray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'HttpQueryString::toString' => 
  array (
    0 => 'string',
  ),
  'HttpQueryString::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'HttpQueryString::xlate' => 
  array (
    0 => 'bool',
    'ie' => 'string',
    'oe' => 'string',
  ),
  'HttpRequest::__construct' => 
  array (
    0 => 'void',
    'url=' => 'string',
    'request_method=' => 'int',
    'options=' => 'array<array-key, mixed>',
  ),
  'HttpRequest::addBody' => 
  array (
    0 => 'mixed',
    'request_body_data' => 'mixed',
  ),
  'HttpRequest::addCookies' => 
  array (
    0 => 'bool',
    'cookies' => 'array<array-key, mixed>',
  ),
  'HttpRequest::addHeaders' => 
  array (
    0 => 'bool',
    'headers' => 'array<array-key, mixed>',
  ),
  'HttpRequest::addPostFields' => 
  array (
    0 => 'bool',
    'post_data' => 'array<array-key, mixed>',
  ),
  'HttpRequest::addPostFile' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'file' => 'string',
    'content_type=' => 'string',
  ),
  'HttpRequest::addPutData' => 
  array (
    0 => 'bool',
    'put_data' => 'string',
  ),
  'HttpRequest::addQueryData' => 
  array (
    0 => 'bool',
    'query_params' => 'array<array-key, mixed>',
  ),
  'HttpRequest::addRawPostData' => 
  array (
    0 => 'bool',
    'raw_post_data' => 'string',
  ),
  'HttpRequest::addSslOptions' => 
  array (
    0 => 'bool',
    'options' => 'array<array-key, mixed>',
  ),
  'HttpRequest::clearHistory' => 
  array (
    0 => 'void',
  ),
  'HttpRequest::enableCookies' => 
  array (
    0 => 'bool',
  ),
  'HttpRequest::encodeBody' => 
  array (
    0 => 'mixed',
    'fields' => 'mixed',
    'files' => 'mixed',
  ),
  'HttpRequest::factory' => 
  array (
    0 => 'mixed',
    'url' => 'mixed',
    'method' => 'mixed',
    'options' => 'mixed',
    'class_name' => 'mixed',
  ),
  'HttpRequest::flushCookies' => 
  array (
    0 => 'mixed',
  ),
  'HttpRequest::get' => 
  array (
    0 => 'mixed',
    'url' => 'mixed',
    'options' => 'mixed',
    '&info' => 'mixed',
  ),
  'HttpRequest::getBody' => 
  array (
    0 => 'mixed',
  ),
  'HttpRequest::getContentType' => 
  array (
    0 => 'string',
  ),
  'HttpRequest::getCookies' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'HttpRequest::getHeaders' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'HttpRequest::getHistory' => 
  array (
    0 => 'HttpMessage',
  ),
  'HttpRequest::getMethod' => 
  array (
    0 => 'int',
  ),
  'HttpRequest::getOptions' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'HttpRequest::getPostFields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'HttpRequest::getPostFiles' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'HttpRequest::getPutData' => 
  array (
    0 => 'string',
  ),
  'HttpRequest::getPutFile' => 
  array (
    0 => 'string',
  ),
  'HttpRequest::getQueryData' => 
  array (
    0 => 'string',
  ),
  'HttpRequest::getRawPostData' => 
  array (
    0 => 'string',
  ),
  'HttpRequest::getRawRequestMessage' => 
  array (
    0 => 'string',
  ),
  'HttpRequest::getRawResponseMessage' => 
  array (
    0 => 'string',
  ),
  'HttpRequest::getRequestMessage' => 
  array (
    0 => 'HttpMessage',
  ),
  'HttpRequest::getResponseBody' => 
  array (
    0 => 'string',
  ),
  'HttpRequest::getResponseCode' => 
  array (
    0 => 'int',
  ),
  'HttpRequest::getResponseCookies' => 
  array (
    0 => 'array<array-key, stdClass>',
    'flags=' => 'int',
    'allowed_extras=' => 'array<array-key, mixed>',
  ),
  'HttpRequest::getResponseData' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'HttpRequest::getResponseHeader' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
  ),
  'HttpRequest::getResponseInfo' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
  ),
  'HttpRequest::getResponseMessage' => 
  array (
    0 => 'HttpMessage',
  ),
  'HttpRequest::getResponseStatus' => 
  array (
    0 => 'string',
  ),
  'HttpRequest::getSslOptions' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'HttpRequest::getUrl' => 
  array (
    0 => 'string',
  ),
  'HttpRequest::head' => 
  array (
    0 => 'mixed',
    'url' => 'mixed',
    'options' => 'mixed',
    '&info' => 'mixed',
  ),
  'HttpRequest::methodExists' => 
  array (
    0 => 'mixed',
    'method' => 'mixed',
  ),
  'HttpRequest::methodName' => 
  array (
    0 => 'mixed',
    'method_id' => 'mixed',
  ),
  'HttpRequest::methodRegister' => 
  array (
    0 => 'mixed',
    'method_name' => 'mixed',
  ),
  'HttpRequest::methodUnregister' => 
  array (
    0 => 'mixed',
    'method' => 'mixed',
  ),
  'HttpRequest::postData' => 
  array (
    0 => 'mixed',
    'url' => 'mixed',
    'data' => 'mixed',
    'options' => 'mixed',
    '&info' => 'mixed',
  ),
  'HttpRequest::postFields' => 
  array (
    0 => 'mixed',
    'url' => 'mixed',
    'data' => 'mixed',
    'options' => 'mixed',
    '&info' => 'mixed',
  ),
  'HttpRequest::putData' => 
  array (
    0 => 'mixed',
    'url' => 'mixed',
    'data' => 'mixed',
    'options' => 'mixed',
    '&info' => 'mixed',
  ),
  'HttpRequest::putFile' => 
  array (
    0 => 'mixed',
    'url' => 'mixed',
    'file' => 'mixed',
    'options' => 'mixed',
    '&info' => 'mixed',
  ),
  'HttpRequest::putStream' => 
  array (
    0 => 'mixed',
    'url' => 'mixed',
    'stream' => 'mixed',
    'options' => 'mixed',
    '&info' => 'mixed',
  ),
  'HttpRequest::resetCookies' => 
  array (
    0 => 'bool',
    'session_only=' => 'bool',
  ),
  'HttpRequest::send' => 
  array (
    0 => 'HttpMessage',
  ),
  'HttpRequest::setBody' => 
  array (
    0 => 'bool',
    'request_body_data=' => 'string',
  ),
  'HttpRequest::setContentType' => 
  array (
    0 => 'bool',
    'content_type' => 'string',
  ),
  'HttpRequest::setCookies' => 
  array (
    0 => 'bool',
    'cookies=' => 'array<array-key, mixed>',
  ),
  'HttpRequest::setHeaders' => 
  array (
    0 => 'bool',
    'headers=' => 'array<array-key, mixed>',
  ),
  'HttpRequest::setMethod' => 
  array (
    0 => 'bool',
    'request_method' => 'int',
  ),
  'HttpRequest::setOptions' => 
  array (
    0 => 'bool',
    'options=' => 'array<array-key, mixed>',
  ),
  'HttpRequest::setPostFields' => 
  array (
    0 => 'bool',
    'post_data' => 'array<array-key, mixed>',
  ),
  'HttpRequest::setPostFiles' => 
  array (
    0 => 'bool',
    'post_files' => 'array<array-key, mixed>',
  ),
  'HttpRequest::setPutData' => 
  array (
    0 => 'bool',
    'put_data=' => 'string',
  ),
  'HttpRequest::setPutFile' => 
  array (
    0 => 'bool',
    'file=' => 'string',
  ),
  'HttpRequest::setQueryData' => 
  array (
    0 => 'bool',
    'query_data' => 'mixed',
  ),
  'HttpRequest::setRawPostData' => 
  array (
    0 => 'bool',
    'raw_post_data=' => 'string',
  ),
  'HttpRequest::setSslOptions' => 
  array (
    0 => 'bool',
    'options=' => 'array<array-key, mixed>',
  ),
  'HttpRequest::setUrl' => 
  array (
    0 => 'bool',
    'url' => 'string',
  ),
  'HttpRequestDataShare::__construct' => 
  array (
    0 => 'void',
  ),
  'HttpRequestDataShare::__destruct' => 
  array (
    0 => 'void',
  ),
  'HttpRequestDataShare::attach' => 
  array (
    0 => 'mixed',
    'request' => 'HttpRequest',
  ),
  'HttpRequestDataShare::count' => 
  array (
    0 => 'int',
  ),
  'HttpRequestDataShare::detach' => 
  array (
    0 => 'mixed',
    'request' => 'HttpRequest',
  ),
  'HttpRequestDataShare::factory' => 
  array (
    0 => 'mixed',
    'global' => 'mixed',
    'class_name' => 'mixed',
  ),
  'HttpRequestDataShare::reset' => 
  array (
    0 => 'mixed',
  ),
  'HttpRequestDataShare::singleton' => 
  array (
    0 => 'mixed',
    'global' => 'mixed',
  ),
  'HttpRequestPool::__construct' => 
  array (
    0 => 'void',
    'request=' => 'HttpRequest',
  ),
  'HttpRequestPool::__destruct' => 
  array (
    0 => 'void',
  ),
  'HttpRequestPool::attach' => 
  array (
    0 => 'bool',
    'request' => 'HttpRequest',
  ),
  'HttpRequestPool::count' => 
  array (
    0 => 'int',
  ),
  'HttpRequestPool::current' => 
  array (
    0 => 'mixed',
  ),
  'HttpRequestPool::detach' => 
  array (
    0 => 'bool',
    'request' => 'HttpRequest',
  ),
  'HttpRequestPool::enableEvents' => 
  array (
    0 => 'mixed',
    'enable' => 'mixed',
  ),
  'HttpRequestPool::enablePipelining' => 
  array (
    0 => 'mixed',
    'enable' => 'mixed',
  ),
  'HttpRequestPool::getAttachedRequests' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'HttpRequestPool::getFinishedRequests' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'HttpRequestPool::key' => 
  array (
    0 => 'int|string',
  ),
  'HttpRequestPool::next' => 
  array (
    0 => 'void',
  ),
  'HttpRequestPool::reset' => 
  array (
    0 => 'void',
  ),
  'HttpRequestPool::rewind' => 
  array (
    0 => 'void',
  ),
  'HttpRequestPool::send' => 
  array (
    0 => 'bool',
  ),
  'HttpRequestPool::socketPerform' => 
  array (
    0 => 'bool',
  ),
  'HttpRequestPool::socketSelect' => 
  array (
    0 => 'bool',
    'timeout=' => 'float',
  ),
  'HttpRequestPool::valid' => 
  array (
    0 => 'bool',
  ),
  'HttpResponse::capture' => 
  array (
    0 => 'void',
  ),
  'HttpResponse::getBufferSize' => 
  array (
    0 => 'int',
  ),
  'HttpResponse::getCache' => 
  array (
    0 => 'bool',
  ),
  'HttpResponse::getCacheControl' => 
  array (
    0 => 'string',
  ),
  'HttpResponse::getContentDisposition' => 
  array (
    0 => 'string',
  ),
  'HttpResponse::getContentType' => 
  array (
    0 => 'string',
  ),
  'HttpResponse::getData' => 
  array (
    0 => 'string',
  ),
  'HttpResponse::getETag' => 
  array (
    0 => 'string',
  ),
  'HttpResponse::getFile' => 
  array (
    0 => 'string',
  ),
  'HttpResponse::getGzip' => 
  array (
    0 => 'bool',
  ),
  'HttpResponse::getHeader' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
  ),
  'HttpResponse::getLastModified' => 
  array (
    0 => 'int',
  ),
  'HttpResponse::getRequestBody' => 
  array (
    0 => 'string',
  ),
  'HttpResponse::getRequestBodyStream' => 
  array (
    0 => 'resource',
  ),
  'HttpResponse::getRequestHeaders' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'HttpResponse::getStream' => 
  array (
    0 => 'resource',
  ),
  'HttpResponse::getThrottleDelay' => 
  array (
    0 => 'float',
  ),
  'HttpResponse::guessContentType' => 
  array (
    0 => 'false|string',
    'magic_file' => 'string',
    'magic_mode=' => 'int',
  ),
  'HttpResponse::redirect' => 
  array (
    0 => 'void',
    'url=' => 'string',
    'params=' => 'array<array-key, mixed>',
    'session=' => 'bool',
    'status=' => 'int',
  ),
  'HttpResponse::send' => 
  array (
    0 => 'bool',
    'clean_ob=' => 'bool',
  ),
  'HttpResponse::setBufferSize' => 
  array (
    0 => 'bool',
    'bytes' => 'int',
  ),
  'HttpResponse::setCache' => 
  array (
    0 => 'bool',
    'cache' => 'bool',
  ),
  'HttpResponse::setCacheControl' => 
  array (
    0 => 'bool',
    'control' => 'string',
    'max_age=' => 'int',
    'must_revalidate=' => 'bool',
  ),
  'HttpResponse::setContentDisposition' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'inline=' => 'bool',
  ),
  'HttpResponse::setContentType' => 
  array (
    0 => 'bool',
    'content_type' => 'string',
  ),
  'HttpResponse::setData' => 
  array (
    0 => 'bool',
    'data' => 'mixed',
  ),
  'HttpResponse::setETag' => 
  array (
    0 => 'bool',
    'etag' => 'string',
  ),
  'HttpResponse::setFile' => 
  array (
    0 => 'bool',
    'file' => 'string',
  ),
  'HttpResponse::setGzip' => 
  array (
    0 => 'bool',
    'gzip' => 'bool',
  ),
  'HttpResponse::setHeader' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value=' => 'mixed',
    'replace=' => 'bool',
  ),
  'HttpResponse::setLastModified' => 
  array (
    0 => 'bool',
    'timestamp' => 'int',
  ),
  'HttpResponse::setStream' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
  ),
  'HttpResponse::setThrottleDelay' => 
  array (
    0 => 'bool',
    'seconds' => 'float',
  ),
  'HttpResponse::status' => 
  array (
    0 => 'bool',
    'status' => 'int',
  ),
  'HttpUtil::buildCookie' => 
  array (
    0 => 'mixed',
    'cookie_array' => 'mixed',
  ),
  'HttpUtil::buildStr' => 
  array (
    0 => 'mixed',
    'query' => 'mixed',
    'prefix' => 'mixed',
    'arg_sep' => 'mixed',
  ),
  'HttpUtil::buildUrl' => 
  array (
    0 => 'mixed',
    'url' => 'mixed',
    'parts' => 'mixed',
    'flags' => 'mixed',
    '&composed' => 'mixed',
  ),
  'HttpUtil::chunkedDecode' => 
  array (
    0 => 'mixed',
    'encoded_string' => 'mixed',
  ),
  'HttpUtil::date' => 
  array (
    0 => 'mixed',
    'timestamp' => 'mixed',
  ),
  'HttpUtil::deflate' => 
  array (
    0 => 'mixed',
    'plain' => 'mixed',
    'flags' => 'mixed',
  ),
  'HttpUtil::inflate' => 
  array (
    0 => 'mixed',
    'encoded' => 'mixed',
  ),
  'HttpUtil::matchEtag' => 
  array (
    0 => 'mixed',
    'plain_etag' => 'mixed',
    'for_range' => 'mixed',
  ),
  'HttpUtil::matchModified' => 
  array (
    0 => 'mixed',
    'last_modified' => 'mixed',
    'for_range' => 'mixed',
  ),
  'HttpUtil::matchRequestHeader' => 
  array (
    0 => 'mixed',
    'header_name' => 'mixed',
    'header_value' => 'mixed',
    'case_sensitive' => 'mixed',
  ),
  'HttpUtil::negotiateCharset' => 
  array (
    0 => 'mixed',
    'supported' => 'mixed',
    '&result' => 'mixed',
  ),
  'HttpUtil::negotiateContentType' => 
  array (
    0 => 'mixed',
    'supported' => 'mixed',
    '&result' => 'mixed',
  ),
  'HttpUtil::negotiateLanguage' => 
  array (
    0 => 'mixed',
    'supported' => 'mixed',
    '&result' => 'mixed',
  ),
  'HttpUtil::parseCookie' => 
  array (
    0 => 'mixed',
    'cookie_string' => 'mixed',
  ),
  'HttpUtil::parseHeaders' => 
  array (
    0 => 'mixed',
    'headers_string' => 'mixed',
  ),
  'HttpUtil::parseMessage' => 
  array (
    0 => 'mixed',
    'message_string' => 'mixed',
  ),
  'HttpUtil::parseParams' => 
  array (
    0 => 'mixed',
    'param_string' => 'mixed',
    'flags' => 'mixed',
  ),
  'HttpUtil::support' => 
  array (
    0 => 'mixed',
    'feature' => 'mixed',
  ),
  'hw_api::checkin' => 
  array (
    0 => 'bool',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::checkout' => 
  array (
    0 => 'bool',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::children' => 
  array (
    0 => 'array<array-key, mixed>',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::content' => 
  array (
    0 => 'HW_API_Content',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::copy' => 
  array (
    0 => 'hw_api_content',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::dbstat' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::dcstat' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::dstanchors' => 
  array (
    0 => 'array<array-key, mixed>',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::dstofsrcanchor' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::find' => 
  array (
    0 => 'array<array-key, mixed>',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::ftstat' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::hwstat' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::identify' => 
  array (
    0 => 'bool',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::info' => 
  array (
    0 => 'array<array-key, mixed>',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::insert' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::insertanchor' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::insertcollection' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::insertdocument' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::link' => 
  array (
    0 => 'bool',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::lock' => 
  array (
    0 => 'bool',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::move' => 
  array (
    0 => 'bool',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::object' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::objectbyanchor' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::parents' => 
  array (
    0 => 'array<array-key, mixed>',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::remove' => 
  array (
    0 => 'bool',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::replace' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::setcommittedversion' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::srcanchors' => 
  array (
    0 => 'array<array-key, mixed>',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::srcsofdst' => 
  array (
    0 => 'array<array-key, mixed>',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::unlock' => 
  array (
    0 => 'bool',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::user' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::userlist' => 
  array (
    0 => 'array<array-key, mixed>',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api_attribute' => 
  array (
    0 => 'HW_API_Attribute',
    'name=' => 'string',
    'value=' => 'string',
  ),
  'hw_api_attribute::key' => 
  array (
    0 => 'string',
  ),
  'hw_api_attribute::langdepvalue' => 
  array (
    0 => 'string',
    'language' => 'string',
  ),
  'hw_api_attribute::value' => 
  array (
    0 => 'string',
  ),
  'hw_api_attribute::values' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'hw_api_content' => 
  array (
    0 => 'HW_API_Content',
    'content' => 'string',
    'mimetype' => 'string',
  ),
  'hw_api_content::mimetype' => 
  array (
    0 => 'string',
  ),
  'hw_api_content::read' => 
  array (
    0 => 'string',
    'buffer' => 'string',
    'length' => 'int',
  ),
  'hw_api_error::count' => 
  array (
    0 => 'int',
  ),
  'hw_api_error::reason' => 
  array (
    0 => 'HW_API_Reason',
  ),
  'hw_api_object' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api_object::assign' => 
  array (
    0 => 'bool',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api_object::attreditable' => 
  array (
    0 => 'bool',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api_object::count' => 
  array (
    0 => 'int',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api_object::insert' => 
  array (
    0 => 'bool',
    'attribute' => 'hw_api_attribute',
  ),
  'hw_api_object::remove' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'hw_api_object::title' => 
  array (
    0 => 'string',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api_object::value' => 
  array (
    0 => 'string',
    'name' => 'string',
  ),
  'hw_api_reason::description' => 
  array (
    0 => 'string',
  ),
  'hw_api_reason::type' => 
  array (
    0 => 'HW_API_Reason',
  ),
  'hw_Array2Objrec' => 
  array (
    0 => 'string',
    'object_array' => 'array<array-key, mixed>',
  ),
  'hw_changeobject' => 
  array (
    0 => 'bool',
    'link' => 'int',
    'objid' => 'int',
    'attributes' => 'array<array-key, mixed>',
  ),
  'hw_Children' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'objectid' => 'int',
  ),
  'hw_ChildrenObj' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'objectid' => 'int',
  ),
  'hw_Close' => 
  array (
    0 => 'bool',
    'connection' => 'int',
  ),
  'hw_Connect' => 
  array (
    0 => 'int',
    'host' => 'string',
    'port' => 'int',
    'username=' => 'string',
    'password=' => 'string',
  ),
  'hw_connection_info' => 
  array (
    0 => 'mixed',
    'link' => 'int',
  ),
  'hw_cp' => 
  array (
    0 => 'int',
    'connection' => 'int',
    'object_id_array' => 'array<array-key, mixed>',
    'destination_id' => 'int',
  ),
  'hw_Deleteobject' => 
  array (
    0 => 'bool',
    'connection' => 'int',
    'object_to_delete' => 'int',
  ),
  'hw_DocByAnchor' => 
  array (
    0 => 'int',
    'connection' => 'int',
    'anchorid' => 'int',
  ),
  'hw_DocByAnchorObj' => 
  array (
    0 => 'string',
    'connection' => 'int',
    'anchorid' => 'int',
  ),
  'hw_Document_Attributes' => 
  array (
    0 => 'string',
    'hw_document' => 'int',
  ),
  'hw_Document_BodyTag' => 
  array (
    0 => 'string',
    'hw_document' => 'int',
    'prefix=' => 'string',
  ),
  'hw_Document_Content' => 
  array (
    0 => 'string',
    'hw_document' => 'int',
  ),
  'hw_Document_SetContent' => 
  array (
    0 => 'bool',
    'hw_document' => 'int',
    'content' => 'string',
  ),
  'hw_Document_Size' => 
  array (
    0 => 'int',
    'hw_document' => 'int',
  ),
  'hw_dummy' => 
  array (
    0 => 'string',
    'link' => 'int',
    'id' => 'int',
    'msgid' => 'int',
  ),
  'hw_EditText' => 
  array (
    0 => 'bool',
    'connection' => 'int',
    'hw_document' => 'int',
  ),
  'hw_Error' => 
  array (
    0 => 'int',
    'connection' => 'int',
  ),
  'hw_ErrorMsg' => 
  array (
    0 => 'string',
    'connection' => 'int',
  ),
  'hw_Free_Document' => 
  array (
    0 => 'bool',
    'hw_document' => 'int',
  ),
  'hw_GetAnchors' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'objectid' => 'int',
  ),
  'hw_GetAnchorsObj' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'objectid' => 'int',
  ),
  'hw_GetAndLock' => 
  array (
    0 => 'string',
    'connection' => 'int',
    'objectid' => 'int',
  ),
  'hw_GetChildColl' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'objectid' => 'int',
  ),
  'hw_GetChildCollObj' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'objectid' => 'int',
  ),
  'hw_GetChildDocColl' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'objectid' => 'int',
  ),
  'hw_GetChildDocCollObj' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'objectid' => 'int',
  ),
  'hw_GetObject' => 
  array (
    0 => 'mixed',
    'connection' => 'int',
    'objectid' => 'mixed',
    'query=' => 'string',
  ),
  'hw_GetObjectByQuery' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'query' => 'string',
    'max_hits' => 'int',
  ),
  'hw_GetObjectByQueryColl' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'objectid' => 'int',
    'query' => 'string',
    'max_hits' => 'int',
  ),
  'hw_GetObjectByQueryCollObj' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'objectid' => 'int',
    'query' => 'string',
    'max_hits' => 'int',
  ),
  'hw_GetObjectByQueryObj' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'query' => 'string',
    'max_hits' => 'int',
  ),
  'hw_GetParents' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'objectid' => 'int',
  ),
  'hw_GetParentsObj' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'objectid' => 'int',
  ),
  'hw_getrellink' => 
  array (
    0 => 'string',
    'link' => 'int',
    'rootid' => 'int',
    'sourceid' => 'int',
    'destid' => 'int',
  ),
  'hw_GetRemote' => 
  array (
    0 => 'int',
    'connection' => 'int',
    'objectid' => 'int',
  ),
  'hw_getremotechildren' => 
  array (
    0 => 'mixed',
    'connection' => 'int',
    'object_record' => 'string',
  ),
  'hw_GetSrcByDestObj' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'objectid' => 'int',
  ),
  'hw_GetText' => 
  array (
    0 => 'int',
    'connection' => 'int',
    'objectid' => 'int',
    'prefix=' => 'mixed',
  ),
  'hw_getusername' => 
  array (
    0 => 'string',
    'connection' => 'int',
  ),
  'hw_Identify' => 
  array (
    0 => 'string',
    'link' => 'int',
    'username' => 'string',
    'password' => 'string',
  ),
  'hw_InCollections' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'object_id_array' => 'array<array-key, mixed>',
    'collection_id_array' => 'array<array-key, mixed>',
    'return_collections' => 'int',
  ),
  'hw_Info' => 
  array (
    0 => 'string',
    'connection' => 'int',
  ),
  'hw_InsColl' => 
  array (
    0 => 'int',
    'connection' => 'int',
    'objectid' => 'int',
    'object_array' => 'array<array-key, mixed>',
  ),
  'hw_InsDoc' => 
  array (
    0 => 'int',
    'connection' => 'mixed',
    'parentid' => 'int',
    'object_record' => 'string',
    'text=' => 'string',
  ),
  'hw_insertanchors' => 
  array (
    0 => 'bool',
    'hwdoc' => 'int',
    'anchorecs' => 'array<array-key, mixed>',
    'dest' => 'array<array-key, mixed>',
    'urlprefixes=' => 'array<array-key, mixed>',
  ),
  'hw_InsertDocument' => 
  array (
    0 => 'int',
    'connection' => 'int',
    'parent_id' => 'int',
    'hw_document' => 'int',
  ),
  'hw_InsertObject' => 
  array (
    0 => 'int',
    'connection' => 'int',
    'object_rec' => 'string',
    'parameter' => 'string',
  ),
  'hw_mapid' => 
  array (
    0 => 'int',
    'connection' => 'int',
    'server_id' => 'int',
    'object_id' => 'int',
  ),
  'hw_Modifyobject' => 
  array (
    0 => 'bool',
    'connection' => 'int',
    'object_to_change' => 'int',
    'remove' => 'array<array-key, mixed>',
    'add' => 'array<array-key, mixed>',
    'mode=' => 'int',
  ),
  'hw_mv' => 
  array (
    0 => 'int',
    'connection' => 'int',
    'object_id_array' => 'array<array-key, mixed>',
    'source_id' => 'int',
    'destination_id' => 'int',
  ),
  'hw_New_Document' => 
  array (
    0 => 'int',
    'object_record' => 'string',
    'document_data' => 'string',
    'document_size' => 'int',
  ),
  'hw_objrec2array' => 
  array (
    0 => 'array<array-key, mixed>',
    'object_record' => 'string',
    'format=' => 'array<array-key, mixed>',
  ),
  'hw_Output_Document' => 
  array (
    0 => 'bool',
    'hw_document' => 'int',
  ),
  'hw_pConnect' => 
  array (
    0 => 'int',
    'host' => 'string',
    'port' => 'int',
    'username=' => 'string',
    'password=' => 'string',
  ),
  'hw_PipeDocument' => 
  array (
    0 => 'int',
    'connection' => 'int',
    'objectid' => 'int',
    'url_prefixes=' => 'array<array-key, mixed>',
  ),
  'hw_Root' => 
  array (
    0 => 'int',
  ),
  'hw_setlinkroot' => 
  array (
    0 => 'int',
    'link' => 'int',
    'rootid' => 'int',
  ),
  'hw_stat' => 
  array (
    0 => 'string',
    'link' => 'int',
  ),
  'hw_Unlock' => 
  array (
    0 => 'bool',
    'connection' => 'int',
    'objectid' => 'int',
  ),
  'hw_Who' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
  ),
  'hwapi_attribute_new' => 
  array (
    0 => 'HW_API_Attribute',
    'name=' => 'string',
    'value=' => 'string',
  ),
  'hwapi_content_new' => 
  array (
    0 => 'HW_API_Content',
    'content' => 'string',
    'mimetype' => 'string',
  ),
  'hwapi_hgcsp' => 
  array (
    0 => 'HW_API',
    'hostname' => 'string',
    'port=' => 'int',
  ),
  'hwapi_object_new' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hypot' => 
  array (
    0 => 'float',
    'x' => 'float',
    'y' => 'float',
  ),
  'ibase_add_user' => 
  array (
    0 => 'bool',
    'service_handle' => 'resource',
    'user_name' => 'string',
    'password' => 'string',
    'first_name=' => 'string',
    'middle_name=' => 'string',
    'last_name=' => 'string',
  ),
  'ibase_affected_rows' => 
  array (
    0 => 'int',
    'link_identifier=' => 'resource',
  ),
  'ibase_backup' => 
  array (
    0 => 'mixed',
    'service_handle' => 'resource',
    'source_db' => 'string',
    'dest_file' => 'string',
    'options=' => 'int',
    'verbose=' => 'bool',
  ),
  'ibase_blob_add' => 
  array (
    0 => 'void',
    'blob_handle' => 'resource',
    'data' => 'string',
  ),
  'ibase_blob_cancel' => 
  array (
    0 => 'bool',
    'blob_handle' => 'resource',
  ),
  'ibase_blob_close' => 
  array (
    0 => 'bool|string',
    'blob_handle' => 'resource',
  ),
  'ibase_blob_create' => 
  array (
    0 => 'resource',
    'link_identifier=' => 'resource',
  ),
  'ibase_blob_echo' => 
  array (
    0 => 'bool',
    'link_identifier' => 'mixed',
    'blob_id' => 'string',
  ),
  'ibase_blob_echo\'1' => 
  array (
    0 => 'bool',
    'blob_id' => 'string',
  ),
  'ibase_blob_get' => 
  array (
    0 => 'false|string',
    'blob_handle' => 'resource',
    'length' => 'int',
  ),
  'ibase_blob_import' => 
  array (
    0 => 'false|string',
    'link_identifier' => 'resource',
    'file_handle' => 'resource',
  ),
  'ibase_blob_info' => 
  array (
    0 => 'array<array-key, mixed>',
    'link_identifier' => 'resource',
    'blob_id' => 'string',
  ),
  'ibase_blob_info\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'blob_id' => 'string',
  ),
  'ibase_blob_open' => 
  array (
    0 => 'false|resource',
    'link_identifier' => 'mixed',
    'blob_id' => 'string',
  ),
  'ibase_blob_open\'1' => 
  array (
    0 => 'resource',
    'blob_id' => 'string',
  ),
  'ibase_close' => 
  array (
    0 => 'bool',
    'link_identifier=' => 'resource',
  ),
  'ibase_commit' => 
  array (
    0 => 'bool',
    'link_identifier=' => 'resource',
  ),
  'ibase_commit_ret' => 
  array (
    0 => 'bool',
    'link_identifier=' => 'resource',
  ),
  'ibase_connect' => 
  array (
    0 => 'false|resource',
    'database=' => 'string',
    'username=' => 'string',
    'password=' => 'string',
    'charset=' => 'string',
    'buffers=' => 'int',
    'dialect=' => 'int',
    'role=' => 'string',
  ),
  'ibase_db_info' => 
  array (
    0 => 'string',
    'service_handle' => 'resource',
    'db' => 'string',
    'action' => 'int',
    'argument=' => 'int',
  ),
  'ibase_delete_user' => 
  array (
    0 => 'bool',
    'service_handle' => 'resource',
    'user_name' => 'string',
    'password=' => 'string',
    'first_name=' => 'string',
    'middle_name=' => 'string',
    'last_name=' => 'string',
  ),
  'ibase_drop_db' => 
  array (
    0 => 'bool',
    'link_identifier=' => 'resource',
  ),
  'ibase_errcode' => 
  array (
    0 => 'false|int',
  ),
  'ibase_errmsg' => 
  array (
    0 => 'false|string',
  ),
  'ibase_execute' => 
  array (
    0 => 'false|resource',
    'query' => 'resource',
    'bind_arg=' => 'mixed',
    '...args=' => 'mixed',
  ),
  'ibase_fetch_assoc' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'result' => 'resource',
    'fetch_flags=' => 'int',
  ),
  'ibase_fetch_object' => 
  array (
    0 => 'false|object',
    'result' => 'resource',
    'fetch_flags=' => 'int',
  ),
  'ibase_fetch_row' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'result' => 'resource',
    'fetch_flags=' => 'int',
  ),
  'ibase_field_info' => 
  array (
    0 => 'array<array-key, mixed>',
    'query_result' => 'resource',
    'field_number' => 'int',
  ),
  'ibase_free_event_handler' => 
  array (
    0 => 'bool',
    'event' => 'resource',
  ),
  'ibase_free_query' => 
  array (
    0 => 'bool',
    'query' => 'resource',
  ),
  'ibase_free_result' => 
  array (
    0 => 'bool',
    'result' => 'resource',
  ),
  'ibase_gen_id' => 
  array (
    0 => 'int|string',
    'generator' => 'string',
    'increment=' => 'int',
    'link_identifier=' => 'resource',
  ),
  'ibase_maintain_db' => 
  array (
    0 => 'bool',
    'service_handle' => 'resource',
    'db' => 'string',
    'action' => 'int',
    'argument=' => 'int',
  ),
  'ibase_modify_user' => 
  array (
    0 => 'bool',
    'service_handle' => 'resource',
    'user_name' => 'string',
    'password' => 'string',
    'first_name=' => 'string',
    'middle_name=' => 'string',
    'last_name=' => 'string',
  ),
  'ibase_name_result' => 
  array (
    0 => 'bool',
    'result' => 'resource',
    'name' => 'string',
  ),
  'ibase_num_fields' => 
  array (
    0 => 'int',
    'query_result' => 'resource',
  ),
  'ibase_num_params' => 
  array (
    0 => 'int',
    'query' => 'resource',
  ),
  'ibase_num_rows' => 
  array (
    0 => 'int',
    'result_identifier' => 'mixed',
  ),
  'ibase_param_info' => 
  array (
    0 => 'array<array-key, mixed>',
    'query' => 'resource',
    'field_number' => 'int',
  ),
  'ibase_pconnect' => 
  array (
    0 => 'false|resource',
    'database=' => 'string',
    'username=' => 'string',
    'password=' => 'string',
    'charset=' => 'string',
    'buffers=' => 'int',
    'dialect=' => 'int',
    'role=' => 'string',
  ),
  'ibase_prepare' => 
  array (
    0 => 'false|resource',
    'link_identifier' => 'mixed',
    'query' => 'string',
    'trans_identifier' => 'mixed',
  ),
  'ibase_query' => 
  array (
    0 => 'false|resource',
    'link_identifier=' => 'resource',
    'string=' => 'string',
    'bind_arg=' => 'int',
    '...args=' => 'mixed',
  ),
  'ibase_restore' => 
  array (
    0 => 'mixed',
    'service_handle' => 'resource',
    'source_file' => 'string',
    'dest_db' => 'string',
    'options=' => 'int',
    'verbose=' => 'bool',
  ),
  'ibase_rollback' => 
  array (
    0 => 'bool',
    'link_identifier=' => 'resource',
  ),
  'ibase_rollback_ret' => 
  array (
    0 => 'bool',
    'link_identifier=' => 'resource',
  ),
  'ibase_server_info' => 
  array (
    0 => 'string',
    'service_handle' => 'resource',
    'action' => 'int',
  ),
  'ibase_service_attach' => 
  array (
    0 => 'resource',
    'host' => 'string',
    'dba_username' => 'string',
    'dba_password' => 'string',
  ),
  'ibase_service_detach' => 
  array (
    0 => 'bool',
    'service_handle' => 'resource',
  ),
  'ibase_set_event_handler' => 
  array (
    0 => 'resource',
    'link_identifier' => 'mixed',
    'callback' => 'callable',
    'event=' => 'string',
    '...args=' => 'mixed',
  ),
  'ibase_set_event_handler\'1' => 
  array (
    0 => 'resource',
    'callback' => 'callable',
    'event' => 'string',
    '...args' => 'mixed',
  ),
  'ibase_timefmt' => 
  array (
    0 => 'bool',
    'format' => 'string',
    'columntype=' => 'int',
  ),
  'ibase_trans' => 
  array (
    0 => 'false|resource',
    'trans_args=' => 'int',
    'link_identifier=' => 'mixed',
    '...args=' => 'mixed',
  ),
  'ibase_wait_event' => 
  array (
    0 => 'string',
    'link_identifier' => 'mixed',
    'event=' => 'string',
    '...args=' => 'mixed',
  ),
  'ibase_wait_event\'1' => 
  array (
    0 => 'string',
    'event' => 'string',
    '...args' => 'mixed',
  ),
  'iconv' => 
  array (
    0 => 'false|string',
    'from_encoding' => 'string',
    'to_encoding' => 'string',
    'string' => 'string',
  ),
  'iconv_get_encoding' => 
  array (
    0 => 'array<array-key, mixed>|false|string',
    'type=' => 'string',
  ),
  'iconv_mime_decode' => 
  array (
    0 => 'false|string',
    'string' => 'string',
    'mode=' => 'int',
    'encoding=' => 'null|string',
  ),
  'iconv_mime_decode_headers' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'headers' => 'string',
    'mode=' => 'int',
    'encoding=' => 'null|string',
  ),
  'iconv_mime_encode' => 
  array (
    0 => 'false|string',
    'field_name' => 'string',
    'field_value' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'iconv_set_encoding' => 
  array (
    0 => 'bool',
    'type' => 'string',
    'encoding' => 'string',
  ),
  'iconv_strlen' => 
  array (
    0 => 'false|int<0, max>',
    'string' => 'string',
    'encoding=' => 'null|string',
  ),
  'iconv_strpos' => 
  array (
    0 => 'false|int',
    'haystack' => 'string',
    'needle' => 'string',
    'offset=' => 'int',
    'encoding=' => 'null|string',
  ),
  'iconv_strrpos' => 
  array (
    0 => 'false|int',
    'haystack' => 'string',
    'needle' => 'string',
    'encoding=' => 'null|string',
  ),
  'iconv_substr' => 
  array (
    0 => 'false|string',
    'string' => 'string',
    'offset' => 'int',
    'length=' => 'int|null',
    'encoding=' => 'null|string',
  ),
  'id3_get_frame_long_name' => 
  array (
    0 => 'string',
    'frameid' => 'string',
  ),
  'id3_get_frame_short_name' => 
  array (
    0 => 'string',
    'frameid' => 'string',
  ),
  'id3_get_genre_id' => 
  array (
    0 => 'int',
    'genre' => 'string',
  ),
  'id3_get_genre_list' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'id3_get_genre_name' => 
  array (
    0 => 'string',
    'genre_id' => 'int',
  ),
  'id3_get_tag' => 
  array (
    0 => 'array<array-key, mixed>',
    'filename' => 'string',
    'version=' => 'int',
  ),
  'id3_get_version' => 
  array (
    0 => 'int',
    'filename' => 'string',
  ),
  'id3_remove_tag' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'version=' => 'int',
  ),
  'id3_set_tag' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'tag' => 'array<array-key, mixed>',
    'version=' => 'int',
  ),
  'idate' => 
  array (
    0 => 'int',
    'format' => 'string',
    'timestamp=' => 'int|null',
  ),
  'idn_strerror' => 
  array (
    0 => 'string',
    'errorcode' => 'int',
  ),
  'idn_to_ascii' => 
  array (
    0 => 'false|string',
    'domain' => 'string',
    'flags=' => 'int',
    'variant=' => 'int',
    '&w_idna_info=' => 'array<array-key, mixed>',
  ),
  'idn_to_utf8' => 
  array (
    0 => 'false|string',
    'domain' => 'string',
    'flags=' => 'int',
    'variant=' => 'int',
    '&w_idna_info=' => 'array<array-key, mixed>',
  ),
  'ifx_affected_rows' => 
  array (
    0 => 'int',
    'result_id' => 'resource',
  ),
  'ifx_blobinfile_mode' => 
  array (
    0 => 'bool',
    'mode' => 'int',
  ),
  'ifx_byteasvarchar' => 
  array (
    0 => 'bool',
    'mode' => 'int',
  ),
  'ifx_close' => 
  array (
    0 => 'bool',
    'link_identifier=' => 'resource',
  ),
  'ifx_connect' => 
  array (
    0 => 'resource',
    'database=' => 'string',
    'userid=' => 'string',
    'password=' => 'string',
  ),
  'ifx_copy_blob' => 
  array (
    0 => 'int',
    'bid' => 'int',
  ),
  'ifx_create_blob' => 
  array (
    0 => 'int',
    'type' => 'int',
    'mode' => 'int',
    'param' => 'string',
  ),
  'ifx_create_char' => 
  array (
    0 => 'int',
    'param' => 'string',
  ),
  'ifx_do' => 
  array (
    0 => 'bool',
    'result_id' => 'resource',
  ),
  'ifx_error' => 
  array (
    0 => 'string',
    'link_identifier=' => 'resource',
  ),
  'ifx_errormsg' => 
  array (
    0 => 'string',
    'errorcode=' => 'int',
  ),
  'ifx_fetch_row' => 
  array (
    0 => 'array<array-key, mixed>',
    'result_id' => 'resource',
    'position=' => 'mixed',
  ),
  'ifx_fieldproperties' => 
  array (
    0 => 'array<array-key, mixed>',
    'result_id' => 'resource',
  ),
  'ifx_fieldtypes' => 
  array (
    0 => 'array<array-key, mixed>',
    'result_id' => 'resource',
  ),
  'ifx_free_blob' => 
  array (
    0 => 'bool',
    'bid' => 'int',
  ),
  'ifx_free_char' => 
  array (
    0 => 'bool',
    'bid' => 'int',
  ),
  'ifx_free_result' => 
  array (
    0 => 'bool',
    'result_id' => 'resource',
  ),
  'ifx_get_blob' => 
  array (
    0 => 'string',
    'bid' => 'int',
  ),
  'ifx_get_char' => 
  array (
    0 => 'string',
    'bid' => 'int',
  ),
  'ifx_getsqlca' => 
  array (
    0 => 'array<array-key, mixed>',
    'result_id' => 'resource',
  ),
  'ifx_htmltbl_result' => 
  array (
    0 => 'int',
    'result_id' => 'resource',
    'html_table_options=' => 'string',
  ),
  'ifx_nullformat' => 
  array (
    0 => 'bool',
    'mode' => 'int',
  ),
  'ifx_num_fields' => 
  array (
    0 => 'int',
    'result_id' => 'resource',
  ),
  'ifx_num_rows' => 
  array (
    0 => 'int',
    'result_id' => 'resource',
  ),
  'ifx_pconnect' => 
  array (
    0 => 'resource',
    'database=' => 'string',
    'userid=' => 'string',
    'password=' => 'string',
  ),
  'ifx_prepare' => 
  array (
    0 => 'resource',
    'query' => 'string',
    'link_identifier' => 'resource',
    'cursor_def=' => 'int',
    'blobidarray=' => 'mixed',
  ),
  'ifx_query' => 
  array (
    0 => 'resource',
    'query' => 'string',
    'link_identifier' => 'resource',
    'cursor_type=' => 'int',
    'blobidarray=' => 'mixed',
  ),
  'ifx_textasvarchar' => 
  array (
    0 => 'bool',
    'mode' => 'int',
  ),
  'ifx_update_blob' => 
  array (
    0 => 'bool',
    'bid' => 'int',
    'content' => 'string',
  ),
  'ifx_update_char' => 
  array (
    0 => 'bool',
    'bid' => 'int',
    'content' => 'string',
  ),
  'ifxus_close_slob' => 
  array (
    0 => 'bool',
    'bid' => 'int',
  ),
  'ifxus_create_slob' => 
  array (
    0 => 'int',
    'mode' => 'int',
  ),
  'ifxus_free_slob' => 
  array (
    0 => 'bool',
    'bid' => 'int',
  ),
  'ifxus_open_slob' => 
  array (
    0 => 'int',
    'bid' => 'int',
    'mode' => 'int',
  ),
  'ifxus_read_slob' => 
  array (
    0 => 'string',
    'bid' => 'int',
    'nbytes' => 'int',
  ),
  'ifxus_seek_slob' => 
  array (
    0 => 'int',
    'bid' => 'int',
    'mode' => 'int',
    'offset' => 'int',
  ),
  'ifxus_tell_slob' => 
  array (
    0 => 'int',
    'bid' => 'int',
  ),
  'ifxus_write_slob' => 
  array (
    0 => 'int',
    'bid' => 'int',
    'content' => 'string',
  ),
  'igbinary_serialize' => 
  array (
    0 => 'false|string',
    'value' => 'mixed',
  ),
  'igbinary_unserialize' => 
  array (
    0 => 'mixed',
    'str' => 'string',
  ),
  'ignore_user_abort' => 
  array (
    0 => 'int',
    'enable=' => 'bool|null',
  ),
  'iis_add_server' => 
  array (
    0 => 'int',
    'path' => 'string',
    'comment' => 'string',
    'server_ip' => 'string',
    'port' => 'int',
    'host_name' => 'string',
    'rights' => 'int',
    'start_server' => 'int',
  ),
  'iis_get_dir_security' => 
  array (
    0 => 'int',
    'server_instance' => 'int',
    'virtual_path' => 'string',
  ),
  'iis_get_script_map' => 
  array (
    0 => 'string',
    'server_instance' => 'int',
    'virtual_path' => 'string',
    'script_extension' => 'string',
  ),
  'iis_get_server_by_comment' => 
  array (
    0 => 'int',
    'comment' => 'string',
  ),
  'iis_get_server_by_path' => 
  array (
    0 => 'int',
    'path' => 'string',
  ),
  'iis_get_server_rights' => 
  array (
    0 => 'int',
    'server_instance' => 'int',
    'virtual_path' => 'string',
  ),
  'iis_get_service_state' => 
  array (
    0 => 'int',
    'service_id' => 'string',
  ),
  'iis_remove_server' => 
  array (
    0 => 'int',
    'server_instance' => 'int',
  ),
  'iis_set_app_settings' => 
  array (
    0 => 'int',
    'server_instance' => 'int',
    'virtual_path' => 'string',
    'application_scope' => 'string',
  ),
  'iis_set_dir_security' => 
  array (
    0 => 'int',
    'server_instance' => 'int',
    'virtual_path' => 'string',
    'directory_flags' => 'int',
  ),
  'iis_set_script_map' => 
  array (
    0 => 'int',
    'server_instance' => 'int',
    'virtual_path' => 'string',
    'script_extension' => 'string',
    'engine_path' => 'string',
    'allow_scripting' => 'int',
  ),
  'iis_set_server_rights' => 
  array (
    0 => 'int',
    'server_instance' => 'int',
    'virtual_path' => 'string',
    'directory_flags' => 'int',
  ),
  'iis_start_server' => 
  array (
    0 => 'int',
    'server_instance' => 'int',
  ),
  'iis_start_service' => 
  array (
    0 => 'int',
    'service_id' => 'string',
  ),
  'iis_stop_server' => 
  array (
    0 => 'int',
    'server_instance' => 'int',
  ),
  'iis_stop_service' => 
  array (
    0 => 'int',
    'service_id' => 'string',
  ),
  'image_type_to_extension' => 
  array (
    0 => 'string',
    'image_type' => 'int',
    'include_dot=' => 'bool',
  ),
  'image_type_to_mime_type' => 
  array (
    0 => 'string',
    'image_type' => 'int',
  ),
  'imageaffine' => 
  array (
    0 => 'GdImage|false',
    'image' => 'GdImage',
    'affine' => 'array<array-key, mixed>',
    'clip=' => 'array<array-key, mixed>|null',
  ),
  'imageaffinematrixconcat' => 
  array (
    0 => 'array{0: float, 1: float, 2: float, 3: float, 4: float, 5: float}|false',
    'matrix1' => 'array<array-key, mixed>',
    'matrix2' => 'array<array-key, mixed>',
  ),
  'imageaffinematrixget' => 
  array (
    0 => 'array{0: float, 1: float, 2: float, 3: float, 4: float, 5: float}|false',
    'type' => 'int',
    'options' => 'array<array-key, mixed>|float',
  ),
  'imagealphablending' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'enable' => 'bool',
  ),
  'imageantialias' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'enable' => 'bool',
  ),
  'imagearc' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'center_x' => 'int',
    'center_y' => 'int',
    'width' => 'int',
    'height' => 'int',
    'start_angle' => 'int',
    'end_angle' => 'int',
    'color' => 'int',
  ),
  'imageavif' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'file=' => 'null|resource|string',
    'quality=' => 'int',
    'speed=' => 'int',
  ),
  'imagebmp' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'file=' => 'null|resource|string',
    'compressed=' => 'bool',
  ),
  'imagechar' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'font' => 'int',
    'x' => 'int',
    'y' => 'int',
    'char' => 'string',
    'color' => 'int',
  ),
  'imagecharup' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'font' => 'int',
    'x' => 'int',
    'y' => 'int',
    'char' => 'string',
    'color' => 'int',
  ),
  'imagecolorallocate' => 
  array (
    0 => 'false|int',
    'image' => 'GdImage',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
  ),
  'imagecolorallocatealpha' => 
  array (
    0 => 'false|int',
    'image' => 'GdImage',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'alpha' => 'int',
  ),
  'imagecolorat' => 
  array (
    0 => 'false|int',
    'image' => 'GdImage',
    'x' => 'int',
    'y' => 'int',
  ),
  'imagecolorclosest' => 
  array (
    0 => 'int',
    'image' => 'GdImage',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
  ),
  'imagecolorclosestalpha' => 
  array (
    0 => 'int',
    'image' => 'GdImage',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'alpha' => 'int',
  ),
  'imagecolorclosesthwb' => 
  array (
    0 => 'int',
    'image' => 'GdImage',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
  ),
  'imagecolordeallocate' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'color' => 'int',
  ),
  'imagecolorexact' => 
  array (
    0 => 'int',
    'image' => 'GdImage',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
  ),
  'imagecolorexactalpha' => 
  array (
    0 => 'int',
    'image' => 'GdImage',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'alpha' => 'int',
  ),
  'imagecolormatch' => 
  array (
    0 => 'bool',
    'image1' => 'GdImage',
    'image2' => 'GdImage',
  ),
  'imagecolorresolve' => 
  array (
    0 => 'int',
    'image' => 'GdImage',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
  ),
  'imagecolorresolvealpha' => 
  array (
    0 => 'int',
    'image' => 'GdImage',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'alpha' => 'int',
  ),
  'imagecolorset' => 
  array (
    0 => 'false|null',
    'image' => 'GdImage',
    'color' => 'int',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'alpha=' => 'int',
  ),
  'imagecolorsforindex' => 
  array (
    0 => 'array<array-key, mixed>',
    'image' => 'GdImage',
    'color' => 'int',
  ),
  'imagecolorstotal' => 
  array (
    0 => 'int',
    'image' => 'GdImage',
  ),
  'imagecolortransparent' => 
  array (
    0 => 'int',
    'image' => 'GdImage',
    'color=' => 'int|null',
  ),
  'imageconvolution' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'matrix' => 'array<array-key, mixed>',
    'divisor' => 'float',
    'offset' => 'float',
  ),
  'imagecopy' => 
  array (
    0 => 'bool',
    'dst_image' => 'GdImage',
    'src_image' => 'GdImage',
    'dst_x' => 'int',
    'dst_y' => 'int',
    'src_x' => 'int',
    'src_y' => 'int',
    'src_width' => 'int',
    'src_height' => 'int',
  ),
  'imagecopymerge' => 
  array (
    0 => 'bool',
    'dst_image' => 'GdImage',
    'src_image' => 'GdImage',
    'dst_x' => 'int',
    'dst_y' => 'int',
    'src_x' => 'int',
    'src_y' => 'int',
    'src_width' => 'int',
    'src_height' => 'int',
    'pct' => 'int',
  ),
  'imagecopymergegray' => 
  array (
    0 => 'bool',
    'dst_image' => 'GdImage',
    'src_image' => 'GdImage',
    'dst_x' => 'int',
    'dst_y' => 'int',
    'src_x' => 'int',
    'src_y' => 'int',
    'src_width' => 'int',
    'src_height' => 'int',
    'pct' => 'int',
  ),
  'imagecopyresampled' => 
  array (
    0 => 'bool',
    'dst_image' => 'GdImage',
    'src_image' => 'GdImage',
    'dst_x' => 'int',
    'dst_y' => 'int',
    'src_x' => 'int',
    'src_y' => 'int',
    'dst_width' => 'int',
    'dst_height' => 'int',
    'src_width' => 'int',
    'src_height' => 'int',
  ),
  'imagecopyresized' => 
  array (
    0 => 'bool',
    'dst_image' => 'GdImage',
    'src_image' => 'GdImage',
    'dst_x' => 'int',
    'dst_y' => 'int',
    'src_x' => 'int',
    'src_y' => 'int',
    'dst_width' => 'int',
    'dst_height' => 'int',
    'src_width' => 'int',
    'src_height' => 'int',
  ),
  'imagecreate' => 
  array (
    0 => 'GdImage|false',
    'width' => 'int',
    'height' => 'int',
  ),
  'imagecreatefromavif' => 
  array (
    0 => 'GdImage|false',
    'filename' => 'string',
  ),
  'imagecreatefrombmp' => 
  array (
    0 => 'GdImage|false',
    'filename' => 'string',
  ),
  'imagecreatefromgd' => 
  array (
    0 => 'GdImage|false',
    'filename' => 'string',
  ),
  'imagecreatefromgd2' => 
  array (
    0 => 'GdImage|false',
    'filename' => 'string',
  ),
  'imagecreatefromgd2part' => 
  array (
    0 => 'GdImage|false',
    'filename' => 'string',
    'x' => 'int',
    'y' => 'int',
    'width' => 'int',
    'height' => 'int',
  ),
  'imagecreatefromgif' => 
  array (
    0 => 'GdImage|false',
    'filename' => 'string',
  ),
  'imagecreatefromjpeg' => 
  array (
    0 => 'GdImage|false',
    'filename' => 'string',
  ),
  'imagecreatefrompng' => 
  array (
    0 => 'GdImage|false',
    'filename' => 'string',
  ),
  'imagecreatefromstring' => 
  array (
    0 => 'GdImage|false',
    'data' => 'string',
  ),
  'imagecreatefromwbmp' => 
  array (
    0 => 'GdImage|false',
    'filename' => 'string',
  ),
  'imagecreatefromwebp' => 
  array (
    0 => 'GdImage|false',
    'filename' => 'string',
  ),
  'imagecreatefromxbm' => 
  array (
    0 => 'GdImage|false',
    'filename' => 'string',
  ),
  'imagecreatefromxpm' => 
  array (
    0 => 'GdImage|false',
    'filename' => 'string',
  ),
  'imagecreatetruecolor' => 
  array (
    0 => 'GdImage|false',
    'width' => 'int',
    'height' => 'int',
  ),
  'imagecrop' => 
  array (
    0 => 'GdImage|false',
    'image' => 'GdImage',
    'rectangle' => 'array<array-key, mixed>',
  ),
  'imagecropauto' => 
  array (
    0 => 'GdImage|false',
    'image' => 'GdImage',
    'mode=' => 'int',
    'threshold=' => 'float',
    'color=' => 'int',
  ),
  'imagedashedline' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'x1' => 'int',
    'y1' => 'int',
    'x2' => 'int',
    'y2' => 'int',
    'color' => 'int',
  ),
  'imagedestroy' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
  ),
  'imageellipse' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'center_x' => 'int',
    'center_y' => 'int',
    'width' => 'int',
    'height' => 'int',
    'color' => 'int',
  ),
  'imagefill' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'x' => 'int',
    'y' => 'int',
    'color' => 'int',
  ),
  'imagefilledarc' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'center_x' => 'int',
    'center_y' => 'int',
    'width' => 'int',
    'height' => 'int',
    'start_angle' => 'int',
    'end_angle' => 'int',
    'color' => 'int',
    'style' => 'int',
  ),
  'imagefilledellipse' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'center_x' => 'int',
    'center_y' => 'int',
    'width' => 'int',
    'height' => 'int',
    'color' => 'int',
  ),
  'imagefilledpolygon' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'points' => 'array<array-key, mixed>',
    'num_points_or_color' => 'int',
    'color' => 'int',
  ),
  'imagefilledrectangle' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'x1' => 'int',
    'y1' => 'int',
    'x2' => 'int',
    'y2' => 'int',
    'color' => 'int',
  ),
  'imagefilltoborder' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'x' => 'int',
    'y' => 'int',
    'border_color' => 'int',
    'color' => 'int',
  ),
  'imagefilter' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'filter' => 'int',
    '...args=' => 'array<array-key, mixed>|bool|float|int',
  ),
  'imageflip' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'mode' => 'int',
  ),
  'imagefontheight' => 
  array (
    0 => 'int',
    'font' => 'int',
  ),
  'imagefontwidth' => 
  array (
    0 => 'int',
    'font' => 'int',
  ),
  'imageftbbox' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'size' => 'float',
    'angle' => 'float',
    'font_filename' => 'string',
    'string' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'imagefttext' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'image' => 'GdImage',
    'size' => 'float',
    'angle' => 'float',
    'x' => 'int',
    'y' => 'int',
    'color' => 'int',
    'font_filename' => 'string',
    'text' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'imagegammacorrect' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'input_gamma' => 'float',
    'output_gamma' => 'float',
  ),
  'imagegd' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'file=' => 'null|resource|string',
  ),
  'imagegd2' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'file=' => 'null|resource|string',
    'chunk_size=' => 'int',
    'mode=' => 'int',
  ),
  'imagegetclip' => 
  array (
    0 => 'array<int, int>',
    'image' => 'GdImage',
  ),
  'imagegetinterpolation' => 
  array (
    0 => 'int',
    'image' => 'GdImage',
  ),
  'imagegif' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'file=' => 'null|resource|string',
  ),
  'imagegrabscreen' => 
  array (
    0 => 'GdImage|false',
  ),
  'imagegrabwindow' => 
  array (
    0 => 'GdImage|false',
    'handle' => 'int',
    'client_area=' => 'int',
  ),
  'imageinterlace' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'enable=' => 'bool|null',
  ),
  'imageistruecolor' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
  ),
  'imagejpeg' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'file=' => 'null|resource|string',
    'quality=' => 'int',
  ),
  'imagelayereffect' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'effect' => 'int',
  ),
  'imageline' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'x1' => 'int',
    'y1' => 'int',
    'x2' => 'int',
    'y2' => 'int',
    'color' => 'int',
  ),
  'imageloadfont' => 
  array (
    0 => 'GdFont|false',
    'filename' => 'string',
  ),
  'imageObj::pasteImage' => 
  array (
    0 => 'void',
    'srcImg' => 'imageObj',
    'transparentColorHex' => 'int',
    'dstX' => 'int',
    'dstY' => 'int',
    'angle' => 'int',
  ),
  'imageObj::saveImage' => 
  array (
    0 => 'int',
    'filename' => 'string',
    'oMap' => 'mapObj',
  ),
  'imageObj::saveWebImage' => 
  array (
    0 => 'string',
  ),
  'imageopenpolygon' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'points' => 'array<array-key, mixed>',
    'num_points' => 'int',
    'color' => 'int',
  ),
  'imagepalettecopy' => 
  array (
    0 => 'void',
    'dst' => 'GdImage',
    'src' => 'GdImage',
  ),
  'imagepalettetotruecolor' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
  ),
  'imagepng' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'file=' => 'null|resource|string',
    'quality=' => 'int',
    'filters=' => 'int',
  ),
  'imagepolygon' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'points' => 'array<array-key, mixed>',
    'num_points_or_color' => 'int',
    'color' => 'int',
  ),
  'imagerectangle' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'x1' => 'int',
    'y1' => 'int',
    'x2' => 'int',
    'y2' => 'int',
    'color' => 'int',
  ),
  'imageresolution' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'image' => 'GdImage',
    'resolution_x=' => 'int|null',
    'resolution_y=' => 'int|null',
  ),
  'imagerotate' => 
  array (
    0 => 'GdImage|false',
    'image' => 'GdImage',
    'angle' => 'float',
    'background_color' => 'int',
    'ignore_transparent=' => 'bool',
  ),
  'imagesavealpha' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'enable' => 'bool',
  ),
  'imagescale' => 
  array (
    0 => 'GdImage|false',
    'image' => 'GdImage',
    'width' => 'int',
    'height=' => 'int',
    'mode=' => 'int',
  ),
  'imagesetbrush' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'brush' => 'GdImage',
  ),
  'imagesetclip' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'x1' => 'int',
    'x2' => 'int',
    'y1' => 'int',
    'y2' => 'int',
  ),
  'imagesetinterpolation' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'method=' => 'int',
  ),
  'imagesetpixel' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'x' => 'int',
    'y' => 'int',
    'color' => 'int',
  ),
  'imagesetstyle' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'style' => 'non-empty-array<array-key, mixed>',
  ),
  'imagesetthickness' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'thickness' => 'int',
  ),
  'imagesettile' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'tile' => 'GdImage',
  ),
  'imagestring' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'font' => 'int',
    'x' => 'int',
    'y' => 'int',
    'string' => 'string',
    'color' => 'int',
  ),
  'imagestringup' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'font' => 'int',
    'x' => 'int',
    'y' => 'int',
    'string' => 'string',
    'color' => 'int',
  ),
  'imagesx' => 
  array (
    0 => 'int',
    'image' => 'GdImage',
  ),
  'imagesy' => 
  array (
    0 => 'int',
    'image' => 'GdImage',
  ),
  'imagetruecolortopalette' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'dither' => 'bool',
    'num_colors' => 'int',
  ),
  'imagettfbbox' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'size' => 'float',
    'angle' => 'float',
    'font_filename' => 'string',
    'string' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'imagettftext' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'image' => 'GdImage',
    'size' => 'float',
    'angle' => 'float',
    'x' => 'int',
    'y' => 'int',
    'color' => 'int',
    'font_filename' => 'string',
    'text' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'imagetypes' => 
  array (
    0 => 'int',
  ),
  'imagewbmp' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'file=' => 'null|resource|string',
    'foreground_color=' => 'int|null',
  ),
  'imagewebp' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'file=' => 'null|resource|string',
    'quality=' => 'int',
  ),
  'imagexbm' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'filename' => 'null|string',
    'foreground_color=' => 'int|null',
  ),
  'Imagick::__construct' => 
  array (
    0 => 'void',
    'files=' => 'array<array-key, string>|string',
  ),
  'Imagick::__toString' => 
  array (
    0 => 'string',
  ),
  'Imagick::adaptiveBlurImage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
    'sigma' => 'float',
    'channel=' => 'int',
  ),
  'Imagick::adaptiveResizeImage' => 
  array (
    0 => 'bool',
    'columns' => 'int',
    'rows' => 'int',
    'bestfit=' => 'bool',
  ),
  'Imagick::adaptiveSharpenImage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
    'sigma' => 'float',
    'channel=' => 'int',
  ),
  'Imagick::adaptiveThresholdImage' => 
  array (
    0 => 'bool',
    'width' => 'int',
    'height' => 'int',
    'offset' => 'int',
  ),
  'Imagick::addImage' => 
  array (
    0 => 'bool',
    'source' => 'Imagick',
  ),
  'Imagick::addNoiseImage' => 
  array (
    0 => 'bool',
    'noise_type' => 'int',
    'channel=' => 'int',
  ),
  'Imagick::affineTransformImage' => 
  array (
    0 => 'bool',
    'matrix' => 'ImagickDraw',
  ),
  'Imagick::animateImages' => 
  array (
    0 => 'bool',
    'x_server' => 'string',
  ),
  'Imagick::annotateImage' => 
  array (
    0 => 'bool',
    'draw_settings' => 'ImagickDraw',
    'x' => 'float',
    'y' => 'float',
    'angle' => 'float',
    'text' => 'string',
  ),
  'Imagick::appendImages' => 
  array (
    0 => 'Imagick',
    'stack' => 'bool',
  ),
  'Imagick::autoGammaImage' => 
  array (
    0 => 'bool',
    'channel=' => 'int',
  ),
  'Imagick::autoLevelImage' => 
  array (
    0 => 'void',
    'CHANNEL=' => 'string',
  ),
  'Imagick::autoOrient' => 
  array (
    0 => 'bool',
  ),
  'Imagick::averageImages' => 
  array (
    0 => 'Imagick',
  ),
  'Imagick::blackThresholdImage' => 
  array (
    0 => 'bool',
    'threshold' => 'mixed',
  ),
  'Imagick::blueShiftImage' => 
  array (
    0 => 'void',
    'factor=' => 'float',
  ),
  'Imagick::blurImage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
    'sigma' => 'float',
    'channel=' => 'int',
  ),
  'Imagick::borderImage' => 
  array (
    0 => 'bool',
    'bordercolor' => 'mixed',
    'width' => 'int',
    'height' => 'int',
  ),
  'Imagick::brightnessContrastImage' => 
  array (
    0 => 'void',
    'brightness' => 'string',
    'contrast' => 'string',
    'CHANNEL=' => 'string',
  ),
  'Imagick::charcoalImage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
    'sigma' => 'float',
  ),
  'Imagick::chopImage' => 
  array (
    0 => 'bool',
    'width' => 'int',
    'height' => 'int',
    'x' => 'int',
    'y' => 'int',
  ),
  'Imagick::clampImage' => 
  array (
    0 => 'void',
    'CHANNEL=' => 'string',
  ),
  'Imagick::clear' => 
  array (
    0 => 'bool',
  ),
  'Imagick::clipImage' => 
  array (
    0 => 'bool',
  ),
  'Imagick::clipImagePath' => 
  array (
    0 => 'void',
    'pathname' => 'string',
    'inside' => 'string',
  ),
  'Imagick::clipPathImage' => 
  array (
    0 => 'bool',
    'pathname' => 'string',
    'inside' => 'bool',
  ),
  'Imagick::clone' => 
  array (
    0 => 'Imagick',
  ),
  'Imagick::clutImage' => 
  array (
    0 => 'bool',
    'lookup_table' => 'Imagick',
    'channel=' => 'float',
  ),
  'Imagick::coalesceImages' => 
  array (
    0 => 'Imagick',
  ),
  'Imagick::colorFloodfillImage' => 
  array (
    0 => 'bool',
    'fill' => 'mixed',
    'fuzz' => 'float',
    'bordercolor' => 'mixed',
    'x' => 'int',
    'y' => 'int',
  ),
  'Imagick::colorizeImage' => 
  array (
    0 => 'bool',
    'colorize' => 'mixed',
    'opacity' => 'mixed',
  ),
  'Imagick::colorMatrixImage' => 
  array (
    0 => 'void',
    'color_matrix' => 'string',
  ),
  'Imagick::combineImages' => 
  array (
    0 => 'Imagick',
    'channeltype' => 'int',
  ),
  'Imagick::commentImage' => 
  array (
    0 => 'bool',
    'comment' => 'string',
  ),
  'Imagick::compareImageChannels' => 
  array (
    0 => 'list{Imagick, float}',
    'image' => 'Imagick',
    'channeltype' => 'int',
    'metrictype' => 'int',
  ),
  'Imagick::compareImageLayers' => 
  array (
    0 => 'Imagick',
    'method' => 'int',
  ),
  'Imagick::compareImages' => 
  array (
    0 => 'list{Imagick, float}',
    'compare' => 'Imagick',
    'metric' => 'int',
  ),
  'Imagick::compositeImage' => 
  array (
    0 => 'bool',
    'composite_object' => 'Imagick',
    'composite' => 'int',
    'x' => 'int',
    'y' => 'int',
    'channel=' => 'int',
  ),
  'Imagick::compositeImageGravity' => 
  array (
    0 => 'bool',
    'Imagick' => 'Imagick',
    'COMPOSITE_CONSTANT' => 'int',
    'GRAVITY_CONSTANT' => 'int',
  ),
  'Imagick::contrastImage' => 
  array (
    0 => 'bool',
    'sharpen' => 'bool',
  ),
  'Imagick::contrastStretchImage' => 
  array (
    0 => 'bool',
    'black_point' => 'float',
    'white_point' => 'float',
    'channel=' => 'int',
  ),
  'Imagick::convolveImage' => 
  array (
    0 => 'bool',
    'kernel' => 'array<array-key, mixed>',
    'channel=' => 'int',
  ),
  'Imagick::count' => 
  array (
    0 => 'void',
    'mode=' => 'string',
  ),
  'Imagick::cropImage' => 
  array (
    0 => 'bool',
    'width' => 'int',
    'height' => 'int',
    'x' => 'int',
    'y' => 'int',
  ),
  'Imagick::cropThumbnailImage' => 
  array (
    0 => 'bool',
    'width' => 'int',
    'height' => 'int',
    'legacy=' => 'bool',
  ),
  'Imagick::current' => 
  array (
    0 => 'Imagick',
  ),
  'Imagick::cycleColormapImage' => 
  array (
    0 => 'bool',
    'displace' => 'int',
  ),
  'Imagick::decipherImage' => 
  array (
    0 => 'bool',
    'passphrase' => 'string',
  ),
  'Imagick::deconstructImages' => 
  array (
    0 => 'Imagick',
  ),
  'Imagick::deleteImageArtifact' => 
  array (
    0 => 'bool',
    'artifact' => 'string',
  ),
  'Imagick::deleteImageProperty' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'Imagick::deskewImage' => 
  array (
    0 => 'bool',
    'threshold' => 'float',
  ),
  'Imagick::despeckleImage' => 
  array (
    0 => 'bool',
  ),
  'Imagick::destroy' => 
  array (
    0 => 'bool',
  ),
  'Imagick::displayImage' => 
  array (
    0 => 'bool',
    'servername' => 'string',
  ),
  'Imagick::displayImages' => 
  array (
    0 => 'bool',
    'servername' => 'string',
  ),
  'Imagick::distortImage' => 
  array (
    0 => 'bool',
    'method' => 'int',
    'arguments' => 'array<array-key, mixed>',
    'bestfit' => 'bool',
  ),
  'Imagick::drawImage' => 
  array (
    0 => 'bool',
    'draw' => 'ImagickDraw',
  ),
  'Imagick::edgeImage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
  ),
  'Imagick::embossImage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
    'sigma' => 'float',
  ),
  'Imagick::encipherImage' => 
  array (
    0 => 'bool',
    'passphrase' => 'string',
  ),
  'Imagick::enhanceImage' => 
  array (
    0 => 'bool',
  ),
  'Imagick::equalizeImage' => 
  array (
    0 => 'bool',
  ),
  'Imagick::evaluateImage' => 
  array (
    0 => 'bool',
    'op' => 'int',
    'constant' => 'float',
    'channel=' => 'int',
  ),
  'Imagick::evaluateImages' => 
  array (
    0 => 'bool',
    'EVALUATE_CONSTANT' => 'int',
  ),
  'Imagick::exportImagePixels' => 
  array (
    0 => 'list<int>',
    'x' => 'int',
    'y' => 'int',
    'width' => 'int',
    'height' => 'int',
    'map' => 'string',
    'storage' => 'int',
  ),
  'Imagick::extentImage' => 
  array (
    0 => 'bool',
    'width' => 'int',
    'height' => 'int',
    'x' => 'int',
    'y' => 'int',
  ),
  'Imagick::filter' => 
  array (
    0 => 'void',
    'ImagickKernel' => 'ImagickKernel',
    'CHANNEL=' => 'int',
  ),
  'Imagick::flattenImages' => 
  array (
    0 => 'Imagick',
  ),
  'Imagick::flipImage' => 
  array (
    0 => 'bool',
  ),
  'Imagick::floodFillPaintImage' => 
  array (
    0 => 'bool',
    'fill' => 'mixed',
    'fuzz' => 'float',
    'target' => 'mixed',
    'x' => 'int',
    'y' => 'int',
    'invert' => 'bool',
    'channel=' => 'int',
  ),
  'Imagick::flopImage' => 
  array (
    0 => 'bool',
  ),
  'Imagick::forwardFourierTransformimage' => 
  array (
    0 => 'void',
    'magnitude' => 'bool',
  ),
  'Imagick::frameImage' => 
  array (
    0 => 'bool',
    'matte_color' => 'mixed',
    'width' => 'int',
    'height' => 'int',
    'inner_bevel' => 'int',
    'outer_bevel' => 'int',
  ),
  'Imagick::functionImage' => 
  array (
    0 => 'bool',
    'function' => 'int',
    'arguments' => 'array<array-key, mixed>',
    'channel=' => 'int',
  ),
  'Imagick::fxImage' => 
  array (
    0 => 'Imagick',
    'expression' => 'string',
    'channel=' => 'int',
  ),
  'Imagick::gammaImage' => 
  array (
    0 => 'bool',
    'gamma' => 'float',
    'channel=' => 'int',
  ),
  'Imagick::gaussianBlurImage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
    'sigma' => 'float',
    'channel=' => 'int',
  ),
  'Imagick::getColorspace' => 
  array (
    0 => 'int',
  ),
  'Imagick::getCompression' => 
  array (
    0 => 'int',
  ),
  'Imagick::getCompressionQuality' => 
  array (
    0 => 'int',
  ),
  'Imagick::getConfigureOptions' => 
  array (
    0 => 'string',
  ),
  'Imagick::getCopyright' => 
  array (
    0 => 'string',
  ),
  'Imagick::getFeatures' => 
  array (
    0 => 'string',
  ),
  'Imagick::getFilename' => 
  array (
    0 => 'string',
  ),
  'Imagick::getFont' => 
  array (
    0 => 'false|string',
  ),
  'Imagick::getFormat' => 
  array (
    0 => 'string',
  ),
  'Imagick::getGravity' => 
  array (
    0 => 'int',
  ),
  'Imagick::getHDRIEnabled' => 
  array (
    0 => 'int',
  ),
  'Imagick::getHomeURL' => 
  array (
    0 => 'string',
  ),
  'Imagick::getImage' => 
  array (
    0 => 'Imagick',
  ),
  'Imagick::getImageAlphaChannel' => 
  array (
    0 => 'int',
  ),
  'Imagick::getImageArtifact' => 
  array (
    0 => 'string',
    'artifact' => 'string',
  ),
  'Imagick::getImageAttribute' => 
  array (
    0 => 'string',
    'key' => 'string',
  ),
  'Imagick::getImageBackgroundColor' => 
  array (
    0 => 'ImagickPixel',
  ),
  'Imagick::getImageBlob' => 
  array (
    0 => 'string',
  ),
  'Imagick::getImageBluePrimary' => 
  array (
    0 => 'array{x: float, y: float}',
  ),
  'Imagick::getImageBorderColor' => 
  array (
    0 => 'ImagickPixel',
  ),
  'Imagick::getImageChannelDepth' => 
  array (
    0 => 'int',
    'channel' => 'int',
  ),
  'Imagick::getImageChannelDistortion' => 
  array (
    0 => 'float',
    'reference' => 'Imagick',
    'channel' => 'int',
    'metric' => 'int',
  ),
  'Imagick::getImageChannelDistortions' => 
  array (
    0 => 'float',
    'reference' => 'Imagick',
    'metric' => 'int',
    'channel=' => 'int',
  ),
  'Imagick::getImageChannelExtrema' => 
  array (
    0 => 'array{maxima: int, minima: int}',
    'channel' => 'int',
  ),
  'Imagick::getImageChannelKurtosis' => 
  array (
    0 => 'array{kurtosis: float, skewness: float}',
    'channel=' => 'int',
  ),
  'Imagick::getImageChannelMean' => 
  array (
    0 => 'array{mean: float, standardDeviation: float}',
    'channel' => 'int',
  ),
  'Imagick::getImageChannelRange' => 
  array (
    0 => 'array{maxima: float, minima: float}',
    'channel' => 'int',
  ),
  'Imagick::getImageChannelStatistics' => 
  array (
    0 => 'array<int, array{depth: int, maxima: float, mean: float, minima: float, standardDeviation: float}>',
  ),
  'Imagick::getImageClipMask' => 
  array (
    0 => 'Imagick',
  ),
  'Imagick::getImageColormapColor' => 
  array (
    0 => 'ImagickPixel',
    'index' => 'int',
  ),
  'Imagick::getImageColors' => 
  array (
    0 => 'int',
  ),
  'Imagick::getImageColorspace' => 
  array (
    0 => 'int',
  ),
  'Imagick::getImageCompose' => 
  array (
    0 => 'int',
  ),
  'Imagick::getImageCompression' => 
  array (
    0 => 'int',
  ),
  'Imagick::getImageCompressionQuality' => 
  array (
    0 => 'int',
  ),
  'Imagick::getImageDelay' => 
  array (
    0 => 'int',
  ),
  'Imagick::getImageDepth' => 
  array (
    0 => 'int',
  ),
  'Imagick::getImageDispose' => 
  array (
    0 => 'int',
  ),
  'Imagick::getImageDistortion' => 
  array (
    0 => 'float',
    'reference' => 'magickwand',
    'metric' => 'int',
  ),
  'Imagick::getImageExtrema' => 
  array (
    0 => 'array{max: int, min: int}',
  ),
  'Imagick::getImageFilename' => 
  array (
    0 => 'string',
  ),
  'Imagick::getImageFormat' => 
  array (
    0 => 'string',
  ),
  'Imagick::getImageGamma' => 
  array (
    0 => 'float',
  ),
  'Imagick::getImageGeometry' => 
  array (
    0 => 'array{height: int, width: int}',
  ),
  'Imagick::getImageGravity' => 
  array (
    0 => 'int',
  ),
  'Imagick::getImageGreenPrimary' => 
  array (
    0 => 'array{x: float, y: float}',
  ),
  'Imagick::getImageHeight' => 
  array (
    0 => 'int',
  ),
  'Imagick::getImageHistogram' => 
  array (
    0 => 'list<ImagickPixel>',
  ),
  'Imagick::getImageIndex' => 
  array (
    0 => 'int',
  ),
  'Imagick::getImageInterlaceScheme' => 
  array (
    0 => 'int',
  ),
  'Imagick::getImageInterpolateMethod' => 
  array (
    0 => 'int',
  ),
  'Imagick::getImageIterations' => 
  array (
    0 => 'int',
  ),
  'Imagick::getImageLength' => 
  array (
    0 => 'int',
  ),
  'Imagick::getImageMagickLicense' => 
  array (
    0 => 'string',
  ),
  'Imagick::getImageMatte' => 
  array (
    0 => 'bool',
  ),
  'Imagick::getImageMatteColor' => 
  array (
    0 => 'ImagickPixel',
  ),
  'Imagick::getImageMimeType' => 
  array (
    0 => 'string',
  ),
  'Imagick::getImageOrientation' => 
  array (
    0 => 'int',
  ),
  'Imagick::getImagePage' => 
  array (
    0 => 'array{height: int, width: int, x: int, y: int}',
  ),
  'Imagick::getImagePixelColor' => 
  array (
    0 => 'ImagickPixel',
    'x' => 'int',
    'y' => 'int',
  ),
  'Imagick::getImageProfile' => 
  array (
    0 => 'string',
    'name' => 'string',
  ),
  'Imagick::getImageProfiles' => 
  array (
    0 => 'array<array-key, mixed>',
    'pattern=' => 'string',
    'only_names=' => 'bool',
  ),
  'Imagick::getImageProperties' => 
  array (
    0 => 'array<int|string, string>',
    'pattern=' => 'string',
    'only_names=' => 'bool',
  ),
  'Imagick::getImageProperty' => 
  array (
    0 => 'false|string',
    'name' => 'string',
  ),
  'Imagick::getImageRedPrimary' => 
  array (
    0 => 'array{x: float, y: float}',
  ),
  'Imagick::getImageRegion' => 
  array (
    0 => 'Imagick',
    'width' => 'int',
    'height' => 'int',
    'x' => 'int',
    'y' => 'int',
  ),
  'Imagick::getImageRenderingIntent' => 
  array (
    0 => 'int',
  ),
  'Imagick::getImageResolution' => 
  array (
    0 => 'array{x: float, y: float}',
  ),
  'Imagick::getImagesBlob' => 
  array (
    0 => 'string',
  ),
  'Imagick::getImageScene' => 
  array (
    0 => 'int',
  ),
  'Imagick::getImageSignature' => 
  array (
    0 => 'string',
  ),
  'Imagick::getImageSize' => 
  array (
    0 => 'int',
  ),
  'Imagick::getImageTicksPerSecond' => 
  array (
    0 => 'int',
  ),
  'Imagick::getImageTotalInkDensity' => 
  array (
    0 => 'float',
  ),
  'Imagick::getImageType' => 
  array (
    0 => 'int',
  ),
  'Imagick::getImageUnits' => 
  array (
    0 => 'int',
  ),
  'Imagick::getImageVirtualPixelMethod' => 
  array (
    0 => 'int',
  ),
  'Imagick::getImageWhitePoint' => 
  array (
    0 => 'array{x: float, y: float}',
  ),
  'Imagick::getImageWidth' => 
  array (
    0 => 'int',
  ),
  'Imagick::getInterlaceScheme' => 
  array (
    0 => 'int',
  ),
  'Imagick::getIteratorIndex' => 
  array (
    0 => 'int',
  ),
  'Imagick::getNumberImages' => 
  array (
    0 => 'int',
  ),
  'Imagick::getOption' => 
  array (
    0 => 'string',
    'key' => 'string',
  ),
  'Imagick::getPackageName' => 
  array (
    0 => 'string',
  ),
  'Imagick::getPage' => 
  array (
    0 => 'array{height: int, width: int, x: int, y: int}',
  ),
  'Imagick::getPixelIterator' => 
  array (
    0 => 'ImagickPixelIterator',
  ),
  'Imagick::getPixelRegionIterator' => 
  array (
    0 => 'ImagickPixelIterator',
    'x' => 'int',
    'y' => 'int',
    'columns' => 'int',
    'rows' => 'int',
  ),
  'Imagick::getPointSize' => 
  array (
    0 => 'float',
  ),
  'Imagick::getQuantum' => 
  array (
    0 => 'int',
  ),
  'Imagick::getQuantumDepth' => 
  array (
    0 => 'array{quantumDepthLong: int, quantumDepthString: string}',
  ),
  'Imagick::getQuantumRange' => 
  array (
    0 => 'array{quantumRangeLong: int, quantumRangeString: string}',
  ),
  'Imagick::getRegistry' => 
  array (
    0 => 'false|string',
    'key' => 'string',
  ),
  'Imagick::getReleaseDate' => 
  array (
    0 => 'string',
  ),
  'Imagick::getResource' => 
  array (
    0 => 'int',
    'type' => 'int',
  ),
  'Imagick::getResourceLimit' => 
  array (
    0 => 'int',
    'type' => 'int',
  ),
  'Imagick::getSamplingFactors' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Imagick::getSize' => 
  array (
    0 => 'array{columns: int, rows: int}',
  ),
  'Imagick::getSizeOffset' => 
  array (
    0 => 'int',
  ),
  'Imagick::getVersion' => 
  array (
    0 => 'array{versionNumber: int, versionString: string}',
  ),
  'Imagick::haldClutImage' => 
  array (
    0 => 'bool',
    'clut' => 'Imagick',
    'channel=' => 'int',
  ),
  'Imagick::hasNextImage' => 
  array (
    0 => 'bool',
  ),
  'Imagick::hasPreviousImage' => 
  array (
    0 => 'bool',
  ),
  'Imagick::identifyFormat' => 
  array (
    0 => 'false|string',
    'embedText' => 'string',
  ),
  'Imagick::identifyImage' => 
  array (
    0 => 'array<string, mixed>',
    'appendrawoutput=' => 'bool',
  ),
  'Imagick::identifyImageType' => 
  array (
    0 => 'int',
  ),
  'Imagick::implodeImage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
  ),
  'Imagick::importImagePixels' => 
  array (
    0 => 'bool',
    'x' => 'int',
    'y' => 'int',
    'width' => 'int',
    'height' => 'int',
    'map' => 'string',
    'storage' => 'int',
    'pixels' => 'list<int>',
  ),
  'Imagick::inverseFourierTransformImage' => 
  array (
    0 => 'void',
    'complement' => 'string',
    'magnitude' => 'string',
  ),
  'Imagick::key' => 
  array (
    0 => 'int|string',
  ),
  'Imagick::labelImage' => 
  array (
    0 => 'bool',
    'label' => 'string',
  ),
  'Imagick::levelImage' => 
  array (
    0 => 'bool',
    'blackpoint' => 'float',
    'gamma' => 'float',
    'whitepoint' => 'float',
    'channel=' => 'int',
  ),
  'Imagick::linearStretchImage' => 
  array (
    0 => 'bool',
    'blackpoint' => 'float',
    'whitepoint' => 'float',
  ),
  'Imagick::liquidRescaleImage' => 
  array (
    0 => 'bool',
    'width' => 'int',
    'height' => 'int',
    'delta_x' => 'float',
    'rigidity' => 'float',
  ),
  'Imagick::listRegistry' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Imagick::localContrastImage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
    'strength' => 'float',
  ),
  'Imagick::magnifyImage' => 
  array (
    0 => 'bool',
  ),
  'Imagick::mapImage' => 
  array (
    0 => 'bool',
    'map' => 'Imagick',
    'dither' => 'bool',
  ),
  'Imagick::matteFloodfillImage' => 
  array (
    0 => 'bool',
    'alpha' => 'float',
    'fuzz' => 'float',
    'bordercolor' => 'mixed',
    'x' => 'int',
    'y' => 'int',
  ),
  'Imagick::medianFilterImage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
  ),
  'Imagick::mergeImageLayers' => 
  array (
    0 => 'Imagick',
    'layer_method' => 'int',
  ),
  'Imagick::minifyImage' => 
  array (
    0 => 'bool',
  ),
  'Imagick::modulateImage' => 
  array (
    0 => 'bool',
    'brightness' => 'float',
    'saturation' => 'float',
    'hue' => 'float',
  ),
  'Imagick::montageImage' => 
  array (
    0 => 'Imagick',
    'draw' => 'ImagickDraw',
    'tile_geometry' => 'string',
    'thumbnail_geometry' => 'string',
    'mode' => 'int',
    'frame' => 'string',
  ),
  'Imagick::morphImages' => 
  array (
    0 => 'Imagick',
    'number_frames' => 'int',
  ),
  'Imagick::morphology' => 
  array (
    0 => 'void',
    'morphologyMethod' => 'int',
    'iterations' => 'int',
    'ImagickKernel' => 'ImagickKernel',
    'CHANNEL=' => 'string',
  ),
  'Imagick::mosaicImages' => 
  array (
    0 => 'Imagick',
  ),
  'Imagick::motionBlurImage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
    'sigma' => 'float',
    'angle' => 'float',
    'channel=' => 'int',
  ),
  'Imagick::negateImage' => 
  array (
    0 => 'bool',
    'gray' => 'bool',
    'channel=' => 'int',
  ),
  'Imagick::newImage' => 
  array (
    0 => 'bool',
    'cols' => 'int',
    'rows' => 'int',
    'background' => 'mixed',
    'format=' => 'string',
  ),
  'Imagick::newPseudoImage' => 
  array (
    0 => 'bool',
    'columns' => 'int',
    'rows' => 'int',
    'pseudostring' => 'string',
  ),
  'Imagick::next' => 
  array (
    0 => 'void',
  ),
  'Imagick::nextImage' => 
  array (
    0 => 'bool',
  ),
  'Imagick::normalizeImage' => 
  array (
    0 => 'bool',
    'channel=' => 'int',
  ),
  'Imagick::oilPaintImage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
  ),
  'Imagick::opaquePaintImage' => 
  array (
    0 => 'bool',
    'target' => 'mixed',
    'fill' => 'mixed',
    'fuzz' => 'float',
    'invert' => 'bool',
    'channel=' => 'int',
  ),
  'Imagick::optimizeImageLayers' => 
  array (
    0 => 'bool',
  ),
  'Imagick::orderedPosterizeImage' => 
  array (
    0 => 'bool',
    'threshold_map' => 'string',
    'channel=' => 'int',
  ),
  'Imagick::paintFloodfillImage' => 
  array (
    0 => 'bool',
    'fill' => 'mixed',
    'fuzz' => 'float',
    'bordercolor' => 'mixed',
    'x' => 'int',
    'y' => 'int',
    'channel=' => 'int',
  ),
  'Imagick::paintOpaqueImage' => 
  array (
    0 => 'bool',
    'target' => 'mixed',
    'fill' => 'mixed',
    'fuzz' => 'float',
    'channel=' => 'int',
  ),
  'Imagick::paintTransparentImage' => 
  array (
    0 => 'bool',
    'target' => 'mixed',
    'alpha' => 'float',
    'fuzz' => 'float',
  ),
  'Imagick::pingImage' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'Imagick::pingImageBlob' => 
  array (
    0 => 'bool',
    'image' => 'string',
  ),
  'Imagick::pingImageFile' => 
  array (
    0 => 'bool',
    'filehandle' => 'resource',
    'filename=' => 'string',
  ),
  'Imagick::polaroidImage' => 
  array (
    0 => 'bool',
    'properties' => 'ImagickDraw',
    'angle' => 'float',
  ),
  'Imagick::posterizeImage' => 
  array (
    0 => 'bool',
    'levels' => 'int',
    'dither' => 'bool',
  ),
  'Imagick::previewImages' => 
  array (
    0 => 'bool',
    'preview' => 'int',
  ),
  'Imagick::previousImage' => 
  array (
    0 => 'bool',
  ),
  'Imagick::profileImage' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'profile' => 'string',
  ),
  'Imagick::quantizeImage' => 
  array (
    0 => 'bool',
    'numbercolors' => 'int',
    'colorspace' => 'int',
    'treedepth' => 'int',
    'dither' => 'bool',
    'measureerror' => 'bool',
  ),
  'Imagick::quantizeImages' => 
  array (
    0 => 'bool',
    'numbercolors' => 'int',
    'colorspace' => 'int',
    'treedepth' => 'int',
    'dither' => 'bool',
    'measureerror' => 'bool',
  ),
  'Imagick::queryFontMetrics' => 
  array (
    0 => 'array<array-key, mixed>',
    'properties' => 'ImagickDraw',
    'text' => 'string',
    'multiline=' => 'bool',
  ),
  'Imagick::queryFonts' => 
  array (
    0 => 'array<array-key, mixed>',
    'pattern=' => 'string',
  ),
  'Imagick::queryFormats' => 
  array (
    0 => 'list<string>',
    'pattern=' => 'string',
  ),
  'Imagick::radialBlurImage' => 
  array (
    0 => 'bool',
    'angle' => 'float',
    'channel=' => 'int',
  ),
  'Imagick::raiseImage' => 
  array (
    0 => 'bool',
    'width' => 'int',
    'height' => 'int',
    'x' => 'int',
    'y' => 'int',
    'raise' => 'bool',
  ),
  'Imagick::randomThresholdImage' => 
  array (
    0 => 'bool',
    'low' => 'float',
    'high' => 'float',
    'channel=' => 'int',
  ),
  'Imagick::readImage' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'Imagick::readImageBlob' => 
  array (
    0 => 'bool',
    'image' => 'string',
    'filename=' => 'string',
  ),
  'Imagick::readImageFile' => 
  array (
    0 => 'bool',
    'filehandle' => 'resource',
    'filename=' => 'string',
  ),
  'Imagick::readImages' => 
  array (
    0 => 'Imagick',
    'filenames' => 'string',
  ),
  'Imagick::recolorImage' => 
  array (
    0 => 'bool',
    'matrix' => 'list<float>',
  ),
  'Imagick::reduceNoiseImage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
  ),
  'Imagick::remapImage' => 
  array (
    0 => 'bool',
    'replacement' => 'Imagick',
    'dither' => 'int',
  ),
  'Imagick::removeImage' => 
  array (
    0 => 'bool',
  ),
  'Imagick::removeImageProfile' => 
  array (
    0 => 'string',
    'name' => 'string',
  ),
  'Imagick::render' => 
  array (
    0 => 'bool',
  ),
  'Imagick::resampleImage' => 
  array (
    0 => 'bool',
    'x_resolution' => 'float',
    'y_resolution' => 'float',
    'filter' => 'int',
    'blur' => 'float',
  ),
  'Imagick::resetImagePage' => 
  array (
    0 => 'bool',
    'page' => 'string',
  ),
  'Imagick::resetIterator' => 
  array (
    0 => 'mixed',
  ),
  'Imagick::resizeImage' => 
  array (
    0 => 'bool',
    'columns' => 'int',
    'rows' => 'int',
    'filter' => 'int',
    'blur' => 'float',
    'bestfit=' => 'bool',
  ),
  'Imagick::rewind' => 
  array (
    0 => 'void',
  ),
  'Imagick::rollImage' => 
  array (
    0 => 'bool',
    'x' => 'int',
    'y' => 'int',
  ),
  'Imagick::rotateImage' => 
  array (
    0 => 'bool',
    'background' => 'mixed',
    'degrees' => 'float',
  ),
  'Imagick::rotationalBlurImage' => 
  array (
    0 => 'void',
    'angle' => 'string',
    'CHANNEL=' => 'string',
  ),
  'Imagick::roundCorners' => 
  array (
    0 => 'bool',
    'x_rounding' => 'float',
    'y_rounding' => 'float',
    'stroke_width=' => 'float',
    'displace=' => 'float',
    'size_correction=' => 'float',
  ),
  'Imagick::roundCornersImage' => 
  array (
    0 => 'mixed',
    'xRounding' => 'mixed',
    'yRounding' => 'mixed',
    'strokeWidth' => 'mixed',
    'displace' => 'mixed',
    'sizeCorrection' => 'mixed',
  ),
  'Imagick::sampleImage' => 
  array (
    0 => 'bool',
    'columns' => 'int',
    'rows' => 'int',
  ),
  'Imagick::scaleImage' => 
  array (
    0 => 'bool',
    'cols' => 'int',
    'rows' => 'int',
    'bestfit=' => 'bool',
  ),
  'Imagick::segmentImage' => 
  array (
    0 => 'bool',
    'colorspace' => 'int',
    'cluster_threshold' => 'float',
    'smooth_threshold' => 'float',
    'verbose=' => 'bool',
  ),
  'Imagick::selectiveBlurImage' => 
  array (
    0 => 'void',
    'radius' => 'float',
    'sigma' => 'float',
    'threshold' => 'float',
    'CHANNEL' => 'int',
  ),
  'Imagick::separateImageChannel' => 
  array (
    0 => 'bool',
    'channel' => 'int',
  ),
  'Imagick::sepiaToneImage' => 
  array (
    0 => 'bool',
    'threshold' => 'float',
  ),
  'Imagick::setAntiAlias' => 
  array (
    0 => 'int',
    'antialias' => 'bool',
  ),
  'Imagick::setBackgroundColor' => 
  array (
    0 => 'bool',
    'background' => 'mixed',
  ),
  'Imagick::setColorspace' => 
  array (
    0 => 'bool',
    'colorspace' => 'int',
  ),
  'Imagick::setCompression' => 
  array (
    0 => 'bool',
    'compression' => 'int',
  ),
  'Imagick::setCompressionQuality' => 
  array (
    0 => 'bool',
    'quality' => 'int',
  ),
  'Imagick::setFilename' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'Imagick::setFirstIterator' => 
  array (
    0 => 'bool',
  ),
  'Imagick::setFont' => 
  array (
    0 => 'bool',
    'font' => 'string',
  ),
  'Imagick::setFormat' => 
  array (
    0 => 'bool',
    'format' => 'string',
  ),
  'Imagick::setGravity' => 
  array (
    0 => 'bool',
    'gravity' => 'int',
  ),
  'Imagick::setImage' => 
  array (
    0 => 'bool',
    'replace' => 'Imagick',
  ),
  'Imagick::setImageAlpha' => 
  array (
    0 => 'bool',
    'alpha' => 'float',
  ),
  'Imagick::setImageAlphaChannel' => 
  array (
    0 => 'bool',
    'mode' => 'int',
  ),
  'Imagick::setImageArtifact' => 
  array (
    0 => 'bool',
    'artifact' => 'string',
    'value' => 'string',
  ),
  'Imagick::setImageAttribute' => 
  array (
    0 => 'void',
    'key' => 'string',
    'value' => 'string',
  ),
  'Imagick::setImageBackgroundColor' => 
  array (
    0 => 'bool',
    'background' => 'mixed',
  ),
  'Imagick::setImageBias' => 
  array (
    0 => 'bool',
    'bias' => 'float',
  ),
  'Imagick::setImageBiasQuantum' => 
  array (
    0 => 'void',
    'bias' => 'string',
  ),
  'Imagick::setImageBluePrimary' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'Imagick::setImageBorderColor' => 
  array (
    0 => 'bool',
    'border' => 'mixed',
  ),
  'Imagick::setImageChannelDepth' => 
  array (
    0 => 'bool',
    'channel' => 'int',
    'depth' => 'int',
  ),
  'Imagick::setImageChannelMask' => 
  array (
    0 => 'mixed',
    'channel' => 'int',
  ),
  'Imagick::setImageClipMask' => 
  array (
    0 => 'bool',
    'clip_mask' => 'Imagick',
  ),
  'Imagick::setImageColormapColor' => 
  array (
    0 => 'bool',
    'index' => 'int',
    'color' => 'ImagickPixel',
  ),
  'Imagick::setImageColorspace' => 
  array (
    0 => 'bool',
    'colorspace' => 'int',
  ),
  'Imagick::setImageCompose' => 
  array (
    0 => 'bool',
    'compose' => 'int',
  ),
  'Imagick::setImageCompression' => 
  array (
    0 => 'bool',
    'compression' => 'int',
  ),
  'Imagick::setImageCompressionQuality' => 
  array (
    0 => 'bool',
    'quality' => 'int',
  ),
  'Imagick::setImageDelay' => 
  array (
    0 => 'bool',
    'delay' => 'int',
  ),
  'Imagick::setImageDepth' => 
  array (
    0 => 'bool',
    'depth' => 'int',
  ),
  'Imagick::setImageDispose' => 
  array (
    0 => 'bool',
    'dispose' => 'int',
  ),
  'Imagick::setImageExtent' => 
  array (
    0 => 'bool',
    'columns' => 'int',
    'rows' => 'int',
  ),
  'Imagick::setImageFilename' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'Imagick::setImageFormat' => 
  array (
    0 => 'bool',
    'format' => 'string',
  ),
  'Imagick::setImageGamma' => 
  array (
    0 => 'bool',
    'gamma' => 'float',
  ),
  'Imagick::setImageGravity' => 
  array (
    0 => 'bool',
    'gravity' => 'int',
  ),
  'Imagick::setImageGreenPrimary' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'Imagick::setImageIndex' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'Imagick::setImageInterlaceScheme' => 
  array (
    0 => 'bool',
    'interlace_scheme' => 'int',
  ),
  'Imagick::setImageInterpolateMethod' => 
  array (
    0 => 'bool',
    'method' => 'int',
  ),
  'Imagick::setImageIterations' => 
  array (
    0 => 'bool',
    'iterations' => 'int',
  ),
  'Imagick::setImageMatte' => 
  array (
    0 => 'bool',
    'matte' => 'bool',
  ),
  'Imagick::setImageMatteColor' => 
  array (
    0 => 'bool',
    'matte' => 'mixed',
  ),
  'Imagick::setImageOpacity' => 
  array (
    0 => 'bool',
    'opacity' => 'float',
  ),
  'Imagick::setImageOrientation' => 
  array (
    0 => 'bool',
    'orientation' => 'int',
  ),
  'Imagick::setImagePage' => 
  array (
    0 => 'bool',
    'width' => 'int',
    'height' => 'int',
    'x' => 'int',
    'y' => 'int',
  ),
  'Imagick::setImageProfile' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'profile' => 'string',
  ),
  'Imagick::setImageProgressMonitor' => 
  array (
    0 => 'mixed',
    'filename' => 'mixed',
  ),
  'Imagick::setImageProperty' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value' => 'string',
  ),
  'Imagick::setImageRedPrimary' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'Imagick::setImageRenderingIntent' => 
  array (
    0 => 'bool',
    'rendering_intent' => 'int',
  ),
  'Imagick::setImageResolution' => 
  array (
    0 => 'bool',
    'x_resolution' => 'float',
    'y_resolution' => 'float',
  ),
  'Imagick::setImageScene' => 
  array (
    0 => 'bool',
    'scene' => 'int',
  ),
  'Imagick::setImageTicksPerSecond' => 
  array (
    0 => 'bool',
    'ticks_per_second' => 'int',
  ),
  'Imagick::setImageType' => 
  array (
    0 => 'bool',
    'image_type' => 'int',
  ),
  'Imagick::setImageUnits' => 
  array (
    0 => 'bool',
    'units' => 'int',
  ),
  'Imagick::setImageVirtualPixelMethod' => 
  array (
    0 => 'bool',
    'method' => 'int',
  ),
  'Imagick::setImageWhitePoint' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'Imagick::setInterlaceScheme' => 
  array (
    0 => 'bool',
    'interlace_scheme' => 'int',
  ),
  'Imagick::setIteratorIndex' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'Imagick::setLastIterator' => 
  array (
    0 => 'bool',
  ),
  'Imagick::setOption' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'string',
  ),
  'Imagick::setPage' => 
  array (
    0 => 'bool',
    'width' => 'int',
    'height' => 'int',
    'x' => 'int',
    'y' => 'int',
  ),
  'Imagick::setPointSize' => 
  array (
    0 => 'bool',
    'point_size' => 'float',
  ),
  'Imagick::setProgressMonitor' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'Imagick::setRegistry' => 
  array (
    0 => 'void',
    'key' => 'string',
    'value' => 'string',
  ),
  'Imagick::setResolution' => 
  array (
    0 => 'bool',
    'x_resolution' => 'float',
    'y_resolution' => 'float',
  ),
  'Imagick::setResourceLimit' => 
  array (
    0 => 'bool',
    'type' => 'int',
    'limit' => 'int',
  ),
  'Imagick::setSamplingFactors' => 
  array (
    0 => 'bool',
    'factors' => 'list<string>',
  ),
  'Imagick::setSize' => 
  array (
    0 => 'bool',
    'columns' => 'int',
    'rows' => 'int',
  ),
  'Imagick::setSizeOffset' => 
  array (
    0 => 'bool',
    'columns' => 'int',
    'rows' => 'int',
    'offset' => 'int',
  ),
  'Imagick::setType' => 
  array (
    0 => 'bool',
    'image_type' => 'int',
  ),
  'Imagick::shadeImage' => 
  array (
    0 => 'bool',
    'gray' => 'bool',
    'azimuth' => 'float',
    'elevation' => 'float',
  ),
  'Imagick::shadowImage' => 
  array (
    0 => 'bool',
    'opacity' => 'float',
    'sigma' => 'float',
    'x' => 'int',
    'y' => 'int',
  ),
  'Imagick::sharpenImage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
    'sigma' => 'float',
    'channel=' => 'int',
  ),
  'Imagick::shaveImage' => 
  array (
    0 => 'bool',
    'columns' => 'int',
    'rows' => 'int',
  ),
  'Imagick::shearImage' => 
  array (
    0 => 'bool',
    'background' => 'mixed',
    'x_shear' => 'float',
    'y_shear' => 'float',
  ),
  'Imagick::sigmoidalContrastImage' => 
  array (
    0 => 'bool',
    'sharpen' => 'bool',
    'alpha' => 'float',
    'beta' => 'float',
    'channel=' => 'int',
  ),
  'Imagick::similarityImage' => 
  array (
    0 => 'Imagick',
    'Imagick' => 'Imagick',
    '&bestMatch' => 'array<array-key, mixed>',
    '&similarity' => 'float',
    'similarity_threshold' => 'float',
    'metric' => 'int',
  ),
  'Imagick::sketchImage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
    'sigma' => 'float',
    'angle' => 'float',
  ),
  'Imagick::smushImages' => 
  array (
    0 => 'Imagick',
    'stack' => 'string',
    'offset' => 'string',
  ),
  'Imagick::solarizeImage' => 
  array (
    0 => 'bool',
    'threshold' => 'int',
  ),
  'Imagick::sparseColorImage' => 
  array (
    0 => 'bool',
    'sparse_method' => 'int',
    'arguments' => 'array<array-key, mixed>',
    'channel=' => 'int',
  ),
  'Imagick::spliceImage' => 
  array (
    0 => 'bool',
    'width' => 'int',
    'height' => 'int',
    'x' => 'int',
    'y' => 'int',
  ),
  'Imagick::spreadImage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
  ),
  'Imagick::statisticImage' => 
  array (
    0 => 'void',
    'type' => 'int',
    'width' => 'int',
    'height' => 'int',
    'CHANNEL=' => 'string',
  ),
  'Imagick::steganoImage' => 
  array (
    0 => 'Imagick',
    'watermark_wand' => 'Imagick',
    'offset' => 'int',
  ),
  'Imagick::stereoImage' => 
  array (
    0 => 'bool',
    'offset_wand' => 'Imagick',
  ),
  'Imagick::stripImage' => 
  array (
    0 => 'bool',
  ),
  'Imagick::subImageMatch' => 
  array (
    0 => 'Imagick',
    'Imagick' => 'Imagick',
    '&w_offset=' => 'array<array-key, mixed>',
    '&w_similarity=' => 'float',
  ),
  'Imagick::swirlImage' => 
  array (
    0 => 'bool',
    'degrees' => 'float',
  ),
  'Imagick::textureImage' => 
  array (
    0 => 'bool',
    'texture_wand' => 'Imagick',
  ),
  'Imagick::thresholdImage' => 
  array (
    0 => 'bool',
    'threshold' => 'float',
    'channel=' => 'int',
  ),
  'Imagick::thumbnailImage' => 
  array (
    0 => 'bool',
    'columns' => 'int',
    'rows' => 'int',
    'bestfit=' => 'bool',
    'fill=' => 'bool',
    'legacy=' => 'bool',
  ),
  'Imagick::tintImage' => 
  array (
    0 => 'bool',
    'tint' => 'mixed',
    'opacity' => 'mixed',
  ),
  'Imagick::transformImage' => 
  array (
    0 => 'Imagick',
    'crop' => 'string',
    'geometry' => 'string',
  ),
  'Imagick::transformImageColorspace' => 
  array (
    0 => 'bool',
    'colorspace' => 'int',
  ),
  'Imagick::transparentPaintImage' => 
  array (
    0 => 'bool',
    'target' => 'mixed',
    'alpha' => 'float',
    'fuzz' => 'float',
    'invert' => 'bool',
  ),
  'Imagick::transposeImage' => 
  array (
    0 => 'bool',
  ),
  'Imagick::transverseImage' => 
  array (
    0 => 'bool',
  ),
  'Imagick::trimImage' => 
  array (
    0 => 'bool',
    'fuzz' => 'float',
  ),
  'Imagick::uniqueImageColors' => 
  array (
    0 => 'bool',
  ),
  'Imagick::unsharpMaskImage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
    'sigma' => 'float',
    'amount' => 'float',
    'threshold' => 'float',
    'channel=' => 'int',
  ),
  'Imagick::valid' => 
  array (
    0 => 'bool',
  ),
  'Imagick::vignetteImage' => 
  array (
    0 => 'bool',
    'blackpoint' => 'float',
    'whitepoint' => 'float',
    'x' => 'int',
    'y' => 'int',
  ),
  'Imagick::waveImage' => 
  array (
    0 => 'bool',
    'amplitude' => 'float',
    'length' => 'float',
  ),
  'Imagick::whiteThresholdImage' => 
  array (
    0 => 'bool',
    'threshold' => 'mixed',
  ),
  'Imagick::writeImage' => 
  array (
    0 => 'bool',
    'filename=' => 'string',
  ),
  'Imagick::writeImageFile' => 
  array (
    0 => 'bool',
    'filehandle' => 'resource',
  ),
  'Imagick::writeImages' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'adjoin' => 'bool',
  ),
  'Imagick::writeImagesFile' => 
  array (
    0 => 'bool',
    'filehandle' => 'resource',
  ),
  'ImagickDraw::__construct' => 
  array (
    0 => 'void',
  ),
  'ImagickDraw::affine' => 
  array (
    0 => 'bool',
    'affine' => 'array<string, float>',
  ),
  'ImagickDraw::annotation' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
    'text' => 'string',
  ),
  'ImagickDraw::arc' => 
  array (
    0 => 'bool',
    'sx' => 'float',
    'sy' => 'float',
    'ex' => 'float',
    'ey' => 'float',
    'sd' => 'float',
    'ed' => 'float',
  ),
  'ImagickDraw::bezier' => 
  array (
    0 => 'bool',
    'coordinates' => 'list<array{x: float, y: float}>',
  ),
  'ImagickDraw::circle' => 
  array (
    0 => 'bool',
    'ox' => 'float',
    'oy' => 'float',
    'px' => 'float',
    'py' => 'float',
  ),
  'ImagickDraw::clear' => 
  array (
    0 => 'bool',
  ),
  'ImagickDraw::clone' => 
  array (
    0 => 'ImagickDraw',
  ),
  'ImagickDraw::color' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
    'paintmethod' => 'int',
  ),
  'ImagickDraw::comment' => 
  array (
    0 => 'bool',
    'comment' => 'string',
  ),
  'ImagickDraw::composite' => 
  array (
    0 => 'bool',
    'compose' => 'int',
    'x' => 'float',
    'y' => 'float',
    'width' => 'float',
    'height' => 'float',
    'compositewand' => 'Imagick',
  ),
  'ImagickDraw::destroy' => 
  array (
    0 => 'bool',
  ),
  'ImagickDraw::ellipse' => 
  array (
    0 => 'bool',
    'ox' => 'float',
    'oy' => 'float',
    'rx' => 'float',
    'ry' => 'float',
    'start' => 'float',
    'end' => 'float',
  ),
  'ImagickDraw::getBorderColor' => 
  array (
    0 => 'ImagickPixel',
  ),
  'ImagickDraw::getClipPath' => 
  array (
    0 => 'false|string',
  ),
  'ImagickDraw::getClipRule' => 
  array (
    0 => 'int',
  ),
  'ImagickDraw::getClipUnits' => 
  array (
    0 => 'int',
  ),
  'ImagickDraw::getDensity' => 
  array (
    0 => 'null|string',
  ),
  'ImagickDraw::getFillColor' => 
  array (
    0 => 'ImagickPixel',
  ),
  'ImagickDraw::getFillOpacity' => 
  array (
    0 => 'float',
  ),
  'ImagickDraw::getFillRule' => 
  array (
    0 => 'int',
  ),
  'ImagickDraw::getFont' => 
  array (
    0 => 'false|string',
  ),
  'ImagickDraw::getFontFamily' => 
  array (
    0 => 'false|string',
  ),
  'ImagickDraw::getFontResolution' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ImagickDraw::getFontSize' => 
  array (
    0 => 'float',
  ),
  'ImagickDraw::getFontStretch' => 
  array (
    0 => 'int',
  ),
  'ImagickDraw::getFontStyle' => 
  array (
    0 => 'int',
  ),
  'ImagickDraw::getFontWeight' => 
  array (
    0 => 'int',
  ),
  'ImagickDraw::getGravity' => 
  array (
    0 => 'int',
  ),
  'ImagickDraw::getOpacity' => 
  array (
    0 => 'float',
  ),
  'ImagickDraw::getStrokeAntialias' => 
  array (
    0 => 'bool',
  ),
  'ImagickDraw::getStrokeColor' => 
  array (
    0 => 'ImagickPixel',
  ),
  'ImagickDraw::getStrokeDashArray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ImagickDraw::getStrokeDashOffset' => 
  array (
    0 => 'float',
  ),
  'ImagickDraw::getStrokeLineCap' => 
  array (
    0 => 'int',
  ),
  'ImagickDraw::getStrokeLineJoin' => 
  array (
    0 => 'int',
  ),
  'ImagickDraw::getStrokeMiterLimit' => 
  array (
    0 => 'int',
  ),
  'ImagickDraw::getStrokeOpacity' => 
  array (
    0 => 'float',
  ),
  'ImagickDraw::getStrokeWidth' => 
  array (
    0 => 'float',
  ),
  'ImagickDraw::getTextAlignment' => 
  array (
    0 => 'int',
  ),
  'ImagickDraw::getTextAntialias' => 
  array (
    0 => 'bool',
  ),
  'ImagickDraw::getTextDecoration' => 
  array (
    0 => 'int',
  ),
  'ImagickDraw::getTextDirection' => 
  array (
    0 => 'bool',
  ),
  'ImagickDraw::getTextEncoding' => 
  array (
    0 => 'string',
  ),
  'ImagickDraw::getTextInterlineSpacing' => 
  array (
    0 => 'float',
  ),
  'ImagickDraw::getTextInterwordSpacing' => 
  array (
    0 => 'float',
  ),
  'ImagickDraw::getTextKerning' => 
  array (
    0 => 'float',
  ),
  'ImagickDraw::getTextUnderColor' => 
  array (
    0 => 'ImagickPixel',
  ),
  'ImagickDraw::getVectorGraphics' => 
  array (
    0 => 'string',
  ),
  'ImagickDraw::line' => 
  array (
    0 => 'bool',
    'sx' => 'float',
    'sy' => 'float',
    'ex' => 'float',
    'ey' => 'float',
  ),
  'ImagickDraw::matte' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
    'paintmethod' => 'int',
  ),
  'ImagickDraw::pathClose' => 
  array (
    0 => 'bool',
  ),
  'ImagickDraw::pathCurveToAbsolute' => 
  array (
    0 => 'bool',
    'x1' => 'float',
    'y1' => 'float',
    'x2' => 'float',
    'y2' => 'float',
    'x' => 'float',
    'y' => 'float',
  ),
  'ImagickDraw::pathCurveToQuadraticBezierAbsolute' => 
  array (
    0 => 'bool',
    'x1' => 'float',
    'y1' => 'float',
    'x' => 'float',
    'y' => 'float',
  ),
  'ImagickDraw::pathCurveToQuadraticBezierRelative' => 
  array (
    0 => 'bool',
    'x1' => 'float',
    'y1' => 'float',
    'x' => 'float',
    'y' => 'float',
  ),
  'ImagickDraw::pathCurveToQuadraticBezierSmoothAbsolute' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'ImagickDraw::pathCurveToQuadraticBezierSmoothRelative' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'ImagickDraw::pathCurveToRelative' => 
  array (
    0 => 'bool',
    'x1' => 'float',
    'y1' => 'float',
    'x2' => 'float',
    'y2' => 'float',
    'x' => 'float',
    'y' => 'float',
  ),
  'ImagickDraw::pathCurveToSmoothAbsolute' => 
  array (
    0 => 'bool',
    'x2' => 'float',
    'y2' => 'float',
    'x' => 'float',
    'y' => 'float',
  ),
  'ImagickDraw::pathCurveToSmoothRelative' => 
  array (
    0 => 'bool',
    'x2' => 'float',
    'y2' => 'float',
    'x' => 'float',
    'y' => 'float',
  ),
  'ImagickDraw::pathEllipticArcAbsolute' => 
  array (
    0 => 'bool',
    'rx' => 'float',
    'ry' => 'float',
    'x_axis_rotation' => 'float',
    'large_arc_flag' => 'bool',
    'sweep_flag' => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'ImagickDraw::pathEllipticArcRelative' => 
  array (
    0 => 'bool',
    'rx' => 'float',
    'ry' => 'float',
    'x_axis_rotation' => 'float',
    'large_arc_flag' => 'bool',
    'sweep_flag' => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'ImagickDraw::pathFinish' => 
  array (
    0 => 'bool',
  ),
  'ImagickDraw::pathLineToAbsolute' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'ImagickDraw::pathLineToHorizontalAbsolute' => 
  array (
    0 => 'bool',
    'x' => 'float',
  ),
  'ImagickDraw::pathLineToHorizontalRelative' => 
  array (
    0 => 'bool',
    'x' => 'float',
  ),
  'ImagickDraw::pathLineToRelative' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'ImagickDraw::pathLineToVerticalAbsolute' => 
  array (
    0 => 'bool',
    'y' => 'float',
  ),
  'ImagickDraw::pathLineToVerticalRelative' => 
  array (
    0 => 'bool',
    'y' => 'float',
  ),
  'ImagickDraw::pathMoveToAbsolute' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'ImagickDraw::pathMoveToRelative' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'ImagickDraw::pathStart' => 
  array (
    0 => 'bool',
  ),
  'ImagickDraw::point' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'ImagickDraw::polygon' => 
  array (
    0 => 'bool',
    'coordinates' => 'list<array{x: float, y: float}>',
  ),
  'ImagickDraw::polyline' => 
  array (
    0 => 'bool',
    'coordinates' => 'list<array{x: float, y: float}>',
  ),
  'ImagickDraw::pop' => 
  array (
    0 => 'bool',
  ),
  'ImagickDraw::popClipPath' => 
  array (
    0 => 'bool',
  ),
  'ImagickDraw::popDefs' => 
  array (
    0 => 'bool',
  ),
  'ImagickDraw::popPattern' => 
  array (
    0 => 'bool',
  ),
  'ImagickDraw::push' => 
  array (
    0 => 'bool',
  ),
  'ImagickDraw::pushClipPath' => 
  array (
    0 => 'bool',
    'clip_mask_id' => 'string',
  ),
  'ImagickDraw::pushDefs' => 
  array (
    0 => 'bool',
  ),
  'ImagickDraw::pushPattern' => 
  array (
    0 => 'bool',
    'pattern_id' => 'string',
    'x' => 'float',
    'y' => 'float',
    'width' => 'float',
    'height' => 'float',
  ),
  'ImagickDraw::rectangle' => 
  array (
    0 => 'bool',
    'x1' => 'float',
    'y1' => 'float',
    'x2' => 'float',
    'y2' => 'float',
  ),
  'ImagickDraw::render' => 
  array (
    0 => 'bool',
  ),
  'ImagickDraw::resetVectorGraphics' => 
  array (
    0 => 'void',
  ),
  'ImagickDraw::rotate' => 
  array (
    0 => 'bool',
    'degrees' => 'float',
  ),
  'ImagickDraw::roundRectangle' => 
  array (
    0 => 'bool',
    'x1' => 'float',
    'y1' => 'float',
    'x2' => 'float',
    'y2' => 'float',
    'rx' => 'float',
    'ry' => 'float',
  ),
  'ImagickDraw::scale' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'ImagickDraw::setBorderColor' => 
  array (
    0 => 'bool',
    'color' => 'ImagickPixel|string',
  ),
  'ImagickDraw::setClipPath' => 
  array (
    0 => 'bool',
    'clip_mask' => 'string',
  ),
  'ImagickDraw::setClipRule' => 
  array (
    0 => 'bool',
    'fill_rule' => 'int',
  ),
  'ImagickDraw::setClipUnits' => 
  array (
    0 => 'bool',
    'clip_units' => 'int',
  ),
  'ImagickDraw::setDensity' => 
  array (
    0 => 'bool',
    'density_string' => 'string',
  ),
  'ImagickDraw::setFillAlpha' => 
  array (
    0 => 'bool',
    'opacity' => 'float',
  ),
  'ImagickDraw::setFillColor' => 
  array (
    0 => 'bool',
    'fill_pixel' => 'ImagickPixel|string',
  ),
  'ImagickDraw::setFillOpacity' => 
  array (
    0 => 'bool',
    'fillopacity' => 'float',
  ),
  'ImagickDraw::setFillPatternURL' => 
  array (
    0 => 'bool',
    'fill_url' => 'string',
  ),
  'ImagickDraw::setFillRule' => 
  array (
    0 => 'bool',
    'fill_rule' => 'int',
  ),
  'ImagickDraw::setFont' => 
  array (
    0 => 'bool',
    'font_name' => 'string',
  ),
  'ImagickDraw::setFontFamily' => 
  array (
    0 => 'bool',
    'font_family' => 'string',
  ),
  'ImagickDraw::setFontResolution' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'ImagickDraw::setFontSize' => 
  array (
    0 => 'bool',
    'pointsize' => 'float',
  ),
  'ImagickDraw::setFontStretch' => 
  array (
    0 => 'bool',
    'fontstretch' => 'int',
  ),
  'ImagickDraw::setFontStyle' => 
  array (
    0 => 'bool',
    'style' => 'int',
  ),
  'ImagickDraw::setFontWeight' => 
  array (
    0 => 'bool',
    'font_weight' => 'int',
  ),
  'ImagickDraw::setGravity' => 
  array (
    0 => 'bool',
    'gravity' => 'int',
  ),
  'ImagickDraw::setOpacity' => 
  array (
    0 => 'void',
    'opacity' => 'float',
  ),
  'ImagickDraw::setResolution' => 
  array (
    0 => 'void',
    'x_resolution' => 'float',
    'y_resolution' => 'float',
  ),
  'ImagickDraw::setStrokeAlpha' => 
  array (
    0 => 'bool',
    'opacity' => 'float',
  ),
  'ImagickDraw::setStrokeAntialias' => 
  array (
    0 => 'bool',
    'stroke_antialias' => 'bool',
  ),
  'ImagickDraw::setStrokeColor' => 
  array (
    0 => 'bool',
    'stroke_pixel' => 'ImagickPixel|string',
  ),
  'ImagickDraw::setStrokeDashArray' => 
  array (
    0 => 'bool',
    'dasharray' => 'list<float|int>',
  ),
  'ImagickDraw::setStrokeDashOffset' => 
  array (
    0 => 'bool',
    'dash_offset' => 'float',
  ),
  'ImagickDraw::setStrokeLineCap' => 
  array (
    0 => 'bool',
    'linecap' => 'int',
  ),
  'ImagickDraw::setStrokeLineJoin' => 
  array (
    0 => 'bool',
    'linejoin' => 'int',
  ),
  'ImagickDraw::setStrokeMiterLimit' => 
  array (
    0 => 'bool',
    'miterlimit' => 'int',
  ),
  'ImagickDraw::setStrokeOpacity' => 
  array (
    0 => 'bool',
    'stroke_opacity' => 'float',
  ),
  'ImagickDraw::setStrokePatternURL' => 
  array (
    0 => 'bool',
    'stroke_url' => 'string',
  ),
  'ImagickDraw::setStrokeWidth' => 
  array (
    0 => 'bool',
    'stroke_width' => 'float',
  ),
  'ImagickDraw::setTextAlignment' => 
  array (
    0 => 'bool',
    'alignment' => 'int',
  ),
  'ImagickDraw::setTextAntialias' => 
  array (
    0 => 'bool',
    'antialias' => 'bool',
  ),
  'ImagickDraw::setTextDecoration' => 
  array (
    0 => 'bool',
    'decoration' => 'int',
  ),
  'ImagickDraw::setTextDirection' => 
  array (
    0 => 'bool',
    'direction' => 'int',
  ),
  'ImagickDraw::setTextEncoding' => 
  array (
    0 => 'bool',
    'encoding' => 'string',
  ),
  'ImagickDraw::setTextInterlineSpacing' => 
  array (
    0 => 'void',
    'spacing' => 'float',
  ),
  'ImagickDraw::setTextInterwordSpacing' => 
  array (
    0 => 'void',
    'spacing' => 'float',
  ),
  'ImagickDraw::setTextKerning' => 
  array (
    0 => 'void',
    'kerning' => 'float',
  ),
  'ImagickDraw::setTextUnderColor' => 
  array (
    0 => 'bool',
    'under_color' => 'ImagickPixel|string',
  ),
  'ImagickDraw::setVectorGraphics' => 
  array (
    0 => 'bool',
    'xml' => 'string',
  ),
  'ImagickDraw::setViewbox' => 
  array (
    0 => 'bool',
    'x1' => 'int',
    'y1' => 'int',
    'x2' => 'int',
    'y2' => 'int',
  ),
  'ImagickDraw::skewX' => 
  array (
    0 => 'bool',
    'degrees' => 'float',
  ),
  'ImagickDraw::skewY' => 
  array (
    0 => 'bool',
    'degrees' => 'float',
  ),
  'ImagickDraw::translate' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'ImagickKernel::addKernel' => 
  array (
    0 => 'void',
    'ImagickKernel' => 'ImagickKernel',
  ),
  'ImagickKernel::addUnityKernel' => 
  array (
    0 => 'void',
  ),
  'ImagickKernel::fromBuiltin' => 
  array (
    0 => 'ImagickKernel',
    'kernelType' => 'string',
    'kernelString' => 'string',
  ),
  'ImagickKernel::fromMatrix' => 
  array (
    0 => 'ImagickKernel',
    'matrix' => 'list<list<float>>',
    'origin=' => 'array<array-key, mixed>',
  ),
  'ImagickKernel::getMatrix' => 
  array (
    0 => 'list<list<false|float>>',
  ),
  'ImagickKernel::scale' => 
  array (
    0 => 'void',
  ),
  'ImagickKernel::separate' => 
  array (
    0 => 'array<array-key, ImagickKernel>',
  ),
  'ImagickKernel::seperate' => 
  array (
    0 => 'void',
  ),
  'ImagickPixel::__construct' => 
  array (
    0 => 'void',
    'color=' => 'string',
  ),
  'ImagickPixel::clear' => 
  array (
    0 => 'bool',
  ),
  'ImagickPixel::clone' => 
  array (
    0 => 'void',
  ),
  'ImagickPixel::destroy' => 
  array (
    0 => 'bool',
  ),
  'ImagickPixel::getColor' => 
  array (
    0 => 'array{a: float|int, b: float|int, g: float|int, r: float|int}',
    'normalized=' => '0|1|2',
  ),
  'ImagickPixel::getColorAsString' => 
  array (
    0 => 'string',
  ),
  'ImagickPixel::getColorCount' => 
  array (
    0 => 'int',
  ),
  'ImagickPixel::getColorQuantum' => 
  array (
    0 => 'mixed',
  ),
  'ImagickPixel::getColorValue' => 
  array (
    0 => 'float',
    'color' => 'int',
  ),
  'ImagickPixel::getColorValueQuantum' => 
  array (
    0 => 'mixed',
  ),
  'ImagickPixel::getHSL' => 
  array (
    0 => 'array{hue: float, luminosity: float, saturation: float}',
  ),
  'ImagickPixel::getIndex' => 
  array (
    0 => 'int',
  ),
  'ImagickPixel::isPixelSimilar' => 
  array (
    0 => 'bool',
    'color' => 'ImagickPixel',
    'fuzz' => 'float',
  ),
  'ImagickPixel::isPixelSimilarQuantum' => 
  array (
    0 => 'bool',
    'color' => 'string',
    'fuzz=' => 'string',
  ),
  'ImagickPixel::isSimilar' => 
  array (
    0 => 'bool',
    'color' => 'ImagickPixel',
    'fuzz' => 'float',
  ),
  'ImagickPixel::setColor' => 
  array (
    0 => 'bool',
    'color' => 'string',
  ),
  'ImagickPixel::setcolorcount' => 
  array (
    0 => 'void',
    'colorCount' => 'string',
  ),
  'ImagickPixel::setColorFromPixel' => 
  array (
    0 => 'bool',
    'srcPixel' => 'ImagickPixel',
  ),
  'ImagickPixel::setColorValue' => 
  array (
    0 => 'bool',
    'color' => 'int',
    'value' => 'float',
  ),
  'ImagickPixel::setColorValueQuantum' => 
  array (
    0 => 'void',
    'color' => 'int',
    'value' => 'mixed',
  ),
  'ImagickPixel::setHSL' => 
  array (
    0 => 'bool',
    'hue' => 'float',
    'saturation' => 'float',
    'luminosity' => 'float',
  ),
  'ImagickPixel::setIndex' => 
  array (
    0 => 'void',
    'index' => 'int',
  ),
  'ImagickPixelIterator::__construct' => 
  array (
    0 => 'void',
    'wand' => 'Imagick',
  ),
  'ImagickPixelIterator::clear' => 
  array (
    0 => 'bool',
  ),
  'ImagickPixelIterator::current' => 
  array (
    0 => 'mixed',
  ),
  'ImagickPixelIterator::destroy' => 
  array (
    0 => 'bool',
  ),
  'ImagickPixelIterator::getCurrentIteratorRow' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ImagickPixelIterator::getIteratorRow' => 
  array (
    0 => 'int',
  ),
  'ImagickPixelIterator::getNextIteratorRow' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ImagickPixelIterator::getpixeliterator' => 
  array (
    0 => 'mixed',
    'Imagick' => 'Imagick',
  ),
  'ImagickPixelIterator::getpixelregioniterator' => 
  array (
    0 => 'mixed',
    'Imagick' => 'Imagick',
    'x' => 'mixed',
    'y' => 'mixed',
    'columns' => 'mixed',
    'rows' => 'mixed',
  ),
  'ImagickPixelIterator::getPreviousIteratorRow' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ImagickPixelIterator::key' => 
  array (
    0 => 'int|string',
  ),
  'ImagickPixelIterator::newPixelIterator' => 
  array (
    0 => 'bool',
    'wand' => 'Imagick',
  ),
  'ImagickPixelIterator::newPixelRegionIterator' => 
  array (
    0 => 'bool',
    'wand' => 'Imagick',
    'x' => 'int',
    'y' => 'int',
    'columns' => 'int',
    'rows' => 'int',
  ),
  'ImagickPixelIterator::next' => 
  array (
    0 => 'void',
  ),
  'ImagickPixelIterator::resetIterator' => 
  array (
    0 => 'bool',
  ),
  'ImagickPixelIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'ImagickPixelIterator::setIteratorFirstRow' => 
  array (
    0 => 'bool',
  ),
  'ImagickPixelIterator::setIteratorLastRow' => 
  array (
    0 => 'bool',
  ),
  'ImagickPixelIterator::setIteratorRow' => 
  array (
    0 => 'bool',
    'row' => 'int',
  ),
  'ImagickPixelIterator::syncIterator' => 
  array (
    0 => 'bool',
  ),
  'ImagickPixelIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'imap_8bit' => 
  array (
    0 => 'false|string',
    'string' => 'string',
  ),
  'imap_alerts' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'imap_append' => 
  array (
    0 => 'bool',
    'imap' => 'IMAP\\Connection',
    'folder' => 'string',
    'message' => 'string',
    'options=' => 'null|string',
    'internal_date=' => 'null|string',
  ),
  'imap_base64' => 
  array (
    0 => 'false|string',
    'string' => 'string',
  ),
  'imap_binary' => 
  array (
    0 => 'false|string',
    'string' => 'string',
  ),
  'imap_body' => 
  array (
    0 => 'false|string',
    'imap' => 'IMAP\\Connection',
    'message_num' => 'int',
    'flags=' => 'int',
  ),
  'imap_bodystruct' => 
  array (
    0 => 'false|stdClass',
    'imap' => 'IMAP\\Connection',
    'message_num' => 'int',
    'section' => 'string',
  ),
  'imap_check' => 
  array (
    0 => 'false|stdClass',
    'imap' => 'IMAP\\Connection',
  ),
  'imap_clearflag_full' => 
  array (
    0 => 'true',
    'imap' => 'IMAP\\Connection',
    'sequence' => 'string',
    'flag' => 'string',
    'options=' => 'int',
  ),
  'imap_close' => 
  array (
    0 => 'true',
    'imap' => 'IMAP\\Connection',
    'flags=' => 'int',
  ),
  'imap_create' => 
  array (
    0 => 'bool',
    'imap' => 'IMAP\\Connection',
    'mailbox' => 'string',
  ),
  'imap_createmailbox' => 
  array (
    0 => 'bool',
    'imap' => 'IMAP\\Connection',
    'mailbox' => 'string',
  ),
  'imap_delete' => 
  array (
    0 => 'true',
    'imap' => 'IMAP\\Connection',
    'message_nums' => 'string',
    'flags=' => 'int',
  ),
  'imap_deletemailbox' => 
  array (
    0 => 'bool',
    'imap' => 'IMAP\\Connection',
    'mailbox' => 'string',
  ),
  'imap_errors' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'imap_expunge' => 
  array (
    0 => 'true',
    'imap' => 'IMAP\\Connection',
  ),
  'imap_fetch_overview' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'IMAP\\Connection',
    'sequence' => 'string',
    'flags=' => 'int',
  ),
  'imap_fetchbody' => 
  array (
    0 => 'false|string',
    'imap' => 'IMAP\\Connection',
    'message_num' => 'int',
    'section' => 'string',
    'flags=' => 'int',
  ),
  'imap_fetchheader' => 
  array (
    0 => 'false|string',
    'imap' => 'IMAP\\Connection',
    'message_num' => 'int',
    'flags=' => 'int',
  ),
  'imap_fetchmime' => 
  array (
    0 => 'false|string',
    'imap' => 'IMAP\\Connection',
    'message_num' => 'int',
    'section' => 'string',
    'flags=' => 'int',
  ),
  'imap_fetchstructure' => 
  array (
    0 => 'false|stdClass',
    'imap' => 'IMAP\\Connection',
    'message_num' => 'int',
    'flags=' => 'int',
  ),
  'imap_fetchtext' => 
  array (
    0 => 'false|string',
    'imap' => 'IMAP\\Connection',
    'message_num' => 'int',
    'flags=' => 'int',
  ),
  'imap_gc' => 
  array (
    0 => 'true',
    'imap' => 'IMAP\\Connection',
    'flags' => 'int',
  ),
  'imap_get_quota' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'IMAP\\Connection',
    'quota_root' => 'string',
  ),
  'imap_get_quotaroot' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'IMAP\\Connection',
    'mailbox' => 'string',
  ),
  'imap_getacl' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'IMAP\\Connection',
    'mailbox' => 'string',
  ),
  'imap_getmailboxes' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'IMAP\\Connection',
    'reference' => 'string',
    'pattern' => 'string',
  ),
  'imap_getsubscribed' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'IMAP\\Connection',
    'reference' => 'string',
    'pattern' => 'string',
  ),
  'imap_header' => 
  array (
    0 => 'false|stdClass',
    'stream_id' => 'resource',
    'msg_no' => 'int',
    'from_length=' => 'int',
    'subject_length=' => 'int',
    'default_host=' => 'string',
  ),
  'imap_headerinfo' => 
  array (
    0 => 'false|stdClass',
    'imap' => 'IMAP\\Connection',
    'message_num' => 'int',
    'from_length=' => 'int',
    'subject_length=' => 'int',
  ),
  'imap_headers' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'IMAP\\Connection',
  ),
  'imap_is_open' => 
  array (
    0 => 'bool',
    'imap' => 'IMAP\\Connection',
  ),
  'imap_last_error' => 
  array (
    0 => 'false|string',
  ),
  'imap_list' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'IMAP\\Connection',
    'reference' => 'string',
    'pattern' => 'string',
  ),
  'imap_listmailbox' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'IMAP\\Connection',
    'reference' => 'string',
    'pattern' => 'string',
  ),
  'imap_listscan' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'IMAP\\Connection',
    'reference' => 'string',
    'pattern' => 'string',
    'content' => 'string',
  ),
  'imap_listsubscribed' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'IMAP\\Connection',
    'reference' => 'string',
    'pattern' => 'string',
  ),
  'imap_lsub' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'IMAP\\Connection',
    'reference' => 'string',
    'pattern' => 'string',
  ),
  'imap_mail' => 
  array (
    0 => 'bool',
    'to' => 'string',
    'subject' => 'string',
    'message' => 'string',
    'additional_headers=' => 'null|string',
    'cc=' => 'null|string',
    'bcc=' => 'null|string',
    'return_path=' => 'null|string',
  ),
  'imap_mail_compose' => 
  array (
    0 => 'false|string',
    'envelope' => 'array<array-key, mixed>',
    'bodies' => 'array<array-key, mixed>',
  ),
  'imap_mail_copy' => 
  array (
    0 => 'bool',
    'imap' => 'IMAP\\Connection',
    'message_nums' => 'string',
    'mailbox' => 'string',
    'flags=' => 'int',
  ),
  'imap_mail_move' => 
  array (
    0 => 'bool',
    'imap' => 'IMAP\\Connection',
    'message_nums' => 'string',
    'mailbox' => 'string',
    'flags=' => 'int',
  ),
  'imap_mailboxmsginfo' => 
  array (
    0 => 'stdClass',
    'imap' => 'IMAP\\Connection',
  ),
  'imap_mime_header_decode' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'string' => 'string',
  ),
  'imap_msgno' => 
  array (
    0 => 'int',
    'imap' => 'IMAP\\Connection',
    'message_uid' => 'int',
  ),
  'imap_mutf7_to_utf8' => 
  array (
    0 => 'false|string',
    'string' => 'string',
  ),
  'imap_num_msg' => 
  array (
    0 => 'false|int',
    'imap' => 'IMAP\\Connection',
  ),
  'imap_num_recent' => 
  array (
    0 => 'int',
    'imap' => 'IMAP\\Connection',
  ),
  'imap_open' => 
  array (
    0 => 'IMAP\\Connection|false',
    'mailbox' => 'string',
    'user' => 'string',
    'password' => 'string',
    'flags=' => 'int',
    'retries=' => 'int',
    'options=' => 'array<array-key, mixed>',
  ),
  'imap_ping' => 
  array (
    0 => 'bool',
    'imap' => 'IMAP\\Connection',
  ),
  'imap_qprint' => 
  array (
    0 => 'false|string',
    'string' => 'string',
  ),
  'imap_rename' => 
  array (
    0 => 'bool',
    'imap' => 'IMAP\\Connection',
    'from' => 'string',
    'to' => 'string',
  ),
  'imap_renamemailbox' => 
  array (
    0 => 'bool',
    'imap' => 'IMAP\\Connection',
    'from' => 'string',
    'to' => 'string',
  ),
  'imap_reopen' => 
  array (
    0 => 'bool',
    'imap' => 'IMAP\\Connection',
    'mailbox' => 'string',
    'flags=' => 'int',
    'retries=' => 'int',
  ),
  'imap_rfc822_parse_adrlist' => 
  array (
    0 => 'array<array-key, mixed>',
    'string' => 'string',
    'default_hostname' => 'string',
  ),
  'imap_rfc822_parse_headers' => 
  array (
    0 => 'stdClass',
    'headers' => 'string',
    'default_hostname=' => 'string',
  ),
  'imap_rfc822_write_address' => 
  array (
    0 => 'false|string',
    'mailbox' => 'string',
    'hostname' => 'string',
    'personal' => 'string',
  ),
  'imap_savebody' => 
  array (
    0 => 'bool',
    'imap' => 'IMAP\\Connection',
    'file' => 'resource|string',
    'message_num' => 'int',
    'section=' => 'string',
    'flags=' => 'int',
  ),
  'imap_scan' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'IMAP\\Connection',
    'reference' => 'string',
    'pattern' => 'string',
    'content' => 'string',
  ),
  'imap_scanmailbox' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'IMAP\\Connection',
    'reference' => 'string',
    'pattern' => 'string',
    'content' => 'string',
  ),
  'imap_search' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'IMAP\\Connection',
    'criteria' => 'string',
    'flags=' => 'int',
    'charset=' => 'string',
  ),
  'imap_set_quota' => 
  array (
    0 => 'bool',
    'imap' => 'IMAP\\Connection',
    'quota_root' => 'string',
    'mailbox_size' => 'int',
  ),
  'imap_setacl' => 
  array (
    0 => 'bool',
    'imap' => 'IMAP\\Connection',
    'mailbox' => 'string',
    'user_id' => 'string',
    'rights' => 'string',
  ),
  'imap_setflag_full' => 
  array (
    0 => 'true',
    'imap' => 'IMAP\\Connection',
    'sequence' => 'string',
    'flag' => 'string',
    'options=' => 'int',
  ),
  'imap_sort' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'IMAP\\Connection',
    'criteria' => 'int',
    'reverse' => 'bool',
    'flags=' => 'int',
    'search_criteria=' => 'null|string',
    'charset=' => 'null|string',
  ),
  'imap_status' => 
  array (
    0 => 'false|stdClass',
    'imap' => 'IMAP\\Connection',
    'mailbox' => 'string',
    'flags' => 'int',
  ),
  'imap_subscribe' => 
  array (
    0 => 'bool',
    'imap' => 'IMAP\\Connection',
    'mailbox' => 'string',
  ),
  'imap_thread' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'IMAP\\Connection',
    'flags=' => 'int',
  ),
  'imap_timeout' => 
  array (
    0 => 'bool|int',
    'timeout_type' => 'int',
    'timeout=' => 'int',
  ),
  'imap_uid' => 
  array (
    0 => 'false|int',
    'imap' => 'IMAP\\Connection',
    'message_num' => 'int',
  ),
  'imap_undelete' => 
  array (
    0 => 'true',
    'imap' => 'IMAP\\Connection',
    'message_nums' => 'string',
    'flags=' => 'int',
  ),
  'imap_unsubscribe' => 
  array (
    0 => 'bool',
    'imap' => 'IMAP\\Connection',
    'mailbox' => 'string',
  ),
  'imap_utf7_decode' => 
  array (
    0 => 'false|string',
    'string' => 'string',
  ),
  'imap_utf7_encode' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'imap_utf8' => 
  array (
    0 => 'string',
    'mime_encoded_text' => 'string',
  ),
  'imap_utf8_to_mutf7' => 
  array (
    0 => 'false|string',
    'string' => 'string',
  ),
  'implode' => 
  array (
    0 => 'string',
    'separator' => 'string',
    'array' => 'array<array-key, mixed>',
  ),
  'implode\'1' => 
  array (
    0 => 'string',
    'separator' => 'array<array-key, mixed>',
  ),
  'import_request_variables' => 
  array (
    0 => 'bool',
    'types' => 'string',
    'prefix=' => 'string',
  ),
  'in_array' => 
  array (
    0 => 'bool',
    'needle' => 'mixed',
    'haystack' => 'array<array-key, mixed>',
    'strict=' => 'bool',
  ),
  'inclued_get_data' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'inet_ntop' => 
  array (
    0 => 'false|string',
    'ip' => 'string',
  ),
  'inet_pton' => 
  array (
    0 => 'false|string',
    'ip' => 'string',
  ),
  'InfiniteIterator::__construct' => 
  array (
    0 => 'void',
    'iterator' => 'Iterator',
  ),
  'InfiniteIterator::current' => 
  array (
    0 => 'mixed',
  ),
  'InfiniteIterator::getInnerIterator' => 
  array (
    0 => 'Iterator',
  ),
  'InfiniteIterator::key' => 
  array (
    0 => 'scalar',
  ),
  'InfiniteIterator::next' => 
  array (
    0 => 'void',
  ),
  'InfiniteIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'InfiniteIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'inflate_add' => 
  array (
    0 => 'false|string',
    'context' => 'InflateContext',
    'data' => 'string',
    'flush_mode=' => 'int',
  ),
  'inflate_get_read_len' => 
  array (
    0 => 'int',
    'context' => 'InflateContext',
  ),
  'inflate_get_status' => 
  array (
    0 => 'int',
    'context' => 'InflateContext',
  ),
  'inflate_init' => 
  array (
    0 => 'InflateContext|false',
    'encoding' => 'int',
    'options=' => 'array<array-key, mixed>',
  ),
  'ingres_autocommit' => 
  array (
    0 => 'bool',
    'link' => 'resource',
  ),
  'ingres_autocommit_state' => 
  array (
    0 => 'bool',
    'link' => 'resource',
  ),
  'ingres_charset' => 
  array (
    0 => 'string',
    'link' => 'resource',
  ),
  'ingres_close' => 
  array (
    0 => 'bool',
    'link' => 'resource',
  ),
  'ingres_commit' => 
  array (
    0 => 'bool',
    'link' => 'resource',
  ),
  'ingres_connect' => 
  array (
    0 => 'resource',
    'database=' => 'string',
    'username=' => 'string',
    'password=' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'ingres_cursor' => 
  array (
    0 => 'string',
    'result' => 'resource',
  ),
  'ingres_errno' => 
  array (
    0 => 'int',
    'link=' => 'resource',
  ),
  'ingres_error' => 
  array (
    0 => 'string',
    'link=' => 'resource',
  ),
  'ingres_errsqlstate' => 
  array (
    0 => 'string',
    'link=' => 'resource',
  ),
  'ingres_escape_string' => 
  array (
    0 => 'string',
    'link' => 'resource',
    'source_string' => 'string',
  ),
  'ingres_execute' => 
  array (
    0 => 'bool',
    'result' => 'resource',
    'params=' => 'array<array-key, mixed>',
    'types=' => 'string',
  ),
  'ingres_fetch_array' => 
  array (
    0 => 'array<array-key, mixed>',
    'result' => 'resource',
    'result_type=' => 'int',
  ),
  'ingres_fetch_assoc' => 
  array (
    0 => 'array<array-key, mixed>',
    'result' => 'resource',
  ),
  'ingres_fetch_object' => 
  array (
    0 => 'object',
    'result' => 'resource',
    'result_type=' => 'int',
  ),
  'ingres_fetch_proc_return' => 
  array (
    0 => 'int',
    'result' => 'resource',
  ),
  'ingres_fetch_row' => 
  array (
    0 => 'array<array-key, mixed>',
    'result' => 'resource',
  ),
  'ingres_field_length' => 
  array (
    0 => 'int',
    'result' => 'resource',
    'index' => 'int',
  ),
  'ingres_field_name' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'index' => 'int',
  ),
  'ingres_field_nullable' => 
  array (
    0 => 'bool',
    'result' => 'resource',
    'index' => 'int',
  ),
  'ingres_field_precision' => 
  array (
    0 => 'int',
    'result' => 'resource',
    'index' => 'int',
  ),
  'ingres_field_scale' => 
  array (
    0 => 'int',
    'result' => 'resource',
    'index' => 'int',
  ),
  'ingres_field_type' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'index' => 'int',
  ),
  'ingres_free_result' => 
  array (
    0 => 'bool',
    'result' => 'resource',
  ),
  'ingres_next_error' => 
  array (
    0 => 'bool',
    'link=' => 'resource',
  ),
  'ingres_num_fields' => 
  array (
    0 => 'int',
    'result' => 'resource',
  ),
  'ingres_num_rows' => 
  array (
    0 => 'int',
    'result' => 'resource',
  ),
  'ingres_pconnect' => 
  array (
    0 => 'resource',
    'database=' => 'string',
    'username=' => 'string',
    'password=' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'ingres_prepare' => 
  array (
    0 => 'mixed',
    'link' => 'resource',
    'query' => 'string',
  ),
  'ingres_query' => 
  array (
    0 => 'mixed',
    'link' => 'resource',
    'query' => 'string',
    'params=' => 'array<array-key, mixed>',
    'types=' => 'string',
  ),
  'ingres_result_seek' => 
  array (
    0 => 'bool',
    'result' => 'resource',
    'position' => 'int',
  ),
  'ingres_rollback' => 
  array (
    0 => 'bool',
    'link' => 'resource',
  ),
  'ingres_set_environment' => 
  array (
    0 => 'bool',
    'link' => 'resource',
    'options' => 'array<array-key, mixed>',
  ),
  'ingres_unbuffered_query' => 
  array (
    0 => 'mixed',
    'link' => 'resource',
    'query' => 'string',
    'params=' => 'array<array-key, mixed>',
    'types=' => 'string',
  ),
  'ini_alter' => 
  array (
    0 => 'false|string',
    'option' => 'string',
    'value' => 'null|scalar',
  ),
  'ini_get' => 
  array (
    0 => 'false|string',
    'option' => 'string',
  ),
  'ini_get_all' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'extension=' => 'null|string',
    'details=' => 'bool',
  ),
  'ini_restore' => 
  array (
    0 => 'void',
    'option' => 'string',
  ),
  'ini_parse_quantity' => 
  array (
    0 => 'int',
    'shorthand' => 'non-empty-string',
  ),
  'ini_set' => 
  array (
    0 => 'false|string',
    'option' => 'string',
    'value' => 'null|scalar',
  ),
  'inotify_add_watch' => 
  array (
    0 => 'false|int',
    'inotify_instance' => 'resource',
    'pathname' => 'string',
    'mask' => 'int',
  ),
  'inotify_init' => 
  array (
    0 => 'false|resource',
  ),
  'inotify_queue_len' => 
  array (
    0 => 'int',
    'inotify_instance' => 'resource',
  ),
  'inotify_read' => 
  array (
    0 => 'array<array-key, array{cookie: int, mask: int, name: string, wd: int}>|false',
    'inotify_instance' => 'resource',
  ),
  'inotify_rm_watch' => 
  array (
    0 => 'bool',
    'inotify_instance' => 'resource',
    'watch_descriptor' => 'int',
  ),
  'intdiv' => 
  array (
    0 => 'int',
    'num1' => 'int',
    'num2' => 'int',
  ),
  'interface_exists' => 
  array (
    0 => 'bool',
    'interface' => 'string',
    'autoload=' => 'bool',
  ),
  'intl_error_name' => 
  array (
    0 => 'string',
    'errorCode' => 'int',
  ),
  'intl_get_error_code' => 
  array (
    0 => 'int',
  ),
  'intl_get_error_message' => 
  array (
    0 => 'string',
  ),
  'intl_is_failure' => 
  array (
    0 => 'bool',
    'errorCode' => 'int',
  ),
  'IntlBreakIterator::__construct' => 
  array (
    0 => 'void',
  ),
  'IntlBreakIterator::createCharacterInstance' => 
  array (
    0 => 'IntlRuleBasedBreakIterator|null',
    'locale=' => 'null|string',
  ),
  'IntlBreakIterator::createCodePointInstance' => 
  array (
    0 => 'IntlCodePointBreakIterator',
  ),
  'IntlBreakIterator::createLineInstance' => 
  array (
    0 => 'IntlRuleBasedBreakIterator|null',
    'locale=' => 'null|string',
  ),
  'IntlBreakIterator::createSentenceInstance' => 
  array (
    0 => 'IntlRuleBasedBreakIterator|null',
    'locale=' => 'null|string',
  ),
  'IntlBreakIterator::createTitleInstance' => 
  array (
    0 => 'IntlRuleBasedBreakIterator|null',
    'locale=' => 'null|string',
  ),
  'IntlBreakIterator::createWordInstance' => 
  array (
    0 => 'IntlRuleBasedBreakIterator|null',
    'locale=' => 'null|string',
  ),
  'IntlBreakIterator::current' => 
  array (
    0 => 'int',
  ),
  'IntlBreakIterator::first' => 
  array (
    0 => 'int',
  ),
  'IntlBreakIterator::following' => 
  array (
    0 => 'int',
    'offset' => 'int',
  ),
  'IntlBreakIterator::getErrorCode' => 
  array (
    0 => 'int',
  ),
  'IntlBreakIterator::getErrorMessage' => 
  array (
    0 => 'string',
  ),
  'IntlBreakIterator::getLocale' => 
  array (
    0 => 'false|string',
    'type' => 'int',
  ),
  'IntlBreakIterator::getPartsIterator' => 
  array (
    0 => 'IntlPartsIterator',
    'type=' => 'string',
  ),
  'IntlBreakIterator::getText' => 
  array (
    0 => 'null|string',
  ),
  'IntlBreakIterator::isBoundary' => 
  array (
    0 => 'bool',
    'offset' => 'int',
  ),
  'IntlBreakIterator::last' => 
  array (
    0 => 'int',
  ),
  'IntlBreakIterator::next' => 
  array (
    0 => 'int',
    'offset=' => 'int|null',
  ),
  'IntlBreakIterator::preceding' => 
  array (
    0 => 'int',
    'offset' => 'int',
  ),
  'IntlBreakIterator::previous' => 
  array (
    0 => 'int',
  ),
  'IntlBreakIterator::setText' => 
  array (
    0 => 'bool',
    'text' => 'string',
  ),
  'intlcal_add' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
    'field' => 'int',
    'value' => 'int',
  ),
  'intlcal_after' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
    'other' => 'IntlCalendar',
  ),
  'intlcal_before' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
    'other' => 'IntlCalendar',
  ),
  'intlcal_clear' => 
  array (
    0 => 'true',
    'calendar' => 'IntlCalendar',
    'field=' => 'int|null',
  ),
  'intlcal_create_instance' => 
  array (
    0 => 'IntlCalendar|null',
    'timezone=' => 'mixed',
    'locale=' => 'null|string',
  ),
  'intlcal_equals' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
    'other' => 'IntlCalendar',
  ),
  'intlcal_field_difference' => 
  array (
    0 => 'false|int',
    'calendar' => 'IntlCalendar',
    'timestamp' => 'float',
    'field' => 'int',
  ),
  'intlcal_from_date_time' => 
  array (
    0 => 'IntlCalendar|null',
    'datetime' => 'DateTime|string',
    'locale=' => 'null|string',
  ),
  'intlcal_get' => 
  array (
    0 => 'false|int',
    'calendar' => 'IntlCalendar',
    'field' => 'int',
  ),
  'intlcal_get_actual_maximum' => 
  array (
    0 => 'int',
    'calendar' => 'IntlCalendar',
    'field' => 'int',
  ),
  'intlcal_get_actual_minimum' => 
  array (
    0 => 'int',
    'calendar' => 'IntlCalendar',
    'field' => 'int',
  ),
  'intlcal_get_available_locales' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'intlcal_get_day_of_week_type' => 
  array (
    0 => 'int',
    'calendar' => 'IntlCalendar',
    'dayOfWeek' => 'int',
  ),
  'intlcal_get_first_day_of_week' => 
  array (
    0 => 'int',
    'calendar' => 'IntlCalendar',
  ),
  'intlcal_get_greatest_minimum' => 
  array (
    0 => 'int',
    'calendar' => 'IntlCalendar',
    'field' => 'int',
  ),
  'intlcal_get_keyword_values_for_locale' => 
  array (
    0 => 'IntlIterator|false',
    'keyword' => 'string',
    'locale' => 'string',
    'onlyCommon' => 'bool',
  ),
  'intlcal_get_least_maximum' => 
  array (
    0 => 'int',
    'calendar' => 'IntlCalendar',
    'field' => 'int',
  ),
  'intlcal_get_locale' => 
  array (
    0 => 'string',
    'calendar' => 'IntlCalendar',
    'type' => 'int',
  ),
  'intlcal_get_maximum' => 
  array (
    0 => 'false|int',
    'calendar' => 'IntlCalendar',
    'field' => 'int',
  ),
  'intlcal_get_minimal_days_in_first_week' => 
  array (
    0 => 'int',
    'calendar' => 'IntlCalendar',
  ),
  'intlcal_get_minimum' => 
  array (
    0 => 'int',
    'calendar' => 'IntlCalendar',
    'field' => 'int',
  ),
  'intlcal_get_now' => 
  array (
    0 => 'float',
  ),
  'intlcal_get_repeated_wall_time_option' => 
  array (
    0 => 'int',
    'calendar' => 'IntlCalendar',
  ),
  'intlcal_get_skipped_wall_time_option' => 
  array (
    0 => 'int',
    'calendar' => 'IntlCalendar',
  ),
  'intlcal_get_time' => 
  array (
    0 => 'float',
    'calendar' => 'IntlCalendar',
  ),
  'intlcal_get_time_zone' => 
  array (
    0 => 'IntlTimeZone',
    'calendar' => 'IntlCalendar',
  ),
  'intlcal_get_type' => 
  array (
    0 => 'string',
    'calendar' => 'IntlCalendar',
  ),
  'intlcal_get_weekend_transition' => 
  array (
    0 => 'false|int',
    'calendar' => 'IntlCalendar',
    'dayOfWeek' => 'int',
  ),
  'intlcal_in_daylight_time' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
  ),
  'intlcal_is_equivalent_to' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
    'other' => 'IntlCalendar',
  ),
  'intlcal_is_lenient' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
  ),
  'intlcal_is_set' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
    'field' => 'int',
  ),
  'intlcal_is_weekend' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
    'timestamp=' => 'float|null',
  ),
  'intlcal_roll' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
    'field' => 'int',
    'value' => 'mixed',
  ),
  'intlcal_set' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
    'year' => 'int',
    'month' => 'int',
  ),
  'intlcal_set\'1' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
    'year' => 'int',
    'month' => 'int',
    'dayOfMonth=' => 'int',
    'hour=' => 'int',
    'minute=' => 'int',
    'second=' => 'int',
  ),
  'intlcal_set_first_day_of_week' => 
  array (
    0 => 'true',
    'calendar' => 'IntlCalendar',
    'dayOfWeek' => 'int',
  ),
  'intlcal_set_lenient' => 
  array (
    0 => 'true',
    'calendar' => 'IntlCalendar',
    'lenient' => 'bool',
  ),
  'intlcal_set_repeated_wall_time_option' => 
  array (
    0 => 'true',
    'calendar' => 'IntlCalendar',
    'option' => 'int',
  ),
  'intlcal_set_skipped_wall_time_option' => 
  array (
    0 => 'true',
    'calendar' => 'IntlCalendar',
    'option' => 'int',
  ),
  'intlcal_set_time' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
    'timestamp' => 'float',
  ),
  'intlcal_set_time_zone' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
    'timezone' => 'mixed',
  ),
  'intlcal_to_date_time' => 
  array (
    0 => 'DateTime|false',
    'calendar' => 'IntlCalendar',
  ),
  'IntlCalendar::__construct' => 
  array (
    0 => 'void',
  ),
  'IntlCalendar::add' => 
  array (
    0 => 'bool',
    'field' => 'int',
    'value' => 'int',
  ),
  'IntlCalendar::after' => 
  array (
    0 => 'bool',
    'other' => 'IntlCalendar',
  ),
  'IntlCalendar::before' => 
  array (
    0 => 'bool',
    'other' => 'IntlCalendar',
  ),
  'IntlCalendar::clear' => 
  array (
    0 => 'bool',
    'field=' => 'int|null',
  ),
  'IntlCalendar::createInstance' => 
  array (
    0 => 'IntlCalendar|null',
    'timezone=' => 'DateTimeZone|IntlTimeZone|null|string',
    'locale=' => 'null|string',
  ),
  'IntlCalendar::equals' => 
  array (
    0 => 'bool',
    'other' => 'IntlCalendar',
  ),
  'IntlCalendar::fieldDifference' => 
  array (
    0 => 'false|int',
    'timestamp' => 'float',
    'field' => 'int',
  ),
  'IntlCalendar::fromDateTime' => 
  array (
    0 => 'IntlCalendar|null',
    'datetime' => 'DateTime|string',
    'locale=' => 'null|string',
  ),
  'IntlCalendar::get' => 
  array (
    0 => 'int',
    'field' => 'int',
  ),
  'IntlCalendar::getActualMaximum' => 
  array (
    0 => 'int',
    'field' => 'int',
  ),
  'IntlCalendar::getActualMinimum' => 
  array (
    0 => 'int',
    'field' => 'int',
  ),
  'IntlCalendar::getAvailableLocales' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'IntlCalendar::getDayOfWeekType' => 
  array (
    0 => 'int',
    'dayOfWeek' => 'int',
  ),
  'IntlCalendar::getErrorCode' => 
  array (
    0 => 'int',
  ),
  'IntlCalendar::getErrorMessage' => 
  array (
    0 => 'string',
  ),
  'IntlCalendar::getFirstDayOfWeek' => 
  array (
    0 => 'int',
  ),
  'IntlCalendar::getGreatestMinimum' => 
  array (
    0 => 'int',
    'field' => 'int',
  ),
  'IntlCalendar::getKeywordValuesForLocale' => 
  array (
    0 => 'IntlIterator|false',
    'keyword' => 'string',
    'locale' => 'string',
    'onlyCommon' => 'bool',
  ),
  'IntlCalendar::getLeastMaximum' => 
  array (
    0 => 'int',
    'field' => 'int',
  ),
  'IntlCalendar::getLocale' => 
  array (
    0 => 'false|string',
    'type' => 'int',
  ),
  'IntlCalendar::getMaximum' => 
  array (
    0 => 'false|int',
    'field' => 'int',
  ),
  'IntlCalendar::getMinimalDaysInFirstWeek' => 
  array (
    0 => 'int',
  ),
  'IntlCalendar::getMinimum' => 
  array (
    0 => 'int',
    'field' => 'int',
  ),
  'IntlCalendar::getNow' => 
  array (
    0 => 'float',
  ),
  'IntlCalendar::getRepeatedWallTimeOption' => 
  array (
    0 => 'int',
  ),
  'IntlCalendar::getSkippedWallTimeOption' => 
  array (
    0 => 'int',
  ),
  'IntlCalendar::getTime' => 
  array (
    0 => 'float',
  ),
  'IntlCalendar::getTimeZone' => 
  array (
    0 => 'IntlTimeZone',
  ),
  'IntlCalendar::getType' => 
  array (
    0 => 'string',
  ),
  'IntlCalendar::getWeekendTransition' => 
  array (
    0 => 'false|int',
    'dayOfWeek' => 'int',
  ),
  'IntlCalendar::inDaylightTime' => 
  array (
    0 => 'bool',
  ),
  'IntlCalendar::isEquivalentTo' => 
  array (
    0 => 'bool',
    'other' => 'IntlCalendar',
  ),
  'IntlCalendar::isLenient' => 
  array (
    0 => 'bool',
  ),
  'IntlCalendar::isSet' => 
  array (
    0 => 'bool',
    'field' => 'int',
  ),
  'IntlCalendar::isWeekend' => 
  array (
    0 => 'bool',
    'timestamp=' => 'float|null',
  ),
  'IntlCalendar::roll' => 
  array (
    0 => 'bool',
    'field' => 'int',
    'value' => 'bool|int',
  ),
  'IntlCalendar::set' => 
  array (
    0 => 'bool',
    'field' => 'int',
    'value' => 'int',
  ),
  'IntlCalendar::set\'1' => 
  array (
    0 => 'bool',
    'year' => 'int',
    'month' => 'int',
    'dayOfMonth=' => 'int',
    'hour=' => 'int',
    'minute=' => 'int',
    'second=' => 'int',
  ),
  'IntlCalendar::setFirstDayOfWeek' => 
  array (
    0 => 'bool',
    'dayOfWeek' => 'int',
  ),
  'IntlCalendar::setLenient' => 
  array (
    0 => 'true',
    'lenient' => 'bool',
  ),
  'IntlCalendar::setMinimalDaysInFirstWeek' => 
  array (
    0 => 'bool',
    'days' => 'int',
  ),
  'IntlCalendar::setRepeatedWallTimeOption' => 
  array (
    0 => 'true',
    'option' => 'int',
  ),
  'IntlCalendar::setSkippedWallTimeOption' => 
  array (
    0 => 'true',
    'option' => 'int',
  ),
  'IntlCalendar::setTime' => 
  array (
    0 => 'bool',
    'timestamp' => 'float',
  ),
  'IntlCalendar::setTimeZone' => 
  array (
    0 => 'bool',
    'timezone' => 'DateTimeZone|IntlTimeZone|null|string',
  ),
  'IntlCalendar::toDateTime' => 
  array (
    0 => 'DateTime|false',
  ),
  'IntlChar::charAge' => 
  array (
    0 => 'array<array-key, mixed>|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::charDigitValue' => 
  array (
    0 => 'int|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::charDirection' => 
  array (
    0 => 'int|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::charFromName' => 
  array (
    0 => 'int|null',
    'name' => 'string',
    'type=' => 'int',
  ),
  'IntlChar::charMirror' => 
  array (
    0 => 'int|null|string',
    'codepoint' => 'int|string',
  ),
  'IntlChar::charName' => 
  array (
    0 => 'null|string',
    'codepoint' => 'int|string',
    'type=' => 'int',
  ),
  'IntlChar::charType' => 
  array (
    0 => 'int|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::chr' => 
  array (
    0 => 'null|string',
    'codepoint' => 'int|string',
  ),
  'IntlChar::digit' => 
  array (
    0 => 'false|int|null',
    'codepoint' => 'int|string',
    'base=' => 'int',
  ),
  'IntlChar::enumCharNames' => 
  array (
    0 => 'bool',
    'start' => 'int|string',
    'end' => 'int|string',
    'callback' => 'callable(int, int, int):void',
    'type=' => 'int',
  ),
  'IntlChar::enumCharTypes' => 
  array (
    0 => 'void',
    'callback' => 'callable(int, int, int):void',
  ),
  'IntlChar::foldCase' => 
  array (
    0 => 'int|null|string',
    'codepoint' => 'int|string',
    'options=' => 'int',
  ),
  'IntlChar::forDigit' => 
  array (
    0 => 'int',
    'digit' => 'int',
    'base=' => 'int',
  ),
  'IntlChar::getBidiPairedBracket' => 
  array (
    0 => 'int|null|string',
    'codepoint' => 'int|string',
  ),
  'IntlChar::getBlockCode' => 
  array (
    0 => 'int|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::getCombiningClass' => 
  array (
    0 => 'int|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::getFC_NFKC_Closure' => 
  array (
    0 => 'null|string',
    'codepoint' => 'int|string',
  ),
  'IntlChar::getIntPropertyMaxValue' => 
  array (
    0 => 'int',
    'property' => 'int',
  ),
  'IntlChar::getIntPropertyMinValue' => 
  array (
    0 => 'int',
    'property' => 'int',
  ),
  'IntlChar::getIntPropertyValue' => 
  array (
    0 => 'int|null',
    'codepoint' => 'int|string',
    'property' => 'int',
  ),
  'IntlChar::getNumericValue' => 
  array (
    0 => 'float|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::getPropertyEnum' => 
  array (
    0 => 'int',
    'alias' => 'string',
  ),
  'IntlChar::getPropertyName' => 
  array (
    0 => 'false|string',
    'property' => 'int',
    'type=' => 'int',
  ),
  'IntlChar::getPropertyValueEnum' => 
  array (
    0 => 'int',
    'property' => 'int',
    'name' => 'string',
  ),
  'IntlChar::getPropertyValueName' => 
  array (
    0 => 'false|string',
    'property' => 'int',
    'value' => 'int',
    'type=' => 'int',
  ),
  'IntlChar::getUnicodeVersion' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'IntlChar::hasBinaryProperty' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
    'property' => 'int',
  ),
  'IntlChar::isalnum' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::isalpha' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::isbase' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::isblank' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::iscntrl' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::isdefined' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::isdigit' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::isgraph' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::isIDIgnorable' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::isIDPart' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::isIDStart' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::isISOControl' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::isJavaIDPart' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::isJavaIDStart' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::isJavaSpaceChar' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::islower' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::isMirrored' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::isprint' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::ispunct' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::isspace' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::istitle' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::isUAlphabetic' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::isULowercase' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::isupper' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::isUUppercase' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::isUWhiteSpace' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::isWhitespace' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::isxdigit' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'IntlChar::ord' => 
  array (
    0 => 'int|null',
    'character' => 'int|string',
  ),
  'IntlChar::tolower' => 
  array (
    0 => 'int|null|string',
    'codepoint' => 'int|string',
  ),
  'IntlChar::totitle' => 
  array (
    0 => 'int|null|string',
    'codepoint' => 'int|string',
  ),
  'IntlChar::toupper' => 
  array (
    0 => 'int|null|string',
    'codepoint' => 'int|string',
  ),
  'IntlCodePointBreakIterator::createCharacterInstance' => 
  array (
    0 => 'IntlRuleBasedBreakIterator|null',
    'locale=' => 'null|string',
  ),
  'IntlCodePointBreakIterator::createCodePointInstance' => 
  array (
    0 => 'IntlCodePointBreakIterator',
  ),
  'IntlCodePointBreakIterator::createLineInstance' => 
  array (
    0 => 'IntlRuleBasedBreakIterator|null',
    'locale=' => 'null|string',
  ),
  'IntlCodePointBreakIterator::createSentenceInstance' => 
  array (
    0 => 'IntlRuleBasedBreakIterator|null',
    'locale=' => 'null|string',
  ),
  'IntlCodePointBreakIterator::createTitleInstance' => 
  array (
    0 => 'IntlRuleBasedBreakIterator|null',
    'locale=' => 'null|string',
  ),
  'IntlCodePointBreakIterator::createWordInstance' => 
  array (
    0 => 'IntlRuleBasedBreakIterator|null',
    'locale=' => 'null|string',
  ),
  'IntlCodePointBreakIterator::current' => 
  array (
    0 => 'int',
  ),
  'IntlCodePointBreakIterator::first' => 
  array (
    0 => 'int',
  ),
  'IntlCodePointBreakIterator::following' => 
  array (
    0 => 'int',
    'offset' => 'int',
  ),
  'IntlCodePointBreakIterator::getErrorCode' => 
  array (
    0 => 'int',
  ),
  'IntlCodePointBreakIterator::getErrorMessage' => 
  array (
    0 => 'string',
  ),
  'IntlCodePointBreakIterator::getLastCodePoint' => 
  array (
    0 => 'int',
  ),
  'IntlCodePointBreakIterator::getLocale' => 
  array (
    0 => 'false|string',
    'type' => 'int',
  ),
  'IntlCodePointBreakIterator::getPartsIterator' => 
  array (
    0 => 'IntlPartsIterator',
    'type=' => 'string',
  ),
  'IntlCodePointBreakIterator::getText' => 
  array (
    0 => 'null|string',
  ),
  'IntlCodePointBreakIterator::isBoundary' => 
  array (
    0 => 'bool',
    'offset' => 'int',
  ),
  'IntlCodePointBreakIterator::last' => 
  array (
    0 => 'int',
  ),
  'IntlCodePointBreakIterator::next' => 
  array (
    0 => 'int',
    'offset=' => 'int|null',
  ),
  'IntlCodePointBreakIterator::preceding' => 
  array (
    0 => 'int',
    'offset' => 'int',
  ),
  'IntlCodePointBreakIterator::previous' => 
  array (
    0 => 'int',
  ),
  'IntlCodePointBreakIterator::setText' => 
  array (
    0 => 'bool',
    'text' => 'string',
  ),
  'IntlDateFormatter::__construct' => 
  array (
    0 => 'void',
    'locale' => 'null|string',
    'dateType=' => 'int',
    'timeType=' => 'int',
    'timezone=' => 'DateTimeZone|IntlTimeZone|null|string',
    'calendar=' => 'IntlCalendar|int|null',
    'pattern=' => 'null|string',
  ),
  'IntlDateFormatter::create' => 
  array (
    0 => 'IntlDateFormatter|null',
    'locale' => 'null|string',
    'dateType=' => 'int',
    'timeType=' => 'int',
    'timezone=' => 'DateTimeZone|IntlTimeZone|null|string',
    'calendar=' => 'IntlCalendar|int|null',
    'pattern=' => 'null|string',
  ),
  'IntlDateFormatter::format' => 
  array (
    0 => 'false|string',
    'datetime' => 'DateTimeInterface|IntlCalendar|array{0?: int, 1?: int, 2?: int, 3?: int, 4?: int, 5?: int, 6?: int, 7?: int, 8?: int, tm_hour?: int, tm_isdst?: int, tm_mday?: int, tm_min?: int, tm_mon?: int, tm_sec?: int, tm_wday?: int, tm_yday?: int, tm_year?: int}|float|int|string',
  ),
  'IntlDateFormatter::formatObject' => 
  array (
    0 => 'false|string',
    'datetime' => 'DateTimeInterface|IntlCalendar',
    'format=' => 'array{0: int, 1: int}|int|null|string',
    'locale=' => 'null|string',
  ),
  'IntlDateFormatter::getCalendar' => 
  array (
    0 => 'false|int',
  ),
  'IntlDateFormatter::getCalendarObject' => 
  array (
    0 => 'IntlCalendar|false|null',
  ),
  'IntlDateFormatter::getDateType' => 
  array (
    0 => 'false|int',
  ),
  'IntlDateFormatter::getErrorCode' => 
  array (
    0 => 'int',
  ),
  'IntlDateFormatter::getErrorMessage' => 
  array (
    0 => 'string',
  ),
  'IntlDateFormatter::getLocale' => 
  array (
    0 => 'false|string',
    'type=' => 'int',
  ),
  'IntlDateFormatter::getPattern' => 
  array (
    0 => 'false|string',
  ),
  'IntlDateFormatter::getTimeType' => 
  array (
    0 => 'false|int',
  ),
  'IntlDateFormatter::getTimeZone' => 
  array (
    0 => 'IntlTimeZone|false',
  ),
  'IntlDateFormatter::getTimeZoneId' => 
  array (
    0 => 'false|string',
  ),
  'IntlDateFormatter::isLenient' => 
  array (
    0 => 'bool',
  ),
  'IntlDateFormatter::localtime' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'string' => 'string',
    '&rw_offset=' => 'int',
  ),
  'IntlDateFormatter::parse' => 
  array (
    0 => 'false|float|int',
    'string' => 'string',
    '&rw_offset=' => 'int',
  ),
  'IntlDateFormatter::setCalendar' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar|int|null',
  ),
  'IntlDateFormatter::setLenient' => 
  array (
    0 => 'void',
    'lenient' => 'bool',
  ),
  'IntlDateFormatter::setPattern' => 
  array (
    0 => 'bool',
    'pattern' => 'string',
  ),
  'IntlDateFormatter::setTimeZone' => 
  array (
    0 => 'bool',
    'timezone' => 'DateTimeZone|IntlTimeZone|null|string',
  ),
  'IntlException::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'IntlException::__toString' => 
  array (
    0 => 'string',
  ),
  'IntlException::__wakeup' => 
  array (
    0 => 'void',
  ),
  'IntlException::getCode' => 
  array (
    0 => 'int',
  ),
  'IntlException::getFile' => 
  array (
    0 => 'string',
  ),
  'IntlException::getLine' => 
  array (
    0 => 'int',
  ),
  'IntlException::getMessage' => 
  array (
    0 => 'string',
  ),
  'IntlException::getPrevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'IntlException::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'IntlException::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'intlgregcal_create_instance' => 
  array (
    0 => 'IntlGregorianCalendar|null',
    'timezoneOrYear=' => 'DateTimeZone|IntlTimeZone|null|string',
    'localeOrMonth=' => 'int|null|string',
    'day=' => 'int',
    'hour=' => 'int',
    'minute=' => 'int',
    'second=' => 'int',
  ),
  'intlgregcal_get_gregorian_change' => 
  array (
    0 => 'float',
    'calendar' => 'IntlGregorianCalendar',
  ),
  'intlgregcal_is_leap_year' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlGregorianCalendar',
    'year' => 'int',
  ),
  'intlgregcal_set_gregorian_change' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlGregorianCalendar',
    'timestamp' => 'float',
  ),
  'IntlGregorianCalendar::__construct' => 
  array (
    0 => 'void',
  ),
  'IntlGregorianCalendar::add' => 
  array (
    0 => 'bool',
    'field' => 'int',
    'value' => 'int',
  ),
  'IntlGregorianCalendar::after' => 
  array (
    0 => 'bool',
    'other' => 'IntlCalendar',
  ),
  'IntlGregorianCalendar::before' => 
  array (
    0 => 'bool',
    'other' => 'IntlCalendar',
  ),
  'IntlGregorianCalendar::clear' => 
  array (
    0 => 'bool',
    'field=' => 'int|null',
  ),
  'IntlGregorianCalendar::createInstance' => 
  array (
    0 => 'IntlGregorianCalendar|null',
    'timezone=' => 'DateTimeZone|IntlTimeZone|null|string',
    'locale=' => 'null|string',
  ),
  'IntlGregorianCalendar::equals' => 
  array (
    0 => 'bool',
    'other' => 'IntlCalendar',
  ),
  'IntlGregorianCalendar::fieldDifference' => 
  array (
    0 => 'false|int',
    'timestamp' => 'float',
    'field' => 'int',
  ),
  'IntlGregorianCalendar::fromDateTime' => 
  array (
    0 => 'IntlCalendar|null',
    'datetime' => 'DateTime|string',
    'locale=' => 'null|string',
  ),
  'IntlGregorianCalendar::get' => 
  array (
    0 => 'int',
    'field' => 'int',
  ),
  'IntlGregorianCalendar::getActualMaximum' => 
  array (
    0 => 'int',
    'field' => 'int',
  ),
  'IntlGregorianCalendar::getActualMinimum' => 
  array (
    0 => 'int',
    'field' => 'int',
  ),
  'IntlGregorianCalendar::getAvailableLocales' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'IntlGregorianCalendar::getDayOfWeekType' => 
  array (
    0 => 'int',
    'dayOfWeek' => 'int',
  ),
  'IntlGregorianCalendar::getErrorCode' => 
  array (
    0 => 'int',
  ),
  'IntlGregorianCalendar::getErrorMessage' => 
  array (
    0 => 'string',
  ),
  'IntlGregorianCalendar::getFirstDayOfWeek' => 
  array (
    0 => 'int',
  ),
  'IntlGregorianCalendar::getGreatestMinimum' => 
  array (
    0 => 'int',
    'field' => 'int',
  ),
  'IntlGregorianCalendar::getGregorianChange' => 
  array (
    0 => 'float',
  ),
  'IntlGregorianCalendar::getKeywordValuesForLocale' => 
  array (
    0 => 'IntlIterator|false',
    'keyword' => 'string',
    'locale' => 'string',
    'onlyCommon' => 'bool',
  ),
  'IntlGregorianCalendar::getLeastMaximum' => 
  array (
    0 => 'int',
    'field' => 'int',
  ),
  'IntlGregorianCalendar::getLocale' => 
  array (
    0 => 'false|string',
    'type' => 'int',
  ),
  'IntlGregorianCalendar::getMaximum' => 
  array (
    0 => 'int',
    'field' => 'int',
  ),
  'IntlGregorianCalendar::getMinimalDaysInFirstWeek' => 
  array (
    0 => 'int',
  ),
  'IntlGregorianCalendar::getMinimum' => 
  array (
    0 => 'int',
    'field' => 'int',
  ),
  'IntlGregorianCalendar::getNow' => 
  array (
    0 => 'float',
  ),
  'IntlGregorianCalendar::getRepeatedWallTimeOption' => 
  array (
    0 => 'int',
  ),
  'IntlGregorianCalendar::getSkippedWallTimeOption' => 
  array (
    0 => 'int',
  ),
  'IntlGregorianCalendar::getTime' => 
  array (
    0 => 'float',
  ),
  'IntlGregorianCalendar::getTimeZone' => 
  array (
    0 => 'IntlTimeZone',
  ),
  'IntlGregorianCalendar::getType' => 
  array (
    0 => 'string',
  ),
  'IntlGregorianCalendar::getWeekendTransition' => 
  array (
    0 => 'false|int',
    'dayOfWeek' => 'int',
  ),
  'IntlGregorianCalendar::inDaylightTime' => 
  array (
    0 => 'bool',
  ),
  'IntlGregorianCalendar::isEquivalentTo' => 
  array (
    0 => 'bool',
    'other' => 'IntlCalendar',
  ),
  'IntlGregorianCalendar::isLeapYear' => 
  array (
    0 => 'bool',
    'year' => 'int',
  ),
  'IntlGregorianCalendar::isLenient' => 
  array (
    0 => 'bool',
  ),
  'IntlGregorianCalendar::isSet' => 
  array (
    0 => 'bool',
    'field' => 'int',
  ),
  'IntlGregorianCalendar::isWeekend' => 
  array (
    0 => 'bool',
    'timestamp=' => 'float|null',
  ),
  'IntlGregorianCalendar::roll' => 
  array (
    0 => 'bool',
    'field' => 'int',
    'value' => 'bool|int',
  ),
  'IntlGregorianCalendar::set' => 
  array (
    0 => 'bool',
    'field' => 'int',
    'value' => 'int',
  ),
  'IntlGregorianCalendar::set\'1' => 
  array (
    0 => 'bool',
    'year' => 'int',
    'month' => 'int',
    'dayOfMonth=' => 'int',
    'hour=' => 'int',
    'minute=' => 'int',
    'second=' => 'int',
  ),
  'IntlGregorianCalendar::setFirstDayOfWeek' => 
  array (
    0 => 'bool',
    'dayOfWeek' => 'int',
  ),
  'IntlGregorianCalendar::setGregorianChange' => 
  array (
    0 => 'bool',
    'timestamp' => 'float',
  ),
  'IntlGregorianCalendar::setLenient' => 
  array (
    0 => 'true',
    'lenient' => 'bool',
  ),
  'IntlGregorianCalendar::setMinimalDaysInFirstWeek' => 
  array (
    0 => 'bool',
    'days' => 'int',
  ),
  'IntlGregorianCalendar::setRepeatedWallTimeOption' => 
  array (
    0 => 'true',
    'option' => 'int',
  ),
  'IntlGregorianCalendar::setSkippedWallTimeOption' => 
  array (
    0 => 'true',
    'option' => 'int',
  ),
  'IntlGregorianCalendar::setTime' => 
  array (
    0 => 'bool',
    'timestamp' => 'float',
  ),
  'IntlGregorianCalendar::setTimeZone' => 
  array (
    0 => 'bool',
    'timezone' => 'DateTimeZone|IntlTimeZone|null|string',
  ),
  'IntlGregorianCalendar::toDateTime' => 
  array (
    0 => 'DateTime',
  ),
  'IntlIterator::__construct' => 
  array (
    0 => 'void',
  ),
  'IntlIterator::current' => 
  array (
    0 => 'mixed',
  ),
  'IntlIterator::key' => 
  array (
    0 => 'string',
  ),
  'IntlIterator::next' => 
  array (
    0 => 'void',
  ),
  'IntlIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'IntlIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'IntlPartsIterator::getBreakIterator' => 
  array (
    0 => 'IntlBreakIterator',
  ),
  'IntlRuleBasedBreakIterator::__construct' => 
  array (
    0 => 'void',
    'rules' => 'string',
    'compiled=' => 'bool',
  ),
  'IntlRuleBasedBreakIterator::createCharacterInstance' => 
  array (
    0 => 'IntlRuleBasedBreakIterator|null',
    'locale=' => 'null|string',
  ),
  'IntlRuleBasedBreakIterator::createCodePointInstance' => 
  array (
    0 => 'IntlCodePointBreakIterator',
  ),
  'IntlRuleBasedBreakIterator::createLineInstance' => 
  array (
    0 => 'IntlRuleBasedBreakIterator|null',
    'locale=' => 'null|string',
  ),
  'IntlRuleBasedBreakIterator::createSentenceInstance' => 
  array (
    0 => 'IntlRuleBasedBreakIterator|null',
    'locale=' => 'null|string',
  ),
  'IntlRuleBasedBreakIterator::createTitleInstance' => 
  array (
    0 => 'IntlRuleBasedBreakIterator|null',
    'locale=' => 'null|string',
  ),
  'IntlRuleBasedBreakIterator::createWordInstance' => 
  array (
    0 => 'IntlRuleBasedBreakIterator|null',
    'locale=' => 'null|string',
  ),
  'IntlRuleBasedBreakIterator::current' => 
  array (
    0 => 'int',
  ),
  'IntlRuleBasedBreakIterator::first' => 
  array (
    0 => 'int',
  ),
  'IntlRuleBasedBreakIterator::following' => 
  array (
    0 => 'int',
    'offset' => 'int',
  ),
  'IntlRuleBasedBreakIterator::getBinaryRules' => 
  array (
    0 => 'string',
  ),
  'IntlRuleBasedBreakIterator::getErrorCode' => 
  array (
    0 => 'int',
  ),
  'IntlRuleBasedBreakIterator::getErrorMessage' => 
  array (
    0 => 'string',
  ),
  'IntlRuleBasedBreakIterator::getLocale' => 
  array (
    0 => 'false|string',
    'type' => 'int',
  ),
  'IntlRuleBasedBreakIterator::getPartsIterator' => 
  array (
    0 => 'IntlPartsIterator',
    'type=' => 'string',
  ),
  'IntlRuleBasedBreakIterator::getRules' => 
  array (
    0 => 'string',
  ),
  'IntlRuleBasedBreakIterator::getRuleStatus' => 
  array (
    0 => 'int',
  ),
  'IntlRuleBasedBreakIterator::getRuleStatusVec' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'IntlRuleBasedBreakIterator::getText' => 
  array (
    0 => 'null|string',
  ),
  'IntlRuleBasedBreakIterator::isBoundary' => 
  array (
    0 => 'bool',
    'offset' => 'int',
  ),
  'IntlRuleBasedBreakIterator::last' => 
  array (
    0 => 'int',
  ),
  'IntlRuleBasedBreakIterator::next' => 
  array (
    0 => 'int',
    'offset=' => 'int|null',
  ),
  'IntlRuleBasedBreakIterator::preceding' => 
  array (
    0 => 'int',
    'offset' => 'int',
  ),
  'IntlRuleBasedBreakIterator::previous' => 
  array (
    0 => 'int',
  ),
  'IntlRuleBasedBreakIterator::setText' => 
  array (
    0 => 'bool',
    'text' => 'string',
  ),
  'IntlTimeZone::countEquivalentIDs' => 
  array (
    0 => 'false|int',
    'timezoneId' => 'string',
  ),
  'IntlTimeZone::createDefault' => 
  array (
    0 => 'IntlTimeZone',
  ),
  'IntlTimeZone::createEnumeration' => 
  array (
    0 => 'IntlIterator|false',
    'countryOrRawOffset=' => 'IntlTimeZone|float|int|null|string',
  ),
  'IntlTimeZone::createTimeZone' => 
  array (
    0 => 'IntlTimeZone|null',
    'timezoneId' => 'string',
  ),
  'IntlTimeZone::createTimeZoneIDEnumeration' => 
  array (
    0 => 'IntlIterator|false',
    'type' => 'int',
    'region=' => 'null|string',
    'rawOffset=' => 'int|null',
  ),
  'IntlTimeZone::fromDateTimeZone' => 
  array (
    0 => 'IntlTimeZone|null',
    'timezone' => 'DateTimeZone',
  ),
  'IntlTimeZone::getCanonicalID' => 
  array (
    0 => 'false|string',
    'timezoneId' => 'string',
    '&w_isSystemId=' => 'bool',
  ),
  'IntlTimeZone::getDisplayName' => 
  array (
    0 => 'false|string',
    'dst=' => 'bool',
    'style=' => 'int',
    'locale=' => 'null|string',
  ),
  'IntlTimeZone::getDSTSavings' => 
  array (
    0 => 'int',
  ),
  'IntlTimeZone::getEquivalentID' => 
  array (
    0 => 'false|string',
    'timezoneId' => 'string',
    'offset' => 'int',
  ),
  'IntlTimeZone::getErrorCode' => 
  array (
    0 => 'int',
  ),
  'IntlTimeZone::getErrorMessage' => 
  array (
    0 => 'string',
  ),
  'IntlTimeZone::getGMT' => 
  array (
    0 => 'IntlTimeZone',
  ),
  'IntlTimeZone::getID' => 
  array (
    0 => 'string',
  ),
  'IntlTimeZone::getIDForWindowsID' => 
  array (
    0 => 'false|string',
    'timezoneId' => 'string',
    'region=' => 'null|string',
  ),
  'IntlTimeZone::getOffset' => 
  array (
    0 => 'bool',
    'timestamp' => 'float',
    'local' => 'bool',
    '&w_rawOffset' => 'int',
    '&w_dstOffset' => 'int',
  ),
  'IntlTimeZone::getRawOffset' => 
  array (
    0 => 'int',
  ),
  'IntlTimeZone::getRegion' => 
  array (
    0 => 'false|string',
    'timezoneId' => 'string',
  ),
  'IntlTimeZone::getTZDataVersion' => 
  array (
    0 => 'string',
  ),
  'IntlTimeZone::getUnknown' => 
  array (
    0 => 'IntlTimeZone',
  ),
  'IntlTimeZone::getWindowsID' => 
  array (
    0 => 'false|string',
    'timezoneId' => 'string',
  ),
  'IntlTimeZone::hasSameRules' => 
  array (
    0 => 'bool',
    'other' => 'IntlTimeZone',
  ),
  'IntlTimeZone::toDateTimeZone' => 
  array (
    0 => 'DateTimeZone|false',
  ),
  'IntlTimeZone::useDaylightTime' => 
  array (
    0 => 'bool',
  ),
  'intltz_count_equivalent_ids' => 
  array (
    0 => 'int',
    'timezoneId' => 'string',
  ),
  'intltz_create_enumeration' => 
  array (
    0 => 'IntlIterator|false',
    'countryOrRawOffset=' => 'IntlTimeZone|float|int|null|string',
  ),
  'intltz_create_time_zone' => 
  array (
    0 => 'IntlTimeZone|null',
    'timezoneId' => 'string',
  ),
  'intltz_from_date_time_zone' => 
  array (
    0 => 'IntlTimeZone|null',
    'timezone' => 'DateTimeZone',
  ),
  'intltz_get_canonical_id' => 
  array (
    0 => 'false|string',
    'timezoneId' => 'string',
    '&isSystemId=' => 'bool',
  ),
  'intltz_get_display_name' => 
  array (
    0 => 'false|string',
    'timezone' => 'IntlTimeZone',
    'dst=' => 'bool',
    'style=' => 'int',
    'locale=' => 'null|string',
  ),
  'intltz_get_dst_savings' => 
  array (
    0 => 'int',
    'timezone' => 'IntlTimeZone',
  ),
  'intltz_get_equivalent_id' => 
  array (
    0 => 'string',
    'timezoneId' => 'string',
    'offset' => 'int',
  ),
  'intltz_get_error_code' => 
  array (
    0 => 'int',
    'timezone' => 'IntlTimeZone',
  ),
  'intltz_get_error_message' => 
  array (
    0 => 'string',
    'timezone' => 'IntlTimeZone',
  ),
  'intltz_get_id' => 
  array (
    0 => 'string',
    'timezone' => 'IntlTimeZone',
  ),
  'intltz_get_offset' => 
  array (
    0 => 'bool',
    'timezone' => 'IntlTimeZone',
    'timestamp' => 'float',
    'local' => 'bool',
    '&rawOffset' => 'int',
    '&dstOffset' => 'int',
  ),
  'intltz_get_raw_offset' => 
  array (
    0 => 'int',
    'timezone' => 'IntlTimeZone',
  ),
  'intltz_get_tz_data_version' => 
  array (
    0 => 'string',
    'object' => 'IntlTimeZone',
  ),
  'intltz_getGMT' => 
  array (
    0 => 'IntlTimeZone',
  ),
  'intltz_has_same_rules' => 
  array (
    0 => 'bool',
    'timezone' => 'IntlTimeZone',
    'other' => 'IntlTimeZone',
  ),
  'intltz_to_date_time_zone' => 
  array (
    0 => 'DateTimeZone',
    'timezone' => 'IntlTimeZone',
  ),
  'intltz_use_daylight_time' => 
  array (
    0 => 'bool',
    'timezone' => 'IntlTimeZone',
  ),
  'intlz_create_default' => 
  array (
    0 => 'IntlTimeZone',
  ),
  'intval' => 
  array (
    0 => 'int',
    'value' => 'mixed',
    'base=' => 'int',
  ),
  'InvalidArgumentException::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'InvalidArgumentException::__toString' => 
  array (
    0 => 'string',
  ),
  'InvalidArgumentException::getCode' => 
  array (
    0 => 'int',
  ),
  'InvalidArgumentException::getFile' => 
  array (
    0 => 'string',
  ),
  'InvalidArgumentException::getLine' => 
  array (
    0 => 'int',
  ),
  'InvalidArgumentException::getMessage' => 
  array (
    0 => 'string',
  ),
  'InvalidArgumentException::getPrevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'InvalidArgumentException::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'InvalidArgumentException::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'ip2long' => 
  array (
    0 => 'false|int',
    'ip' => 'string',
  ),
  'iptcembed' => 
  array (
    0 => 'bool|string',
    'iptc_data' => 'string',
    'filename' => 'string',
    'spool=' => 'int',
  ),
  'iptcparse' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'iptc_block' => 'string',
  ),
  'is_a' => 
  array (
    0 => 'bool',
    'object_or_class' => 'mixed',
    'class' => 'string',
    'allow_string=' => 'bool',
  ),
  'is_array' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'is_bool' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'is_callable' => 
  array (
    0 => 'bool',
    'value' => 'callable|mixed',
    'syntax_only=' => 'bool',
    '&w_callable_name=' => 'string',
  ),
  'is_countable' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'is_dir' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'is_double' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'is_executable' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'is_file' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'is_finite' => 
  array (
    0 => 'bool',
    'num' => 'float',
  ),
  'is_float' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'is_infinite' => 
  array (
    0 => 'bool',
    'num' => 'float',
  ),
  'is_int' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'is_integer' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'is_iterable' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'is_link' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'is_long' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'is_nan' => 
  array (
    0 => 'bool',
    'num' => 'float',
  ),
  'is_null' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'is_numeric' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'is_object' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'is_readable' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'is_real' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'is_resource' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'is_scalar' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'is_soap_fault' => 
  array (
    0 => 'bool',
    'object' => 'mixed',
  ),
  'is_string' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'is_subclass_of' => 
  array (
    0 => 'bool',
    'object_or_class' => 'object|string',
    'class' => 'class-string',
    'allow_string=' => 'bool',
  ),
  'is_tainted' => 
  array (
    0 => 'bool',
    'string' => 'string',
  ),
  'is_uploaded_file' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'is_writable' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'is_writeable' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'isset' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
    '...rest=' => 'mixed',
  ),
  'Iterator::current' => 
  array (
    0 => 'mixed',
  ),
  'Iterator::key' => 
  array (
    0 => 'mixed',
  ),
  'Iterator::next' => 
  array (
    0 => 'void',
  ),
  'Iterator::rewind' => 
  array (
    0 => 'void',
  ),
  'Iterator::valid' => 
  array (
    0 => 'bool',
  ),
  'iterator_apply' => 
  array (
    0 => 'int<0, max>',
    'iterator' => 'Traversable',
    'callback' => 'callable(mixed):bool',
    'args=' => 'array<array-key, mixed>|null',
  ),
  'iterator_count' => 
  array (
    0 => 'int<0, max>',
    'iterator' => 'Traversable|array<array-key, mixed>',
  ),
  'iterator_to_array' => 
  array (
    0 => 'array<array-key, mixed>',
    'iterator' => 'Traversable|array<array-key, mixed>',
    'preserve_keys=' => 'bool',
  ),
  'IteratorAggregate::getIterator' => 
  array (
    0 => 'Traversable',
  ),
  'IteratorIterator::__construct' => 
  array (
    0 => 'void',
    'iterator' => 'Traversable',
    'class=' => 'null|string',
  ),
  'IteratorIterator::current' => 
  array (
    0 => 'mixed',
  ),
  'IteratorIterator::getInnerIterator' => 
  array (
    0 => 'Iterator',
  ),
  'IteratorIterator::key' => 
  array (
    0 => 'mixed',
  ),
  'IteratorIterator::next' => 
  array (
    0 => 'void',
  ),
  'IteratorIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'IteratorIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'java_last_exception_clear' => 
  array (
    0 => 'void',
  ),
  'java_last_exception_get' => 
  array (
    0 => 'object',
  ),
  'java_reload' => 
  array (
    0 => 'array<array-key, mixed>',
    'new_jarpath' => 'string',
  ),
  'java_require' => 
  array (
    0 => 'array<array-key, mixed>',
    'new_classpath' => 'string',
  ),
  'java_set_encoding' => 
  array (
    0 => 'array<array-key, mixed>',
    'encoding' => 'string',
  ),
  'java_set_ignore_case' => 
  array (
    0 => 'void',
    'ignore' => 'bool',
  ),
  'java_throw_exceptions' => 
  array (
    0 => 'void',
    'throw' => 'bool',
  ),
  'JavaException::getCause' => 
  array (
    0 => 'object',
  ),
  'jddayofweek' => 
  array (
    0 => 'int|string',
    'julian_day' => 'int',
    'mode=' => 'int',
  ),
  'jdmonthname' => 
  array (
    0 => 'string',
    'julian_day' => 'int',
    'mode' => 'int',
  ),
  'jdtofrench' => 
  array (
    0 => 'string',
    'julian_day' => 'int',
  ),
  'jdtogregorian' => 
  array (
    0 => 'string',
    'julian_day' => 'int',
  ),
  'jdtojewish' => 
  array (
    0 => 'string',
    'julian_day' => 'int',
    'hebrew=' => 'bool',
    'flags=' => 'int',
  ),
  'jdtojulian' => 
  array (
    0 => 'string',
    'julian_day' => 'int',
  ),
  'jdtounix' => 
  array (
    0 => 'int',
    'julian_day' => 'int',
  ),
  'jewishtojd' => 
  array (
    0 => 'int',
    'month' => 'int',
    'day' => 'int',
    'year' => 'int',
  ),
  'jobqueue_license_info' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'join' => 
  array (
    0 => 'string',
    'separator' => 'string',
    'array' => 'array<array-key, mixed>',
  ),
  'join\'1' => 
  array (
    0 => 'string',
    'separator' => 'array<array-key, mixed>',
  ),
  'json_decode' => 
  array (
    0 => 'mixed',
    'json' => 'string',
    'associative=' => 'bool|null',
    'depth=' => 'int',
    'flags=' => 'int',
  ),
  'json_encode' => 
  array (
    0 => 'false|non-empty-string',
    'value' => 'mixed',
    'flags=' => 'int',
    'depth=' => 'int',
  ),
  'json_last_error' => 
  array (
    0 => 'int',
  ),
  'json_last_error_msg' => 
  array (
    0 => 'string',
  ),
  'json_validate' => 
  array (
    0 => 'bool',
    'json' => 'string',
    'depth=' => 'int<1, max>',
    'flags=' => 'int',
  ),
  'JsonException::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'JsonException::__toString' => 
  array (
    0 => 'string',
  ),
  'JsonException::__wakeup' => 
  array (
    0 => 'void',
  ),
  'JsonException::getCode' => 
  array (
    0 => 'int',
  ),
  'JsonException::getFile' => 
  array (
    0 => 'string',
  ),
  'JsonException::getLine' => 
  array (
    0 => 'int',
  ),
  'JsonException::getMessage' => 
  array (
    0 => 'string',
  ),
  'JsonException::getPrevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'JsonException::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'JsonException::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'JsonIncrementalParser::__construct' => 
  array (
    0 => 'void',
    'depth' => 'mixed',
    'options' => 'mixed',
  ),
  'JsonIncrementalParser::get' => 
  array (
    0 => 'mixed',
    'options' => 'mixed',
  ),
  'JsonIncrementalParser::getError' => 
  array (
    0 => 'mixed',
  ),
  'JsonIncrementalParser::parse' => 
  array (
    0 => 'mixed',
    'json' => 'mixed',
  ),
  'JsonIncrementalParser::parseFile' => 
  array (
    0 => 'mixed',
    'filename' => 'mixed',
  ),
  'JsonIncrementalParser::reset' => 
  array (
    0 => 'mixed',
  ),
  'JsonSerializable::jsonSerialize' => 
  array (
    0 => 'mixed',
  ),
  'Judy::__construct' => 
  array (
    0 => 'void',
    'judy_type' => 'int',
  ),
  'Judy::__destruct' => 
  array (
    0 => 'void',
  ),
  'Judy::byCount' => 
  array (
    0 => 'int',
    'nth_index' => 'int',
  ),
  'Judy::count' => 
  array (
    0 => 'int',
    'index_start=' => 'int',
    'index_end=' => 'int',
  ),
  'Judy::first' => 
  array (
    0 => 'mixed',
    'index=' => 'mixed',
  ),
  'Judy::firstEmpty' => 
  array (
    0 => 'mixed',
    'index=' => 'mixed',
  ),
  'Judy::free' => 
  array (
    0 => 'int',
  ),
  'Judy::getType' => 
  array (
    0 => 'int',
  ),
  'Judy::last' => 
  array (
    0 => 'mixed',
    'index=' => 'string',
  ),
  'Judy::lastEmpty' => 
  array (
    0 => 'mixed',
    'index=' => 'int',
  ),
  'Judy::memoryUsage' => 
  array (
    0 => 'int',
  ),
  'Judy::next' => 
  array (
    0 => 'mixed',
    'index' => 'mixed',
  ),
  'Judy::nextEmpty' => 
  array (
    0 => 'mixed',
    'index' => 'mixed',
  ),
  'Judy::offsetExists' => 
  array (
    0 => 'bool',
    'offset' => 'int|string',
  ),
  'Judy::offsetGet' => 
  array (
    0 => 'mixed',
    'offset' => 'int|string',
  ),
  'Judy::offsetSet' => 
  array (
    0 => 'bool',
    'offset' => 'int|null|string',
    'value' => 'mixed',
  ),
  'Judy::offsetUnset' => 
  array (
    0 => 'bool',
    'offset' => 'int|string',
  ),
  'Judy::prev' => 
  array (
    0 => 'mixed',
    'index' => 'mixed',
  ),
  'Judy::prevEmpty' => 
  array (
    0 => 'mixed',
    'index' => 'mixed',
  ),
  'Judy::size' => 
  array (
    0 => 'int',
  ),
  'judy_type' => 
  array (
    0 => 'int',
    'array' => 'judy',
  ),
  'judy_version' => 
  array (
    0 => 'string',
  ),
  'juliantojd' => 
  array (
    0 => 'int',
    'month' => 'int',
    'day' => 'int',
    'year' => 'int',
  ),
  'kadm5_chpass_principal' => 
  array (
    0 => 'bool',
    'handle' => 'resource',
    'principal' => 'string',
    'password' => 'string',
  ),
  'kadm5_create_principal' => 
  array (
    0 => 'bool',
    'handle' => 'resource',
    'principal' => 'string',
    'password=' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'kadm5_delete_principal' => 
  array (
    0 => 'bool',
    'handle' => 'resource',
    'principal' => 'string',
  ),
  'kadm5_destroy' => 
  array (
    0 => 'bool',
    'handle' => 'resource',
  ),
  'kadm5_flush' => 
  array (
    0 => 'bool',
    'handle' => 'resource',
  ),
  'kadm5_get_policies' => 
  array (
    0 => 'array<array-key, mixed>',
    'handle' => 'resource',
  ),
  'kadm5_get_principal' => 
  array (
    0 => 'array<array-key, mixed>',
    'handle' => 'resource',
    'principal' => 'string',
  ),
  'kadm5_get_principals' => 
  array (
    0 => 'array<array-key, mixed>',
    'handle' => 'resource',
  ),
  'kadm5_init_with_password' => 
  array (
    0 => 'resource',
    'admin_server' => 'string',
    'realm' => 'string',
    'principal' => 'string',
    'password' => 'string',
  ),
  'kadm5_modify_principal' => 
  array (
    0 => 'bool',
    'handle' => 'resource',
    'principal' => 'string',
    'options' => 'array<array-key, mixed>',
  ),
  'key' => 
  array (
    0 => 'int|null|string',
    'array' => 'array<array-key, mixed>',
  ),
  'key_exists' => 
  array (
    0 => 'bool',
    'key' => 'int|string',
    'array' => 'array<array-key, mixed>',
  ),
  'krsort' => 
  array (
    0 => 'true',
    '&rw_array' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'ksort' => 
  array (
    0 => 'true',
    '&rw_array' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'KTaglib_ID3v2_AttachedPictureFrame::getDescription' => 
  array (
    0 => 'string',
  ),
  'KTaglib_ID3v2_AttachedPictureFrame::getMimeType' => 
  array (
    0 => 'string',
  ),
  'KTaglib_ID3v2_AttachedPictureFrame::getType' => 
  array (
    0 => 'int',
  ),
  'KTaglib_ID3v2_AttachedPictureFrame::savePicture' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'KTaglib_ID3v2_AttachedPictureFrame::setMimeType' => 
  array (
    0 => 'string',
    'type' => 'string',
  ),
  'KTaglib_ID3v2_AttachedPictureFrame::setPicture' => 
  array (
    0 => 'mixed',
    'filename' => 'string',
  ),
  'KTaglib_ID3v2_AttachedPictureFrame::setType' => 
  array (
    0 => 'mixed',
    'type' => 'int',
  ),
  'KTaglib_ID3v2_Frame::__toString' => 
  array (
    0 => 'string',
  ),
  'KTaglib_ID3v2_Frame::getDescription' => 
  array (
    0 => 'string',
  ),
  'KTaglib_ID3v2_Frame::getMimeType' => 
  array (
    0 => 'string',
  ),
  'KTaglib_ID3v2_Frame::getSize' => 
  array (
    0 => 'int',
  ),
  'KTaglib_ID3v2_Frame::getType' => 
  array (
    0 => 'int',
  ),
  'KTaglib_ID3v2_Frame::savePicture' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'KTaglib_ID3v2_Frame::setMimeType' => 
  array (
    0 => 'string',
    'type' => 'string',
  ),
  'KTaglib_ID3v2_Frame::setPicture' => 
  array (
    0 => 'void',
    'filename' => 'string',
  ),
  'KTaglib_ID3v2_Frame::setType' => 
  array (
    0 => 'void',
    'type' => 'int',
  ),
  'KTaglib_ID3v2_Tag::addFrame' => 
  array (
    0 => 'bool',
    'frame' => 'KTaglib_ID3v2_Frame',
  ),
  'KTaglib_ID3v2_Tag::getFrameList' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'KTaglib_MPEG_AudioProperties::getBitrate' => 
  array (
    0 => 'int',
  ),
  'KTaglib_MPEG_AudioProperties::getChannels' => 
  array (
    0 => 'int',
  ),
  'KTaglib_MPEG_AudioProperties::getLayer' => 
  array (
    0 => 'int',
  ),
  'KTaglib_MPEG_AudioProperties::getLength' => 
  array (
    0 => 'int',
  ),
  'KTaglib_MPEG_AudioProperties::getSampleBitrate' => 
  array (
    0 => 'int',
  ),
  'KTaglib_MPEG_AudioProperties::getVersion' => 
  array (
    0 => 'int',
  ),
  'KTaglib_MPEG_AudioProperties::isCopyrighted' => 
  array (
    0 => 'bool',
  ),
  'KTaglib_MPEG_AudioProperties::isOriginal' => 
  array (
    0 => 'bool',
  ),
  'KTaglib_MPEG_AudioProperties::isProtectionEnabled' => 
  array (
    0 => 'bool',
  ),
  'KTaglib_MPEG_File::getAudioProperties' => 
  array (
    0 => 'KTaglib_MPEG_File',
  ),
  'KTaglib_MPEG_File::getID3v1Tag' => 
  array (
    0 => 'KTaglib_ID3v1_Tag',
    'create=' => 'bool',
  ),
  'KTaglib_MPEG_File::getID3v2Tag' => 
  array (
    0 => 'KTaglib_ID3v2_Tag',
    'create=' => 'bool',
  ),
  'KTaglib_Tag::getAlbum' => 
  array (
    0 => 'string',
  ),
  'KTaglib_Tag::getArtist' => 
  array (
    0 => 'string',
  ),
  'KTaglib_Tag::getComment' => 
  array (
    0 => 'string',
  ),
  'KTaglib_Tag::getGenre' => 
  array (
    0 => 'string',
  ),
  'KTaglib_Tag::getTitle' => 
  array (
    0 => 'string',
  ),
  'KTaglib_Tag::getTrack' => 
  array (
    0 => 'int',
  ),
  'KTaglib_Tag::getYear' => 
  array (
    0 => 'int',
  ),
  'KTaglib_Tag::isEmpty' => 
  array (
    0 => 'bool',
  ),
  'labelcacheObj::freeCache' => 
  array (
    0 => 'bool',
  ),
  'labelObj::__construct' => 
  array (
    0 => 'void',
  ),
  'labelObj::convertToString' => 
  array (
    0 => 'string',
  ),
  'labelObj::deleteStyle' => 
  array (
    0 => 'int',
    'index' => 'int',
  ),
  'labelObj::free' => 
  array (
    0 => 'void',
  ),
  'labelObj::getBinding' => 
  array (
    0 => 'string',
    'labelbinding' => 'mixed',
  ),
  'labelObj::getExpressionString' => 
  array (
    0 => 'string',
  ),
  'labelObj::getStyle' => 
  array (
    0 => 'styleObj',
    'index' => 'int',
  ),
  'labelObj::getTextString' => 
  array (
    0 => 'string',
  ),
  'labelObj::moveStyleDown' => 
  array (
    0 => 'int',
    'index' => 'int',
  ),
  'labelObj::moveStyleUp' => 
  array (
    0 => 'int',
    'index' => 'int',
  ),
  'labelObj::removeBinding' => 
  array (
    0 => 'int',
    'labelbinding' => 'mixed',
  ),
  'labelObj::set' => 
  array (
    0 => 'int',
    'property_name' => 'string',
    'new_value' => 'mixed',
  ),
  'labelObj::setBinding' => 
  array (
    0 => 'int',
    'labelbinding' => 'mixed',
    'value' => 'string',
  ),
  'labelObj::setExpression' => 
  array (
    0 => 'int',
    'expression' => 'string',
  ),
  'labelObj::setText' => 
  array (
    0 => 'int',
    'text' => 'string',
  ),
  'labelObj::updateFromString' => 
  array (
    0 => 'int',
    'snippet' => 'string',
  ),
  'Lapack::eigenValues' => 
  array (
    0 => 'array<array-key, mixed>',
    'a' => 'array<array-key, mixed>',
    'left=' => 'array<array-key, mixed>',
    'right=' => 'array<array-key, mixed>',
  ),
  'Lapack::identity' => 
  array (
    0 => 'array<array-key, mixed>',
    'n' => 'int',
  ),
  'Lapack::leastSquaresByFactorisation' => 
  array (
    0 => 'array<array-key, mixed>',
    'a' => 'array<array-key, mixed>',
    'b' => 'array<array-key, mixed>',
  ),
  'Lapack::leastSquaresBySVD' => 
  array (
    0 => 'array<array-key, mixed>',
    'a' => 'array<array-key, mixed>',
    'b' => 'array<array-key, mixed>',
  ),
  'Lapack::pseudoInverse' => 
  array (
    0 => 'array<array-key, mixed>',
    'a' => 'array<array-key, mixed>',
  ),
  'Lapack::singularValues' => 
  array (
    0 => 'array<array-key, mixed>',
    'a' => 'array<array-key, mixed>',
  ),
  'Lapack::solveLinearEquation' => 
  array (
    0 => 'array<array-key, mixed>',
    'a' => 'array<array-key, mixed>',
    'b' => 'array<array-key, mixed>',
  ),
  'layerObj::addFeature' => 
  array (
    0 => 'int',
    'shape' => 'shapeObj',
  ),
  'layerObj::applySLD' => 
  array (
    0 => 'int',
    'sldxml' => 'string',
    'namedlayer' => 'string',
  ),
  'layerObj::applySLDURL' => 
  array (
    0 => 'int',
    'sldurl' => 'string',
    'namedlayer' => 'string',
  ),
  'layerObj::clearProcessing' => 
  array (
    0 => 'void',
  ),
  'layerObj::close' => 
  array (
    0 => 'void',
  ),
  'layerObj::convertToString' => 
  array (
    0 => 'string',
  ),
  'layerObj::draw' => 
  array (
    0 => 'int',
    'image' => 'imageObj',
  ),
  'layerObj::drawQuery' => 
  array (
    0 => 'int',
    'image' => 'imageObj',
  ),
  'layerObj::free' => 
  array (
    0 => 'void',
  ),
  'layerObj::generateSLD' => 
  array (
    0 => 'string',
  ),
  'layerObj::getClass' => 
  array (
    0 => 'classObj',
    'classIndex' => 'int',
  ),
  'layerObj::getClassIndex' => 
  array (
    0 => 'int',
    'shape' => 'mixed',
    'classgroup' => 'mixed',
    'numclasses' => 'mixed',
  ),
  'layerObj::getExtent' => 
  array (
    0 => 'rectObj',
  ),
  'layerObj::getFilterString' => 
  array (
    0 => 'null|string',
  ),
  'layerObj::getGridIntersectionCoordinates' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'layerObj::getItems' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'layerObj::getMetaData' => 
  array (
    0 => 'int',
    'name' => 'string',
  ),
  'layerObj::getNumResults' => 
  array (
    0 => 'int',
  ),
  'layerObj::getProcessing' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'layerObj::getProjection' => 
  array (
    0 => 'string',
  ),
  'layerObj::getResult' => 
  array (
    0 => 'resultObj',
    'index' => 'int',
  ),
  'layerObj::getResultsBounds' => 
  array (
    0 => 'rectObj',
  ),
  'layerObj::getShape' => 
  array (
    0 => 'shapeObj',
    'result' => 'resultObj',
  ),
  'layerObj::getWMSFeatureInfoURL' => 
  array (
    0 => 'string',
    'clickX' => 'int',
    'clickY' => 'int',
    'featureCount' => 'int',
    'infoFormat' => 'string',
  ),
  'layerObj::isVisible' => 
  array (
    0 => 'bool',
  ),
  'layerObj::moveclassdown' => 
  array (
    0 => 'int',
    'index' => 'int',
  ),
  'layerObj::moveclassup' => 
  array (
    0 => 'int',
    'index' => 'int',
  ),
  'layerObj::ms_newLayerObj' => 
  array (
    0 => 'layerObj',
    'map' => 'mapObj',
    'layer' => 'layerObj',
  ),
  'layerObj::nextShape' => 
  array (
    0 => 'shapeObj',
  ),
  'layerObj::open' => 
  array (
    0 => 'int',
  ),
  'layerObj::queryByAttributes' => 
  array (
    0 => 'int',
    'qitem' => 'string',
    'qstring' => 'string',
    'mode' => 'int',
  ),
  'layerObj::queryByFeatures' => 
  array (
    0 => 'int',
    'slayer' => 'int',
  ),
  'layerObj::queryByPoint' => 
  array (
    0 => 'int',
    'point' => 'pointObj',
    'mode' => 'int',
    'buffer' => 'float',
  ),
  'layerObj::queryByRect' => 
  array (
    0 => 'int',
    'rect' => 'rectObj',
  ),
  'layerObj::queryByShape' => 
  array (
    0 => 'int',
    'shape' => 'shapeObj',
  ),
  'layerObj::removeClass' => 
  array (
    0 => 'classObj|null',
    'index' => 'int',
  ),
  'layerObj::removeMetaData' => 
  array (
    0 => 'int',
    'name' => 'string',
  ),
  'layerObj::set' => 
  array (
    0 => 'int',
    'property_name' => 'string',
    'new_value' => 'mixed',
  ),
  'layerObj::setConnectionType' => 
  array (
    0 => 'int',
    'connectiontype' => 'int',
    'plugin_library' => 'string',
  ),
  'layerObj::setFilter' => 
  array (
    0 => 'int',
    'expression' => 'string',
  ),
  'layerObj::setMetaData' => 
  array (
    0 => 'int',
    'name' => 'string',
    'value' => 'string',
  ),
  'layerObj::setProjection' => 
  array (
    0 => 'int',
    'proj_params' => 'string',
  ),
  'layerObj::setWKTProjection' => 
  array (
    0 => 'int',
    'proj_params' => 'string',
  ),
  'layerObj::updateFromString' => 
  array (
    0 => 'int',
    'snippet' => 'string',
  ),
  'lcfirst' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'lcg_value' => 
  array (
    0 => 'float',
  ),
  'lchgrp' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'group' => 'int|string',
  ),
  'lchown' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'user' => 'int|string',
  ),
  'ldap_8859_to_t61' => 
  array (
    0 => 'string',
    'value' => 'string',
  ),
  'ldap_add' => 
  array (
    0 => 'bool',
    'ldap' => 'LDAP\\Connection',
    'dn' => 'string',
    'entry' => 'array<array-key, mixed>',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_add_ext' => 
  array (
    0 => 'LDAP\\Result|false',
    'ldap' => 'LDAP\\Connection',
    'dn' => 'string',
    'entry' => 'array<array-key, mixed>',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_bind' => 
  array (
    0 => 'bool',
    'ldap' => 'LDAP\\Connection',
    'dn=' => 'null|string',
    'password=' => 'null|string',
  ),
  'ldap_bind_ext' => 
  array (
    0 => 'LDAP\\Result|false',
    'ldap' => 'LDAP\\Connection',
    'dn=' => 'null|string',
    'password=' => 'null|string',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_close' => 
  array (
    0 => 'bool',
    'ldap' => 'LDAP\\Connection',
  ),
  'ldap_compare' => 
  array (
    0 => 'bool|int',
    'ldap' => 'LDAP\\Connection',
    'dn' => 'string',
    'attribute' => 'string',
    'value' => 'string',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_connect' => 
  array (
    0 => 'LDAP\\Connection|false',
    'uri=' => 'null|string',
    'port=' => 'int',
    'wallet=' => 'string',
    'password=' => 'string',
    'auth_mode=' => 'int',
  ),
  'ldap_count_entries' => 
  array (
    0 => 'int',
    'ldap' => 'LDAP\\Connection',
    'result' => 'LDAP\\Result',
  ),
  'ldap_delete' => 
  array (
    0 => 'bool',
    'ldap' => 'LDAP\\Connection',
    'dn' => 'string',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_delete_ext' => 
  array (
    0 => 'LDAP\\Result|false',
    'ldap' => 'LDAP\\Connection',
    'dn' => 'string',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_dn2ufn' => 
  array (
    0 => 'false|string',
    'dn' => 'string',
  ),
  'ldap_err2str' => 
  array (
    0 => 'string',
    'errno' => 'int',
  ),
  'ldap_errno' => 
  array (
    0 => 'int',
    'ldap' => 'LDAP\\Connection',
  ),
  'ldap_error' => 
  array (
    0 => 'string',
    'ldap' => 'LDAP\\Connection',
  ),
  'ldap_escape' => 
  array (
    0 => 'string',
    'value' => 'string',
    'ignore=' => 'string',
    'flags=' => 'int',
  ),
  'ldap_exop' => 
  array (
    0 => 'LDAP\\Result|bool',
    'ldap' => 'LDAP\\Connection',
    'request_oid' => 'string',
    'request_data=' => 'null|string',
    'controls=' => 'array<array-key, mixed>|null',
    '&w_response_data=' => 'string',
    '&w_response_oid=' => 'string',
  ),
  'ldap_exop_passwd' => 
  array (
    0 => 'bool|string',
    'ldap' => 'LDAP\\Connection',
    'user=' => 'string',
    'old_password=' => 'string',
    'new_password=' => 'string',
    '&w_controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_exop_refresh' => 
  array (
    0 => 'false|int',
    'ldap' => 'LDAP\\Connection',
    'dn' => 'string',
    'ttl' => 'int',
  ),
  'ldap_exop_whoami' => 
  array (
    0 => 'false|string',
    'ldap' => 'LDAP\\Connection',
  ),
  'ldap_explode_dn' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'dn' => 'string',
    'with_attrib' => 'int',
  ),
  'ldap_first_attribute' => 
  array (
    0 => 'false|string',
    'ldap' => 'LDAP\\Connection',
    'entry' => 'LDAP\\ResultEntry',
  ),
  'ldap_first_entry' => 
  array (
    0 => 'LDAP\\ResultEntry|false',
    'ldap' => 'LDAP\\Connection',
    'result' => 'LDAP\\Result',
  ),
  'ldap_first_reference' => 
  array (
    0 => 'LDAP\\ResultEntry|false',
    'ldap' => 'LDAP\\Connection',
    'result' => 'LDAP\\Result',
  ),
  'ldap_free_result' => 
  array (
    0 => 'bool',
    'result' => 'LDAP\\Result',
  ),
  'ldap_get_attributes' => 
  array (
    0 => 'array<array-key, mixed>',
    'ldap' => 'LDAP\\Connection',
    'entry' => 'LDAP\\ResultEntry',
  ),
  'ldap_get_dn' => 
  array (
    0 => 'false|string',
    'ldap' => 'LDAP\\Connection',
    'entry' => 'LDAP\\ResultEntry',
  ),
  'ldap_get_entries' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'ldap' => 'LDAP\\Connection',
    'result' => 'LDAP\\Result',
  ),
  'ldap_get_option' => 
  array (
    0 => 'bool',
    'ldap' => 'LDAP\\Connection',
    'option' => 'int',
    '&w_value=' => 'array<array-key, mixed>|int|string',
  ),
  'ldap_get_values' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'ldap' => 'LDAP\\Connection',
    'entry' => 'LDAP\\ResultEntry',
    'attribute' => 'string',
  ),
  'ldap_get_values_len' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'ldap' => 'LDAP\\Connection',
    'entry' => 'LDAP\\ResultEntry',
    'attribute' => 'string',
  ),
  'ldap_list' => 
  array (
    0 => 'LDAP\\Result|array<array-key, LDAP\\Result>|false',
    'ldap' => 'LDAP\\Connection|array<array-key, LDAP\\Connection>',
    'base' => 'array<array-key, mixed>|string',
    'filter' => 'array<array-key, mixed>|string',
    'attributes=' => 'array<array-key, mixed>',
    'attributes_only=' => 'int',
    'sizelimit=' => 'int',
    'timelimit=' => 'int',
    'deref=' => 'int',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_mod_add' => 
  array (
    0 => 'bool',
    'ldap' => 'LDAP\\Connection',
    'dn' => 'string',
    'entry' => 'array<array-key, mixed>',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_mod_add_ext' => 
  array (
    0 => 'LDAP\\Result|false',
    'ldap' => 'LDAP\\Connection',
    'dn' => 'string',
    'entry' => 'array<array-key, mixed>',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_mod_del' => 
  array (
    0 => 'bool',
    'ldap' => 'LDAP\\Connection',
    'dn' => 'string',
    'entry' => 'array<array-key, mixed>',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_mod_del_ext' => 
  array (
    0 => 'LDAP\\Result|false',
    'ldap' => 'LDAP\\Connection',
    'dn' => 'string',
    'entry' => 'array<array-key, mixed>',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_mod_replace' => 
  array (
    0 => 'bool',
    'ldap' => 'LDAP\\Connection',
    'dn' => 'string',
    'entry' => 'array<array-key, mixed>',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_mod_replace_ext' => 
  array (
    0 => 'LDAP\\Result|false',
    'ldap' => 'LDAP\\Connection',
    'dn' => 'string',
    'entry' => 'array<array-key, mixed>',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_modify' => 
  array (
    0 => 'bool',
    'ldap' => 'LDAP\\Connection',
    'dn' => 'string',
    'entry' => 'array<array-key, mixed>',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_modify_batch' => 
  array (
    0 => 'bool',
    'ldap' => 'LDAP\\Connection',
    'dn' => 'string',
    'modifications_info' => 'array<array-key, mixed>',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_next_attribute' => 
  array (
    0 => 'false|string',
    'ldap' => 'LDAP\\Connection',
    'entry' => 'LDAP\\ResultEntry',
  ),
  'ldap_next_entry' => 
  array (
    0 => 'LDAP\\ResultEntry|false',
    'ldap' => 'LDAP\\Connection',
    'entry' => 'LDAP\\ResultEntry',
  ),
  'ldap_next_reference' => 
  array (
    0 => 'LDAP\\ResultEntry|false',
    'ldap' => 'LDAP\\Connection',
    'entry' => 'LDAP\\ResultEntry',
  ),
  'ldap_parse_exop' => 
  array (
    0 => 'bool',
    'ldap' => 'LDAP\\Connection',
    'result' => 'LDAP\\Result',
    '&w_response_data=' => 'string',
    '&w_response_oid=' => 'string',
  ),
  'ldap_parse_reference' => 
  array (
    0 => 'bool',
    'ldap' => 'LDAP\\Connection',
    'entry' => 'LDAP\\ResultEntry',
    '&w_referrals' => 'array<array-key, mixed>',
  ),
  'ldap_parse_result' => 
  array (
    0 => 'bool',
    'ldap' => 'LDAP\\Connection',
    'result' => 'LDAP\\Result',
    '&w_error_code' => 'int',
    '&w_matched_dn=' => 'string',
    '&w_error_message=' => 'string',
    '&w_referrals=' => 'array<array-key, mixed>',
    '&w_controls=' => 'array<array-key, mixed>',
  ),
  'ldap_read' => 
  array (
    0 => 'LDAP\\Result|array<array-key, LDAP\\Result>|false',
    'ldap' => 'LDAP\\Connection|array<array-key, LDAP\\Connection>',
    'base' => 'array<array-key, mixed>|string',
    'filter' => 'array<array-key, mixed>|string',
    'attributes=' => 'array<array-key, mixed>',
    'attributes_only=' => 'int',
    'sizelimit=' => 'int',
    'timelimit=' => 'int',
    'deref=' => 'int',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_rename' => 
  array (
    0 => 'bool',
    'ldap' => 'LDAP\\Connection',
    'dn' => 'string',
    'new_rdn' => 'string',
    'new_parent' => 'string',
    'delete_old_rdn' => 'bool',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_rename_ext' => 
  array (
    0 => 'LDAP\\Result|false',
    'ldap' => 'LDAP\\Connection',
    'dn' => 'string',
    'new_rdn' => 'string',
    'new_parent' => 'string',
    'delete_old_rdn' => 'bool',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_sasl_bind' => 
  array (
    0 => 'bool',
    'ldap' => 'LDAP\\Connection',
    'dn=' => 'null|string',
    'password=' => 'null|string',
    'mech=' => 'null|string',
    'realm=' => 'null|string',
    'authc_id=' => 'null|string',
    'authz_id=' => 'null|string',
    'props=' => 'null|string',
  ),
  'ldap_search' => 
  array (
    0 => 'LDAP\\Result|array<array-key, LDAP\\Result>|false',
    'ldap' => 'LDAP\\Connection|array<array-key, LDAP\\Connection>',
    'base' => 'array<array-key, mixed>|string',
    'filter' => 'array<array-key, mixed>|string',
    'attributes=' => 'array<array-key, mixed>',
    'attributes_only=' => 'int',
    'sizelimit=' => 'int',
    'timelimit=' => 'int',
    'deref=' => 'int',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_set_option' => 
  array (
    0 => 'bool',
    'ldap' => 'LDAP\\Connection|null',
    'option' => 'int',
    'value' => 'mixed',
  ),
  'ldap_set_rebind_proc' => 
  array (
    0 => 'bool',
    'ldap' => 'LDAP\\Connection',
    'callback' => 'callable|null',
  ),
  'ldap_start_tls' => 
  array (
    0 => 'bool',
    'ldap' => 'LDAP\\Connection',
  ),
  'ldap_t61_to_8859' => 
  array (
    0 => 'string',
    'value' => 'string',
  ),
  'ldap_unbind' => 
  array (
    0 => 'bool',
    'ldap' => 'LDAP\\Connection',
  ),
  'leak' => 
  array (
    0 => 'mixed',
    'num_bytes' => 'int',
  ),
  'leak_variable' => 
  array (
    0 => 'mixed',
    'variable' => 'mixed',
    'leak_data' => 'bool',
  ),
  'legendObj::convertToString' => 
  array (
    0 => 'string',
  ),
  'legendObj::free' => 
  array (
    0 => 'void',
  ),
  'legendObj::set' => 
  array (
    0 => 'int',
    'property_name' => 'string',
    'new_value' => 'mixed',
  ),
  'legendObj::updateFromString' => 
  array (
    0 => 'int',
    'snippet' => 'string',
  ),
  'LengthException::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'LengthException::__toString' => 
  array (
    0 => 'string',
  ),
  'LengthException::getCode' => 
  array (
    0 => 'int',
  ),
  'LengthException::getFile' => 
  array (
    0 => 'string',
  ),
  'LengthException::getLine' => 
  array (
    0 => 'int',
  ),
  'LengthException::getMessage' => 
  array (
    0 => 'string',
  ),
  'LengthException::getPrevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'LengthException::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'LengthException::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'LevelDB::__construct' => 
  array (
    0 => 'void',
    'name' => 'string',
    'options=' => 'array<array-key, mixed>',
    'read_options=' => 'array<array-key, mixed>',
    'write_options=' => 'array<array-key, mixed>',
  ),
  'LevelDB::close' => 
  array (
    0 => 'mixed',
  ),
  'LevelDB::compactRange' => 
  array (
    0 => 'mixed',
    'start' => 'mixed',
    'limit' => 'mixed',
  ),
  'LevelDB::delete' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'write_options=' => 'array<array-key, mixed>',
  ),
  'LevelDB::destroy' => 
  array (
    0 => 'mixed',
    'name' => 'mixed',
    'options=' => 'array<array-key, mixed>',
  ),
  'LevelDB::get' => 
  array (
    0 => 'bool|string',
    'key' => 'string',
    'read_options=' => 'array<array-key, mixed>',
  ),
  'LevelDB::getApproximateSizes' => 
  array (
    0 => 'mixed',
    'start' => 'mixed',
    'limit' => 'mixed',
  ),
  'LevelDB::getIterator' => 
  array (
    0 => 'LevelDBIterator',
    'options=' => 'array<array-key, mixed>',
  ),
  'LevelDB::getProperty' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'LevelDB::getSnapshot' => 
  array (
    0 => 'LevelDBSnapshot',
  ),
  'LevelDB::put' => 
  array (
    0 => 'mixed',
    'key' => 'string',
    'value' => 'string',
    'write_options=' => 'array<array-key, mixed>',
  ),
  'LevelDB::repair' => 
  array (
    0 => 'mixed',
    'name' => 'mixed',
    'options=' => 'array<array-key, mixed>',
  ),
  'LevelDB::set' => 
  array (
    0 => 'mixed',
    'key' => 'string',
    'value' => 'string',
    'write_options=' => 'array<array-key, mixed>',
  ),
  'LevelDB::write' => 
  array (
    0 => 'mixed',
    'batch' => 'LevelDBWriteBatch',
    'write_options=' => 'array<array-key, mixed>',
  ),
  'LevelDBIterator::__construct' => 
  array (
    0 => 'void',
    'db' => 'LevelDB',
    'read_options=' => 'array<array-key, mixed>',
  ),
  'LevelDBIterator::current' => 
  array (
    0 => 'mixed',
  ),
  'LevelDBIterator::destroy' => 
  array (
    0 => 'mixed',
  ),
  'LevelDBIterator::getError' => 
  array (
    0 => 'mixed',
  ),
  'LevelDBIterator::key' => 
  array (
    0 => 'int|string',
  ),
  'LevelDBIterator::last' => 
  array (
    0 => 'mixed',
  ),
  'LevelDBIterator::next' => 
  array (
    0 => 'void',
  ),
  'LevelDBIterator::prev' => 
  array (
    0 => 'mixed',
  ),
  'LevelDBIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'LevelDBIterator::seek' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'LevelDBIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'LevelDBSnapshot::__construct' => 
  array (
    0 => 'void',
    'db' => 'LevelDB',
  ),
  'LevelDBSnapshot::release' => 
  array (
    0 => 'mixed',
  ),
  'LevelDBWriteBatch::__construct' => 
  array (
    0 => 'void',
    'name' => 'mixed',
    'options=' => 'array<array-key, mixed>',
    'read_options=' => 'array<array-key, mixed>',
    'write_options=' => 'array<array-key, mixed>',
  ),
  'LevelDBWriteBatch::clear' => 
  array (
    0 => 'mixed',
  ),
  'LevelDBWriteBatch::delete' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'write_options=' => 'array<array-key, mixed>',
  ),
  'LevelDBWriteBatch::put' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
    'write_options=' => 'array<array-key, mixed>',
  ),
  'LevelDBWriteBatch::set' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
    'write_options=' => 'array<array-key, mixed>',
  ),
  'levenshtein' => 
  array (
    0 => 'int',
    'string1' => 'string',
    'string2' => 'string',
  ),
  'levenshtein\'1' => 
  array (
    0 => 'int',
    'string1' => 'string',
    'string2' => 'string',
    'insertion_cost' => 'int',
    'repetition_cost' => 'int',
    'deletion_cost' => 'int',
  ),
  'libxml_clear_errors' => 
  array (
    0 => 'void',
  ),
  'libxml_disable_entity_loader' => 
  array (
    0 => 'bool',
    'disable=' => 'bool',
  ),
  'libxml_get_errors' => 
  array (
    0 => 'list<LibXMLError>',
  ),
  'libxml_get_last_error' => 
  array (
    0 => 'LibXMLError|false',
  ),
  'libxml_get_external_entity_loader' => 
  array (
    0 => 'callable(string, string, array{directory: null|string, extSubSystem: null|string, extSubURI: null|string, intSubName: null|string}):(null|resource|string)|null',
  ),
  'libxml_set_external_entity_loader' => 
  array (
    0 => 'bool',
    'resolver_function' => 'callable(string, string, array{directory: null|string, extSubSystem: null|string, extSubURI: null|string, intSubName: null|string}):(null|resource|string)|null',
  ),
  'libxml_set_streams_context' => 
  array (
    0 => 'void',
    'context' => 'resource',
  ),
  'libxml_use_internal_errors' => 
  array (
    0 => 'bool',
    'use_errors=' => 'bool|null',
  ),
  'LimitIterator::__construct' => 
  array (
    0 => 'void',
    'iterator' => 'Iterator',
    'offset=' => 'int',
    'limit=' => 'int',
  ),
  'LimitIterator::current' => 
  array (
    0 => 'mixed',
  ),
  'LimitIterator::getInnerIterator' => 
  array (
    0 => 'Iterator',
  ),
  'LimitIterator::getPosition' => 
  array (
    0 => 'int',
  ),
  'LimitIterator::key' => 
  array (
    0 => 'mixed',
  ),
  'LimitIterator::next' => 
  array (
    0 => 'void',
  ),
  'LimitIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'LimitIterator::seek' => 
  array (
    0 => 'int',
    'offset' => 'int',
  ),
  'LimitIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'lineObj::__construct' => 
  array (
    0 => 'void',
  ),
  'lineObj::add' => 
  array (
    0 => 'int',
    'point' => 'pointObj',
  ),
  'lineObj::addXY' => 
  array (
    0 => 'int',
    'x' => 'float',
    'y' => 'float',
    'm' => 'float',
  ),
  'lineObj::addXYZ' => 
  array (
    0 => 'int',
    'x' => 'float',
    'y' => 'float',
    'z' => 'float',
    'm' => 'float',
  ),
  'lineObj::ms_newLineObj' => 
  array (
    0 => 'lineObj',
  ),
  'lineObj::point' => 
  array (
    0 => 'pointObj',
    'i' => 'int',
  ),
  'lineObj::project' => 
  array (
    0 => 'int',
    'in' => 'projectionObj',
    'out' => 'projectionObj',
  ),
  'link' => 
  array (
    0 => 'bool',
    'target' => 'string',
    'link' => 'string',
  ),
  'linkinfo' => 
  array (
    0 => 'false|int',
    'path' => 'string',
  ),
  'litespeed_request_headers' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'litespeed_response_headers' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Locale::acceptFromHttp' => 
  array (
    0 => 'false|string',
    'header' => 'string',
  ),
  'Locale::canonicalize' => 
  array (
    0 => 'null|string',
    'locale' => 'string',
  ),
  'Locale::composeLocale' => 
  array (
    0 => 'string',
    'subtags' => 'array<array-key, mixed>',
  ),
  'Locale::filterMatches' => 
  array (
    0 => 'bool|null',
    'languageTag' => 'string',
    'locale' => 'string',
    'canonicalize=' => 'bool',
  ),
  'Locale::getAllVariants' => 
  array (
    0 => 'array<array-key, mixed>',
    'locale' => 'string',
  ),
  'Locale::getDefault' => 
  array (
    0 => 'string',
  ),
  'Locale::getDisplayLanguage' => 
  array (
    0 => 'string',
    'locale' => 'string',
    'displayLocale=' => 'null|string',
  ),
  'Locale::getDisplayName' => 
  array (
    0 => 'string',
    'locale' => 'string',
    'displayLocale=' => 'null|string',
  ),
  'Locale::getDisplayRegion' => 
  array (
    0 => 'string',
    'locale' => 'string',
    'displayLocale=' => 'null|string',
  ),
  'Locale::getDisplayScript' => 
  array (
    0 => 'string',
    'locale' => 'string',
    'displayLocale=' => 'null|string',
  ),
  'Locale::getDisplayVariant' => 
  array (
    0 => 'string',
    'locale' => 'string',
    'displayLocale=' => 'null|string',
  ),
  'Locale::getKeywords' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'locale' => 'string',
  ),
  'Locale::getPrimaryLanguage' => 
  array (
    0 => 'string',
    'locale' => 'string',
  ),
  'Locale::getRegion' => 
  array (
    0 => 'string',
    'locale' => 'string',
  ),
  'Locale::getScript' => 
  array (
    0 => 'string',
    'locale' => 'string',
  ),
  'Locale::lookup' => 
  array (
    0 => 'null|string',
    'languageTag' => 'array<array-key, mixed>',
    'locale' => 'string',
    'canonicalize=' => 'bool',
    'defaultLocale=' => 'null|string',
  ),
  'Locale::parseLocale' => 
  array (
    0 => 'array<array-key, mixed>',
    'locale' => 'string',
  ),
  'Locale::setDefault' => 
  array (
    0 => 'bool',
    'locale' => 'string',
  ),
  'locale_accept_from_http' => 
  array (
    0 => 'false|string',
    'header' => 'string',
  ),
  'locale_canonicalize' => 
  array (
    0 => 'null|string',
    'locale' => 'string',
  ),
  'locale_compose' => 
  array (
    0 => 'false|string',
    'subtags' => 'array<array-key, mixed>',
  ),
  'locale_filter_matches' => 
  array (
    0 => 'bool|null',
    'languageTag' => 'string',
    'locale' => 'string',
    'canonicalize=' => 'bool',
  ),
  'locale_get_all_variants' => 
  array (
    0 => 'array<array-key, mixed>|null',
    'locale' => 'string',
  ),
  'locale_get_default' => 
  array (
    0 => 'string',
  ),
  'locale_get_display_language' => 
  array (
    0 => 'string',
    'locale' => 'string',
    'displayLocale=' => 'null|string',
  ),
  'locale_get_display_name' => 
  array (
    0 => 'string',
    'locale' => 'string',
    'displayLocale=' => 'null|string',
  ),
  'locale_get_display_region' => 
  array (
    0 => 'string',
    'locale' => 'string',
    'displayLocale=' => 'null|string',
  ),
  'locale_get_display_script' => 
  array (
    0 => 'string',
    'locale' => 'string',
    'displayLocale=' => 'null|string',
  ),
  'locale_get_display_variant' => 
  array (
    0 => 'string',
    'locale' => 'string',
    'displayLocale=' => 'null|string',
  ),
  'locale_get_keywords' => 
  array (
    0 => 'array<array-key, mixed>|false|null',
    'locale' => 'string',
  ),
  'locale_get_primary_language' => 
  array (
    0 => 'null|string',
    'locale' => 'string',
  ),
  'locale_get_region' => 
  array (
    0 => 'null|string',
    'locale' => 'string',
  ),
  'locale_get_script' => 
  array (
    0 => 'null|string',
    'locale' => 'string',
  ),
  'locale_lookup' => 
  array (
    0 => 'null|string',
    'languageTag' => 'array<array-key, mixed>',
    'locale' => 'string',
    'canonicalize=' => 'bool',
    'defaultLocale=' => 'null|string',
  ),
  'locale_parse' => 
  array (
    0 => 'array<array-key, mixed>|null',
    'locale' => 'string',
  ),
  'locale_set_default' => 
  array (
    0 => 'bool',
    'locale' => 'string',
  ),
  'localeconv' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'localtime' => 
  array (
    0 => 'array<array-key, mixed>',
    'timestamp=' => 'int|null',
    'associative=' => 'bool',
  ),
  'log' => 
  array (
    0 => 'float',
    'num' => 'float',
    'base=' => 'float',
  ),
  'log10' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'log1p' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'LogicException::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'LogicException::__toString' => 
  array (
    0 => 'string',
  ),
  'LogicException::getCode' => 
  array (
    0 => 'int',
  ),
  'LogicException::getFile' => 
  array (
    0 => 'string',
  ),
  'LogicException::getLine' => 
  array (
    0 => 'int',
  ),
  'LogicException::getMessage' => 
  array (
    0 => 'string',
  ),
  'LogicException::getPrevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'LogicException::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'LogicException::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'long2ip' => 
  array (
    0 => 'string',
    'ip' => 'int',
  ),
  'lstat' => 
  array (
    0 => 'array{0: int, 10: int, 11: int, 12: int, 1: int, 2: int, 3: int, 4: int, 5: int, 6: int, 7: int, 8: int, 9: int, atime: int, blksize: int, blocks: int, ctime: int, dev: int, gid: int, ino: int, mode: int, mtime: int, nlink: int, rdev: int, size: int, uid: int}|false',
    'filename' => 'string',
  ),
  'ltrim' => 
  array (
    0 => 'string',
    'string' => 'string',
    'characters=' => 'string',
  ),
  'Lua::__call' => 
  array (
    0 => 'mixed',
    'lua_func' => 'callable',
    'args=' => 'array<array-key, mixed>',
    'use_self=' => 'int',
  ),
  'Lua::__construct' => 
  array (
    0 => 'void',
    'lua_script_file' => 'string',
  ),
  'Lua::assign' => 
  array (
    0 => 'Lua|null',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'Lua::call' => 
  array (
    0 => 'mixed',
    'lua_func' => 'callable',
    'args=' => 'array<array-key, mixed>',
    'use_self=' => 'int',
  ),
  'Lua::eval' => 
  array (
    0 => 'mixed',
    'statements' => 'string',
  ),
  'Lua::getVersion' => 
  array (
    0 => 'string',
  ),
  'Lua::include' => 
  array (
    0 => 'mixed',
    'file' => 'string',
  ),
  'Lua::registerCallback' => 
  array (
    0 => 'Lua|false|null',
    'name' => 'string',
    'function' => 'callable',
  ),
  'LuaClosure::__invoke' => 
  array (
    0 => 'void',
    'arg' => 'mixed',
    '...args=' => 'mixed',
  ),
  'lzf_compress' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'lzf_decompress' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'lzf_optimized_for' => 
  array (
    0 => 'int',
  ),
  'magic_quotes_runtime' => 
  array (
    0 => 'bool',
    'new_setting' => 'bool',
  ),
  'mail' => 
  array (
    0 => 'bool',
    'to' => 'string',
    'subject' => 'string',
    'message' => 'string',
    'additional_headers=' => 'array<array-key, mixed>|string',
    'additional_params=' => 'string',
  ),
  'mailparse_determine_best_xfer_encoding' => 
  array (
    0 => 'string',
    'fp' => 'resource',
  ),
  'mailparse_msg_create' => 
  array (
    0 => 'resource',
  ),
  'mailparse_msg_extract_part' => 
  array (
    0 => 'void',
    'mimemail' => 'resource',
    'msgbody' => 'string',
    'callbackfunc=' => 'callable',
  ),
  'mailparse_msg_extract_part_file' => 
  array (
    0 => 'string',
    'mimemail' => 'resource',
    'filename' => 'mixed',
    'callbackfunc=' => 'callable',
  ),
  'mailparse_msg_extract_whole_part_file' => 
  array (
    0 => 'string',
    'mimemail' => 'resource',
    'filename' => 'string',
    'callbackfunc=' => 'callable',
  ),
  'mailparse_msg_free' => 
  array (
    0 => 'bool',
    'mimemail' => 'resource',
  ),
  'mailparse_msg_get_part' => 
  array (
    0 => 'resource',
    'mimemail' => 'resource',
    'mimesection' => 'string',
  ),
  'mailparse_msg_get_part_data' => 
  array (
    0 => 'array<array-key, mixed>',
    'mimemail' => 'resource',
  ),
  'mailparse_msg_get_structure' => 
  array (
    0 => 'array<array-key, mixed>',
    'mimemail' => 'resource',
  ),
  'mailparse_msg_parse' => 
  array (
    0 => 'bool',
    'mimemail' => 'resource',
    'data' => 'string',
  ),
  'mailparse_msg_parse_file' => 
  array (
    0 => 'false|resource',
    'filename' => 'string',
  ),
  'mailparse_rfc822_parse_addresses' => 
  array (
    0 => 'array<array-key, mixed>',
    'addresses' => 'string',
  ),
  'mailparse_stream_encode' => 
  array (
    0 => 'bool',
    'sourcefp' => 'resource',
    'destfp' => 'resource',
    'encoding' => 'string',
  ),
  'mailparse_uudecode_all' => 
  array (
    0 => 'array<array-key, mixed>',
    'fp' => 'resource',
  ),
  'mapObj::__construct' => 
  array (
    0 => 'void',
    'map_file_name' => 'string',
    'new_map_path' => 'string',
  ),
  'mapObj::appendOutputFormat' => 
  array (
    0 => 'int',
    'outputFormat' => 'outputformatObj',
  ),
  'mapObj::applyconfigoptions' => 
  array (
    0 => 'int',
  ),
  'mapObj::applySLD' => 
  array (
    0 => 'int',
    'sldxml' => 'string',
  ),
  'mapObj::applySLDURL' => 
  array (
    0 => 'int',
    'sldurl' => 'string',
  ),
  'mapObj::convertToString' => 
  array (
    0 => 'string',
  ),
  'mapObj::draw' => 
  array (
    0 => 'imageObj|null',
  ),
  'mapObj::drawLabelCache' => 
  array (
    0 => 'int',
    'image' => 'imageObj',
  ),
  'mapObj::drawLegend' => 
  array (
    0 => 'imageObj',
  ),
  'mapObj::drawQuery' => 
  array (
    0 => 'imageObj|null',
  ),
  'mapObj::drawReferenceMap' => 
  array (
    0 => 'imageObj',
  ),
  'mapObj::drawScaleBar' => 
  array (
    0 => 'imageObj',
  ),
  'mapObj::embedLegend' => 
  array (
    0 => 'int',
    'image' => 'imageObj',
  ),
  'mapObj::embedScalebar' => 
  array (
    0 => 'int',
    'image' => 'imageObj',
  ),
  'mapObj::free' => 
  array (
    0 => 'void',
  ),
  'mapObj::generateSLD' => 
  array (
    0 => 'string',
  ),
  'mapObj::getAllGroupNames' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mapObj::getAllLayerNames' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mapObj::getColorbyIndex' => 
  array (
    0 => 'colorObj',
    'iCloIndex' => 'int',
  ),
  'mapObj::getConfigOption' => 
  array (
    0 => 'string',
    'key' => 'string',
  ),
  'mapObj::getLabel' => 
  array (
    0 => 'labelcacheMemberObj',
    'index' => 'int',
  ),
  'mapObj::getLayer' => 
  array (
    0 => 'layerObj',
    'index' => 'int',
  ),
  'mapObj::getLayerByName' => 
  array (
    0 => 'layerObj',
    'layer_name' => 'string',
  ),
  'mapObj::getLayersDrawingOrder' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mapObj::getLayersIndexByGroup' => 
  array (
    0 => 'array<array-key, mixed>',
    'groupname' => 'string',
  ),
  'mapObj::getMetaData' => 
  array (
    0 => 'int',
    'name' => 'string',
  ),
  'mapObj::getNumSymbols' => 
  array (
    0 => 'int',
  ),
  'mapObj::getOutputFormat' => 
  array (
    0 => 'null|outputformatObj',
    'index' => 'int',
  ),
  'mapObj::getProjection' => 
  array (
    0 => 'string',
  ),
  'mapObj::getSymbolByName' => 
  array (
    0 => 'int',
    'symbol_name' => 'string',
  ),
  'mapObj::getSymbolObjectById' => 
  array (
    0 => 'symbolObj',
    'symbolid' => 'int',
  ),
  'mapObj::loadMapContext' => 
  array (
    0 => 'int',
    'filename' => 'string',
    'unique_layer_name' => 'bool',
  ),
  'mapObj::loadOWSParameters' => 
  array (
    0 => 'int',
    'request' => 'OwsrequestObj',
    'version' => 'string',
  ),
  'mapObj::moveLayerDown' => 
  array (
    0 => 'int',
    'layerindex' => 'int',
  ),
  'mapObj::moveLayerUp' => 
  array (
    0 => 'int',
    'layerindex' => 'int',
  ),
  'mapObj::ms_newMapObjFromString' => 
  array (
    0 => 'mapObj',
    'map_file_string' => 'string',
    'new_map_path' => 'string',
  ),
  'mapObj::offsetExtent' => 
  array (
    0 => 'int',
    'x' => 'float',
    'y' => 'float',
  ),
  'mapObj::owsDispatch' => 
  array (
    0 => 'int',
    'request' => 'OwsrequestObj',
  ),
  'mapObj::prepareImage' => 
  array (
    0 => 'imageObj',
  ),
  'mapObj::prepareQuery' => 
  array (
    0 => 'void',
  ),
  'mapObj::processLegendTemplate' => 
  array (
    0 => 'string',
    'params' => 'array<array-key, mixed>',
  ),
  'mapObj::processQueryTemplate' => 
  array (
    0 => 'string',
    'params' => 'array<array-key, mixed>',
    'generateimages' => 'bool',
  ),
  'mapObj::processTemplate' => 
  array (
    0 => 'string',
    'params' => 'array<array-key, mixed>',
    'generateimages' => 'bool',
  ),
  'mapObj::queryByFeatures' => 
  array (
    0 => 'int',
    'slayer' => 'int',
  ),
  'mapObj::queryByIndex' => 
  array (
    0 => 'int',
    'layerindex' => 'mixed',
    'tileindex' => 'mixed',
    'shapeindex' => 'mixed',
    'addtoquery' => 'mixed',
  ),
  'mapObj::queryByPoint' => 
  array (
    0 => 'int',
    'point' => 'pointObj',
    'mode' => 'int',
    'buffer' => 'float',
  ),
  'mapObj::queryByRect' => 
  array (
    0 => 'int',
    'rect' => 'rectObj',
  ),
  'mapObj::queryByShape' => 
  array (
    0 => 'int',
    'shape' => 'shapeObj',
  ),
  'mapObj::removeLayer' => 
  array (
    0 => 'layerObj',
    'nIndex' => 'int',
  ),
  'mapObj::removeMetaData' => 
  array (
    0 => 'int',
    'name' => 'string',
  ),
  'mapObj::removeOutputFormat' => 
  array (
    0 => 'int',
    'name' => 'string',
  ),
  'mapObj::save' => 
  array (
    0 => 'int',
    'filename' => 'string',
  ),
  'mapObj::saveMapContext' => 
  array (
    0 => 'int',
    'filename' => 'string',
  ),
  'mapObj::saveQuery' => 
  array (
    0 => 'int',
    'filename' => 'string',
    'results' => 'int',
  ),
  'mapObj::scaleExtent' => 
  array (
    0 => 'int',
    'zoomfactor' => 'float',
    'minscaledenom' => 'float',
    'maxscaledenom' => 'float',
  ),
  'mapObj::selectOutputFormat' => 
  array (
    0 => 'int',
    'type' => 'string',
  ),
  'mapObj::set' => 
  array (
    0 => 'int',
    'property_name' => 'string',
    'new_value' => 'mixed',
  ),
  'mapObj::setCenter' => 
  array (
    0 => 'int',
    'center' => 'pointObj',
  ),
  'mapObj::setConfigOption' => 
  array (
    0 => 'int',
    'key' => 'string',
    'value' => 'string',
  ),
  'mapObj::setExtent' => 
  array (
    0 => 'void',
    'minx' => 'float',
    'miny' => 'float',
    'maxx' => 'float',
    'maxy' => 'float',
  ),
  'mapObj::setFontSet' => 
  array (
    0 => 'int',
    'fileName' => 'string',
  ),
  'mapObj::setMetaData' => 
  array (
    0 => 'int',
    'name' => 'string',
    'value' => 'string',
  ),
  'mapObj::setProjection' => 
  array (
    0 => 'int',
    'proj_params' => 'string',
    'bSetUnitsAndExtents' => 'bool',
  ),
  'mapObj::setRotation' => 
  array (
    0 => 'int',
    'rotation_angle' => 'float',
  ),
  'mapObj::setSize' => 
  array (
    0 => 'int',
    'width' => 'int',
    'height' => 'int',
  ),
  'mapObj::setSymbolSet' => 
  array (
    0 => 'int',
    'fileName' => 'string',
  ),
  'mapObj::setWKTProjection' => 
  array (
    0 => 'int',
    'proj_params' => 'string',
    'bSetUnitsAndExtents' => 'bool',
  ),
  'mapObj::zoomPoint' => 
  array (
    0 => 'int',
    'nZoomFactor' => 'int',
    'oPixelPos' => 'pointObj',
    'nImageWidth' => 'int',
    'nImageHeight' => 'int',
    'oGeorefExt' => 'rectObj',
  ),
  'mapObj::zoomRectangle' => 
  array (
    0 => 'int',
    'oPixelExt' => 'rectObj',
    'nImageWidth' => 'int',
    'nImageHeight' => 'int',
    'oGeorefExt' => 'rectObj',
  ),
  'mapObj::zoomScale' => 
  array (
    0 => 'int',
    'nScaleDenom' => 'float',
    'oPixelPos' => 'pointObj',
    'nImageWidth' => 'int',
    'nImageHeight' => 'int',
    'oGeorefExt' => 'rectObj',
    'oMaxGeorefExt' => 'rectObj',
  ),
  'max' => 
  array (
    0 => 'mixed',
    'value' => 'non-empty-array<array-key, mixed>',
  ),
  'max\'1' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
    'values' => 'mixed',
    '...args=' => 'mixed',
  ),
  'mb_check_encoding' => 
  array (
    0 => 'bool',
    'value' => 'array<array-key, mixed>|string',
    'encoding=' => 'null|string',
  ),
  'mb_chr' => 
  array (
    0 => 'false|non-empty-string',
    'codepoint' => 'int',
    'encoding=' => 'null|string',
  ),
  'mb_convert_case' => 
  array (
    0 => 'string',
    'string' => 'string',
    'mode' => 'int',
    'encoding=' => 'null|string',
  ),
  'mb_convert_encoding' => 
  array (
    0 => 'false|string',
    'string' => 'string',
    'to_encoding' => 'string',
    'from_encoding=' => 'array<array-key, mixed>|null|string',
  ),
  'mb_convert_encoding\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'string' => 'array<array-key, mixed>',
    'to_encoding' => 'string',
    'from_encoding=' => 'array<array-key, mixed>|null|string',
  ),
  'mb_convert_kana' => 
  array (
    0 => 'string',
    'string' => 'string',
    'mode=' => 'string',
    'encoding=' => 'null|string',
  ),
  'mb_convert_variables' => 
  array (
    0 => 'false|string',
    'to_encoding' => 'string',
    'from_encoding' => 'array<array-key, mixed>|string',
    '&rw_var' => 'array<array-key, mixed>|object|string',
    '&...rw_vars=' => 'array<array-key, mixed>|object|string',
  ),
  'mb_decode_mimeheader' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'mb_decode_numericentity' => 
  array (
    0 => 'string',
    'string' => 'string',
    'map' => 'array<array-key, mixed>',
    'encoding=' => 'null|string',
  ),
  'mb_detect_encoding' => 
  array (
    0 => 'false|string',
    'string' => 'string',
    'encodings=' => 'array<array-key, mixed>|null|string',
    'strict=' => 'bool',
  ),
  'mb_detect_order' => 
  array (
    0 => 'bool|list<string>',
    'encoding=' => 'array<array-key, mixed>|null|string',
  ),
  'mb_encode_mimeheader' => 
  array (
    0 => 'string',
    'string' => 'string',
    'charset=' => 'null|string',
    'transfer_encoding=' => 'null|string',
    'newline=' => 'string',
    'indent=' => 'int',
  ),
  'mb_encode_numericentity' => 
  array (
    0 => 'string',
    'string' => 'string',
    'map' => 'array<array-key, mixed>',
    'encoding=' => 'null|string',
    'hex=' => 'bool',
  ),
  'mb_encoding_aliases' => 
  array (
    0 => 'list<string>',
    'encoding' => 'string',
  ),
  'mb_ereg' => 
  array (
    0 => 'bool',
    'pattern' => 'string',
    'string' => 'string',
    '&w_matches=' => 'array<array-key, mixed>|null',
  ),
  'mb_ereg_match' => 
  array (
    0 => 'bool',
    'pattern' => 'string',
    'string' => 'string',
    'options=' => 'null|string',
  ),
  'mb_ereg_replace' => 
  array (
    0 => 'false|null|string',
    'pattern' => 'string',
    'replacement' => 'string',
    'string' => 'string',
    'options=' => 'null|string',
  ),
  'mb_ereg_replace_callback' => 
  array (
    0 => 'false|null|string',
    'pattern' => 'string',
    'callback' => 'callable',
    'string' => 'string',
    'options=' => 'null|string',
  ),
  'mb_ereg_search' => 
  array (
    0 => 'bool',
    'pattern=' => 'null|string',
    'options=' => 'null|string',
  ),
  'mb_ereg_search_getpos' => 
  array (
    0 => 'int',
  ),
  'mb_ereg_search_getregs' => 
  array (
    0 => 'array<array-key, string>|false',
  ),
  'mb_ereg_search_init' => 
  array (
    0 => 'bool',
    'string' => 'string',
    'pattern=' => 'null|string',
    'options=' => 'null|string',
  ),
  'mb_ereg_search_pos' => 
  array (
    0 => 'array<array-key, int>|false',
    'pattern=' => 'null|string',
    'options=' => 'null|string',
  ),
  'mb_ereg_search_regs' => 
  array (
    0 => 'array<array-key, string>|false',
    'pattern=' => 'null|string',
    'options=' => 'null|string',
  ),
  'mb_ereg_search_setpos' => 
  array (
    0 => 'bool',
    'offset' => 'int',
  ),
  'mb_eregi' => 
  array (
    0 => 'bool',
    'pattern' => 'string',
    'string' => 'string',
    '&w_matches=' => 'array<array-key, mixed>|null',
  ),
  'mb_eregi_replace' => 
  array (
    0 => 'false|null|string',
    'pattern' => 'string',
    'replacement' => 'string',
    'string' => 'string',
    'options=' => 'null|string',
  ),
  'mb_get_info' => 
  array (
    0 => 'array<array-key, mixed>|false|int|null|string',
    'type=' => 'string',
  ),
  'mb_http_input' => 
  array (
    0 => 'array<array-key, mixed>|false|string',
    'type=' => 'null|string',
  ),
  'mb_http_output' => 
  array (
    0 => 'bool|string',
    'encoding=' => 'null|string',
  ),
  'mb_internal_encoding' => 
  array (
    0 => 'bool|string',
    'encoding=' => 'null|string',
  ),
  'mb_language' => 
  array (
    0 => 'bool|string',
    'language=' => 'null|string',
  ),
  'mb_list_encodings' => 
  array (
    0 => 'list<string>',
  ),
  'mb_ord' => 
  array (
    0 => 'false|int',
    'string' => 'string',
    'encoding=' => 'null|string',
  ),
  'mb_output_handler' => 
  array (
    0 => 'string',
    'string' => 'string',
    'status' => 'int',
  ),
  'mb_parse_str' => 
  array (
    0 => 'bool',
    'string' => 'string',
    '&w_result' => 'array<array-key, mixed>',
  ),
  'mb_preferred_mime_name' => 
  array (
    0 => 'false|string',
    'encoding' => 'string',
  ),
  'mb_regex_encoding' => 
  array (
    0 => 'bool|string',
    'encoding=' => 'null|string',
  ),
  'mb_regex_set_options' => 
  array (
    0 => 'string',
    'options=' => 'null|string',
  ),
  'mb_scrub' => 
  array (
    0 => 'string',
    'string' => 'string',
    'encoding=' => 'null|string',
  ),
  'mb_send_mail' => 
  array (
    0 => 'bool',
    'to' => 'string',
    'subject' => 'string',
    'message' => 'string',
    'additional_headers=' => 'array<array-key, mixed>|string',
    'additional_params=' => 'null|string',
  ),
  'mb_split' => 
  array (
    0 => 'false|list<string>',
    'pattern' => 'string',
    'string' => 'string',
    'limit=' => 'int',
  ),
  'mb_str_split' => 
  array (
    0 => 'list<string>',
    'string' => 'string',
    'length=' => 'int<1, max>',
    'encoding=' => 'null|string',
  ),
  'mb_strcut' => 
  array (
    0 => 'string',
    'string' => 'string',
    'start' => 'int',
    'length=' => 'int|null',
    'encoding=' => 'null|string',
  ),
  'mb_strimwidth' => 
  array (
    0 => 'string',
    'string' => 'string',
    'start' => 'int',
    'width' => 'int',
    'trim_marker=' => 'string',
    'encoding=' => 'null|string',
  ),
  'mb_stripos' => 
  array (
    0 => 'false|int',
    'haystack' => 'string',
    'needle' => 'string',
    'offset=' => 'int',
    'encoding=' => 'null|string',
  ),
  'mb_stristr' => 
  array (
    0 => 'false|string',
    'haystack' => 'string',
    'needle' => 'string',
    'before_needle=' => 'bool',
    'encoding=' => 'null|string',
  ),
  'mb_strlen' => 
  array (
    0 => 'int<0, max>',
    'string' => 'string',
    'encoding=' => 'null|string',
  ),
  'mb_strpos' => 
  array (
    0 => 'false|int',
    'haystack' => 'string',
    'needle' => 'string',
    'offset=' => 'int',
    'encoding=' => 'null|string',
  ),
  'mb_strrchr' => 
  array (
    0 => 'false|string',
    'haystack' => 'string',
    'needle' => 'string',
    'before_needle=' => 'bool',
    'encoding=' => 'null|string',
  ),
  'mb_strrichr' => 
  array (
    0 => 'false|string',
    'haystack' => 'string',
    'needle' => 'string',
    'before_needle=' => 'bool',
    'encoding=' => 'null|string',
  ),
  'mb_strripos' => 
  array (
    0 => 'false|int',
    'haystack' => 'string',
    'needle' => 'string',
    'offset=' => 'int',
    'encoding=' => 'null|string',
  ),
  'mb_strrpos' => 
  array (
    0 => 'false|int',
    'haystack' => 'string',
    'needle' => 'string',
    'offset=' => 'int',
    'encoding=' => 'null|string',
  ),
  'mb_strstr' => 
  array (
    0 => 'false|string',
    'haystack' => 'string',
    'needle' => 'string',
    'before_needle=' => 'bool',
    'encoding=' => 'null|string',
  ),
  'mb_strtolower' => 
  array (
    0 => 'lowercase-string',
    'string' => 'string',
    'encoding=' => 'null|string',
  ),
  'mb_strtoupper' => 
  array (
    0 => 'string',
    'string' => 'string',
    'encoding=' => 'null|string',
  ),
  'mb_strwidth' => 
  array (
    0 => 'int',
    'string' => 'string',
    'encoding=' => 'null|string',
  ),
  'mb_substitute_character' => 
  array (
    0 => 'bool|int|string',
    'substitute_character=' => 'int|null|string',
  ),
  'mb_substr' => 
  array (
    0 => 'string',
    'string' => 'string',
    'start' => 'int',
    'length=' => 'int|null',
    'encoding=' => 'null|string',
  ),
  'mb_substr_count' => 
  array (
    0 => 'int',
    'haystack' => 'string',
    'needle' => 'string',
    'encoding=' => 'null|string',
  ),
  'mcrypt_cbc' => 
  array (
    0 => 'string',
    'cipher' => 'int|string',
    'key' => 'string',
    'data' => 'string',
    'mode' => 'int',
    'iv=' => 'string',
  ),
  'mcrypt_cfb' => 
  array (
    0 => 'string',
    'cipher' => 'int|string',
    'key' => 'string',
    'data' => 'string',
    'mode' => 'int',
    'iv=' => 'string',
  ),
  'mcrypt_create_iv' => 
  array (
    0 => 'false|string',
    'size' => 'int',
    'source=' => 'int',
  ),
  'mcrypt_decrypt' => 
  array (
    0 => 'string',
    'cipher' => 'string',
    'key' => 'string',
    'data' => 'string',
    'mode' => 'string',
    'iv=' => 'string',
  ),
  'mcrypt_ecb' => 
  array (
    0 => 'string',
    'cipher' => 'int|string',
    'key' => 'string',
    'data' => 'string',
    'mode' => 'int',
    'iv=' => 'string',
  ),
  'mcrypt_enc_get_algorithms_name' => 
  array (
    0 => 'string',
    'td' => 'resource',
  ),
  'mcrypt_enc_get_block_size' => 
  array (
    0 => 'int',
    'td' => 'resource',
  ),
  'mcrypt_enc_get_iv_size' => 
  array (
    0 => 'int',
    'td' => 'resource',
  ),
  'mcrypt_enc_get_key_size' => 
  array (
    0 => 'int',
    'td' => 'resource',
  ),
  'mcrypt_enc_get_modes_name' => 
  array (
    0 => 'string',
    'td' => 'resource',
  ),
  'mcrypt_enc_get_supported_key_sizes' => 
  array (
    0 => 'array<array-key, mixed>',
    'td' => 'resource',
  ),
  'mcrypt_enc_is_block_algorithm' => 
  array (
    0 => 'bool',
    'td' => 'resource',
  ),
  'mcrypt_enc_is_block_algorithm_mode' => 
  array (
    0 => 'bool',
    'td' => 'resource',
  ),
  'mcrypt_enc_is_block_mode' => 
  array (
    0 => 'bool',
    'td' => 'resource',
  ),
  'mcrypt_enc_self_test' => 
  array (
    0 => 'false|int',
    'td' => 'resource',
  ),
  'mcrypt_encrypt' => 
  array (
    0 => 'string',
    'cipher' => 'string',
    'key' => 'string',
    'data' => 'string',
    'mode' => 'string',
    'iv=' => 'string',
  ),
  'mcrypt_generic' => 
  array (
    0 => 'string',
    'td' => 'resource',
    'data' => 'string',
  ),
  'mcrypt_generic_deinit' => 
  array (
    0 => 'bool',
    'td' => 'resource',
  ),
  'mcrypt_generic_end' => 
  array (
    0 => 'bool',
    'td' => 'resource',
  ),
  'mcrypt_generic_init' => 
  array (
    0 => 'false|int',
    'td' => 'resource',
    'key' => 'string',
    'iv' => 'string',
  ),
  'mcrypt_get_block_size' => 
  array (
    0 => 'int',
    'cipher' => 'int|string',
    'module' => 'string',
  ),
  'mcrypt_get_cipher_name' => 
  array (
    0 => 'false|string',
    'cipher' => 'int|string',
  ),
  'mcrypt_get_iv_size' => 
  array (
    0 => 'false|int',
    'cipher' => 'int|string',
    'module' => 'string',
  ),
  'mcrypt_get_key_size' => 
  array (
    0 => 'int',
    'cipher' => 'int|string',
    'module' => 'string',
  ),
  'mcrypt_list_algorithms' => 
  array (
    0 => 'array<array-key, mixed>',
    'lib_dir=' => 'string',
  ),
  'mcrypt_list_modes' => 
  array (
    0 => 'array<array-key, mixed>',
    'lib_dir=' => 'string',
  ),
  'mcrypt_module_close' => 
  array (
    0 => 'bool',
    'td' => 'resource',
  ),
  'mcrypt_module_get_algo_block_size' => 
  array (
    0 => 'int',
    'algorithm' => 'string',
    'lib_dir=' => 'string',
  ),
  'mcrypt_module_get_algo_key_size' => 
  array (
    0 => 'int',
    'algorithm' => 'string',
    'lib_dir=' => 'string',
  ),
  'mcrypt_module_get_supported_key_sizes' => 
  array (
    0 => 'array<array-key, mixed>',
    'algorithm' => 'string',
    'lib_dir=' => 'string',
  ),
  'mcrypt_module_is_block_algorithm' => 
  array (
    0 => 'bool',
    'algorithm' => 'string',
    'lib_dir=' => 'string',
  ),
  'mcrypt_module_is_block_algorithm_mode' => 
  array (
    0 => 'bool',
    'mode' => 'string',
    'lib_dir=' => 'string',
  ),
  'mcrypt_module_is_block_mode' => 
  array (
    0 => 'bool',
    'mode' => 'string',
    'lib_dir=' => 'string',
  ),
  'mcrypt_module_open' => 
  array (
    0 => 'false|resource',
    'cipher' => 'string',
    'cipher_directory' => 'string',
    'mode' => 'string',
    'mode_directory' => 'string',
  ),
  'mcrypt_module_self_test' => 
  array (
    0 => 'bool',
    'algorithm' => 'string',
    'lib_dir=' => 'string',
  ),
  'mcrypt_ofb' => 
  array (
    0 => 'string',
    'cipher' => 'int|string',
    'key' => 'string',
    'data' => 'string',
    'mode' => 'int',
    'iv=' => 'string',
  ),
  'md5' => 
  array (
    0 => 'non-falsy-string',
    'string' => 'string',
    'binary=' => 'bool',
  ),
  'md5_file' => 
  array (
    0 => 'false|non-falsy-string',
    'filename' => 'string',
    'binary=' => 'bool',
  ),
  'mdecrypt_generic' => 
  array (
    0 => 'string',
    'td' => 'resource',
    'data' => 'string',
  ),
  'Memcache::add' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'var' => 'mixed',
    'flag=' => 'int',
    'expire=' => 'int',
  ),
  'Memcache::addServer' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port=' => 'int',
    'persistent=' => 'bool',
    'weight=' => 'int',
    'timeout=' => 'int',
    'retry_interval=' => 'int',
    'status=' => 'bool',
    'failure_callback=' => 'callable',
    'timeoutms=' => 'int',
  ),
  'Memcache::append' => 
  array (
    0 => 'mixed',
  ),
  'Memcache::cas' => 
  array (
    0 => 'mixed',
  ),
  'Memcache::close' => 
  array (
    0 => 'bool',
  ),
  'Memcache::connect' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port=' => 'int',
    'timeout=' => 'int',
  ),
  'Memcache::decrement' => 
  array (
    0 => 'int',
    'key' => 'string',
    'value=' => 'int',
  ),
  'Memcache::delete' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'timeout=' => 'int',
  ),
  'Memcache::findServer' => 
  array (
    0 => 'mixed',
  ),
  'Memcache::flush' => 
  array (
    0 => 'bool',
  ),
  'Memcache::get' => 
  array (
    0 => 'array<array-key, mixed>|false|string',
    'key' => 'string',
    'flags=' => 'array<array-key, mixed>',
    'keys=' => 'array<array-key, mixed>',
  ),
  'Memcache::get\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'array<array-key, string>',
    'flags=' => 'array<array-key, int>',
  ),
  'Memcache::getExtendedStats' => 
  array (
    0 => 'array<string, array<string, int|string>|false>|false',
    'type=' => 'string',
    'slabid=' => 'int',
    'limit=' => 'int',
  ),
  'Memcache::getServerStatus' => 
  array (
    0 => 'int',
    'host' => 'string',
    'port=' => 'int',
  ),
  'Memcache::getStats' => 
  array (
    0 => 'array<array-key, mixed>',
    'type=' => 'string',
    'slabid=' => 'int',
    'limit=' => 'int',
  ),
  'Memcache::getVersion' => 
  array (
    0 => 'string',
  ),
  'Memcache::increment' => 
  array (
    0 => 'int',
    'key' => 'string',
    'value=' => 'int',
  ),
  'Memcache::pconnect' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port=' => 'int',
    'timeout=' => 'int',
  ),
  'Memcache::prepend' => 
  array (
    0 => 'string',
  ),
  'Memcache::replace' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'var' => 'mixed',
    'flag=' => 'int',
    'expire=' => 'int',
  ),
  'Memcache::set' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'var' => 'mixed',
    'flag=' => 'int',
    'expire=' => 'int',
  ),
  'Memcache::setCompressThreshold' => 
  array (
    0 => 'bool',
    'threshold' => 'int',
    'min_savings=' => 'float',
  ),
  'Memcache::setFailureCallback' => 
  array (
    0 => 'mixed',
  ),
  'Memcache::setServerParams' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port=' => 'int',
    'timeout=' => 'int',
    'retry_interval=' => 'int',
    'status=' => 'bool',
    'failure_callback=' => 'callable',
  ),
  'memcache_add' => 
  array (
    0 => 'bool',
    'memcache_obj' => 'Memcache',
    'key' => 'string',
    'var' => 'mixed',
    'flag=' => 'int',
    'expire=' => 'int',
  ),
  'memcache_add_server' => 
  array (
    0 => 'bool',
    'memcache_obj' => 'Memcache',
    'host' => 'string',
    'port=' => 'int',
    'persistent=' => 'bool',
    'weight=' => 'int',
    'timeout=' => 'int',
    'retry_interval=' => 'int',
    'status=' => 'bool',
    'failure_callback=' => 'callable',
    'timeoutms=' => 'int',
  ),
  'memcache_append' => 
  array (
    0 => 'mixed',
    'memcache_obj' => 'Memcache',
  ),
  'memcache_cas' => 
  array (
    0 => 'mixed',
    'memcache_obj' => 'Memcache',
  ),
  'memcache_close' => 
  array (
    0 => 'bool',
    'memcache_obj' => 'Memcache',
  ),
  'memcache_connect' => 
  array (
    0 => 'Memcache|false',
    'host' => 'string',
    'port=' => 'int',
    'timeout=' => 'int',
  ),
  'memcache_debug' => 
  array (
    0 => 'bool',
    'on_off' => 'bool',
  ),
  'memcache_decrement' => 
  array (
    0 => 'int',
    'memcache_obj' => 'Memcache',
    'key' => 'string',
    'value=' => 'int',
  ),
  'memcache_delete' => 
  array (
    0 => 'bool',
    'memcache_obj' => 'Memcache',
    'key' => 'string',
    'timeout=' => 'int',
  ),
  'memcache_flush' => 
  array (
    0 => 'bool',
    'memcache_obj' => 'Memcache',
  ),
  'memcache_get' => 
  array (
    0 => 'string',
    'memcache_obj' => 'Memcache',
    'key' => 'string',
    'flags=' => 'int',
  ),
  'memcache_get\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'memcache_obj' => 'Memcache',
    'key' => 'array<array-key, string>',
    'flags=' => 'array<array-key, int>',
  ),
  'memcache_get_extended_stats' => 
  array (
    0 => 'array<array-key, mixed>',
    'memcache_obj' => 'Memcache',
    'type=' => 'string',
    'slabid=' => 'int',
    'limit=' => 'int',
  ),
  'memcache_get_server_status' => 
  array (
    0 => 'int',
    'memcache_obj' => 'Memcache',
    'host' => 'string',
    'port=' => 'int',
  ),
  'memcache_get_stats' => 
  array (
    0 => 'array<array-key, mixed>',
    'memcache_obj' => 'Memcache',
    'type=' => 'string',
    'slabid=' => 'int',
    'limit=' => 'int',
  ),
  'memcache_get_version' => 
  array (
    0 => 'string',
    'memcache_obj' => 'Memcache',
  ),
  'memcache_increment' => 
  array (
    0 => 'int',
    'memcache_obj' => 'Memcache',
    'key' => 'string',
    'value=' => 'int',
  ),
  'memcache_pconnect' => 
  array (
    0 => 'Memcache|false',
    'host' => 'string',
    'port=' => 'int',
    'timeout=' => 'int',
  ),
  'memcache_prepend' => 
  array (
    0 => 'string',
    'memcache_obj' => 'Memcache',
  ),
  'memcache_replace' => 
  array (
    0 => 'bool',
    'memcache_obj' => 'Memcache',
    'key' => 'string',
    'var' => 'mixed',
    'flag=' => 'int',
    'expire=' => 'int',
  ),
  'memcache_set' => 
  array (
    0 => 'bool',
    'memcache_obj' => 'Memcache',
    'key' => 'string',
    'var' => 'mixed',
    'flag=' => 'int',
    'expire=' => 'int',
  ),
  'memcache_set_compress_threshold' => 
  array (
    0 => 'bool',
    'memcache_obj' => 'Memcache',
    'threshold' => 'int',
    'min_savings=' => 'float',
  ),
  'memcache_set_failure_callback' => 
  array (
    0 => 'mixed',
    'memcache_obj' => 'Memcache',
  ),
  'memcache_set_server_params' => 
  array (
    0 => 'bool',
    'memcache_obj' => 'Memcache',
    'host' => 'string',
    'port=' => 'int',
    'timeout=' => 'int',
    'retry_interval=' => 'int',
    'status=' => 'bool',
    'failure_callback=' => 'callable',
  ),
  'Memcached::__construct' => 
  array (
    0 => 'void',
    'persistent_id=' => 'null|string',
    'callback=' => 'callable|null',
    'connection_str=' => 'null|string',
  ),
  'Memcached::add' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'mixed',
    'expiration=' => 'int',
  ),
  'Memcached::addByKey' => 
  array (
    0 => 'bool',
    'server_key' => 'string',
    'key' => 'string',
    'value' => 'mixed',
    'expiration=' => 'int',
  ),
  'Memcached::addServer' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port' => 'int',
    'weight=' => 'int',
  ),
  'Memcached::addServers' => 
  array (
    0 => 'bool',
    'servers' => 'array<array-key, mixed>',
  ),
  'Memcached::append' => 
  array (
    0 => 'bool|null',
    'key' => 'string',
    'value' => 'string',
  ),
  'Memcached::appendByKey' => 
  array (
    0 => 'bool|null',
    'server_key' => 'string',
    'key' => 'string',
    'value' => 'string',
  ),
  'Memcached::cas' => 
  array (
    0 => 'bool',
    'cas_token' => 'float|int|string',
    'key' => 'string',
    'value' => 'mixed',
    'expiration=' => 'int',
  ),
  'Memcached::casByKey' => 
  array (
    0 => 'bool',
    'cas_token' => 'float|int|string',
    'server_key' => 'string',
    'key' => 'string',
    'value' => 'mixed',
    'expiration=' => 'int',
  ),
  'Memcached::decrement' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'offset=' => 'int',
    'initial_value=' => 'int',
    'expiry=' => 'int',
  ),
  'Memcached::decrementByKey' => 
  array (
    0 => 'false|int',
    'server_key' => 'string',
    'key' => 'string',
    'offset=' => 'int',
    'initial_value=' => 'int',
    'expiry=' => 'int',
  ),
  'Memcached::delete' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'time=' => 'int',
  ),
  'Memcached::deleteByKey' => 
  array (
    0 => 'bool',
    'server_key' => 'string',
    'key' => 'string',
    'time=' => 'int',
  ),
  'Memcached::deleteMulti' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'array<array-key, mixed>',
    'time=' => 'int',
  ),
  'Memcached::deleteMultiByKey' => 
  array (
    0 => 'array<array-key, mixed>',
    'server_key' => 'string',
    'keys' => 'array<array-key, mixed>',
    'time=' => 'int',
  ),
  'Memcached::fetch' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'Memcached::fetchAll' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'Memcached::flush' => 
  array (
    0 => 'bool',
    'delay=' => 'int',
  ),
  'Memcached::flushBuffers' => 
  array (
    0 => 'bool',
  ),
  'Memcached::get' => 
  array (
    0 => 'false|mixed',
    'key' => 'string',
    'cache_cb=' => 'callable|null',
    'get_flags=' => 'int',
  ),
  'Memcached::getAllKeys' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'Memcached::getByKey' => 
  array (
    0 => 'false|mixed',
    'server_key' => 'string',
    'key' => 'string',
    'cache_cb=' => 'callable|null',
    'get_flags=' => 'int',
  ),
  'Memcached::getDelayed' => 
  array (
    0 => 'bool',
    'keys' => 'array<array-key, mixed>',
    'with_cas=' => 'bool',
    'value_cb=' => 'callable|null',
  ),
  'Memcached::getDelayedByKey' => 
  array (
    0 => 'bool',
    'server_key' => 'string',
    'keys' => 'array<array-key, mixed>',
    'with_cas=' => 'bool',
    'value_cb=' => 'callable|null',
  ),
  'Memcached::getLastDisconnectedServer' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'Memcached::getLastErrorCode' => 
  array (
    0 => 'int',
  ),
  'Memcached::getLastErrorErrno' => 
  array (
    0 => 'int',
  ),
  'Memcached::getLastErrorMessage' => 
  array (
    0 => 'string',
  ),
  'Memcached::getMulti' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'keys' => 'array<array-key, mixed>',
    'get_flags=' => 'int',
  ),
  'Memcached::getMultiByKey' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'server_key' => 'string',
    'keys' => 'array<array-key, mixed>',
    'get_flags=' => 'int',
  ),
  'Memcached::getOption' => 
  array (
    0 => 'false|mixed',
    'option' => 'int',
  ),
  'Memcached::getResultCode' => 
  array (
    0 => 'int',
  ),
  'Memcached::getResultMessage' => 
  array (
    0 => 'string',
  ),
  'Memcached::getServerByKey' => 
  array (
    0 => 'array<array-key, mixed>',
    'server_key' => 'string',
  ),
  'Memcached::getServerList' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Memcached::getStats' => 
  array (
    0 => 'array<string, array<string, int|string>|false>|false',
    'type=' => 'null|string',
  ),
  'Memcached::getVersion' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Memcached::increment' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'offset=' => 'int',
    'initial_value=' => 'int',
    'expiry=' => 'int',
  ),
  'Memcached::incrementByKey' => 
  array (
    0 => 'false|int',
    'server_key' => 'string',
    'key' => 'string',
    'offset=' => 'int',
    'initial_value=' => 'int',
    'expiry=' => 'int',
  ),
  'Memcached::isPersistent' => 
  array (
    0 => 'bool',
  ),
  'Memcached::isPristine' => 
  array (
    0 => 'bool',
  ),
  'Memcached::prepend' => 
  array (
    0 => 'bool|null',
    'key' => 'string',
    'value' => 'string',
  ),
  'Memcached::prependByKey' => 
  array (
    0 => 'bool|null',
    'server_key' => 'string',
    'key' => 'string',
    'value' => 'string',
  ),
  'Memcached::quit' => 
  array (
    0 => 'bool',
  ),
  'Memcached::replace' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'mixed',
    'expiration=' => 'int',
  ),
  'Memcached::replaceByKey' => 
  array (
    0 => 'bool',
    'server_key' => 'string',
    'key' => 'string',
    'value' => 'mixed',
    'expiration=' => 'int',
  ),
  'Memcached::resetServerList' => 
  array (
    0 => 'bool',
  ),
  'Memcached::set' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'mixed',
    'expiration=' => 'int',
  ),
  'Memcached::setBucket' => 
  array (
    0 => 'bool',
    'host_map' => 'array<array-key, mixed>',
    'forward_map' => 'array<array-key, mixed>|null',
    'replicas' => 'int',
  ),
  'Memcached::setByKey' => 
  array (
    0 => 'bool',
    'server_key' => 'string',
    'key' => 'string',
    'value' => 'mixed',
    'expiration=' => 'int',
  ),
  'Memcached::setEncodingKey' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'Memcached::setMulti' => 
  array (
    0 => 'bool',
    'items' => 'array<array-key, mixed>',
    'expiration=' => 'int',
  ),
  'Memcached::setMultiByKey' => 
  array (
    0 => 'bool',
    'server_key' => 'string',
    'items' => 'array<array-key, mixed>',
    'expiration=' => 'int',
  ),
  'Memcached::setOption' => 
  array (
    0 => 'bool',
    'option' => 'int',
    'value' => 'mixed',
  ),
  'Memcached::setOptions' => 
  array (
    0 => 'bool',
    'options' => 'array<array-key, mixed>',
  ),
  'Memcached::setSaslAuthData' => 
  array (
    0 => 'bool',
    'username' => 'string',
    'password' => 'string',
  ),
  'Memcached::touch' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'expiration=' => 'int',
  ),
  'Memcached::touchByKey' => 
  array (
    0 => 'bool',
    'server_key' => 'string',
    'key' => 'string',
    'expiration=' => 'int',
  ),
  'MemcachePool::add' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'var' => 'mixed',
    'flag=' => 'int',
    'expire=' => 'int',
  ),
  'MemcachePool::addServer' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port=' => 'int',
    'persistent=' => 'bool',
    'weight=' => 'int',
    'timeout=' => 'int',
    'retry_interval=' => 'int',
    'status=' => 'bool',
    'failure_callback=' => 'callable|null',
    'timeoutms=' => 'int',
  ),
  'MemcachePool::append' => 
  array (
    0 => 'mixed',
  ),
  'MemcachePool::cas' => 
  array (
    0 => 'mixed',
  ),
  'MemcachePool::close' => 
  array (
    0 => 'bool',
  ),
  'MemcachePool::connect' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port' => 'int',
    'timeout=' => 'int',
  ),
  'MemcachePool::decrement' => 
  array (
    0 => 'false|int',
    'key' => 'mixed',
    'value=' => 'int|mixed',
  ),
  'MemcachePool::delete' => 
  array (
    0 => 'bool',
    'key' => 'mixed',
    'timeout=' => 'int|mixed',
  ),
  'MemcachePool::findServer' => 
  array (
    0 => 'mixed',
  ),
  'MemcachePool::flush' => 
  array (
    0 => 'bool',
  ),
  'MemcachePool::get' => 
  array (
    0 => 'array<array-key, mixed>|false|string',
    'key' => 'array<array-key, mixed>|string',
    '&flags=' => 'array<array-key, mixed>|int',
  ),
  'MemcachePool::getExtendedStats' => 
  array (
    0 => 'array<string, array<string, int|string>|false>|false',
    'type=' => 'string',
    'slabid=' => 'int',
    'limit=' => 'int',
  ),
  'MemcachePool::getServerStatus' => 
  array (
    0 => 'int',
    'host' => 'string',
    'port=' => 'int',
  ),
  'MemcachePool::getStats' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'type=' => 'string',
    'slabid=' => 'int',
    'limit=' => 'int',
  ),
  'MemcachePool::getVersion' => 
  array (
    0 => 'false|string',
  ),
  'MemcachePool::increment' => 
  array (
    0 => 'false|int',
    'key' => 'mixed',
    'value=' => 'int|mixed',
  ),
  'MemcachePool::prepend' => 
  array (
    0 => 'string',
  ),
  'MemcachePool::replace' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'var' => 'mixed',
    'flag=' => 'int',
    'expire=' => 'int',
  ),
  'MemcachePool::set' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'var' => 'mixed',
    'flag=' => 'int',
    'expire=' => 'int',
  ),
  'MemcachePool::setCompressThreshold' => 
  array (
    0 => 'bool',
    'thresold' => 'int',
    'min_saving=' => 'float',
  ),
  'MemcachePool::setFailureCallback' => 
  array (
    0 => 'mixed',
  ),
  'MemcachePool::setServerParams' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port=' => 'int',
    'timeout=' => 'int',
    'retry_interval=' => 'int',
    'status=' => 'bool',
    'failure_callback=' => 'callable|null',
  ),
  'memory_get_peak_usage' => 
  array (
    0 => 'int',
    'real_usage=' => 'bool',
  ),
  'memory_get_usage' => 
  array (
    0 => 'int',
    'real_usage=' => 'bool',
  ),
  'memory_reset_peak_usage' => 
  array (
    0 => 'void',
  ),
  'MessageFormatter::__construct' => 
  array (
    0 => 'void',
    'locale' => 'string',
    'pattern' => 'string',
  ),
  'MessageFormatter::create' => 
  array (
    0 => 'MessageFormatter',
    'locale' => 'string',
    'pattern' => 'string',
  ),
  'MessageFormatter::format' => 
  array (
    0 => 'false|string',
    'values' => 'array<array-key, mixed>',
  ),
  'MessageFormatter::formatMessage' => 
  array (
    0 => 'false|string',
    'locale' => 'string',
    'pattern' => 'string',
    'values' => 'array<array-key, mixed>',
  ),
  'MessageFormatter::getErrorCode' => 
  array (
    0 => 'int',
  ),
  'MessageFormatter::getErrorMessage' => 
  array (
    0 => 'string',
  ),
  'MessageFormatter::getLocale' => 
  array (
    0 => 'string',
  ),
  'MessageFormatter::getPattern' => 
  array (
    0 => 'string',
  ),
  'MessageFormatter::parse' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'string' => 'string',
  ),
  'MessageFormatter::parseMessage' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'locale' => 'string',
    'pattern' => 'string',
    'message' => 'string',
  ),
  'MessageFormatter::setPattern' => 
  array (
    0 => 'bool',
    'pattern' => 'string',
  ),
  'metaphone' => 
  array (
    0 => 'string',
    'string' => 'string',
    'max_phonemes=' => 'int',
  ),
  'method_exists' => 
  array (
    0 => 'bool',
    'object_or_class' => 'class-string|object',
    'method' => 'string',
  ),
  'mhash' => 
  array (
    0 => 'string',
    'algo' => 'int',
    'data' => 'string',
    'key=' => 'null|string',
  ),
  'mhash_count' => 
  array (
    0 => 'int',
  ),
  'mhash_get_block_size' => 
  array (
    0 => 'false|int',
    'algo' => 'int',
  ),
  'mhash_get_hash_name' => 
  array (
    0 => 'false|string',
    'algo' => 'int',
  ),
  'mhash_keygen_s2k' => 
  array (
    0 => 'false|string',
    'algo' => 'int',
    'password' => 'string',
    'salt' => 'string',
    'length' => 'int',
  ),
  'microtime' => 
  array (
    0 => 'string',
    'as_float=' => 'false',
  ),
  'microtime\'1' => 
  array (
    0 => 'float',
    'as_float=' => 'true',
  ),
  'mime_content_type' => 
  array (
    0 => 'false|string',
    'filename' => 'resource|string',
  ),
  'min' => 
  array (
    0 => 'mixed',
    'value' => 'non-empty-array<array-key, mixed>',
  ),
  'min\'1' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
    'values' => 'mixed',
    '...args=' => 'mixed',
  ),
  'ming_keypress' => 
  array (
    0 => 'int',
    'char' => 'string',
  ),
  'ming_setcubicthreshold' => 
  array (
    0 => 'void',
    'threshold' => 'int',
  ),
  'ming_setscale' => 
  array (
    0 => 'void',
    'scale' => 'float',
  ),
  'ming_setswfcompression' => 
  array (
    0 => 'void',
    'level' => 'int',
  ),
  'ming_useconstants' => 
  array (
    0 => 'void',
    'use' => 'int',
  ),
  'ming_useswfversion' => 
  array (
    0 => 'void',
    'version' => 'int',
  ),
  'mkdir' => 
  array (
    0 => 'bool',
    'directory' => 'string',
    'permissions=' => 'int',
    'recursive=' => 'bool',
    'context=' => 'null|resource',
  ),
  'mktime' => 
  array (
    0 => 'false|int',
    'hour' => 'int',
    'minute=' => 'int|null',
    'second=' => 'int|null',
    'month=' => 'int|null',
    'day=' => 'int|null',
    'year=' => 'int|null',
  ),
  'money_format' => 
  array (
    0 => 'string',
    'format' => 'string',
    'value' => 'float',
  ),
  'Mongo::__construct' => 
  array (
    0 => 'void',
    'server=' => 'string',
    'options=' => 'array<array-key, mixed>',
    'driver_options=' => 'array<array-key, mixed>',
  ),
  'Mongo::__get' => 
  array (
    0 => 'MongoDB',
    'dbname' => 'string',
  ),
  'Mongo::__toString' => 
  array (
    0 => 'string',
  ),
  'Mongo::close' => 
  array (
    0 => 'bool',
  ),
  'Mongo::connect' => 
  array (
    0 => 'bool',
  ),
  'Mongo::connectUtil' => 
  array (
    0 => 'bool',
  ),
  'Mongo::dropDB' => 
  array (
    0 => 'array<array-key, mixed>',
    'db' => 'mixed',
  ),
  'Mongo::forceError' => 
  array (
    0 => 'bool',
  ),
  'Mongo::getConnections' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Mongo::getHosts' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Mongo::getPoolSize' => 
  array (
    0 => 'int',
  ),
  'Mongo::getReadPreference' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Mongo::getSlave' => 
  array (
    0 => 'null|string',
  ),
  'Mongo::getSlaveOkay' => 
  array (
    0 => 'bool',
  ),
  'Mongo::getWriteConcern' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Mongo::killCursor' => 
  array (
    0 => 'mixed',
    'server_hash' => 'string',
    'id' => 'MongoInt64|int',
  ),
  'Mongo::lastError' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'Mongo::listDBs' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Mongo::pairConnect' => 
  array (
    0 => 'bool',
  ),
  'Mongo::pairPersistConnect' => 
  array (
    0 => 'bool',
    'username=' => 'string',
    'password=' => 'string',
  ),
  'Mongo::persistConnect' => 
  array (
    0 => 'bool',
    'username=' => 'string',
    'password=' => 'string',
  ),
  'Mongo::poolDebug' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Mongo::prevError' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Mongo::resetError' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Mongo::selectCollection' => 
  array (
    0 => 'MongoCollection',
    'db' => 'string',
    'collection' => 'string',
  ),
  'Mongo::selectDB' => 
  array (
    0 => 'MongoDB',
    'name' => 'string',
  ),
  'Mongo::setPoolSize' => 
  array (
    0 => 'bool',
    'size' => 'int',
  ),
  'Mongo::setReadPreference' => 
  array (
    0 => 'bool',
    'readPreference' => 'string',
    'tags=' => 'array<array-key, mixed>',
  ),
  'Mongo::setSlaveOkay' => 
  array (
    0 => 'bool',
    'ok=' => 'bool',
  ),
  'Mongo::switchSlave' => 
  array (
    0 => 'string',
  ),
  'MongoBinData::__construct' => 
  array (
    0 => 'void',
    'data' => 'string',
    'type=' => 'int',
  ),
  'MongoBinData::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoClient::__construct' => 
  array (
    0 => 'void',
    'server=' => 'string',
    'options=' => 'array<array-key, mixed>',
    'driver_options=' => 'array<array-key, mixed>',
  ),
  'MongoClient::__get' => 
  array (
    0 => 'MongoDB',
    'dbname' => 'string',
  ),
  'MongoClient::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoClient::close' => 
  array (
    0 => 'bool',
    'connection=' => 'bool|string',
  ),
  'MongoClient::connect' => 
  array (
    0 => 'bool',
  ),
  'MongoClient::dropDB' => 
  array (
    0 => 'array<array-key, mixed>',
    'db' => 'mixed',
  ),
  'MongoClient::getConnections' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoClient::getHosts' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoClient::getReadPreference' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoClient::getWriteConcern' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoClient::killCursor' => 
  array (
    0 => 'bool',
    'server_hash' => 'string',
    'id' => 'MongoInt64|int',
  ),
  'MongoClient::listDBs' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoClient::selectCollection' => 
  array (
    0 => 'MongoCollection',
    'db' => 'string',
    'collection' => 'string',
  ),
  'MongoClient::selectDB' => 
  array (
    0 => 'MongoDB',
    'name' => 'string',
  ),
  'MongoClient::setReadPreference' => 
  array (
    0 => 'bool',
    'read_preference' => 'string',
    'tags=' => 'array<array-key, mixed>',
  ),
  'MongoClient::setWriteConcern' => 
  array (
    0 => 'bool',
    'w' => 'mixed',
    'wtimeout=' => 'int',
  ),
  'MongoClient::switchSlave' => 
  array (
    0 => 'string',
  ),
  'MongoCode::__construct' => 
  array (
    0 => 'void',
    'code' => 'string',
    'scope=' => 'array<array-key, mixed>',
  ),
  'MongoCode::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoCollection::__construct' => 
  array (
    0 => 'void',
    'db' => 'MongoDB',
    'name' => 'string',
  ),
  'MongoCollection::__get' => 
  array (
    0 => 'MongoCollection',
    'name' => 'string',
  ),
  'MongoCollection::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoCollection::aggregate' => 
  array (
    0 => 'array<array-key, mixed>',
    'op' => 'array<array-key, mixed>',
    'op=' => 'array<array-key, mixed>',
    '...args=' => 'array<array-key, mixed>',
  ),
  'MongoCollection::aggregate\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'pipeline' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'MongoCollection::aggregateCursor' => 
  array (
    0 => 'MongoCommandCursor',
    'command' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'MongoCollection::batchInsert' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'a' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'MongoCollection::count' => 
  array (
    0 => 'int',
    'query=' => 'array<array-key, mixed>',
    'limit=' => 'int',
    'skip=' => 'int',
  ),
  'MongoCollection::createDBRef' => 
  array (
    0 => 'array<array-key, mixed>',
    'a' => 'array<array-key, mixed>',
  ),
  'MongoCollection::createIndex' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'MongoCollection::deleteIndex' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'array<array-key, mixed>|string',
  ),
  'MongoCollection::deleteIndexes' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoCollection::distinct' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'key' => 'string',
    'query=' => 'array<array-key, mixed>',
  ),
  'MongoCollection::drop' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoCollection::ensureIndex' => 
  array (
    0 => 'bool',
    'keys' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'MongoCollection::find' => 
  array (
    0 => 'MongoCursor',
    'query=' => 'array<array-key, mixed>',
    'fields=' => 'array<array-key, mixed>',
  ),
  'MongoCollection::findAndModify' => 
  array (
    0 => 'array<array-key, mixed>',
    'query' => 'array<array-key, mixed>',
    'update=' => 'array<array-key, mixed>',
    'fields=' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'MongoCollection::findOne' => 
  array (
    0 => 'array<array-key, mixed>|null',
    'query=' => 'array<array-key, mixed>',
    'fields=' => 'array<array-key, mixed>',
  ),
  'MongoCollection::getDBRef' => 
  array (
    0 => 'array<array-key, mixed>',
    'ref' => 'array<array-key, mixed>',
  ),
  'MongoCollection::getIndexInfo' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoCollection::getName' => 
  array (
    0 => 'string',
  ),
  'MongoCollection::getReadPreference' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoCollection::getSlaveOkay' => 
  array (
    0 => 'bool',
  ),
  'MongoCollection::getWriteConcern' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoCollection::group' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'mixed',
    'initial' => 'array<array-key, mixed>',
    'reduce' => 'MongoCode',
    'options=' => 'array<array-key, mixed>',
  ),
  'MongoCollection::insert' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'a' => 'array<array-key, mixed>|object',
    'options=' => 'array<array-key, mixed>',
  ),
  'MongoCollection::parallelCollectionScan' => 
  array (
    0 => 'array<array-key, MongoCommandCursor>',
    'num_cursors' => 'int',
  ),
  'MongoCollection::remove' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'criteria=' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'MongoCollection::save' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'a' => 'array<array-key, mixed>|object',
    'options=' => 'array<array-key, mixed>',
  ),
  'MongoCollection::setReadPreference' => 
  array (
    0 => 'bool',
    'read_preference' => 'string',
    'tags=' => 'array<array-key, mixed>',
  ),
  'MongoCollection::setSlaveOkay' => 
  array (
    0 => 'bool',
    'ok=' => 'bool',
  ),
  'MongoCollection::setWriteConcern' => 
  array (
    0 => 'bool',
    'w' => 'mixed',
    'wtimeout=' => 'int',
  ),
  'MongoCollection::toIndexString' => 
  array (
    0 => 'string',
    'keys' => 'mixed',
  ),
  'MongoCollection::update' => 
  array (
    0 => 'bool',
    'criteria' => 'array<array-key, mixed>',
    'newobj' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'MongoCollection::validate' => 
  array (
    0 => 'array<array-key, mixed>',
    'scan_data=' => 'bool',
  ),
  'MongoCommandCursor::__construct' => 
  array (
    0 => 'void',
    'connection' => 'MongoClient',
    'ns' => 'string',
    'command' => 'array<array-key, mixed>',
  ),
  'MongoCommandCursor::batchSize' => 
  array (
    0 => 'MongoCommandCursor',
    'batchSize' => 'int',
  ),
  'MongoCommandCursor::createFromDocument' => 
  array (
    0 => 'MongoCommandCursor',
    'connection' => 'MongoClient',
    'hash' => 'string',
    'document' => 'array<array-key, mixed>',
  ),
  'MongoCommandCursor::current' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoCommandCursor::dead' => 
  array (
    0 => 'bool',
  ),
  'MongoCommandCursor::getReadPreference' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoCommandCursor::info' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoCommandCursor::key' => 
  array (
    0 => 'int',
  ),
  'MongoCommandCursor::next' => 
  array (
    0 => 'void',
  ),
  'MongoCommandCursor::rewind' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoCommandCursor::setReadPreference' => 
  array (
    0 => 'MongoCommandCursor',
    'read_preference' => 'string',
    'tags=' => 'array<array-key, mixed>',
  ),
  'MongoCommandCursor::timeout' => 
  array (
    0 => 'MongoCommandCursor',
    'ms' => 'int',
  ),
  'MongoCommandCursor::valid' => 
  array (
    0 => 'bool',
  ),
  'MongoCursor::__construct' => 
  array (
    0 => 'void',
    'connection' => 'MongoClient',
    'ns' => 'string',
    'query=' => 'array<array-key, mixed>',
    'fields=' => 'array<array-key, mixed>',
  ),
  'MongoCursor::addOption' => 
  array (
    0 => 'MongoCursor',
    'key' => 'string',
    'value' => 'mixed',
  ),
  'MongoCursor::awaitData' => 
  array (
    0 => 'MongoCursor',
    'wait=' => 'bool',
  ),
  'MongoCursor::batchSize' => 
  array (
    0 => 'MongoCursor',
    'num' => 'int',
  ),
  'MongoCursor::count' => 
  array (
    0 => 'int',
    'foundonly=' => 'bool',
  ),
  'MongoCursor::current' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoCursor::dead' => 
  array (
    0 => 'bool',
  ),
  'MongoCursor::doQuery' => 
  array (
    0 => 'void',
  ),
  'MongoCursor::explain' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoCursor::fields' => 
  array (
    0 => 'MongoCursor',
    'f' => 'array<array-key, mixed>',
  ),
  'MongoCursor::getNext' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoCursor::getReadPreference' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoCursor::hasNext' => 
  array (
    0 => 'bool',
  ),
  'MongoCursor::hint' => 
  array (
    0 => 'MongoCursor',
    'key_pattern' => 'array<array-key, mixed>|object|string',
  ),
  'MongoCursor::immortal' => 
  array (
    0 => 'MongoCursor',
    'liveforever=' => 'bool',
  ),
  'MongoCursor::info' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoCursor::key' => 
  array (
    0 => 'string',
  ),
  'MongoCursor::limit' => 
  array (
    0 => 'MongoCursor',
    'num' => 'int',
  ),
  'MongoCursor::maxTimeMS' => 
  array (
    0 => 'MongoCursor',
    'ms' => 'int',
  ),
  'MongoCursor::next' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoCursor::partial' => 
  array (
    0 => 'MongoCursor',
    'okay=' => 'bool',
  ),
  'MongoCursor::reset' => 
  array (
    0 => 'void',
  ),
  'MongoCursor::rewind' => 
  array (
    0 => 'void',
  ),
  'MongoCursor::setFlag' => 
  array (
    0 => 'MongoCursor',
    'flag' => 'int',
    'set=' => 'bool',
  ),
  'MongoCursor::setReadPreference' => 
  array (
    0 => 'MongoCursor',
    'read_preference' => 'string',
    'tags=' => 'array<array-key, mixed>',
  ),
  'MongoCursor::skip' => 
  array (
    0 => 'MongoCursor',
    'num' => 'int',
  ),
  'MongoCursor::slaveOkay' => 
  array (
    0 => 'MongoCursor',
    'okay=' => 'bool',
  ),
  'MongoCursor::snapshot' => 
  array (
    0 => 'MongoCursor',
  ),
  'MongoCursor::sort' => 
  array (
    0 => 'MongoCursor',
    'fields' => 'array<array-key, mixed>',
  ),
  'MongoCursor::tailable' => 
  array (
    0 => 'MongoCursor',
    'tail=' => 'bool',
  ),
  'MongoCursor::timeout' => 
  array (
    0 => 'MongoCursor',
    'ms' => 'int',
  ),
  'MongoCursor::valid' => 
  array (
    0 => 'bool',
  ),
  'MongoCursorException::__clone' => 
  array (
    0 => 'void',
  ),
  'MongoCursorException::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Exception|Throwable|null',
  ),
  'MongoCursorException::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoCursorException::__wakeup' => 
  array (
    0 => 'void',
  ),
  'MongoCursorException::getCode' => 
  array (
    0 => 'int',
  ),
  'MongoCursorException::getFile' => 
  array (
    0 => 'string',
  ),
  'MongoCursorException::getHost' => 
  array (
    0 => 'string',
  ),
  'MongoCursorException::getLine' => 
  array (
    0 => 'int',
  ),
  'MongoCursorException::getMessage' => 
  array (
    0 => 'string',
  ),
  'MongoCursorException::getPrevious' => 
  array (
    0 => 'Exception|Throwable',
  ),
  'MongoCursorException::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'MongoCursorException::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'MongoCursorInterface::__construct' => 
  array (
    0 => 'void',
  ),
  'MongoCursorInterface::batchSize' => 
  array (
    0 => 'MongoCursorInterface',
    'batchSize' => 'int',
  ),
  'MongoCursorInterface::current' => 
  array (
    0 => 'mixed',
  ),
  'MongoCursorInterface::dead' => 
  array (
    0 => 'bool',
  ),
  'MongoCursorInterface::getReadPreference' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoCursorInterface::info' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoCursorInterface::key' => 
  array (
    0 => 'int|string',
  ),
  'MongoCursorInterface::next' => 
  array (
    0 => 'void',
  ),
  'MongoCursorInterface::rewind' => 
  array (
    0 => 'void',
  ),
  'MongoCursorInterface::setReadPreference' => 
  array (
    0 => 'MongoCursorInterface',
    'read_preference' => 'string',
    'tags=' => 'array<array-key, mixed>',
  ),
  'MongoCursorInterface::timeout' => 
  array (
    0 => 'MongoCursorInterface',
    'ms' => 'int',
  ),
  'MongoCursorInterface::valid' => 
  array (
    0 => 'bool',
  ),
  'MongoDate::__construct' => 
  array (
    0 => 'void',
    'second=' => 'int',
    'usecond=' => 'int',
  ),
  'MongoDate::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDate::toDateTime' => 
  array (
    0 => 'DateTime',
  ),
  'MongoDB::__construct' => 
  array (
    0 => 'void',
    'conn' => 'MongoClient',
    'name' => 'string',
  ),
  'MongoDB::__get' => 
  array (
    0 => 'MongoCollection',
    'name' => 'string',
  ),
  'MongoDB::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB::authenticate' => 
  array (
    0 => 'array<array-key, mixed>',
    'username' => 'string',
    'password' => 'string',
  ),
  'MongoDB::command' => 
  array (
    0 => 'array<array-key, mixed>',
    'command' => 'array<array-key, mixed>',
  ),
  'MongoDB::createCollection' => 
  array (
    0 => 'MongoCollection',
    'name' => 'string',
    'capped=' => 'bool',
    'size=' => 'int',
    'max=' => 'int',
  ),
  'MongoDB::createDBRef' => 
  array (
    0 => 'array<array-key, mixed>',
    'collection' => 'string',
    'a' => 'mixed',
  ),
  'MongoDB::drop' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoDB::dropCollection' => 
  array (
    0 => 'array<array-key, mixed>',
    'coll' => 'MongoCollection|string',
  ),
  'MongoDB::execute' => 
  array (
    0 => 'array<array-key, mixed>',
    'code' => 'MongoCode|string',
    'args=' => 'array<array-key, mixed>',
  ),
  'MongoDB::forceError' => 
  array (
    0 => 'bool',
  ),
  'MongoDB::getCollectionInfo' => 
  array (
    0 => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'MongoDB::getCollectionNames' => 
  array (
    0 => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'MongoDB::getDBRef' => 
  array (
    0 => 'array<array-key, mixed>',
    'ref' => 'array<array-key, mixed>',
  ),
  'MongoDB::getGridFS' => 
  array (
    0 => 'MongoGridFS',
    'prefix=' => 'string',
  ),
  'MongoDB::getProfilingLevel' => 
  array (
    0 => 'int',
  ),
  'MongoDB::getReadPreference' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoDB::getSlaveOkay' => 
  array (
    0 => 'bool',
  ),
  'MongoDB::getWriteConcern' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoDB::lastError' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoDB::listCollections' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoDB::prevError' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoDB::repair' => 
  array (
    0 => 'array<array-key, mixed>',
    'preserve_cloned_files=' => 'bool',
    'backup_original_files=' => 'bool',
  ),
  'MongoDB::resetError' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoDB::selectCollection' => 
  array (
    0 => 'MongoCollection',
    'name' => 'string',
  ),
  'MongoDB::setProfilingLevel' => 
  array (
    0 => 'int',
    'level' => 'int',
  ),
  'MongoDB::setReadPreference' => 
  array (
    0 => 'bool',
    'read_preference' => 'string',
    'tags=' => 'array<array-key, mixed>',
  ),
  'MongoDB::setSlaveOkay' => 
  array (
    0 => 'bool',
    'ok=' => 'bool',
  ),
  'MongoDB::setWriteConcern' => 
  array (
    0 => 'bool',
    'w' => 'mixed',
    'wtimeout=' => 'int',
  ),
  'MongoDB\\BSON\\fromJSON' => 
  array (
    0 => 'string',
    'json' => 'string',
  ),
  'MongoDB\\BSON\\fromPHP' => 
  array (
    0 => 'string',
    'value' => 'array<array-key, mixed>|object',
  ),
  'MongoDB\\BSON\\toCanonicalExtendedJSON' => 
  array (
    0 => 'string',
    'bson' => 'string',
  ),
  'MongoDB\\BSON\\toJSON' => 
  array (
    0 => 'string',
    'bson' => 'string',
  ),
  'MongoDB\\BSON\\toPHP' => 
  array (
    0 => 'array<array-key, mixed>|object',
    'bson' => 'string',
    'typemap=' => 'array<array-key, mixed>|null',
  ),
  'MongoDB\\BSON\\toRelaxedExtendedJSON' => 
  array (
    0 => 'string',
    'bson' => 'string',
  ),
  'MongoDB\\Driver\\Monitoring\\addSubscriber' => 
  array (
    0 => 'void',
    'subscriber' => 'MongoDB\\Driver\\Monitoring\\Subscriber',
  ),
  'MongoDB\\Driver\\Monitoring\\removeSubscriber' => 
  array (
    0 => 'void',
    'subscriber' => 'MongoDB\\Driver\\Monitoring\\Subscriber',
  ),
  'MongoDB\\BSON\\Binary::__construct' => 
  array (
    0 => 'void',
    'data' => 'string',
    'type=' => 'int',
  ),
  'MongoDB\\BSON\\Binary::getData' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\Binary::getType' => 
  array (
    0 => 'int',
  ),
  'MongoDB\\BSON\\Binary::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\Binary::serialize' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\Binary::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'MongoDB\\BSON\\Binary::jsonSerialize' => 
  array (
    0 => 'mixed',
  ),
  'MongoDB\\BSON\\BinaryInterface::getData' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\BinaryInterface::getType' => 
  array (
    0 => 'int',
  ),
  'MongoDB\\BSON\\BinaryInterface::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\DBPointer::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\DBPointer::serialize' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\DBPointer::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'MongoDB\\BSON\\DBPointer::jsonSerialize' => 
  array (
    0 => 'mixed',
  ),
  'MongoDB\\BSON\\Decimal128::__construct' => 
  array (
    0 => 'void',
    'value' => 'string',
  ),
  'MongoDB\\BSON\\Decimal128::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\Decimal128::serialize' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\Decimal128::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'MongoDB\\BSON\\Decimal128::jsonSerialize' => 
  array (
    0 => 'mixed',
  ),
  'MongoDB\\BSON\\Decimal128Interface::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\Document::fromBSON' => 
  array (
    0 => 'MongoDB\\BSON\\Document',
    'bson' => 'string',
  ),
  'MongoDB\\BSON\\Document::fromJSON' => 
  array (
    0 => 'MongoDB\\BSON\\Document',
    'json' => 'string',
  ),
  'MongoDB\\BSON\\Document::fromPHP' => 
  array (
    0 => 'MongoDB\\BSON\\Document',
    'value' => 'array<array-key, mixed>|object',
  ),
  'MongoDB\\BSON\\Document::get' => 
  array (
    0 => 'mixed',
    'key' => 'string',
  ),
  'MongoDB\\BSON\\Document::getIterator' => 
  array (
    0 => 'MongoDB\\BSON\\Iterator',
  ),
  'MongoDB\\BSON\\Document::has' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'MongoDB\\BSON\\Document::toPHP' => 
  array (
    0 => 'array<array-key, mixed>|object',
    'typeMap=' => 'array<array-key, mixed>|null',
  ),
  'MongoDB\\BSON\\Document::toCanonicalExtendedJSON' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\Document::toRelaxedExtendedJSON' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\Document::offsetExists' => 
  array (
    0 => 'bool',
    'offset' => 'mixed',
  ),
  'MongoDB\\BSON\\Document::offsetGet' => 
  array (
    0 => 'mixed',
    'offset' => 'mixed',
  ),
  'MongoDB\\BSON\\Document::offsetSet' => 
  array (
    0 => 'void',
    'offset' => 'mixed',
    'value' => 'mixed',
  ),
  'MongoDB\\BSON\\Document::offsetUnset' => 
  array (
    0 => 'void',
    'offset' => 'mixed',
  ),
  'MongoDB\\BSON\\Document::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\Document::serialize' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\Document::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'MongoDB\\BSON\\Int64::__construct' => 
  array (
    0 => 'void',
    'value' => 'int|string',
  ),
  'MongoDB\\BSON\\Int64::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\Int64::serialize' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\Int64::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'MongoDB\\BSON\\Int64::jsonSerialize' => 
  array (
    0 => 'mixed',
  ),
  'MongoDB\\BSON\\Iterator::current' => 
  array (
    0 => 'mixed',
  ),
  'MongoDB\\BSON\\Iterator::key' => 
  array (
    0 => 'int|string',
  ),
  'MongoDB\\BSON\\Iterator::next' => 
  array (
    0 => 'void',
  ),
  'MongoDB\\BSON\\Iterator::rewind' => 
  array (
    0 => 'void',
  ),
  'MongoDB\\BSON\\Iterator::valid' => 
  array (
    0 => 'bool',
  ),
  'MongoDB\\BSON\\Javascript::__construct' => 
  array (
    0 => 'void',
    'code' => 'string',
    'scope=' => 'array<array-key, mixed>|null|object',
  ),
  'MongoDB\\BSON\\Javascript::getCode' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\Javascript::getScope' => 
  array (
    0 => 'null|object',
  ),
  'MongoDB\\BSON\\Javascript::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\Javascript::serialize' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\Javascript::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'MongoDB\\BSON\\Javascript::jsonSerialize' => 
  array (
    0 => 'mixed',
  ),
  'MongoDB\\BSON\\JavascriptInterface::getCode' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\JavascriptInterface::getScope' => 
  array (
    0 => 'null|object',
  ),
  'MongoDB\\BSON\\JavascriptInterface::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\MaxKey::serialize' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\MaxKey::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'MongoDB\\BSON\\MaxKey::jsonSerialize' => 
  array (
    0 => 'mixed',
  ),
  'MongoDB\\BSON\\MinKey::serialize' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\MinKey::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'MongoDB\\BSON\\MinKey::jsonSerialize' => 
  array (
    0 => 'mixed',
  ),
  'MongoDB\\BSON\\ObjectId::__construct' => 
  array (
    0 => 'void',
    'id=' => 'null|string',
  ),
  'MongoDB\\BSON\\ObjectId::getTimestamp' => 
  array (
    0 => 'int',
  ),
  'MongoDB\\BSON\\ObjectId::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\ObjectId::serialize' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\ObjectId::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'MongoDB\\BSON\\ObjectId::jsonSerialize' => 
  array (
    0 => 'mixed',
  ),
  'MongoDB\\BSON\\ObjectIdInterface::getTimestamp' => 
  array (
    0 => 'int',
  ),
  'MongoDB\\BSON\\ObjectIdInterface::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\PackedArray::fromPHP' => 
  array (
    0 => 'MongoDB\\BSON\\PackedArray',
    'value' => 'array<array-key, mixed>',
  ),
  'MongoDB\\BSON\\PackedArray::get' => 
  array (
    0 => 'mixed',
    'index' => 'int',
  ),
  'MongoDB\\BSON\\PackedArray::getIterator' => 
  array (
    0 => 'MongoDB\\BSON\\Iterator',
  ),
  'MongoDB\\BSON\\PackedArray::has' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'MongoDB\\BSON\\PackedArray::toPHP' => 
  array (
    0 => 'array<array-key, mixed>|object',
    'typeMap=' => 'array<array-key, mixed>|null',
  ),
  'MongoDB\\BSON\\PackedArray::offsetExists' => 
  array (
    0 => 'bool',
    'offset' => 'mixed',
  ),
  'MongoDB\\BSON\\PackedArray::offsetGet' => 
  array (
    0 => 'mixed',
    'offset' => 'mixed',
  ),
  'MongoDB\\BSON\\PackedArray::offsetSet' => 
  array (
    0 => 'void',
    'offset' => 'mixed',
    'value' => 'mixed',
  ),
  'MongoDB\\BSON\\PackedArray::offsetUnset' => 
  array (
    0 => 'void',
    'offset' => 'mixed',
  ),
  'MongoDB\\BSON\\PackedArray::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\PackedArray::serialize' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\PackedArray::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'MongoDB\\BSON\\Persistable::bsonSerialize' => 
  array (
    0 => 'MongoDB\\BSON\\Document|array<array-key, mixed>|stdClass',
  ),
  'MongoDB\\BSON\\Regex::__construct' => 
  array (
    0 => 'void',
    'pattern' => 'string',
    'flags=' => 'string',
  ),
  'MongoDB\\BSON\\Regex::getPattern' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\Regex::getFlags' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\Regex::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\Regex::serialize' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\Regex::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'MongoDB\\BSON\\Regex::jsonSerialize' => 
  array (
    0 => 'mixed',
  ),
  'MongoDB\\BSON\\RegexInterface::getPattern' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\RegexInterface::getFlags' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\RegexInterface::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\Serializable::bsonSerialize' => 
  array (
    0 => 'MongoDB\\BSON\\Document|MongoDB\\BSON\\PackedArray|array<array-key, mixed>|stdClass',
  ),
  'MongoDB\\BSON\\Symbol::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\Symbol::serialize' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\Symbol::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'MongoDB\\BSON\\Symbol::jsonSerialize' => 
  array (
    0 => 'mixed',
  ),
  'MongoDB\\BSON\\Timestamp::__construct' => 
  array (
    0 => 'void',
    'increment' => 'int|string',
    'timestamp' => 'int|string',
  ),
  'MongoDB\\BSON\\Timestamp::getTimestamp' => 
  array (
    0 => 'int',
  ),
  'MongoDB\\BSON\\Timestamp::getIncrement' => 
  array (
    0 => 'int',
  ),
  'MongoDB\\BSON\\Timestamp::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\Timestamp::serialize' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\Timestamp::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'MongoDB\\BSON\\Timestamp::jsonSerialize' => 
  array (
    0 => 'mixed',
  ),
  'MongoDB\\BSON\\TimestampInterface::getTimestamp' => 
  array (
    0 => 'int',
  ),
  'MongoDB\\BSON\\TimestampInterface::getIncrement' => 
  array (
    0 => 'int',
  ),
  'MongoDB\\BSON\\TimestampInterface::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\UTCDateTime::__construct' => 
  array (
    0 => 'void',
    'milliseconds=' => 'DateTimeInterface|float|int|null|string',
  ),
  'MongoDB\\BSON\\UTCDateTime::toDateTime' => 
  array (
    0 => 'DateTime',
  ),
  'MongoDB\\BSON\\UTCDateTime::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\UTCDateTime::serialize' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\UTCDateTime::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'MongoDB\\BSON\\UTCDateTime::jsonSerialize' => 
  array (
    0 => 'mixed',
  ),
  'MongoDB\\BSON\\UTCDateTimeInterface::toDateTime' => 
  array (
    0 => 'DateTime',
  ),
  'MongoDB\\BSON\\UTCDateTimeInterface::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\Undefined::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\Undefined::serialize' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\BSON\\Undefined::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'MongoDB\\BSON\\Undefined::jsonSerialize' => 
  array (
    0 => 'mixed',
  ),
  'MongoDB\\BSON\\Unserializable::bsonUnserialize' => 
  array (
    0 => 'void',
    'data' => 'array<array-key, mixed>',
  ),
  'MongoDB\\Driver\\BulkWrite::__construct' => 
  array (
    0 => 'void',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'MongoDB\\Driver\\BulkWrite::count' => 
  array (
    0 => 'int',
  ),
  'MongoDB\\Driver\\BulkWrite::delete' => 
  array (
    0 => 'void',
    'filter' => 'array<array-key, mixed>|object',
    'deleteOptions=' => 'array<array-key, mixed>|null',
  ),
  'MongoDB\\Driver\\BulkWrite::insert' => 
  array (
    0 => 'mixed',
    'document' => 'array<array-key, mixed>|object',
  ),
  'MongoDB\\Driver\\BulkWrite::update' => 
  array (
    0 => 'void',
    'filter' => 'array<array-key, mixed>|object',
    'newObj' => 'array<array-key, mixed>|object',
    'updateOptions=' => 'array<array-key, mixed>|null',
  ),
  'MongoDB\\Driver\\ClientEncryption::__construct' => 
  array (
    0 => 'void',
    'options' => 'array<array-key, mixed>',
  ),
  'MongoDB\\Driver\\ClientEncryption::addKeyAltName' => 
  array (
    0 => 'null|object',
    'keyId' => 'MongoDB\\BSON\\Binary',
    'keyAltName' => 'string',
  ),
  'MongoDB\\Driver\\ClientEncryption::createDataKey' => 
  array (
    0 => 'MongoDB\\BSON\\Binary',
    'kmsProvider' => 'string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'MongoDB\\Driver\\ClientEncryption::decrypt' => 
  array (
    0 => 'mixed',
    'value' => 'MongoDB\\BSON\\Binary',
  ),
  'MongoDB\\Driver\\ClientEncryption::deleteKey' => 
  array (
    0 => 'object',
    'keyId' => 'MongoDB\\BSON\\Binary',
  ),
  'MongoDB\\Driver\\ClientEncryption::encrypt' => 
  array (
    0 => 'MongoDB\\BSON\\Binary',
    'value' => 'mixed',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'MongoDB\\Driver\\ClientEncryption::encryptExpression' => 
  array (
    0 => 'object',
    'expr' => 'array<array-key, mixed>|object',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'MongoDB\\Driver\\ClientEncryption::getKey' => 
  array (
    0 => 'null|object',
    'keyId' => 'MongoDB\\BSON\\Binary',
  ),
  'MongoDB\\Driver\\ClientEncryption::getKeyByAltName' => 
  array (
    0 => 'null|object',
    'keyAltName' => 'string',
  ),
  'MongoDB\\Driver\\ClientEncryption::getKeys' => 
  array (
    0 => 'MongoDB\\Driver\\Cursor',
  ),
  'MongoDB\\Driver\\ClientEncryption::removeKeyAltName' => 
  array (
    0 => 'null|object',
    'keyId' => 'MongoDB\\BSON\\Binary',
    'keyAltName' => 'string',
  ),
  'MongoDB\\Driver\\ClientEncryption::rewrapManyDataKey' => 
  array (
    0 => 'object',
    'filter' => 'array<array-key, mixed>|object',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'MongoDB\\Driver\\Command::__construct' => 
  array (
    0 => 'void',
    'document' => 'array<array-key, mixed>|object',
    'commandOptions=' => 'array<array-key, mixed>|null',
  ),
  'MongoDB\\Driver\\Cursor::current' => 
  array (
    0 => 'array<array-key, mixed>|null|object',
  ),
  'MongoDB\\Driver\\Cursor::getId' => 
  array (
    0 => 'MongoDB\\Driver\\CursorId',
  ),
  'MongoDB\\Driver\\Cursor::getServer' => 
  array (
    0 => 'MongoDB\\Driver\\Server',
  ),
  'MongoDB\\Driver\\Cursor::isDead' => 
  array (
    0 => 'bool',
  ),
  'MongoDB\\Driver\\Cursor::key' => 
  array (
    0 => 'int|null',
  ),
  'MongoDB\\Driver\\Cursor::next' => 
  array (
    0 => 'void',
  ),
  'MongoDB\\Driver\\Cursor::rewind' => 
  array (
    0 => 'void',
  ),
  'MongoDB\\Driver\\Cursor::setTypeMap' => 
  array (
    0 => 'void',
    'typemap' => 'array<array-key, mixed>',
  ),
  'MongoDB\\Driver\\Cursor::toArray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoDB\\Driver\\Cursor::valid' => 
  array (
    0 => 'bool',
  ),
  'MongoDB\\Driver\\CursorId::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\CursorId::serialize' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\CursorId::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'MongoDB\\Driver\\CursorInterface::getId' => 
  array (
    0 => 'MongoDB\\Driver\\CursorId',
  ),
  'MongoDB\\Driver\\CursorInterface::getServer' => 
  array (
    0 => 'MongoDB\\Driver\\Server',
  ),
  'MongoDB\\Driver\\CursorInterface::isDead' => 
  array (
    0 => 'bool',
  ),
  'MongoDB\\Driver\\CursorInterface::setTypeMap' => 
  array (
    0 => 'void',
    'typemap' => 'array<array-key, mixed>',
  ),
  'MongoDB\\Driver\\CursorInterface::toArray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoDB\\Driver\\Exception\\AuthenticationException::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Exception\\BulkWriteException::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Exception\\CommandException::getResultDocument' => 
  array (
    0 => 'object',
  ),
  'MongoDB\\Driver\\Exception\\CommandException::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Exception\\ConnectionException::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Exception\\ConnectionTimeoutException::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Exception\\EncryptionException::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Exception\\Exception::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Exception\\ExecutionTimeoutException::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Exception\\InvalidArgumentException::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Exception\\LogicException::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Exception\\RuntimeException::hasErrorLabel' => 
  array (
    0 => 'bool',
    'errorLabel' => 'string',
  ),
  'MongoDB\\Driver\\Exception\\RuntimeException::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Exception\\SSLConnectionException::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Exception\\ServerException::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Exception\\UnexpectedValueException::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Exception\\WriteException::getWriteResult' => 
  array (
    0 => 'MongoDB\\Driver\\WriteResult',
  ),
  'MongoDB\\Driver\\Exception\\WriteException::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Manager::__construct' => 
  array (
    0 => 'void',
    'uri=' => 'null|string',
    'uriOptions=' => 'array<array-key, mixed>|null',
    'driverOptions=' => 'array<array-key, mixed>|null',
  ),
  'MongoDB\\Driver\\Manager::addSubscriber' => 
  array (
    0 => 'void',
    'subscriber' => 'MongoDB\\Driver\\Monitoring\\Subscriber',
  ),
  'MongoDB\\Driver\\Manager::createClientEncryption' => 
  array (
    0 => 'MongoDB\\Driver\\ClientEncryption',
    'options' => 'array<array-key, mixed>',
  ),
  'MongoDB\\Driver\\Manager::executeBulkWrite' => 
  array (
    0 => 'MongoDB\\Driver\\WriteResult',
    'namespace' => 'string',
    'bulk' => 'MongoDB\\Driver\\BulkWrite',
    'options=' => 'MongoDB\\Driver\\WriteConcern|array<array-key, mixed>|null',
  ),
  'MongoDB\\Driver\\Manager::executeCommand' => 
  array (
    0 => 'MongoDB\\Driver\\Cursor',
    'db' => 'string',
    'command' => 'MongoDB\\Driver\\Command',
    'options=' => 'MongoDB\\Driver\\ReadPreference|array<array-key, mixed>|null',
  ),
  'MongoDB\\Driver\\Manager::executeQuery' => 
  array (
    0 => 'MongoDB\\Driver\\Cursor',
    'namespace' => 'string',
    'query' => 'MongoDB\\Driver\\Query',
    'options=' => 'MongoDB\\Driver\\ReadPreference|array<array-key, mixed>|null',
  ),
  'MongoDB\\Driver\\Manager::executeReadCommand' => 
  array (
    0 => 'MongoDB\\Driver\\Cursor',
    'db' => 'string',
    'command' => 'MongoDB\\Driver\\Command',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'MongoDB\\Driver\\Manager::executeReadWriteCommand' => 
  array (
    0 => 'MongoDB\\Driver\\Cursor',
    'db' => 'string',
    'command' => 'MongoDB\\Driver\\Command',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'MongoDB\\Driver\\Manager::executeWriteCommand' => 
  array (
    0 => 'MongoDB\\Driver\\Cursor',
    'db' => 'string',
    'command' => 'MongoDB\\Driver\\Command',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'MongoDB\\Driver\\Manager::getEncryptedFieldsMap' => 
  array (
    0 => 'array<array-key, mixed>|null|object',
  ),
  'MongoDB\\Driver\\Manager::getReadConcern' => 
  array (
    0 => 'MongoDB\\Driver\\ReadConcern',
  ),
  'MongoDB\\Driver\\Manager::getReadPreference' => 
  array (
    0 => 'MongoDB\\Driver\\ReadPreference',
  ),
  'MongoDB\\Driver\\Manager::getServers' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoDB\\Driver\\Manager::getWriteConcern' => 
  array (
    0 => 'MongoDB\\Driver\\WriteConcern',
  ),
  'MongoDB\\Driver\\Manager::removeSubscriber' => 
  array (
    0 => 'void',
    'subscriber' => 'MongoDB\\Driver\\Monitoring\\Subscriber',
  ),
  'MongoDB\\Driver\\Manager::selectServer' => 
  array (
    0 => 'MongoDB\\Driver\\Server',
    'readPreference=' => 'MongoDB\\Driver\\ReadPreference|null',
  ),
  'MongoDB\\Driver\\Manager::startSession' => 
  array (
    0 => 'MongoDB\\Driver\\Session',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getCommandName' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getDurationMicros' => 
  array (
    0 => 'int',
  ),
  'MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getError' => 
  array (
    0 => 'Exception',
  ),
  'MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getOperationId' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getReply' => 
  array (
    0 => 'object',
  ),
  'MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getRequestId' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getServer' => 
  array (
    0 => 'MongoDB\\Driver\\Server',
  ),
  'MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getServiceId' => 
  array (
    0 => 'MongoDB\\BSON\\ObjectId|null',
  ),
  'MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getServerConnectionId' => 
  array (
    0 => 'int|null',
  ),
  'MongoDB\\Driver\\Monitoring\\CommandStartedEvent::getCommand' => 
  array (
    0 => 'object',
  ),
  'MongoDB\\Driver\\Monitoring\\CommandStartedEvent::getCommandName' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Monitoring\\CommandStartedEvent::getDatabaseName' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Monitoring\\CommandStartedEvent::getOperationId' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Monitoring\\CommandStartedEvent::getRequestId' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Monitoring\\CommandStartedEvent::getServer' => 
  array (
    0 => 'MongoDB\\Driver\\Server',
  ),
  'MongoDB\\Driver\\Monitoring\\CommandStartedEvent::getServiceId' => 
  array (
    0 => 'MongoDB\\BSON\\ObjectId|null',
  ),
  'MongoDB\\Driver\\Monitoring\\CommandStartedEvent::getServerConnectionId' => 
  array (
    0 => 'int|null',
  ),
  'MongoDB\\Driver\\Monitoring\\CommandSubscriber::commandStarted' => 
  array (
    0 => 'void',
    'event' => 'MongoDB\\Driver\\Monitoring\\CommandStartedEvent',
  ),
  'MongoDB\\Driver\\Monitoring\\CommandSubscriber::commandSucceeded' => 
  array (
    0 => 'void',
    'event' => 'MongoDB\\Driver\\Monitoring\\CommandSucceededEvent',
  ),
  'MongoDB\\Driver\\Monitoring\\CommandSubscriber::commandFailed' => 
  array (
    0 => 'void',
    'event' => 'MongoDB\\Driver\\Monitoring\\CommandFailedEvent',
  ),
  'MongoDB\\Driver\\Monitoring\\CommandSucceededEvent::getCommandName' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Monitoring\\CommandSucceededEvent::getDurationMicros' => 
  array (
    0 => 'int',
  ),
  'MongoDB\\Driver\\Monitoring\\CommandSucceededEvent::getOperationId' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Monitoring\\CommandSucceededEvent::getReply' => 
  array (
    0 => 'object',
  ),
  'MongoDB\\Driver\\Monitoring\\CommandSucceededEvent::getRequestId' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Monitoring\\CommandSucceededEvent::getServer' => 
  array (
    0 => 'MongoDB\\Driver\\Server',
  ),
  'MongoDB\\Driver\\Monitoring\\CommandSucceededEvent::getServiceId' => 
  array (
    0 => 'MongoDB\\BSON\\ObjectId|null',
  ),
  'MongoDB\\Driver\\Monitoring\\CommandSucceededEvent::getServerConnectionId' => 
  array (
    0 => 'int|null',
  ),
  'MongoDB\\Driver\\Monitoring\\LogSubscriber::log' => 
  array (
    0 => 'void',
    'level' => 'int',
    'domain' => 'string',
    'message' => 'string',
  ),
  'MongoDB\\Driver\\Monitoring\\SDAMSubscriber::serverChanged' => 
  array (
    0 => 'void',
    'event' => 'MongoDB\\Driver\\Monitoring\\ServerChangedEvent',
  ),
  'MongoDB\\Driver\\Monitoring\\SDAMSubscriber::serverClosed' => 
  array (
    0 => 'void',
    'event' => 'MongoDB\\Driver\\Monitoring\\ServerClosedEvent',
  ),
  'MongoDB\\Driver\\Monitoring\\SDAMSubscriber::serverOpening' => 
  array (
    0 => 'void',
    'event' => 'MongoDB\\Driver\\Monitoring\\ServerOpeningEvent',
  ),
  'MongoDB\\Driver\\Monitoring\\SDAMSubscriber::serverHeartbeatFailed' => 
  array (
    0 => 'void',
    'event' => 'MongoDB\\Driver\\Monitoring\\ServerHeartbeatFailedEvent',
  ),
  'MongoDB\\Driver\\Monitoring\\SDAMSubscriber::serverHeartbeatStarted' => 
  array (
    0 => 'void',
    'event' => 'MongoDB\\Driver\\Monitoring\\ServerHeartbeatStartedEvent',
  ),
  'MongoDB\\Driver\\Monitoring\\SDAMSubscriber::serverHeartbeatSucceeded' => 
  array (
    0 => 'void',
    'event' => 'MongoDB\\Driver\\Monitoring\\ServerHeartbeatSucceededEvent',
  ),
  'MongoDB\\Driver\\Monitoring\\SDAMSubscriber::topologyChanged' => 
  array (
    0 => 'void',
    'event' => 'MongoDB\\Driver\\Monitoring\\TopologyChangedEvent',
  ),
  'MongoDB\\Driver\\Monitoring\\SDAMSubscriber::topologyClosed' => 
  array (
    0 => 'void',
    'event' => 'MongoDB\\Driver\\Monitoring\\TopologyClosedEvent',
  ),
  'MongoDB\\Driver\\Monitoring\\SDAMSubscriber::topologyOpening' => 
  array (
    0 => 'void',
    'event' => 'MongoDB\\Driver\\Monitoring\\TopologyOpeningEvent',
  ),
  'MongoDB\\Driver\\Monitoring\\ServerChangedEvent::getPort' => 
  array (
    0 => 'int',
  ),
  'MongoDB\\Driver\\Monitoring\\ServerChangedEvent::getHost' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Monitoring\\ServerChangedEvent::getNewDescription' => 
  array (
    0 => 'MongoDB\\Driver\\ServerDescription',
  ),
  'MongoDB\\Driver\\Monitoring\\ServerChangedEvent::getPreviousDescription' => 
  array (
    0 => 'MongoDB\\Driver\\ServerDescription',
  ),
  'MongoDB\\Driver\\Monitoring\\ServerChangedEvent::getTopologyId' => 
  array (
    0 => 'MongoDB\\BSON\\ObjectId',
  ),
  'MongoDB\\Driver\\Monitoring\\ServerClosedEvent::getPort' => 
  array (
    0 => 'int',
  ),
  'MongoDB\\Driver\\Monitoring\\ServerClosedEvent::getHost' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Monitoring\\ServerClosedEvent::getTopologyId' => 
  array (
    0 => 'MongoDB\\BSON\\ObjectId',
  ),
  'MongoDB\\Driver\\Monitoring\\ServerHeartbeatFailedEvent::getDurationMicros' => 
  array (
    0 => 'int',
  ),
  'MongoDB\\Driver\\Monitoring\\ServerHeartbeatFailedEvent::getError' => 
  array (
    0 => 'Exception',
  ),
  'MongoDB\\Driver\\Monitoring\\ServerHeartbeatFailedEvent::getPort' => 
  array (
    0 => 'int',
  ),
  'MongoDB\\Driver\\Monitoring\\ServerHeartbeatFailedEvent::getHost' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Monitoring\\ServerHeartbeatFailedEvent::isAwaited' => 
  array (
    0 => 'bool',
  ),
  'MongoDB\\Driver\\Monitoring\\ServerHeartbeatStartedEvent::getPort' => 
  array (
    0 => 'int',
  ),
  'MongoDB\\Driver\\Monitoring\\ServerHeartbeatStartedEvent::getHost' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Monitoring\\ServerHeartbeatStartedEvent::isAwaited' => 
  array (
    0 => 'bool',
  ),
  'MongoDB\\Driver\\Monitoring\\ServerHeartbeatSucceededEvent::getDurationMicros' => 
  array (
    0 => 'int',
  ),
  'MongoDB\\Driver\\Monitoring\\ServerHeartbeatSucceededEvent::getReply' => 
  array (
    0 => 'object',
  ),
  'MongoDB\\Driver\\Monitoring\\ServerHeartbeatSucceededEvent::getPort' => 
  array (
    0 => 'int',
  ),
  'MongoDB\\Driver\\Monitoring\\ServerHeartbeatSucceededEvent::getHost' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Monitoring\\ServerHeartbeatSucceededEvent::isAwaited' => 
  array (
    0 => 'bool',
  ),
  'MongoDB\\Driver\\Monitoring\\ServerOpeningEvent::getPort' => 
  array (
    0 => 'int',
  ),
  'MongoDB\\Driver\\Monitoring\\ServerOpeningEvent::getHost' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Monitoring\\ServerOpeningEvent::getTopologyId' => 
  array (
    0 => 'MongoDB\\BSON\\ObjectId',
  ),
  'MongoDB\\Driver\\Monitoring\\TopologyChangedEvent::getNewDescription' => 
  array (
    0 => 'MongoDB\\Driver\\TopologyDescription',
  ),
  'MongoDB\\Driver\\Monitoring\\TopologyChangedEvent::getPreviousDescription' => 
  array (
    0 => 'MongoDB\\Driver\\TopologyDescription',
  ),
  'MongoDB\\Driver\\Monitoring\\TopologyChangedEvent::getTopologyId' => 
  array (
    0 => 'MongoDB\\BSON\\ObjectId',
  ),
  'MongoDB\\Driver\\Monitoring\\TopologyClosedEvent::getTopologyId' => 
  array (
    0 => 'MongoDB\\BSON\\ObjectId',
  ),
  'MongoDB\\Driver\\Monitoring\\TopologyOpeningEvent::getTopologyId' => 
  array (
    0 => 'MongoDB\\BSON\\ObjectId',
  ),
  'MongoDB\\Driver\\Query::__construct' => 
  array (
    0 => 'void',
    'filter' => 'array<array-key, mixed>|object',
    'queryOptions=' => 'array<array-key, mixed>|null',
  ),
  'MongoDB\\Driver\\ReadConcern::__construct' => 
  array (
    0 => 'void',
    'level=' => 'null|string',
  ),
  'MongoDB\\Driver\\ReadConcern::getLevel' => 
  array (
    0 => 'null|string',
  ),
  'MongoDB\\Driver\\ReadConcern::isDefault' => 
  array (
    0 => 'bool',
  ),
  'MongoDB\\Driver\\ReadConcern::bsonSerialize' => 
  array (
    0 => 'stdClass',
  ),
  'MongoDB\\Driver\\ReadConcern::serialize' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\ReadConcern::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'MongoDB\\Driver\\ReadPreference::__construct' => 
  array (
    0 => 'void',
    'mode' => 'int|string',
    'tagSets=' => 'array<array-key, mixed>|null',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'MongoDB\\Driver\\ReadPreference::getHedge' => 
  array (
    0 => 'null|object',
  ),
  'MongoDB\\Driver\\ReadPreference::getMaxStalenessSeconds' => 
  array (
    0 => 'int',
  ),
  'MongoDB\\Driver\\ReadPreference::getMode' => 
  array (
    0 => 'int',
  ),
  'MongoDB\\Driver\\ReadPreference::getModeString' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\ReadPreference::getTagSets' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoDB\\Driver\\ReadPreference::bsonSerialize' => 
  array (
    0 => 'stdClass',
  ),
  'MongoDB\\Driver\\ReadPreference::serialize' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\ReadPreference::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'MongoDB\\Driver\\Server::executeBulkWrite' => 
  array (
    0 => 'MongoDB\\Driver\\WriteResult',
    'namespace' => 'string',
    'bulkWrite' => 'MongoDB\\Driver\\BulkWrite',
    'options=' => 'MongoDB\\Driver\\WriteConcern|array<array-key, mixed>|null',
  ),
  'MongoDB\\Driver\\Server::executeCommand' => 
  array (
    0 => 'MongoDB\\Driver\\Cursor',
    'db' => 'string',
    'command' => 'MongoDB\\Driver\\Command',
    'options=' => 'MongoDB\\Driver\\ReadPreference|array<array-key, mixed>|null',
  ),
  'MongoDB\\Driver\\Server::executeQuery' => 
  array (
    0 => 'MongoDB\\Driver\\Cursor',
    'namespace' => 'string',
    'query' => 'MongoDB\\Driver\\Query',
    'options=' => 'MongoDB\\Driver\\ReadPreference|array<array-key, mixed>|null',
  ),
  'MongoDB\\Driver\\Server::executeReadCommand' => 
  array (
    0 => 'MongoDB\\Driver\\Cursor',
    'db' => 'string',
    'command' => 'MongoDB\\Driver\\Command',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'MongoDB\\Driver\\Server::executeReadWriteCommand' => 
  array (
    0 => 'MongoDB\\Driver\\Cursor',
    'db' => 'string',
    'command' => 'MongoDB\\Driver\\Command',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'MongoDB\\Driver\\Server::executeWriteCommand' => 
  array (
    0 => 'MongoDB\\Driver\\Cursor',
    'db' => 'string',
    'command' => 'MongoDB\\Driver\\Command',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'MongoDB\\Driver\\Server::getHost' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Server::getInfo' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoDB\\Driver\\Server::getLatency' => 
  array (
    0 => 'int|null',
  ),
  'MongoDB\\Driver\\Server::getPort' => 
  array (
    0 => 'int',
  ),
  'MongoDB\\Driver\\Server::getServerDescription' => 
  array (
    0 => 'MongoDB\\Driver\\ServerDescription',
  ),
  'MongoDB\\Driver\\Server::getTags' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoDB\\Driver\\Server::getType' => 
  array (
    0 => 'int',
  ),
  'MongoDB\\Driver\\Server::isArbiter' => 
  array (
    0 => 'bool',
  ),
  'MongoDB\\Driver\\Server::isHidden' => 
  array (
    0 => 'bool',
  ),
  'MongoDB\\Driver\\Server::isPassive' => 
  array (
    0 => 'bool',
  ),
  'MongoDB\\Driver\\Server::isPrimary' => 
  array (
    0 => 'bool',
  ),
  'MongoDB\\Driver\\Server::isSecondary' => 
  array (
    0 => 'bool',
  ),
  'MongoDB\\Driver\\ServerApi::__construct' => 
  array (
    0 => 'void',
    'version' => 'string',
    'strict=' => 'bool|null',
    'deprecationErrors=' => 'bool|null',
  ),
  'MongoDB\\Driver\\ServerApi::bsonSerialize' => 
  array (
    0 => 'stdClass',
  ),
  'MongoDB\\Driver\\ServerApi::serialize' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\ServerApi::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'MongoDB\\Driver\\ServerDescription::getHelloResponse' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoDB\\Driver\\ServerDescription::getHost' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\ServerDescription::getLastUpdateTime' => 
  array (
    0 => 'int',
  ),
  'MongoDB\\Driver\\ServerDescription::getPort' => 
  array (
    0 => 'int',
  ),
  'MongoDB\\Driver\\ServerDescription::getRoundTripTime' => 
  array (
    0 => 'int|null',
  ),
  'MongoDB\\Driver\\ServerDescription::getType' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Session::abortTransaction' => 
  array (
    0 => 'void',
  ),
  'MongoDB\\Driver\\Session::advanceClusterTime' => 
  array (
    0 => 'void',
    'clusterTime' => 'array<array-key, mixed>|object',
  ),
  'MongoDB\\Driver\\Session::advanceOperationTime' => 
  array (
    0 => 'void',
    'operationTime' => 'MongoDB\\BSON\\TimestampInterface',
  ),
  'MongoDB\\Driver\\Session::commitTransaction' => 
  array (
    0 => 'void',
  ),
  'MongoDB\\Driver\\Session::endSession' => 
  array (
    0 => 'void',
  ),
  'MongoDB\\Driver\\Session::getClusterTime' => 
  array (
    0 => 'null|object',
  ),
  'MongoDB\\Driver\\Session::getLogicalSessionId' => 
  array (
    0 => 'object',
  ),
  'MongoDB\\Driver\\Session::getOperationTime' => 
  array (
    0 => 'MongoDB\\BSON\\Timestamp|null',
  ),
  'MongoDB\\Driver\\Session::getServer' => 
  array (
    0 => 'MongoDB\\Driver\\Server|null',
  ),
  'MongoDB\\Driver\\Session::getTransactionOptions' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'MongoDB\\Driver\\Session::getTransactionState' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\Session::isDirty' => 
  array (
    0 => 'bool',
  ),
  'MongoDB\\Driver\\Session::isInTransaction' => 
  array (
    0 => 'bool',
  ),
  'MongoDB\\Driver\\Session::startTransaction' => 
  array (
    0 => 'void',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'MongoDB\\Driver\\TopologyDescription::getServers' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoDB\\Driver\\TopologyDescription::getType' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\TopologyDescription::hasReadableServer' => 
  array (
    0 => 'bool',
    'readPreference=' => 'MongoDB\\Driver\\ReadPreference|null',
  ),
  'MongoDB\\Driver\\TopologyDescription::hasWritableServer' => 
  array (
    0 => 'bool',
  ),
  'MongoDB\\Driver\\WriteConcern::__construct' => 
  array (
    0 => 'void',
    'w' => 'int|string',
    'wtimeout=' => 'int|null',
    'journal=' => 'bool|null',
  ),
  'MongoDB\\Driver\\WriteConcern::getJournal' => 
  array (
    0 => 'bool|null',
  ),
  'MongoDB\\Driver\\WriteConcern::getW' => 
  array (
    0 => 'int|null|string',
  ),
  'MongoDB\\Driver\\WriteConcern::getWtimeout' => 
  array (
    0 => 'int',
  ),
  'MongoDB\\Driver\\WriteConcern::isDefault' => 
  array (
    0 => 'bool',
  ),
  'MongoDB\\Driver\\WriteConcern::bsonSerialize' => 
  array (
    0 => 'stdClass',
  ),
  'MongoDB\\Driver\\WriteConcern::serialize' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\WriteConcern::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'MongoDB\\Driver\\WriteConcernError::getCode' => 
  array (
    0 => 'int',
  ),
  'MongoDB\\Driver\\WriteConcernError::getInfo' => 
  array (
    0 => 'null|object',
  ),
  'MongoDB\\Driver\\WriteConcernError::getMessage' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\WriteError::getCode' => 
  array (
    0 => 'int',
  ),
  'MongoDB\\Driver\\WriteError::getIndex' => 
  array (
    0 => 'int',
  ),
  'MongoDB\\Driver\\WriteError::getInfo' => 
  array (
    0 => 'null|object',
  ),
  'MongoDB\\Driver\\WriteError::getMessage' => 
  array (
    0 => 'string',
  ),
  'MongoDB\\Driver\\WriteResult::getInsertedCount' => 
  array (
    0 => 'int|null',
  ),
  'MongoDB\\Driver\\WriteResult::getMatchedCount' => 
  array (
    0 => 'int|null',
  ),
  'MongoDB\\Driver\\WriteResult::getModifiedCount' => 
  array (
    0 => 'int|null',
  ),
  'MongoDB\\Driver\\WriteResult::getDeletedCount' => 
  array (
    0 => 'int|null',
  ),
  'MongoDB\\Driver\\WriteResult::getUpsertedCount' => 
  array (
    0 => 'int|null',
  ),
  'MongoDB\\Driver\\WriteResult::getServer' => 
  array (
    0 => 'MongoDB\\Driver\\Server',
  ),
  'MongoDB\\Driver\\WriteResult::getUpsertedIds' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoDB\\Driver\\WriteResult::getWriteConcernError' => 
  array (
    0 => 'MongoDB\\Driver\\WriteConcernError|null',
  ),
  'MongoDB\\Driver\\WriteResult::getWriteErrors' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoDB\\Driver\\WriteResult::getErrorReplies' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoDB\\Driver\\WriteResult::isAcknowledged' => 
  array (
    0 => 'bool',
  ),
  'MongoDBRef::create' => 
  array (
    0 => 'array<array-key, mixed>',
    'collection' => 'string',
    'id' => 'mixed',
    'database=' => 'string',
  ),
  'MongoDBRef::get' => 
  array (
    0 => 'array<array-key, mixed>|null',
    'db' => 'MongoDB',
    'ref' => 'array<array-key, mixed>',
  ),
  'MongoDBRef::isRef' => 
  array (
    0 => 'bool',
    'ref' => 'mixed',
  ),
  'MongoDeleteBatch::__construct' => 
  array (
    0 => 'void',
    'collection' => 'MongoCollection',
    'write_options=' => 'array<array-key, mixed>',
  ),
  'MongoException::__clone' => 
  array (
    0 => 'void',
  ),
  'MongoException::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Exception|Throwable|null',
  ),
  'MongoException::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoException::__wakeup' => 
  array (
    0 => 'void',
  ),
  'MongoException::getCode' => 
  array (
    0 => 'int',
  ),
  'MongoException::getFile' => 
  array (
    0 => 'string',
  ),
  'MongoException::getLine' => 
  array (
    0 => 'int',
  ),
  'MongoException::getMessage' => 
  array (
    0 => 'string',
  ),
  'MongoException::getPrevious' => 
  array (
    0 => 'Exception|Throwable',
  ),
  'MongoException::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'MongoException::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'MongoGridFS::__construct' => 
  array (
    0 => 'void',
    'db' => 'MongoDB',
    'prefix=' => 'string',
    'chunks=' => 'mixed',
  ),
  'MongoGridFS::__get' => 
  array (
    0 => 'MongoCollection',
    'name' => 'string',
  ),
  'MongoGridFS::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoGridFS::aggregate' => 
  array (
    0 => 'array<array-key, mixed>',
    'pipeline' => 'array<array-key, mixed>',
    'op' => 'array<array-key, mixed>',
    'pipelineOperators' => 'array<array-key, mixed>',
  ),
  'MongoGridFS::aggregateCursor' => 
  array (
    0 => 'MongoCommandCursor',
    'pipeline' => 'array<array-key, mixed>',
    'options' => 'array<array-key, mixed>',
  ),
  'MongoGridFS::batchInsert' => 
  array (
    0 => 'mixed',
    'a' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'MongoGridFS::count' => 
  array (
    0 => 'int',
    'query=' => 'array<array-key, mixed>|stdClass',
  ),
  'MongoGridFS::createDBRef' => 
  array (
    0 => 'array<array-key, mixed>',
    'a' => 'array<array-key, mixed>',
  ),
  'MongoGridFS::createIndex' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'MongoGridFS::delete' => 
  array (
    0 => 'bool',
    'id' => 'mixed',
  ),
  'MongoGridFS::deleteIndex' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'array<array-key, mixed>|string',
  ),
  'MongoGridFS::deleteIndexes' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoGridFS::distinct' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'key' => 'string',
    'query=' => 'array<array-key, mixed>|null',
  ),
  'MongoGridFS::drop' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoGridFS::ensureIndex' => 
  array (
    0 => 'bool',
    'keys' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'MongoGridFS::find' => 
  array (
    0 => 'MongoGridFSCursor',
    'query=' => 'array<array-key, mixed>',
    'fields=' => 'array<array-key, mixed>',
  ),
  'MongoGridFS::findAndModify' => 
  array (
    0 => 'array<array-key, mixed>',
    'query' => 'array<array-key, mixed>',
    'update=' => 'array<array-key, mixed>|null',
    'fields=' => 'array<array-key, mixed>|null',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'MongoGridFS::findOne' => 
  array (
    0 => 'MongoGridFSFile|null',
    'query=' => 'mixed',
    'fields=' => 'mixed',
  ),
  'MongoGridFS::get' => 
  array (
    0 => 'MongoGridFSFile|null',
    'id' => 'mixed',
  ),
  'MongoGridFS::getDBRef' => 
  array (
    0 => 'array<array-key, mixed>',
    'ref' => 'array<array-key, mixed>',
  ),
  'MongoGridFS::getIndexInfo' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoGridFS::getName' => 
  array (
    0 => 'string',
  ),
  'MongoGridFS::getReadPreference' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoGridFS::getSlaveOkay' => 
  array (
    0 => 'bool',
  ),
  'MongoGridFS::group' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'mixed',
    'initial' => 'array<array-key, mixed>',
    'reduce' => 'MongoCode',
    'condition=' => 'array<array-key, mixed>',
  ),
  'MongoGridFS::insert' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'a' => 'array<array-key, mixed>|object',
    'options=' => 'array<array-key, mixed>',
  ),
  'MongoGridFS::put' => 
  array (
    0 => 'mixed',
    'filename' => 'string',
    'extra=' => 'array<array-key, mixed>',
  ),
  'MongoGridFS::remove' => 
  array (
    0 => 'bool',
    'criteria=' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'MongoGridFS::save' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'a' => 'array<array-key, mixed>|object',
    'options=' => 'array<array-key, mixed>',
  ),
  'MongoGridFS::setReadPreference' => 
  array (
    0 => 'bool',
    'read_preference' => 'string',
    'tags' => 'array<array-key, mixed>',
  ),
  'MongoGridFS::setSlaveOkay' => 
  array (
    0 => 'bool',
    'ok=' => 'bool',
  ),
  'MongoGridFS::storeBytes' => 
  array (
    0 => 'mixed',
    'bytes' => 'string',
    'extra=' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'MongoGridFS::storeFile' => 
  array (
    0 => 'mixed',
    'filename' => 'string',
    'extra=' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'MongoGridFS::storeUpload' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'filename=' => 'string',
  ),
  'MongoGridFS::toIndexString' => 
  array (
    0 => 'string',
    'keys' => 'mixed',
  ),
  'MongoGridFS::update' => 
  array (
    0 => 'bool',
    'criteria' => 'array<array-key, mixed>',
    'newobj' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'MongoGridFS::validate' => 
  array (
    0 => 'array<array-key, mixed>',
    'scan_data=' => 'bool',
  ),
  'MongoGridFSCursor::__construct' => 
  array (
    0 => 'void',
    'gridfs' => 'MongoGridFS',
    'connection' => 'resource',
    'ns' => 'string',
    'query' => 'array<array-key, mixed>',
    'fields' => 'array<array-key, mixed>',
  ),
  'MongoGridFSCursor::addOption' => 
  array (
    0 => 'MongoCursor',
    'key' => 'string',
    'value' => 'mixed',
  ),
  'MongoGridFSCursor::awaitData' => 
  array (
    0 => 'MongoCursor',
    'wait=' => 'bool',
  ),
  'MongoGridFSCursor::batchSize' => 
  array (
    0 => 'MongoCursor',
    'batchSize' => 'int',
  ),
  'MongoGridFSCursor::count' => 
  array (
    0 => 'int',
    'all=' => 'bool',
  ),
  'MongoGridFSCursor::current' => 
  array (
    0 => 'MongoGridFSFile',
  ),
  'MongoGridFSCursor::dead' => 
  array (
    0 => 'bool',
  ),
  'MongoGridFSCursor::doQuery' => 
  array (
    0 => 'void',
  ),
  'MongoGridFSCursor::explain' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoGridFSCursor::fields' => 
  array (
    0 => 'MongoCursor',
    'f' => 'array<array-key, mixed>',
  ),
  'MongoGridFSCursor::getNext' => 
  array (
    0 => 'MongoGridFSFile',
  ),
  'MongoGridFSCursor::getReadPreference' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoGridFSCursor::hasNext' => 
  array (
    0 => 'bool',
  ),
  'MongoGridFSCursor::hint' => 
  array (
    0 => 'MongoCursor',
    'key_pattern' => 'mixed',
  ),
  'MongoGridFSCursor::immortal' => 
  array (
    0 => 'MongoCursor',
    'liveForever=' => 'bool',
  ),
  'MongoGridFSCursor::info' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoGridFSCursor::key' => 
  array (
    0 => 'string',
  ),
  'MongoGridFSCursor::limit' => 
  array (
    0 => 'MongoCursor',
    'num' => 'int',
  ),
  'MongoGridFSCursor::maxTimeMS' => 
  array (
    0 => 'MongoCursor',
    'ms' => 'int',
  ),
  'MongoGridFSCursor::next' => 
  array (
    0 => 'void',
  ),
  'MongoGridFSCursor::partial' => 
  array (
    0 => 'MongoCursor',
    'okay=' => 'bool',
  ),
  'MongoGridFSCursor::reset' => 
  array (
    0 => 'void',
  ),
  'MongoGridFSCursor::rewind' => 
  array (
    0 => 'void',
  ),
  'MongoGridFSCursor::setFlag' => 
  array (
    0 => 'MongoCursor',
    'flag' => 'int',
    'set=' => 'bool',
  ),
  'MongoGridFSCursor::setReadPreference' => 
  array (
    0 => 'MongoCursor',
    'read_preference' => 'string',
    'tags' => 'array<array-key, mixed>',
  ),
  'MongoGridFSCursor::skip' => 
  array (
    0 => 'MongoCursor',
    'num' => 'int',
  ),
  'MongoGridFSCursor::slaveOkay' => 
  array (
    0 => 'MongoCursor',
    'okay=' => 'bool',
  ),
  'MongoGridFSCursor::snapshot' => 
  array (
    0 => 'MongoCursor',
  ),
  'MongoGridFSCursor::sort' => 
  array (
    0 => 'MongoCursor',
    'fields' => 'array<array-key, mixed>',
  ),
  'MongoGridFSCursor::tailable' => 
  array (
    0 => 'MongoCursor',
    'tail=' => 'bool',
  ),
  'MongoGridFSCursor::timeout' => 
  array (
    0 => 'MongoCursor',
    'ms' => 'int',
  ),
  'MongoGridFSCursor::valid' => 
  array (
    0 => 'bool',
  ),
  'MongoGridfsFile::__construct' => 
  array (
    0 => 'void',
    'gridfs' => 'MongoGridFS',
    'file' => 'array<array-key, mixed>',
  ),
  'MongoGridFSFile::getBytes' => 
  array (
    0 => 'string',
  ),
  'MongoGridFSFile::getFilename' => 
  array (
    0 => 'string',
  ),
  'MongoGridFSFile::getResource' => 
  array (
    0 => 'resource',
  ),
  'MongoGridFSFile::getSize' => 
  array (
    0 => 'int',
  ),
  'MongoGridFSFile::write' => 
  array (
    0 => 'int',
    'filename=' => 'string',
  ),
  'MongoId::__construct' => 
  array (
    0 => 'void',
    'id=' => 'MongoId|string',
  ),
  'MongoId::__set_state' => 
  array (
    0 => 'MongoId',
    'props' => 'array<array-key, mixed>',
  ),
  'MongoId::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoId::getHostname' => 
  array (
    0 => 'string',
  ),
  'MongoId::getInc' => 
  array (
    0 => 'int',
  ),
  'MongoId::getPID' => 
  array (
    0 => 'int',
  ),
  'MongoId::getTimestamp' => 
  array (
    0 => 'int',
  ),
  'MongoId::isValid' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'MongoInsertBatch::__construct' => 
  array (
    0 => 'void',
    'collection' => 'MongoCollection',
    'write_options=' => 'array<array-key, mixed>',
  ),
  'MongoInt32::__construct' => 
  array (
    0 => 'void',
    'value' => 'string',
  ),
  'MongoInt32::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoInt64::__construct' => 
  array (
    0 => 'void',
    'value' => 'string',
  ),
  'MongoInt64::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoLog::getCallback' => 
  array (
    0 => 'callable',
  ),
  'MongoLog::getLevel' => 
  array (
    0 => 'int',
  ),
  'MongoLog::getModule' => 
  array (
    0 => 'int',
  ),
  'MongoLog::setCallback' => 
  array (
    0 => 'void',
    'log_function' => 'callable',
  ),
  'MongoLog::setLevel' => 
  array (
    0 => 'void',
    'level' => 'int',
  ),
  'MongoLog::setModule' => 
  array (
    0 => 'void',
    'module' => 'int',
  ),
  'MongoPool::getSize' => 
  array (
    0 => 'int',
  ),
  'MongoPool::info' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoPool::setSize' => 
  array (
    0 => 'bool',
    'size' => 'int',
  ),
  'MongoRegex::__construct' => 
  array (
    0 => 'void',
    'regex' => 'string',
  ),
  'MongoRegex::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoResultException::__clone' => 
  array (
    0 => 'void',
  ),
  'MongoResultException::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Exception|Throwable|null',
  ),
  'MongoResultException::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoResultException::__wakeup' => 
  array (
    0 => 'void',
  ),
  'MongoResultException::getCode' => 
  array (
    0 => 'int',
  ),
  'MongoResultException::getDocument' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoResultException::getFile' => 
  array (
    0 => 'string',
  ),
  'MongoResultException::getLine' => 
  array (
    0 => 'int',
  ),
  'MongoResultException::getMessage' => 
  array (
    0 => 'string',
  ),
  'MongoResultException::getPrevious' => 
  array (
    0 => 'Exception|Throwable',
  ),
  'MongoResultException::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'MongoResultException::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'MongoTimestamp::__construct' => 
  array (
    0 => 'void',
    'second=' => 'int',
    'inc=' => 'int',
  ),
  'MongoTimestamp::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoUpdateBatch::__construct' => 
  array (
    0 => 'void',
    'collection' => 'MongoCollection',
    'write_options=' => 'array<array-key, mixed>',
  ),
  'MongoUpdateBatch::add' => 
  array (
    0 => 'bool',
    'item' => 'array<array-key, mixed>',
  ),
  'MongoUpdateBatch::execute' => 
  array (
    0 => 'array<array-key, mixed>',
    'write_options' => 'array<array-key, mixed>',
  ),
  'MongoWriteBatch::__construct' => 
  array (
    0 => 'void',
    'collection' => 'MongoCollection',
    'batch_type' => 'string',
    'write_options' => 'array<array-key, mixed>',
  ),
  'MongoWriteBatch::add' => 
  array (
    0 => 'bool',
    'item' => 'array<array-key, mixed>',
  ),
  'MongoWriteBatch::execute' => 
  array (
    0 => 'array<array-key, mixed>',
    'write_options' => 'array<array-key, mixed>',
  ),
  'MongoWriteConcernException::__clone' => 
  array (
    0 => 'void',
  ),
  'MongoWriteConcernException::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Exception|Throwable|null',
  ),
  'MongoWriteConcernException::__toString' => 
  array (
    0 => 'string',
  ),
  'MongoWriteConcernException::__wakeup' => 
  array (
    0 => 'void',
  ),
  'MongoWriteConcernException::getCode' => 
  array (
    0 => 'int',
  ),
  'MongoWriteConcernException::getDocument' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MongoWriteConcernException::getFile' => 
  array (
    0 => 'string',
  ),
  'MongoWriteConcernException::getLine' => 
  array (
    0 => 'int',
  ),
  'MongoWriteConcernException::getMessage' => 
  array (
    0 => 'string',
  ),
  'MongoWriteConcernException::getPrevious' => 
  array (
    0 => 'Exception|Throwable',
  ),
  'MongoWriteConcernException::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'MongoWriteConcernException::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'monitor_custom_event' => 
  array (
    0 => 'void',
    'class' => 'string',
    'text' => 'string',
    'severe=' => 'int',
    'user_data=' => 'mixed',
  ),
  'monitor_httperror_event' => 
  array (
    0 => 'void',
    'error_code' => 'int',
    'url' => 'string',
    'severe=' => 'int',
  ),
  'monitor_license_info' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'monitor_pass_error' => 
  array (
    0 => 'void',
    'errno' => 'int',
    'errstr' => 'string',
    'errfile' => 'string',
    'errline' => 'int',
  ),
  'monitor_set_aggregation_hint' => 
  array (
    0 => 'void',
    'hint' => 'string',
  ),
  'move_uploaded_file' => 
  array (
    0 => 'bool',
    'from' => 'string',
    'to' => 'string',
  ),
  'mqseries_back' => 
  array (
    0 => 'void',
    'hconn' => 'resource',
    'compcode' => 'resource',
    'reason' => 'resource',
  ),
  'mqseries_begin' => 
  array (
    0 => 'void',
    'hconn' => 'resource',
    'beginoptions' => 'array<array-key, mixed>',
    'compcode' => 'resource',
    'reason' => 'resource',
  ),
  'mqseries_close' => 
  array (
    0 => 'void',
    'hconn' => 'resource',
    'hobj' => 'resource',
    'options' => 'int',
    'compcode' => 'resource',
    'reason' => 'resource',
  ),
  'mqseries_cmit' => 
  array (
    0 => 'void',
    'hconn' => 'resource',
    'compcode' => 'resource',
    'reason' => 'resource',
  ),
  'mqseries_conn' => 
  array (
    0 => 'void',
    'qmanagername' => 'string',
    'hconn' => 'resource',
    'compcode' => 'resource',
    'reason' => 'resource',
  ),
  'mqseries_connx' => 
  array (
    0 => 'void',
    'qmanagername' => 'string',
    'connoptions' => 'array<array-key, mixed>',
    'hconn' => 'resource',
    'compcode' => 'resource',
    'reason' => 'resource',
  ),
  'mqseries_disc' => 
  array (
    0 => 'void',
    'hconn' => 'resource',
    'compcode' => 'resource',
    'reason' => 'resource',
  ),
  'mqseries_get' => 
  array (
    0 => 'void',
    'hconn' => 'resource',
    'hobj' => 'resource',
    'md' => 'array<array-key, mixed>',
    'gmo' => 'array<array-key, mixed>',
    'bufferlength' => 'int',
    'msg' => 'string',
    'data_length' => 'int',
    'compcode' => 'resource',
    'reason' => 'resource',
  ),
  'mqseries_inq' => 
  array (
    0 => 'void',
    'hconn' => 'resource',
    'hobj' => 'resource',
    'selectorcount' => 'int',
    'selectors' => 'array<array-key, mixed>',
    'intattrcount' => 'int',
    'intattr' => 'resource',
    'charattrlength' => 'int',
    'charattr' => 'resource',
    'compcode' => 'resource',
    'reason' => 'resource',
  ),
  'mqseries_open' => 
  array (
    0 => 'void',
    'hconn' => 'resource',
    'objdesc' => 'array<array-key, mixed>',
    'option' => 'int',
    'hobj' => 'resource',
    'compcode' => 'resource',
    'reason' => 'resource',
  ),
  'mqseries_put' => 
  array (
    0 => 'void',
    'hconn' => 'resource',
    'hobj' => 'resource',
    'md' => 'array<array-key, mixed>',
    'pmo' => 'array<array-key, mixed>',
    'message' => 'string',
    'compcode' => 'resource',
    'reason' => 'resource',
  ),
  'mqseries_put1' => 
  array (
    0 => 'void',
    'hconn' => 'resource',
    'objdesc' => 'resource',
    'msgdesc' => 'resource',
    'pmo' => 'resource',
    'buffer' => 'string',
    'compcode' => 'resource',
    'reason' => 'resource',
  ),
  'mqseries_set' => 
  array (
    0 => 'void',
    'hconn' => 'resource',
    'hobj' => 'resource',
    'selectorcount' => 'int',
    'selectors' => 'array<array-key, mixed>',
    'intattrcount' => 'int',
    'intattrs' => 'array<array-key, mixed>',
    'charattrlength' => 'int',
    'charattrs' => 'array<array-key, mixed>',
    'compcode' => 'resource',
    'reason' => 'resource',
  ),
  'mqseries_strerror' => 
  array (
    0 => 'string',
    'reason' => 'int',
  ),
  'ms_GetErrorObj' => 
  array (
    0 => 'errorObj',
  ),
  'ms_GetVersion' => 
  array (
    0 => 'string',
  ),
  'ms_GetVersionInt' => 
  array (
    0 => 'int',
  ),
  'ms_iogetStdoutBufferBytes' => 
  array (
    0 => 'int',
  ),
  'ms_iogetstdoutbufferstring' => 
  array (
    0 => 'void',
  ),
  'ms_ioinstallstdinfrombuffer' => 
  array (
    0 => 'void',
  ),
  'ms_ioinstallstdouttobuffer' => 
  array (
    0 => 'void',
  ),
  'ms_ioresethandlers' => 
  array (
    0 => 'void',
  ),
  'ms_iostripstdoutbuffercontentheaders' => 
  array (
    0 => 'void',
  ),
  'ms_iostripstdoutbuffercontenttype' => 
  array (
    0 => 'string',
  ),
  'ms_ResetErrorList' => 
  array (
    0 => 'void',
  ),
  'ms_TokenizeMap' => 
  array (
    0 => 'array<array-key, mixed>',
    'map_file_name' => 'string',
  ),
  'msession_connect' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port' => 'string',
  ),
  'msession_count' => 
  array (
    0 => 'int',
  ),
  'msession_create' => 
  array (
    0 => 'bool',
    'session' => 'string',
    'classname=' => 'string',
    'data=' => 'string',
  ),
  'msession_destroy' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'msession_disconnect' => 
  array (
    0 => 'void',
  ),
  'msession_find' => 
  array (
    0 => 'array<array-key, mixed>',
    'name' => 'string',
    'value' => 'string',
  ),
  'msession_get' => 
  array (
    0 => 'string',
    'session' => 'string',
    'name' => 'string',
    'value' => 'string',
  ),
  'msession_get_array' => 
  array (
    0 => 'array<array-key, mixed>',
    'session' => 'string',
  ),
  'msession_get_data' => 
  array (
    0 => 'string',
    'session' => 'string',
  ),
  'msession_inc' => 
  array (
    0 => 'string',
    'session' => 'string',
    'name' => 'string',
  ),
  'msession_list' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'msession_listvar' => 
  array (
    0 => 'array<array-key, mixed>',
    'name' => 'string',
  ),
  'msession_lock' => 
  array (
    0 => 'int',
    'name' => 'string',
  ),
  'msession_plugin' => 
  array (
    0 => 'string',
    'session' => 'string',
    'value' => 'string',
    'param=' => 'string',
  ),
  'msession_randstr' => 
  array (
    0 => 'string',
    'param' => 'int',
  ),
  'msession_set' => 
  array (
    0 => 'bool',
    'session' => 'string',
    'name' => 'string',
    'value' => 'string',
  ),
  'msession_set_array' => 
  array (
    0 => 'void',
    'session' => 'string',
    'tuples' => 'array<array-key, mixed>',
  ),
  'msession_set_data' => 
  array (
    0 => 'bool',
    'session' => 'string',
    'value' => 'string',
  ),
  'msession_timeout' => 
  array (
    0 => 'int',
    'session' => 'string',
    'param=' => 'int',
  ),
  'msession_uniq' => 
  array (
    0 => 'string',
    'param' => 'int',
    'classname=' => 'string',
    'data=' => 'string',
  ),
  'msession_unlock' => 
  array (
    0 => 'int',
    'session' => 'string',
    'key' => 'int',
  ),
  'msg_get_queue' => 
  array (
    0 => 'SysvMessageQueue|false',
    'key' => 'int',
    'permissions=' => 'int',
  ),
  'msg_queue_exists' => 
  array (
    0 => 'bool',
    'key' => 'int',
  ),
  'msg_receive' => 
  array (
    0 => 'bool',
    'queue' => 'SysvMessageQueue',
    'desired_message_type' => 'int',
    '&w_received_message_type' => 'int',
    'max_message_size' => 'int',
    '&w_message' => 'mixed',
    'unserialize=' => 'bool',
    'flags=' => 'int',
    '&w_error_code=' => 'int',
  ),
  'msg_remove_queue' => 
  array (
    0 => 'bool',
    'queue' => 'SysvMessageQueue',
  ),
  'msg_send' => 
  array (
    0 => 'bool',
    'queue' => 'SysvMessageQueue',
    'message_type' => 'int',
    'message' => 'mixed',
    'serialize=' => 'bool',
    'blocking=' => 'bool',
    '&w_error_code=' => 'int',
  ),
  'msg_set_queue' => 
  array (
    0 => 'bool',
    'queue' => 'SysvMessageQueue',
    'data' => 'array<array-key, mixed>',
  ),
  'msg_stat_queue' => 
  array (
    0 => 'array<array-key, mixed>',
    'queue' => 'SysvMessageQueue',
  ),
  'msgfmt_create' => 
  array (
    0 => 'MessageFormatter|null',
    'locale' => 'string',
    'pattern' => 'string',
  ),
  'msgfmt_format' => 
  array (
    0 => 'false|string',
    'formatter' => 'MessageFormatter',
    'values' => 'array<array-key, mixed>',
  ),
  'msgfmt_format_message' => 
  array (
    0 => 'false|string',
    'locale' => 'string',
    'pattern' => 'string',
    'values' => 'array<array-key, mixed>',
  ),
  'msgfmt_get_error_code' => 
  array (
    0 => 'int',
    'formatter' => 'MessageFormatter',
  ),
  'msgfmt_get_error_message' => 
  array (
    0 => 'string',
    'formatter' => 'MessageFormatter',
  ),
  'msgfmt_get_locale' => 
  array (
    0 => 'string',
    'formatter' => 'MessageFormatter',
  ),
  'msgfmt_get_pattern' => 
  array (
    0 => 'string',
    'formatter' => 'MessageFormatter',
  ),
  'msgfmt_parse' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'formatter' => 'MessageFormatter',
    'string' => 'string',
  ),
  'msgfmt_parse_message' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'locale' => 'string',
    'pattern' => 'string',
    'message' => 'string',
  ),
  'msgfmt_set_pattern' => 
  array (
    0 => 'bool',
    'formatter' => 'MessageFormatter',
    'pattern' => 'string',
  ),
  'msql_affected_rows' => 
  array (
    0 => 'int',
    'result' => 'resource',
  ),
  'msql_close' => 
  array (
    0 => 'bool',
    'link_identifier=' => 'null|resource',
  ),
  'msql_connect' => 
  array (
    0 => 'resource',
    'hostname=' => 'string',
  ),
  'msql_create_db' => 
  array (
    0 => 'bool',
    'database_name' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'msql_data_seek' => 
  array (
    0 => 'bool',
    'result' => 'resource',
    'row_number' => 'int',
  ),
  'msql_db_query' => 
  array (
    0 => 'resource',
    'database' => 'string',
    'query' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'msql_drop_db' => 
  array (
    0 => 'bool',
    'database_name' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'msql_error' => 
  array (
    0 => 'string',
  ),
  'msql_fetch_array' => 
  array (
    0 => 'array<array-key, mixed>',
    'result' => 'resource',
    'result_type=' => 'int',
  ),
  'msql_fetch_field' => 
  array (
    0 => 'object',
    'result' => 'resource',
    'field_offset=' => 'int',
  ),
  'msql_fetch_object' => 
  array (
    0 => 'object',
    'result' => 'resource',
  ),
  'msql_fetch_row' => 
  array (
    0 => 'array<array-key, mixed>',
    'result' => 'resource',
  ),
  'msql_field_flags' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'field_offset' => 'int',
  ),
  'msql_field_len' => 
  array (
    0 => 'int',
    'result' => 'resource',
    'field_offset' => 'int',
  ),
  'msql_field_name' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'field_offset' => 'int',
  ),
  'msql_field_seek' => 
  array (
    0 => 'bool',
    'result' => 'resource',
    'field_offset' => 'int',
  ),
  'msql_field_table' => 
  array (
    0 => 'int',
    'result' => 'resource',
    'field_offset' => 'int',
  ),
  'msql_field_type' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'field_offset' => 'int',
  ),
  'msql_free_result' => 
  array (
    0 => 'bool',
    'result' => 'resource',
  ),
  'msql_list_dbs' => 
  array (
    0 => 'resource',
    'link_identifier=' => 'null|resource',
  ),
  'msql_list_fields' => 
  array (
    0 => 'resource',
    'database' => 'string',
    'tablename' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'msql_list_tables' => 
  array (
    0 => 'resource',
    'database' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'msql_num_fields' => 
  array (
    0 => 'int',
    'result' => 'resource',
  ),
  'msql_num_rows' => 
  array (
    0 => 'int',
    'query_identifier' => 'resource',
  ),
  'msql_pconnect' => 
  array (
    0 => 'resource',
    'hostname=' => 'string',
  ),
  'msql_query' => 
  array (
    0 => 'resource',
    'query' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'msql_result' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'row' => 'int',
    'field=' => 'mixed',
  ),
  'msql_select_db' => 
  array (
    0 => 'bool',
    'database_name' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'mt_getrandmax' => 
  array (
    0 => 'int<1, max>',
  ),
  'mt_rand' => 
  array (
    0 => 'int',
    'min' => 'int',
    'max' => 'int',
  ),
  'mt_rand\'1' => 
  array (
    0 => 'int',
  ),
  'mt_srand' => 
  array (
    0 => 'void',
    'seed=' => 'int|null',
    'mode=' => 'int',
  ),
  'MultipleIterator::__construct' => 
  array (
    0 => 'void',
    'flags=' => 'int',
  ),
  'MultipleIterator::attachIterator' => 
  array (
    0 => 'void',
    'iterator' => 'Iterator',
    'info=' => 'int|null|string',
  ),
  'MultipleIterator::containsIterator' => 
  array (
    0 => 'bool',
    'iterator' => 'Iterator',
  ),
  'MultipleIterator::countIterators' => 
  array (
    0 => 'int',
  ),
  'MultipleIterator::current' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'MultipleIterator::detachIterator' => 
  array (
    0 => 'void',
    'iterator' => 'Iterator',
  ),
  'MultipleIterator::getFlags' => 
  array (
    0 => 'int',
  ),
  'MultipleIterator::key' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'MultipleIterator::next' => 
  array (
    0 => 'void',
  ),
  'MultipleIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'MultipleIterator::setFlags' => 
  array (
    0 => 'void',
    'flags' => 'int',
  ),
  'MultipleIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'Mutex::create' => 
  array (
    0 => 'long',
    'lock=' => 'bool',
  ),
  'Mutex::destroy' => 
  array (
    0 => 'bool',
    'mutex' => 'long',
  ),
  'Mutex::lock' => 
  array (
    0 => 'bool',
    'mutex' => 'long',
  ),
  'Mutex::trylock' => 
  array (
    0 => 'bool',
    'mutex' => 'long',
  ),
  'Mutex::unlock' => 
  array (
    0 => 'bool',
    'mutex' => 'long',
    'destroy=' => 'bool',
  ),
  'mysql_xdevapi\\baseresult::getWarnings' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\baseresult::getWarningsCount' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\collection::add' => 
  array (
    0 => 'mysql_xdevapi\\CollectionAdd',
    'document' => 'mixed',
  ),
  'mysql_xdevapi\\collection::addOrReplaceOne' => 
  array (
    0 => 'mysql_xdevapi\\Result',
    'id' => 'string',
    'doc' => 'string',
  ),
  'mysql_xdevapi\\collection::count' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\collection::createIndex' => 
  array (
    0 => 'void',
    'index_name' => 'string',
    'index_desc_json' => 'string',
  ),
  'mysql_xdevapi\\collection::dropIndex' => 
  array (
    0 => 'bool',
    'index_name' => 'string',
  ),
  'mysql_xdevapi\\collection::existsInDatabase' => 
  array (
    0 => 'bool',
  ),
  'mysql_xdevapi\\collection::find' => 
  array (
    0 => 'mysql_xdevapi\\CollectionFind',
    'search_condition=' => 'string',
  ),
  'mysql_xdevapi\\collection::getName' => 
  array (
    0 => 'string',
  ),
  'mysql_xdevapi\\collection::getOne' => 
  array (
    0 => 'Document',
    'id' => 'string',
  ),
  'mysql_xdevapi\\collection::getSchema' => 
  array (
    0 => 'mysql_xdevapi\\schema',
  ),
  'mysql_xdevapi\\collection::getSession' => 
  array (
    0 => 'Session',
  ),
  'mysql_xdevapi\\collection::modify' => 
  array (
    0 => 'mysql_xdevapi\\CollectionModify',
    'search_condition' => 'string',
  ),
  'mysql_xdevapi\\collection::remove' => 
  array (
    0 => 'mysql_xdevapi\\CollectionRemove',
    'search_condition' => 'string',
  ),
  'mysql_xdevapi\\collection::removeOne' => 
  array (
    0 => 'mysql_xdevapi\\Result',
    'id' => 'string',
  ),
  'mysql_xdevapi\\collection::replaceOne' => 
  array (
    0 => 'mysql_xdevapi\\Result',
    'id' => 'string',
    'doc' => 'string',
  ),
  'mysql_xdevapi\\collectionadd::execute' => 
  array (
    0 => 'mysql_xdevapi\\Result',
  ),
  'mysql_xdevapi\\collectionfind::bind' => 
  array (
    0 => 'mysql_xdevapi\\CollectionFind',
    'placeholder_values' => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\collectionfind::execute' => 
  array (
    0 => 'mysql_xdevapi\\DocResult',
  ),
  'mysql_xdevapi\\collectionfind::fields' => 
  array (
    0 => 'mysql_xdevapi\\CollectionFind',
    'projection' => 'string',
  ),
  'mysql_xdevapi\\collectionfind::groupBy' => 
  array (
    0 => 'mysql_xdevapi\\CollectionFind',
    'sort_expr' => 'string',
  ),
  'mysql_xdevapi\\collectionfind::having' => 
  array (
    0 => 'mysql_xdevapi\\CollectionFind',
    'sort_expr' => 'string',
  ),
  'mysql_xdevapi\\collectionfind::limit' => 
  array (
    0 => 'mysql_xdevapi\\CollectionFind',
    'rows' => 'int',
  ),
  'mysql_xdevapi\\collectionfind::lockExclusive' => 
  array (
    0 => 'mysql_xdevapi\\CollectionFind',
    'lock_waiting_option=' => 'int',
  ),
  'mysql_xdevapi\\collectionfind::lockShared' => 
  array (
    0 => 'mysql_xdevapi\\CollectionFind',
    'lock_waiting_option=' => 'int',
  ),
  'mysql_xdevapi\\collectionfind::offset' => 
  array (
    0 => 'mysql_xdevapi\\CollectionFind',
    'position' => 'int',
  ),
  'mysql_xdevapi\\collectionfind::sort' => 
  array (
    0 => 'mysql_xdevapi\\CollectionFind',
    'sort_expr' => 'string',
  ),
  'mysql_xdevapi\\collectionmodify::arrayAppend' => 
  array (
    0 => 'mysql_xdevapi\\CollectionModify',
    'collection_field' => 'string',
    'expression_or_literal' => 'string',
  ),
  'mysql_xdevapi\\collectionmodify::arrayInsert' => 
  array (
    0 => 'mysql_xdevapi\\CollectionModify',
    'collection_field' => 'string',
    'expression_or_literal' => 'string',
  ),
  'mysql_xdevapi\\collectionmodify::bind' => 
  array (
    0 => 'mysql_xdevapi\\CollectionModify',
    'placeholder_values' => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\collectionmodify::execute' => 
  array (
    0 => 'mysql_xdevapi\\Result',
  ),
  'mysql_xdevapi\\collectionmodify::limit' => 
  array (
    0 => 'mysql_xdevapi\\CollectionModify',
    'rows' => 'int',
  ),
  'mysql_xdevapi\\collectionmodify::patch' => 
  array (
    0 => 'mysql_xdevapi\\CollectionModify',
    'document' => 'string',
  ),
  'mysql_xdevapi\\collectionmodify::replace' => 
  array (
    0 => 'mysql_xdevapi\\CollectionModify',
    'collection_field' => 'string',
    'expression_or_literal' => 'string',
  ),
  'mysql_xdevapi\\collectionmodify::set' => 
  array (
    0 => 'mysql_xdevapi\\CollectionModify',
    'collection_field' => 'string',
    'expression_or_literal' => 'string',
  ),
  'mysql_xdevapi\\collectionmodify::skip' => 
  array (
    0 => 'mysql_xdevapi\\CollectionModify',
    'position' => 'int',
  ),
  'mysql_xdevapi\\collectionmodify::sort' => 
  array (
    0 => 'mysql_xdevapi\\CollectionModify',
    'sort_expr' => 'string',
  ),
  'mysql_xdevapi\\collectionmodify::unset' => 
  array (
    0 => 'mysql_xdevapi\\CollectionModify',
    'fields' => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\collectionremove::bind' => 
  array (
    0 => 'mysql_xdevapi\\CollectionRemove',
    'placeholder_values' => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\collectionremove::execute' => 
  array (
    0 => 'mysql_xdevapi\\Result',
  ),
  'mysql_xdevapi\\collectionremove::limit' => 
  array (
    0 => 'mysql_xdevapi\\CollectionRemove',
    'rows' => 'int',
  ),
  'mysql_xdevapi\\collectionremove::sort' => 
  array (
    0 => 'mysql_xdevapi\\CollectionRemove',
    'sort_expr' => 'string',
  ),
  'mysql_xdevapi\\columnresult::getCharacterSetName' => 
  array (
    0 => 'string',
  ),
  'mysql_xdevapi\\columnresult::getCollationName' => 
  array (
    0 => 'string',
  ),
  'mysql_xdevapi\\columnresult::getColumnLabel' => 
  array (
    0 => 'string',
  ),
  'mysql_xdevapi\\columnresult::getColumnName' => 
  array (
    0 => 'string',
  ),
  'mysql_xdevapi\\columnresult::getFractionalDigits' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\columnresult::getLength' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\columnresult::getSchemaName' => 
  array (
    0 => 'string',
  ),
  'mysql_xdevapi\\columnresult::getTableLabel' => 
  array (
    0 => 'string',
  ),
  'mysql_xdevapi\\columnresult::getTableName' => 
  array (
    0 => 'string',
  ),
  'mysql_xdevapi\\columnresult::getType' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\columnresult::isNumberSigned' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\columnresult::isPadded' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\crudoperationbindable::bind' => 
  array (
    0 => 'mysql_xdevapi\\CrudOperationBindable',
    'placeholder_values' => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\crudoperationlimitable::limit' => 
  array (
    0 => 'mysql_xdevapi\\CrudOperationLimitable',
    'rows' => 'int',
  ),
  'mysql_xdevapi\\crudoperationskippable::skip' => 
  array (
    0 => 'mysql_xdevapi\\CrudOperationSkippable',
    'skip' => 'int',
  ),
  'mysql_xdevapi\\crudoperationsortable::sort' => 
  array (
    0 => 'mysql_xdevapi\\CrudOperationSortable',
    'sort_expr' => 'string',
  ),
  'mysql_xdevapi\\databaseobject::existsInDatabase' => 
  array (
    0 => 'bool',
  ),
  'mysql_xdevapi\\databaseobject::getName' => 
  array (
    0 => 'string',
  ),
  'mysql_xdevapi\\databaseobject::getSession' => 
  array (
    0 => 'mysql_xdevapi\\Session',
  ),
  'mysql_xdevapi\\docresult::fetchAll' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\docresult::fetchOne' => 
  array (
    0 => 'object',
  ),
  'mysql_xdevapi\\docresult::getWarnings' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\docresult::getWarningsCount' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\executable::execute' => 
  array (
    0 => 'mysql_xdevapi\\Result',
  ),
  'mysql_xdevapi\\getsession' => 
  array (
    0 => 'mysql_xdevapi\\Session',
    'uri' => 'string',
  ),
  'mysql_xdevapi\\result::getAutoIncrementValue' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\result::getGeneratedIds' => 
  array (
    0 => 'ArrayOfInt',
  ),
  'mysql_xdevapi\\result::getWarnings' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\result::getWarningsCount' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\rowresult::fetchAll' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\rowresult::fetchOne' => 
  array (
    0 => 'object',
  ),
  'mysql_xdevapi\\rowresult::getColumnCount' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\rowresult::getColumnNames' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\rowresult::getColumns' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\rowresult::getWarnings' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\rowresult::getWarningsCount' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\schema::createCollection' => 
  array (
    0 => 'mysql_xdevapi\\Collection',
    'name' => 'string',
  ),
  'mysql_xdevapi\\schema::dropCollection' => 
  array (
    0 => 'bool',
    'collection_name' => 'string',
  ),
  'mysql_xdevapi\\schema::existsInDatabase' => 
  array (
    0 => 'bool',
  ),
  'mysql_xdevapi\\schema::getCollection' => 
  array (
    0 => 'mysql_xdevapi\\Collection',
    'name' => 'string',
  ),
  'mysql_xdevapi\\schema::getCollectionAsTable' => 
  array (
    0 => 'mysql_xdevapi\\Table',
    'name' => 'string',
  ),
  'mysql_xdevapi\\schema::getCollections' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\schema::getName' => 
  array (
    0 => 'string',
  ),
  'mysql_xdevapi\\schema::getSession' => 
  array (
    0 => 'mysql_xdevapi\\Session',
  ),
  'mysql_xdevapi\\schema::getTable' => 
  array (
    0 => 'mysql_xdevapi\\Table',
    'name' => 'string',
  ),
  'mysql_xdevapi\\schema::getTables' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\schemaobject::getSchema' => 
  array (
    0 => 'mysql_xdevapi\\Schema',
  ),
  'mysql_xdevapi\\session::close' => 
  array (
    0 => 'bool',
  ),
  'mysql_xdevapi\\session::commit' => 
  array (
    0 => 'object',
  ),
  'mysql_xdevapi\\session::createSchema' => 
  array (
    0 => 'mysql_xdevapi\\Schema',
    'schema_name' => 'string',
  ),
  'mysql_xdevapi\\session::dropSchema' => 
  array (
    0 => 'bool',
    'schema_name' => 'string',
  ),
  'mysql_xdevapi\\session::executeSql' => 
  array (
    0 => 'object',
    'statement' => 'string',
  ),
  'mysql_xdevapi\\session::generateUUID' => 
  array (
    0 => 'string',
  ),
  'mysql_xdevapi\\session::getClientId' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\session::getSchema' => 
  array (
    0 => 'mysql_xdevapi\\Schema',
    'schema_name' => 'string',
  ),
  'mysql_xdevapi\\session::getSchemas' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\session::getServerVersion' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\session::killClient' => 
  array (
    0 => 'object',
    'client_id' => 'int',
  ),
  'mysql_xdevapi\\session::listClients' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\session::quoteName' => 
  array (
    0 => 'string',
    'name' => 'string',
  ),
  'mysql_xdevapi\\session::releaseSavepoint' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'mysql_xdevapi\\session::rollback' => 
  array (
    0 => 'void',
  ),
  'mysql_xdevapi\\session::rollbackTo' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'mysql_xdevapi\\session::setSavepoint' => 
  array (
    0 => 'string',
    'name=' => 'string',
  ),
  'mysql_xdevapi\\session::sql' => 
  array (
    0 => 'mysql_xdevapi\\SqlStatement',
    'query' => 'string',
  ),
  'mysql_xdevapi\\session::startTransaction' => 
  array (
    0 => 'void',
  ),
  'mysql_xdevapi\\sqlstatement::bind' => 
  array (
    0 => 'mysql_xdevapi\\SqlStatement',
    'param' => 'string',
  ),
  'mysql_xdevapi\\sqlstatement::execute' => 
  array (
    0 => 'mysql_xdevapi\\Result',
  ),
  'mysql_xdevapi\\sqlstatement::getNextResult' => 
  array (
    0 => 'mysql_xdevapi\\Result',
  ),
  'mysql_xdevapi\\sqlstatement::getResult' => 
  array (
    0 => 'mysql_xdevapi\\Result',
  ),
  'mysql_xdevapi\\sqlstatement::hasMoreResults' => 
  array (
    0 => 'bool',
  ),
  'mysql_xdevapi\\sqlstatementresult::fetchAll' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\sqlstatementresult::fetchOne' => 
  array (
    0 => 'object',
  ),
  'mysql_xdevapi\\sqlstatementresult::getAffectedItemsCount' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\sqlstatementresult::getColumnCount' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\sqlstatementresult::getColumnNames' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\sqlstatementresult::getColumns' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\sqlstatementresult::getGeneratedIds' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\sqlstatementresult::getLastInsertId' => 
  array (
    0 => 'string',
  ),
  'mysql_xdevapi\\sqlstatementresult::getWarnings' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\sqlstatementresult::getWarningsCount' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\sqlstatementresult::hasData' => 
  array (
    0 => 'bool',
  ),
  'mysql_xdevapi\\sqlstatementresult::nextResult' => 
  array (
    0 => 'mysql_xdevapi\\Result',
  ),
  'mysql_xdevapi\\statement::getNextResult' => 
  array (
    0 => 'mysql_xdevapi\\Result',
  ),
  'mysql_xdevapi\\statement::getResult' => 
  array (
    0 => 'mysql_xdevapi\\Result',
  ),
  'mysql_xdevapi\\statement::hasMoreResults' => 
  array (
    0 => 'bool',
  ),
  'mysql_xdevapi\\table::count' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\table::delete' => 
  array (
    0 => 'mysql_xdevapi\\TableDelete',
  ),
  'mysql_xdevapi\\table::existsInDatabase' => 
  array (
    0 => 'bool',
  ),
  'mysql_xdevapi\\table::getName' => 
  array (
    0 => 'string',
  ),
  'mysql_xdevapi\\table::getSchema' => 
  array (
    0 => 'mysql_xdevapi\\Schema',
  ),
  'mysql_xdevapi\\table::getSession' => 
  array (
    0 => 'mysql_xdevapi\\Session',
  ),
  'mysql_xdevapi\\table::insert' => 
  array (
    0 => 'mysql_xdevapi\\TableInsert',
    'columns' => 'mixed',
    '...args=' => 'mixed',
  ),
  'mysql_xdevapi\\table::isView' => 
  array (
    0 => 'bool',
  ),
  'mysql_xdevapi\\table::select' => 
  array (
    0 => 'mysql_xdevapi\\TableSelect',
    'columns' => 'mixed',
    '...args=' => 'mixed',
  ),
  'mysql_xdevapi\\table::update' => 
  array (
    0 => 'mysql_xdevapi\\TableUpdate',
  ),
  'mysql_xdevapi\\tabledelete::bind' => 
  array (
    0 => 'mysql_xdevapi\\TableDelete',
    'placeholder_values' => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\tabledelete::execute' => 
  array (
    0 => 'mysql_xdevapi\\Result',
  ),
  'mysql_xdevapi\\tabledelete::limit' => 
  array (
    0 => 'mysql_xdevapi\\TableDelete',
    'rows' => 'int',
  ),
  'mysql_xdevapi\\tabledelete::offset' => 
  array (
    0 => 'mysql_xdevapi\\TableDelete',
    'position' => 'int',
  ),
  'mysql_xdevapi\\tabledelete::orderby' => 
  array (
    0 => 'mysql_xdevapi\\TableDelete',
    'orderby_expr' => 'string',
  ),
  'mysql_xdevapi\\tabledelete::where' => 
  array (
    0 => 'mysql_xdevapi\\TableDelete',
    'where_expr' => 'string',
  ),
  'mysql_xdevapi\\tableinsert::execute' => 
  array (
    0 => 'mysql_xdevapi\\Result',
  ),
  'mysql_xdevapi\\tableinsert::values' => 
  array (
    0 => 'mysql_xdevapi\\TableInsert',
    'row_values' => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\tableselect::bind' => 
  array (
    0 => 'mysql_xdevapi\\TableSelect',
    'placeholder_values' => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\tableselect::execute' => 
  array (
    0 => 'mysql_xdevapi\\RowResult',
  ),
  'mysql_xdevapi\\tableselect::groupBy' => 
  array (
    0 => 'mysql_xdevapi\\TableSelect',
    'sort_expr' => 'mixed',
  ),
  'mysql_xdevapi\\tableselect::having' => 
  array (
    0 => 'mysql_xdevapi\\TableSelect',
    'sort_expr' => 'string',
  ),
  'mysql_xdevapi\\tableselect::limit' => 
  array (
    0 => 'mysql_xdevapi\\TableSelect',
    'rows' => 'int',
  ),
  'mysql_xdevapi\\tableselect::lockExclusive' => 
  array (
    0 => 'mysql_xdevapi\\TableSelect',
    'lock_waiting_option=' => 'int',
  ),
  'mysql_xdevapi\\tableselect::lockShared' => 
  array (
    0 => 'mysql_xdevapi\\TableSelect',
    'lock_waiting_option=' => 'int',
  ),
  'mysql_xdevapi\\tableselect::offset' => 
  array (
    0 => 'mysql_xdevapi\\TableSelect',
    'position' => 'int',
  ),
  'mysql_xdevapi\\tableselect::orderby' => 
  array (
    0 => 'mysql_xdevapi\\TableSelect',
    'sort_expr' => 'mixed',
    '...args=' => 'mixed',
  ),
  'mysql_xdevapi\\tableselect::where' => 
  array (
    0 => 'mysql_xdevapi\\TableSelect',
    'where_expr' => 'string',
  ),
  'mysql_xdevapi\\tableupdate::bind' => 
  array (
    0 => 'mysql_xdevapi\\TableUpdate',
    'placeholder_values' => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\tableupdate::execute' => 
  array (
    0 => 'mysql_xdevapi\\TableUpdate',
  ),
  'mysql_xdevapi\\tableupdate::limit' => 
  array (
    0 => 'mysql_xdevapi\\TableUpdate',
    'rows' => 'int',
  ),
  'mysql_xdevapi\\tableupdate::orderby' => 
  array (
    0 => 'mysql_xdevapi\\TableUpdate',
    'orderby_expr' => 'mixed',
    '...args=' => 'mixed',
  ),
  'mysql_xdevapi\\tableupdate::set' => 
  array (
    0 => 'mysql_xdevapi\\TableUpdate',
    'table_field' => 'string',
    'expression_or_literal' => 'string',
  ),
  'mysql_xdevapi\\tableupdate::where' => 
  array (
    0 => 'mysql_xdevapi\\TableUpdate',
    'where_expr' => 'string',
  ),
  'mysqli::__construct' => 
  array (
    0 => 'void',
    'hostname=' => 'null|string',
    'username=' => 'null|string',
    'password=' => 'null|string',
    'database=' => 'null|string',
    'port=' => 'int|null',
    'socket=' => 'null|string',
  ),
  'mysqli::autocommit' => 
  array (
    0 => 'bool',
    'enable' => 'bool',
  ),
  'mysqli::begin_transaction' => 
  array (
    0 => 'bool',
    'flags=' => 'int',
    'name=' => 'null|string',
  ),
  'mysqli::change_user' => 
  array (
    0 => 'bool',
    'username' => 'string',
    'password' => 'string',
    'database' => 'null|string',
  ),
  'mysqli::character_set_name' => 
  array (
    0 => 'string',
  ),
  'mysqli::close' => 
  array (
    0 => 'true',
  ),
  'mysqli::commit' => 
  array (
    0 => 'bool',
    'flags=' => 'int',
    'name=' => 'null|string',
  ),
  'mysqli::connect' => 
  array (
    0 => 'bool',
    'hostname=' => 'null|string',
    'username=' => 'null|string',
    'password=' => 'null|string',
    'database=' => 'null|string',
    'port=' => 'int|null',
    'socket=' => 'null|string',
  ),
  'mysqli::debug' => 
  array (
    0 => 'true',
    'options' => 'string',
  ),
  'mysqli::dump_debug_info' => 
  array (
    0 => 'bool',
  ),
  'mysqli::escape_string' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'mysqli::execute_query' => 
  array (
    0 => 'bool|mysqli_result',
    'query' => 'non-empty-string',
    'params=' => 'list<mixed>|null',
  ),
  'mysqli::get_charset' => 
  array (
    0 => 'object',
  ),
  'mysqli::get_client_info' => 
  array (
    0 => 'string',
  ),
  'mysqli::get_connection_stats' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysqli::get_warnings' => 
  array (
    0 => 'mysqli_warning',
  ),
  'mysqli::init' => 
  array (
    0 => 'false|null',
  ),
  'mysqli::kill' => 
  array (
    0 => 'bool',
    'process_id' => 'int',
  ),
  'mysqli::more_results' => 
  array (
    0 => 'bool',
  ),
  'mysqli::multi_query' => 
  array (
    0 => 'bool',
    'query' => 'string',
  ),
  'mysqli::next_result' => 
  array (
    0 => 'bool',
  ),
  'mysqli::options' => 
  array (
    0 => 'bool',
    'option' => 'int',
    'value' => 'int|string',
  ),
  'mysqli::ping' => 
  array (
    0 => 'bool',
  ),
  'mysqli::poll' => 
  array (
    0 => 'false|int',
    '&w_read' => 'array<array-key, mixed>|null',
    '&w_error' => 'array<array-key, mixed>|null',
    '&w_reject' => 'array<array-key, mixed>',
    'seconds' => 'int',
    'microseconds=' => 'int',
  ),
  'mysqli::prepare' => 
  array (
    0 => 'false|mysqli_stmt',
    'query' => 'string',
  ),
  'mysqli::query' => 
  array (
    0 => 'bool|mysqli_result',
    'query' => 'string',
    'result_mode=' => 'int',
  ),
  'mysqli::real_connect' => 
  array (
    0 => 'bool',
    'hostname=' => 'null|string',
    'username=' => 'null|string',
    'password=' => 'null|string',
    'database=' => 'null|string',
    'port=' => 'int|null',
    'socket=' => 'null|string',
    'flags=' => 'int',
  ),
  'mysqli::real_escape_string' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'mysqli::real_query' => 
  array (
    0 => 'bool',
    'query' => 'string',
  ),
  'mysqli::reap_async_query' => 
  array (
    0 => 'false|mysqli_result',
  ),
  'mysqli::refresh' => 
  array (
    0 => 'bool',
    'flags' => 'int',
  ),
  'mysqli::release_savepoint' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'mysqli::rollback' => 
  array (
    0 => 'bool',
    'flags=' => 'int',
    'name=' => 'null|string',
  ),
  'mysqli::savepoint' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'mysqli::select_db' => 
  array (
    0 => 'bool',
    'database' => 'string',
  ),
  'mysqli::set_charset' => 
  array (
    0 => 'bool',
    'charset' => 'string',
  ),
  'mysqli::set_opt' => 
  array (
    0 => 'bool',
    'option' => 'int',
    'value' => 'int|string',
  ),
  'mysqli::ssl_set' => 
  array (
    0 => 'true',
    'key' => 'null|string',
    'certificate' => 'null|string',
    'ca_certificate' => 'null|string',
    'ca_path' => 'null|string',
    'cipher_algos' => 'null|string',
  ),
  'mysqli::stat' => 
  array (
    0 => 'false|string',
  ),
  'mysqli::stmt_init' => 
  array (
    0 => 'mysqli_stmt',
  ),
  'mysqli::store_result' => 
  array (
    0 => 'false|mysqli_result',
    'mode=' => 'int',
  ),
  'mysqli::thread_safe' => 
  array (
    0 => 'bool',
  ),
  'mysqli::use_result' => 
  array (
    0 => 'false|mysqli_result',
  ),
  'mysqli_affected_rows' => 
  array (
    0 => 'int<-1, max>|numeric-string',
    'mysql' => 'mysqli',
  ),
  'mysqli_autocommit' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'enable' => 'bool',
  ),
  'mysqli_begin_transaction' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'flags=' => 'int',
    'name=' => 'null|string',
  ),
  'mysqli_change_user' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'username' => 'string',
    'password' => 'string',
    'database' => 'null|string',
  ),
  'mysqli_character_set_name' => 
  array (
    0 => 'string',
    'mysql' => 'mysqli',
  ),
  'mysqli_close' => 
  array (
    0 => 'true',
    'mysql' => 'mysqli',
  ),
  'mysqli_commit' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'flags=' => 'int',
    'name=' => 'null|string',
  ),
  'mysqli_connect' => 
  array (
    0 => 'false|mysqli',
    'hostname=' => 'null|string',
    'username=' => 'null|string',
    'password=' => 'null|string',
    'database=' => 'null|string',
    'port=' => 'int|null',
    'socket=' => 'null|string',
  ),
  'mysqli_connect_errno' => 
  array (
    0 => 'int',
  ),
  'mysqli_connect_error' => 
  array (
    0 => 'null|string',
  ),
  'mysqli_data_seek' => 
  array (
    0 => 'bool',
    'result' => 'mysqli_result',
    'offset' => 'int',
  ),
  'mysqli_debug' => 
  array (
    0 => 'true',
    'options' => 'string',
  ),
  'mysqli_disable_reads_from_master' => 
  array (
    0 => 'bool',
    'link' => 'mysqli',
  ),
  'mysqli_disable_rpl_parse' => 
  array (
    0 => 'bool',
    'link' => 'mysqli',
  ),
  'mysqli_dump_debug_info' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
  ),
  'mysqli_embedded_server_end' => 
  array (
    0 => 'void',
  ),
  'mysqli_embedded_server_start' => 
  array (
    0 => 'bool',
    'start' => 'int',
    'arguments' => 'array<array-key, mixed>',
    'groups' => 'array<array-key, mixed>',
  ),
  'mysqli_enable_reads_from_master' => 
  array (
    0 => 'bool',
    'link' => 'mysqli',
  ),
  'mysqli_enable_rpl_parse' => 
  array (
    0 => 'bool',
    'link' => 'mysqli',
  ),
  'mysqli_errno' => 
  array (
    0 => 'int',
    'mysql' => 'mysqli',
  ),
  'mysqli_error' => 
  array (
    0 => 'string',
    'mysql' => 'mysqli',
  ),
  'mysqli_error_list' => 
  array (
    0 => 'array<array-key, mixed>',
    'mysql' => 'mysqli',
  ),
  'mysqli_escape_string' => 
  array (
    0 => 'string',
    'mysql' => 'mysqli',
    'string' => 'string',
  ),
  'mysqli_execute' => 
  array (
    0 => 'bool',
    'statement' => 'mysqli_stmt',
    'params=' => 'list<mixed>|null',
  ),
  'mysqli_execute_query' => 
  array (
    0 => 'bool|mysqli_result',
    'mysql' => 'mysqli',
    'query' => 'non-empty-string',
    'params=' => 'list<mixed>|null',
  ),
  'mysqli_fetch_all' => 
  array (
    0 => 'list<array<array-key, float|int|null|string>>',
    'result' => 'mysqli_result',
    'mode=' => '3',
  ),
  'mysqli_fetch_all\'1' => 
  array (
    0 => 'list<array<string, float|int|null|string>>',
    'result' => 'mysqli_result',
    'mode=' => '1',
  ),
  'mysqli_fetch_all\'2' => 
  array (
    0 => 'list<list<float|int|null|string>>',
    'result' => 'mysqli_result',
    'mode=' => '2',
  ),
  'mysqli_fetch_array' => 
  array (
    0 => 'array<array-key, float|int|null|string>|false|null',
    'result' => 'mysqli_result',
    'mode=' => '3',
  ),
  'mysqli_fetch_array\'1' => 
  array (
    0 => 'array<string, float|int|null|string>|false|null',
    'result' => 'mysqli_result',
    'mode=' => '1',
  ),
  'mysqli_fetch_array\'2' => 
  array (
    0 => 'false|list<float|int|null|string>|null',
    'result' => 'mysqli_result',
    'mode=' => '2',
  ),
  'mysqli_fetch_assoc' => 
  array (
    0 => 'array<string, float|int|null|string>|false|null',
    'result' => 'mysqli_result',
  ),
  'mysqli_fetch_column' => 
  array (
    0 => 'false|float|int|null|string',
    'result' => 'mysqli_result',
    'column=' => 'int',
  ),
  'mysqli_fetch_field' => 
  array (
    0 => 'false|object{name:string, orgname:string, table:string, orgtable:string, max_length:0, length:int, charsetnr:int, flags:int, type:int, decimals:int, db:string, def:\'\', catalog:\'def\'}',
    'result' => 'mysqli_result',
  ),
  'mysqli_fetch_field_direct' => 
  array (
    0 => 'false|object{name:string, orgname:string, table:string, orgtable:string, max_length:0, length:int, charsetnr:int, flags:int, type:int, decimals:int, db:string, def:\'\', catalog:\'def\'}',
    'result' => 'mysqli_result',
    'index' => 'int',
  ),
  'mysqli_fetch_fields' => 
  array (
    0 => 'list<object{name:string, orgname:string, table:string, orgtable:string, max_length:0, length:int, charsetnr:int, flags:int, type:int, decimals:int, db:string, def:\'\', catalog:\'def\'}>',
    'result' => 'mysqli_result',
  ),
  'mysqli_fetch_lengths' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'result' => 'mysqli_result',
  ),
  'mysqli_fetch_object' => 
  array (
    0 => 'false|null|object',
    'result' => 'mysqli_result',
    'class=' => 'string',
    'constructor_args=' => 'array<array-key, mixed>',
  ),
  'mysqli_fetch_row' => 
  array (
    0 => 'false|list<float|int|null|string>|null',
    'result' => 'mysqli_result',
  ),
  'mysqli_field_count' => 
  array (
    0 => 'int',
    'mysql' => 'mysqli',
  ),
  'mysqli_field_seek' => 
  array (
    0 => 'true',
    'result' => 'mysqli_result',
    'index' => 'int',
  ),
  'mysqli_field_tell' => 
  array (
    0 => 'int',
    'result' => 'mysqli_result',
  ),
  'mysqli_free_result' => 
  array (
    0 => 'void',
    'result' => 'mysqli_result',
  ),
  'mysqli_get_cache_stats' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'mysqli_get_charset' => 
  array (
    0 => 'null|object',
    'mysql' => 'mysqli',
  ),
  'mysqli_get_client_info' => 
  array (
    0 => 'string',
    'mysql=' => 'mysqli|null',
  ),
  'mysqli_get_client_stats' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysqli_get_client_version' => 
  array (
    0 => 'int',
  ),
  'mysqli_get_connection_stats' => 
  array (
    0 => 'array<array-key, mixed>',
    'mysql' => 'mysqli',
  ),
  'mysqli_get_host_info' => 
  array (
    0 => 'string',
    'mysql' => 'mysqli',
  ),
  'mysqli_get_links_stats' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysqli_get_proto_info' => 
  array (
    0 => 'int',
    'mysql' => 'mysqli',
  ),
  'mysqli_get_server_info' => 
  array (
    0 => 'string',
    'mysql' => 'mysqli',
  ),
  'mysqli_get_server_version' => 
  array (
    0 => 'int',
    'mysql' => 'mysqli',
  ),
  'mysqli_get_warnings' => 
  array (
    0 => 'mysqli_warning',
    'mysql' => 'mysqli',
  ),
  'mysqli_info' => 
  array (
    0 => 'null|string',
    'mysql' => 'mysqli',
  ),
  'mysqli_init' => 
  array (
    0 => 'false|mysqli',
  ),
  'mysqli_insert_id' => 
  array (
    0 => 'int|string',
    'mysql' => 'mysqli',
  ),
  'mysqli_kill' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'process_id' => 'int',
  ),
  'mysqli_link_construct' => 
  array (
    0 => 'object',
  ),
  'mysqli_master_query' => 
  array (
    0 => 'bool',
    'link' => 'mysqli',
    'query' => 'string',
  ),
  'mysqli_more_results' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
  ),
  'mysqli_multi_query' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'query' => 'string',
  ),
  'mysqli_next_result' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
  ),
  'mysqli_num_fields' => 
  array (
    0 => 'int',
    'result' => 'mysqli_result',
  ),
  'mysqli_num_rows' => 
  array (
    0 => 'int<0, max>|numeric-string',
    'result' => 'mysqli_result',
  ),
  'mysqli_options' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'option' => 'int',
    'value' => 'int|string',
  ),
  'mysqli_ping' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
  ),
  'mysqli_poll' => 
  array (
    0 => 'false|int',
    '&w_read' => 'array<array-key, mixed>|null',
    '&w_error' => 'array<array-key, mixed>|null',
    '&w_reject' => 'array<array-key, mixed>',
    'seconds' => 'int',
    'microseconds=' => 'int',
  ),
  'mysqli_prepare' => 
  array (
    0 => 'false|mysqli_stmt',
    'mysql' => 'mysqli',
    'query' => 'string',
  ),
  'mysqli_query' => 
  array (
    0 => 'bool|mysqli_result',
    'mysql' => 'mysqli',
    'query' => 'string',
    'result_mode=' => 'int',
  ),
  'mysqli_real_connect' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'hostname=' => 'null|string',
    'username=' => 'null|string',
    'password=' => 'null|string',
    'database=' => 'null|string',
    'port=' => 'int|null',
    'socket=' => 'null|string',
    'flags=' => 'int',
  ),
  'mysqli_real_escape_string' => 
  array (
    0 => 'string',
    'mysql' => 'mysqli',
    'string' => 'string',
  ),
  'mysqli_real_query' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'query' => 'string',
  ),
  'mysqli_reap_async_query' => 
  array (
    0 => 'false|mysqli_result',
    'mysql' => 'mysqli',
  ),
  'mysqli_refresh' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'flags' => 'int',
  ),
  'mysqli_release_savepoint' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'name' => 'string',
  ),
  'mysqli_report' => 
  array (
    0 => 'bool',
    'flags' => 'int',
  ),
  'mysqli_result::__construct' => 
  array (
    0 => 'void',
    'mysql' => 'mysqli',
    'result_mode=' => 'int',
  ),
  'mysqli_result::close' => 
  array (
    0 => 'void',
  ),
  'mysqli_result::data_seek' => 
  array (
    0 => 'bool',
    'offset' => 'int',
  ),
  'mysqli_result::fetch_all' => 
  array (
    0 => 'list<array<array-key, float|int|null|string>>',
    'mode=' => '3',
  ),
  'mysqli_result::fetch_all\'1' => 
  array (
    0 => 'list<array<string, float|int|null|string>>',
    'mode=' => '1',
  ),
  'mysqli_result::fetch_all\'2' => 
  array (
    0 => 'list<list<float|int|null|string>>',
    'mode=' => '2',
  ),
  'mysqli_result::fetch_array' => 
  array (
    0 => 'array<array-key, float|int|null|string>|false|null',
    'mode=' => '3',
  ),
  'mysqli_result::fetch_array\'1' => 
  array (
    0 => 'array<string, float|int|null|string>|false|null',
    'mode=' => '1',
  ),
  'mysqli_result::fetch_array\'2' => 
  array (
    0 => 'false|list<float|int|null|string>|null',
    'mode=' => '2',
  ),
  'mysqli_result::fetch_assoc' => 
  array (
    0 => 'array<string, float|int|null|string>|false|null',
  ),
  'mysqli_result::fetch_column' => 
  array (
    0 => 'false|float|int|null|string',
    'column=' => 'int',
  ),
  'mysqli_result::fetch_field' => 
  array (
    0 => 'false|object{name:string, orgname:string, table:string, orgtable:string, max_length:0, length:int, charsetnr:int, flags:int, type:int, decimals:int, db:string, def:\'\', catalog:\'def\'}',
  ),
  'mysqli_result::fetch_field_direct' => 
  array (
    0 => 'false|object{name:string, orgname:string, table:string, orgtable:string, max_length:0, length:int, charsetnr:int, flags:int, type:int, decimals:int, db:string, def:\'\', catalog:\'def\'}',
    'index' => 'int',
  ),
  'mysqli_result::fetch_fields' => 
  array (
    0 => 'list<object{name:string, orgname:string, table:string, orgtable:string, max_length:0, length:int, charsetnr:int, flags:int, type:int, decimals:int, db:string, def:\'\', catalog:\'def\'}>',
  ),
  'mysqli_result::fetch_object' => 
  array (
    0 => 'false|null|object',
    'class=' => 'string',
    'constructor_args=' => 'array<array-key, mixed>',
  ),
  'mysqli_result::fetch_row' => 
  array (
    0 => 'false|list<float|int|null|string>|null',
  ),
  'mysqli_result::field_seek' => 
  array (
    0 => 'true',
    'index' => 'int',
  ),
  'mysqli_result::free' => 
  array (
    0 => 'void',
  ),
  'mysqli_result::free_result' => 
  array (
    0 => 'void',
  ),
  'mysqli_rollback' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'flags=' => 'int',
    'name=' => 'null|string',
  ),
  'mysqli_rpl_parse_enabled' => 
  array (
    0 => 'int',
    'link' => 'mysqli',
  ),
  'mysqli_rpl_probe' => 
  array (
    0 => 'bool',
    'link' => 'mysqli',
  ),
  'mysqli_rpl_query_type' => 
  array (
    0 => 'int',
    'link' => 'mysqli',
    'query' => 'string',
  ),
  'mysqli_savepoint' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'name' => 'string',
  ),
  'mysqli_savepoint_libmysql' => 
  array (
    0 => 'bool',
  ),
  'mysqli_select_db' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'database' => 'string',
  ),
  'mysqli_send_query' => 
  array (
    0 => 'bool',
    'link' => 'mysqli',
    'query' => 'string',
  ),
  'mysqli_set_charset' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'charset' => 'string',
  ),
  'mysqli_set_local_infile_default' => 
  array (
    0 => 'void',
    'link' => 'mysqli',
  ),
  'mysqli_set_local_infile_handler' => 
  array (
    0 => 'bool',
    'link' => 'mysqli',
    'read_func' => 'callable',
  ),
  'mysqli_set_opt' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'option' => 'int',
    'value' => 'int|string',
  ),
  'mysqli_slave_query' => 
  array (
    0 => 'bool',
    'link' => 'mysqli',
    'query' => 'string',
  ),
  'mysqli_sqlstate' => 
  array (
    0 => 'string',
    'mysql' => 'mysqli',
  ),
  'mysqli_ssl_set' => 
  array (
    0 => 'true',
    'mysql' => 'mysqli',
    'key' => 'null|string',
    'certificate' => 'null|string',
    'ca_certificate' => 'null|string',
    'ca_path' => 'null|string',
    'cipher_algos' => 'null|string',
  ),
  'mysqli_stat' => 
  array (
    0 => 'false|string',
    'mysql' => 'mysqli',
  ),
  'mysqli_stmt::__construct' => 
  array (
    0 => 'void',
    'mysql' => 'mysqli',
    'query=' => 'null|string',
  ),
  'mysqli_stmt::attr_get' => 
  array (
    0 => 'int',
    'attribute' => 'int',
  ),
  'mysqli_stmt::attr_set' => 
  array (
    0 => 'bool',
    'attribute' => 'int',
    'value' => 'int',
  ),
  'mysqli_stmt::bind_param' => 
  array (
    0 => 'bool',
    'types' => 'string',
    '&var' => 'mixed',
    '&...vars=' => 'mixed',
  ),
  'mysqli_stmt::bind_result' => 
  array (
    0 => 'bool',
    '&w_var1' => 'mixed',
    '&...w_vars=' => 'mixed',
  ),
  'mysqli_stmt::close' => 
  array (
    0 => 'true',
  ),
  'mysqli_stmt::data_seek' => 
  array (
    0 => 'void',
    'offset' => 'int',
  ),
  'mysqli_stmt::execute' => 
  array (
    0 => 'bool',
    'params=' => 'list<mixed>|null',
  ),
  'mysqli_stmt::fetch' => 
  array (
    0 => 'bool|null',
  ),
  'mysqli_stmt::free_result' => 
  array (
    0 => 'void',
  ),
  'mysqli_stmt::get_result' => 
  array (
    0 => 'false|mysqli_result',
  ),
  'mysqli_stmt::get_warnings' => 
  array (
    0 => 'object',
  ),
  'mysqli_stmt::more_results' => 
  array (
    0 => 'bool',
  ),
  'mysqli_stmt::next_result' => 
  array (
    0 => 'bool',
  ),
  'mysqli_stmt::num_rows' => 
  array (
    0 => 'int<0, max>|numeric-string',
  ),
  'mysqli_stmt::prepare' => 
  array (
    0 => 'bool',
    'query' => 'string',
  ),
  'mysqli_stmt::reset' => 
  array (
    0 => 'bool',
  ),
  'mysqli_stmt::result_metadata' => 
  array (
    0 => 'false|mysqli_result',
  ),
  'mysqli_stmt::send_long_data' => 
  array (
    0 => 'bool',
    'param_num' => 'int',
    'data' => 'string',
  ),
  'mysqli_stmt::store_result' => 
  array (
    0 => 'bool',
  ),
  'mysqli_stmt_affected_rows' => 
  array (
    0 => 'int<-1, max>|numeric-string',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_attr_get' => 
  array (
    0 => 'int',
    'statement' => 'mysqli_stmt',
    'attribute' => 'int',
  ),
  'mysqli_stmt_attr_set' => 
  array (
    0 => 'bool',
    'statement' => 'mysqli_stmt',
    'attribute' => 'int',
    'value' => 'int',
  ),
  'mysqli_stmt_bind_param' => 
  array (
    0 => 'bool',
    'statement' => 'mysqli_stmt',
    'types' => 'string',
    '&var' => 'mixed',
    '&...vars=' => 'mixed',
  ),
  'mysqli_stmt_bind_result' => 
  array (
    0 => 'bool',
    'statement' => 'mysqli_stmt',
    '&w_var1' => 'mixed',
    '&...w_vars=' => 'mixed',
  ),
  'mysqli_stmt_close' => 
  array (
    0 => 'true',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_data_seek' => 
  array (
    0 => 'void',
    'statement' => 'mysqli_stmt',
    'offset' => 'int',
  ),
  'mysqli_stmt_errno' => 
  array (
    0 => 'int',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_error' => 
  array (
    0 => 'string',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_error_list' => 
  array (
    0 => 'array<array-key, mixed>',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_execute' => 
  array (
    0 => 'bool',
    'statement' => 'mysqli_stmt',
    'params=' => 'list<mixed>|null',
  ),
  'mysqli_stmt_fetch' => 
  array (
    0 => 'bool|null',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_field_count' => 
  array (
    0 => 'int',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_free_result' => 
  array (
    0 => 'void',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_get_result' => 
  array (
    0 => 'false|mysqli_result',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_get_warnings' => 
  array (
    0 => 'object',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_init' => 
  array (
    0 => 'mysqli_stmt',
    'mysql' => 'mysqli',
  ),
  'mysqli_stmt_insert_id' => 
  array (
    0 => 'mixed',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_more_results' => 
  array (
    0 => 'bool',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_next_result' => 
  array (
    0 => 'bool',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_num_rows' => 
  array (
    0 => 'int',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_param_count' => 
  array (
    0 => 'int',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_prepare' => 
  array (
    0 => 'bool',
    'statement' => 'mysqli_stmt',
    'query' => 'string',
  ),
  'mysqli_stmt_reset' => 
  array (
    0 => 'bool',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_result_metadata' => 
  array (
    0 => 'false|mysqli_result',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_send_long_data' => 
  array (
    0 => 'bool',
    'statement' => 'mysqli_stmt',
    'param_num' => 'int',
    'data' => 'string',
  ),
  'mysqli_stmt_sqlstate' => 
  array (
    0 => 'string',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_store_result' => 
  array (
    0 => 'bool',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_store_result' => 
  array (
    0 => 'false|mysqli_result',
    'mysql' => 'mysqli',
    'mode=' => 'int',
  ),
  'mysqli_thread_id' => 
  array (
    0 => 'int',
    'mysql' => 'mysqli',
  ),
  'mysqli_thread_safe' => 
  array (
    0 => 'bool',
  ),
  'mysqli_use_result' => 
  array (
    0 => 'false|mysqli_result',
    'mysql' => 'mysqli',
  ),
  'mysqli_warning::__construct' => 
  array (
    0 => 'void',
  ),
  'mysqli_warning::next' => 
  array (
    0 => 'bool',
  ),
  'mysqli_warning_count' => 
  array (
    0 => 'int',
    'mysql' => 'mysqli',
  ),
  'mysqlnd_memcache_get_config' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'mixed',
  ),
  'mysqlnd_memcache_set' => 
  array (
    0 => 'bool',
    'mysql_connection' => 'mixed',
    'memcache_connection=' => 'Memcached',
    'pattern=' => 'string',
    'callback=' => 'callable',
  ),
  'mysqlnd_ms_dump_servers' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'mixed',
  ),
  'mysqlnd_ms_fabric_select_global' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'mixed',
    'table_name' => 'mixed',
  ),
  'mysqlnd_ms_fabric_select_shard' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'mixed',
    'table_name' => 'mixed',
    'shard_key' => 'mixed',
  ),
  'mysqlnd_ms_get_last_gtid' => 
  array (
    0 => 'string',
    'connection' => 'mixed',
  ),
  'mysqlnd_ms_get_last_used_connection' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'mixed',
  ),
  'mysqlnd_ms_get_stats' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysqlnd_ms_match_wild' => 
  array (
    0 => 'bool',
    'table_name' => 'string',
    'wildcard' => 'string',
  ),
  'mysqlnd_ms_query_is_select' => 
  array (
    0 => 'int',
    'query' => 'string',
  ),
  'mysqlnd_ms_set_qos' => 
  array (
    0 => 'bool',
    'connection' => 'mixed',
    'service_level' => 'int',
    'service_level_option=' => 'int',
    'option_value=' => 'mixed',
  ),
  'mysqlnd_ms_set_user_pick_server' => 
  array (
    0 => 'bool',
    'function' => 'string',
  ),
  'mysqlnd_ms_xa_begin' => 
  array (
    0 => 'int',
    'connection' => 'mixed',
    'gtrid' => 'string',
    'timeout=' => 'int',
  ),
  'mysqlnd_ms_xa_commit' => 
  array (
    0 => 'int',
    'connection' => 'mixed',
    'gtrid' => 'string',
  ),
  'mysqlnd_ms_xa_gc' => 
  array (
    0 => 'int',
    'connection' => 'mixed',
    'gtrid=' => 'string',
    'ignore_max_retries=' => 'bool',
  ),
  'mysqlnd_ms_xa_rollback' => 
  array (
    0 => 'int',
    'connection' => 'mixed',
    'gtrid' => 'string',
  ),
  'mysqlnd_qc_change_handler' => 
  array (
    0 => 'bool',
    'handler' => 'mixed',
  ),
  'mysqlnd_qc_clear_cache' => 
  array (
    0 => 'bool',
  ),
  'mysqlnd_qc_get_available_handlers' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysqlnd_qc_get_cache_info' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysqlnd_qc_get_core_stats' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysqlnd_qc_get_handler' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysqlnd_qc_get_normalized_query_trace_log' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysqlnd_qc_get_query_trace_log' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysqlnd_qc_set_cache_condition' => 
  array (
    0 => 'bool',
    'condition_type' => 'int',
    'condition' => 'mixed',
    'condition_option' => 'mixed',
  ),
  'mysqlnd_qc_set_is_select' => 
  array (
    0 => 'mixed',
    'callback' => 'string',
  ),
  'mysqlnd_qc_set_storage_handler' => 
  array (
    0 => 'bool',
    'handler' => 'string',
  ),
  'mysqlnd_qc_set_user_handlers' => 
  array (
    0 => 'bool',
    'get_hash' => 'string',
    'find_query_in_cache' => 'string',
    'return_to_cache' => 'string',
    'add_query_to_cache_if_not_exists' => 'string',
    'query_is_select' => 'string',
    'update_query_run_time_stats' => 'string',
    'get_stats' => 'string',
    'clear_cache' => 'string',
  ),
  'mysqlnd_uh_convert_to_mysqlnd' => 
  array (
    0 => 'resource',
    '&rw_mysql_connection' => 'mysqli',
  ),
  'mysqlnd_uh_set_connection_proxy' => 
  array (
    0 => 'bool',
    '&rw_connection_proxy' => 'MysqlndUhConnection',
    '&rw_mysqli_connection=' => 'mysqli',
  ),
  'mysqlnd_uh_set_statement_proxy' => 
  array (
    0 => 'bool',
    '&rw_statement_proxy' => 'MysqlndUhStatement',
  ),
  'MysqlndUhConnection::__construct' => 
  array (
    0 => 'void',
  ),
  'MysqlndUhConnection::changeUser' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
    'user' => 'string',
    'password' => 'string',
    'database' => 'string',
    'silent' => 'bool',
    'passwd_len' => 'int',
  ),
  'MysqlndUhConnection::charsetName' => 
  array (
    0 => 'string',
    'connection' => 'mysqlnd_connection',
  ),
  'MysqlndUhConnection::close' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
    'close_type' => 'int',
  ),
  'MysqlndUhConnection::connect' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
    'host' => 'string',
    'use' => 'string',
    'password' => 'string',
    'database' => 'string',
    'port' => 'int',
    'socket' => 'string',
    'mysql_flags' => 'int',
  ),
  'MysqlndUhConnection::endPSession' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
  ),
  'MysqlndUhConnection::escapeString' => 
  array (
    0 => 'string',
    'connection' => 'mysqlnd_connection',
    'escape_string' => 'string',
  ),
  'MysqlndUhConnection::getAffectedRows' => 
  array (
    0 => 'int',
    'connection' => 'mysqlnd_connection',
  ),
  'MysqlndUhConnection::getErrorNumber' => 
  array (
    0 => 'int',
    'connection' => 'mysqlnd_connection',
  ),
  'MysqlndUhConnection::getErrorString' => 
  array (
    0 => 'string',
    'connection' => 'mysqlnd_connection',
  ),
  'MysqlndUhConnection::getFieldCount' => 
  array (
    0 => 'int',
    'connection' => 'mysqlnd_connection',
  ),
  'MysqlndUhConnection::getHostInformation' => 
  array (
    0 => 'string',
    'connection' => 'mysqlnd_connection',
  ),
  'MysqlndUhConnection::getLastInsertId' => 
  array (
    0 => 'int',
    'connection' => 'mysqlnd_connection',
  ),
  'MysqlndUhConnection::getLastMessage' => 
  array (
    0 => 'void',
    'connection' => 'mysqlnd_connection',
  ),
  'MysqlndUhConnection::getProtocolInformation' => 
  array (
    0 => 'string',
    'connection' => 'mysqlnd_connection',
  ),
  'MysqlndUhConnection::getServerInformation' => 
  array (
    0 => 'string',
    'connection' => 'mysqlnd_connection',
  ),
  'MysqlndUhConnection::getServerStatistics' => 
  array (
    0 => 'string',
    'connection' => 'mysqlnd_connection',
  ),
  'MysqlndUhConnection::getServerVersion' => 
  array (
    0 => 'int',
    'connection' => 'mysqlnd_connection',
  ),
  'MysqlndUhConnection::getSqlstate' => 
  array (
    0 => 'string',
    'connection' => 'mysqlnd_connection',
  ),
  'MysqlndUhConnection::getStatistics' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'mysqlnd_connection',
  ),
  'MysqlndUhConnection::getThreadId' => 
  array (
    0 => 'int',
    'connection' => 'mysqlnd_connection',
  ),
  'MysqlndUhConnection::getWarningCount' => 
  array (
    0 => 'int',
    'connection' => 'mysqlnd_connection',
  ),
  'MysqlndUhConnection::init' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
  ),
  'MysqlndUhConnection::killConnection' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
    'pid' => 'int',
  ),
  'MysqlndUhConnection::listFields' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'mysqlnd_connection',
    'table' => 'string',
    'achtung_wild' => 'string',
  ),
  'MysqlndUhConnection::listMethod' => 
  array (
    0 => 'void',
    'connection' => 'mysqlnd_connection',
    'query' => 'string',
    'achtung_wild' => 'string',
    'par1' => 'string',
  ),
  'MysqlndUhConnection::moreResults' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
  ),
  'MysqlndUhConnection::nextResult' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
  ),
  'MysqlndUhConnection::ping' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
  ),
  'MysqlndUhConnection::query' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
    'query' => 'string',
  ),
  'MysqlndUhConnection::queryReadResultsetHeader' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
    'mysqlnd_stmt' => 'mysqlnd_statement',
  ),
  'MysqlndUhConnection::reapQuery' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
  ),
  'MysqlndUhConnection::refreshServer' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
    'options' => 'int',
  ),
  'MysqlndUhConnection::restartPSession' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
  ),
  'MysqlndUhConnection::selectDb' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
    'database' => 'string',
  ),
  'MysqlndUhConnection::sendClose' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
  ),
  'MysqlndUhConnection::sendQuery' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
    'query' => 'string',
  ),
  'MysqlndUhConnection::serverDumpDebugInformation' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
  ),
  'MysqlndUhConnection::setAutocommit' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
    'mode' => 'int',
  ),
  'MysqlndUhConnection::setCharset' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
    'charset' => 'string',
  ),
  'MysqlndUhConnection::setClientOption' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
    'option' => 'int',
    'value' => 'int',
  ),
  'MysqlndUhConnection::setServerOption' => 
  array (
    0 => 'void',
    'connection' => 'mysqlnd_connection',
    'option' => 'int',
  ),
  'MysqlndUhConnection::shutdownServer' => 
  array (
    0 => 'void',
    'MYSQLND_UH_RES_MYSQLND_NAME' => 'string',
    'level' => 'string',
  ),
  'MysqlndUhConnection::simpleCommand' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
    'command' => 'int',
    'arg' => 'string',
    'ok_packet' => 'int',
    'silent' => 'bool',
    'ignore_upsert_status' => 'bool',
  ),
  'MysqlndUhConnection::simpleCommandHandleResponse' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
    'ok_packet' => 'int',
    'silent' => 'bool',
    'command' => 'int',
    'ignore_upsert_status' => 'bool',
  ),
  'MysqlndUhConnection::sslSet' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
    'key' => 'string',
    'cert' => 'string',
    'ca' => 'string',
    'capath' => 'string',
    'cipher' => 'string',
  ),
  'MysqlndUhConnection::stmtInit' => 
  array (
    0 => 'resource',
    'connection' => 'mysqlnd_connection',
  ),
  'MysqlndUhConnection::storeResult' => 
  array (
    0 => 'resource',
    'connection' => 'mysqlnd_connection',
  ),
  'MysqlndUhConnection::txCommit' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
  ),
  'MysqlndUhConnection::txRollback' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
  ),
  'MysqlndUhConnection::useResult' => 
  array (
    0 => 'resource',
    'connection' => 'mysqlnd_connection',
  ),
  'MysqlndUhPreparedStatement::__construct' => 
  array (
    0 => 'void',
  ),
  'MysqlndUhPreparedStatement::execute' => 
  array (
    0 => 'bool',
    'statement' => 'mysqlnd_prepared_statement',
  ),
  'MysqlndUhPreparedStatement::prepare' => 
  array (
    0 => 'bool',
    'statement' => 'mysqlnd_prepared_statement',
    'query' => 'string',
  ),
  'natcasesort' => 
  array (
    0 => 'true',
    '&rw_array' => 'array<array-key, mixed>',
  ),
  'natsort' => 
  array (
    0 => 'true',
    '&rw_array' => 'array<array-key, mixed>',
  ),
  'net_get_interfaces' => 
  array (
    0 => 'array<string, array<string, mixed>>|false',
  ),
  'newrelic_add_custom_parameter' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'scalar',
  ),
  'newrelic_add_custom_tracer' => 
  array (
    0 => 'bool',
    'function_name' => 'string',
  ),
  'newrelic_background_job' => 
  array (
    0 => 'void',
    'flag=' => 'bool',
  ),
  'newrelic_capture_params' => 
  array (
    0 => 'void',
    'enable=' => 'bool',
  ),
  'newrelic_custom_metric' => 
  array (
    0 => 'bool',
    'metric_name' => 'string',
    'value' => 'float',
  ),
  'newrelic_disable_autorum' => 
  array (
    0 => 'true',
  ),
  'newrelic_end_of_transaction' => 
  array (
    0 => 'void',
  ),
  'newrelic_end_transaction' => 
  array (
    0 => 'bool',
    'ignore=' => 'bool',
  ),
  'newrelic_get_browser_timing_footer' => 
  array (
    0 => 'string',
    'include_tags=' => 'bool',
  ),
  'newrelic_get_browser_timing_header' => 
  array (
    0 => 'string',
    'include_tags=' => 'bool',
  ),
  'newrelic_ignore_apdex' => 
  array (
    0 => 'void',
  ),
  'newrelic_ignore_transaction' => 
  array (
    0 => 'void',
  ),
  'newrelic_name_transaction' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'newrelic_notice_error' => 
  array (
    0 => 'void',
    'message' => 'string',
    'exception=' => 'Exception|Throwable',
  ),
  'newrelic_notice_error\'1' => 
  array (
    0 => 'void',
    'unused_1' => 'string',
    'message' => 'string',
    'unused_2' => 'string',
    'unused_3' => 'int',
    'unused_4=' => 'mixed',
  ),
  'newrelic_record_custom_event' => 
  array (
    0 => 'void',
    'name' => 'string',
    'attributes' => 'array<array-key, mixed>',
  ),
  'newrelic_record_datastore_segment' => 
  array (
    0 => 'mixed',
    'func' => 'callable',
    'parameters' => 'array<array-key, mixed>',
  ),
  'newrelic_set_appname' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'license=' => 'string',
    'xmit=' => 'bool',
  ),
  'newrelic_set_user_attributes' => 
  array (
    0 => 'bool',
    'user' => 'string',
    'account' => 'string',
    'product' => 'string',
  ),
  'newrelic_start_transaction' => 
  array (
    0 => 'bool',
    'appname' => 'string',
    'license=' => 'string',
  ),
  'next' => 
  array (
    0 => 'mixed',
    '&r_array' => 'array<array-key, mixed>',
  ),
  'ngettext' => 
  array (
    0 => 'string',
    'singular' => 'string',
    'plural' => 'string',
    'count' => 'int',
  ),
  'nl2br' => 
  array (
    0 => 'string',
    'string' => 'string',
    'use_xhtml=' => 'bool',
  ),
  'nl_langinfo' => 
  array (
    0 => 'false|string',
    'item' => 'int',
  ),
  'NoRewindIterator::__construct' => 
  array (
    0 => 'void',
    'iterator' => 'Iterator',
  ),
  'NoRewindIterator::current' => 
  array (
    0 => 'mixed',
  ),
  'NoRewindIterator::getInnerIterator' => 
  array (
    0 => 'Iterator',
  ),
  'NoRewindIterator::key' => 
  array (
    0 => 'mixed',
  ),
  'NoRewindIterator::next' => 
  array (
    0 => 'void',
  ),
  'NoRewindIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'NoRewindIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'Normalizer::getRawDecomposition' => 
  array (
    0 => 'null|string',
    'string' => 'string',
    'form=' => 'int',
  ),
  'Normalizer::isNormalized' => 
  array (
    0 => 'bool',
    'string' => 'string',
    'form=' => 'int',
  ),
  'Normalizer::normalize' => 
  array (
    0 => 'false|string',
    'string' => 'string',
    'form=' => 'int',
  ),
  'normalizer_get_raw_decomposition' => 
  array (
    0 => 'null|string',
    'string' => 'string',
    'form=' => 'int',
  ),
  'normalizer_is_normalized' => 
  array (
    0 => 'bool',
    'string' => 'string',
    'form=' => 'int',
  ),
  'normalizer_normalize' => 
  array (
    0 => 'false|string',
    'string' => 'string',
    'form=' => 'int',
  ),
  'notes_body' => 
  array (
    0 => 'array<array-key, mixed>',
    'server' => 'string',
    'mailbox' => 'string',
    'msg_number' => 'int',
  ),
  'notes_copy_db' => 
  array (
    0 => 'bool',
    'from_database_name' => 'string',
    'to_database_name' => 'string',
  ),
  'notes_create_db' => 
  array (
    0 => 'bool',
    'database_name' => 'string',
  ),
  'notes_create_note' => 
  array (
    0 => 'bool',
    'database_name' => 'string',
    'form_name' => 'string',
  ),
  'notes_drop_db' => 
  array (
    0 => 'bool',
    'database_name' => 'string',
  ),
  'notes_find_note' => 
  array (
    0 => 'int',
    'database_name' => 'string',
    'name' => 'string',
    'type=' => 'string',
  ),
  'notes_header_info' => 
  array (
    0 => 'object',
    'server' => 'string',
    'mailbox' => 'string',
    'msg_number' => 'int',
  ),
  'notes_list_msgs' => 
  array (
    0 => 'bool',
    'db' => 'string',
  ),
  'notes_mark_read' => 
  array (
    0 => 'bool',
    'database_name' => 'string',
    'user_name' => 'string',
    'note_id' => 'string',
  ),
  'notes_mark_unread' => 
  array (
    0 => 'bool',
    'database_name' => 'string',
    'user_name' => 'string',
    'note_id' => 'string',
  ),
  'notes_nav_create' => 
  array (
    0 => 'bool',
    'database_name' => 'string',
    'name' => 'string',
  ),
  'notes_search' => 
  array (
    0 => 'array<array-key, mixed>',
    'database_name' => 'string',
    'keywords' => 'string',
  ),
  'notes_unread' => 
  array (
    0 => 'array<array-key, mixed>',
    'database_name' => 'string',
    'user_name' => 'string',
  ),
  'notes_version' => 
  array (
    0 => 'float',
    'database_name' => 'string',
  ),
  'nsapi_request_headers' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'nsapi_response_headers' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'nsapi_virtual' => 
  array (
    0 => 'bool',
    'uri' => 'string',
  ),
  'nthmac' => 
  array (
    0 => 'string',
    'clent' => 'string',
    'data' => 'string',
  ),
  'number_format' => 
  array (
    0 => 'string',
    'num' => 'float',
    'decimals=' => 'int',
    'decimal_separator=' => 'null|string',
    'thousands_separator=' => 'null|string',
  ),
  'NumberFormatter::__construct' => 
  array (
    0 => 'void',
    'locale' => 'string',
    'style' => 'int',
    'pattern=' => 'null|string',
  ),
  'NumberFormatter::create' => 
  array (
    0 => 'NumberFormatter|null',
    'locale' => 'string',
    'style' => 'int',
    'pattern=' => 'null|string',
  ),
  'NumberFormatter::format' => 
  array (
    0 => 'false|string',
    'num' => 'int|float',
    'type=' => 'int',
  ),
  'NumberFormatter::formatCurrency' => 
  array (
    0 => 'false|string',
    'amount' => 'float',
    'currency' => 'string',
  ),
  'NumberFormatter::getAttribute' => 
  array (
    0 => 'false|float|int',
    'attribute' => 'int',
  ),
  'NumberFormatter::getErrorCode' => 
  array (
    0 => 'int',
  ),
  'NumberFormatter::getErrorMessage' => 
  array (
    0 => 'string',
  ),
  'NumberFormatter::getLocale' => 
  array (
    0 => 'string',
    'type=' => 'int',
  ),
  'NumberFormatter::getPattern' => 
  array (
    0 => 'false|string',
  ),
  'NumberFormatter::getSymbol' => 
  array (
    0 => 'false|string',
    'symbol' => 'int',
  ),
  'NumberFormatter::getTextAttribute' => 
  array (
    0 => 'false|string',
    'attribute' => 'int',
  ),
  'NumberFormatter::parse' => 
  array (
    0 => 'false|float|int',
    'string' => 'string',
    'type=' => 'int',
    '&rw_offset=' => 'int',
  ),
  'NumberFormatter::parseCurrency' => 
  array (
    0 => 'false|float',
    'string' => 'string',
    '&w_currency' => 'string',
    '&rw_offset=' => 'int',
  ),
  'NumberFormatter::setAttribute' => 
  array (
    0 => 'bool',
    'attribute' => 'int',
    'value' => 'float|int',
  ),
  'NumberFormatter::setPattern' => 
  array (
    0 => 'bool',
    'pattern' => 'string',
  ),
  'NumberFormatter::setSymbol' => 
  array (
    0 => 'bool',
    'symbol' => 'int',
    'value' => 'string',
  ),
  'NumberFormatter::setTextAttribute' => 
  array (
    0 => 'bool',
    'attribute' => 'int',
    'value' => 'string',
  ),
  'numfmt_create' => 
  array (
    0 => 'NumberFormatter|null',
    'locale' => 'string',
    'style' => 'int',
    'pattern=' => 'null|string',
  ),
  'numfmt_format' => 
  array (
    0 => 'false|string',
    'formatter' => 'NumberFormatter',
    'num' => 'float|int',
    'type=' => 'int',
  ),
  'numfmt_format_currency' => 
  array (
    0 => 'false|string',
    'formatter' => 'NumberFormatter',
    'amount' => 'float',
    'currency' => 'string',
  ),
  'numfmt_get_attribute' => 
  array (
    0 => 'false|float|int',
    'formatter' => 'NumberFormatter',
    'attribute' => 'int',
  ),
  'numfmt_get_error_code' => 
  array (
    0 => 'int',
    'formatter' => 'NumberFormatter',
  ),
  'numfmt_get_error_message' => 
  array (
    0 => 'string',
    'formatter' => 'NumberFormatter',
  ),
  'numfmt_get_locale' => 
  array (
    0 => 'string',
    'formatter' => 'NumberFormatter',
    'type=' => 'int',
  ),
  'numfmt_get_pattern' => 
  array (
    0 => 'false|string',
    'formatter' => 'NumberFormatter',
  ),
  'numfmt_get_symbol' => 
  array (
    0 => 'false|string',
    'formatter' => 'NumberFormatter',
    'symbol' => 'int',
  ),
  'numfmt_get_text_attribute' => 
  array (
    0 => 'false|string',
    'formatter' => 'NumberFormatter',
    'attribute' => 'int',
  ),
  'numfmt_parse' => 
  array (
    0 => 'false|float|int',
    'formatter' => 'NumberFormatter',
    'string' => 'string',
    'type=' => 'int',
    '&rw_offset=' => 'int',
  ),
  'numfmt_parse_currency' => 
  array (
    0 => 'false|float',
    'formatter' => 'NumberFormatter',
    'string' => 'string',
    '&w_currency' => 'string',
    '&rw_offset=' => 'int',
  ),
  'numfmt_set_attribute' => 
  array (
    0 => 'bool',
    'formatter' => 'NumberFormatter',
    'attribute' => 'int',
    'value' => 'float|int',
  ),
  'numfmt_set_pattern' => 
  array (
    0 => 'bool',
    'formatter' => 'NumberFormatter',
    'pattern' => 'string',
  ),
  'numfmt_set_symbol' => 
  array (
    0 => 'bool',
    'formatter' => 'NumberFormatter',
    'symbol' => 'int',
    'value' => 'string',
  ),
  'numfmt_set_text_attribute' => 
  array (
    0 => 'bool',
    'formatter' => 'NumberFormatter',
    'attribute' => 'int',
    'value' => 'string',
  ),
  'OAuth::__construct' => 
  array (
    0 => 'void',
    'consumer_key' => 'string',
    'consumer_secret' => 'string',
    'signature_method=' => 'string',
    'auth_type=' => 'int',
  ),
  'OAuth::disableDebug' => 
  array (
    0 => 'bool',
  ),
  'OAuth::disableRedirects' => 
  array (
    0 => 'bool',
  ),
  'OAuth::disableSSLChecks' => 
  array (
    0 => 'bool',
  ),
  'OAuth::enableDebug' => 
  array (
    0 => 'bool',
  ),
  'OAuth::enableRedirects' => 
  array (
    0 => 'bool',
  ),
  'OAuth::enableSSLChecks' => 
  array (
    0 => 'bool',
  ),
  'OAuth::fetch' => 
  array (
    0 => 'mixed',
    'protected_resource_url' => 'string',
    'extra_parameters=' => 'array<array-key, mixed>',
    'http_method=' => 'string',
    'http_headers=' => 'array<array-key, mixed>',
  ),
  'OAuth::generateSignature' => 
  array (
    0 => 'string',
    'http_method' => 'string',
    'url' => 'string',
    'extra_parameters=' => 'mixed',
  ),
  'OAuth::getAccessToken' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'access_token_url' => 'string',
    'auth_session_handle=' => 'string',
    'verifier_token=' => 'string',
    'http_method=' => 'string',
  ),
  'OAuth::getCAPath' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'OAuth::getLastResponse' => 
  array (
    0 => 'string',
  ),
  'OAuth::getLastResponseHeaders' => 
  array (
    0 => 'false|string',
  ),
  'OAuth::getLastResponseInfo' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'OAuth::getRequestHeader' => 
  array (
    0 => 'false|string',
    'http_method' => 'string',
    'url' => 'string',
    'extra_parameters=' => 'mixed',
  ),
  'OAuth::getRequestToken' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'request_token_url' => 'string',
    'callback_url=' => 'string',
    'http_method=' => 'string',
  ),
  'OAuth::setAuthType' => 
  array (
    0 => 'bool',
    'auth_type' => 'int',
  ),
  'OAuth::setCAPath' => 
  array (
    0 => 'mixed',
    'ca_path=' => 'string',
    'ca_info=' => 'string',
  ),
  'OAuth::setNonce' => 
  array (
    0 => 'mixed',
    'nonce' => 'string',
  ),
  'OAuth::setRequestEngine' => 
  array (
    0 => 'void',
    'reqengine' => 'int',
  ),
  'OAuth::setRSACertificate' => 
  array (
    0 => 'mixed',
    'cert' => 'string',
  ),
  'OAuth::setSSLChecks' => 
  array (
    0 => 'bool',
    'sslcheck' => 'int',
  ),
  'OAuth::setTimeout' => 
  array (
    0 => 'void',
    'timeout' => 'int',
  ),
  'OAuth::setTimestamp' => 
  array (
    0 => 'mixed',
    'timestamp' => 'string',
  ),
  'OAuth::setToken' => 
  array (
    0 => 'bool',
    'token' => 'string',
    'token_secret' => 'string',
  ),
  'OAuth::setVersion' => 
  array (
    0 => 'bool',
    'version' => 'string',
  ),
  'oauth_get_sbs' => 
  array (
    0 => 'string',
    'http_method' => 'string',
    'uri' => 'string',
    'parameters' => 'array<array-key, mixed>',
  ),
  'oauth_urlencode' => 
  array (
    0 => 'string',
    'uri' => 'string',
  ),
  'OAuthProvider::__construct' => 
  array (
    0 => 'void',
    'params_array=' => 'array<array-key, mixed>',
  ),
  'OAuthProvider::addRequiredParameter' => 
  array (
    0 => 'bool',
    'req_params' => 'string',
  ),
  'OAuthProvider::callconsumerHandler' => 
  array (
    0 => 'void',
  ),
  'OAuthProvider::callTimestampNonceHandler' => 
  array (
    0 => 'void',
  ),
  'OAuthProvider::calltokenHandler' => 
  array (
    0 => 'void',
  ),
  'OAuthProvider::checkOAuthRequest' => 
  array (
    0 => 'void',
    'uri=' => 'string',
    'method=' => 'string',
  ),
  'OAuthProvider::consumerHandler' => 
  array (
    0 => 'void',
    'callback_function' => 'callable',
  ),
  'OAuthProvider::generateToken' => 
  array (
    0 => 'string',
    'size' => 'int',
    'strong=' => 'bool',
  ),
  'OAuthProvider::is2LeggedEndpoint' => 
  array (
    0 => 'void',
    'params_array' => 'mixed',
  ),
  'OAuthProvider::isRequestTokenEndpoint' => 
  array (
    0 => 'void',
    'will_issue_request_token' => 'bool',
  ),
  'OAuthProvider::removeRequiredParameter' => 
  array (
    0 => 'bool',
    'req_params' => 'string',
  ),
  'OAuthProvider::reportProblem' => 
  array (
    0 => 'string',
    'oauthexception' => 'string',
    'send_headers=' => 'bool',
  ),
  'OAuthProvider::setParam' => 
  array (
    0 => 'bool',
    'param_key' => 'string',
    'param_val=' => 'mixed',
  ),
  'OAuthProvider::setRequestTokenPath' => 
  array (
    0 => 'bool',
    'path' => 'string',
  ),
  'OAuthProvider::timestampNonceHandler' => 
  array (
    0 => 'void',
    'callback_function' => 'callable',
  ),
  'OAuthProvider::tokenHandler' => 
  array (
    0 => 'void',
    'callback_function' => 'callable',
  ),
  'ob_clean' => 
  array (
    0 => 'bool',
  ),
  'ob_deflatehandler' => 
  array (
    0 => 'string',
    'data' => 'string',
    'mode' => 'int',
  ),
  'ob_end_clean' => 
  array (
    0 => 'bool',
  ),
  'ob_end_flush' => 
  array (
    0 => 'bool',
  ),
  'ob_etaghandler' => 
  array (
    0 => 'string',
    'data' => 'string',
    'mode' => 'int',
  ),
  'ob_flush' => 
  array (
    0 => 'bool',
  ),
  'ob_get_clean' => 
  array (
    0 => 'false|string',
  ),
  'ob_get_contents' => 
  array (
    0 => 'false|string',
  ),
  'ob_get_flush' => 
  array (
    0 => 'false|string',
  ),
  'ob_get_length' => 
  array (
    0 => 'false|int',
  ),
  'ob_get_level' => 
  array (
    0 => 'int',
  ),
  'ob_get_status' => 
  array (
    0 => 'array<array-key, mixed>',
    'full_status=' => 'bool',
  ),
  'ob_gzhandler' => 
  array (
    0 => 'false|string',
    'data' => 'string',
    'flags' => 'int',
  ),
  'ob_iconv_handler' => 
  array (
    0 => 'string',
    'contents' => 'string',
    'status' => 'int',
  ),
  'ob_implicit_flush' => 
  array (
    0 => 'void',
    'enable=' => 'bool',
  ),
  'ob_inflatehandler' => 
  array (
    0 => 'string',
    'data' => 'string',
    'mode' => 'int',
  ),
  'ob_list_handlers' => 
  array (
    0 => 'list<string>',
  ),
  'ob_start' => 
  array (
    0 => 'bool',
    'callback=' => 'array<array-key, mixed>|callable|null|string',
    'chunk_size=' => 'int',
    'flags=' => 'int',
  ),
  'ob_tidyhandler' => 
  array (
    0 => 'string',
    'input' => 'string',
    'mode=' => 'int',
  ),
  'oci_bind_array_by_name' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
    'param' => 'string',
    '&rw_var' => 'array<array-key, mixed>',
    'max_array_length' => 'int',
    'max_item_length=' => 'int',
    'type=' => 'int',
  ),
  'oci_bind_by_name' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
    'param' => 'string',
    '&rw_var' => 'mixed',
    'max_length=' => 'int',
    'type=' => 'int',
  ),
  'oci_cancel' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
  ),
  'oci_client_version' => 
  array (
    0 => 'string',
  ),
  'oci_close' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
  ),
  'OCICollection::append' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'OCICollection::assign' => 
  array (
    0 => 'bool',
    'from' => 'OCI_Collection',
  ),
  'OCICollection::assignElem' => 
  array (
    0 => 'bool',
    'index' => 'int',
    'value' => 'mixed',
  ),
  'OCICollection::free' => 
  array (
    0 => 'bool',
  ),
  'OCICollection::getElem' => 
  array (
    0 => 'mixed',
    'index' => 'int',
  ),
  'OCICollection::max' => 
  array (
    0 => 'false|int',
  ),
  'OCICollection::size' => 
  array (
    0 => 'false|int',
  ),
  'OCICollection::trim' => 
  array (
    0 => 'bool',
    'num' => 'int',
  ),
  'oci_collection_append' => 
  array (
    0 => 'bool',
    'collection' => 'string',
  ),
  'oci_collection_assign' => 
  array (
    0 => 'bool',
    'to' => 'object',
  ),
  'oci_collection_element_assign' => 
  array (
    0 => 'bool',
    'collection' => 'int',
    'index' => 'string',
  ),
  'oci_collection_element_get' => 
  array (
    0 => 'string',
    'collection' => 'int',
  ),
  'oci_collection_max' => 
  array (
    0 => 'int',
  ),
  'oci_collection_size' => 
  array (
    0 => 'int',
  ),
  'oci_collection_trim' => 
  array (
    0 => 'bool',
    'collection' => 'int',
  ),
  'oci_commit' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
  ),
  'oci_connect' => 
  array (
    0 => 'false|resource',
    'username' => 'string',
    'password' => 'string',
    'connection_string=' => 'string',
    'encoding=' => 'string',
    'session_mode=' => 'int',
  ),
  'oci_define_by_name' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
    'column' => 'string',
    '&w_var' => 'mixed',
    'type=' => 'int',
  ),
  'oci_error' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'connection_or_statement=' => 'resource',
  ),
  'oci_execute' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
    'mode=' => 'int',
  ),
  'oci_fetch' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
  ),
  'oci_fetch_all' => 
  array (
    0 => 'false|int',
    'statement' => 'resource',
    '&w_output' => 'array<array-key, mixed>',
    'offset=' => 'int',
    'limit=' => 'int',
    'flags=' => 'int',
  ),
  'oci_fetch_array' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'statement' => 'resource',
    'mode=' => 'int',
  ),
  'oci_fetch_assoc' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'statement' => 'resource',
  ),
  'oci_fetch_object' => 
  array (
    0 => 'false|object',
    'statement' => 'resource',
  ),
  'oci_fetch_row' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'statement' => 'resource',
  ),
  'oci_field_is_null' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
    'column' => 'mixed',
  ),
  'oci_field_name' => 
  array (
    0 => 'false|string',
    'statement' => 'resource',
    'column' => 'mixed',
  ),
  'oci_field_precision' => 
  array (
    0 => 'false|int',
    'statement' => 'resource',
    'column' => 'mixed',
  ),
  'oci_field_scale' => 
  array (
    0 => 'false|int',
    'statement' => 'resource',
    'column' => 'mixed',
  ),
  'oci_field_size' => 
  array (
    0 => 'false|int',
    'statement' => 'resource',
    'column' => 'mixed',
  ),
  'oci_field_type' => 
  array (
    0 => 'false|mixed',
    'statement' => 'resource',
    'column' => 'mixed',
  ),
  'oci_field_type_raw' => 
  array (
    0 => 'false|int',
    'statement' => 'resource',
    'column' => 'mixed',
  ),
  'oci_free_collection' => 
  array (
    0 => 'bool',
  ),
  'oci_free_cursor' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
  ),
  'oci_free_descriptor' => 
  array (
    0 => 'bool',
  ),
  'oci_free_statement' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
  ),
  'oci_get_implicit' => 
  array (
    0 => 'bool',
    'stmt' => 'mixed',
  ),
  'oci_get_implicit_resultset' => 
  array (
    0 => 'false|resource',
    'statement' => 'resource',
  ),
  'oci_internal_debug' => 
  array (
    0 => 'void',
    'onoff' => 'bool',
  ),
  'OCILob::append' => 
  array (
    0 => 'bool',
    'lob_from' => 'OCILob',
  ),
  'OCILob::close' => 
  array (
    0 => 'bool',
  ),
  'OCILob::eof' => 
  array (
    0 => 'bool',
  ),
  'OCILob::erase' => 
  array (
    0 => 'false|int',
    'offset=' => 'int',
    'length=' => 'int',
  ),
  'OCILob::export' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'start=' => 'int',
    'length=' => 'int',
  ),
  'OCILob::flush' => 
  array (
    0 => 'bool',
    'flag=' => 'int',
  ),
  'OCILob::free' => 
  array (
    0 => 'bool',
  ),
  'OCILob::getbuffering' => 
  array (
    0 => 'bool',
  ),
  'OCILob::import' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'OCILob::load' => 
  array (
    0 => 'false|string',
  ),
  'OCILob::read' => 
  array (
    0 => 'false|string',
    'length' => 'int',
  ),
  'OCILob::rewind' => 
  array (
    0 => 'bool',
  ),
  'OCILob::save' => 
  array (
    0 => 'bool',
    'data' => 'string',
    'offset=' => 'int',
  ),
  'OCILob::savefile' => 
  array (
    0 => 'bool',
    'filename' => 'mixed',
  ),
  'OCILob::seek' => 
  array (
    0 => 'bool',
    'offset' => 'int',
    'whence=' => 'int',
  ),
  'OCILob::setbuffering' => 
  array (
    0 => 'bool',
    'on_off' => 'bool',
  ),
  'OCILob::size' => 
  array (
    0 => 'false|int',
  ),
  'OCILob::tell' => 
  array (
    0 => 'false|int',
  ),
  'OCILob::truncate' => 
  array (
    0 => 'bool',
    'length=' => 'int',
  ),
  'OCILob::write' => 
  array (
    0 => 'false|int',
    'data' => 'string',
    'length=' => 'int',
  ),
  'OCILob::writeTemporary' => 
  array (
    0 => 'bool',
    'data' => 'string',
    'lob_type=' => 'int',
  ),
  'OCILob::writetofile' => 
  array (
    0 => 'bool',
    'filename' => 'mixed',
    'start' => 'mixed',
    'length' => 'mixed',
  ),
  'oci_lob_append' => 
  array (
    0 => 'bool',
    'to' => 'object',
  ),
  'oci_lob_close' => 
  array (
    0 => 'bool',
  ),
  'oci_lob_copy' => 
  array (
    0 => 'bool',
    'to' => 'OCILob',
    'from' => 'OCILob',
    'length=' => 'int',
  ),
  'oci_lob_eof' => 
  array (
    0 => 'bool',
  ),
  'oci_lob_erase' => 
  array (
    0 => 'int',
    'lob' => 'int',
    'offset' => 'int',
  ),
  'oci_lob_export' => 
  array (
    0 => 'bool',
    'lob' => 'string',
    'filename' => 'int',
    'offset' => 'int',
  ),
  'oci_lob_flush' => 
  array (
    0 => 'bool',
    'lob' => 'int',
  ),
  'oci_lob_import' => 
  array (
    0 => 'bool',
    'lob' => 'string',
  ),
  'oci_lob_is_equal' => 
  array (
    0 => 'bool',
    'lob1' => 'OCILob',
    'lob2' => 'OCILob',
  ),
  'oci_lob_load' => 
  array (
    0 => 'string',
  ),
  'oci_lob_read' => 
  array (
    0 => 'string',
    'lob' => 'int',
  ),
  'oci_lob_rewind' => 
  array (
    0 => 'bool',
  ),
  'oci_lob_save' => 
  array (
    0 => 'bool',
    'lob' => 'string',
    'data' => 'int',
  ),
  'oci_lob_seek' => 
  array (
    0 => 'bool',
    'lob' => 'int',
    'offset' => 'int',
  ),
  'oci_lob_size' => 
  array (
    0 => 'int',
  ),
  'oci_lob_tell' => 
  array (
    0 => 'int',
  ),
  'oci_lob_truncate' => 
  array (
    0 => 'bool',
    'lob' => 'int',
  ),
  'oci_lob_write' => 
  array (
    0 => 'int',
    'lob' => 'string',
    'data' => 'int',
  ),
  'oci_lob_write_temporary' => 
  array (
    0 => 'bool',
    'value' => 'string',
    'lob_type' => 'int',
  ),
  'oci_new_collection' => 
  array (
    0 => 'OCICollection|false',
    'connection' => 'resource',
    'type_name' => 'string',
    'schema=' => 'string',
  ),
  'oci_new_connect' => 
  array (
    0 => 'false|resource',
    'username' => 'string',
    'password' => 'string',
    'connection_string=' => 'string',
    'encoding=' => 'string',
    'session_mode=' => 'int',
  ),
  'oci_new_cursor' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
  ),
  'oci_new_descriptor' => 
  array (
    0 => 'OCILob|false',
    'connection' => 'resource',
    'type=' => 'int',
  ),
  'oci_num_fields' => 
  array (
    0 => 'false|int',
    'statement' => 'resource',
  ),
  'oci_num_rows' => 
  array (
    0 => 'false|int',
    'statement' => 'resource',
  ),
  'oci_parse' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'sql' => 'string',
  ),
  'oci_password_change' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
    'username' => 'string',
    'old_password' => 'string',
    'new_password' => 'string',
  ),
  'oci_pconnect' => 
  array (
    0 => 'false|resource',
    'username' => 'string',
    'password' => 'string',
    'connection_string=' => 'string',
    'encoding=' => 'string',
    'session_mode=' => 'int',
  ),
  'oci_register_taf_callback' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
    'callback=' => 'callable',
  ),
  'oci_result' => 
  array (
    0 => 'false|mixed',
    'statement' => 'resource',
    'column' => 'mixed',
  ),
  'oci_rollback' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
  ),
  'oci_server_version' => 
  array (
    0 => 'false|string',
    'connection' => 'resource',
  ),
  'oci_set_action' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
    'action' => 'string',
  ),
  'oci_set_call_timeout' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
    'timeout' => 'int',
  ),
  'oci_set_client_identifier' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
    'client_id' => 'string',
  ),
  'oci_set_client_info' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
    'client_info' => 'string',
  ),
  'oci_set_db_operation' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
    'action' => 'string',
  ),
  'oci_set_edition' => 
  array (
    0 => 'bool',
    'edition' => 'string',
  ),
  'oci_set_module_name' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
    'name' => 'string',
  ),
  'oci_set_prefetch' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
    'rows' => 'int',
  ),
  'oci_statement_type' => 
  array (
    0 => 'false|string',
    'statement' => 'resource',
  ),
  'oci_unregister_taf_callback' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
  ),
  'ocifetchinto' => 
  array (
    0 => 'bool|int',
    'statement' => 'resource',
    '&w_result' => 'array<array-key, mixed>',
    'mode=' => 'int',
  ),
  'ocigetbufferinglob' => 
  array (
    0 => 'bool',
  ),
  'ocisetbufferinglob' => 
  array (
    0 => 'bool',
    'lob' => 'bool',
  ),
  'octdec' => 
  array (
    0 => 'float|int',
    'octal_string' => 'string',
  ),
  'odbc_autocommit' => 
  array (
    0 => 'bool|int',
    'odbc' => 'resource',
    'enable=' => 'bool',
  ),
  'odbc_binmode' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
    'mode' => 'int',
  ),
  'odbc_close' => 
  array (
    0 => 'void',
    'odbc' => 'resource',
  ),
  'odbc_close_all' => 
  array (
    0 => 'void',
  ),
  'odbc_columnprivileges' => 
  array (
    0 => 'false|resource',
    'odbc' => 'resource',
    'catalog' => 'null|string',
    'schema' => 'string',
    'table' => 'string',
    'column' => 'string',
  ),
  'odbc_columns' => 
  array (
    0 => 'false|resource',
    'odbc' => 'resource',
    'catalog=' => 'null|string',
    'schema=' => 'null|string',
    'table=' => 'null|string',
    'column=' => 'null|string',
  ),
  'odbc_commit' => 
  array (
    0 => 'bool',
    'odbc' => 'resource',
  ),
  'odbc_connect' => 
  array (
    0 => 'false|resource',
    'dsn' => 'string',
    'user' => 'string',
    'password' => 'string',
    'cursor_option=' => 'int',
  ),
  'odbc_cursor' => 
  array (
    0 => 'string',
    'statement' => 'resource',
  ),
  'odbc_data_source' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'odbc' => 'resource',
    'fetch_type' => 'int',
  ),
  'odbc_do' => 
  array (
    0 => 'resource',
    'odbc' => 'resource',
    'query' => 'string',
  ),
  'odbc_error' => 
  array (
    0 => 'string',
    'odbc=' => 'resource',
  ),
  'odbc_errormsg' => 
  array (
    0 => 'string',
    'odbc=' => 'resource',
  ),
  'odbc_exec' => 
  array (
    0 => 'resource',
    'odbc' => 'resource',
    'query' => 'string',
  ),
  'odbc_execute' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
    'params=' => 'array<array-key, mixed>',
  ),
  'odbc_fetch_array' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'statement' => 'resource',
    'row=' => 'int',
  ),
  'odbc_fetch_into' => 
  array (
    0 => 'int',
    'statement' => 'resource',
    '&w_array' => 'array<array-key, mixed>',
    'row=' => 'int',
  ),
  'odbc_fetch_object' => 
  array (
    0 => 'false|stdClass',
    'statement' => 'resource',
    'row=' => 'int',
  ),
  'odbc_fetch_row' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
    'row=' => 'int|null',
  ),
  'odbc_field_len' => 
  array (
    0 => 'false|int',
    'statement' => 'resource',
    'field' => 'int',
  ),
  'odbc_field_name' => 
  array (
    0 => 'false|string',
    'statement' => 'resource',
    'field' => 'int',
  ),
  'odbc_field_num' => 
  array (
    0 => 'false|int',
    'statement' => 'resource',
    'field' => 'string',
  ),
  'odbc_field_precision' => 
  array (
    0 => 'int',
    'statement' => 'resource',
    'field' => 'int',
  ),
  'odbc_field_scale' => 
  array (
    0 => 'false|int',
    'statement' => 'resource',
    'field' => 'int',
  ),
  'odbc_field_type' => 
  array (
    0 => 'false|string',
    'statement' => 'resource',
    'field' => 'int',
  ),
  'odbc_foreignkeys' => 
  array (
    0 => 'false|resource',
    'odbc' => 'resource',
    'pk_catalog' => 'null|string',
    'pk_schema' => 'string',
    'pk_table' => 'string',
    'fk_catalog' => 'string',
    'fk_schema' => 'string',
    'fk_table' => 'string',
  ),
  'odbc_free_result' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
  ),
  'odbc_gettypeinfo' => 
  array (
    0 => 'resource',
    'odbc' => 'resource',
    'data_type=' => 'int',
  ),
  'odbc_longreadlen' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
    'length' => 'int',
  ),
  'odbc_next_result' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
  ),
  'odbc_num_fields' => 
  array (
    0 => 'int',
    'statement' => 'resource',
  ),
  'odbc_num_rows' => 
  array (
    0 => 'int',
    'statement' => 'resource',
  ),
  'odbc_pconnect' => 
  array (
    0 => 'false|resource',
    'dsn' => 'string',
    'user' => 'string',
    'password' => 'string',
    'cursor_option=' => 'int',
  ),
  'odbc_prepare' => 
  array (
    0 => 'false|resource',
    'odbc' => 'resource',
    'query' => 'string',
  ),
  'odbc_primarykeys' => 
  array (
    0 => 'false|resource',
    'odbc' => 'resource',
    'catalog' => 'null|string',
    'schema' => 'string',
    'table' => 'string',
  ),
  'odbc_procedurecolumns' => 
  array (
    0 => 'false|resource',
    'odbc' => 'resource',
    'catalog=' => 'null|string',
    'schema=' => 'null|string',
    'procedure=' => 'null|string',
    'column=' => 'null|string',
  ),
  'odbc_procedures' => 
  array (
    0 => 'false|resource',
    'odbc' => 'resource',
    'catalog=' => 'null|string',
    'schema=' => 'null|string',
    'procedure=' => 'null|string',
  ),
  'odbc_result' => 
  array (
    0 => 'bool|null|string',
    'statement' => 'resource',
    'field' => 'int|string',
  ),
  'odbc_result_all' => 
  array (
    0 => 'false|int',
    'statement' => 'resource',
    'format=' => 'string',
  ),
  'odbc_rollback' => 
  array (
    0 => 'bool',
    'odbc' => 'resource',
  ),
  'odbc_setoption' => 
  array (
    0 => 'bool',
    'odbc' => 'resource',
    'which' => 'int',
    'option' => 'int',
    'value' => 'int',
  ),
  'odbc_specialcolumns' => 
  array (
    0 => 'false|resource',
    'odbc' => 'resource',
    'type' => 'int',
    'catalog' => 'null|string',
    'schema' => 'string',
    'table' => 'string',
    'scope' => 'int',
    'nullable' => 'int',
  ),
  'odbc_statistics' => 
  array (
    0 => 'false|resource',
    'odbc' => 'resource',
    'catalog' => 'null|string',
    'schema' => 'string',
    'table' => 'string',
    'unique' => 'int',
    'accuracy' => 'int',
  ),
  'odbc_tableprivileges' => 
  array (
    0 => 'false|resource',
    'odbc' => 'resource',
    'catalog' => 'null|string',
    'schema' => 'string',
    'table' => 'string',
  ),
  'odbc_tables' => 
  array (
    0 => 'false|resource',
    'odbc' => 'resource',
    'catalog=' => 'null|string',
    'schema=' => 'null|string',
    'table=' => 'null|string',
    'types=' => 'null|string',
  ),
  'opcache_compile_file' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'opcache_get_configuration' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'opcache_get_status' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'include_scripts=' => 'bool',
  ),
  'opcache_invalidate' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'force=' => 'bool',
  ),
  'opcache_is_script_cached' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'opcache_reset' => 
  array (
    0 => 'bool',
  ),
  'openal_buffer_create' => 
  array (
    0 => 'resource',
  ),
  'openal_buffer_data' => 
  array (
    0 => 'bool',
    'buffer' => 'resource',
    'format' => 'int',
    'data' => 'string',
    'freq' => 'int',
  ),
  'openal_buffer_destroy' => 
  array (
    0 => 'bool',
    'buffer' => 'resource',
  ),
  'openal_buffer_get' => 
  array (
    0 => 'int',
    'buffer' => 'resource',
    'property' => 'int',
  ),
  'openal_buffer_loadwav' => 
  array (
    0 => 'bool',
    'buffer' => 'resource',
    'wavfile' => 'string',
  ),
  'openal_context_create' => 
  array (
    0 => 'resource',
    'device' => 'resource',
  ),
  'openal_context_current' => 
  array (
    0 => 'bool',
    'context' => 'resource',
  ),
  'openal_context_destroy' => 
  array (
    0 => 'bool',
    'context' => 'resource',
  ),
  'openal_context_process' => 
  array (
    0 => 'bool',
    'context' => 'resource',
  ),
  'openal_context_suspend' => 
  array (
    0 => 'bool',
    'context' => 'resource',
  ),
  'openal_device_close' => 
  array (
    0 => 'bool',
    'device' => 'resource',
  ),
  'openal_device_open' => 
  array (
    0 => 'false|resource',
    'device_desc=' => 'string',
  ),
  'openal_listener_get' => 
  array (
    0 => 'mixed',
    'property' => 'int',
  ),
  'openal_listener_set' => 
  array (
    0 => 'bool',
    'property' => 'int',
    'setting' => 'mixed',
  ),
  'openal_source_create' => 
  array (
    0 => 'resource',
  ),
  'openal_source_destroy' => 
  array (
    0 => 'bool',
    'source' => 'resource',
  ),
  'openal_source_get' => 
  array (
    0 => 'mixed',
    'source' => 'resource',
    'property' => 'int',
  ),
  'openal_source_pause' => 
  array (
    0 => 'bool',
    'source' => 'resource',
  ),
  'openal_source_play' => 
  array (
    0 => 'bool',
    'source' => 'resource',
  ),
  'openal_source_rewind' => 
  array (
    0 => 'bool',
    'source' => 'resource',
  ),
  'openal_source_set' => 
  array (
    0 => 'bool',
    'source' => 'resource',
    'property' => 'int',
    'setting' => 'mixed',
  ),
  'openal_source_stop' => 
  array (
    0 => 'bool',
    'source' => 'resource',
  ),
  'openal_stream' => 
  array (
    0 => 'resource',
    'source' => 'resource',
    'format' => 'int',
    'rate' => 'int',
  ),
  'opendir' => 
  array (
    0 => 'false|resource',
    'directory' => 'string',
    'context=' => 'resource',
  ),
  'openlog' => 
  array (
    0 => 'true',
    'prefix' => 'string',
    'flags' => 'int',
    'facility' => 'int',
  ),
  'openssl_cipher_iv_length' => 
  array (
    0 => 'false|int',
    'cipher_algo' => 'string',
  ),
  'openssl_cipher_key_length' => 
  array (
    0 => 'false|int<1, max>',
    'cipher_algo' => 'non-empty-string',
  ),
  'openssl_csr_export' => 
  array (
    0 => 'bool',
    'csr' => 'OpenSSLCertificateSigningRequest|string',
    '&w_output' => 'string',
    'no_text=' => 'bool',
  ),
  'openssl_csr_export_to_file' => 
  array (
    0 => 'bool',
    'csr' => 'OpenSSLCertificateSigningRequest|string',
    'output_filename' => 'string',
    'no_text=' => 'bool',
  ),
  'openssl_csr_get_public_key' => 
  array (
    0 => 'OpenSSLAsymmetricKey|false',
    'csr' => 'OpenSSLCertificateSigningRequest|string',
    'short_names=' => 'bool',
  ),
  'openssl_csr_get_subject' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'csr' => 'OpenSSLCertificateSigningRequest|string',
    'short_names=' => 'bool',
  ),
  'openssl_csr_new' => 
  array (
    0 => 'OpenSSLCertificateSigningRequest|false',
    'distinguished_names' => 'array<array-key, mixed>',
    '&w_private_key' => 'OpenSSLAsymmetricKey',
    'options=' => 'array<array-key, mixed>|null',
    'extra_attributes=' => 'array<array-key, mixed>|null',
  ),
  'openssl_csr_sign' => 
  array (
    0 => 'OpenSSLCertificate|false',
    'csr' => 'OpenSSLCertificateSigningRequest|string',
    'ca_certificate' => 'OpenSSLCertificate|null|string',
    'private_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    'days' => 'int',
    'options=' => 'array<array-key, mixed>|null',
    'serial=' => 'int',
  ),
  'openssl_decrypt' => 
  array (
    0 => 'false|string',
    'data' => 'string',
    'cipher_algo' => 'string',
    'passphrase' => 'string',
    'options=' => 'int',
    'iv=' => 'string',
    'tag=' => 'null|string',
    'aad=' => 'string',
  ),
  'openssl_dh_compute_key' => 
  array (
    0 => 'false|string',
    'public_key' => 'string',
    'private_key' => 'OpenSSLAsymmetricKey',
  ),
  'openssl_digest' => 
  array (
    0 => 'false|string',
    'data' => 'string',
    'digest_algo' => 'string',
    'binary=' => 'bool',
  ),
  'openssl_encrypt' => 
  array (
    0 => 'false|string',
    'data' => 'string',
    'cipher_algo' => 'string',
    'passphrase' => 'string',
    'options=' => 'int',
    'iv=' => 'string',
    '&w_tag=' => 'string',
    'aad=' => 'string',
    'tag_length=' => 'int',
  ),
  'openssl_error_string' => 
  array (
    0 => 'false|string',
  ),
  'openssl_free_key' => 
  array (
    0 => 'void',
    'key' => 'OpenSSLAsymmetricKey',
  ),
  'openssl_get_cert_locations' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'openssl_get_cipher_methods' => 
  array (
    0 => 'array<array-key, mixed>',
    'aliases=' => 'bool',
  ),
  'openssl_get_curve_names' => 
  array (
    0 => 'list<string>',
  ),
  'openssl_get_md_methods' => 
  array (
    0 => 'array<array-key, mixed>',
    'aliases=' => 'bool',
  ),
  'openssl_get_privatekey' => 
  array (
    0 => 'OpenSSLAsymmetricKey|false',
    'private_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    'passphrase=' => 'null|string',
  ),
  'openssl_get_publickey' => 
  array (
    0 => 'OpenSSLAsymmetricKey|false',
    'public_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
  ),
  'openssl_open' => 
  array (
    0 => 'bool',
    'data' => 'string',
    '&w_output' => 'string',
    'encrypted_key' => 'string',
    'private_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    'cipher_algo' => 'string',
    'iv=' => 'null|string',
  ),
  'openssl_pbkdf2' => 
  array (
    0 => 'false|string',
    'password' => 'string',
    'salt' => 'string',
    'key_length' => 'int',
    'iterations' => 'int',
    'digest_algo=' => 'string',
  ),
  'openssl_pkcs12_export' => 
  array (
    0 => 'bool',
    'certificate' => 'OpenSSLCertificate|string',
    '&w_output' => 'string',
    'private_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    'passphrase' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'openssl_pkcs12_export_to_file' => 
  array (
    0 => 'bool',
    'certificate' => 'OpenSSLCertificate|string',
    'output_filename' => 'string',
    'private_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    'passphrase' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'openssl_pkcs12_read' => 
  array (
    0 => 'bool',
    'pkcs12' => 'string',
    '&w_certificates' => 'array<array-key, mixed>',
    'passphrase' => 'string',
  ),
  'openssl_pkcs7_decrypt' => 
  array (
    0 => 'bool',
    'input_filename' => 'string',
    'output_filename' => 'string',
    'certificate' => 'OpenSSLCertificate|string',
    'private_key=' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|null|string',
  ),
  'openssl_pkcs7_encrypt' => 
  array (
    0 => 'bool',
    'input_filename' => 'string',
    'output_filename' => 'string',
    'certificate' => 'OpenSSLCertificate|list<OpenSSLCertificate|string>|string',
    'headers' => 'array<array-key, mixed>|null',
    'flags=' => 'int',
    'cipher_algo=' => 'int',
  ),
  'openssl_pkcs7_read' => 
  array (
    0 => 'bool',
    'data' => 'string',
    '&w_certificates' => 'array<array-key, mixed>',
  ),
  'openssl_pkcs7_sign' => 
  array (
    0 => 'bool',
    'input_filename' => 'string',
    'output_filename' => 'string',
    'certificate' => 'OpenSSLCertificate|string',
    'private_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    'headers' => 'array<array-key, mixed>|null',
    'flags=' => 'int',
    'untrusted_certificates_filename=' => 'null|string',
  ),
  'openssl_pkcs7_verify' => 
  array (
    0 => 'bool|int',
    'input_filename' => 'string',
    'flags' => 'int',
    'signers_certificates_filename=' => 'null|string',
    'ca_info=' => 'array<array-key, mixed>',
    'untrusted_certificates_filename=' => 'null|string',
    'content=' => 'null|string',
    'output_filename=' => 'null|string',
  ),
  'openssl_pkey_derive' => 
  array (
    0 => 'false|string',
    'public_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    'private_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    'key_length=' => 'int',
  ),
  'openssl_pkey_export' => 
  array (
    0 => 'bool',
    'key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    '&w_output' => 'string',
    'passphrase=' => 'null|string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'openssl_pkey_export_to_file' => 
  array (
    0 => 'bool',
    'key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    'output_filename' => 'string',
    'passphrase=' => 'null|string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'openssl_pkey_free' => 
  array (
    0 => 'void',
    'key' => 'OpenSSLAsymmetricKey',
  ),
  'openssl_pkey_get_details' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'key' => 'OpenSSLAsymmetricKey',
  ),
  'openssl_pkey_get_private' => 
  array (
    0 => 'OpenSSLAsymmetricKey|false',
    'private_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|array<array-key, mixed>|string',
    'passphrase=' => 'null|string',
  ),
  'openssl_pkey_get_public' => 
  array (
    0 => 'OpenSSLAsymmetricKey|false',
    'public_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
  ),
  'openssl_pkey_new' => 
  array (
    0 => 'OpenSSLAsymmetricKey|false',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'openssl_private_decrypt' => 
  array (
    0 => 'bool',
    'data' => 'string',
    '&w_decrypted_data' => 'string',
    'private_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    'padding=' => 'int',
  ),
  'openssl_private_encrypt' => 
  array (
    0 => 'bool',
    'data' => 'string',
    '&w_encrypted_data' => 'string',
    'private_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    'padding=' => 'int',
  ),
  'openssl_public_decrypt' => 
  array (
    0 => 'bool',
    'data' => 'string',
    '&w_decrypted_data' => 'string',
    'public_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    'padding=' => 'int',
  ),
  'openssl_public_encrypt' => 
  array (
    0 => 'bool',
    'data' => 'string',
    '&w_encrypted_data' => 'string',
    'public_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    'padding=' => 'int',
  ),
  'openssl_random_pseudo_bytes' => 
  array (
    0 => 'string',
    'length' => 'int',
    '&w_strong_result=' => 'bool',
  ),
  'openssl_seal' => 
  array (
    0 => 'false|int',
    'data' => 'string',
    '&w_sealed_data' => 'string',
    '&w_encrypted_keys' => 'array<array-key, mixed>',
    'public_key' => 'list<OpenSSLAsymmetricKey>',
    'cipher_algo' => 'string',
    '&rw_iv=' => 'string',
  ),
  'openssl_sign' => 
  array (
    0 => 'bool',
    'data' => 'string',
    '&w_signature' => 'string',
    'private_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    'algorithm=' => 'int|string',
  ),
  'openssl_spki_export' => 
  array (
    0 => 'false|string',
    'spki' => 'string',
  ),
  'openssl_spki_export_challenge' => 
  array (
    0 => 'false|string',
    'spki' => 'string',
  ),
  'openssl_spki_new' => 
  array (
    0 => 'false|string',
    'private_key' => 'OpenSSLAsymmetricKey',
    'challenge' => 'string',
    'digest_algo=' => 'int',
  ),
  'openssl_spki_verify' => 
  array (
    0 => 'bool',
    'spki' => 'string',
  ),
  'openssl_verify' => 
  array (
    0 => '-1|0|1|false',
    'data' => 'string',
    'signature' => 'string',
    'public_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    'algorithm=' => 'int|string',
  ),
  'openssl_x509_check_private_key' => 
  array (
    0 => 'bool',
    'certificate' => 'OpenSSLCertificate|string',
    'private_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
  ),
  'openssl_x509_checkpurpose' => 
  array (
    0 => 'bool|int',
    'certificate' => 'OpenSSLCertificate|string',
    'purpose' => 'int',
    'ca_info=' => 'array<array-key, mixed>',
    'untrusted_certificates_file=' => 'null|string',
  ),
  'openssl_x509_export' => 
  array (
    0 => 'bool',
    'certificate' => 'OpenSSLCertificate|string',
    '&w_output' => 'string',
    'no_text=' => 'bool',
  ),
  'openssl_x509_export_to_file' => 
  array (
    0 => 'bool',
    'certificate' => 'OpenSSLCertificate|string',
    'output_filename' => 'string',
    'no_text=' => 'bool',
  ),
  'openssl_x509_fingerprint' => 
  array (
    0 => 'false|string',
    'certificate' => 'OpenSSLCertificate|string',
    'digest_algo=' => 'string',
    'binary=' => 'bool',
  ),
  'openssl_x509_free' => 
  array (
    0 => 'void',
    'certificate' => 'OpenSSLCertificate',
  ),
  'openssl_x509_parse' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'certificate' => 'OpenSSLCertificate|string',
    'short_names=' => 'bool',
  ),
  'openssl_x509_read' => 
  array (
    0 => 'OpenSSLCertificate|false',
    'certificate' => 'OpenSSLCertificate|string',
  ),
  'openssl_x509_verify' => 
  array (
    0 => 'int',
    'certificate' => 'OpenSSLCertificate|string',
    'public_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|array<array-key, mixed>|string',
  ),
  'ord' => 
  array (
    0 => 'int<0, 255>',
    'character' => 'string',
  ),
  'OuterIterator::current' => 
  array (
    0 => 'mixed',
  ),
  'OuterIterator::getInnerIterator' => 
  array (
    0 => 'Iterator',
  ),
  'OuterIterator::key' => 
  array (
    0 => 'int|string',
  ),
  'OuterIterator::next' => 
  array (
    0 => 'void',
  ),
  'OuterIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'OuterIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'OutOfBoundsException::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'OutOfBoundsException::__toString' => 
  array (
    0 => 'string',
  ),
  'OutOfBoundsException::getCode' => 
  array (
    0 => 'int',
  ),
  'OutOfBoundsException::getFile' => 
  array (
    0 => 'string',
  ),
  'OutOfBoundsException::getLine' => 
  array (
    0 => 'int',
  ),
  'OutOfBoundsException::getMessage' => 
  array (
    0 => 'string',
  ),
  'OutOfBoundsException::getPrevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'OutOfBoundsException::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'OutOfBoundsException::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'OutOfRangeException::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'OutOfRangeException::__toString' => 
  array (
    0 => 'string',
  ),
  'OutOfRangeException::getCode' => 
  array (
    0 => 'int',
  ),
  'OutOfRangeException::getFile' => 
  array (
    0 => 'string',
  ),
  'OutOfRangeException::getLine' => 
  array (
    0 => 'int',
  ),
  'OutOfRangeException::getMessage' => 
  array (
    0 => 'string',
  ),
  'OutOfRangeException::getPrevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'OutOfRangeException::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'OutOfRangeException::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'output_add_rewrite_var' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value' => 'string',
  ),
  'output_cache_disable' => 
  array (
    0 => 'void',
  ),
  'output_cache_disable_compression' => 
  array (
    0 => 'void',
  ),
  'output_cache_exists' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'lifetime' => 'int',
  ),
  'output_cache_fetch' => 
  array (
    0 => 'string',
    'key' => 'string',
    'function' => 'mixed',
    'lifetime' => 'int',
  ),
  'output_cache_get' => 
  array (
    0 => 'false|mixed',
    'key' => 'string',
    'lifetime' => 'int',
  ),
  'output_cache_output' => 
  array (
    0 => 'string',
    'key' => 'string',
    'function' => 'mixed',
    'lifetime' => 'int',
  ),
  'output_cache_put' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'data' => 'mixed',
  ),
  'output_cache_remove' => 
  array (
    0 => 'bool',
    'filename' => 'mixed',
  ),
  'output_cache_remove_key' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'output_cache_remove_url' => 
  array (
    0 => 'bool',
    'url' => 'string',
  ),
  'output_cache_stop' => 
  array (
    0 => 'void',
  ),
  'output_reset_rewrite_vars' => 
  array (
    0 => 'bool',
  ),
  'outputformatObj::getOption' => 
  array (
    0 => 'string',
    'property_name' => 'string',
  ),
  'outputformatObj::set' => 
  array (
    0 => 'int',
    'property_name' => 'string',
    'new_value' => 'mixed',
  ),
  'outputformatObj::setOption' => 
  array (
    0 => 'void',
    'property_name' => 'string',
    'new_value' => 'string',
  ),
  'outputformatObj::validate' => 
  array (
    0 => 'int',
  ),
  'OverflowException::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'OverflowException::__toString' => 
  array (
    0 => 'string',
  ),
  'OverflowException::getCode' => 
  array (
    0 => 'int',
  ),
  'OverflowException::getFile' => 
  array (
    0 => 'string',
  ),
  'OverflowException::getLine' => 
  array (
    0 => 'int',
  ),
  'OverflowException::getMessage' => 
  array (
    0 => 'string',
  ),
  'OverflowException::getPrevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'OverflowException::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'OverflowException::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'overload' => 
  array (
    0 => 'mixed',
    'class_name' => 'string',
  ),
  'override_function' => 
  array (
    0 => 'bool',
    'function_name' => 'string',
    'function_args' => 'string',
    'function_code' => 'string',
  ),
  'OwsrequestObj::__construct' => 
  array (
    0 => 'void',
  ),
  'OwsrequestObj::addParameter' => 
  array (
    0 => 'int',
    'name' => 'string',
    'value' => 'string',
  ),
  'OwsrequestObj::getName' => 
  array (
    0 => 'string',
    'index' => 'int',
  ),
  'OwsrequestObj::getValue' => 
  array (
    0 => 'string',
    'index' => 'int',
  ),
  'OwsrequestObj::getValueByName' => 
  array (
    0 => 'string',
    'name' => 'string',
  ),
  'OwsrequestObj::loadParams' => 
  array (
    0 => 'int',
  ),
  'OwsrequestObj::setParameter' => 
  array (
    0 => 'int',
    'name' => 'string',
    'value' => 'string',
  ),
  'pack' => 
  array (
    0 => 'string',
    'format' => 'string',
    '...values=' => 'mixed',
  ),
  'parallel\\Future::done' => 
  array (
    0 => 'bool',
  ),
  'parallel\\Future::select' => 
  array (
    0 => 'mixed',
    '&resolving' => 'array<array-key, parallel\\Future>',
    '&w_resolved' => 'array<array-key, parallel\\Future>',
    '&w_errored' => 'array<array-key, parallel\\Future>',
    '&w_timedout=' => 'array<array-key, parallel\\Future>',
    'timeout=' => 'int',
  ),
  'parallel\\Future::value' => 
  array (
    0 => 'mixed',
    'timeout=' => 'int',
  ),
  'parallel\\Runtime::__construct' => 
  array (
    0 => 'void',
    'arg' => 'array<array-key, mixed>|string',
  ),
  'parallel\\Runtime::__construct\'1' => 
  array (
    0 => 'void',
    'bootstrap' => 'string',
    'configuration' => 'array<string, mixed>',
  ),
  'parallel\\Runtime::close' => 
  array (
    0 => 'void',
  ),
  'parallel\\Runtime::kill' => 
  array (
    0 => 'void',
  ),
  'parallel\\Runtime::run' => 
  array (
    0 => 'null|parallel\\Future',
    'closure' => 'Closure',
    'args=' => 'array<array-key, mixed>',
  ),
  'ParentIterator::__construct' => 
  array (
    0 => 'void',
    'iterator' => 'RecursiveIterator',
  ),
  'ParentIterator::accept' => 
  array (
    0 => 'bool',
  ),
  'ParentIterator::getChildren' => 
  array (
    0 => 'ParentIterator|null',
  ),
  'ParentIterator::hasChildren' => 
  array (
    0 => 'bool',
  ),
  'ParentIterator::next' => 
  array (
    0 => 'void',
  ),
  'ParentIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'ParentIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'Parle\\Lexer::advance' => 
  array (
    0 => 'void',
  ),
  'Parle\\Lexer::build' => 
  array (
    0 => 'void',
  ),
  'Parle\\Lexer::callout' => 
  array (
    0 => 'void',
    'id' => 'int',
    'callback' => 'callable',
  ),
  'Parle\\Lexer::consume' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'Parle\\Lexer::dump' => 
  array (
    0 => 'void',
  ),
  'Parle\\Lexer::getToken' => 
  array (
    0 => 'Parle\\Token',
  ),
  'Parle\\Lexer::insertMacro' => 
  array (
    0 => 'void',
    'name' => 'string',
    'regex' => 'string',
  ),
  'Parle\\Lexer::push' => 
  array (
    0 => 'void',
    'regex' => 'string',
    'id' => 'int',
  ),
  'Parle\\Lexer::reset' => 
  array (
    0 => 'void',
    'pos' => 'int',
  ),
  'Parle\\Parser::advance' => 
  array (
    0 => 'void',
  ),
  'Parle\\Parser::build' => 
  array (
    0 => 'void',
  ),
  'Parle\\Parser::consume' => 
  array (
    0 => 'void',
    'data' => 'string',
    'lexer' => 'Parle\\Lexer',
  ),
  'Parle\\Parser::dump' => 
  array (
    0 => 'void',
  ),
  'Parle\\Parser::errorInfo' => 
  array (
    0 => 'Parle\\ErrorInfo',
  ),
  'Parle\\Parser::left' => 
  array (
    0 => 'void',
    'token' => 'string',
  ),
  'Parle\\Parser::nonassoc' => 
  array (
    0 => 'void',
    'token' => 'string',
  ),
  'Parle\\Parser::precedence' => 
  array (
    0 => 'void',
    'token' => 'string',
  ),
  'Parle\\Parser::push' => 
  array (
    0 => 'int',
    'name' => 'string',
    'rule' => 'string',
  ),
  'Parle\\Parser::reset' => 
  array (
    0 => 'void',
    'tokenId' => 'int',
  ),
  'Parle\\Parser::right' => 
  array (
    0 => 'void',
    'token' => 'string',
  ),
  'Parle\\Parser::sigil' => 
  array (
    0 => 'string',
    'idx' => 'array<array-key, mixed>',
  ),
  'Parle\\Parser::token' => 
  array (
    0 => 'void',
    'token' => 'string',
  ),
  'Parle\\Parser::tokenId' => 
  array (
    0 => 'int',
    'token' => 'string',
  ),
  'Parle\\Parser::trace' => 
  array (
    0 => 'string',
  ),
  'Parle\\Parser::validate' => 
  array (
    0 => 'bool',
    'data' => 'string',
    'lexer' => 'Parle\\Lexer',
  ),
  'Parle\\RLexer::advance' => 
  array (
    0 => 'void',
  ),
  'Parle\\RLexer::build' => 
  array (
    0 => 'void',
  ),
  'Parle\\RLexer::callout' => 
  array (
    0 => 'void',
    'id' => 'int',
    'callback' => 'callable',
  ),
  'Parle\\RLexer::consume' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'Parle\\RLexer::dump' => 
  array (
    0 => 'void',
  ),
  'Parle\\RLexer::getToken' => 
  array (
    0 => 'Parle\\Token',
  ),
  'parle\\rlexer::insertMacro' => 
  array (
    0 => 'void',
    'name' => 'string',
    'regex' => 'string',
  ),
  'Parle\\RLexer::push' => 
  array (
    0 => 'void',
    'state' => 'string',
    'regex' => 'string',
    'newState' => 'string',
  ),
  'Parle\\RLexer::pushState' => 
  array (
    0 => 'int',
    'state' => 'string',
  ),
  'Parle\\RLexer::reset' => 
  array (
    0 => 'void',
    'pos' => 'int',
  ),
  'Parle\\RParser::advance' => 
  array (
    0 => 'void',
  ),
  'Parle\\RParser::build' => 
  array (
    0 => 'void',
  ),
  'Parle\\RParser::consume' => 
  array (
    0 => 'void',
    'data' => 'string',
    'lexer' => 'Parle\\Lexer',
  ),
  'Parle\\RParser::dump' => 
  array (
    0 => 'void',
  ),
  'Parle\\RParser::errorInfo' => 
  array (
    0 => 'Parle\\ErrorInfo',
  ),
  'Parle\\RParser::left' => 
  array (
    0 => 'void',
    'token' => 'string',
  ),
  'Parle\\RParser::nonassoc' => 
  array (
    0 => 'void',
    'token' => 'string',
  ),
  'Parle\\RParser::precedence' => 
  array (
    0 => 'void',
    'token' => 'string',
  ),
  'Parle\\RParser::push' => 
  array (
    0 => 'int',
    'name' => 'string',
    'rule' => 'string',
  ),
  'Parle\\RParser::reset' => 
  array (
    0 => 'void',
    'tokenId' => 'int',
  ),
  'Parle\\RParser::right' => 
  array (
    0 => 'void',
    'token' => 'string',
  ),
  'Parle\\RParser::sigil' => 
  array (
    0 => 'string',
    'idx' => 'array<array-key, mixed>',
  ),
  'Parle\\RParser::token' => 
  array (
    0 => 'void',
    'token' => 'string',
  ),
  'Parle\\RParser::tokenId' => 
  array (
    0 => 'int',
    'token' => 'string',
  ),
  'Parle\\RParser::trace' => 
  array (
    0 => 'string',
  ),
  'Parle\\RParser::validate' => 
  array (
    0 => 'bool',
    'data' => 'string',
    'lexer' => 'Parle\\Lexer',
  ),
  'Parle\\Stack::pop' => 
  array (
    0 => 'void',
  ),
  'Parle\\Stack::push' => 
  array (
    0 => 'void',
    'item' => 'mixed',
  ),
  'parse_ini_file' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'filename' => 'string',
    'process_sections=' => 'bool',
    'scanner_mode=' => 'int',
  ),
  'parse_ini_string' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'ini_string' => 'string',
    'process_sections=' => 'bool',
    'scanner_mode=' => 'int',
  ),
  'parse_str' => 
  array (
    0 => 'void',
    'string' => 'string',
    '&w_result' => 'array<array-key, mixed>',
  ),
  'parse_url' => 
  array (
    0 => 'array<array-key, mixed>|false|int|null|string',
    'url' => 'string',
    'component=' => 'int',
  ),
  'ParseError::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'ParseError::__toString' => 
  array (
    0 => 'string',
  ),
  'ParseError::getCode' => 
  array (
    0 => 'int',
  ),
  'ParseError::getFile' => 
  array (
    0 => 'string',
  ),
  'ParseError::getLine' => 
  array (
    0 => 'int',
  ),
  'ParseError::getMessage' => 
  array (
    0 => 'string',
  ),
  'ParseError::getPrevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'ParseError::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'ParseError::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'parsekit_compile_file' => 
  array (
    0 => 'array<array-key, mixed>',
    'filename' => 'string',
    'errors=' => 'array<array-key, mixed>',
    'options=' => 'int',
  ),
  'parsekit_compile_string' => 
  array (
    0 => 'array<array-key, mixed>',
    'phpcode' => 'string',
    'errors=' => 'array<array-key, mixed>',
    'options=' => 'int',
  ),
  'parsekit_func_arginfo' => 
  array (
    0 => 'array<array-key, mixed>',
    'function' => 'mixed',
  ),
  'passthru' => 
  array (
    0 => 'void',
    'command' => 'string',
    '&w_result_code=' => 'int',
  ),
  'password_get_info' => 
  array (
    0 => 'array<array-key, mixed>',
    'hash' => 'string',
  ),
  'password_hash' => 
  array (
    0 => 'string',
    'password' => 'string',
    'algo' => 'int|null|string',
    'options=' => 'array<array-key, mixed>',
  ),
  'password_make_salt' => 
  array (
    0 => 'bool',
    'password' => 'string',
    'hash' => 'string',
  ),
  'password_needs_rehash' => 
  array (
    0 => 'bool',
    'hash' => 'string',
    'algo' => 'int|null|string',
    'options=' => 'array<array-key, mixed>',
  ),
  'password_verify' => 
  array (
    0 => 'bool',
    'password' => 'string',
    'hash' => 'string',
  ),
  'pathinfo' => 
  array (
    0 => 'array<array-key, mixed>|string',
    'path' => 'string',
    'flags=' => 'int',
  ),
  'pclose' => 
  array (
    0 => 'int',
    'handle' => 'resource',
  ),
  'pcnlt_sigwaitinfo' => 
  array (
    0 => 'int',
    'set' => 'array<array-key, mixed>',
    '&w_siginfo' => 'array<array-key, mixed>',
  ),
  'pcntl_alarm' => 
  array (
    0 => 'int',
    'seconds' => 'int',
  ),
  'pcntl_async_signals' => 
  array (
    0 => 'bool',
    'enable=' => 'bool|null',
  ),
  'pcntl_errno' => 
  array (
    0 => 'int',
  ),
  'pcntl_exec' => 
  array (
    0 => 'false',
    'path' => 'string',
    'args=' => 'array<array-key, mixed>',
    'env_vars=' => 'array<array-key, mixed>',
  ),
  'pcntl_fork' => 
  array (
    0 => 'int',
  ),
  'pcntl_get_last_error' => 
  array (
    0 => 'int',
  ),
  'pcntl_getpriority' => 
  array (
    0 => 'int',
    'process_id=' => 'int|null',
    'mode=' => 'int',
  ),
  'pcntl_setpriority' => 
  array (
    0 => 'bool',
    'priority' => 'int',
    'process_id=' => 'int|null',
    'mode=' => 'int',
  ),
  'pcntl_signal' => 
  array (
    0 => 'bool',
    'signal' => 'int',
    'handler' => 'callable():void|callable(int):void|callable(int, array<array-key, mixed>):void|int',
    'restart_syscalls=' => 'bool',
  ),
  'pcntl_signal_dispatch' => 
  array (
    0 => 'bool',
  ),
  'pcntl_signal_get_handler' => 
  array (
    0 => 'int|string',
    'signal' => 'int',
  ),
  'pcntl_sigprocmask' => 
  array (
    0 => 'bool',
    'mode' => 'int',
    'signals' => 'array<array-key, mixed>',
    '&w_old_signals=' => 'array<array-key, mixed>',
  ),
  'pcntl_sigtimedwait' => 
  array (
    0 => 'int',
    'signals' => 'array<array-key, mixed>',
    '&w_info=' => 'array<array-key, mixed>',
    'seconds=' => 'int',
    'nanoseconds=' => 'int',
  ),
  'pcntl_sigwaitinfo' => 
  array (
    0 => 'int',
    'signals' => 'array<array-key, mixed>',
    '&w_info=' => 'array<array-key, mixed>',
  ),
  'pcntl_strerror' => 
  array (
    0 => 'string',
    'error_code' => 'int',
  ),
  'pcntl_wait' => 
  array (
    0 => 'int',
    '&w_status' => 'int',
    'flags=' => 'int',
    '&w_resource_usage=' => 'array<array-key, mixed>',
  ),
  'pcntl_waitpid' => 
  array (
    0 => 'int',
    'process_id' => 'int',
    '&w_status' => 'int',
    'flags=' => 'int',
    '&w_resource_usage=' => 'array<array-key, mixed>',
  ),
  'pcntl_wexitstatus' => 
  array (
    0 => 'int',
    'status' => 'int',
  ),
  'pcntl_wifcontinued' => 
  array (
    0 => 'bool',
    'status' => 'int',
  ),
  'pcntl_wifexited' => 
  array (
    0 => 'bool',
    'status' => 'int',
  ),
  'pcntl_wifsignaled' => 
  array (
    0 => 'bool',
    'status' => 'int',
  ),
  'pcntl_wifstopped' => 
  array (
    0 => 'bool',
    'status' => 'int',
  ),
  'pcntl_wstopsig' => 
  array (
    0 => 'int',
    'status' => 'int',
  ),
  'pcntl_wtermsig' => 
  array (
    0 => 'int',
    'status' => 'int',
  ),
  'PDF_activate_item' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'id' => 'int',
  ),
  'PDF_add_launchlink' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'filename' => 'string',
  ),
  'PDF_add_locallink' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'lowerleftx' => 'float',
    'lowerlefty' => 'float',
    'upperrightx' => 'float',
    'upperrighty' => 'float',
    'page' => 'int',
    'dest' => 'string',
  ),
  'PDF_add_nameddest' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'name' => 'string',
    'optlist' => 'string',
  ),
  'PDF_add_note' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'contents' => 'string',
    'title' => 'string',
    'icon' => 'string',
    'open' => 'int',
  ),
  'PDF_add_pdflink' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'bottom_left_x' => 'float',
    'bottom_left_y' => 'float',
    'up_right_x' => 'float',
    'up_right_y' => 'float',
    'filename' => 'string',
    'page' => 'int',
    'dest' => 'string',
  ),
  'PDF_add_table_cell' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'table' => 'int',
    'column' => 'int',
    'row' => 'int',
    'text' => 'string',
    'optlist' => 'string',
  ),
  'PDF_add_textflow' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'textflow' => 'int',
    'text' => 'string',
    'optlist' => 'string',
  ),
  'PDF_add_thumbnail' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'image' => 'int',
  ),
  'PDF_add_weblink' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'lowerleftx' => 'float',
    'lowerlefty' => 'float',
    'upperrightx' => 'float',
    'upperrighty' => 'float',
    'url' => 'string',
  ),
  'PDF_arc' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'x' => 'float',
    'y' => 'float',
    'r' => 'float',
    'alpha' => 'float',
    'beta' => 'float',
  ),
  'PDF_arcn' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'x' => 'float',
    'y' => 'float',
    'r' => 'float',
    'alpha' => 'float',
    'beta' => 'float',
  ),
  'PDF_attach_file' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'filename' => 'string',
    'description' => 'string',
    'author' => 'string',
    'mimetype' => 'string',
    'icon' => 'string',
  ),
  'PDF_begin_document' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'filename' => 'string',
    'optlist' => 'string',
  ),
  'PDF_begin_font' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'filename' => 'string',
    'a' => 'float',
    'b' => 'float',
    'c' => 'float',
    'd' => 'float',
    'e' => 'float',
    'f' => 'float',
    'optlist' => 'string',
  ),
  'PDF_begin_glyph' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'glyphname' => 'string',
    'wx' => 'float',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
  ),
  'PDF_begin_item' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'tag' => 'string',
    'optlist' => 'string',
  ),
  'PDF_begin_layer' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'layer' => 'int',
  ),
  'PDF_begin_page' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'width' => 'float',
    'height' => 'float',
  ),
  'PDF_begin_page_ext' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'width' => 'float',
    'height' => 'float',
    'optlist' => 'string',
  ),
  'PDF_begin_pattern' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'width' => 'float',
    'height' => 'float',
    'xstep' => 'float',
    'ystep' => 'float',
    'painttype' => 'int',
  ),
  'PDF_begin_template' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'width' => 'float',
    'height' => 'float',
  ),
  'PDF_begin_template_ext' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'width' => 'float',
    'height' => 'float',
    'optlist' => 'string',
  ),
  'PDF_circle' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'x' => 'float',
    'y' => 'float',
    'r' => 'float',
  ),
  'PDF_clip' => 
  array (
    0 => 'bool',
    'p' => 'resource',
  ),
  'PDF_close' => 
  array (
    0 => 'bool',
    'p' => 'resource',
  ),
  'PDF_close_image' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'image' => 'int',
  ),
  'PDF_close_pdi' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'doc' => 'int',
  ),
  'PDF_close_pdi_page' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'page' => 'int',
  ),
  'PDF_closepath' => 
  array (
    0 => 'bool',
    'p' => 'resource',
  ),
  'PDF_closepath_fill_stroke' => 
  array (
    0 => 'bool',
    'p' => 'resource',
  ),
  'PDF_closepath_stroke' => 
  array (
    0 => 'bool',
    'p' => 'resource',
  ),
  'PDF_concat' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'a' => 'float',
    'b' => 'float',
    'c' => 'float',
    'd' => 'float',
    'e' => 'float',
    'f' => 'float',
  ),
  'PDF_continue_text' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'text' => 'string',
  ),
  'PDF_create_3dview' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'username' => 'string',
    'optlist' => 'string',
  ),
  'PDF_create_action' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'type' => 'string',
    'optlist' => 'string',
  ),
  'PDF_create_annotation' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'type' => 'string',
    'optlist' => 'string',
  ),
  'PDF_create_bookmark' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'text' => 'string',
    'optlist' => 'string',
  ),
  'PDF_create_field' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'name' => 'string',
    'type' => 'string',
    'optlist' => 'string',
  ),
  'PDF_create_fieldgroup' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'name' => 'string',
    'optlist' => 'string',
  ),
  'PDF_create_gstate' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'optlist' => 'string',
  ),
  'PDF_create_pvf' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'filename' => 'string',
    'data' => 'string',
    'optlist' => 'string',
  ),
  'PDF_create_textflow' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'text' => 'string',
    'optlist' => 'string',
  ),
  'PDF_curveto' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'x1' => 'float',
    'y1' => 'float',
    'x2' => 'float',
    'y2' => 'float',
    'x3' => 'float',
    'y3' => 'float',
  ),
  'PDF_define_layer' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'name' => 'string',
    'optlist' => 'string',
  ),
  'PDF_delete' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
  ),
  'PDF_delete_pvf' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'filename' => 'string',
  ),
  'PDF_delete_table' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'table' => 'int',
    'optlist' => 'string',
  ),
  'PDF_delete_textflow' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'textflow' => 'int',
  ),
  'PDF_encoding_set_char' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'encoding' => 'string',
    'slot' => 'int',
    'glyphname' => 'string',
    'uv' => 'int',
  ),
  'PDF_end_document' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'optlist' => 'string',
  ),
  'PDF_end_font' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
  ),
  'PDF_end_glyph' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
  ),
  'PDF_end_item' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'id' => 'int',
  ),
  'PDF_end_layer' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
  ),
  'PDF_end_page' => 
  array (
    0 => 'bool',
    'p' => 'resource',
  ),
  'PDF_end_page_ext' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'optlist' => 'string',
  ),
  'PDF_end_pattern' => 
  array (
    0 => 'bool',
    'p' => 'resource',
  ),
  'PDF_end_template' => 
  array (
    0 => 'bool',
    'p' => 'resource',
  ),
  'PDF_endpath' => 
  array (
    0 => 'bool',
    'p' => 'resource',
  ),
  'PDF_fill' => 
  array (
    0 => 'bool',
    'p' => 'resource',
  ),
  'PDF_fill_imageblock' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'page' => 'int',
    'blockname' => 'string',
    'image' => 'int',
    'optlist' => 'string',
  ),
  'PDF_fill_pdfblock' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'page' => 'int',
    'blockname' => 'string',
    'contents' => 'int',
    'optlist' => 'string',
  ),
  'PDF_fill_stroke' => 
  array (
    0 => 'bool',
    'p' => 'resource',
  ),
  'PDF_fill_textblock' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'page' => 'int',
    'blockname' => 'string',
    'text' => 'string',
    'optlist' => 'string',
  ),
  'PDF_findfont' => 
  array (
    0 => 'int',
    'p' => 'resource',
    'fontname' => 'string',
    'encoding' => 'string',
    'embed' => 'int',
  ),
  'PDF_fit_image' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'image' => 'int',
    'x' => 'float',
    'y' => 'float',
    'optlist' => 'string',
  ),
  'PDF_fit_pdi_page' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'page' => 'int',
    'x' => 'float',
    'y' => 'float',
    'optlist' => 'string',
  ),
  'PDF_fit_table' => 
  array (
    0 => 'string',
    'pdfdoc' => 'resource',
    'table' => 'int',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'optlist' => 'string',
  ),
  'PDF_fit_textflow' => 
  array (
    0 => 'string',
    'pdfdoc' => 'resource',
    'textflow' => 'int',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'optlist' => 'string',
  ),
  'PDF_fit_textline' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'text' => 'string',
    'x' => 'float',
    'y' => 'float',
    'optlist' => 'string',
  ),
  'PDF_get_apiname' => 
  array (
    0 => 'string',
    'pdfdoc' => 'resource',
  ),
  'PDF_get_buffer' => 
  array (
    0 => 'string',
    'p' => 'resource',
  ),
  'PDF_get_errmsg' => 
  array (
    0 => 'string',
    'pdfdoc' => 'resource',
  ),
  'PDF_get_errnum' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
  ),
  'PDF_get_majorversion' => 
  array (
    0 => 'int',
  ),
  'PDF_get_minorversion' => 
  array (
    0 => 'int',
  ),
  'PDF_get_parameter' => 
  array (
    0 => 'string',
    'p' => 'resource',
    'key' => 'string',
    'modifier' => 'float',
  ),
  'PDF_get_pdi_parameter' => 
  array (
    0 => 'string',
    'p' => 'resource',
    'key' => 'string',
    'doc' => 'int',
    'page' => 'int',
    'reserved' => 'int',
  ),
  'PDF_get_pdi_value' => 
  array (
    0 => 'float',
    'p' => 'resource',
    'key' => 'string',
    'doc' => 'int',
    'page' => 'int',
    'reserved' => 'int',
  ),
  'PDF_get_value' => 
  array (
    0 => 'float',
    'p' => 'resource',
    'key' => 'string',
    'modifier' => 'float',
  ),
  'PDF_info_font' => 
  array (
    0 => 'float',
    'pdfdoc' => 'resource',
    'font' => 'int',
    'keyword' => 'string',
    'optlist' => 'string',
  ),
  'PDF_info_matchbox' => 
  array (
    0 => 'float',
    'pdfdoc' => 'resource',
    'boxname' => 'string',
    'num' => 'int',
    'keyword' => 'string',
  ),
  'PDF_info_table' => 
  array (
    0 => 'float',
    'pdfdoc' => 'resource',
    'table' => 'int',
    'keyword' => 'string',
  ),
  'PDF_info_textflow' => 
  array (
    0 => 'float',
    'pdfdoc' => 'resource',
    'textflow' => 'int',
    'keyword' => 'string',
  ),
  'PDF_info_textline' => 
  array (
    0 => 'float',
    'pdfdoc' => 'resource',
    'text' => 'string',
    'keyword' => 'string',
    'optlist' => 'string',
  ),
  'PDF_initgraphics' => 
  array (
    0 => 'bool',
    'p' => 'resource',
  ),
  'PDF_lineto' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'x' => 'float',
    'y' => 'float',
  ),
  'PDF_load_3ddata' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'filename' => 'string',
    'optlist' => 'string',
  ),
  'PDF_load_font' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'fontname' => 'string',
    'encoding' => 'string',
    'optlist' => 'string',
  ),
  'PDF_load_iccprofile' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'profilename' => 'string',
    'optlist' => 'string',
  ),
  'PDF_load_image' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'imagetype' => 'string',
    'filename' => 'string',
    'optlist' => 'string',
  ),
  'PDF_makespotcolor' => 
  array (
    0 => 'int',
    'p' => 'resource',
    'spotname' => 'string',
  ),
  'PDF_moveto' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'x' => 'float',
    'y' => 'float',
  ),
  'PDF_new' => 
  array (
    0 => 'resource',
  ),
  'PDF_open_ccitt' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'filename' => 'string',
    'width' => 'int',
    'height' => 'int',
    'bitreverse' => 'int',
    'k' => 'int',
    'blackls1' => 'int',
  ),
  'PDF_open_file' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'filename' => 'string',
  ),
  'PDF_open_image' => 
  array (
    0 => 'int',
    'p' => 'resource',
    'imagetype' => 'string',
    'source' => 'string',
    'data' => 'string',
    'length' => 'int',
    'width' => 'int',
    'height' => 'int',
    'components' => 'int',
    'bpc' => 'int',
    'params' => 'string',
  ),
  'PDF_open_image_file' => 
  array (
    0 => 'int',
    'p' => 'resource',
    'imagetype' => 'string',
    'filename' => 'string',
    'stringparam' => 'string',
    'intparam' => 'int',
  ),
  'PDF_open_memory_image' => 
  array (
    0 => 'int',
    'p' => 'resource',
    'image' => 'resource',
  ),
  'PDF_open_pdi' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'filename' => 'string',
    'optlist' => 'string',
    'length' => 'int',
  ),
  'PDF_open_pdi_document' => 
  array (
    0 => 'int',
    'p' => 'resource',
    'filename' => 'string',
    'optlist' => 'string',
  ),
  'PDF_open_pdi_page' => 
  array (
    0 => 'int',
    'p' => 'resource',
    'doc' => 'int',
    'pagenumber' => 'int',
    'optlist' => 'string',
  ),
  'PDF_pcos_get_number' => 
  array (
    0 => 'float',
    'p' => 'resource',
    'doc' => 'int',
    'path' => 'string',
  ),
  'PDF_pcos_get_stream' => 
  array (
    0 => 'string',
    'p' => 'resource',
    'doc' => 'int',
    'optlist' => 'string',
    'path' => 'string',
  ),
  'PDF_pcos_get_string' => 
  array (
    0 => 'string',
    'p' => 'resource',
    'doc' => 'int',
    'path' => 'string',
  ),
  'PDF_place_image' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'image' => 'int',
    'x' => 'float',
    'y' => 'float',
    'scale' => 'float',
  ),
  'PDF_place_pdi_page' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'page' => 'int',
    'x' => 'float',
    'y' => 'float',
    'sx' => 'float',
    'sy' => 'float',
  ),
  'PDF_process_pdi' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'doc' => 'int',
    'page' => 'int',
    'optlist' => 'string',
  ),
  'PDF_rect' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'x' => 'float',
    'y' => 'float',
    'width' => 'float',
    'height' => 'float',
  ),
  'PDF_restore' => 
  array (
    0 => 'bool',
    'p' => 'resource',
  ),
  'PDF_resume_page' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'optlist' => 'string',
  ),
  'PDF_rotate' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'phi' => 'float',
  ),
  'PDF_save' => 
  array (
    0 => 'bool',
    'p' => 'resource',
  ),
  'PDF_scale' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'sx' => 'float',
    'sy' => 'float',
  ),
  'PDF_set_border_color' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'red' => 'float',
    'green' => 'float',
    'blue' => 'float',
  ),
  'PDF_set_border_dash' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'black' => 'float',
    'white' => 'float',
  ),
  'PDF_set_border_style' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'style' => 'string',
    'width' => 'float',
  ),
  'PDF_set_gstate' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'gstate' => 'int',
  ),
  'PDF_set_info' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'key' => 'string',
    'value' => 'string',
  ),
  'PDF_set_layer_dependency' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'type' => 'string',
    'optlist' => 'string',
  ),
  'PDF_set_parameter' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'key' => 'string',
    'value' => 'string',
  ),
  'PDF_set_text_pos' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'x' => 'float',
    'y' => 'float',
  ),
  'PDF_set_value' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'key' => 'string',
    'value' => 'float',
  ),
  'PDF_setcolor' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'fstype' => 'string',
    'colorspace' => 'string',
    'c1' => 'float',
    'c2' => 'float',
    'c3' => 'float',
    'c4' => 'float',
  ),
  'PDF_setdash' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'b' => 'float',
    'w' => 'float',
  ),
  'PDF_setdashpattern' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'optlist' => 'string',
  ),
  'PDF_setflat' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'flatness' => 'float',
  ),
  'PDF_setfont' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'font' => 'int',
    'fontsize' => 'float',
  ),
  'PDF_setgray' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'g' => 'float',
  ),
  'PDF_setgray_fill' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'g' => 'float',
  ),
  'PDF_setgray_stroke' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'g' => 'float',
  ),
  'PDF_setlinecap' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'linecap' => 'int',
  ),
  'PDF_setlinejoin' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'value' => 'int',
  ),
  'PDF_setlinewidth' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'width' => 'float',
  ),
  'PDF_setmatrix' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'a' => 'float',
    'b' => 'float',
    'c' => 'float',
    'd' => 'float',
    'e' => 'float',
    'f' => 'float',
  ),
  'PDF_setmiterlimit' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'miter' => 'float',
  ),
  'PDF_setrgbcolor' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'red' => 'float',
    'green' => 'float',
    'blue' => 'float',
  ),
  'PDF_setrgbcolor_fill' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'red' => 'float',
    'green' => 'float',
    'blue' => 'float',
  ),
  'PDF_setrgbcolor_stroke' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'red' => 'float',
    'green' => 'float',
    'blue' => 'float',
  ),
  'PDF_shading' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'shtype' => 'string',
    'x0' => 'float',
    'y0' => 'float',
    'x1' => 'float',
    'y1' => 'float',
    'c1' => 'float',
    'c2' => 'float',
    'c3' => 'float',
    'c4' => 'float',
    'optlist' => 'string',
  ),
  'PDF_shading_pattern' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'shading' => 'int',
    'optlist' => 'string',
  ),
  'PDF_shfill' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'shading' => 'int',
  ),
  'PDF_show' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'text' => 'string',
  ),
  'PDF_show_boxed' => 
  array (
    0 => 'int',
    'p' => 'resource',
    'text' => 'string',
    'left' => 'float',
    'top' => 'float',
    'width' => 'float',
    'height' => 'float',
    'mode' => 'string',
    'feature' => 'string',
  ),
  'PDF_show_xy' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'text' => 'string',
    'x' => 'float',
    'y' => 'float',
  ),
  'PDF_skew' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'alpha' => 'float',
    'beta' => 'float',
  ),
  'PDF_stringwidth' => 
  array (
    0 => 'float',
    'p' => 'resource',
    'text' => 'string',
    'font' => 'int',
    'fontsize' => 'float',
  ),
  'PDF_stroke' => 
  array (
    0 => 'bool',
    'p' => 'resource',
  ),
  'PDF_suspend_page' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'optlist' => 'string',
  ),
  'PDF_translate' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'tx' => 'float',
    'ty' => 'float',
  ),
  'PDF_utf16_to_utf8' => 
  array (
    0 => 'string',
    'pdfdoc' => 'resource',
    'utf16string' => 'string',
  ),
  'PDF_utf32_to_utf16' => 
  array (
    0 => 'string',
    'pdfdoc' => 'resource',
    'utf32string' => 'string',
    'ordering' => 'string',
  ),
  'PDF_utf8_to_utf16' => 
  array (
    0 => 'string',
    'pdfdoc' => 'resource',
    'utf8string' => 'string',
    'ordering' => 'string',
  ),
  'PDFlib::activate_item' => 
  array (
    0 => 'bool',
    'id' => 'mixed',
  ),
  'PDFlib::add_launchlink' => 
  array (
    0 => 'bool',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'filename' => 'string',
  ),
  'PDFlib::add_locallink' => 
  array (
    0 => 'bool',
    'lowerleftx' => 'float',
    'lowerlefty' => 'float',
    'upperrightx' => 'float',
    'upperrighty' => 'float',
    'page' => 'int',
    'dest' => 'string',
  ),
  'PDFlib::add_nameddest' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'optlist' => 'string',
  ),
  'PDFlib::add_note' => 
  array (
    0 => 'bool',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'contents' => 'string',
    'title' => 'string',
    'icon' => 'string',
    'open' => 'int',
  ),
  'PDFlib::add_pdflink' => 
  array (
    0 => 'bool',
    'bottom_left_x' => 'float',
    'bottom_left_y' => 'float',
    'up_right_x' => 'float',
    'up_right_y' => 'float',
    'filename' => 'string',
    'page' => 'int',
    'dest' => 'string',
  ),
  'PDFlib::add_table_cell' => 
  array (
    0 => 'int',
    'table' => 'int',
    'column' => 'int',
    'row' => 'int',
    'text' => 'string',
    'optlist' => 'string',
  ),
  'PDFlib::add_textflow' => 
  array (
    0 => 'int',
    'textflow' => 'int',
    'text' => 'string',
    'optlist' => 'string',
  ),
  'PDFlib::add_thumbnail' => 
  array (
    0 => 'bool',
    'image' => 'int',
  ),
  'PDFlib::add_weblink' => 
  array (
    0 => 'bool',
    'lowerleftx' => 'float',
    'lowerlefty' => 'float',
    'upperrightx' => 'float',
    'upperrighty' => 'float',
    'url' => 'string',
  ),
  'PDFlib::arc' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
    'r' => 'float',
    'alpha' => 'float',
    'beta' => 'float',
  ),
  'PDFlib::arcn' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
    'r' => 'float',
    'alpha' => 'float',
    'beta' => 'float',
  ),
  'PDFlib::attach_file' => 
  array (
    0 => 'bool',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'filename' => 'string',
    'description' => 'string',
    'author' => 'string',
    'mimetype' => 'string',
    'icon' => 'string',
  ),
  'PDFlib::begin_document' => 
  array (
    0 => 'int',
    'filename' => 'string',
    'optlist' => 'string',
  ),
  'PDFlib::begin_font' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'a' => 'float',
    'b' => 'float',
    'c' => 'float',
    'd' => 'float',
    'e' => 'float',
    'f' => 'float',
    'optlist' => 'string',
  ),
  'PDFlib::begin_glyph' => 
  array (
    0 => 'bool',
    'glyphname' => 'string',
    'wx' => 'float',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
  ),
  'PDFlib::begin_item' => 
  array (
    0 => 'int',
    'tag' => 'string',
    'optlist' => 'string',
  ),
  'PDFlib::begin_layer' => 
  array (
    0 => 'bool',
    'layer' => 'int',
  ),
  'PDFlib::begin_page' => 
  array (
    0 => 'bool',
    'width' => 'float',
    'height' => 'float',
  ),
  'PDFlib::begin_page_ext' => 
  array (
    0 => 'bool',
    'width' => 'float',
    'height' => 'float',
    'optlist' => 'string',
  ),
  'PDFlib::begin_pattern' => 
  array (
    0 => 'int',
    'width' => 'float',
    'height' => 'float',
    'xstep' => 'float',
    'ystep' => 'float',
    'painttype' => 'int',
  ),
  'PDFlib::begin_template' => 
  array (
    0 => 'int',
    'width' => 'float',
    'height' => 'float',
  ),
  'PDFlib::begin_template_ext' => 
  array (
    0 => 'int',
    'width' => 'float',
    'height' => 'float',
    'optlist' => 'string',
  ),
  'PDFlib::circle' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
    'r' => 'float',
  ),
  'PDFlib::clip' => 
  array (
    0 => 'bool',
  ),
  'PDFlib::close' => 
  array (
    0 => 'bool',
  ),
  'PDFlib::close_image' => 
  array (
    0 => 'bool',
    'image' => 'int',
  ),
  'PDFlib::close_pdi' => 
  array (
    0 => 'bool',
    'doc' => 'int',
  ),
  'PDFlib::close_pdi_page' => 
  array (
    0 => 'bool',
    'page' => 'int',
  ),
  'PDFlib::closepath' => 
  array (
    0 => 'bool',
  ),
  'PDFlib::closepath_fill_stroke' => 
  array (
    0 => 'bool',
  ),
  'PDFlib::closepath_stroke' => 
  array (
    0 => 'bool',
  ),
  'PDFlib::concat' => 
  array (
    0 => 'bool',
    'a' => 'float',
    'b' => 'float',
    'c' => 'float',
    'd' => 'float',
    'e' => 'float',
    'f' => 'float',
  ),
  'PDFlib::continue_text' => 
  array (
    0 => 'bool',
    'text' => 'string',
  ),
  'PDFlib::create_3dview' => 
  array (
    0 => 'int',
    'username' => 'string',
    'optlist' => 'string',
  ),
  'PDFlib::create_action' => 
  array (
    0 => 'int',
    'type' => 'string',
    'optlist' => 'string',
  ),
  'PDFlib::create_annotation' => 
  array (
    0 => 'bool',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'type' => 'string',
    'optlist' => 'string',
  ),
  'PDFlib::create_bookmark' => 
  array (
    0 => 'int',
    'text' => 'string',
    'optlist' => 'string',
  ),
  'PDFlib::create_field' => 
  array (
    0 => 'bool',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'name' => 'string',
    'type' => 'string',
    'optlist' => 'string',
  ),
  'PDFlib::create_fieldgroup' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'optlist' => 'string',
  ),
  'PDFlib::create_gstate' => 
  array (
    0 => 'int',
    'optlist' => 'string',
  ),
  'PDFlib::create_pvf' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'data' => 'string',
    'optlist' => 'string',
  ),
  'PDFlib::create_textflow' => 
  array (
    0 => 'int',
    'text' => 'string',
    'optlist' => 'string',
  ),
  'PDFlib::curveto' => 
  array (
    0 => 'bool',
    'x1' => 'float',
    'y1' => 'float',
    'x2' => 'float',
    'y2' => 'float',
    'x3' => 'float',
    'y3' => 'float',
  ),
  'PDFlib::define_layer' => 
  array (
    0 => 'int',
    'name' => 'string',
    'optlist' => 'string',
  ),
  'PDFlib::delete' => 
  array (
    0 => 'bool',
  ),
  'PDFlib::delete_pvf' => 
  array (
    0 => 'int',
    'filename' => 'string',
  ),
  'PDFlib::delete_table' => 
  array (
    0 => 'bool',
    'table' => 'int',
    'optlist' => 'string',
  ),
  'PDFlib::delete_textflow' => 
  array (
    0 => 'bool',
    'textflow' => 'int',
  ),
  'PDFlib::encoding_set_char' => 
  array (
    0 => 'bool',
    'encoding' => 'string',
    'slot' => 'int',
    'glyphname' => 'string',
    'uv' => 'int',
  ),
  'PDFlib::end_document' => 
  array (
    0 => 'bool',
    'optlist' => 'string',
  ),
  'PDFlib::end_font' => 
  array (
    0 => 'bool',
  ),
  'PDFlib::end_glyph' => 
  array (
    0 => 'bool',
  ),
  'PDFlib::end_item' => 
  array (
    0 => 'bool',
    'id' => 'int',
  ),
  'PDFlib::end_layer' => 
  array (
    0 => 'bool',
  ),
  'PDFlib::end_page' => 
  array (
    0 => 'bool',
    'p' => 'mixed',
  ),
  'PDFlib::end_page_ext' => 
  array (
    0 => 'bool',
    'optlist' => 'string',
  ),
  'PDFlib::end_pattern' => 
  array (
    0 => 'bool',
    'p' => 'mixed',
  ),
  'PDFlib::end_template' => 
  array (
    0 => 'bool',
    'p' => 'mixed',
  ),
  'PDFlib::endpath' => 
  array (
    0 => 'bool',
    'p' => 'mixed',
  ),
  'PDFlib::fill' => 
  array (
    0 => 'bool',
  ),
  'PDFlib::fill_imageblock' => 
  array (
    0 => 'int',
    'page' => 'int',
    'blockname' => 'string',
    'image' => 'int',
    'optlist' => 'string',
  ),
  'PDFlib::fill_pdfblock' => 
  array (
    0 => 'int',
    'page' => 'int',
    'blockname' => 'string',
    'contents' => 'int',
    'optlist' => 'string',
  ),
  'PDFlib::fill_stroke' => 
  array (
    0 => 'bool',
  ),
  'PDFlib::fill_textblock' => 
  array (
    0 => 'int',
    'page' => 'int',
    'blockname' => 'string',
    'text' => 'string',
    'optlist' => 'string',
  ),
  'PDFlib::findfont' => 
  array (
    0 => 'int',
    'fontname' => 'string',
    'encoding' => 'string',
    'embed' => 'int',
  ),
  'PDFlib::fit_image' => 
  array (
    0 => 'bool',
    'image' => 'int',
    'x' => 'float',
    'y' => 'float',
    'optlist' => 'string',
  ),
  'PDFlib::fit_pdi_page' => 
  array (
    0 => 'bool',
    'page' => 'int',
    'x' => 'float',
    'y' => 'float',
    'optlist' => 'string',
  ),
  'PDFlib::fit_table' => 
  array (
    0 => 'string',
    'table' => 'int',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'optlist' => 'string',
  ),
  'PDFlib::fit_textflow' => 
  array (
    0 => 'string',
    'textflow' => 'int',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'optlist' => 'string',
  ),
  'PDFlib::fit_textline' => 
  array (
    0 => 'bool',
    'text' => 'string',
    'x' => 'float',
    'y' => 'float',
    'optlist' => 'string',
  ),
  'PDFlib::get_apiname' => 
  array (
    0 => 'string',
  ),
  'PDFlib::get_buffer' => 
  array (
    0 => 'string',
  ),
  'PDFlib::get_errmsg' => 
  array (
    0 => 'string',
  ),
  'PDFlib::get_errnum' => 
  array (
    0 => 'int',
  ),
  'PDFlib::get_majorversion' => 
  array (
    0 => 'int',
  ),
  'PDFlib::get_minorversion' => 
  array (
    0 => 'int',
  ),
  'PDFlib::get_parameter' => 
  array (
    0 => 'string',
    'key' => 'string',
    'modifier' => 'float',
  ),
  'PDFlib::get_pdi_parameter' => 
  array (
    0 => 'string',
    'key' => 'string',
    'doc' => 'int',
    'page' => 'int',
    'reserved' => 'int',
  ),
  'PDFlib::get_pdi_value' => 
  array (
    0 => 'float',
    'key' => 'string',
    'doc' => 'int',
    'page' => 'int',
    'reserved' => 'int',
  ),
  'PDFlib::get_value' => 
  array (
    0 => 'float',
    'key' => 'string',
    'modifier' => 'float',
  ),
  'PDFlib::info_font' => 
  array (
    0 => 'float',
    'font' => 'int',
    'keyword' => 'string',
    'optlist' => 'string',
  ),
  'PDFlib::info_matchbox' => 
  array (
    0 => 'float',
    'boxname' => 'string',
    'num' => 'int',
    'keyword' => 'string',
  ),
  'PDFlib::info_table' => 
  array (
    0 => 'float',
    'table' => 'int',
    'keyword' => 'string',
  ),
  'PDFlib::info_textflow' => 
  array (
    0 => 'float',
    'textflow' => 'int',
    'keyword' => 'string',
  ),
  'PDFlib::info_textline' => 
  array (
    0 => 'float',
    'text' => 'string',
    'keyword' => 'string',
    'optlist' => 'string',
  ),
  'PDFlib::initgraphics' => 
  array (
    0 => 'bool',
  ),
  'PDFlib::lineto' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'PDFlib::load_3ddata' => 
  array (
    0 => 'int',
    'filename' => 'string',
    'optlist' => 'string',
  ),
  'PDFlib::load_font' => 
  array (
    0 => 'int',
    'fontname' => 'string',
    'encoding' => 'string',
    'optlist' => 'string',
  ),
  'PDFlib::load_iccprofile' => 
  array (
    0 => 'int',
    'profilename' => 'string',
    'optlist' => 'string',
  ),
  'PDFlib::load_image' => 
  array (
    0 => 'int',
    'imagetype' => 'string',
    'filename' => 'string',
    'optlist' => 'string',
  ),
  'PDFlib::makespotcolor' => 
  array (
    0 => 'int',
    'spotname' => 'string',
  ),
  'PDFlib::moveto' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'PDFlib::open_ccitt' => 
  array (
    0 => 'int',
    'filename' => 'string',
    'width' => 'int',
    'height' => 'int',
    'BitReverse' => 'int',
    'k' => 'int',
    'Blackls1' => 'int',
  ),
  'PDFlib::open_file' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'PDFlib::open_image' => 
  array (
    0 => 'int',
    'imagetype' => 'string',
    'source' => 'string',
    'data' => 'string',
    'length' => 'int',
    'width' => 'int',
    'height' => 'int',
    'components' => 'int',
    'bpc' => 'int',
    'params' => 'string',
  ),
  'PDFlib::open_image_file' => 
  array (
    0 => 'int',
    'imagetype' => 'string',
    'filename' => 'string',
    'stringparam' => 'string',
    'intparam' => 'int',
  ),
  'PDFlib::open_memory_image' => 
  array (
    0 => 'int',
    'image' => 'resource',
  ),
  'PDFlib::open_pdi' => 
  array (
    0 => 'int',
    'filename' => 'string',
    'optlist' => 'string',
    'length' => 'int',
  ),
  'PDFlib::open_pdi_document' => 
  array (
    0 => 'int',
    'filename' => 'string',
    'optlist' => 'string',
  ),
  'PDFlib::open_pdi_page' => 
  array (
    0 => 'int',
    'doc' => 'int',
    'pagenumber' => 'int',
    'optlist' => 'string',
  ),
  'PDFlib::pcos_get_number' => 
  array (
    0 => 'float',
    'doc' => 'int',
    'path' => 'string',
  ),
  'PDFlib::pcos_get_stream' => 
  array (
    0 => 'string',
    'doc' => 'int',
    'optlist' => 'string',
    'path' => 'string',
  ),
  'PDFlib::pcos_get_string' => 
  array (
    0 => 'string',
    'doc' => 'int',
    'path' => 'string',
  ),
  'PDFlib::place_image' => 
  array (
    0 => 'bool',
    'image' => 'int',
    'x' => 'float',
    'y' => 'float',
    'scale' => 'float',
  ),
  'PDFlib::place_pdi_page' => 
  array (
    0 => 'bool',
    'page' => 'int',
    'x' => 'float',
    'y' => 'float',
    'sx' => 'float',
    'sy' => 'float',
  ),
  'PDFlib::process_pdi' => 
  array (
    0 => 'int',
    'doc' => 'int',
    'page' => 'int',
    'optlist' => 'string',
  ),
  'PDFlib::rect' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
    'width' => 'float',
    'height' => 'float',
  ),
  'PDFlib::restore' => 
  array (
    0 => 'bool',
    'p' => 'mixed',
  ),
  'PDFlib::resume_page' => 
  array (
    0 => 'bool',
    'optlist' => 'string',
  ),
  'PDFlib::rotate' => 
  array (
    0 => 'bool',
    'phi' => 'float',
  ),
  'PDFlib::save' => 
  array (
    0 => 'bool',
    'p' => 'mixed',
  ),
  'PDFlib::scale' => 
  array (
    0 => 'bool',
    'sx' => 'float',
    'sy' => 'float',
  ),
  'PDFlib::set_border_color' => 
  array (
    0 => 'bool',
    'red' => 'float',
    'green' => 'float',
    'blue' => 'float',
  ),
  'PDFlib::set_border_dash' => 
  array (
    0 => 'bool',
    'black' => 'float',
    'white' => 'float',
  ),
  'PDFlib::set_border_style' => 
  array (
    0 => 'bool',
    'style' => 'string',
    'width' => 'float',
  ),
  'PDFlib::set_gstate' => 
  array (
    0 => 'bool',
    'gstate' => 'int',
  ),
  'PDFlib::set_info' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'string',
  ),
  'PDFlib::set_layer_dependency' => 
  array (
    0 => 'bool',
    'type' => 'string',
    'optlist' => 'string',
  ),
  'PDFlib::set_parameter' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'string',
  ),
  'PDFlib::set_text_pos' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'PDFlib::set_value' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'float',
  ),
  'PDFlib::setcolor' => 
  array (
    0 => 'bool',
    'fstype' => 'string',
    'colorspace' => 'string',
    'c1' => 'float',
    'c2' => 'float',
    'c3' => 'float',
    'c4' => 'float',
  ),
  'PDFlib::setdash' => 
  array (
    0 => 'bool',
    'b' => 'float',
    'w' => 'float',
  ),
  'PDFlib::setdashpattern' => 
  array (
    0 => 'bool',
    'optlist' => 'string',
  ),
  'PDFlib::setflat' => 
  array (
    0 => 'bool',
    'flatness' => 'float',
  ),
  'PDFlib::setfont' => 
  array (
    0 => 'bool',
    'font' => 'int',
    'fontsize' => 'float',
  ),
  'PDFlib::setgray' => 
  array (
    0 => 'bool',
    'g' => 'float',
  ),
  'PDFlib::setgray_fill' => 
  array (
    0 => 'bool',
    'g' => 'float',
  ),
  'PDFlib::setgray_stroke' => 
  array (
    0 => 'bool',
    'g' => 'float',
  ),
  'PDFlib::setlinecap' => 
  array (
    0 => 'bool',
    'linecap' => 'int',
  ),
  'PDFlib::setlinejoin' => 
  array (
    0 => 'bool',
    'value' => 'int',
  ),
  'PDFlib::setlinewidth' => 
  array (
    0 => 'bool',
    'width' => 'float',
  ),
  'PDFlib::setmatrix' => 
  array (
    0 => 'bool',
    'a' => 'float',
    'b' => 'float',
    'c' => 'float',
    'd' => 'float',
    'e' => 'float',
    'f' => 'float',
  ),
  'PDFlib::setmiterlimit' => 
  array (
    0 => 'bool',
    'miter' => 'float',
  ),
  'PDFlib::setrgbcolor' => 
  array (
    0 => 'bool',
    'red' => 'float',
    'green' => 'float',
    'blue' => 'float',
  ),
  'PDFlib::setrgbcolor_fill' => 
  array (
    0 => 'bool',
    'red' => 'float',
    'green' => 'float',
    'blue' => 'float',
  ),
  'PDFlib::setrgbcolor_stroke' => 
  array (
    0 => 'bool',
    'red' => 'float',
    'green' => 'float',
    'blue' => 'float',
  ),
  'PDFlib::shading' => 
  array (
    0 => 'int',
    'shtype' => 'string',
    'x0' => 'float',
    'y0' => 'float',
    'x1' => 'float',
    'y1' => 'float',
    'c1' => 'float',
    'c2' => 'float',
    'c3' => 'float',
    'c4' => 'float',
    'optlist' => 'string',
  ),
  'PDFlib::shading_pattern' => 
  array (
    0 => 'int',
    'shading' => 'int',
    'optlist' => 'string',
  ),
  'PDFlib::shfill' => 
  array (
    0 => 'bool',
    'shading' => 'int',
  ),
  'PDFlib::show' => 
  array (
    0 => 'bool',
    'text' => 'string',
  ),
  'PDFlib::show_boxed' => 
  array (
    0 => 'int',
    'text' => 'string',
    'left' => 'float',
    'top' => 'float',
    'width' => 'float',
    'height' => 'float',
    'mode' => 'string',
    'feature' => 'string',
  ),
  'PDFlib::show_xy' => 
  array (
    0 => 'bool',
    'text' => 'string',
    'x' => 'float',
    'y' => 'float',
  ),
  'PDFlib::skew' => 
  array (
    0 => 'bool',
    'alpha' => 'float',
    'beta' => 'float',
  ),
  'PDFlib::stringwidth' => 
  array (
    0 => 'float',
    'text' => 'string',
    'font' => 'int',
    'fontsize' => 'float',
  ),
  'PDFlib::stroke' => 
  array (
    0 => 'bool',
    'p' => 'mixed',
  ),
  'PDFlib::suspend_page' => 
  array (
    0 => 'bool',
    'optlist' => 'string',
  ),
  'PDFlib::translate' => 
  array (
    0 => 'bool',
    'tx' => 'float',
    'ty' => 'float',
  ),
  'PDFlib::utf16_to_utf8' => 
  array (
    0 => 'string',
    'utf16string' => 'string',
  ),
  'PDFlib::utf32_to_utf16' => 
  array (
    0 => 'string',
    'utf32string' => 'string',
    'ordering' => 'string',
  ),
  'PDFlib::utf8_to_utf16' => 
  array (
    0 => 'string',
    'utf8string' => 'string',
    'ordering' => 'string',
  ),
  'PDO::__construct' => 
  array (
    0 => 'void',
    'dsn' => 'string',
    'username=' => 'null|string',
    'password=' => 'null|string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'PDO::beginTransaction' => 
  array (
    0 => 'bool',
  ),
  'PDO::commit' => 
  array (
    0 => 'bool',
  ),
  'PDO::cubrid_schema' => 
  array (
    0 => 'array<array-key, mixed>',
    'schema_type' => 'int',
    'table_name=' => 'string',
    'col_name=' => 'string',
  ),
  'PDO::errorCode' => 
  array (
    0 => 'null|string',
  ),
  'PDO::errorInfo' => 
  array (
    0 => 'array{0: null|string, 1: int|null, 2: null|string, 3?: mixed, 4?: mixed}',
  ),
  'PDO::exec' => 
  array (
    0 => 'false|int',
    'statement' => 'string',
  ),
  'PDO::getAttribute' => 
  array (
    0 => 'mixed',
    'attribute' => 'int',
  ),
  'PDO::getAvailableDrivers' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'PDO::inTransaction' => 
  array (
    0 => 'bool',
  ),
  'PDO::lastInsertId' => 
  array (
    0 => 'string',
    'name=' => 'null|string',
  ),
  'PDO::pgsqlCopyFromArray' => 
  array (
    0 => 'bool',
    'table_name' => 'string',
    'rows' => 'array<array-key, mixed>',
    'delimiter' => 'string',
    'null_as' => 'string',
    'fields' => 'string',
  ),
  'PDO::pgsqlCopyFromFile' => 
  array (
    0 => 'bool',
    'table_name' => 'string',
    'filename' => 'string',
    'delimiter' => 'string',
    'null_as' => 'string',
    'fields' => 'string',
  ),
  'PDO::pgsqlCopyToArray' => 
  array (
    0 => 'array<array-key, mixed>',
    'table_name' => 'string',
    'delimiter' => 'string',
    'null_as' => 'string',
    'fields' => 'string',
  ),
  'PDO::pgsqlCopyToFile' => 
  array (
    0 => 'bool',
    'table_name' => 'string',
    'filename' => 'string',
    'delimiter' => 'string',
    'null_as' => 'string',
    'fields' => 'string',
  ),
  'PDO::pgsqlGetNotify' => 
  array (
    0 => 'array{message: string, payload?: string, pid: int}|false',
    'result_type=' => 'PDO::FETCH_*',
    'ms_timeout=' => 'int',
  ),
  'PDO::pgsqlGetPid' => 
  array (
    0 => 'int',
  ),
  'PDO::pgsqlLOBCreate' => 
  array (
    0 => 'string',
  ),
  'PDO::pgsqlLOBOpen' => 
  array (
    0 => 'resource',
    'oid' => 'string',
    'mode=' => 'string',
  ),
  'PDO::pgsqlLOBUnlink' => 
  array (
    0 => 'bool',
    'oid' => 'string',
  ),
  'PDO::prepare' => 
  array (
    0 => 'PDOStatement|false',
    'query' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'PDO::query' => 
  array (
    0 => 'PDOStatement|false',
    'query' => 'string',
  ),
  'PDO::query\'1' => 
  array (
    0 => 'PDOStatement|false',
    'query' => 'string',
    'fetch_column' => 'int',
    'colno=' => 'int',
  ),
  'PDO::query\'2' => 
  array (
    0 => 'PDOStatement|false',
    'query' => 'string',
    'fetch_class' => 'int',
    'classname' => 'string',
    'constructorArgs' => 'array<array-key, mixed>',
  ),
  'PDO::query\'3' => 
  array (
    0 => 'PDOStatement|false',
    'query' => 'string',
    'fetch_into' => 'int',
    'object' => 'object',
  ),
  'PDO::quote' => 
  array (
    0 => 'false|string',
    'string' => 'string',
    'type=' => 'int',
  ),
  'PDO::rollBack' => 
  array (
    0 => 'bool',
  ),
  'PDO::setAttribute' => 
  array (
    0 => 'bool',
    'attribute' => 'int',
    'value' => 'mixed',
  ),
  'PDO::sqliteCreateAggregate' => 
  array (
    0 => 'bool',
    'function_name' => 'string',
    'step_func' => 'callable',
    'finalize_func' => 'callable',
    'num_args=' => 'int',
  ),
  'PDO::sqliteCreateCollation' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'callback' => 'callable',
  ),
  'PDO::sqliteCreateFunction' => 
  array (
    0 => 'bool',
    'function_name' => 'string',
    'callback' => 'callable',
    'num_args=' => 'int',
  ),
  'pdo_drivers' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'PDOException::getCode' => 
  array (
    0 => 'int|string',
  ),
  'PDOException::getFile' => 
  array (
    0 => 'string',
  ),
  'PDOException::getLine' => 
  array (
    0 => 'int',
  ),
  'PDOException::getMessage' => 
  array (
    0 => 'string',
  ),
  'PDOException::getPrevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'PDOException::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'PDOException::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'PDOStatement::bindColumn' => 
  array (
    0 => 'bool',
    'column' => 'int|string',
    '&rw_var' => 'mixed',
    'type=' => 'int',
    'maxLength=' => 'int',
    'driverOptions=' => 'mixed',
  ),
  'PDOStatement::bindParam' => 
  array (
    0 => 'bool',
    'param' => 'int|string',
    '&rw_var' => 'mixed',
    'type=' => 'int',
    'maxLength=' => 'int',
    'driverOptions=' => 'mixed',
  ),
  'PDOStatement::bindValue' => 
  array (
    0 => 'bool',
    'param' => 'int|string',
    'value' => 'mixed',
    'type=' => 'int',
  ),
  'PDOStatement::closeCursor' => 
  array (
    0 => 'bool',
  ),
  'PDOStatement::columnCount' => 
  array (
    0 => 'int',
  ),
  'PDOStatement::debugDumpParams' => 
  array (
    0 => 'bool|null',
  ),
  'PDOStatement::errorCode' => 
  array (
    0 => 'null|string',
  ),
  'PDOStatement::errorInfo' => 
  array (
    0 => 'array{0: null|string, 1: int|null, 2: null|string, 3?: mixed, 4?: mixed}',
  ),
  'PDOStatement::execute' => 
  array (
    0 => 'bool',
    'params=' => 'array<array-key, mixed>|null',
  ),
  'PDOStatement::fetch' => 
  array (
    0 => 'mixed',
    'mode=' => 'int',
    'cursorOrientation=' => 'int',
    'cursorOffset=' => 'int',
  ),
  'PDOStatement::fetchAll' => 
  array (
    0 => 'array<array-key, mixed>',
    'mode=' => 'int',
    '...args=' => 'mixed',
  ),
  'PDOStatement::fetchColumn' => 
  array (
    0 => 'mixed',
    'column=' => 'int',
  ),
  'PDOStatement::fetchObject' => 
  array (
    0 => 'false|object',
    'class=' => 'class-string|null',
    'constructorArgs=' => 'array<array-key, mixed>',
  ),
  'PDOStatement::getAttribute' => 
  array (
    0 => 'mixed',
    'name' => 'int',
  ),
  'PDOStatement::getColumnMeta' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'column' => 'int',
  ),
  'PDOStatement::nextRowset' => 
  array (
    0 => 'bool',
  ),
  'PDOStatement::rowCount' => 
  array (
    0 => 'int',
  ),
  'PDOStatement::setAttribute' => 
  array (
    0 => 'bool',
    'attribute' => 'int',
    'value' => 'mixed',
  ),
  'PDOStatement::setFetchMode' => 
  array (
    0 => 'bool',
    'mode' => 'int',
    '...args=' => 'mixed',
  ),
  'pfsockopen' => 
  array (
    0 => 'false|resource',
    'hostname' => 'string',
    'port=' => 'int',
    '&w_error_code=' => 'int',
    '&w_error_message=' => 'string',
    'timeout=' => 'float|null',
  ),
  'pg_affected_rows' => 
  array (
    0 => 'int',
    'result' => 'PgSql\\Result',
  ),
  'pg_cancel_query' => 
  array (
    0 => 'bool',
    'connection' => 'PgSql\\Connection',
  ),
  'pg_client_encoding' => 
  array (
    0 => 'string',
    'connection=' => 'PgSql\\Connection|null',
  ),
  'pg_close' => 
  array (
    0 => 'bool',
    'connection=' => 'PgSql\\Connection|null',
  ),
  'pg_connect' => 
  array (
    0 => 'PgSql\\Connection|false',
    'connection_string' => 'string',
    'flags=' => 'int',
  ),
  'pg_connect_poll' => 
  array (
    0 => 'int',
    'connection' => 'PgSql\\Connection',
  ),
  'pg_connection_busy' => 
  array (
    0 => 'bool',
    'connection' => 'PgSql\\Connection',
  ),
  'pg_connection_reset' => 
  array (
    0 => 'bool',
    'connection' => 'PgSql\\Connection',
  ),
  'pg_connection_status' => 
  array (
    0 => 'int',
    'connection' => 'PgSql\\Connection',
  ),
  'pg_consume_input' => 
  array (
    0 => 'bool',
    'connection' => 'PgSql\\Connection',
  ),
  'pg_convert' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'connection' => 'PgSql\\Connection',
    'table_name' => 'string',
    'values' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'pg_copy_from' => 
  array (
    0 => 'bool',
    'connection' => 'PgSql\\Connection',
    'table_name' => 'string',
    'rows' => 'array<array-key, mixed>',
    'separator=' => 'string',
    'null_as=' => 'string',
  ),
  'pg_copy_to' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'connection' => 'PgSql\\Connection',
    'table_name' => 'string',
    'separator=' => 'string',
    'null_as=' => 'string',
  ),
  'pg_dbname' => 
  array (
    0 => 'string',
    'connection=' => 'PgSql\\Connection|null',
  ),
  'pg_delete' => 
  array (
    0 => 'bool|string',
    'connection' => 'PgSql\\Connection',
    'table_name' => 'string',
    'conditions' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'pg_end_copy' => 
  array (
    0 => 'bool',
    'connection=' => 'PgSql\\Connection|null',
  ),
  'pg_escape_bytea' => 
  array (
    0 => 'string',
    'connection' => 'PgSql\\Connection',
    'string' => 'string',
  ),
  'pg_escape_bytea\'1' => 
  array (
    0 => 'string',
    'connection' => 'string',
  ),
  'pg_escape_identifier' => 
  array (
    0 => 'false|string',
    'connection' => 'PgSql\\Connection',
    'string' => 'string',
  ),
  'pg_escape_identifier\'1' => 
  array (
    0 => 'false|string',
    'connection' => 'string',
  ),
  'pg_escape_literal' => 
  array (
    0 => 'false|string',
    'connection' => 'PgSql\\Connection',
    'string' => 'string',
  ),
  'pg_escape_literal\'1' => 
  array (
    0 => 'false|string',
    'connection' => 'string',
  ),
  'pg_escape_string' => 
  array (
    0 => 'string',
    'connection' => 'PgSql\\Connection',
    'string' => 'string',
  ),
  'pg_escape_string\'1' => 
  array (
    0 => 'string',
    'connection' => 'string',
  ),
  'pg_exec' => 
  array (
    0 => 'PgSql\\Result|false',
    'connection' => 'PgSql\\Connection',
    'query' => 'string',
  ),
  'pg_exec\'1' => 
  array (
    0 => 'PgSql\\Result|false',
    'connection' => 'string',
  ),
  'pg_execute' => 
  array (
    0 => 'PgSql\\Result|false',
    'connection' => 'PgSql\\Connection',
    'statement_name' => 'string',
    'params' => 'array<array-key, mixed>',
  ),
  'pg_execute\'1' => 
  array (
    0 => 'PgSql\\Result|false',
    'connection' => 'string',
    'statement_name' => 'array<array-key, mixed>',
  ),
  'pg_fetch_all' => 
  array (
    0 => 'array<array-key, array<array-key, mixed>>',
    'result' => 'PgSql\\Result',
    'mode=' => 'int',
  ),
  'pg_fetch_all_columns' => 
  array (
    0 => 'array<array-key, mixed>',
    'result' => 'PgSql\\Result',
    'field=' => 'int',
  ),
  'pg_fetch_array' => 
  array (
    0 => 'array<array-key, null|string>|false',
    'result' => 'PgSql\\Result',
    'row=' => 'int|null',
    'mode=' => 'int',
  ),
  'pg_fetch_assoc' => 
  array (
    0 => 'array<string, mixed>|false',
    'result' => 'PgSql\\Result',
    'row=' => 'int|null',
  ),
  'pg_fetch_object' => 
  array (
    0 => 'false|object',
    'result' => 'PgSql\\Result',
    'row=' => 'int|null',
    'class=' => 'string',
    'constructor_args=' => 'array<array-key, mixed>',
  ),
  'pg_fetch_result' => 
  array (
    0 => 'false|null|string',
    'result' => 'PgSql\\Result',
    'row' => 'int|string',
  ),
  'pg_fetch_result\'1' => 
  array (
    0 => 'false|null|string',
    'result' => 'PgSql\\Result',
    'row' => 'int|null',
    'field' => 'int|string',
  ),
  'pg_fetch_row' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'result' => 'PgSql\\Result',
    'row=' => 'int|null',
    'mode=' => 'int',
  ),
  'pg_field_is_null' => 
  array (
    0 => 'false|int',
    'result' => 'PgSql\\Result',
    'row' => 'int|string',
  ),
  'pg_field_is_null\'1' => 
  array (
    0 => 'false|int',
    'result' => 'PgSql\\Result',
    'row' => 'int',
    'field' => 'int|string',
  ),
  'pg_field_name' => 
  array (
    0 => 'string',
    'result' => 'PgSql\\Result',
    'field' => 'int',
  ),
  'pg_field_num' => 
  array (
    0 => 'int',
    'result' => 'PgSql\\Result',
    'field' => 'string',
  ),
  'pg_field_prtlen' => 
  array (
    0 => 'false|int',
    'result' => 'PgSql\\Result',
    'row' => 'int|string',
  ),
  'pg_field_prtlen\'1' => 
  array (
    0 => 'false|int',
    'result' => 'PgSql\\Result',
    'row' => 'int',
    'field' => 'int|string',
  ),
  'pg_field_size' => 
  array (
    0 => 'int',
    'result' => 'PgSql\\Result',
    'field' => 'int',
  ),
  'pg_field_table' => 
  array (
    0 => 'false|int|string',
    'result' => 'PgSql\\Result',
    'field' => 'int',
    'oid_only=' => 'bool',
  ),
  'pg_field_type' => 
  array (
    0 => 'string',
    'result' => 'PgSql\\Result',
    'field' => 'int',
  ),
  'pg_field_type_oid' => 
  array (
    0 => 'int|string',
    'result' => 'PgSql\\Result',
    'field' => 'int',
  ),
  'pg_flush' => 
  array (
    0 => 'bool|int',
    'connection' => 'PgSql\\Connection',
  ),
  'pg_free_result' => 
  array (
    0 => 'bool',
    'result' => 'PgSql\\Result',
  ),
  'pg_get_notify' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'connection' => 'PgSql\\Connection',
    'mode=' => 'int',
  ),
  'pg_get_pid' => 
  array (
    0 => 'int',
    'connection' => 'PgSql\\Connection',
  ),
  'pg_get_result' => 
  array (
    0 => 'PgSql\\Result|false',
    'connection' => 'PgSql\\Connection',
  ),
  'pg_host' => 
  array (
    0 => 'string',
    'connection=' => 'PgSql\\Connection|null',
  ),
  'pg_insert' => 
  array (
    0 => 'PgSql\\Result|false|string',
    'connection' => 'PgSql\\Connection',
    'table_name' => 'string',
    'values' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'pg_last_error' => 
  array (
    0 => 'string',
    'connection=' => 'PgSql\\Connection|null',
  ),
  'pg_last_notice' => 
  array (
    0 => 'array<array-key, mixed>|bool|string',
    'connection' => 'PgSql\\Connection',
    'mode=' => 'int',
  ),
  'pg_last_oid' => 
  array (
    0 => 'false|int|string',
    'result' => 'PgSql\\Result',
  ),
  'pg_lo_close' => 
  array (
    0 => 'bool',
    'lob' => 'PgSql\\Lob',
  ),
  'pg_lo_create' => 
  array (
    0 => 'false|int|string',
    'connection=' => 'PgSql\\Connection',
    'oid=' => 'int|string',
  ),
  'pg_lo_export' => 
  array (
    0 => 'bool',
    'connection' => 'PgSql\\Connection',
    'oid' => 'int|string',
    'filename' => 'string',
  ),
  'pg_lo_export\'1' => 
  array (
    0 => 'bool',
    'connection' => 'int|string',
    'oid' => 'string',
  ),
  'pg_lo_import' => 
  array (
    0 => 'false|int|string',
    'connection' => 'PgSql\\Connection',
    'filename' => 'string',
    'oid' => 'int|string',
  ),
  'pg_lo_import\'1' => 
  array (
    0 => 'false|int|string',
    'connection' => 'string',
    'filename' => 'int|string',
  ),
  'pg_lo_open' => 
  array (
    0 => 'PgSql\\Lob|false',
    'connection' => 'PgSql\\Connection',
    'oid' => 'int|string',
    'mode' => 'string',
  ),
  'pg_lo_open\'1' => 
  array (
    0 => 'PgSql\\Lob|false',
    'connection' => 'int|string',
    'oid' => 'string',
  ),
  'pg_lo_read' => 
  array (
    0 => 'false|string',
    'lob' => 'PgSql\\Lob',
    'length=' => 'int',
  ),
  'pg_lo_read_all' => 
  array (
    0 => 'int',
    'lob' => 'PgSql\\Lob',
  ),
  'pg_lo_seek' => 
  array (
    0 => 'bool',
    'lob' => 'PgSql\\Lob',
    'offset' => 'int',
    'whence=' => 'int',
  ),
  'pg_lo_tell' => 
  array (
    0 => 'int',
    'lob' => 'PgSql\\Lob',
  ),
  'pg_lo_truncate' => 
  array (
    0 => 'bool',
    'lob' => 'PgSql\\Lob',
    'size' => 'int',
  ),
  'pg_lo_unlink' => 
  array (
    0 => 'bool',
    'connection' => 'PgSql\\Connection',
    'oid' => 'int|string',
  ),
  'pg_lo_unlink\'1' => 
  array (
    0 => 'bool',
    'connection' => 'int|string',
  ),
  'pg_lo_write' => 
  array (
    0 => 'false|int',
    'lob' => 'PgSql\\Lob',
    'data' => 'string',
    'length=' => 'int|null',
  ),
  'pg_meta_data' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'connection' => 'PgSql\\Connection',
    'table_name' => 'string',
    'extended=' => 'bool',
  ),
  'pg_num_fields' => 
  array (
    0 => 'int',
    'result' => 'PgSql\\Result',
  ),
  'pg_num_rows' => 
  array (
    0 => 'int',
    'result' => 'PgSql\\Result',
  ),
  'pg_options' => 
  array (
    0 => 'string',
    'connection=' => 'PgSql\\Connection|null',
  ),
  'pg_parameter_status' => 
  array (
    0 => 'false|string',
    'connection' => 'PgSql\\Connection',
    'name' => 'string',
  ),
  'pg_parameter_status\'1' => 
  array (
    0 => 'false|string',
    'connection' => 'string',
  ),
  'pg_pconnect' => 
  array (
    0 => 'PgSql\\Connection|false',
    'connection_string' => 'string',
    'flags=' => 'int',
  ),
  'pg_ping' => 
  array (
    0 => 'bool',
    'connection=' => 'PgSql\\Connection|null',
  ),
  'pg_port' => 
  array (
    0 => 'string',
    'connection=' => 'PgSql\\Connection|null',
  ),
  'pg_prepare' => 
  array (
    0 => 'PgSql\\Result|false',
    'connection' => 'PgSql\\Connection',
    'statement_name' => 'string',
    'query' => 'string',
  ),
  'pg_prepare\'1' => 
  array (
    0 => 'PgSql\\Result|false',
    'connection' => 'string',
    'statement_name' => 'string',
  ),
  'pg_put_line' => 
  array (
    0 => 'bool',
    'connection' => 'PgSql\\Connection',
    'data' => 'string',
  ),
  'pg_put_line\'1' => 
  array (
    0 => 'bool',
    'connection' => 'string',
  ),
  'pg_query' => 
  array (
    0 => 'PgSql\\Result|false',
    'connection' => 'PgSql\\Connection',
    'query' => 'string',
  ),
  'pg_query\'1' => 
  array (
    0 => 'PgSql\\Result|false',
    'connection' => 'string',
  ),
  'pg_query_params' => 
  array (
    0 => 'PgSql\\Result|false',
    'connection' => 'PgSql\\Connection',
    'query' => 'string',
    'params' => 'array<array-key, mixed>',
  ),
  'pg_query_params\'1' => 
  array (
    0 => 'PgSql\\Result|false',
    'connection' => 'string',
    'query' => 'array<array-key, mixed>',
  ),
  'pg_result_error' => 
  array (
    0 => 'false|string',
    'result' => 'PgSql\\Result',
  ),
  'pg_result_error_field' => 
  array (
    0 => 'false|null|string',
    'result' => 'PgSql\\Result',
    'field_code' => 'int',
  ),
  'pg_result_seek' => 
  array (
    0 => 'bool',
    'result' => 'PgSql\\Result',
    'row' => 'int',
  ),
  'pg_result_status' => 
  array (
    0 => 'int|string',
    'result' => 'PgSql\\Result',
    'mode=' => 'int',
  ),
  'pg_select' => 
  array (
    0 => 'array<array-key, mixed>|false|string',
    'connection' => 'PgSql\\Connection',
    'table_name' => 'string',
    'conditions' => 'array<array-key, mixed>',
    'flags=' => 'int',
    'mode=' => 'int',
  ),
  'pg_send_execute' => 
  array (
    0 => 'bool|int',
    'connection' => 'PgSql\\Connection',
    'statement_name' => 'string',
    'params' => 'array<array-key, mixed>',
  ),
  'pg_send_prepare' => 
  array (
    0 => 'bool|int',
    'connection' => 'PgSql\\Connection',
    'statement_name' => 'string',
    'query' => 'string',
  ),
  'pg_send_query' => 
  array (
    0 => 'bool|int',
    'connection' => 'PgSql\\Connection',
    'query' => 'string',
  ),
  'pg_send_query_params' => 
  array (
    0 => 'bool|int',
    'connection' => 'PgSql\\Connection',
    'query' => 'string',
    'params' => 'array<array-key, mixed>',
  ),
  'pg_set_client_encoding' => 
  array (
    0 => 'int',
    'connection' => 'PgSql\\Connection',
    'encoding' => 'string',
  ),
  'pg_set_client_encoding\'1' => 
  array (
    0 => 'int',
    'connection' => 'string',
  ),
  'pg_set_error_verbosity' => 
  array (
    0 => 'false|int',
    'connection' => 'PgSql\\Connection',
    'verbosity' => 'int',
  ),
  'pg_set_error_verbosity\'1' => 
  array (
    0 => 'false|int',
    'connection' => 'int',
  ),
  'pg_socket' => 
  array (
    0 => 'false|resource',
    'connection' => 'PgSql\\Connection',
  ),
  'pg_trace' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'mode=' => 'string',
    'connection=' => 'PgSql\\Connection|null',
  ),
  'pg_transaction_status' => 
  array (
    0 => 'int',
    'connection' => 'PgSql\\Connection',
  ),
  'pg_tty' => 
  array (
    0 => 'string',
    'connection=' => 'PgSql\\Connection|null',
  ),
  'pg_unescape_bytea' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'pg_untrace' => 
  array (
    0 => 'bool',
    'connection=' => 'PgSql\\Connection|null',
  ),
  'pg_update' => 
  array (
    0 => 'bool|string',
    'connection' => 'PgSql\\Connection',
    'table_name' => 'string',
    'values' => 'array<array-key, mixed>',
    'conditions' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'pg_version' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection=' => 'PgSql\\Connection|null',
  ),
  'Phar::__construct' => 
  array (
    0 => 'void',
    'filename' => 'string',
    'flags=' => 'int',
    'alias=' => 'null|string',
  ),
  'Phar::addEmptyDir' => 
  array (
    0 => 'void',
    'directory' => 'string',
  ),
  'Phar::addFile' => 
  array (
    0 => 'void',
    'filename' => 'string',
    'localName=' => 'null|string',
  ),
  'Phar::addFromString' => 
  array (
    0 => 'void',
    'localName' => 'string',
    'contents' => 'string',
  ),
  'Phar::apiVersion' => 
  array (
    0 => 'string',
  ),
  'Phar::buildFromDirectory' => 
  array (
    0 => 'array<array-key, mixed>',
    'directory' => 'string',
    'pattern=' => 'string',
  ),
  'Phar::buildFromIterator' => 
  array (
    0 => 'array<array-key, mixed>',
    'iterator' => 'Traversable',
    'baseDirectory=' => 'null|string',
  ),
  'Phar::canCompress' => 
  array (
    0 => 'bool',
    'compression=' => 'int',
  ),
  'Phar::canWrite' => 
  array (
    0 => 'bool',
  ),
  'Phar::compress' => 
  array (
    0 => 'Phar|null',
    'compression' => 'int',
    'extension=' => 'null|string',
  ),
  'Phar::compressFiles' => 
  array (
    0 => 'void',
    'compression' => 'int',
  ),
  'Phar::convertToData' => 
  array (
    0 => 'PharData|null',
    'format=' => 'int|null',
    'compression=' => 'int|null',
    'extension=' => 'null|string',
  ),
  'Phar::convertToExecutable' => 
  array (
    0 => 'Phar|null',
    'format=' => 'int|null',
    'compression=' => 'int|null',
    'extension=' => 'null|string',
  ),
  'Phar::copy' => 
  array (
    0 => 'bool',
    'from' => 'string',
    'to' => 'string',
  ),
  'Phar::count' => 
  array (
    0 => 'int',
    'mode=' => 'int',
  ),
  'Phar::createDefaultStub' => 
  array (
    0 => 'string',
    'index=' => 'null|string',
    'webIndex=' => 'null|string',
  ),
  'Phar::decompress' => 
  array (
    0 => 'Phar|null',
    'extension=' => 'null|string',
  ),
  'Phar::decompressFiles' => 
  array (
    0 => 'bool',
  ),
  'Phar::delete' => 
  array (
    0 => 'bool',
    'localName' => 'string',
  ),
  'Phar::delMetadata' => 
  array (
    0 => 'bool',
  ),
  'Phar::extractTo' => 
  array (
    0 => 'bool',
    'directory' => 'string',
    'files=' => 'array<array-key, mixed>|null|string',
    'overwrite=' => 'bool',
  ),
  'Phar::getAlias' => 
  array (
    0 => 'null|string',
  ),
  'Phar::getMetadata' => 
  array (
    0 => 'mixed',
    'unserializeOptions=' => 'array<array-key, mixed>',
  ),
  'Phar::getModified' => 
  array (
    0 => 'bool',
  ),
  'Phar::getPath' => 
  array (
    0 => 'string',
  ),
  'Phar::getSignature' => 
  array (
    0 => 'array{hash: string, hash_type: string}',
  ),
  'Phar::getStub' => 
  array (
    0 => 'string',
  ),
  'Phar::getSupportedCompression' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Phar::getSupportedSignatures' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Phar::getVersion' => 
  array (
    0 => 'string',
  ),
  'Phar::hasMetadata' => 
  array (
    0 => 'bool',
  ),
  'Phar::interceptFileFuncs' => 
  array (
    0 => 'void',
  ),
  'Phar::isBuffering' => 
  array (
    0 => 'bool',
  ),
  'Phar::isCompressed' => 
  array (
    0 => 'false|int',
  ),
  'Phar::isFileFormat' => 
  array (
    0 => 'bool',
    'format' => 'int',
  ),
  'Phar::isValidPharFilename' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'executable=' => 'bool',
  ),
  'Phar::isWritable' => 
  array (
    0 => 'bool',
  ),
  'Phar::loadPhar' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'alias=' => 'null|string',
  ),
  'Phar::mapPhar' => 
  array (
    0 => 'bool',
    'alias=' => 'null|string',
    'offset=' => 'int',
  ),
  'Phar::mount' => 
  array (
    0 => 'void',
    'pharPath' => 'string',
    'externalPath' => 'string',
  ),
  'Phar::mungServer' => 
  array (
    0 => 'void',
    'variables' => 'list<string>',
  ),
  'Phar::offsetExists' => 
  array (
    0 => 'bool',
    'localName' => 'string',
  ),
  'Phar::offsetGet' => 
  array (
    0 => 'PharFileInfo',
    'localName' => 'string',
  ),
  'Phar::offsetSet' => 
  array (
    0 => 'void',
    'localName' => 'string',
    'value' => 'resource|string',
  ),
  'Phar::offsetUnset' => 
  array (
    0 => 'void',
    'localName' => 'string',
  ),
  'Phar::running' => 
  array (
    0 => 'string',
    'returnPhar=' => 'bool',
  ),
  'Phar::setAlias' => 
  array (
    0 => 'bool',
    'alias' => 'string',
  ),
  'Phar::setDefaultStub' => 
  array (
    0 => 'bool',
    'index=' => 'null|string',
    'webIndex=' => 'null|string',
  ),
  'Phar::setMetadata' => 
  array (
    0 => 'void',
    'metadata' => 'mixed',
  ),
  'Phar::setSignatureAlgorithm' => 
  array (
    0 => 'void',
    'algo' => 'int',
    'privateKey=' => 'null|string',
  ),
  'Phar::setStub' => 
  array (
    0 => 'bool',
    'stub' => 'string',
    'length=' => 'int',
  ),
  'Phar::startBuffering' => 
  array (
    0 => 'void',
  ),
  'Phar::stopBuffering' => 
  array (
    0 => 'void',
  ),
  'Phar::unlinkArchive' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'Phar::webPhar' => 
  array (
    0 => 'void',
    'alias=' => 'null|string',
    'index=' => 'null|string',
    'fileNotFoundScript=' => 'null|string',
    'mimeTypes=' => 'array<array-key, mixed>',
    'rewrite=' => 'callable|null',
  ),
  'PharData::__construct' => 
  array (
    0 => 'void',
    'filename' => 'string',
    'flags=' => 'int',
    'alias=' => 'null|string',
    'format=' => 'int',
  ),
  'PharData::addEmptyDir' => 
  array (
    0 => 'void',
    'directory' => 'string',
  ),
  'PharData::addFile' => 
  array (
    0 => 'void',
    'filename' => 'string',
    'localName=' => 'null|string',
  ),
  'PharData::addFromString' => 
  array (
    0 => 'void',
    'localName' => 'string',
    'contents' => 'string',
  ),
  'PharData::buildFromDirectory' => 
  array (
    0 => 'array<array-key, mixed>',
    'directory' => 'string',
    'pattern=' => 'string',
  ),
  'PharData::buildFromIterator' => 
  array (
    0 => 'array<array-key, mixed>',
    'iterator' => 'Traversable',
    'baseDirectory=' => 'null|string',
  ),
  'PharData::compress' => 
  array (
    0 => 'PharData|null',
    'compression' => 'int',
    'extension=' => 'null|string',
  ),
  'PharData::compressFiles' => 
  array (
    0 => 'void',
    'compression' => 'int',
  ),
  'PharData::convertToData' => 
  array (
    0 => 'PharData|null',
    'format=' => 'int|null',
    'compression=' => 'int|null',
    'extension=' => 'null|string',
  ),
  'PharData::convertToExecutable' => 
  array (
    0 => 'Phar|null',
    'format=' => 'int|null',
    'compression=' => 'int|null',
    'extension=' => 'null|string',
  ),
  'PharData::copy' => 
  array (
    0 => 'bool',
    'from' => 'string',
    'to' => 'string',
  ),
  'PharData::decompress' => 
  array (
    0 => 'PharData|null',
    'extension=' => 'null|string',
  ),
  'PharData::decompressFiles' => 
  array (
    0 => 'bool',
  ),
  'PharData::delete' => 
  array (
    0 => 'bool',
    'localName' => 'string',
  ),
  'PharData::delMetadata' => 
  array (
    0 => 'bool',
  ),
  'PharData::extractTo' => 
  array (
    0 => 'bool',
    'directory' => 'string',
    'files=' => 'array<array-key, mixed>|null|string',
    'overwrite=' => 'bool',
  ),
  'PharData::isWritable' => 
  array (
    0 => 'bool',
  ),
  'PharData::offsetExists' => 
  array (
    0 => 'bool',
    'localName' => 'string',
  ),
  'PharData::offsetGet' => 
  array (
    0 => 'PharFileInfo',
    'localName' => 'string',
  ),
  'PharData::offsetSet' => 
  array (
    0 => 'void',
    'localName' => 'string',
    'value' => 'string',
  ),
  'PharData::offsetUnset' => 
  array (
    0 => 'void',
    'localName' => 'string',
  ),
  'PharData::setAlias' => 
  array (
    0 => 'bool',
    'alias' => 'string',
  ),
  'PharData::setDefaultStub' => 
  array (
    0 => 'bool',
    'index=' => 'null|string',
    'webIndex=' => 'null|string',
  ),
  'PharData::setMetadata' => 
  array (
    0 => 'void',
    'metadata' => 'mixed',
  ),
  'PharData::setSignatureAlgorithm' => 
  array (
    0 => 'void',
    'algo' => 'int',
    'privateKey=' => 'null|string',
  ),
  'PharData::setStub' => 
  array (
    0 => 'bool',
    'stub' => 'string',
    'length=' => 'int',
  ),
  'PharFileInfo::__construct' => 
  array (
    0 => 'void',
    'filename' => 'string',
  ),
  'PharFileInfo::chmod' => 
  array (
    0 => 'void',
    'perms' => 'int',
  ),
  'PharFileInfo::compress' => 
  array (
    0 => 'bool',
    'compression' => 'int',
  ),
  'PharFileInfo::decompress' => 
  array (
    0 => 'bool',
  ),
  'PharFileInfo::delMetadata' => 
  array (
    0 => 'bool',
  ),
  'PharFileInfo::getCompressedSize' => 
  array (
    0 => 'int',
  ),
  'PharFileInfo::getContent' => 
  array (
    0 => 'string',
  ),
  'PharFileInfo::getCRC32' => 
  array (
    0 => 'int',
  ),
  'PharFileInfo::getMetadata' => 
  array (
    0 => 'mixed',
    'unserializeOptions=' => 'array<array-key, mixed>',
  ),
  'PharFileInfo::getPharFlags' => 
  array (
    0 => 'int',
  ),
  'PharFileInfo::hasMetadata' => 
  array (
    0 => 'bool',
  ),
  'PharFileInfo::isCompressed' => 
  array (
    0 => 'bool',
    'compression=' => 'int|null',
  ),
  'PharFileInfo::isCRCChecked' => 
  array (
    0 => 'bool',
  ),
  'PharFileInfo::setMetadata' => 
  array (
    0 => 'void',
    'metadata' => 'mixed',
  ),
  'phdfs::__construct' => 
  array (
    0 => 'void',
    'ip' => 'string',
    'port' => 'string',
  ),
  'phdfs::__destruct' => 
  array (
    0 => 'void',
  ),
  'phdfs::connect' => 
  array (
    0 => 'bool',
  ),
  'phdfs::copy' => 
  array (
    0 => 'bool',
    'source_file' => 'string',
    'destination_file' => 'string',
  ),
  'phdfs::create_directory' => 
  array (
    0 => 'bool',
    'path' => 'string',
  ),
  'phdfs::delete' => 
  array (
    0 => 'bool',
    'path' => 'string',
  ),
  'phdfs::disconnect' => 
  array (
    0 => 'bool',
  ),
  'phdfs::exists' => 
  array (
    0 => 'bool',
    'path' => 'string',
  ),
  'phdfs::file_info' => 
  array (
    0 => 'array<array-key, mixed>',
    'path' => 'string',
  ),
  'phdfs::list_directory' => 
  array (
    0 => 'array<array-key, mixed>',
    'path' => 'string',
  ),
  'phdfs::read' => 
  array (
    0 => 'string',
    'path' => 'string',
    'length=' => 'string',
  ),
  'phdfs::rename' => 
  array (
    0 => 'bool',
    'old_path' => 'string',
    'new_path' => 'string',
  ),
  'phdfs::tell' => 
  array (
    0 => 'int',
    'path' => 'string',
  ),
  'phdfs::write' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'buffer' => 'string',
    'mode=' => 'string',
  ),
  'php_check_syntax' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'error_message=' => 'string',
  ),
  'php_ini_loaded_file' => 
  array (
    0 => 'false|string',
  ),
  'php_ini_scanned_files' => 
  array (
    0 => 'false|string',
  ),
  'php_logo_guid' => 
  array (
    0 => 'string',
  ),
  'php_sapi_name' => 
  array (
    0 => 'string',
  ),
  'php_strip_whitespace' => 
  array (
    0 => 'string',
    'filename' => 'string',
  ),
  'php_uname' => 
  array (
    0 => 'string',
    'mode=' => 'string',
  ),
  'php_user_filter::filter' => 
  array (
    0 => 'int',
    'in' => 'resource',
    'out' => 'resource',
    '&rw_consumed' => 'int',
    'closing' => 'bool',
  ),
  'php_user_filter::onClose' => 
  array (
    0 => 'void',
  ),
  'php_user_filter::onCreate' => 
  array (
    0 => 'bool',
  ),
  'phpcredits' => 
  array (
    0 => 'true',
    'flags=' => 'int',
  ),
  'phpdbg_break_file' => 
  array (
    0 => 'void',
    'file' => 'string',
    'line' => 'int',
  ),
  'phpdbg_break_function' => 
  array (
    0 => 'void',
    'function' => 'string',
  ),
  'phpdbg_break_method' => 
  array (
    0 => 'void',
    'class' => 'string',
    'method' => 'string',
  ),
  'phpdbg_break_next' => 
  array (
    0 => 'void',
  ),
  'phpdbg_clear' => 
  array (
    0 => 'void',
  ),
  'phpdbg_color' => 
  array (
    0 => 'void',
    'element' => 'int',
    'color' => 'string',
  ),
  'phpdbg_end_oplog' => 
  array (
    0 => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'phpdbg_exec' => 
  array (
    0 => 'mixed',
    'context=' => 'string',
  ),
  'phpdbg_get_executable' => 
  array (
    0 => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'phpdbg_prompt' => 
  array (
    0 => 'void',
    'string' => 'string',
  ),
  'phpdbg_start_oplog' => 
  array (
    0 => 'void',
  ),
  'phpinfo' => 
  array (
    0 => 'true',
    'flags=' => 'int',
  ),
  'PhpToken::tokenize' => 
  array (
    0 => 'list<PhpToken>',
    'code' => 'string',
    'flags=' => 'int',
  ),
  'PhpToken::is' => 
  array (
    0 => 'bool',
    'kind' => 'array<array-key, int|string>|int|string',
  ),
  'PhpToken::isIgnorable' => 
  array (
    0 => 'bool',
  ),
  'PhpToken::getTokenName' => 
  array (
    0 => 'null|string',
  ),
  'phpversion' => 
  array (
    0 => 'false|string',
    'extension=' => 'null|string',
  ),
  'pht\\AtomicInteger::__construct' => 
  array (
    0 => 'void',
    'value=' => 'int',
  ),
  'pht\\AtomicInteger::dec' => 
  array (
    0 => 'void',
  ),
  'pht\\AtomicInteger::get' => 
  array (
    0 => 'int',
  ),
  'pht\\AtomicInteger::inc' => 
  array (
    0 => 'void',
  ),
  'pht\\AtomicInteger::lock' => 
  array (
    0 => 'void',
  ),
  'pht\\AtomicInteger::set' => 
  array (
    0 => 'void',
    'value' => 'int',
  ),
  'pht\\AtomicInteger::unlock' => 
  array (
    0 => 'void',
  ),
  'pht\\HashTable::lock' => 
  array (
    0 => 'void',
  ),
  'pht\\HashTable::size' => 
  array (
    0 => 'int',
  ),
  'pht\\HashTable::unlock' => 
  array (
    0 => 'void',
  ),
  'pht\\Queue::front' => 
  array (
    0 => 'mixed',
  ),
  'pht\\Queue::lock' => 
  array (
    0 => 'void',
  ),
  'pht\\Queue::pop' => 
  array (
    0 => 'mixed',
  ),
  'pht\\Queue::push' => 
  array (
    0 => 'void',
    'value' => 'mixed',
  ),
  'pht\\Queue::size' => 
  array (
    0 => 'int',
  ),
  'pht\\Queue::unlock' => 
  array (
    0 => 'void',
  ),
  'pht\\Runnable::run' => 
  array (
    0 => 'void',
  ),
  'pht\\thread::addClassTask' => 
  array (
    0 => 'void',
    'className' => 'string',
    '...ctorArgs=' => 'mixed',
  ),
  'pht\\thread::addFileTask' => 
  array (
    0 => 'void',
    'fileName' => 'string',
    '...globals=' => 'mixed',
  ),
  'pht\\thread::addFunctionTask' => 
  array (
    0 => 'void',
    'func' => 'callable',
    '...funcArgs=' => 'mixed',
  ),
  'pht\\thread::join' => 
  array (
    0 => 'void',
  ),
  'pht\\thread::start' => 
  array (
    0 => 'void',
  ),
  'pht\\thread::taskCount' => 
  array (
    0 => 'int',
  ),
  'pht\\threaded::lock' => 
  array (
    0 => 'void',
  ),
  'pht\\threaded::unlock' => 
  array (
    0 => 'void',
  ),
  'pht\\Vector::__construct' => 
  array (
    0 => 'void',
    'size=' => 'int',
    'value=' => 'mixed',
  ),
  'pht\\Vector::deleteAt' => 
  array (
    0 => 'void',
    'offset' => 'int',
  ),
  'pht\\Vector::insertAt' => 
  array (
    0 => 'void',
    'value' => 'mixed',
    'offset' => 'int',
  ),
  'pht\\Vector::lock' => 
  array (
    0 => 'void',
  ),
  'pht\\Vector::pop' => 
  array (
    0 => 'mixed',
  ),
  'pht\\Vector::push' => 
  array (
    0 => 'void',
    'value' => 'mixed',
  ),
  'pht\\Vector::resize' => 
  array (
    0 => 'void',
    'size' => 'int',
    'value=' => 'mixed',
  ),
  'pht\\Vector::shift' => 
  array (
    0 => 'mixed',
  ),
  'pht\\Vector::size' => 
  array (
    0 => 'int',
  ),
  'pht\\Vector::unlock' => 
  array (
    0 => 'void',
  ),
  'pht\\Vector::unshift' => 
  array (
    0 => 'void',
    'value' => 'mixed',
  ),
  'pht\\Vector::updateAt' => 
  array (
    0 => 'void',
    'value' => 'mixed',
    'offset' => 'int',
  ),
  'pi' => 
  array (
    0 => 'float',
  ),
  'pointObj::__construct' => 
  array (
    0 => 'void',
  ),
  'pointObj::distanceToLine' => 
  array (
    0 => 'float',
    'p1' => 'pointObj',
    'p2' => 'pointObj',
  ),
  'pointObj::distanceToPoint' => 
  array (
    0 => 'float',
    'poPoint' => 'pointObj',
  ),
  'pointObj::distanceToShape' => 
  array (
    0 => 'float',
    'shape' => 'shapeObj',
  ),
  'pointObj::draw' => 
  array (
    0 => 'int',
    'map' => 'mapObj',
    'layer' => 'layerObj',
    'img' => 'imageObj',
    'class_index' => 'int',
    'text' => 'string',
  ),
  'pointObj::ms_newPointObj' => 
  array (
    0 => 'pointObj',
  ),
  'pointObj::project' => 
  array (
    0 => 'int',
    'in' => 'projectionObj',
    'out' => 'projectionObj',
  ),
  'pointObj::setXY' => 
  array (
    0 => 'int',
    'x' => 'float',
    'y' => 'float',
    'm' => 'float',
  ),
  'pointObj::setXYZ' => 
  array (
    0 => 'int',
    'x' => 'float',
    'y' => 'float',
    'z' => 'float',
    'm' => 'float',
  ),
  'Pool::__construct' => 
  array (
    0 => 'void',
    'size' => 'int',
    'class' => 'string',
    'ctor=' => 'array<array-key, mixed>',
  ),
  'Pool::collect' => 
  array (
    0 => 'int',
    'collector=' => 'callable',
  ),
  'Pool::resize' => 
  array (
    0 => 'void',
    'size' => 'int',
  ),
  'Pool::shutdown' => 
  array (
    0 => 'void',
  ),
  'Pool::submit' => 
  array (
    0 => 'int',
    'task' => 'Threaded',
  ),
  'Pool::submitTo' => 
  array (
    0 => 'int',
    'worker' => 'int',
    'task' => 'Threaded',
  ),
  'popen' => 
  array (
    0 => 'false|resource',
    'command' => 'string',
    'mode' => 'string',
  ),
  'pos' => 
  array (
    0 => 'mixed',
    'array' => 'array<array-key, mixed>',
  ),
  'posix_access' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'flags=' => 'int',
  ),
  'posix_ctermid' => 
  array (
    0 => 'false|string',
  ),
  'posix_errno' => 
  array (
    0 => 'int',
  ),
  'posix_get_last_error' => 
  array (
    0 => 'int',
  ),
  'posix_getcwd' => 
  array (
    0 => 'false|string',
  ),
  'posix_getegid' => 
  array (
    0 => 'int',
  ),
  'posix_geteuid' => 
  array (
    0 => 'int',
  ),
  'posix_getgid' => 
  array (
    0 => 'int',
  ),
  'posix_getgrgid' => 
  array (
    0 => 'array{gid: int, members: list<string>, name: string, passwd: string}|false',
    'group_id' => 'int',
  ),
  'posix_getgrnam' => 
  array (
    0 => 'array{gid: int, members: list<string>, name: string, passwd: string}|false',
    'name' => 'string',
  ),
  'posix_getgroups' => 
  array (
    0 => 'false|list<int>',
  ),
  'posix_getlogin' => 
  array (
    0 => 'false|string',
  ),
  'posix_getpgid' => 
  array (
    0 => 'false|int',
    'process_id' => 'int',
  ),
  'posix_getpgrp' => 
  array (
    0 => 'int',
  ),
  'posix_getpid' => 
  array (
    0 => 'int',
  ),
  'posix_getppid' => 
  array (
    0 => 'int',
  ),
  'posix_getpwnam' => 
  array (
    0 => 'array{dir: string, gecos: string, gid: int, name: string, passwd: string, shell: string, uid: int}|false',
    'username' => 'string',
  ),
  'posix_getpwuid' => 
  array (
    0 => 'array{dir: string, gecos: string, gid: int, name: string, passwd: string, shell: string, uid: int}|false',
    'user_id' => 'int',
  ),
  'posix_getrlimit' => 
  array (
    0 => 'array{\'hard core\': string, \'hard cpu\': string, \'hard data\': string, \'hard filesize\': string, \'hard maxproc\': int, \'hard memlock\': int, \'hard openfiles\': int, \'hard rss\': string, \'hard stack\': string, \'hard totalmem\': string, \'soft core\': string, \'soft cpu\': string, \'soft data\': string, \'soft filesize\': string, \'soft maxproc\': int, \'soft memlock\': int, \'soft openfiles\': int, \'soft rss\': string, \'soft stack\': int, \'soft totalmem\': string}|false',
    'resource=' => 'int|null',
  ),
  'posix_getsid' => 
  array (
    0 => 'false|int',
    'process_id' => 'int',
  ),
  'posix_getuid' => 
  array (
    0 => 'int',
  ),
  'posix_initgroups' => 
  array (
    0 => 'bool',
    'username' => 'string',
    'group_id' => 'int',
  ),
  'posix_isatty' => 
  array (
    0 => 'bool',
    'file_descriptor' => 'int|resource',
  ),
  'posix_kill' => 
  array (
    0 => 'bool',
    'process_id' => 'int',
    'signal' => 'int',
  ),
  'posix_mkfifo' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'permissions' => 'int',
  ),
  'posix_mknod' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'flags' => 'int',
    'major=' => 'int',
    'minor=' => 'int',
  ),
  'posix_setegid' => 
  array (
    0 => 'bool',
    'group_id' => 'int',
  ),
  'posix_seteuid' => 
  array (
    0 => 'bool',
    'user_id' => 'int',
  ),
  'posix_setgid' => 
  array (
    0 => 'bool',
    'group_id' => 'int',
  ),
  'posix_setpgid' => 
  array (
    0 => 'bool',
    'process_id' => 'int',
    'process_group_id' => 'int',
  ),
  'posix_setrlimit' => 
  array (
    0 => 'bool',
    'resource' => 'int',
    'soft_limit' => 'int',
    'hard_limit' => 'int',
  ),
  'posix_setsid' => 
  array (
    0 => 'int',
  ),
  'posix_setuid' => 
  array (
    0 => 'bool',
    'user_id' => 'int',
  ),
  'posix_strerror' => 
  array (
    0 => 'string',
    'error_code' => 'int',
  ),
  'posix_times' => 
  array (
    0 => 'array{cstime: int, cutime: int, stime: int, ticks: int, utime: int}|false',
  ),
  'posix_ttyname' => 
  array (
    0 => 'false|string',
    'file_descriptor' => 'int|resource',
  ),
  'posix_uname' => 
  array (
    0 => 'array{domainname: string, machine: string, nodename: string, release: string, sysname: string, version: string}|false',
  ),
  'Postal\\Expand::expand_address' => 
  array (
    0 => 'array<array-key, string>',
    'address' => 'string',
    'options=' => 'array<string, mixed>',
  ),
  'Postal\\Parser::parse_address' => 
  array (
    0 => 'array<string, string>',
    'address' => 'string',
    'options=' => 'array<string, string>',
  ),
  'pow' => 
  array (
    0 => 'float|int',
    'num' => 'float|int',
    'exponent' => 'float|int',
  ),
  'preg_filter' => 
  array (
    0 => 'array<array-key, string>|null|string',
    'pattern' => 'array<array-key, string>|string',
    'replacement' => 'array<array-key, string>|string',
    'subject' => 'array<array-key, string>|string',
    'limit=' => 'int',
    '&w_count=' => 'int',
  ),
  'preg_grep' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'pattern' => 'string',
    'array' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'preg_last_error' => 
  array (
    0 => 'int',
  ),
  'preg_match' => 
  array (
    0 => '0|1|false',
    'pattern' => 'string',
    'subject' => 'string',
    '&w_matches=' => 'array<array-key, string>',
    'flags=' => '0',
    'offset=' => 'int',
  ),
  'preg_match\'1' => 
  array (
    0 => '0|1|false',
    'pattern' => 'string',
    'subject' => 'string',
    '&w_matches=' => 'array<array-key, mixed>',
    'flags=' => 'int',
    'offset=' => 'int',
  ),
  'preg_match_all' => 
  array (
    0 => 'false|int<0, max>',
    'pattern' => 'string',
    'subject' => 'string',
    '&w_matches=' => 'array<array-key, mixed>',
    'flags=' => 'int',
    'offset=' => 'int',
  ),
  'preg_quote' => 
  array (
    0 => 'string',
    'str' => 'string',
    'delimiter=' => 'null|string',
  ),
  'preg_replace' => 
  array (
    0 => 'array<array-key, string>|null|string',
    'pattern' => 'array<array-key, mixed>|string',
    'replacement' => 'array<array-key, mixed>|string',
    'subject' => 'array<array-key, mixed>|string',
    'limit=' => 'int',
    '&w_count=' => 'int',
  ),
  'preg_replace_callback' => 
  array (
    0 => 'null|string',
    'pattern' => 'array<array-key, mixed>|string',
    'callback' => 'callable(array<array-key, string>):string',
    'subject' => 'string',
    'limit=' => 'int',
    '&w_count=' => 'int',
    'flags=' => 'int',
  ),
  'preg_replace_callback\'1' => 
  array (
    0 => 'array<array-key, string>|null',
    'pattern' => 'array<array-key, mixed>|string',
    'callback' => 'callable(array<array-key, string>):string',
    'subject' => 'array<array-key, string>',
    'limit=' => 'int',
    '&w_count=' => 'int',
    'flags=' => 'int',
  ),
  'preg_replace_callback_array' => 
  array (
    0 => 'null|string',
    'pattern' => 'array<string, callable(array<array-key, mixed>):string>',
    'subject' => 'string',
    'limit=' => 'int',
    '&w_count=' => 'int',
    'flags=' => 'int',
  ),
  'preg_replace_callback_array\'1' => 
  array (
    0 => 'array<array-key, string>|null',
    'pattern' => 'array<string, callable(array<array-key, mixed>):string>',
    'subject' => 'array<array-key, string>',
    'limit=' => 'int',
    '&w_count=' => 'int',
    'flags=' => 'int',
  ),
  'preg_split' => 
  array (
    0 => 'false|list<string>',
    'pattern' => 'string',
    'subject' => 'string',
    'limit' => 'int',
    'flags=' => 'null',
  ),
  'preg_split\'1' => 
  array (
    0 => 'false|list<list<int|string>|string>',
    'pattern' => 'string',
    'subject' => 'string',
    'limit=' => 'int',
    'flags=' => 'int',
  ),
  'prev' => 
  array (
    0 => 'mixed',
    '&r_array' => 'array<array-key, mixed>',
  ),
  'print' => 
  array (
    0 => 'int',
    'arg' => 'string',
  ),
  'print_r' => 
  array (
    0 => 'string',
    'value' => 'mixed',
  ),
  'print_r\'1' => 
  array (
    0 => 'true',
    'value' => 'mixed',
    'return=' => 'bool',
  ),
  'printf' => 
  array (
    0 => 'int<0, max>',
    'format' => 'string',
    '...values=' => 'float|int|string',
  ),
  'proc_close' => 
  array (
    0 => 'int',
    'process' => 'resource',
  ),
  'proc_get_status' => 
  array (
    0 => 'array{command: string, exitcode: int, pid: int, running: bool, signaled: bool, stopped: bool, stopsig: int, termsig: int}',
    'process' => 'resource',
  ),
  'proc_nice' => 
  array (
    0 => 'bool',
    'priority' => 'int',
  ),
  'proc_open' => 
  array (
    0 => 'false|resource',
    'command' => 'array<array-key, mixed>|string',
    'descriptor_spec' => 'array<array-key, mixed>',
    '&pipes' => 'array<array-key, resource>',
    'cwd=' => 'null|string',
    'env_vars=' => 'array<array-key, mixed>|null',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'proc_terminate' => 
  array (
    0 => 'bool',
    'process' => 'resource',
    'signal=' => 'int',
  ),
  'projectionObj::__construct' => 
  array (
    0 => 'void',
    'projectionString' => 'string',
  ),
  'projectionObj::getUnits' => 
  array (
    0 => 'int',
  ),
  'projectionObj::ms_newProjectionObj' => 
  array (
    0 => 'projectionObj',
    'projectionString' => 'string',
  ),
  'property_exists' => 
  array (
    0 => 'bool',
    'object_or_class' => 'object|string',
    'property' => 'string',
  ),
  'ps_add_bookmark' => 
  array (
    0 => 'int',
    'psdoc' => 'resource',
    'text' => 'string',
    'parent=' => 'int',
    'open=' => 'int',
  ),
  'ps_add_launchlink' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'filename' => 'string',
  ),
  'ps_add_locallink' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'page' => 'int',
    'dest' => 'string',
  ),
  'ps_add_note' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'contents' => 'string',
    'title' => 'string',
    'icon' => 'string',
    'open' => 'int',
  ),
  'ps_add_pdflink' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'filename' => 'string',
    'page' => 'int',
    'dest' => 'string',
  ),
  'ps_add_weblink' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'url' => 'string',
  ),
  'ps_arc' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'x' => 'float',
    'y' => 'float',
    'radius' => 'float',
    'alpha' => 'float',
    'beta' => 'float',
  ),
  'ps_arcn' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'x' => 'float',
    'y' => 'float',
    'radius' => 'float',
    'alpha' => 'float',
    'beta' => 'float',
  ),
  'ps_begin_page' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'width' => 'float',
    'height' => 'float',
  ),
  'ps_begin_pattern' => 
  array (
    0 => 'int',
    'psdoc' => 'resource',
    'width' => 'float',
    'height' => 'float',
    'xstep' => 'float',
    'ystep' => 'float',
    'painttype' => 'int',
  ),
  'ps_begin_template' => 
  array (
    0 => 'int',
    'psdoc' => 'resource',
    'width' => 'float',
    'height' => 'float',
  ),
  'ps_circle' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'x' => 'float',
    'y' => 'float',
    'radius' => 'float',
  ),
  'ps_clip' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
  ),
  'ps_close' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
  ),
  'ps_close_image' => 
  array (
    0 => 'void',
    'psdoc' => 'resource',
    'imageid' => 'int',
  ),
  'ps_closepath' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
  ),
  'ps_closepath_stroke' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
  ),
  'ps_continue_text' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'text' => 'string',
  ),
  'ps_curveto' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'x1' => 'float',
    'y1' => 'float',
    'x2' => 'float',
    'y2' => 'float',
    'x3' => 'float',
    'y3' => 'float',
  ),
  'ps_delete' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
  ),
  'ps_end_page' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
  ),
  'ps_end_pattern' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
  ),
  'ps_end_template' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
  ),
  'ps_fill' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
  ),
  'ps_fill_stroke' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
  ),
  'ps_findfont' => 
  array (
    0 => 'int',
    'psdoc' => 'resource',
    'fontname' => 'string',
    'encoding' => 'string',
    'embed=' => 'bool',
  ),
  'ps_get_buffer' => 
  array (
    0 => 'string',
    'psdoc' => 'resource',
  ),
  'ps_get_parameter' => 
  array (
    0 => 'string',
    'psdoc' => 'resource',
    'name' => 'string',
    'modifier=' => 'float',
  ),
  'ps_get_value' => 
  array (
    0 => 'float',
    'psdoc' => 'resource',
    'name' => 'string',
    'modifier=' => 'float',
  ),
  'ps_hyphenate' => 
  array (
    0 => 'array<array-key, mixed>',
    'psdoc' => 'resource',
    'text' => 'string',
  ),
  'ps_include_file' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'file' => 'string',
  ),
  'ps_lineto' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'x' => 'float',
    'y' => 'float',
  ),
  'ps_makespotcolor' => 
  array (
    0 => 'int',
    'psdoc' => 'resource',
    'name' => 'string',
    'reserved=' => 'int',
  ),
  'ps_moveto' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'x' => 'float',
    'y' => 'float',
  ),
  'ps_new' => 
  array (
    0 => 'resource',
  ),
  'ps_open_file' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'filename=' => 'string',
  ),
  'ps_open_image' => 
  array (
    0 => 'int',
    'psdoc' => 'resource',
    'type' => 'string',
    'source' => 'string',
    'data' => 'string',
    'length' => 'int',
    'width' => 'int',
    'height' => 'int',
    'components' => 'int',
    'bpc' => 'int',
    'params' => 'string',
  ),
  'ps_open_image_file' => 
  array (
    0 => 'int',
    'psdoc' => 'resource',
    'type' => 'string',
    'filename' => 'string',
    'stringparam=' => 'string',
    'intparam=' => 'int',
  ),
  'ps_open_memory_image' => 
  array (
    0 => 'int',
    'psdoc' => 'resource',
    'gd' => 'int',
  ),
  'ps_place_image' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'imageid' => 'int',
    'x' => 'float',
    'y' => 'float',
    'scale' => 'float',
  ),
  'ps_rect' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'x' => 'float',
    'y' => 'float',
    'width' => 'float',
    'height' => 'float',
  ),
  'ps_restore' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
  ),
  'ps_rotate' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'rot' => 'float',
  ),
  'ps_save' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
  ),
  'ps_scale' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'x' => 'float',
    'y' => 'float',
  ),
  'ps_set_border_color' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'red' => 'float',
    'green' => 'float',
    'blue' => 'float',
  ),
  'ps_set_border_dash' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'black' => 'float',
    'white' => 'float',
  ),
  'ps_set_border_style' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'style' => 'string',
    'width' => 'float',
  ),
  'ps_set_info' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'key' => 'string',
    'value' => 'string',
  ),
  'ps_set_parameter' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'name' => 'string',
    'value' => 'string',
  ),
  'ps_set_text_pos' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'x' => 'float',
    'y' => 'float',
  ),
  'ps_set_value' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'name' => 'string',
    'value' => 'float',
  ),
  'ps_setcolor' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'type' => 'string',
    'colorspace' => 'string',
    'c1' => 'float',
    'c2' => 'float',
    'c3' => 'float',
    'c4' => 'float',
  ),
  'ps_setdash' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'on' => 'float',
    'off' => 'float',
  ),
  'ps_setflat' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'value' => 'float',
  ),
  'ps_setfont' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'fontid' => 'int',
    'size' => 'float',
  ),
  'ps_setgray' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'gray' => 'float',
  ),
  'ps_setlinecap' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'type' => 'int',
  ),
  'ps_setlinejoin' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'type' => 'int',
  ),
  'ps_setlinewidth' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'width' => 'float',
  ),
  'ps_setmiterlimit' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'value' => 'float',
  ),
  'ps_setoverprintmode' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'mode' => 'int',
  ),
  'ps_setpolydash' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'arr' => 'float',
  ),
  'ps_shading' => 
  array (
    0 => 'int',
    'psdoc' => 'resource',
    'type' => 'string',
    'x0' => 'float',
    'y0' => 'float',
    'x1' => 'float',
    'y1' => 'float',
    'c1' => 'float',
    'c2' => 'float',
    'c3' => 'float',
    'c4' => 'float',
    'optlist' => 'string',
  ),
  'ps_shading_pattern' => 
  array (
    0 => 'int',
    'psdoc' => 'resource',
    'shadingid' => 'int',
    'optlist' => 'string',
  ),
  'ps_shfill' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'shadingid' => 'int',
  ),
  'ps_show' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'text' => 'string',
  ),
  'ps_show2' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'text' => 'string',
    'length' => 'int',
  ),
  'ps_show_boxed' => 
  array (
    0 => 'int',
    'psdoc' => 'resource',
    'text' => 'string',
    'left' => 'float',
    'bottom' => 'float',
    'width' => 'float',
    'height' => 'float',
    'hmode' => 'string',
    'feature=' => 'string',
  ),
  'ps_show_xy' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'text' => 'string',
    'x' => 'float',
    'y' => 'float',
  ),
  'ps_show_xy2' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'text' => 'string',
    'length' => 'int',
    'xcoor' => 'float',
    'ycoor' => 'float',
  ),
  'ps_string_geometry' => 
  array (
    0 => 'array<array-key, mixed>',
    'psdoc' => 'resource',
    'text' => 'string',
    'fontid=' => 'int',
    'size=' => 'float',
  ),
  'ps_stringwidth' => 
  array (
    0 => 'float',
    'psdoc' => 'resource',
    'text' => 'string',
    'fontid=' => 'int',
    'size=' => 'float',
  ),
  'ps_stroke' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
  ),
  'ps_symbol' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'ord' => 'int',
  ),
  'ps_symbol_name' => 
  array (
    0 => 'string',
    'psdoc' => 'resource',
    'ord' => 'int',
    'fontid=' => 'int',
  ),
  'ps_symbol_width' => 
  array (
    0 => 'float',
    'psdoc' => 'resource',
    'ord' => 'int',
    'fontid=' => 'int',
    'size=' => 'float',
  ),
  'ps_translate' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'x' => 'float',
    'y' => 'float',
  ),
  'pspell_add_to_personal' => 
  array (
    0 => 'bool',
    'dictionary' => 'PSpell\\Dictionary',
    'word' => 'string',
  ),
  'pspell_add_to_session' => 
  array (
    0 => 'bool',
    'dictionary' => 'PSpell\\Dictionary',
    'word' => 'string',
  ),
  'pspell_check' => 
  array (
    0 => 'bool',
    'dictionary' => 'PSpell\\Dictionary',
    'word' => 'string',
  ),
  'pspell_clear_session' => 
  array (
    0 => 'bool',
    'dictionary' => 'PSpell\\Dictionary',
  ),
  'pspell_config_create' => 
  array (
    0 => 'PSpell\\Config',
    'language' => 'string',
    'spelling=' => 'string',
    'jargon=' => 'string',
    'encoding=' => 'string',
  ),
  'pspell_config_data_dir' => 
  array (
    0 => 'bool',
    'config' => 'PSpell\\Config',
    'directory' => 'string',
  ),
  'pspell_config_dict_dir' => 
  array (
    0 => 'bool',
    'config' => 'PSpell\\Config',
    'directory' => 'string',
  ),
  'pspell_config_ignore' => 
  array (
    0 => 'bool',
    'config' => 'PSpell\\Config',
    'min_length' => 'int',
  ),
  'pspell_config_mode' => 
  array (
    0 => 'bool',
    'config' => 'PSpell\\Config',
    'mode' => 'int',
  ),
  'pspell_config_personal' => 
  array (
    0 => 'bool',
    'config' => 'PSpell\\Config',
    'filename' => 'string',
  ),
  'pspell_config_repl' => 
  array (
    0 => 'bool',
    'config' => 'PSpell\\Config',
    'filename' => 'string',
  ),
  'pspell_config_runtogether' => 
  array (
    0 => 'bool',
    'config' => 'PSpell\\Config',
    'allow' => 'bool',
  ),
  'pspell_config_save_repl' => 
  array (
    0 => 'bool',
    'config' => 'PSpell\\Config',
    'save' => 'bool',
  ),
  'pspell_new' => 
  array (
    0 => 'PSpell\\Dictionary|false',
    'language' => 'string',
    'spelling=' => 'string',
    'jargon=' => 'string',
    'encoding=' => 'string',
    'mode=' => 'int',
  ),
  'pspell_new_config' => 
  array (
    0 => 'PSpell\\Dictionary|false',
    'config' => 'PSpell\\Config',
  ),
  'pspell_new_personal' => 
  array (
    0 => 'PSpell\\Dictionary|false',
    'filename' => 'string',
    'language' => 'string',
    'spelling=' => 'string',
    'jargon=' => 'string',
    'encoding=' => 'string',
    'mode=' => 'int',
  ),
  'pspell_save_wordlist' => 
  array (
    0 => 'bool',
    'dictionary' => 'PSpell\\Dictionary',
  ),
  'pspell_store_replacement' => 
  array (
    0 => 'bool',
    'dictionary' => 'PSpell\\Dictionary',
    'misspelled' => 'string',
    'correct' => 'string',
  ),
  'pspell_suggest' => 
  array (
    0 => 'array<array-key, mixed>',
    'dictionary' => 'PSpell\\Dictionary',
    'word' => 'string',
  ),
  'putenv' => 
  array (
    0 => 'bool',
    'assignment' => 'string',
  ),
  'px_close' => 
  array (
    0 => 'bool',
    'pxdoc' => 'resource',
  ),
  'px_create_fp' => 
  array (
    0 => 'bool',
    'pxdoc' => 'resource',
    'file' => 'resource',
    'fielddesc' => 'array<array-key, mixed>',
  ),
  'px_date2string' => 
  array (
    0 => 'string',
    'pxdoc' => 'resource',
    'value' => 'int',
    'format' => 'string',
  ),
  'px_delete' => 
  array (
    0 => 'bool',
    'pxdoc' => 'resource',
  ),
  'px_delete_record' => 
  array (
    0 => 'bool',
    'pxdoc' => 'resource',
    'num' => 'int',
  ),
  'px_get_field' => 
  array (
    0 => 'array<array-key, mixed>',
    'pxdoc' => 'resource',
    'fieldno' => 'int',
  ),
  'px_get_info' => 
  array (
    0 => 'array<array-key, mixed>',
    'pxdoc' => 'resource',
  ),
  'px_get_parameter' => 
  array (
    0 => 'string',
    'pxdoc' => 'resource',
    'name' => 'string',
  ),
  'px_get_record' => 
  array (
    0 => 'array<array-key, mixed>',
    'pxdoc' => 'resource',
    'num' => 'int',
    'mode=' => 'int',
  ),
  'px_get_schema' => 
  array (
    0 => 'array<array-key, mixed>',
    'pxdoc' => 'resource',
    'mode=' => 'int',
  ),
  'px_get_value' => 
  array (
    0 => 'float',
    'pxdoc' => 'resource',
    'name' => 'string',
  ),
  'px_insert_record' => 
  array (
    0 => 'int',
    'pxdoc' => 'resource',
    'data' => 'array<array-key, mixed>',
  ),
  'px_new' => 
  array (
    0 => 'resource',
  ),
  'px_numfields' => 
  array (
    0 => 'int',
    'pxdoc' => 'resource',
  ),
  'px_numrecords' => 
  array (
    0 => 'int',
    'pxdoc' => 'resource',
  ),
  'px_open_fp' => 
  array (
    0 => 'bool',
    'pxdoc' => 'resource',
    'file' => 'resource',
  ),
  'px_put_record' => 
  array (
    0 => 'bool',
    'pxdoc' => 'resource',
    'record' => 'array<array-key, mixed>',
    'recpos=' => 'int',
  ),
  'px_retrieve_record' => 
  array (
    0 => 'array<array-key, mixed>',
    'pxdoc' => 'resource',
    'num' => 'int',
    'mode=' => 'int',
  ),
  'px_set_blob_file' => 
  array (
    0 => 'bool',
    'pxdoc' => 'resource',
    'filename' => 'string',
  ),
  'px_set_parameter' => 
  array (
    0 => 'bool',
    'pxdoc' => 'resource',
    'name' => 'string',
    'value' => 'string',
  ),
  'px_set_tablename' => 
  array (
    0 => 'void',
    'pxdoc' => 'resource',
    'name' => 'string',
  ),
  'px_set_targetencoding' => 
  array (
    0 => 'bool',
    'pxdoc' => 'resource',
    'encoding' => 'string',
  ),
  'px_set_value' => 
  array (
    0 => 'bool',
    'pxdoc' => 'resource',
    'name' => 'string',
    'value' => 'float',
  ),
  'px_timestamp2string' => 
  array (
    0 => 'string',
    'pxdoc' => 'resource',
    'value' => 'float',
    'format' => 'string',
  ),
  'px_update_record' => 
  array (
    0 => 'bool',
    'pxdoc' => 'resource',
    'data' => 'array<array-key, mixed>',
    'num' => 'int',
  ),
  'qdom_error' => 
  array (
    0 => 'string',
  ),
  'qdom_tree' => 
  array (
    0 => 'QDomDocument',
    'doc' => 'string',
  ),
  'querymapObj::convertToString' => 
  array (
    0 => 'string',
  ),
  'querymapObj::free' => 
  array (
    0 => 'void',
  ),
  'querymapObj::set' => 
  array (
    0 => 'int',
    'property_name' => 'string',
    'new_value' => 'mixed',
  ),
  'querymapObj::updateFromString' => 
  array (
    0 => 'int',
    'snippet' => 'string',
  ),
  'QuickHashIntHash::__construct' => 
  array (
    0 => 'void',
    'size' => 'int',
    'options=' => 'int',
  ),
  'QuickHashIntHash::add' => 
  array (
    0 => 'bool',
    'key' => 'int',
    'value=' => 'int',
  ),
  'QuickHashIntHash::delete' => 
  array (
    0 => 'bool',
    'key' => 'int',
  ),
  'QuickHashIntHash::exists' => 
  array (
    0 => 'bool',
    'key' => 'int',
  ),
  'QuickHashIntHash::get' => 
  array (
    0 => 'int',
    'key' => 'int',
  ),
  'QuickHashIntHash::getSize' => 
  array (
    0 => 'int',
  ),
  'QuickHashIntHash::loadFromFile' => 
  array (
    0 => 'QuickHashIntHash',
    'filename' => 'string',
    'options=' => 'int',
  ),
  'QuickHashIntHash::loadFromString' => 
  array (
    0 => 'QuickHashIntHash',
    'contents' => 'string',
    'options=' => 'int',
  ),
  'QuickHashIntHash::saveToFile' => 
  array (
    0 => 'void',
    'filename' => 'string',
  ),
  'QuickHashIntHash::saveToString' => 
  array (
    0 => 'string',
  ),
  'QuickHashIntHash::set' => 
  array (
    0 => 'bool',
    'key' => 'int',
    'value' => 'int',
  ),
  'QuickHashIntHash::update' => 
  array (
    0 => 'bool',
    'key' => 'int',
    'value' => 'int',
  ),
  'QuickHashIntSet::__construct' => 
  array (
    0 => 'void',
    'size' => 'int',
    'options=' => 'int',
  ),
  'QuickHashIntSet::add' => 
  array (
    0 => 'bool',
    'key' => 'int',
  ),
  'QuickHashIntSet::delete' => 
  array (
    0 => 'bool',
    'key' => 'int',
  ),
  'QuickHashIntSet::exists' => 
  array (
    0 => 'bool',
    'key' => 'int',
  ),
  'QuickHashIntSet::getSize' => 
  array (
    0 => 'int',
  ),
  'QuickHashIntSet::loadFromFile' => 
  array (
    0 => 'QuickHashIntSet',
    'filename' => 'string',
    'size=' => 'int',
    'options=' => 'int',
  ),
  'QuickHashIntSet::loadFromString' => 
  array (
    0 => 'QuickHashIntSet',
    'contents' => 'string',
    'size=' => 'int',
    'options=' => 'int',
  ),
  'QuickHashIntSet::saveToFile' => 
  array (
    0 => 'void',
    'filename' => 'string',
  ),
  'QuickHashIntSet::saveToString' => 
  array (
    0 => 'string',
  ),
  'QuickHashIntStringHash::__construct' => 
  array (
    0 => 'void',
    'size' => 'int',
    'options=' => 'int',
  ),
  'QuickHashIntStringHash::add' => 
  array (
    0 => 'bool',
    'key' => 'int',
    'value' => 'string',
  ),
  'QuickHashIntStringHash::delete' => 
  array (
    0 => 'bool',
    'key' => 'int',
  ),
  'QuickHashIntStringHash::exists' => 
  array (
    0 => 'bool',
    'key' => 'int',
  ),
  'QuickHashIntStringHash::get' => 
  array (
    0 => 'mixed',
    'key' => 'int',
  ),
  'QuickHashIntStringHash::getSize' => 
  array (
    0 => 'int',
  ),
  'QuickHashIntStringHash::loadFromFile' => 
  array (
    0 => 'QuickHashIntStringHash',
    'filename' => 'string',
    'size=' => 'int',
    'options=' => 'int',
  ),
  'QuickHashIntStringHash::loadFromString' => 
  array (
    0 => 'QuickHashIntStringHash',
    'contents' => 'string',
    'size=' => 'int',
    'options=' => 'int',
  ),
  'QuickHashIntStringHash::saveToFile' => 
  array (
    0 => 'void',
    'filename' => 'string',
  ),
  'QuickHashIntStringHash::saveToString' => 
  array (
    0 => 'string',
  ),
  'QuickHashIntStringHash::set' => 
  array (
    0 => 'int',
    'key' => 'int',
    'value' => 'string',
  ),
  'QuickHashIntStringHash::update' => 
  array (
    0 => 'bool',
    'key' => 'int',
    'value' => 'string',
  ),
  'QuickHashStringIntHash::__construct' => 
  array (
    0 => 'void',
    'size' => 'int',
    'options=' => 'int',
  ),
  'QuickHashStringIntHash::add' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'int',
  ),
  'QuickHashStringIntHash::delete' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'QuickHashStringIntHash::exists' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'QuickHashStringIntHash::get' => 
  array (
    0 => 'mixed',
    'key' => 'string',
  ),
  'QuickHashStringIntHash::getSize' => 
  array (
    0 => 'int',
  ),
  'QuickHashStringIntHash::loadFromFile' => 
  array (
    0 => 'QuickHashStringIntHash',
    'filename' => 'string',
    'size=' => 'int',
    'options=' => 'int',
  ),
  'QuickHashStringIntHash::loadFromString' => 
  array (
    0 => 'QuickHashStringIntHash',
    'contents' => 'string',
    'size=' => 'int',
    'options=' => 'int',
  ),
  'QuickHashStringIntHash::saveToFile' => 
  array (
    0 => 'void',
    'filename' => 'string',
  ),
  'QuickHashStringIntHash::saveToString' => 
  array (
    0 => 'string',
  ),
  'QuickHashStringIntHash::set' => 
  array (
    0 => 'int',
    'key' => 'string',
    'value' => 'int',
  ),
  'QuickHashStringIntHash::update' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'int',
  ),
  'quoted_printable_decode' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'quoted_printable_encode' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'quotemeta' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'rad2deg' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'radius_acct_open' => 
  array (
    0 => 'false|resource',
  ),
  'radius_add_server' => 
  array (
    0 => 'bool',
    'radius_handle' => 'resource',
    'hostname' => 'string',
    'port' => 'int',
    'secret' => 'string',
    'timeout' => 'int',
    'max_tries' => 'int',
  ),
  'radius_auth_open' => 
  array (
    0 => 'false|resource',
  ),
  'radius_close' => 
  array (
    0 => 'bool',
    'radius_handle' => 'resource',
  ),
  'radius_config' => 
  array (
    0 => 'bool',
    'radius_handle' => 'resource',
    'file' => 'string',
  ),
  'radius_create_request' => 
  array (
    0 => 'bool',
    'radius_handle' => 'resource',
    'type' => 'int',
  ),
  'radius_cvt_addr' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'radius_cvt_int' => 
  array (
    0 => 'int',
    'data' => 'string',
  ),
  'radius_cvt_string' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'radius_demangle' => 
  array (
    0 => 'string',
    'radius_handle' => 'resource',
    'mangled' => 'string',
  ),
  'radius_demangle_mppe_key' => 
  array (
    0 => 'string',
    'radius_handle' => 'resource',
    'mangled' => 'string',
  ),
  'radius_get_attr' => 
  array (
    0 => 'mixed',
    'radius_handle' => 'resource',
  ),
  'radius_get_tagged_attr_data' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'radius_get_tagged_attr_tag' => 
  array (
    0 => 'int',
    'data' => 'string',
  ),
  'radius_get_vendor_attr' => 
  array (
    0 => 'array<array-key, mixed>',
    'data' => 'string',
  ),
  'radius_put_addr' => 
  array (
    0 => 'bool',
    'radius_handle' => 'resource',
    'type' => 'int',
    'addr' => 'string',
  ),
  'radius_put_attr' => 
  array (
    0 => 'bool',
    'radius_handle' => 'resource',
    'type' => 'int',
    'value' => 'string',
  ),
  'radius_put_int' => 
  array (
    0 => 'bool',
    'radius_handle' => 'resource',
    'type' => 'int',
    'value' => 'int',
  ),
  'radius_put_string' => 
  array (
    0 => 'bool',
    'radius_handle' => 'resource',
    'type' => 'int',
    'value' => 'string',
  ),
  'radius_put_vendor_addr' => 
  array (
    0 => 'bool',
    'radius_handle' => 'resource',
    'vendor' => 'int',
    'type' => 'int',
    'addr' => 'string',
  ),
  'radius_put_vendor_attr' => 
  array (
    0 => 'bool',
    'radius_handle' => 'resource',
    'vendor' => 'int',
    'type' => 'int',
    'value' => 'string',
  ),
  'radius_put_vendor_int' => 
  array (
    0 => 'bool',
    'radius_handle' => 'resource',
    'vendor' => 'int',
    'type' => 'int',
    'value' => 'int',
  ),
  'radius_put_vendor_string' => 
  array (
    0 => 'bool',
    'radius_handle' => 'resource',
    'vendor' => 'int',
    'type' => 'int',
    'value' => 'string',
  ),
  'radius_request_authenticator' => 
  array (
    0 => 'string',
    'radius_handle' => 'resource',
  ),
  'radius_salt_encrypt_attr' => 
  array (
    0 => 'string',
    'radius_handle' => 'resource',
    'data' => 'string',
  ),
  'radius_send_request' => 
  array (
    0 => 'false|int',
    'radius_handle' => 'resource',
  ),
  'radius_server_secret' => 
  array (
    0 => 'string',
    'radius_handle' => 'resource',
  ),
  'radius_strerror' => 
  array (
    0 => 'string',
    'radius_handle' => 'resource',
  ),
  'rand' => 
  array (
    0 => 'int',
    'min' => 'int',
    'max' => 'int',
  ),
  'rand\'1' => 
  array (
    0 => 'int',
  ),
  'random_bytes' => 
  array (
    0 => 'non-empty-string',
    'length' => 'int<1, max>',
  ),
  'random_int' => 
  array (
    0 => 'int',
    'min' => 'int',
    'max' => 'int',
  ),
  'range' => 
  array (
    0 => 'non-empty-array<array-key, mixed>',
    'start' => 'float|int|string',
    'end' => 'float|int|string',
    'step=' => 'float|int<1, max>',
  ),
  'RangeException::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'RangeException::__toString' => 
  array (
    0 => 'string',
  ),
  'RangeException::getCode' => 
  array (
    0 => 'int',
  ),
  'RangeException::getFile' => 
  array (
    0 => 'string',
  ),
  'RangeException::getLine' => 
  array (
    0 => 'int',
  ),
  'RangeException::getMessage' => 
  array (
    0 => 'string',
  ),
  'RangeException::getPrevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'RangeException::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'RangeException::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'rar_allow_broken_set' => 
  array (
    0 => 'bool',
    'rarfile' => 'RarArchive',
    'allow_broken' => 'bool',
  ),
  'rar_broken_is' => 
  array (
    0 => 'bool',
    'rarfile' => 'rararchive',
  ),
  'rar_close' => 
  array (
    0 => 'bool',
    'rarfile' => 'rararchive',
  ),
  'rar_comment_get' => 
  array (
    0 => 'string',
    'rarfile' => 'rararchive',
  ),
  'rar_entry_get' => 
  array (
    0 => 'RarEntry',
    'rarfile' => 'RarArchive',
    'entryname' => 'string',
  ),
  'rar_list' => 
  array (
    0 => 'RarArchive',
    'rarfile' => 'rararchive',
  ),
  'rar_open' => 
  array (
    0 => 'RarArchive',
    'filename' => 'string',
    'password=' => 'string',
    'volume_callback=' => 'callable',
  ),
  'rar_solid_is' => 
  array (
    0 => 'bool',
    'rarfile' => 'rararchive',
  ),
  'rar_wrapper_cache_stats' => 
  array (
    0 => 'string',
  ),
  'RarArchive::__toString' => 
  array (
    0 => 'string',
  ),
  'RarArchive::close' => 
  array (
    0 => 'bool',
  ),
  'RarArchive::getComment' => 
  array (
    0 => 'null|string',
  ),
  'RarArchive::getEntries' => 
  array (
    0 => 'array<array-key, RarEntry>|false',
  ),
  'RarArchive::getEntry' => 
  array (
    0 => 'RarEntry|false',
    'entryname' => 'string',
  ),
  'RarArchive::isBroken' => 
  array (
    0 => 'bool',
  ),
  'RarArchive::isSolid' => 
  array (
    0 => 'bool',
  ),
  'RarArchive::open' => 
  array (
    0 => 'RarArchive|false',
    'filename' => 'string',
    'password=' => 'string',
    'volume_callback=' => 'callable',
  ),
  'RarArchive::setAllowBroken' => 
  array (
    0 => 'bool',
    'allow_broken' => 'bool',
  ),
  'RarEntry::__toString' => 
  array (
    0 => 'string',
  ),
  'RarEntry::extract' => 
  array (
    0 => 'bool',
    'dir' => 'string',
    'filepath=' => 'string',
    'password=' => 'string',
    'extended_data=' => 'bool',
  ),
  'RarEntry::getAttr' => 
  array (
    0 => 'false|int',
  ),
  'RarEntry::getCrc' => 
  array (
    0 => 'false|string',
  ),
  'RarEntry::getFileTime' => 
  array (
    0 => 'false|string',
  ),
  'RarEntry::getHostOs' => 
  array (
    0 => 'false|int',
  ),
  'RarEntry::getMethod' => 
  array (
    0 => 'false|int',
  ),
  'RarEntry::getName' => 
  array (
    0 => 'false|string',
  ),
  'RarEntry::getPackedSize' => 
  array (
    0 => 'false|int',
  ),
  'RarEntry::getStream' => 
  array (
    0 => 'false|resource',
    'password=' => 'string',
  ),
  'RarEntry::getUnpackedSize' => 
  array (
    0 => 'false|int',
  ),
  'RarEntry::getVersion' => 
  array (
    0 => 'false|int',
  ),
  'RarEntry::isDirectory' => 
  array (
    0 => 'bool',
  ),
  'RarEntry::isEncrypted' => 
  array (
    0 => 'bool',
  ),
  'RarException::getCode' => 
  array (
    0 => 'int',
  ),
  'RarException::getFile' => 
  array (
    0 => 'string',
  ),
  'RarException::getLine' => 
  array (
    0 => 'int',
  ),
  'RarException::getMessage' => 
  array (
    0 => 'string',
  ),
  'RarException::getPrevious' => 
  array (
    0 => 'Exception|Throwable',
  ),
  'RarException::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'RarException::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'RarException::isUsingExceptions' => 
  array (
    0 => 'bool',
  ),
  'RarException::setUsingExceptions' => 
  array (
    0 => 'RarEntry',
    'using_exceptions' => 'bool',
  ),
  'rawurldecode' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'rawurlencode' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'readdir' => 
  array (
    0 => 'false|string',
    'dir_handle=' => 'resource',
  ),
  'readfile' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
    'use_include_path=' => 'bool',
    'context=' => 'resource',
  ),
  'readgzfile' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
    'use_include_path=' => 'int',
  ),
  'readline' => 
  array (
    0 => 'false|string',
    'prompt=' => 'null|string',
  ),
  'readline_add_history' => 
  array (
    0 => 'bool',
    'prompt' => 'string',
  ),
  'readline_callback_handler_install' => 
  array (
    0 => 'bool',
    'prompt' => 'string',
    'callback' => 'callable',
  ),
  'readline_callback_handler_remove' => 
  array (
    0 => 'bool',
  ),
  'readline_callback_read_char' => 
  array (
    0 => 'void',
  ),
  'readline_clear_history' => 
  array (
    0 => 'bool',
  ),
  'readline_completion_function' => 
  array (
    0 => 'bool',
    'callback' => 'callable',
  ),
  'readline_info' => 
  array (
    0 => 'mixed',
    'var_name=' => 'null|string',
    'value=' => 'bool|int|null|string',
  ),
  'readline_list_history' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'readline_on_new_line' => 
  array (
    0 => 'void',
  ),
  'readline_read_history' => 
  array (
    0 => 'bool',
    'filename=' => 'null|string',
  ),
  'readline_redisplay' => 
  array (
    0 => 'void',
  ),
  'readline_write_history' => 
  array (
    0 => 'bool',
    'filename=' => 'null|string',
  ),
  'readlink' => 
  array (
    0 => 'false|non-falsy-string',
    'path' => 'string',
  ),
  'realpath' => 
  array (
    0 => 'false|non-falsy-string',
    'path' => 'string',
  ),
  'realpath_cache_get' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'realpath_cache_size' => 
  array (
    0 => 'int',
  ),
  'recode' => 
  array (
    0 => 'string',
    'request' => 'string',
    'string' => 'string',
  ),
  'recode_file' => 
  array (
    0 => 'bool',
    'request' => 'string',
    'input' => 'resource',
    'output' => 'resource',
  ),
  'recode_string' => 
  array (
    0 => 'false|string',
    'request' => 'string',
    'string' => 'string',
  ),
  'rectObj::__construct' => 
  array (
    0 => 'void',
  ),
  'rectObj::draw' => 
  array (
    0 => 'int',
    'map' => 'mapObj',
    'layer' => 'layerObj',
    'img' => 'imageObj',
    'class_index' => 'int',
    'text' => 'string',
  ),
  'rectObj::fit' => 
  array (
    0 => 'float',
    'width' => 'int',
    'height' => 'int',
  ),
  'rectObj::ms_newRectObj' => 
  array (
    0 => 'rectObj',
  ),
  'rectObj::project' => 
  array (
    0 => 'int',
    'in' => 'projectionObj',
    'out' => 'projectionObj',
  ),
  'rectObj::set' => 
  array (
    0 => 'int',
    'property_name' => 'string',
    'new_value' => 'mixed',
  ),
  'rectObj::setextent' => 
  array (
    0 => 'void',
    'minx' => 'float',
    'miny' => 'float',
    'maxx' => 'float',
    'maxy' => 'float',
  ),
  'RecursiveArrayIterator::__construct' => 
  array (
    0 => 'void',
    'array=' => 'array<array-key, mixed>|object',
    'flags=' => 'int',
  ),
  'RecursiveArrayIterator::append' => 
  array (
    0 => 'void',
    'value' => 'mixed',
  ),
  'RecursiveArrayIterator::asort' => 
  array (
    0 => 'true',
    'flags=' => 'int',
  ),
  'RecursiveArrayIterator::count' => 
  array (
    0 => 'int',
  ),
  'RecursiveArrayIterator::current' => 
  array (
    0 => 'mixed',
  ),
  'RecursiveArrayIterator::getArrayCopy' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'RecursiveArrayIterator::getChildren' => 
  array (
    0 => 'RecursiveArrayIterator|null',
  ),
  'RecursiveArrayIterator::getFlags' => 
  array (
    0 => 'int',
  ),
  'RecursiveArrayIterator::hasChildren' => 
  array (
    0 => 'bool',
  ),
  'RecursiveArrayIterator::key' => 
  array (
    0 => 'int|null|string',
  ),
  'RecursiveArrayIterator::ksort' => 
  array (
    0 => 'true',
    'flags=' => 'int',
  ),
  'RecursiveArrayIterator::natcasesort' => 
  array (
    0 => 'true',
  ),
  'RecursiveArrayIterator::natsort' => 
  array (
    0 => 'true',
  ),
  'RecursiveArrayIterator::next' => 
  array (
    0 => 'void',
  ),
  'RecursiveArrayIterator::offsetExists' => 
  array (
    0 => 'bool',
    'key' => 'int|string',
  ),
  'RecursiveArrayIterator::offsetGet' => 
  array (
    0 => 'mixed',
    'key' => 'int|string',
  ),
  'RecursiveArrayIterator::offsetSet' => 
  array (
    0 => 'void',
    'key' => 'int|null|string',
    'value' => 'string',
  ),
  'RecursiveArrayIterator::offsetUnset' => 
  array (
    0 => 'void',
    'key' => 'int|string',
  ),
  'RecursiveArrayIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'RecursiveArrayIterator::seek' => 
  array (
    0 => 'void',
    'offset' => 'int',
  ),
  'RecursiveArrayIterator::serialize' => 
  array (
    0 => 'string',
  ),
  'RecursiveArrayIterator::setFlags' => 
  array (
    0 => 'void',
    'flags' => 'int',
  ),
  'RecursiveArrayIterator::uasort' => 
  array (
    0 => 'true',
    'callback' => 'callable(mixed, mixed):int',
  ),
  'RecursiveArrayIterator::uksort' => 
  array (
    0 => 'true',
    'callback' => 'callable(mixed, mixed):int',
  ),
  'RecursiveArrayIterator::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'RecursiveArrayIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'RecursiveCachingIterator::__construct' => 
  array (
    0 => 'void',
    'iterator' => 'Iterator',
    'flags=' => 'int',
  ),
  'RecursiveCachingIterator::__toString' => 
  array (
    0 => 'string',
  ),
  'RecursiveCachingIterator::count' => 
  array (
    0 => 'int',
  ),
  'RecursiveCachingIterator::current' => 
  array (
    0 => 'void',
  ),
  'RecursiveCachingIterator::getCache' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'RecursiveCachingIterator::getChildren' => 
  array (
    0 => 'RecursiveCachingIterator|null',
  ),
  'RecursiveCachingIterator::getFlags' => 
  array (
    0 => 'int',
  ),
  'RecursiveCachingIterator::getInnerIterator' => 
  array (
    0 => 'Iterator',
  ),
  'RecursiveCachingIterator::hasChildren' => 
  array (
    0 => 'bool',
  ),
  'RecursiveCachingIterator::hasNext' => 
  array (
    0 => 'bool',
  ),
  'RecursiveCachingIterator::key' => 
  array (
    0 => 'scalar',
  ),
  'RecursiveCachingIterator::next' => 
  array (
    0 => 'void',
  ),
  'RecursiveCachingIterator::offsetExists' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'RecursiveCachingIterator::offsetGet' => 
  array (
    0 => 'string',
    'key' => 'string',
  ),
  'RecursiveCachingIterator::offsetSet' => 
  array (
    0 => 'void',
    'key' => 'string',
    'value' => 'string',
  ),
  'RecursiveCachingIterator::offsetUnset' => 
  array (
    0 => 'void',
    'key' => 'string',
  ),
  'RecursiveCachingIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'RecursiveCachingIterator::setFlags' => 
  array (
    0 => 'void',
    'flags' => 'int',
  ),
  'RecursiveCachingIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'RecursiveCallbackFilterIterator::__construct' => 
  array (
    0 => 'void',
    'iterator' => 'RecursiveIterator',
    'callback' => 'callable(mixed, mixed=, mixed=):bool',
  ),
  'RecursiveCallbackFilterIterator::accept' => 
  array (
    0 => 'bool',
  ),
  'RecursiveCallbackFilterIterator::current' => 
  array (
    0 => 'mixed',
  ),
  'RecursiveCallbackFilterIterator::getChildren' => 
  array (
    0 => 'RecursiveCallbackFilterIterator',
  ),
  'RecursiveCallbackFilterIterator::getInnerIterator' => 
  array (
    0 => 'Iterator',
  ),
  'RecursiveCallbackFilterIterator::hasChildren' => 
  array (
    0 => 'bool',
  ),
  'RecursiveCallbackFilterIterator::key' => 
  array (
    0 => 'scalar',
  ),
  'RecursiveCallbackFilterIterator::next' => 
  array (
    0 => 'void',
  ),
  'RecursiveCallbackFilterIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'RecursiveCallbackFilterIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'RecursiveDirectoryIterator::__construct' => 
  array (
    0 => 'void',
    'directory' => 'string',
    'flags=' => 'int',
  ),
  'RecursiveDirectoryIterator::__toString' => 
  array (
    0 => 'string',
  ),
  'RecursiveDirectoryIterator::current' => 
  array (
    0 => 'FilesystemIterator|SplFileInfo|string',
  ),
  'RecursiveDirectoryIterator::getATime' => 
  array (
    0 => 'int',
  ),
  'RecursiveDirectoryIterator::getBasename' => 
  array (
    0 => 'string',
    'suffix=' => 'string',
  ),
  'RecursiveDirectoryIterator::getChildren' => 
  array (
    0 => 'RecursiveDirectoryIterator',
  ),
  'RecursiveDirectoryIterator::getCTime' => 
  array (
    0 => 'int',
  ),
  'RecursiveDirectoryIterator::getExtension' => 
  array (
    0 => 'string',
  ),
  'RecursiveDirectoryIterator::getFileInfo' => 
  array (
    0 => 'SplFileInfo',
    'class=' => 'class-string|null',
  ),
  'RecursiveDirectoryIterator::getFilename' => 
  array (
    0 => 'string',
  ),
  'RecursiveDirectoryIterator::getFlags' => 
  array (
    0 => 'int',
  ),
  'RecursiveDirectoryIterator::getGroup' => 
  array (
    0 => 'int',
  ),
  'RecursiveDirectoryIterator::getInode' => 
  array (
    0 => 'int',
  ),
  'RecursiveDirectoryIterator::getLinkTarget' => 
  array (
    0 => 'string',
  ),
  'RecursiveDirectoryIterator::getMTime' => 
  array (
    0 => 'int',
  ),
  'RecursiveDirectoryIterator::getOwner' => 
  array (
    0 => 'int',
  ),
  'RecursiveDirectoryIterator::getPath' => 
  array (
    0 => 'string',
  ),
  'RecursiveDirectoryIterator::getPathInfo' => 
  array (
    0 => 'SplFileInfo|null',
    'class=' => 'class-string|null',
  ),
  'RecursiveDirectoryIterator::getPathname' => 
  array (
    0 => 'string',
  ),
  'RecursiveDirectoryIterator::getPerms' => 
  array (
    0 => 'int',
  ),
  'RecursiveDirectoryIterator::getRealPath' => 
  array (
    0 => 'non-falsy-string',
  ),
  'RecursiveDirectoryIterator::getSize' => 
  array (
    0 => 'int',
  ),
  'RecursiveDirectoryIterator::getSubPath' => 
  array (
    0 => 'string',
  ),
  'RecursiveDirectoryIterator::getSubPathname' => 
  array (
    0 => 'string',
  ),
  'RecursiveDirectoryIterator::getType' => 
  array (
    0 => 'string',
  ),
  'RecursiveDirectoryIterator::hasChildren' => 
  array (
    0 => 'bool',
    'allowLinks=' => 'bool',
  ),
  'RecursiveDirectoryIterator::isDir' => 
  array (
    0 => 'bool',
  ),
  'RecursiveDirectoryIterator::isDot' => 
  array (
    0 => 'bool',
  ),
  'RecursiveDirectoryIterator::isExecutable' => 
  array (
    0 => 'bool',
  ),
  'RecursiveDirectoryIterator::isFile' => 
  array (
    0 => 'bool',
  ),
  'RecursiveDirectoryIterator::isLink' => 
  array (
    0 => 'bool',
  ),
  'RecursiveDirectoryIterator::isReadable' => 
  array (
    0 => 'bool',
  ),
  'RecursiveDirectoryIterator::isWritable' => 
  array (
    0 => 'bool',
  ),
  'RecursiveDirectoryIterator::key' => 
  array (
    0 => 'string',
  ),
  'RecursiveDirectoryIterator::next' => 
  array (
    0 => 'void',
  ),
  'RecursiveDirectoryIterator::openFile' => 
  array (
    0 => 'SplFileObject',
    'mode=' => 'string',
    'useIncludePath=' => 'bool',
    'context=' => 'null|resource',
  ),
  'RecursiveDirectoryIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'RecursiveDirectoryIterator::seek' => 
  array (
    0 => 'void',
    'offset' => 'int',
  ),
  'RecursiveDirectoryIterator::setFileClass' => 
  array (
    0 => 'void',
    'class=' => 'class-string',
  ),
  'RecursiveDirectoryIterator::setFlags' => 
  array (
    0 => 'void',
    'flags' => 'int',
  ),
  'RecursiveDirectoryIterator::setInfoClass' => 
  array (
    0 => 'void',
    'class=' => 'class-string',
  ),
  'RecursiveDirectoryIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'RecursiveFilterIterator::__construct' => 
  array (
    0 => 'void',
    'iterator' => 'RecursiveIterator',
  ),
  'RecursiveFilterIterator::accept' => 
  array (
    0 => 'bool',
  ),
  'RecursiveFilterIterator::current' => 
  array (
    0 => 'mixed',
  ),
  'RecursiveFilterIterator::getChildren' => 
  array (
    0 => 'RecursiveFilterIterator|null',
  ),
  'RecursiveFilterIterator::getInnerIterator' => 
  array (
    0 => 'Iterator',
  ),
  'RecursiveFilterIterator::hasChildren' => 
  array (
    0 => 'bool',
  ),
  'RecursiveFilterIterator::key' => 
  array (
    0 => 'mixed',
  ),
  'RecursiveFilterIterator::next' => 
  array (
    0 => 'void',
  ),
  'RecursiveFilterIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'RecursiveFilterIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'RecursiveIterator::__construct' => 
  array (
    0 => 'void',
  ),
  'RecursiveIterator::current' => 
  array (
    0 => 'mixed',
  ),
  'RecursiveIterator::getChildren' => 
  array (
    0 => 'RecursiveIterator|null',
  ),
  'RecursiveIterator::hasChildren' => 
  array (
    0 => 'bool',
  ),
  'RecursiveIterator::key' => 
  array (
    0 => 'int|string',
  ),
  'RecursiveIterator::next' => 
  array (
    0 => 'void',
  ),
  'RecursiveIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'RecursiveIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'RecursiveIteratorIterator::__construct' => 
  array (
    0 => 'void',
    'iterator' => 'IteratorAggregate|RecursiveIterator',
    'mode=' => 'int',
    'flags=' => 'int',
  ),
  'RecursiveIteratorIterator::beginChildren' => 
  array (
    0 => 'void',
  ),
  'RecursiveIteratorIterator::beginIteration' => 
  array (
    0 => 'void',
  ),
  'RecursiveIteratorIterator::callGetChildren' => 
  array (
    0 => 'RecursiveIterator|null',
  ),
  'RecursiveIteratorIterator::callHasChildren' => 
  array (
    0 => 'bool',
  ),
  'RecursiveIteratorIterator::current' => 
  array (
    0 => 'mixed',
  ),
  'RecursiveIteratorIterator::endChildren' => 
  array (
    0 => 'void',
  ),
  'RecursiveIteratorIterator::endIteration' => 
  array (
    0 => 'void',
  ),
  'RecursiveIteratorIterator::getDepth' => 
  array (
    0 => 'int',
  ),
  'RecursiveIteratorIterator::getInnerIterator' => 
  array (
    0 => 'RecursiveIterator',
  ),
  'RecursiveIteratorIterator::getMaxDepth' => 
  array (
    0 => 'false|int',
  ),
  'RecursiveIteratorIterator::getSubIterator' => 
  array (
    0 => 'RecursiveIterator|null',
    'level=' => 'int|null',
  ),
  'RecursiveIteratorIterator::key' => 
  array (
    0 => 'mixed',
  ),
  'RecursiveIteratorIterator::next' => 
  array (
    0 => 'void',
  ),
  'RecursiveIteratorIterator::nextElement' => 
  array (
    0 => 'void',
  ),
  'RecursiveIteratorIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'RecursiveIteratorIterator::setMaxDepth' => 
  array (
    0 => 'void',
    'maxDepth=' => 'int',
  ),
  'RecursiveIteratorIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'RecursiveRegexIterator::__construct' => 
  array (
    0 => 'void',
    'iterator' => 'RecursiveIterator',
    'pattern' => 'string',
    'mode=' => 'int',
    'flags=' => 'int',
    'pregFlags=' => 'int',
  ),
  'RecursiveRegexIterator::accept' => 
  array (
    0 => 'bool',
  ),
  'RecursiveRegexIterator::current' => 
  array (
    0 => 'mixed',
  ),
  'RecursiveRegexIterator::getChildren' => 
  array (
    0 => 'RecursiveRegexIterator',
  ),
  'RecursiveRegexIterator::getFlags' => 
  array (
    0 => 'int',
  ),
  'RecursiveRegexIterator::getInnerIterator' => 
  array (
    0 => 'Iterator',
  ),
  'RecursiveRegexIterator::getMode' => 
  array (
    0 => 'int',
  ),
  'RecursiveRegexIterator::getPregFlags' => 
  array (
    0 => 'int',
  ),
  'RecursiveRegexIterator::getRegex' => 
  array (
    0 => 'string',
  ),
  'RecursiveRegexIterator::hasChildren' => 
  array (
    0 => 'bool',
  ),
  'RecursiveRegexIterator::key' => 
  array (
    0 => 'mixed',
  ),
  'RecursiveRegexIterator::next' => 
  array (
    0 => 'void',
  ),
  'RecursiveRegexIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'RecursiveRegexIterator::setFlags' => 
  array (
    0 => 'void',
    'flags' => 'int',
  ),
  'RecursiveRegexIterator::setMode' => 
  array (
    0 => 'void',
    'mode' => 'int',
  ),
  'RecursiveRegexIterator::setPregFlags' => 
  array (
    0 => 'void',
    'pregFlags' => 'int',
  ),
  'RecursiveRegexIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'RecursiveTreeIterator::__construct' => 
  array (
    0 => 'void',
    'iterator' => 'IteratorAggregate|RecursiveIterator',
    'flags=' => 'int',
    'cachingIteratorFlags=' => 'int',
    'mode=' => 'int',
  ),
  'RecursiveTreeIterator::beginChildren' => 
  array (
    0 => 'void',
  ),
  'RecursiveTreeIterator::beginIteration' => 
  array (
    0 => 'void',
  ),
  'RecursiveTreeIterator::callGetChildren' => 
  array (
    0 => 'RecursiveIterator|null',
  ),
  'RecursiveTreeIterator::callHasChildren' => 
  array (
    0 => 'bool',
  ),
  'RecursiveTreeIterator::current' => 
  array (
    0 => 'string',
  ),
  'RecursiveTreeIterator::endChildren' => 
  array (
    0 => 'void',
  ),
  'RecursiveTreeIterator::endIteration' => 
  array (
    0 => 'void',
  ),
  'RecursiveTreeIterator::getDepth' => 
  array (
    0 => 'int',
  ),
  'RecursiveTreeIterator::getEntry' => 
  array (
    0 => 'string',
  ),
  'RecursiveTreeIterator::getInnerIterator' => 
  array (
    0 => 'RecursiveIterator',
  ),
  'RecursiveTreeIterator::getMaxDepth' => 
  array (
    0 => 'false|int',
  ),
  'RecursiveTreeIterator::getPostfix' => 
  array (
    0 => 'string',
  ),
  'RecursiveTreeIterator::getPrefix' => 
  array (
    0 => 'string',
  ),
  'RecursiveTreeIterator::getSubIterator' => 
  array (
    0 => 'RecursiveIterator|null',
    'level=' => 'int|null',
  ),
  'RecursiveTreeIterator::key' => 
  array (
    0 => 'string',
  ),
  'RecursiveTreeIterator::next' => 
  array (
    0 => 'void',
  ),
  'RecursiveTreeIterator::nextElement' => 
  array (
    0 => 'void',
  ),
  'RecursiveTreeIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'RecursiveTreeIterator::setMaxDepth' => 
  array (
    0 => 'void',
    'maxDepth=' => 'int',
  ),
  'RecursiveTreeIterator::setPostfix' => 
  array (
    0 => 'void',
    'postfix' => 'string',
  ),
  'RecursiveTreeIterator::setPrefixPart' => 
  array (
    0 => 'void',
    'part' => 'int',
    'value' => 'string',
  ),
  'RecursiveTreeIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'Redis::__construct' => 
  array (
    0 => 'void',
  ),
  'Redis::__destruct' => 
  array (
    0 => 'void',
  ),
  'Redis::_prefix' => 
  array (
    0 => 'string',
    'value' => 'mixed',
  ),
  'Redis::_serialize' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
  ),
  'Redis::_unserialize' => 
  array (
    0 => 'mixed',
    'value' => 'string',
  ),
  'Redis::append' => 
  array (
    0 => 'int',
    'key' => 'string',
    'value' => 'string',
  ),
  'Redis::auth' => 
  array (
    0 => 'bool',
    'password' => 'string',
  ),
  'Redis::bgRewriteAOF' => 
  array (
    0 => 'bool',
  ),
  'Redis::bgSave' => 
  array (
    0 => 'bool',
  ),
  'Redis::bitCount' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'Redis::bitOp' => 
  array (
    0 => 'int',
    'operation' => 'string',
    'ret_key' => 'string',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'Redis::bitpos' => 
  array (
    0 => 'int',
    'key' => 'string',
    'bit' => 'int',
    'start=' => 'int',
    'end=' => 'int',
  ),
  'Redis::blPop' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'array<array-key, string>',
    'timeout' => 'int',
  ),
  'Redis::blPop\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'timeout_or_key' => 'int|string',
    '...extra_args' => 'int|string',
  ),
  'Redis::brPop' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'array<array-key, string>',
    'timeout' => 'int',
  ),
  'Redis::brPop\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'timeout_or_key' => 'int|string',
    '...extra_args' => 'int|string',
  ),
  'Redis::brpoplpush' => 
  array (
    0 => 'false|string',
    'srcKey' => 'string',
    'dstKey' => 'string',
    'timeout' => 'int',
  ),
  'Redis::clearLastError' => 
  array (
    0 => 'bool',
  ),
  'Redis::client' => 
  array (
    0 => 'mixed',
    'command' => 'string',
    'arg=' => 'string',
  ),
  'Redis::close' => 
  array (
    0 => 'bool',
  ),
  'Redis::command' => 
  array (
    0 => 'mixed',
    '...args' => 'mixed',
  ),
  'Redis::config' => 
  array (
    0 => 'string',
    'operation' => 'string',
    'key' => 'string',
    'value=' => 'string',
  ),
  'Redis::connect' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port=' => 'int',
    'timeout=' => 'float',
    'reserved=' => 'null',
    'retry_interval=' => 'int|null',
    'read_timeout=' => 'float',
  ),
  'Redis::dbSize' => 
  array (
    0 => 'int',
  ),
  'Redis::debug' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'Redis::decr' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'Redis::decrBy' => 
  array (
    0 => 'int',
    'key' => 'string',
    'value' => 'int',
  ),
  'Redis::decrByFloat' => 
  array (
    0 => 'float',
    'key' => 'string',
    'value' => 'float',
  ),
  'Redis::del' => 
  array (
    0 => 'int',
    'key' => 'string',
    '...args' => 'string',
  ),
  'Redis::del\'1' => 
  array (
    0 => 'int',
    'key' => 'array<array-key, string>',
  ),
  'Redis::delete' => 
  array (
    0 => 'int',
    'key' => 'string',
    '...args' => 'string',
  ),
  'Redis::delete\'1' => 
  array (
    0 => 'int',
    'key' => 'array<array-key, string>',
  ),
  'Redis::discard' => 
  array (
    0 => 'mixed',
  ),
  'Redis::dump' => 
  array (
    0 => 'false|string',
    'key' => 'string',
  ),
  'Redis::echo' => 
  array (
    0 => 'string',
    'message' => 'string',
  ),
  'Redis::eval' => 
  array (
    0 => 'mixed',
    'script' => 'mixed',
    'args=' => 'mixed',
    'numKeys=' => 'mixed',
  ),
  'Redis::evalSha' => 
  array (
    0 => 'mixed',
    'scriptSha' => 'string',
    'args=' => 'array<array-key, mixed>',
    'numKeys=' => 'int',
  ),
  'Redis::evaluate' => 
  array (
    0 => 'mixed',
    'script' => 'string',
    'args=' => 'array<array-key, mixed>',
    'numKeys=' => 'int',
  ),
  'Redis::evaluateSha' => 
  array (
    0 => 'mixed',
    'scriptSha' => 'string',
    'args=' => 'array<array-key, mixed>',
    'numKeys=' => 'int',
  ),
  'Redis::exec' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Redis::exists' => 
  array (
    0 => 'int',
    'keys' => 'array<array-key, string>|string',
  ),
  'Redis::exists\'1' => 
  array (
    0 => 'int',
    '...keys' => 'string',
  ),
  'Redis::expire' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'ttl' => 'int',
  ),
  'Redis::expireAt' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'expiry' => 'int',
  ),
  'Redis::flushAll' => 
  array (
    0 => 'bool',
    'async=' => 'bool',
  ),
  'Redis::flushDb' => 
  array (
    0 => 'bool',
    'async=' => 'bool',
  ),
  'Redis::geoAdd' => 
  array (
    0 => 'int',
    'key' => 'string',
    'longitude' => 'float',
    'latitude' => 'float',
    'member' => 'string',
    '...other_triples=' => 'float|int|string',
  ),
  'Redis::geoDist' => 
  array (
    0 => 'float',
    'key' => 'string',
    'member1' => 'string',
    'member2' => 'string',
    'unit=' => 'string',
  ),
  'Redis::geoHash' => 
  array (
    0 => 'array<int, string>',
    'key' => 'string',
    'member' => 'string',
    '...other_members=' => 'string',
  ),
  'Redis::geoPos' => 
  array (
    0 => 'array<int, array{0: string, 1: string}>',
    'key' => 'string',
    'member' => 'string',
    '...members=' => 'string',
  ),
  'Redis::geoRadius' => 
  array (
    0 => 'array<int, mixed>|int',
    'key' => 'string',
    'longitude' => 'float',
    'latitude' => 'float',
    'radius' => 'float',
    'unit' => 'float',
    'options=' => 'array<string, mixed>',
  ),
  'Redis::geoRadiusByMember' => 
  array (
    0 => 'array<int, mixed>|int',
    'key' => 'string',
    'member' => 'string',
    'radius' => 'float',
    'units' => 'string',
    'options=' => 'array<string, mixed>',
  ),
  'Redis::get' => 
  array (
    0 => 'false|string',
    'key' => 'string',
  ),
  'Redis::getAuth' => 
  array (
    0 => 'false|null|string',
  ),
  'Redis::getBit' => 
  array (
    0 => 'int',
    'key' => 'string',
    'offset' => 'int',
  ),
  'Redis::getDBNum' => 
  array (
    0 => 'false|int',
  ),
  'Redis::getHost' => 
  array (
    0 => 'false|string',
  ),
  'Redis::getKeys' => 
  array (
    0 => 'array<int, string>',
    'pattern' => 'string',
  ),
  'Redis::getLastError' => 
  array (
    0 => 'null|string',
  ),
  'Redis::getMode' => 
  array (
    0 => 'int',
  ),
  'Redis::getMultiple' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'array<array-key, string>',
  ),
  'Redis::getOption' => 
  array (
    0 => 'int',
    'name' => 'int',
  ),
  'Redis::getPersistentID' => 
  array (
    0 => 'false|null|string',
  ),
  'Redis::getPort' => 
  array (
    0 => 'false|int',
  ),
  'Redis::getRange' => 
  array (
    0 => 'int',
    'key' => 'string',
    'start' => 'int',
    'end' => 'int',
  ),
  'Redis::getReadTimeout' => 
  array (
    0 => 'false|float',
  ),
  'Redis::getSet' => 
  array (
    0 => 'string',
    'key' => 'string',
    'string' => 'string',
  ),
  'Redis::getTimeout' => 
  array (
    0 => 'false|float',
  ),
  'Redis::hDel' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'hashKey1' => 'string',
    '...otherHashKeys=' => 'string',
  ),
  'Redis::hExists' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'hashKey' => 'string',
  ),
  'Redis::hGet' => 
  array (
    0 => 'false|string',
    'key' => 'string',
    'hashKey' => 'string',
  ),
  'Redis::hGetAll' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
  ),
  'Redis::hIncrBy' => 
  array (
    0 => 'int',
    'key' => 'string',
    'hashKey' => 'string',
    'value' => 'int',
  ),
  'Redis::hIncrByFloat' => 
  array (
    0 => 'float',
    'key' => 'string',
    'field' => 'string',
    'increment' => 'float',
  ),
  'Redis::hKeys' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
  ),
  'Redis::hLen' => 
  array (
    0 => 'false|int',
    'key' => 'string',
  ),
  'Redis::hMGet' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'hashKeys' => 'array<array-key, mixed>',
  ),
  'Redis::hMSet' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'hashKeys' => 'array<array-key, mixed>',
  ),
  'Redis::hScan' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    '&iterator' => 'int',
    'pattern=' => 'string',
    'count=' => 'int',
  ),
  'Redis::hSet' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'hashKey' => 'string',
    'value' => 'string',
  ),
  'Redis::hSetNx' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'hashKey' => 'string',
    'value' => 'string',
  ),
  'Redis::hStrLen' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'member' => 'mixed',
  ),
  'Redis::hVals' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
  ),
  'Redis::incr' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'Redis::incrBy' => 
  array (
    0 => 'int',
    'key' => 'string',
    'value' => 'int',
  ),
  'Redis::incrByFloat' => 
  array (
    0 => 'float',
    'key' => 'string',
    'value' => 'float',
  ),
  'Redis::info' => 
  array (
    0 => 'array<array-key, mixed>',
    'option=' => 'string',
  ),
  'Redis::isConnected' => 
  array (
    0 => 'bool',
  ),
  'Redis::keys' => 
  array (
    0 => 'array<int, string>',
    'pattern' => 'string',
  ),
  'Redis::lastSave' => 
  array (
    0 => 'int',
  ),
  'Redis::lGet' => 
  array (
    0 => 'string',
    'key' => 'string',
    'index' => 'int',
  ),
  'Redis::lGetRange' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'start' => 'int',
    'end' => 'int',
  ),
  'Redis::lIndex' => 
  array (
    0 => 'false|string',
    'key' => 'string',
    'index' => 'int',
  ),
  'Redis::lInsert' => 
  array (
    0 => 'int',
    'key' => 'string',
    'position' => 'int',
    'pivot' => 'string',
    'value' => 'string',
  ),
  'Redis::listTrim' => 
  array (
    0 => 'mixed',
    'key' => 'string',
    'start' => 'int',
    'stop' => 'int',
  ),
  'Redis::lLen' => 
  array (
    0 => 'false|int',
    'key' => 'string',
  ),
  'Redis::lPop' => 
  array (
    0 => 'false|string',
    'key' => 'string',
  ),
  'Redis::lPush' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'value1' => 'string',
    'value2=' => 'string',
    'valueN=' => 'string',
  ),
  'Redis::lPushx' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'value' => 'string',
  ),
  'Redis::lRange' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'start' => 'int',
    'end' => 'int',
  ),
  'Redis::lRem' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'value' => 'string',
    'count' => 'int',
  ),
  'Redis::lRemove' => 
  array (
    0 => 'int',
    'key' => 'string',
    'value' => 'string',
    'count' => 'int',
  ),
  'Redis::lSet' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'index' => 'int',
    'value' => 'string',
  ),
  'Redis::lSize' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'Redis::lTrim' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'key' => 'string',
    'start' => 'int',
    'stop' => 'int',
  ),
  'Redis::mGet' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'array<array-key, string>',
  ),
  'Redis::migrate' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port' => 'int',
    'key' => 'array<array-key, string>|string',
    'db' => 'int',
    'timeout' => 'int',
    'copy=' => 'bool',
    'replace=' => 'bool',
  ),
  'Redis::move' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'dbindex' => 'int',
  ),
  'Redis::mSet' => 
  array (
    0 => 'bool',
    'pairs' => 'array<array-key, mixed>',
  ),
  'Redis::mSetNx' => 
  array (
    0 => 'bool',
    'pairs' => 'array<array-key, mixed>',
  ),
  'Redis::multi' => 
  array (
    0 => 'Redis',
    'mode=' => 'int',
  ),
  'Redis::object' => 
  array (
    0 => 'false|long|string',
    'info' => 'string',
    'key' => 'string',
  ),
  'Redis::open' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port=' => 'int',
    'timeout=' => 'float',
    'reserved=' => 'null',
    'retry_interval=' => 'int|null',
    'read_timeout=' => 'float',
  ),
  'Redis::pconnect' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port=' => 'int',
    'timeout=' => 'float',
    'persistent_id=' => 'string',
    'retry_interval=' => 'int|null',
  ),
  'Redis::persist' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'Redis::pExpire' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'ttl' => 'int',
  ),
  'Redis::pexpireAt' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'expiry' => 'int',
  ),
  'Redis::pfAdd' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'elements' => 'array<array-key, mixed>',
  ),
  'Redis::pfCount' => 
  array (
    0 => 'int',
    'key' => 'array<array-key, mixed>|string',
  ),
  'Redis::pfMerge' => 
  array (
    0 => 'bool',
    'destkey' => 'string',
    'sourcekeys' => 'array<array-key, mixed>',
  ),
  'Redis::ping' => 
  array (
    0 => 'string',
  ),
  'Redis::pipeline' => 
  array (
    0 => 'Redis',
  ),
  'Redis::popen' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port=' => 'int',
    'timeout=' => 'float',
    'persistent_id=' => 'string',
    'retry_interval=' => 'int|null',
  ),
  'Redis::psetex' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'ttl' => 'int',
    'value' => 'string',
  ),
  'Redis::psubscribe' => 
  array (
    0 => 'mixed',
    'patterns' => 'array<array-key, mixed>',
    'callback' => 'array<array-key, mixed>|string',
  ),
  'Redis::pttl' => 
  array (
    0 => 'false|int',
    'key' => 'string',
  ),
  'Redis::publish' => 
  array (
    0 => 'int',
    'channel' => 'string',
    'message' => 'string',
  ),
  'Redis::pubsub' => 
  array (
    0 => 'array<array-key, mixed>|int',
    'keyword' => 'string',
    'argument=' => 'array<array-key, mixed>|string',
  ),
  'Redis::punsubscribe' => 
  array (
    0 => 'mixed',
    'pattern' => 'string',
    '...other_patterns=' => 'string',
  ),
  'Redis::randomKey' => 
  array (
    0 => 'string',
  ),
  'Redis::rawCommand' => 
  array (
    0 => 'mixed',
    'command' => 'string',
    '...arguments=' => 'mixed',
  ),
  'Redis::rename' => 
  array (
    0 => 'bool',
    'srckey' => 'string',
    'dstkey' => 'string',
  ),
  'Redis::renameKey' => 
  array (
    0 => 'bool',
    'srckey' => 'string',
    'dstkey' => 'string',
  ),
  'Redis::renameNx' => 
  array (
    0 => 'bool',
    'srckey' => 'string',
    'dstkey' => 'string',
  ),
  'Redis::resetStat' => 
  array (
    0 => 'bool',
  ),
  'Redis::restore' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'ttl' => 'int',
    'value' => 'string',
  ),
  'Redis::role' => 
  array (
    0 => 'array<array-key, mixed>',
    'nodeParams' => 'array{0: string, 1: int}|string',
  ),
  'Redis::rPop' => 
  array (
    0 => 'false|string',
    'key' => 'string',
  ),
  'Redis::rpoplpush' => 
  array (
    0 => 'string',
    'srcKey' => 'string',
    'dstKey' => 'string',
  ),
  'Redis::rPush' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'value1' => 'string',
    'value2=' => 'string',
    'valueN=' => 'string',
  ),
  'Redis::rPushx' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'value' => 'string',
  ),
  'Redis::sAdd' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'value1' => 'string',
    'value2=' => 'string',
    'valueN=' => 'string',
  ),
  'Redis::sAddArray' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'values' => 'array<array-key, mixed>',
  ),
  'Redis::save' => 
  array (
    0 => 'bool',
  ),
  'Redis::scan' => 
  array (
    0 => 'array<int, string>|false',
    '&rw_iterator' => 'int|null',
    'pattern=' => 'null|string',
    'count=' => 'int|null',
  ),
  'Redis::sCard' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'Redis::sContains' => 
  array (
    0 => 'mixed',
    'key' => 'string',
    'value' => 'string',
  ),
  'Redis::script' => 
  array (
    0 => 'mixed',
    'command' => 'string',
    '...args=' => 'mixed',
  ),
  'Redis::sDiff' => 
  array (
    0 => 'array<array-key, mixed>',
    'key1' => 'string',
    '...other_keys=' => 'string',
  ),
  'Redis::sDiffStore' => 
  array (
    0 => 'false|int',
    'dstKey' => 'string',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'Redis::select' => 
  array (
    0 => 'bool',
    'dbindex' => 'int',
  ),
  'Redis::sendEcho' => 
  array (
    0 => 'string',
    'msg' => 'string',
  ),
  'Redis::set' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'mixed',
    'options=' => 'array<array-key, mixed>',
  ),
  'Redis::set\'1' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'mixed',
    'timeout=' => 'int',
  ),
  'Redis::setBit' => 
  array (
    0 => 'int',
    'key' => 'string',
    'offset' => 'int',
    'value' => 'int',
  ),
  'Redis::setEx' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'ttl' => 'int',
    'value' => 'string',
  ),
  'Redis::setNx' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'string',
  ),
  'Redis::setOption' => 
  array (
    0 => 'bool',
    'name' => 'int',
    'value' => 'mixed',
  ),
  'Redis::setRange' => 
  array (
    0 => 'int',
    'key' => 'string',
    'offset' => 'int',
    'end' => 'int',
  ),
  'Redis::setTimeout' => 
  array (
    0 => 'mixed',
    'key' => 'string',
    'ttl' => 'int',
  ),
  'Redis::sGetMembers' => 
  array (
    0 => 'mixed',
    'key' => 'string',
  ),
  'Redis::sInter' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'Redis::sInterStore' => 
  array (
    0 => 'false|int',
    'dstKey' => 'string',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'Redis::sIsMember' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'string',
  ),
  'Redis::slave' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port' => 'int',
  ),
  'Redis::slave\'1' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port' => 'int',
  ),
  'Redis::slaveof' => 
  array (
    0 => 'bool',
    'host=' => 'string',
    'port=' => 'int',
  ),
  'Redis::slowLog' => 
  array (
    0 => 'mixed',
    'operation' => 'string',
    'length=' => 'int',
  ),
  'Redis::sMembers' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
  ),
  'Redis::sMove' => 
  array (
    0 => 'bool',
    'srcKey' => 'string',
    'dstKey' => 'string',
    'member' => 'string',
  ),
  'Redis::sort' => 
  array (
    0 => 'array<array-key, mixed>|int',
    'key' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'Redis::sortAsc' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'pattern=' => 'string',
    'get=' => 'string',
    'start=' => 'int',
    'end=' => 'int',
    'getList=' => 'bool',
  ),
  'Redis::sortAscAlpha' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'pattern=' => 'mixed',
    'get=' => 'string',
    'start=' => 'int',
    'end=' => 'int',
    'getList=' => 'bool',
  ),
  'Redis::sortDesc' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'pattern=' => 'mixed',
    'get=' => 'string',
    'start=' => 'int',
    'end=' => 'int',
    'getList=' => 'bool',
  ),
  'Redis::sortDescAlpha' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'pattern=' => 'mixed',
    'get=' => 'string',
    'start=' => 'int',
    'end=' => 'int',
    'getList=' => 'bool',
  ),
  'Redis::sPop' => 
  array (
    0 => 'false|string',
    'key' => 'string',
  ),
  'Redis::sRandMember' => 
  array (
    0 => 'array<array-key, mixed>|false|string',
    'key' => 'string',
    'count=' => 'int',
  ),
  'Redis::sRem' => 
  array (
    0 => 'int',
    'key' => 'string',
    'member1' => 'string',
    '...other_members=' => 'string',
  ),
  'Redis::sRemove' => 
  array (
    0 => 'int',
    'key' => 'string',
    'member1' => 'string',
    '...other_members=' => 'string',
  ),
  'Redis::sScan' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'key' => 'string',
    '&iterator' => 'int',
    'pattern=' => 'string',
    'count=' => 'int',
  ),
  'Redis::sSize' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'Redis::strLen' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'Redis::subscribe' => 
  array (
    0 => 'mixed|null',
    'channels' => 'array<array-key, mixed>',
    'callback' => 'array<array-key, mixed>|string',
  ),
  'Redis::substr' => 
  array (
    0 => 'mixed',
    'key' => 'string',
    'start' => 'int',
    'end' => 'int',
  ),
  'Redis::sUnion' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'Redis::sUnionStore' => 
  array (
    0 => 'int',
    'dstKey' => 'string',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'Redis::swapdb' => 
  array (
    0 => 'bool',
    'srcdb' => 'int',
    'dstdb' => 'int',
  ),
  'Redis::time' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Redis::ttl' => 
  array (
    0 => 'false|int',
    'key' => 'string',
  ),
  'Redis::type' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'Redis::unlink' => 
  array (
    0 => 'int',
    'key' => 'string',
    '...args' => 'string',
  ),
  'Redis::unlink\'1' => 
  array (
    0 => 'int',
    'key' => 'array<array-key, string>',
  ),
  'Redis::unsubscribe' => 
  array (
    0 => 'mixed',
    'channel' => 'string',
    '...other_channels=' => 'string',
  ),
  'Redis::unwatch' => 
  array (
    0 => 'mixed',
  ),
  'Redis::wait' => 
  array (
    0 => 'int',
    'numSlaves' => 'int',
    'timeout' => 'int',
  ),
  'Redis::watch' => 
  array (
    0 => 'void',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'Redis::xack' => 
  array (
    0 => 'mixed',
    'str_key' => 'string',
    'str_group' => 'string',
    'arr_ids' => 'array<array-key, mixed>',
  ),
  'Redis::xadd' => 
  array (
    0 => 'mixed',
    'str_key' => 'string',
    'str_id' => 'string',
    'arr_fields' => 'array<array-key, mixed>',
    'i_maxlen=' => 'mixed',
    'boo_approximate=' => 'mixed',
  ),
  'Redis::xclaim' => 
  array (
    0 => 'mixed',
    'str_key' => 'string',
    'str_group' => 'string',
    'str_consumer' => 'string',
    'i_min_idle' => 'mixed',
    'arr_ids' => 'array<array-key, mixed>',
    'arr_opts=' => 'array<array-key, mixed>',
  ),
  'Redis::xdel' => 
  array (
    0 => 'mixed',
    'str_key' => 'string',
    'arr_ids' => 'array<array-key, mixed>',
  ),
  'Redis::xgroup' => 
  array (
    0 => 'mixed',
    'str_operation' => 'string',
    'str_key=' => 'string',
    'str_arg1=' => 'mixed',
    'str_arg2=' => 'mixed',
    'str_arg3=' => 'mixed',
  ),
  'Redis::xinfo' => 
  array (
    0 => 'mixed',
    'str_cmd' => 'string',
    'str_key=' => 'string',
    'str_group=' => 'string',
  ),
  'Redis::xlen' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'Redis::xpending' => 
  array (
    0 => 'mixed',
    'str_key' => 'string',
    'str_group' => 'string',
    'str_start=' => 'mixed',
    'str_end=' => 'mixed',
    'i_count=' => 'mixed',
    'str_consumer=' => 'string',
  ),
  'Redis::xrange' => 
  array (
    0 => 'mixed',
    'str_key' => 'string',
    'str_start' => 'mixed',
    'str_end' => 'mixed',
    'i_count=' => 'mixed',
  ),
  'Redis::xread' => 
  array (
    0 => 'mixed',
    'arr_streams' => 'array<array-key, mixed>',
    'i_count=' => 'mixed',
    'i_block=' => 'mixed',
  ),
  'Redis::xreadgroup' => 
  array (
    0 => 'mixed',
    'str_group' => 'string',
    'str_consumer' => 'string',
    'arr_streams' => 'array<array-key, mixed>',
    'i_count=' => 'mixed',
    'i_block=' => 'mixed',
  ),
  'Redis::xrevrange' => 
  array (
    0 => 'mixed',
    'str_key' => 'string',
    'str_start' => 'mixed',
    'str_end' => 'mixed',
    'i_count=' => 'mixed',
  ),
  'Redis::xtrim' => 
  array (
    0 => 'mixed',
    'str_key' => 'string',
    'i_maxlen' => 'mixed',
    'boo_approximate=' => 'mixed',
  ),
  'Redis::zAdd' => 
  array (
    0 => 'int',
    'key' => 'string',
    'score1' => 'float',
    'value1' => 'string',
    'score2=' => 'float',
    'value2=' => 'string',
    'scoreN=' => 'float',
    'valueN=' => 'string',
  ),
  'Redis::zAdd\'1' => 
  array (
    0 => 'int',
    'options' => 'array<array-key, mixed>',
    'key' => 'string',
    'score1' => 'float',
    'value1' => 'string',
    'score2=' => 'float',
    'value2=' => 'string',
    'scoreN=' => 'float',
    'valueN=' => 'string',
  ),
  'Redis::zCard' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'Redis::zCount' => 
  array (
    0 => 'int',
    'key' => 'string',
    'start' => 'string',
    'end' => 'string',
  ),
  'Redis::zDelete' => 
  array (
    0 => 'int',
    'key' => 'string',
    'member' => 'string',
    '...other_members=' => 'string',
  ),
  'Redis::zDeleteRangeByRank' => 
  array (
    0 => 'mixed',
    'key' => 'string',
    'start' => 'int',
    'end' => 'int',
  ),
  'Redis::zDeleteRangeByScore' => 
  array (
    0 => 'mixed',
    'key' => 'string',
    'start' => 'float',
    'end' => 'float',
  ),
  'Redis::zIncrBy' => 
  array (
    0 => 'float',
    'key' => 'string',
    'value' => 'float',
    'member' => 'string',
  ),
  'Redis::zInter' => 
  array (
    0 => 'int',
    'Output' => 'string',
    'ZSetKeys' => 'array<array-key, mixed>',
    'Weights=' => 'array<array-key, mixed>|null',
    'aggregateFunction=' => 'string',
  ),
  'Redis::zInterStore' => 
  array (
    0 => 'int',
    'Output' => 'string',
    'ZSetKeys' => 'array<array-key, mixed>',
    'Weights=' => 'array<array-key, mixed>|null',
    'aggregateFunction=' => 'string',
  ),
  'Redis::zLexCount' => 
  array (
    0 => 'int',
    'key' => 'string',
    'min' => 'string',
    'max' => 'string',
  ),
  'Redis::zRange' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'start' => 'int',
    'end' => 'int',
    'withscores=' => 'bool',
  ),
  'Redis::zRangeByLex' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'key' => 'string',
    'min' => 'int',
    'max' => 'int',
    'offset=' => 'int',
    'limit=' => 'int',
  ),
  'Redis::zRangeByScore' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'start' => 'int|string',
    'end' => 'int|string',
    'options=' => 'array<array-key, mixed>',
  ),
  'Redis::zRank' => 
  array (
    0 => 'int',
    'key' => 'string',
    'member' => 'string',
  ),
  'Redis::zRem' => 
  array (
    0 => 'int',
    'key' => 'string',
    'member' => 'string',
    '...other_members=' => 'string',
  ),
  'Redis::zRemove' => 
  array (
    0 => 'int',
    'key' => 'string',
    'member' => 'string',
    '...other_members=' => 'string',
  ),
  'Redis::zRemoveRangeByRank' => 
  array (
    0 => 'int',
    'key' => 'string',
    'start' => 'int',
    'end' => 'int',
  ),
  'Redis::zRemoveRangeByScore' => 
  array (
    0 => 'int',
    'key' => 'string',
    'start' => 'float|string',
    'end' => 'float|string',
  ),
  'Redis::zRemRangeByLex' => 
  array (
    0 => 'int',
    'key' => 'string',
    'min' => 'string',
    'max' => 'string',
  ),
  'Redis::zRemRangeByRank' => 
  array (
    0 => 'int',
    'key' => 'string',
    'start' => 'int',
    'end' => 'int',
  ),
  'Redis::zRemRangeByScore' => 
  array (
    0 => 'int',
    'key' => 'string',
    'start' => 'float|string',
    'end' => 'float|string',
  ),
  'Redis::zReverseRange' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'start' => 'int',
    'end' => 'int',
    'withscore=' => 'bool',
  ),
  'Redis::zRevRange' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'start' => 'int',
    'end' => 'int',
    'withscore=' => 'bool',
  ),
  'Redis::zRevRangeByLex' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'min' => 'string',
    'max' => 'string',
    'offset=' => 'int',
    'limit=' => 'int',
  ),
  'Redis::zRevRangeByScore' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'start' => 'string',
    'end' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'Redis::zRevRank' => 
  array (
    0 => 'int',
    'key' => 'string',
    'member' => 'string',
  ),
  'Redis::zScan' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'key' => 'string',
    '&iterator' => 'int',
    'pattern=' => 'string',
    'count=' => 'int',
  ),
  'Redis::zScore' => 
  array (
    0 => 'false|float',
    'key' => 'string',
    'member' => 'string',
  ),
  'Redis::zSize' => 
  array (
    0 => 'mixed',
    'key' => 'string',
  ),
  'Redis::zUnion' => 
  array (
    0 => 'int',
    'Output' => 'string',
    'ZSetKeys' => 'array<array-key, mixed>',
    'Weights=' => 'array<array-key, mixed>|null',
    'aggregateFunction=' => 'string',
  ),
  'Redis::zUnionStore' => 
  array (
    0 => 'int',
    'Output' => 'string',
    'ZSetKeys' => 'array<array-key, mixed>',
    'Weights=' => 'array<array-key, mixed>|null',
    'aggregateFunction=' => 'string',
  ),
  'RedisArray::__call' => 
  array (
    0 => 'mixed',
    'function_name' => 'string',
    'arguments' => 'array<array-key, mixed>',
  ),
  'RedisArray::__construct' => 
  array (
    0 => 'void',
    'name=' => 'string',
    'hosts=' => 'array<array-key, mixed>|null',
    'opts=' => 'array<array-key, mixed>|null',
  ),
  'RedisArray::_continuum' => 
  array (
    0 => 'mixed',
  ),
  'RedisArray::_distributor' => 
  array (
    0 => 'mixed',
  ),
  'RedisArray::_function' => 
  array (
    0 => 'string',
  ),
  'RedisArray::_hosts' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'RedisArray::_instance' => 
  array (
    0 => 'mixed',
    'host' => 'mixed',
  ),
  'RedisArray::_rehash' => 
  array (
    0 => 'mixed',
    'callable=' => 'callable',
  ),
  'RedisArray::_target' => 
  array (
    0 => 'string',
    'key' => 'string',
  ),
  'RedisArray::bgsave' => 
  array (
    0 => 'mixed',
  ),
  'RedisArray::del' => 
  array (
    0 => 'bool',
    'key' => 'string',
    '...args' => 'string',
  ),
  'RedisArray::delete' => 
  array (
    0 => 'bool',
    'key' => 'string',
    '...args' => 'string',
  ),
  'RedisArray::delete\'1' => 
  array (
    0 => 'bool',
    'key' => 'array<array-key, string>',
  ),
  'RedisArray::discard' => 
  array (
    0 => 'mixed',
  ),
  'RedisArray::exec' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'RedisArray::flushAll' => 
  array (
    0 => 'bool',
    'async=' => 'bool',
  ),
  'RedisArray::flushDb' => 
  array (
    0 => 'bool',
    'async=' => 'bool',
  ),
  'RedisArray::getMultiple' => 
  array (
    0 => 'mixed',
    'keys' => 'mixed',
  ),
  'RedisArray::getOption' => 
  array (
    0 => 'mixed',
    'opt' => 'mixed',
  ),
  'RedisArray::info' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'RedisArray::keys' => 
  array (
    0 => 'array<int, string>',
    'pattern' => 'mixed',
  ),
  'RedisArray::mGet' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'array<array-key, string>',
  ),
  'RedisArray::mSet' => 
  array (
    0 => 'bool',
    'pairs' => 'array<array-key, mixed>',
  ),
  'RedisArray::multi' => 
  array (
    0 => 'RedisArray',
    'host' => 'string',
    'mode=' => 'int',
  ),
  'RedisArray::ping' => 
  array (
    0 => 'string',
  ),
  'RedisArray::save' => 
  array (
    0 => 'bool',
  ),
  'RedisArray::select' => 
  array (
    0 => 'mixed',
    'index' => 'mixed',
  ),
  'RedisArray::setOption' => 
  array (
    0 => 'mixed',
    'opt' => 'mixed',
    'value' => 'mixed',
  ),
  'RedisArray::unlink' => 
  array (
    0 => 'int',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'RedisArray::unlink\'1' => 
  array (
    0 => 'int',
    'key' => 'array<array-key, string>',
  ),
  'RedisArray::unwatch' => 
  array (
    0 => 'mixed',
  ),
  'RedisCluster::__construct' => 
  array (
    0 => 'void',
    'name' => 'null|string',
    'seeds=' => 'array<array-key, string>',
    'timeout=' => 'float',
    'readTimeout=' => 'float',
    'persistent=' => 'bool',
    'auth=' => 'null|string',
  ),
  'RedisCluster::_masters' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'RedisCluster::_prefix' => 
  array (
    0 => 'string',
    'value' => 'mixed',
  ),
  'RedisCluster::_redir' => 
  array (
    0 => 'mixed',
  ),
  'RedisCluster::_serialize' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
  ),
  'RedisCluster::_unserialize' => 
  array (
    0 => 'mixed',
    'value' => 'string',
  ),
  'RedisCluster::append' => 
  array (
    0 => 'int',
    'key' => 'string',
    'value' => 'string',
  ),
  'RedisCluster::bgrewriteaof' => 
  array (
    0 => 'bool',
    'nodeParams' => 'array{0: string, 1: int}|string',
  ),
  'RedisCluster::bgsave' => 
  array (
    0 => 'bool',
    'nodeParams' => 'array{0: string, 1: int}|string',
  ),
  'RedisCluster::bitCount' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'RedisCluster::bitOp' => 
  array (
    0 => 'int',
    'operation' => 'string',
    'retKey' => 'string',
    'key1' => 'string',
    '...other_keys=' => 'string',
  ),
  'RedisCluster::bitpos' => 
  array (
    0 => 'int',
    'key' => 'string',
    'bit' => 'int',
    'start=' => 'int',
    'end=' => 'int',
  ),
  'RedisCluster::blPop' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'array<array-key, mixed>',
    'timeout' => 'int',
  ),
  'RedisCluster::brPop' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'array<array-key, mixed>',
    'timeout' => 'int',
  ),
  'RedisCluster::brpoplpush' => 
  array (
    0 => 'false|string',
    'srcKey' => 'string',
    'dstKey' => 'string',
    'timeout' => 'int',
  ),
  'RedisCluster::clearLastError' => 
  array (
    0 => 'bool',
  ),
  'RedisCluster::client' => 
  array (
    0 => 'mixed',
    'nodeParams' => 'array{0: string, 1: int}|string',
    'subCmd=' => 'string',
    '...args=' => 'mixed',
  ),
  'RedisCluster::close' => 
  array (
    0 => 'mixed',
  ),
  'RedisCluster::cluster' => 
  array (
    0 => 'mixed',
    'nodeParams' => 'array{0: string, 1: int}|string',
    'command' => 'string',
    'arguments=' => 'mixed',
  ),
  'RedisCluster::command' => 
  array (
    0 => 'array<array-key, mixed>|bool',
  ),
  'RedisCluster::config' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'nodeParams' => 'array{0: string, 1: int}|string',
    'operation' => 'string',
    'key' => 'string',
    'value=' => 'string',
  ),
  'RedisCluster::dbSize' => 
  array (
    0 => 'int',
    'nodeParams' => 'array{0: string, 1: int}|string',
  ),
  'RedisCluster::decr' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'RedisCluster::decrBy' => 
  array (
    0 => 'int',
    'key' => 'string',
    'value' => 'int',
  ),
  'RedisCluster::del' => 
  array (
    0 => 'int',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'RedisCluster::del\'1' => 
  array (
    0 => 'int',
    'key' => 'array<array-key, string>',
  ),
  'RedisCluster::discard' => 
  array (
    0 => 'mixed',
  ),
  'RedisCluster::dump' => 
  array (
    0 => 'false|string',
    'key' => 'string',
  ),
  'RedisCluster::echo' => 
  array (
    0 => 'string',
    'nodeParams' => 'array{0: string, 1: int}|string',
    'msg' => 'string',
  ),
  'RedisCluster::eval' => 
  array (
    0 => 'mixed',
    'script' => 'mixed',
    'args=' => 'mixed',
    'numKeys=' => 'mixed',
  ),
  'RedisCluster::evalSha' => 
  array (
    0 => 'mixed',
    'scriptSha' => 'string',
    'args=' => 'array<array-key, mixed>',
    'numKeys=' => 'int',
  ),
  'RedisCluster::exec' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'RedisCluster::exists' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'RedisCluster::expire' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'ttl' => 'int',
  ),
  'RedisCluster::expireAt' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'timestamp' => 'int',
  ),
  'RedisCluster::flushAll' => 
  array (
    0 => 'bool',
    'nodeParams' => 'array{0: string, 1: int}|string',
    'async=' => 'bool',
  ),
  'RedisCluster::flushDB' => 
  array (
    0 => 'bool',
    'nodeParams' => 'array{0: string, 1: int}|string',
    'async=' => 'bool',
  ),
  'RedisCluster::geoAdd' => 
  array (
    0 => 'int',
    'key' => 'string',
    'longitude' => 'float',
    'latitude' => 'float',
    'member' => 'string',
    '...other_members=' => 'float|string',
  ),
  'RedisCluster::geoDist' => 
  array (
    0 => 'mixed',
    'key' => 'string',
    'member1' => 'string',
    'member2' => 'string',
    'unit=' => 'string',
  ),
  'RedisCluster::geohash' => 
  array (
    0 => 'array<int, string>',
    'key' => 'string',
    'member' => 'string',
    '...other_members=' => 'string',
  ),
  'RedisCluster::geopos' => 
  array (
    0 => 'array<int, array{0: string, 1: string}>',
    'key' => 'string',
    'member' => 'string',
    '...other_members=' => 'string',
  ),
  'RedisCluster::geoRadius' => 
  array (
    0 => 'mixed',
    'key' => 'string',
    'longitude' => 'float',
    'latitude' => 'float',
    'radius' => 'float',
    'radiusUnit' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'RedisCluster::geoRadiusByMember' => 
  array (
    0 => 'array<array-key, string>',
    'key' => 'string',
    'member' => 'string',
    'radius' => 'float',
    'radiusUnit' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'RedisCluster::get' => 
  array (
    0 => 'false|string',
    'key' => 'string',
  ),
  'RedisCluster::getBit' => 
  array (
    0 => 'int',
    'key' => 'string',
    'offset' => 'int',
  ),
  'RedisCluster::getLastError' => 
  array (
    0 => 'null|string',
  ),
  'RedisCluster::getMode' => 
  array (
    0 => 'int',
  ),
  'RedisCluster::getOption' => 
  array (
    0 => 'int',
    'option' => 'int',
  ),
  'RedisCluster::getRange' => 
  array (
    0 => 'string',
    'key' => 'string',
    'start' => 'int',
    'end' => 'int',
  ),
  'RedisCluster::getSet' => 
  array (
    0 => 'string',
    'key' => 'string',
    'value' => 'string',
  ),
  'RedisCluster::hDel' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'hashKey' => 'string',
    '...other_hashKeys=' => 'array<array-key, string>',
  ),
  'RedisCluster::hExists' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'hashKey' => 'string',
  ),
  'RedisCluster::hGet' => 
  array (
    0 => 'false|string',
    'key' => 'string',
    'hashKey' => 'string',
  ),
  'RedisCluster::hGetAll' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
  ),
  'RedisCluster::hIncrBy' => 
  array (
    0 => 'int',
    'key' => 'string',
    'hashKey' => 'string',
    'value' => 'int',
  ),
  'RedisCluster::hIncrByFloat' => 
  array (
    0 => 'float',
    'key' => 'string',
    'field' => 'string',
    'increment' => 'float',
  ),
  'RedisCluster::hKeys' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
  ),
  'RedisCluster::hLen' => 
  array (
    0 => 'false|int',
    'key' => 'string',
  ),
  'RedisCluster::hMGet' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'hashKeys' => 'array<array-key, mixed>',
  ),
  'RedisCluster::hMSet' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'hashKeys' => 'array<array-key, mixed>',
  ),
  'RedisCluster::hScan' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    '&iterator' => 'int',
    'pattern=' => 'string',
    'count=' => 'int',
  ),
  'RedisCluster::hSet' => 
  array (
    0 => 'int',
    'key' => 'string',
    'hashKey' => 'string',
    'value' => 'string',
  ),
  'RedisCluster::hSetNx' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'hashKey' => 'string',
    'value' => 'string',
  ),
  'RedisCluster::hStrlen' => 
  array (
    0 => 'int',
    'key' => 'string',
    'member' => 'string',
  ),
  'RedisCluster::hVals' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
  ),
  'RedisCluster::incr' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'RedisCluster::incrBy' => 
  array (
    0 => 'int',
    'key' => 'string',
    'value' => 'int',
  ),
  'RedisCluster::incrByFloat' => 
  array (
    0 => 'float',
    'key' => 'string',
    'increment' => 'float',
  ),
  'RedisCluster::info' => 
  array (
    0 => 'array<array-key, mixed>',
    'nodeParams' => 'array{0: string, 1: int}|string',
    'option=' => 'string',
  ),
  'RedisCluster::keys' => 
  array (
    0 => 'array<array-key, mixed>',
    'pattern' => 'string',
  ),
  'RedisCluster::lastSave' => 
  array (
    0 => 'int',
    'nodeParams' => 'array{0: string, 1: int}|string',
  ),
  'RedisCluster::lGet' => 
  array (
    0 => 'mixed',
    'key' => 'string',
    'index' => 'int',
  ),
  'RedisCluster::lIndex' => 
  array (
    0 => 'false|string',
    'key' => 'string',
    'index' => 'int',
  ),
  'RedisCluster::lInsert' => 
  array (
    0 => 'int',
    'key' => 'string',
    'position' => 'int',
    'pivot' => 'string',
    'value' => 'string',
  ),
  'RedisCluster::lLen' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'RedisCluster::lPop' => 
  array (
    0 => 'false|string',
    'key' => 'string',
  ),
  'RedisCluster::lPush' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'value1' => 'string',
    'value2=' => 'string',
    'valueN=' => 'string',
  ),
  'RedisCluster::lPushx' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'value' => 'string',
  ),
  'RedisCluster::lRange' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'start' => 'int',
    'end' => 'int',
  ),
  'RedisCluster::lRem' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'value' => 'string',
    'count' => 'int',
  ),
  'RedisCluster::lSet' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'index' => 'int',
    'value' => 'string',
  ),
  'RedisCluster::lTrim' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'key' => 'string',
    'start' => 'int',
    'stop' => 'int',
  ),
  'RedisCluster::mget' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
  ),
  'RedisCluster::mset' => 
  array (
    0 => 'bool',
    'array' => 'array<array-key, mixed>',
  ),
  'RedisCluster::msetnx' => 
  array (
    0 => 'int',
    'array' => 'array<array-key, mixed>',
  ),
  'RedisCluster::multi' => 
  array (
    0 => 'Redis',
    'mode=' => 'int',
  ),
  'RedisCluster::object' => 
  array (
    0 => 'false|int|string',
    'string' => 'string',
    'key' => 'string',
  ),
  'RedisCluster::persist' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'RedisCluster::pExpire' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'ttl' => 'int',
  ),
  'RedisCluster::pExpireAt' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'timestamp' => 'int',
  ),
  'RedisCluster::pfAdd' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'elements' => 'array<array-key, mixed>',
  ),
  'RedisCluster::pfCount' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'RedisCluster::pfMerge' => 
  array (
    0 => 'bool',
    'destKey' => 'string',
    'sourceKeys' => 'array<array-key, mixed>',
  ),
  'RedisCluster::ping' => 
  array (
    0 => 'string',
    'nodeParams' => 'array{0: string, 1: int}|string',
  ),
  'RedisCluster::psetex' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'ttl' => 'int',
    'value' => 'string',
  ),
  'RedisCluster::psubscribe' => 
  array (
    0 => 'mixed',
    'patterns' => 'array<array-key, mixed>',
    'callback' => 'string',
  ),
  'RedisCluster::pttl' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'RedisCluster::publish' => 
  array (
    0 => 'int',
    'channel' => 'string',
    'message' => 'string',
  ),
  'RedisCluster::pubsub' => 
  array (
    0 => 'array<array-key, mixed>',
    'nodeParams' => 'string',
    'keyword' => 'string',
    '...argument=' => 'string',
  ),
  'RedisCluster::punSubscribe' => 
  array (
    0 => 'mixed',
    'channels' => 'mixed',
    'callback' => 'mixed',
  ),
  'RedisCluster::randomKey' => 
  array (
    0 => 'string',
    'nodeParams' => 'array{0: string, 1: int}|string',
  ),
  'RedisCluster::rawCommand' => 
  array (
    0 => 'mixed',
    'nodeParams' => 'array{0: string, 1: int}|string',
    'command' => 'string',
    'arguments=' => 'mixed',
  ),
  'RedisCluster::rename' => 
  array (
    0 => 'bool',
    'srcKey' => 'string',
    'dstKey' => 'string',
  ),
  'RedisCluster::renameNx' => 
  array (
    0 => 'bool',
    'srcKey' => 'string',
    'dstKey' => 'string',
  ),
  'RedisCluster::restore' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'ttl' => 'int',
    'value' => 'string',
  ),
  'RedisCluster::role' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'RedisCluster::rPop' => 
  array (
    0 => 'false|string',
    'key' => 'string',
  ),
  'RedisCluster::rpoplpush' => 
  array (
    0 => 'false|string',
    'srcKey' => 'string',
    'dstKey' => 'string',
  ),
  'RedisCluster::rPush' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'value1' => 'string',
    'value2=' => 'string',
    'valueN=' => 'string',
  ),
  'RedisCluster::rPushx' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'value' => 'string',
  ),
  'RedisCluster::sAdd' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'value1' => 'string',
    'value2=' => 'string',
    'valueN=' => 'string',
  ),
  'RedisCluster::sAddArray' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'valueArray' => 'array<array-key, mixed>',
  ),
  'RedisCluster::save' => 
  array (
    0 => 'bool',
    'nodeParams' => 'array{0: string, 1: int}|string',
  ),
  'RedisCluster::scan' => 
  array (
    0 => 'array<array-key, mixed>|false',
    '&iterator' => 'int',
    'nodeParams' => 'array{0: string, 1: int}|string',
    'pattern=' => 'string',
    'count=' => 'int',
  ),
  'RedisCluster::sCard' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'RedisCluster::script' => 
  array (
    0 => 'array<array-key, mixed>|bool|string',
    'nodeParams' => 'array{0: string, 1: int}|string',
    'command' => 'string',
    'script=' => 'string',
    '...other_scripts=' => 'array<array-key, string>',
  ),
  'RedisCluster::sDiff' => 
  array (
    0 => 'list<string>',
    'key1' => 'string',
    'key2' => 'string',
    '...other_keys=' => 'string',
  ),
  'RedisCluster::sDiffStore' => 
  array (
    0 => 'int',
    'dstKey' => 'string',
    'key1' => 'string',
    '...other_keys=' => 'string',
  ),
  'RedisCluster::set' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'string',
    'timeout=' => 'array<array-key, mixed>|int',
  ),
  'RedisCluster::setBit' => 
  array (
    0 => 'int',
    'key' => 'string',
    'offset' => 'int',
    'value' => 'bool|int',
  ),
  'RedisCluster::setex' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'ttl' => 'int',
    'value' => 'string',
  ),
  'RedisCluster::setnx' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'string',
  ),
  'RedisCluster::setOption' => 
  array (
    0 => 'bool',
    'option' => 'int',
    'value' => 'int|string',
  ),
  'RedisCluster::setRange' => 
  array (
    0 => 'string',
    'key' => 'string',
    'offset' => 'int',
    'value' => 'string',
  ),
  'RedisCluster::sInter' => 
  array (
    0 => 'list<string>',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'RedisCluster::sInterStore' => 
  array (
    0 => 'int',
    'dstKey' => 'string',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'RedisCluster::sIsMember' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'string',
  ),
  'RedisCluster::slowLog' => 
  array (
    0 => 'array<array-key, mixed>|bool|int',
    'nodeParams' => 'array{0: string, 1: int}|string',
    'command' => 'string',
    'length=' => 'int',
  ),
  'RedisCluster::sMembers' => 
  array (
    0 => 'list<string>',
    'key' => 'string',
  ),
  'RedisCluster::sMove' => 
  array (
    0 => 'bool',
    'srcKey' => 'string',
    'dstKey' => 'string',
    'member' => 'string',
  ),
  'RedisCluster::sort' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'option=' => 'array<array-key, mixed>',
  ),
  'RedisCluster::sPop' => 
  array (
    0 => 'string',
    'key' => 'string',
  ),
  'RedisCluster::sRandMember' => 
  array (
    0 => 'array<array-key, mixed>|string',
    'key' => 'string',
    'count=' => 'int',
  ),
  'RedisCluster::sRem' => 
  array (
    0 => 'int',
    'key' => 'string',
    'member1' => 'string',
    '...other_members=' => 'string',
  ),
  'RedisCluster::sScan' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'key' => 'string',
    '&iterator' => 'int',
    'pattern=' => 'null',
    'count=' => 'int',
  ),
  'RedisCluster::strlen' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'RedisCluster::subscribe' => 
  array (
    0 => 'mixed',
    'channels' => 'array<array-key, mixed>',
    'callback' => 'string',
  ),
  'RedisCluster::sUnion' => 
  array (
    0 => 'list<string>',
    'key1' => 'string',
    '...other_keys=' => 'string',
  ),
  'RedisCluster::sUnion\'1' => 
  array (
    0 => 'list<string>',
    'keys' => 'array<array-key, string>',
  ),
  'RedisCluster::sUnionStore' => 
  array (
    0 => 'int',
    'dstKey' => 'string',
    'key1' => 'string',
    '...other_keys=' => 'string',
  ),
  'RedisCluster::time' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'RedisCluster::ttl' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'RedisCluster::type' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'RedisCluster::unlink' => 
  array (
    0 => 'int',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'RedisCluster::unSubscribe' => 
  array (
    0 => 'mixed',
    'channels' => 'mixed',
    '...other_channels=' => 'mixed',
  ),
  'RedisCluster::unwatch' => 
  array (
    0 => 'mixed',
  ),
  'RedisCluster::watch' => 
  array (
    0 => 'void',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'RedisCluster::xack' => 
  array (
    0 => 'mixed',
    'str_key' => 'string',
    'str_group' => 'string',
    'arr_ids' => 'array<array-key, mixed>',
  ),
  'RedisCluster::xadd' => 
  array (
    0 => 'mixed',
    'str_key' => 'string',
    'str_id' => 'string',
    'arr_fields' => 'array<array-key, mixed>',
    'i_maxlen=' => 'mixed',
    'boo_approximate=' => 'mixed',
  ),
  'RedisCluster::xclaim' => 
  array (
    0 => 'mixed',
    'str_key' => 'string',
    'str_group' => 'string',
    'str_consumer' => 'string',
    'i_min_idle' => 'mixed',
    'arr_ids' => 'array<array-key, mixed>',
    'arr_opts=' => 'array<array-key, mixed>',
  ),
  'RedisCluster::xdel' => 
  array (
    0 => 'mixed',
    'str_key' => 'string',
    'arr_ids' => 'array<array-key, mixed>',
  ),
  'RedisCluster::xgroup' => 
  array (
    0 => 'mixed',
    'str_operation' => 'string',
    'str_key=' => 'string',
    'str_arg1=' => 'mixed',
    'str_arg2=' => 'mixed',
    'str_arg3=' => 'mixed',
  ),
  'RedisCluster::xinfo' => 
  array (
    0 => 'mixed',
    'str_cmd' => 'string',
    'str_key=' => 'string',
    'str_group=' => 'string',
  ),
  'RedisCluster::xlen' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'RedisCluster::xpending' => 
  array (
    0 => 'mixed',
    'str_key' => 'string',
    'str_group' => 'string',
    'str_start=' => 'mixed',
    'str_end=' => 'mixed',
    'i_count=' => 'mixed',
    'str_consumer=' => 'string',
  ),
  'RedisCluster::xrange' => 
  array (
    0 => 'mixed',
    'str_key' => 'string',
    'str_start' => 'mixed',
    'str_end' => 'mixed',
    'i_count=' => 'mixed',
  ),
  'RedisCluster::xread' => 
  array (
    0 => 'mixed',
    'arr_streams' => 'array<array-key, mixed>',
    'i_count=' => 'mixed',
    'i_block=' => 'mixed',
  ),
  'RedisCluster::xreadgroup' => 
  array (
    0 => 'mixed',
    'str_group' => 'string',
    'str_consumer' => 'string',
    'arr_streams' => 'array<array-key, mixed>',
    'i_count=' => 'mixed',
    'i_block=' => 'mixed',
  ),
  'RedisCluster::xrevrange' => 
  array (
    0 => 'mixed',
    'str_key' => 'string',
    'str_start' => 'mixed',
    'str_end' => 'mixed',
    'i_count=' => 'mixed',
  ),
  'RedisCluster::xtrim' => 
  array (
    0 => 'mixed',
    'str_key' => 'string',
    'i_maxlen' => 'mixed',
    'boo_approximate=' => 'mixed',
  ),
  'RedisCluster::zAdd' => 
  array (
    0 => 'int',
    'key' => 'string',
    'score1' => 'float',
    'value1' => 'string',
    'score2=' => 'float',
    'value2=' => 'string',
    'scoreN=' => 'float',
    'valueN=' => 'string',
  ),
  'RedisCluster::zCard' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'RedisCluster::zCount' => 
  array (
    0 => 'int',
    'key' => 'string',
    'start' => 'string',
    'end' => 'string',
  ),
  'RedisCluster::zIncrBy' => 
  array (
    0 => 'float',
    'key' => 'string',
    'value' => 'float',
    'member' => 'string',
  ),
  'RedisCluster::zInterStore' => 
  array (
    0 => 'int',
    'Output' => 'string',
    'ZSetKeys' => 'array<array-key, mixed>',
    'Weights=' => 'array<array-key, mixed>|null',
    'aggregateFunction=' => 'string',
  ),
  'RedisCluster::zLexCount' => 
  array (
    0 => 'int',
    'key' => 'string',
    'min' => 'int',
    'max' => 'int',
  ),
  'RedisCluster::zRange' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'start' => 'int',
    'end' => 'int',
    'withscores=' => 'bool',
  ),
  'RedisCluster::zRangeByLex' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'min' => 'int',
    'max' => 'int',
    'offset=' => 'int',
    'limit=' => 'int',
  ),
  'RedisCluster::zRangeByScore' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'start' => 'int',
    'end' => 'int',
    'options=' => 'array<array-key, mixed>',
  ),
  'RedisCluster::zRank' => 
  array (
    0 => 'int',
    'key' => 'string',
    'member' => 'string',
  ),
  'RedisCluster::zRem' => 
  array (
    0 => 'int',
    'key' => 'string',
    'member1' => 'string',
    '...other_members=' => 'string',
  ),
  'RedisCluster::zRemRangeByLex' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'min' => 'int',
    'max' => 'int',
  ),
  'RedisCluster::zRemRangeByRank' => 
  array (
    0 => 'int',
    'key' => 'string',
    'start' => 'int',
    'end' => 'int',
  ),
  'RedisCluster::zRemRangeByScore' => 
  array (
    0 => 'int',
    'key' => 'string',
    'start' => 'float|string',
    'end' => 'float|string',
  ),
  'RedisCluster::zRevRange' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'start' => 'int',
    'end' => 'int',
    'withscore=' => 'bool',
  ),
  'RedisCluster::zRevRangeByLex' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'min' => 'int',
    'max' => 'int',
    'offset=' => 'int',
    'limit=' => 'int',
  ),
  'RedisCluster::zRevRangeByScore' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'start' => 'int',
    'end' => 'int',
    'options=' => 'array<array-key, mixed>',
  ),
  'RedisCluster::zRevRank' => 
  array (
    0 => 'int',
    'key' => 'string',
    'member' => 'string',
  ),
  'RedisCluster::zScan' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'key' => 'string',
    '&iterator' => 'int',
    'pattern=' => 'string',
    'count=' => 'int',
  ),
  'RedisCluster::zScore' => 
  array (
    0 => 'float',
    'key' => 'string',
    'member' => 'string',
  ),
  'RedisCluster::zUnionStore' => 
  array (
    0 => 'int',
    'Output' => 'string',
    'ZSetKeys' => 'array<array-key, mixed>',
    'Weights=' => 'array<array-key, mixed>|null',
    'aggregateFunction=' => 'string',
  ),
  'Reflection::getModifierNames' => 
  array (
    0 => 'list<string>',
    'modifiers' => 'int',
  ),
  'ReflectionClass::__clone' => 
  array (
    0 => 'void',
  ),
  'ReflectionClass::__construct' => 
  array (
    0 => 'void',
    'objectOrClass' => 'class-string|object',
  ),
  'ReflectionClass::__toString' => 
  array (
    0 => 'string',
  ),
  'ReflectionClass::getAttributes' => 
  array (
    0 => 'list<ReflectionAttribute>',
    'name=' => 'null|string',
    'flags=' => 'int',
  ),
  'ReflectionClass::getConstant' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'ReflectionClass::getConstants' => 
  array (
    0 => 'array<string, mixed>',
    'filter=' => 'int|null',
  ),
  'ReflectionClass::getConstructor' => 
  array (
    0 => 'ReflectionMethod|null',
  ),
  'ReflectionClass::getDefaultProperties' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ReflectionClass::getDocComment' => 
  array (
    0 => 'false|string',
  ),
  'ReflectionClass::getEndLine' => 
  array (
    0 => 'false|int',
  ),
  'ReflectionClass::getExtension' => 
  array (
    0 => 'ReflectionExtension|null',
  ),
  'ReflectionClass::getExtensionName' => 
  array (
    0 => 'false|string',
  ),
  'ReflectionClass::getFileName' => 
  array (
    0 => 'false|string',
  ),
  'ReflectionClass::getInterfaceNames' => 
  array (
    0 => 'list<class-string>',
  ),
  'ReflectionClass::getInterfaces' => 
  array (
    0 => 'array<class-string, ReflectionClass>',
  ),
  'ReflectionClass::getMethod' => 
  array (
    0 => 'ReflectionMethod',
    'name' => 'string',
  ),
  'ReflectionClass::getMethods' => 
  array (
    0 => 'list<ReflectionMethod>',
    'filter=' => 'int|null',
  ),
  'ReflectionClass::getModifiers' => 
  array (
    0 => 'int',
  ),
  'ReflectionClass::getName' => 
  array (
    0 => 'class-string',
  ),
  'ReflectionClass::getNamespaceName' => 
  array (
    0 => 'string',
  ),
  'ReflectionClass::getParentClass' => 
  array (
    0 => 'ReflectionClass|false',
  ),
  'ReflectionClass::getProperties' => 
  array (
    0 => 'list<ReflectionProperty>',
    'filter=' => 'int|null',
  ),
  'ReflectionClass::getProperty' => 
  array (
    0 => 'ReflectionProperty',
    'name' => 'string',
  ),
  'ReflectionClass::getReflectionConstant' => 
  array (
    0 => 'ReflectionClassConstant|false',
    'name' => 'string',
  ),
  'ReflectionClass::getReflectionConstants' => 
  array (
    0 => 'list<ReflectionClassConstant>',
    'filter=' => 'int|null',
  ),
  'ReflectionClass::getShortName' => 
  array (
    0 => 'string',
  ),
  'ReflectionClass::getStartLine' => 
  array (
    0 => 'false|int',
  ),
  'ReflectionClass::getStaticProperties' => 
  array (
    0 => 'array<string, ReflectionProperty>',
  ),
  'ReflectionClass::getStaticPropertyValue' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'default=' => 'mixed',
  ),
  'ReflectionClass::getTraitAliases' => 
  array (
    0 => 'array<string, string>',
  ),
  'ReflectionClass::getTraitNames' => 
  array (
    0 => 'list<trait-string>',
  ),
  'ReflectionClass::getTraits' => 
  array (
    0 => 'array<trait-string, ReflectionClass>',
  ),
  'ReflectionClass::hasConstant' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'ReflectionClass::hasMethod' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'ReflectionClass::hasProperty' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'ReflectionClass::implementsInterface' => 
  array (
    0 => 'bool',
    'interface' => 'ReflectionClass|class-string',
  ),
  'ReflectionClass::inNamespace' => 
  array (
    0 => 'bool',
  ),
  'ReflectionClass::isAbstract' => 
  array (
    0 => 'bool',
  ),
  'ReflectionClass::isAnonymous' => 
  array (
    0 => 'bool',
  ),
  'ReflectionClass::isCloneable' => 
  array (
    0 => 'bool',
  ),
  'ReflectionClass::isEnum' => 
  array (
    0 => 'bool',
  ),
  'ReflectionClass::isFinal' => 
  array (
    0 => 'bool',
  ),
  'ReflectionClass::isInstance' => 
  array (
    0 => 'bool',
    'object' => 'object',
  ),
  'ReflectionClass::isInstantiable' => 
  array (
    0 => 'bool',
  ),
  'ReflectionClass::isInterface' => 
  array (
    0 => 'bool',
  ),
  'ReflectionClass::isInternal' => 
  array (
    0 => 'bool',
  ),
  'ReflectionClass::isIterable' => 
  array (
    0 => 'bool',
  ),
  'ReflectionClass::isIterateable' => 
  array (
    0 => 'bool',
  ),
  'ReflectionClass::isSubclassOf' => 
  array (
    0 => 'bool',
    'class' => 'ReflectionClass|class-string',
  ),
  'ReflectionClass::isTrait' => 
  array (
    0 => 'bool',
  ),
  'ReflectionClass::isUserDefined' => 
  array (
    0 => 'bool',
  ),
  'ReflectionClass::newInstance' => 
  array (
    0 => 'object',
    '...args=' => 'mixed',
  ),
  'ReflectionClass::newInstanceArgs' => 
  array (
    0 => 'object',
    'args=' => 'array<int<0, max>|string, mixed>',
  ),
  'ReflectionClass::newInstanceWithoutConstructor' => 
  array (
    0 => 'object',
  ),
  'ReflectionClass::setStaticPropertyValue' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'ReflectionClassConstant::__construct' => 
  array (
    0 => 'void',
    'class' => 'class-string|object',
    'constant' => 'string',
  ),
  'ReflectionClassConstant::__toString' => 
  array (
    0 => 'string',
  ),
  'ReflectionClassConstant::getAttributes' => 
  array (
    0 => 'list<ReflectionAttribute>',
    'name=' => 'null|string',
    'flags=' => 'int',
  ),
  'ReflectionClassConstant::getDeclaringClass' => 
  array (
    0 => 'ReflectionClass',
  ),
  'ReflectionClassConstant::getDocComment' => 
  array (
    0 => 'false|string',
  ),
  'ReflectionClassConstant::getModifiers' => 
  array (
    0 => 'int',
  ),
  'ReflectionClassConstant::getName' => 
  array (
    0 => 'string',
  ),
  'ReflectionClassConstant::getValue' => 
  array (
    0 => 'array<array-key, scalar>|null|scalar',
  ),
  'ReflectionClassConstant::isPrivate' => 
  array (
    0 => 'bool',
  ),
  'ReflectionClassConstant::isProtected' => 
  array (
    0 => 'bool',
  ),
  'ReflectionClassConstant::isPublic' => 
  array (
    0 => 'bool',
  ),
  'ReflectionEnum::getBackingType' => 
  array (
    0 => 'ReflectionType|null',
  ),
  'ReflectionEnum::getCase' => 
  array (
    0 => 'ReflectionEnumUnitCase',
    'name' => 'string',
  ),
  'ReflectionEnum::getCases' => 
  array (
    0 => 'list<ReflectionEnumUnitCase>',
  ),
  'ReflectionEnum::hasCase' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'ReflectionEnum::isBacked' => 
  array (
    0 => 'bool',
  ),
  'ReflectionEnumUnitCase::getEnum' => 
  array (
    0 => 'ReflectionEnum',
  ),
  'ReflectionEnumUnitCase::getValue' => 
  array (
    0 => 'UnitEnum',
  ),
  'ReflectionEnumBackedCase::getBackingValue' => 
  array (
    0 => 'int|string',
  ),
  'ReflectionExtension::__clone' => 
  array (
    0 => 'void',
  ),
  'ReflectionExtension::__construct' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'ReflectionExtension::__toString' => 
  array (
    0 => 'string',
  ),
  'ReflectionExtension::getClasses' => 
  array (
    0 => 'array<class-string, ReflectionClass>',
  ),
  'ReflectionExtension::getClassNames' => 
  array (
    0 => 'list<class-string>',
  ),
  'ReflectionExtension::getConstants' => 
  array (
    0 => 'array<string, mixed>',
  ),
  'ReflectionExtension::getDependencies' => 
  array (
    0 => 'array<string, string>',
  ),
  'ReflectionExtension::getFunctions' => 
  array (
    0 => 'array<string, ReflectionFunction>',
  ),
  'ReflectionExtension::getINIEntries' => 
  array (
    0 => 'array<string, mixed>',
  ),
  'ReflectionExtension::getName' => 
  array (
    0 => 'string',
  ),
  'ReflectionExtension::getVersion' => 
  array (
    0 => 'null|string',
  ),
  'ReflectionExtension::info' => 
  array (
    0 => 'void',
  ),
  'ReflectionExtension::isPersistent' => 
  array (
    0 => 'bool',
  ),
  'ReflectionExtension::isTemporary' => 
  array (
    0 => 'bool',
  ),
  'ReflectionFunction::__construct' => 
  array (
    0 => 'void',
    'function' => 'Closure|callable-string',
  ),
  'ReflectionFunction::__toString' => 
  array (
    0 => 'string',
  ),
  'ReflectionFunction::getClosure' => 
  array (
    0 => 'Closure',
  ),
  'ReflectionFunction::getClosureScopeClass' => 
  array (
    0 => 'ReflectionClass',
  ),
  'ReflectionFunction::getClosureThis' => 
  array (
    0 => 'object',
  ),
  'ReflectionFunction::getDocComment' => 
  array (
    0 => 'false|string',
  ),
  'ReflectionFunction::getEndLine' => 
  array (
    0 => 'false|int',
  ),
  'ReflectionFunction::getExtension' => 
  array (
    0 => 'ReflectionExtension|null',
  ),
  'ReflectionFunction::getExtensionName' => 
  array (
    0 => 'false|string',
  ),
  'ReflectionFunction::getFileName' => 
  array (
    0 => 'false|string',
  ),
  'ReflectionFunction::getName' => 
  array (
    0 => 'callable-string',
  ),
  'ReflectionFunction::getNamespaceName' => 
  array (
    0 => 'string',
  ),
  'ReflectionFunction::getNumberOfParameters' => 
  array (
    0 => 'int',
  ),
  'ReflectionFunction::getNumberOfRequiredParameters' => 
  array (
    0 => 'int',
  ),
  'ReflectionFunction::getParameters' => 
  array (
    0 => 'list<ReflectionParameter>',
  ),
  'ReflectionFunction::getReturnType' => 
  array (
    0 => 'ReflectionType|null',
  ),
  'ReflectionFunction::getShortName' => 
  array (
    0 => 'string',
  ),
  'ReflectionFunction::getStartLine' => 
  array (
    0 => 'false|int',
  ),
  'ReflectionFunction::getStaticVariables' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ReflectionFunction::hasReturnType' => 
  array (
    0 => 'bool',
  ),
  'ReflectionFunction::inNamespace' => 
  array (
    0 => 'bool',
  ),
  'ReflectionFunction::invoke' => 
  array (
    0 => 'mixed',
    '...args=' => 'mixed',
  ),
  'ReflectionFunction::invokeArgs' => 
  array (
    0 => 'mixed',
    'args' => 'array<array-key, mixed>',
  ),
  'ReflectionFunction::isClosure' => 
  array (
    0 => 'bool',
  ),
  'ReflectionFunction::isDeprecated' => 
  array (
    0 => 'bool',
  ),
  'ReflectionFunction::isDisabled' => 
  array (
    0 => 'bool',
  ),
  'ReflectionFunction::isGenerator' => 
  array (
    0 => 'bool',
  ),
  'ReflectionFunction::isInternal' => 
  array (
    0 => 'bool',
  ),
  'ReflectionFunction::isUserDefined' => 
  array (
    0 => 'bool',
  ),
  'ReflectionFunction::isVariadic' => 
  array (
    0 => 'bool',
  ),
  'ReflectionFunction::returnsReference' => 
  array (
    0 => 'bool',
  ),
  'ReflectionFunctionAbstract::__clone' => 
  array (
    0 => 'void',
  ),
  'ReflectionFunctionAbstract::__toString' => 
  array (
    0 => 'string',
  ),
  'ReflectionFunctionAbstract::getAttributes' => 
  array (
    0 => 'list<ReflectionAttribute>',
    'name=' => 'null|string',
    'flags=' => 'int',
  ),
  'ReflectionFunctionAbstract::getClosureScopeClass' => 
  array (
    0 => 'ReflectionClass|null',
  ),
  'ReflectionFunctionAbstract::getClosureThis' => 
  array (
    0 => 'null|object',
  ),
  'ReflectionFunctionAbstract::getDocComment' => 
  array (
    0 => 'false|string',
  ),
  'ReflectionFunctionAbstract::getEndLine' => 
  array (
    0 => 'false|int',
  ),
  'ReflectionFunctionAbstract::getExtension' => 
  array (
    0 => 'ReflectionExtension|null',
  ),
  'ReflectionFunctionAbstract::getExtensionName' => 
  array (
    0 => 'false|string',
  ),
  'ReflectionFunctionAbstract::getFileName' => 
  array (
    0 => 'false|string',
  ),
  'ReflectionFunctionAbstract::getName' => 
  array (
    0 => 'string',
  ),
  'ReflectionFunctionAbstract::getNamespaceName' => 
  array (
    0 => 'string',
  ),
  'ReflectionFunctionAbstract::getNumberOfParameters' => 
  array (
    0 => 'int',
  ),
  'ReflectionFunctionAbstract::getNumberOfRequiredParameters' => 
  array (
    0 => 'int',
  ),
  'ReflectionFunctionAbstract::getParameters' => 
  array (
    0 => 'list<ReflectionParameter>',
  ),
  'ReflectionFunctionAbstract::getReturnType' => 
  array (
    0 => 'ReflectionType|null',
  ),
  'ReflectionFunctionAbstract::getShortName' => 
  array (
    0 => 'string',
  ),
  'ReflectionFunctionAbstract::getStartLine' => 
  array (
    0 => 'false|int',
  ),
  'ReflectionFunctionAbstract::getStaticVariables' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ReflectionFunctionAbstract::getTentativeReturnType' => 
  array (
    0 => 'ReflectionType|null',
  ),
  'ReflectionFunctionAbstract::hasReturnType' => 
  array (
    0 => 'bool',
  ),
  'ReflectionFunctionAbstract::hasTentativeReturnType' => 
  array (
    0 => 'bool',
  ),
  'ReflectionFunctionAbstract::inNamespace' => 
  array (
    0 => 'bool',
  ),
  'ReflectionFunctionAbstract::isClosure' => 
  array (
    0 => 'bool',
  ),
  'ReflectionFunctionAbstract::isDeprecated' => 
  array (
    0 => 'bool',
  ),
  'ReflectionFunctionAbstract::isGenerator' => 
  array (
    0 => 'bool',
  ),
  'ReflectionFunctionAbstract::isInternal' => 
  array (
    0 => 'bool',
  ),
  'ReflectionFunctionAbstract::isStatic' => 
  array (
    0 => 'bool',
  ),
  'ReflectionFunctionAbstract::isUserDefined' => 
  array (
    0 => 'bool',
  ),
  'ReflectionFunctionAbstract::isVariadic' => 
  array (
    0 => 'bool',
  ),
  'ReflectionFunctionAbstract::returnsReference' => 
  array (
    0 => 'bool',
  ),
  'ReflectionGenerator::__construct' => 
  array (
    0 => 'void',
    'generator' => 'Generator',
  ),
  'ReflectionGenerator::getExecutingFile' => 
  array (
    0 => 'string',
  ),
  'ReflectionGenerator::getExecutingGenerator' => 
  array (
    0 => 'Generator',
  ),
  'ReflectionGenerator::getExecutingLine' => 
  array (
    0 => 'int',
  ),
  'ReflectionGenerator::getFunction' => 
  array (
    0 => 'ReflectionFunctionAbstract',
  ),
  'ReflectionGenerator::getThis' => 
  array (
    0 => 'null|object',
  ),
  'ReflectionGenerator::getTrace' => 
  array (
    0 => 'array<array-key, mixed>',
    'options=' => 'int',
  ),
  'ReflectionMethod::__construct' => 
  array (
    0 => 'void',
    'class' => 'class-string|object',
    'name' => 'string',
  ),
  'ReflectionMethod::__construct\'1' => 
  array (
    0 => 'void',
    'class_method' => 'string',
  ),
  'ReflectionMethod::__toString' => 
  array (
    0 => 'string',
  ),
  'ReflectionMethod::getClosure' => 
  array (
    0 => 'Closure',
    'object=' => 'null|object',
  ),
  'ReflectionMethod::getClosureScopeClass' => 
  array (
    0 => 'ReflectionClass',
  ),
  'ReflectionMethod::getClosureThis' => 
  array (
    0 => 'object',
  ),
  'ReflectionMethod::getDeclaringClass' => 
  array (
    0 => 'ReflectionClass',
  ),
  'ReflectionMethod::getDocComment' => 
  array (
    0 => 'false|string',
  ),
  'ReflectionMethod::getEndLine' => 
  array (
    0 => 'false|int',
  ),
  'ReflectionMethod::getExtension' => 
  array (
    0 => 'ReflectionExtension|null',
  ),
  'ReflectionMethod::getExtensionName' => 
  array (
    0 => 'false|string',
  ),
  'ReflectionMethod::getFileName' => 
  array (
    0 => 'false|string',
  ),
  'ReflectionMethod::getModifiers' => 
  array (
    0 => 'int',
  ),
  'ReflectionMethod::getName' => 
  array (
    0 => 'string',
  ),
  'ReflectionMethod::getNamespaceName' => 
  array (
    0 => 'string',
  ),
  'ReflectionMethod::getNumberOfParameters' => 
  array (
    0 => 'int',
  ),
  'ReflectionMethod::getNumberOfRequiredParameters' => 
  array (
    0 => 'int',
  ),
  'ReflectionMethod::getParameters' => 
  array (
    0 => 'list<ReflectionParameter>',
  ),
  'ReflectionMethod::getPrototype' => 
  array (
    0 => 'ReflectionMethod',
  ),
  'ReflectionMethod::getReturnType' => 
  array (
    0 => 'ReflectionType|null',
  ),
  'ReflectionMethod::getShortName' => 
  array (
    0 => 'string',
  ),
  'ReflectionMethod::getStartLine' => 
  array (
    0 => 'false|int',
  ),
  'ReflectionMethod::getStaticVariables' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ReflectionMethod::hasReturnType' => 
  array (
    0 => 'bool',
  ),
  'ReflectionMethod::inNamespace' => 
  array (
    0 => 'bool',
  ),
  'ReflectionMethod::invoke' => 
  array (
    0 => 'mixed',
    'object' => 'null|object',
    '...args=' => 'mixed',
  ),
  'ReflectionMethod::invokeArgs' => 
  array (
    0 => 'mixed',
    'object' => 'null|object',
    'args' => 'array<array-key, mixed>',
  ),
  'ReflectionMethod::isAbstract' => 
  array (
    0 => 'bool',
  ),
  'ReflectionMethod::isClosure' => 
  array (
    0 => 'bool',
  ),
  'ReflectionMethod::isConstructor' => 
  array (
    0 => 'bool',
  ),
  'ReflectionMethod::isDeprecated' => 
  array (
    0 => 'bool',
  ),
  'ReflectionMethod::isDestructor' => 
  array (
    0 => 'bool',
  ),
  'ReflectionMethod::isFinal' => 
  array (
    0 => 'bool',
  ),
  'ReflectionMethod::isGenerator' => 
  array (
    0 => 'bool',
  ),
  'ReflectionMethod::isInternal' => 
  array (
    0 => 'bool',
  ),
  'ReflectionMethod::isPrivate' => 
  array (
    0 => 'bool',
  ),
  'ReflectionMethod::isProtected' => 
  array (
    0 => 'bool',
  ),
  'ReflectionMethod::isPublic' => 
  array (
    0 => 'bool',
  ),
  'ReflectionMethod::isUserDefined' => 
  array (
    0 => 'bool',
  ),
  'ReflectionMethod::isVariadic' => 
  array (
    0 => 'bool',
  ),
  'ReflectionMethod::returnsReference' => 
  array (
    0 => 'bool',
  ),
  'ReflectionMethod::setAccessible' => 
  array (
    0 => 'void',
    'accessible' => 'bool',
  ),
  'ReflectionNamedType::__toString' => 
  array (
    0 => 'string',
  ),
  'ReflectionNamedType::allowsNull' => 
  array (
    0 => 'bool',
  ),
  'ReflectionNamedType::getName' => 
  array (
    0 => 'string',
  ),
  'ReflectionNamedType::isBuiltin' => 
  array (
    0 => 'bool',
  ),
  'ReflectionObject::__construct' => 
  array (
    0 => 'void',
    'object' => 'object',
  ),
  'ReflectionObject::__toString' => 
  array (
    0 => 'string',
  ),
  'ReflectionObject::getConstant' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'ReflectionObject::getConstants' => 
  array (
    0 => 'array<string, mixed>',
    'filter=' => 'int|null',
  ),
  'ReflectionObject::getConstructor' => 
  array (
    0 => 'ReflectionMethod|null',
  ),
  'ReflectionObject::getDefaultProperties' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ReflectionObject::getDocComment' => 
  array (
    0 => 'false|string',
  ),
  'ReflectionObject::getEndLine' => 
  array (
    0 => 'false|int',
  ),
  'ReflectionObject::getExtension' => 
  array (
    0 => 'ReflectionExtension|null',
  ),
  'ReflectionObject::getExtensionName' => 
  array (
    0 => 'false|string',
  ),
  'ReflectionObject::getFileName' => 
  array (
    0 => 'false|string',
  ),
  'ReflectionObject::getInterfaceNames' => 
  array (
    0 => 'array<array-key, class-string>',
  ),
  'ReflectionObject::getInterfaces' => 
  array (
    0 => 'array<string, ReflectionClass>',
  ),
  'ReflectionObject::getMethod' => 
  array (
    0 => 'ReflectionMethod',
    'name' => 'string',
  ),
  'ReflectionObject::getMethods' => 
  array (
    0 => 'array<array-key, ReflectionMethod>',
    'filter=' => 'int|null',
  ),
  'ReflectionObject::getModifiers' => 
  array (
    0 => 'int',
  ),
  'ReflectionObject::getName' => 
  array (
    0 => 'string',
  ),
  'ReflectionObject::getNamespaceName' => 
  array (
    0 => 'string',
  ),
  'ReflectionObject::getParentClass' => 
  array (
    0 => 'ReflectionClass|false',
  ),
  'ReflectionObject::getProperties' => 
  array (
    0 => 'array<array-key, ReflectionProperty>',
    'filter=' => 'int|null',
  ),
  'ReflectionObject::getProperty' => 
  array (
    0 => 'ReflectionProperty',
    'name' => 'string',
  ),
  'ReflectionObject::getReflectionConstant' => 
  array (
    0 => 'ReflectionClassConstant',
    'name' => 'string',
  ),
  'ReflectionObject::getReflectionConstants' => 
  array (
    0 => 'list<ReflectionClassConstant>',
    'filter=' => 'int|null',
  ),
  'ReflectionObject::getShortName' => 
  array (
    0 => 'string',
  ),
  'ReflectionObject::getStartLine' => 
  array (
    0 => 'false|int',
  ),
  'ReflectionObject::getStaticProperties' => 
  array (
    0 => 'array<array-key, ReflectionProperty>',
  ),
  'ReflectionObject::getStaticPropertyValue' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'default=' => 'mixed',
  ),
  'ReflectionObject::getTraitAliases' => 
  array (
    0 => 'array<string, string>',
  ),
  'ReflectionObject::getTraitNames' => 
  array (
    0 => 'list<string>',
  ),
  'ReflectionObject::getTraits' => 
  array (
    0 => 'array<string, ReflectionClass>',
  ),
  'ReflectionObject::hasConstant' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'ReflectionObject::hasMethod' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'ReflectionObject::hasProperty' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'ReflectionObject::implementsInterface' => 
  array (
    0 => 'bool',
    'interface' => 'ReflectionClass|class-string',
  ),
  'ReflectionObject::inNamespace' => 
  array (
    0 => 'bool',
  ),
  'ReflectionObject::isAbstract' => 
  array (
    0 => 'bool',
  ),
  'ReflectionObject::isAnonymous' => 
  array (
    0 => 'bool',
  ),
  'ReflectionObject::isCloneable' => 
  array (
    0 => 'bool',
  ),
  'ReflectionObject::isEnum' => 
  array (
    0 => 'bool',
  ),
  'ReflectionObject::isFinal' => 
  array (
    0 => 'bool',
  ),
  'ReflectionObject::isInstance' => 
  array (
    0 => 'bool',
    'object' => 'object',
  ),
  'ReflectionObject::isInstantiable' => 
  array (
    0 => 'bool',
  ),
  'ReflectionObject::isInterface' => 
  array (
    0 => 'bool',
  ),
  'ReflectionObject::isInternal' => 
  array (
    0 => 'bool',
  ),
  'ReflectionObject::isIterable' => 
  array (
    0 => 'bool',
  ),
  'ReflectionObject::isIterateable' => 
  array (
    0 => 'bool',
  ),
  'ReflectionObject::isSubclassOf' => 
  array (
    0 => 'bool',
    'class' => 'ReflectionClass|string',
  ),
  'ReflectionObject::isTrait' => 
  array (
    0 => 'bool',
  ),
  'ReflectionObject::isUserDefined' => 
  array (
    0 => 'bool',
  ),
  'ReflectionObject::newInstance' => 
  array (
    0 => 'object',
    'args=' => 'mixed',
    '...args=' => 'array<array-key, mixed>',
  ),
  'ReflectionObject::newInstanceArgs' => 
  array (
    0 => 'object',
    'args=' => 'array<int<0, max>|string, mixed>',
  ),
  'ReflectionObject::newInstanceWithoutConstructor' => 
  array (
    0 => 'object',
  ),
  'ReflectionObject::setStaticPropertyValue' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'string',
  ),
  'ReflectionParameter::__clone' => 
  array (
    0 => 'void',
  ),
  'ReflectionParameter::__construct' => 
  array (
    0 => 'void',
    'function' => 'array<array-key, mixed>|object|string',
    'param' => 'int|string',
  ),
  'ReflectionParameter::__toString' => 
  array (
    0 => 'string',
  ),
  'ReflectionParameter::allowsNull' => 
  array (
    0 => 'bool',
  ),
  'ReflectionParameter::canBePassedByValue' => 
  array (
    0 => 'bool',
  ),
  'ReflectionParameter::getAttributes' => 
  array (
    0 => 'list<ReflectionAttribute>',
    'name=' => 'null|string',
    'flags=' => 'int',
  ),
  'ReflectionParameter::getClass' => 
  array (
    0 => 'ReflectionClass|null',
  ),
  'ReflectionParameter::getDeclaringClass' => 
  array (
    0 => 'ReflectionClass|null',
  ),
  'ReflectionParameter::getDeclaringFunction' => 
  array (
    0 => 'ReflectionFunctionAbstract',
  ),
  'ReflectionParameter::getDefaultValue' => 
  array (
    0 => 'mixed',
  ),
  'ReflectionParameter::getDefaultValueConstantName' => 
  array (
    0 => 'null|string',
  ),
  'ReflectionParameter::getName' => 
  array (
    0 => 'non-empty-string',
  ),
  'ReflectionParameter::getPosition' => 
  array (
    0 => 'int<0, max>',
  ),
  'ReflectionParameter::getType' => 
  array (
    0 => 'ReflectionType|null',
  ),
  'ReflectionParameter::hasType' => 
  array (
    0 => 'bool',
  ),
  'ReflectionParameter::isArray' => 
  array (
    0 => 'bool',
  ),
  'ReflectionParameter::isCallable' => 
  array (
    0 => 'bool',
  ),
  'ReflectionParameter::isDefaultValueAvailable' => 
  array (
    0 => 'bool',
  ),
  'ReflectionParameter::isDefaultValueConstant' => 
  array (
    0 => 'bool',
  ),
  'ReflectionParameter::isOptional' => 
  array (
    0 => 'bool',
  ),
  'ReflectionParameter::isPassedByReference' => 
  array (
    0 => 'bool',
  ),
  'ReflectionParameter::isVariadic' => 
  array (
    0 => 'bool',
  ),
  'ReflectionProperty::__clone' => 
  array (
    0 => 'void',
  ),
  'ReflectionProperty::__construct' => 
  array (
    0 => 'void',
    'class' => 'class-string|object',
    'property' => 'string',
  ),
  'ReflectionProperty::__toString' => 
  array (
    0 => 'string',
  ),
  'ReflectionProperty::getAttributes' => 
  array (
    0 => 'list<ReflectionAttribute>',
    'name=' => 'null|string',
    'flags=' => 'int',
  ),
  'ReflectionProperty::getDeclaringClass' => 
  array (
    0 => 'ReflectionClass',
  ),
  'ReflectionProperty::getDefaultValue' => 
  array (
    0 => 'mixed',
  ),
  'ReflectionProperty::getDocComment' => 
  array (
    0 => 'false|string',
  ),
  'ReflectionProperty::getModifiers' => 
  array (
    0 => 'int',
  ),
  'ReflectionProperty::getName' => 
  array (
    0 => 'string',
  ),
  'ReflectionProperty::getType' => 
  array (
    0 => 'ReflectionType|null',
  ),
  'ReflectionProperty::getValue' => 
  array (
    0 => 'mixed',
    'object=' => 'null|object',
  ),
  'ReflectionProperty::hasDefaultValue' => 
  array (
    0 => 'bool',
  ),
  'ReflectionProperty::hasType' => 
  array (
    0 => 'bool',
  ),
  'ReflectionProperty::isDefault' => 
  array (
    0 => 'bool',
  ),
  'ReflectionProperty::isInitialized' => 
  array (
    0 => 'bool',
    'object=' => 'null|object',
  ),
  'ReflectionProperty::isPrivate' => 
  array (
    0 => 'bool',
  ),
  'ReflectionProperty::isPromoted' => 
  array (
    0 => 'bool',
  ),
  'ReflectionProperty::isProtected' => 
  array (
    0 => 'bool',
  ),
  'ReflectionProperty::isPublic' => 
  array (
    0 => 'bool',
  ),
  'ReflectionProperty::isReadonly' => 
  array (
    0 => 'bool',
  ),
  'ReflectionProperty::isStatic' => 
  array (
    0 => 'bool',
  ),
  'ReflectionProperty::setAccessible' => 
  array (
    0 => 'void',
    'accessible' => 'bool',
  ),
  'ReflectionProperty::setValue' => 
  array (
    0 => 'void',
    'object' => 'null|object',
    'value' => 'mixed',
  ),
  'ReflectionProperty::setValue\'1' => 
  array (
    0 => 'void',
    'value' => 'mixed',
  ),
  'ReflectionType::__clone' => 
  array (
    0 => 'void',
  ),
  'ReflectionType::__toString' => 
  array (
    0 => 'string',
  ),
  'ReflectionType::allowsNull' => 
  array (
    0 => 'bool',
  ),
  'ReflectionUnionType::getTypes' => 
  array (
    0 => 'list<ReflectionNamedType>',
  ),
  'ReflectionZendExtension::__clone' => 
  array (
    0 => 'void',
  ),
  'ReflectionZendExtension::__construct' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'ReflectionZendExtension::__toString' => 
  array (
    0 => 'string',
  ),
  'ReflectionZendExtension::getAuthor' => 
  array (
    0 => 'string',
  ),
  'ReflectionZendExtension::getCopyright' => 
  array (
    0 => 'string',
  ),
  'ReflectionZendExtension::getName' => 
  array (
    0 => 'string',
  ),
  'ReflectionZendExtension::getURL' => 
  array (
    0 => 'string',
  ),
  'ReflectionZendExtension::getVersion' => 
  array (
    0 => 'string',
  ),
  'Reflector::__toString' => 
  array (
    0 => 'string',
  ),
  'Reflector::export' => 
  array (
    0 => 'null|string',
  ),
  'RegexIterator::__construct' => 
  array (
    0 => 'void',
    'iterator' => 'Iterator',
    'pattern' => 'string',
    'mode=' => 'int',
    'flags=' => 'int',
    'pregFlags=' => 'int',
  ),
  'RegexIterator::accept' => 
  array (
    0 => 'bool',
  ),
  'RegexIterator::current' => 
  array (
    0 => 'mixed',
  ),
  'RegexIterator::getFlags' => 
  array (
    0 => 'int',
  ),
  'RegexIterator::getInnerIterator' => 
  array (
    0 => 'Iterator',
  ),
  'RegexIterator::getMode' => 
  array (
    0 => 'int',
  ),
  'RegexIterator::getPregFlags' => 
  array (
    0 => 'int',
  ),
  'RegexIterator::getRegex' => 
  array (
    0 => 'string',
  ),
  'RegexIterator::key' => 
  array (
    0 => 'mixed',
  ),
  'RegexIterator::next' => 
  array (
    0 => 'void',
  ),
  'RegexIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'RegexIterator::setFlags' => 
  array (
    0 => 'void',
    'flags' => 'int',
  ),
  'RegexIterator::setMode' => 
  array (
    0 => 'void',
    'mode' => 'int',
  ),
  'RegexIterator::setPregFlags' => 
  array (
    0 => 'void',
    'pregFlags' => 'int',
  ),
  'RegexIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'register_event_handler' => 
  array (
    0 => 'bool',
    'event_handler_func' => 'string',
    'handler_register_name' => 'string',
    'event_type_mask' => 'int',
  ),
  'register_shutdown_function' => 
  array (
    0 => 'void',
    'callback' => 'callable',
    '...args=' => 'mixed',
  ),
  'register_tick_function' => 
  array (
    0 => 'bool',
    'callback' => 'callable():void',
    '...args=' => 'mixed',
  ),
  'rename' => 
  array (
    0 => 'bool',
    'from' => 'string',
    'to' => 'string',
    'context=' => 'resource',
  ),
  'rename_function' => 
  array (
    0 => 'bool',
    'original_name' => 'string',
    'new_name' => 'string',
  ),
  'reset' => 
  array (
    0 => 'false|mixed',
    '&r_array' => 'array<array-key, mixed>',
  ),
  'ResourceBundle::__construct' => 
  array (
    0 => 'void',
    'locale' => 'null|string',
    'bundle' => 'null|string',
    'fallback=' => 'bool',
  ),
  'ResourceBundle::count' => 
  array (
    0 => 'int',
  ),
  'ResourceBundle::create' => 
  array (
    0 => 'ResourceBundle|null',
    'locale' => 'null|string',
    'bundle' => 'null|string',
    'fallback=' => 'bool',
  ),
  'ResourceBundle::get' => 
  array (
    0 => 'mixed',
    'index' => 'int|string',
    'fallback=' => 'bool',
  ),
  'ResourceBundle::getErrorCode' => 
  array (
    0 => 'int',
  ),
  'ResourceBundle::getErrorMessage' => 
  array (
    0 => 'string',
  ),
  'ResourceBundle::getLocales' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'bundle' => 'string',
  ),
  'resourcebundle_count' => 
  array (
    0 => 'int',
    'bundle' => 'ResourceBundle',
  ),
  'resourcebundle_create' => 
  array (
    0 => 'ResourceBundle|null',
    'locale' => 'null|string',
    'bundle' => 'null|string',
    'fallback=' => 'bool',
  ),
  'resourcebundle_get' => 
  array (
    0 => 'mixed|null',
    'bundle' => 'ResourceBundle',
    'index' => 'int|string',
    'fallback=' => 'bool',
  ),
  'resourcebundle_get_error_code' => 
  array (
    0 => 'int',
    'bundle' => 'ResourceBundle',
  ),
  'resourcebundle_get_error_message' => 
  array (
    0 => 'string',
    'bundle' => 'ResourceBundle',
  ),
  'resourcebundle_locales' => 
  array (
    0 => 'array<array-key, mixed>',
    'bundle' => 'string',
  ),
  'restore_error_handler' => 
  array (
    0 => 'true',
  ),
  'restore_exception_handler' => 
  array (
    0 => 'true',
  ),
  'restore_include_path' => 
  array (
    0 => 'void',
  ),
  'rewind' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
  ),
  'rewinddir' => 
  array (
    0 => 'void',
    'dir_handle=' => 'resource',
  ),
  'rmdir' => 
  array (
    0 => 'bool',
    'directory' => 'string',
    'context=' => 'resource',
  ),
  'round' => 
  array (
    0 => 'float',
    'num' => 'float|int',
    'precision=' => 'int',
    'mode=' => 'int<0, max>',
  ),
  'rpm_close' => 
  array (
    0 => 'bool',
    'rpmr' => 'resource',
  ),
  'rpm_get_tag' => 
  array (
    0 => 'mixed',
    'rpmr' => 'resource',
    'tagnum' => 'int',
  ),
  'rpm_is_valid' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'rpm_open' => 
  array (
    0 => 'false|resource',
    'filename' => 'string',
  ),
  'rpm_version' => 
  array (
    0 => 'string',
  ),
  'rpmaddtag' => 
  array (
    0 => 'bool',
    'tag' => 'int',
  ),
  'rpmdbinfo' => 
  array (
    0 => 'array<array-key, mixed>',
    'nevr' => 'string',
    'full=' => 'bool',
  ),
  'rpmdbsearch' => 
  array (
    0 => 'array<array-key, mixed>',
    'pattern' => 'string',
    'rpmtag=' => 'int',
    'rpmmire=' => 'int',
    'full=' => 'bool',
  ),
  'rpminfo' => 
  array (
    0 => 'array<array-key, mixed>',
    'path' => 'string',
    'full=' => 'bool',
    'error=' => 'string',
  ),
  'rpmvercmp' => 
  array (
    0 => 'int',
    'evr1' => 'string',
    'evr2' => 'string',
  ),
  'rrd_create' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'options' => 'array<array-key, mixed>',
  ),
  'rrd_disconnect' => 
  array (
    0 => 'void',
  ),
  'rrd_error' => 
  array (
    0 => 'string',
  ),
  'rrd_fetch' => 
  array (
    0 => 'array<array-key, mixed>',
    'filename' => 'string',
    'options' => 'array<array-key, mixed>',
  ),
  'rrd_first' => 
  array (
    0 => 'false|int',
    'file' => 'string',
    'raaindex=' => 'int',
  ),
  'rrd_graph' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'filename' => 'string',
    'options' => 'array<array-key, mixed>',
  ),
  'rrd_info' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'filename' => 'string',
  ),
  'rrd_last' => 
  array (
    0 => 'int',
    'filename' => 'string',
  ),
  'rrd_lastupdate' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'filename' => 'string',
  ),
  'rrd_restore' => 
  array (
    0 => 'bool',
    'xml_file' => 'string',
    'rrd_file' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'rrd_tune' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'options' => 'array<array-key, mixed>',
  ),
  'rrd_update' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'options' => 'array<array-key, mixed>',
  ),
  'rrd_version' => 
  array (
    0 => 'string',
  ),
  'rrd_xport' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'options' => 'array<array-key, mixed>',
  ),
  'rrdc_disconnect' => 
  array (
    0 => 'void',
  ),
  'RRDCreator::__construct' => 
  array (
    0 => 'void',
    'path' => 'string',
    'starttime=' => 'string',
    'step=' => 'int',
  ),
  'RRDCreator::addArchive' => 
  array (
    0 => 'void',
    'description' => 'string',
  ),
  'RRDCreator::addDataSource' => 
  array (
    0 => 'void',
    'description' => 'string',
  ),
  'RRDCreator::save' => 
  array (
    0 => 'bool',
  ),
  'RRDGraph::__construct' => 
  array (
    0 => 'void',
    'path' => 'string',
  ),
  'RRDGraph::save' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'RRDGraph::saveVerbose' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'RRDGraph::setOptions' => 
  array (
    0 => 'void',
    'options' => 'array<array-key, mixed>',
  ),
  'RRDUpdater::__construct' => 
  array (
    0 => 'void',
    'path' => 'string',
  ),
  'RRDUpdater::update' => 
  array (
    0 => 'bool',
    'values' => 'array<array-key, mixed>',
    'time=' => 'string',
  ),
  'rsort' => 
  array (
    0 => 'true',
    '&rw_array' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'rtrim' => 
  array (
    0 => 'string',
    'string' => 'string',
    'characters=' => 'string',
  ),
  'runkit7_constant_add' => 
  array (
    0 => 'bool',
    'constant_name' => 'string',
    'value' => 'mixed',
    'new_visibility=' => 'int',
  ),
  'runkit7_constant_redefine' => 
  array (
    0 => 'bool',
    'constant_name' => 'string',
    'value' => 'mixed',
    'new_visibility=' => 'int|null',
  ),
  'runkit7_constant_remove' => 
  array (
    0 => 'bool',
    'constant_name' => 'string',
  ),
  'runkit7_function_add' => 
  array (
    0 => 'bool',
    'function_name' => 'string',
    'argument_list_or_closure' => 'Closure|string',
    'code_or_doc_comment=' => 'null|string',
    'return_by_reference=' => 'bool|null',
    'doc_comment=' => 'null|string',
    'return_type=' => 'null|string',
    'is_strict=' => 'bool|null',
  ),
  'runkit7_function_copy' => 
  array (
    0 => 'bool',
    'source_name' => 'string',
    'target_name' => 'string',
  ),
  'runkit7_function_redefine' => 
  array (
    0 => 'bool',
    'function_name' => 'string',
    'argument_list_or_closure' => 'Closure|string',
    'code_or_doc_comment=' => 'null|string',
    'return_by_reference=' => 'bool|null',
    'doc_comment=' => 'null|string',
    'return_type=' => 'null|string',
    'is_strict=' => 'bool|null',
  ),
  'runkit7_function_remove' => 
  array (
    0 => 'bool',
    'function_name' => 'string',
  ),
  'runkit7_function_rename' => 
  array (
    0 => 'bool',
    'source_name' => 'string',
    'target_name' => 'string',
  ),
  'runkit7_import' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'flags=' => 'int|null',
  ),
  'runkit7_method_add' => 
  array (
    0 => 'bool',
    'class_name' => 'string',
    'method_name' => 'string',
    'argument_list_or_closure' => 'Closure|string',
    'code_or_flags=' => 'int|null|string',
    'flags_or_doc_comment=' => 'int|null|string',
    'doc_comment=' => 'null|string',
    'return_type=' => 'null|string',
    'is_strict=' => 'bool|null',
  ),
  'runkit7_method_copy' => 
  array (
    0 => 'bool',
    'destination_class' => 'string',
    'destination_method' => 'string',
    'source_class' => 'string',
    'source_method=' => 'null|string',
  ),
  'runkit7_method_redefine' => 
  array (
    0 => 'bool',
    'class_name' => 'string',
    'method_name' => 'string',
    'argument_list_or_closure' => 'Closure|string',
    'code_or_flags=' => 'int|null|string',
    'flags_or_doc_comment=' => 'int|null|string',
    'doc_comment=' => 'null|string',
    'return_type=' => 'null|string',
    'is_strict=' => 'bool|null',
  ),
  'runkit7_method_remove' => 
  array (
    0 => 'bool',
    'class_name' => 'string',
    'method_name' => 'string',
  ),
  'runkit7_method_rename' => 
  array (
    0 => 'bool',
    'class_name' => 'string',
    'source_method_name' => 'string',
    'source_target_name' => 'string',
  ),
  'runkit7_superglobals' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'runkit7_zval_inspect' => 
  array (
    0 => 'array<array-key, mixed>',
    'value' => 'mixed',
  ),
  'runkit_class_adopt' => 
  array (
    0 => 'bool',
    'classname' => 'string',
    'parentname' => 'string',
  ),
  'runkit_class_emancipate' => 
  array (
    0 => 'bool',
    'classname' => 'string',
  ),
  'runkit_constant_add' => 
  array (
    0 => 'bool',
    'constname' => 'string',
    'value' => 'mixed',
  ),
  'runkit_constant_redefine' => 
  array (
    0 => 'bool',
    'constname' => 'string',
    'newvalue' => 'mixed',
  ),
  'runkit_constant_remove' => 
  array (
    0 => 'bool',
    'constname' => 'string',
  ),
  'runkit_function_add' => 
  array (
    0 => 'bool',
    'funcname' => 'string',
    'arglist' => 'string',
    'code' => 'string',
    'doccomment=' => 'null|string',
  ),
  'runkit_function_add\'1' => 
  array (
    0 => 'bool',
    'funcname' => 'string',
    'closure' => 'Closure',
    'doccomment=' => 'null|string',
  ),
  'runkit_function_copy' => 
  array (
    0 => 'bool',
    'funcname' => 'string',
    'targetname' => 'string',
  ),
  'runkit_function_redefine' => 
  array (
    0 => 'bool',
    'funcname' => 'string',
    'arglist' => 'string',
    'code' => 'string',
    'doccomment=' => 'null|string',
  ),
  'runkit_function_redefine\'1' => 
  array (
    0 => 'bool',
    'funcname' => 'string',
    'closure' => 'Closure',
    'doccomment=' => 'null|string',
  ),
  'runkit_function_remove' => 
  array (
    0 => 'bool',
    'funcname' => 'string',
  ),
  'runkit_function_rename' => 
  array (
    0 => 'bool',
    'funcname' => 'string',
    'newname' => 'string',
  ),
  'runkit_import' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'flags=' => 'int',
  ),
  'runkit_lint' => 
  array (
    0 => 'bool',
    'code' => 'string',
  ),
  'runkit_lint_file' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'runkit_method_add' => 
  array (
    0 => 'bool',
    'classname' => 'string',
    'methodname' => 'string',
    'args' => 'string',
    'code' => 'string',
    'flags=' => 'int',
    'doccomment=' => 'null|string',
  ),
  'runkit_method_add\'1' => 
  array (
    0 => 'bool',
    'classname' => 'string',
    'methodname' => 'string',
    'closure' => 'Closure',
    'flags=' => 'int',
    'doccomment=' => 'null|string',
  ),
  'runkit_method_copy' => 
  array (
    0 => 'bool',
    'dclass' => 'string',
    'dmethod' => 'string',
    'sclass' => 'string',
    'smethod=' => 'string',
  ),
  'runkit_method_redefine' => 
  array (
    0 => 'bool',
    'classname' => 'string',
    'methodname' => 'string',
    'args' => 'string',
    'code' => 'string',
    'flags=' => 'int',
    'doccomment=' => 'null|string',
  ),
  'runkit_method_redefine\'1' => 
  array (
    0 => 'bool',
    'classname' => 'string',
    'methodname' => 'string',
    'closure' => 'Closure',
    'flags=' => 'int',
    'doccomment=' => 'null|string',
  ),
  'runkit_method_remove' => 
  array (
    0 => 'bool',
    'classname' => 'string',
    'methodname' => 'string',
  ),
  'runkit_method_rename' => 
  array (
    0 => 'bool',
    'classname' => 'string',
    'methodname' => 'string',
    'newname' => 'string',
  ),
  'runkit_return_value_used' => 
  array (
    0 => 'bool',
  ),
  'Runkit_Sandbox::__construct' => 
  array (
    0 => 'void',
    'options=' => 'array<array-key, mixed>',
  ),
  'runkit_sandbox_output_handler' => 
  array (
    0 => 'mixed',
    'sandbox' => 'object',
    'callback=' => 'mixed',
  ),
  'Runkit_Sandbox_Parent' => 
  array (
    0 => 'mixed',
  ),
  'Runkit_Sandbox_Parent::__construct' => 
  array (
    0 => 'void',
  ),
  'runkit_superglobals' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'runkit_zval_inspect' => 
  array (
    0 => 'array<array-key, mixed>',
    'value' => 'mixed',
  ),
  'RuntimeException::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'RuntimeException::__toString' => 
  array (
    0 => 'string',
  ),
  'RuntimeException::getCode' => 
  array (
    0 => 'int',
  ),
  'RuntimeException::getFile' => 
  array (
    0 => 'string',
  ),
  'RuntimeException::getLine' => 
  array (
    0 => 'int',
  ),
  'RuntimeException::getMessage' => 
  array (
    0 => 'string',
  ),
  'RuntimeException::getPrevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'RuntimeException::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'RuntimeException::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'SAMConnection::commit' => 
  array (
    0 => 'bool',
  ),
  'SAMConnection::connect' => 
  array (
    0 => 'bool',
    'protocol' => 'string',
    'properties=' => 'array<array-key, mixed>',
  ),
  'SAMConnection::disconnect' => 
  array (
    0 => 'bool',
  ),
  'SAMConnection::errno' => 
  array (
    0 => 'int',
  ),
  'SAMConnection::error' => 
  array (
    0 => 'string',
  ),
  'SAMConnection::isConnected' => 
  array (
    0 => 'bool',
  ),
  'SAMConnection::peek' => 
  array (
    0 => 'SAMMessage',
    'target' => 'string',
    'properties=' => 'array<array-key, mixed>',
  ),
  'SAMConnection::peekAll' => 
  array (
    0 => 'array<array-key, mixed>',
    'target' => 'string',
    'properties=' => 'array<array-key, mixed>',
  ),
  'SAMConnection::receive' => 
  array (
    0 => 'SAMMessage',
    'target' => 'string',
    'properties=' => 'array<array-key, mixed>',
  ),
  'SAMConnection::remove' => 
  array (
    0 => 'SAMMessage',
    'target' => 'string',
    'properties=' => 'array<array-key, mixed>',
  ),
  'SAMConnection::rollback' => 
  array (
    0 => 'bool',
  ),
  'SAMConnection::send' => 
  array (
    0 => 'string',
    'target' => 'string',
    'msg' => 'sammessage',
    'properties=' => 'array<array-key, mixed>',
  ),
  'SAMConnection::setDebug' => 
  array (
    0 => 'mixed',
    'switch' => 'bool',
  ),
  'SAMConnection::subscribe' => 
  array (
    0 => 'string',
    'targettopic' => 'string',
  ),
  'SAMConnection::unsubscribe' => 
  array (
    0 => 'bool',
    'subscriptionid' => 'string',
    'targettopic=' => 'string',
  ),
  'SAMMessage::body' => 
  array (
    0 => 'string',
  ),
  'SAMMessage::header' => 
  array (
    0 => 'object',
  ),
  'sapi_windows_cp_conv' => 
  array (
    0 => 'null|string',
    'in_codepage' => 'int|string',
    'out_codepage' => 'int|string',
    'subject' => 'string',
  ),
  'sapi_windows_cp_get' => 
  array (
    0 => 'int',
    'kind=' => 'string',
  ),
  'sapi_windows_cp_is_utf8' => 
  array (
    0 => 'bool',
  ),
  'sapi_windows_cp_set' => 
  array (
    0 => 'bool',
    'codepage' => 'int',
  ),
  'sapi_windows_vt100_support' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
    'enable=' => 'bool|null',
  ),
  'Saxon\\SaxonProcessor::__construct' => 
  array (
    0 => 'void',
    'license=' => 'bool',
    'cwd=' => 'string',
  ),
  'Saxon\\SaxonProcessor::createAtomicValue' => 
  array (
    0 => 'Saxon\\XdmValue',
    'primitive_type_val' => 'scalar',
  ),
  'Saxon\\SaxonProcessor::newSchemaValidator' => 
  array (
    0 => 'Saxon\\SchemaValidator',
  ),
  'Saxon\\SaxonProcessor::newXPathProcessor' => 
  array (
    0 => 'Saxon\\XPathProcessor',
  ),
  'Saxon\\SaxonProcessor::newXQueryProcessor' => 
  array (
    0 => 'Saxon\\XQueryProcessor',
  ),
  'Saxon\\SaxonProcessor::newXsltProcessor' => 
  array (
    0 => 'Saxon\\XsltProcessor',
  ),
  'Saxon\\SaxonProcessor::parseXmlFromFile' => 
  array (
    0 => 'Saxon\\XdmNode',
    'fileName' => 'string',
  ),
  'Saxon\\SaxonProcessor::parseXmlFromString' => 
  array (
    0 => 'Saxon\\XdmNode',
    'value' => 'string',
  ),
  'Saxon\\SaxonProcessor::registerPHPFunctions' => 
  array (
    0 => 'void',
    'library' => 'string',
  ),
  'Saxon\\SaxonProcessor::setConfigurationProperty' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'string',
  ),
  'Saxon\\SaxonProcessor::setcwd' => 
  array (
    0 => 'void',
    'cwd' => 'string',
  ),
  'Saxon\\SaxonProcessor::setResourceDirectory' => 
  array (
    0 => 'void',
    'dir' => 'string',
  ),
  'Saxon\\SaxonProcessor::version' => 
  array (
    0 => 'string',
  ),
  'Saxon\\SchemaValidator::clearParameters' => 
  array (
    0 => 'void',
  ),
  'Saxon\\SchemaValidator::clearProperties' => 
  array (
    0 => 'void',
  ),
  'Saxon\\SchemaValidator::exceptionClear' => 
  array (
    0 => 'void',
  ),
  'Saxon\\SchemaValidator::getErrorCode' => 
  array (
    0 => 'string',
    'i' => 'int',
  ),
  'Saxon\\SchemaValidator::getErrorMessage' => 
  array (
    0 => 'string',
    'i' => 'int',
  ),
  'Saxon\\SchemaValidator::getExceptionCount' => 
  array (
    0 => 'int',
  ),
  'Saxon\\SchemaValidator::getValidationReport' => 
  array (
    0 => 'Saxon\\XdmNode',
  ),
  'Saxon\\SchemaValidator::registerSchemaFromFile' => 
  array (
    0 => 'void',
    'fileName' => 'string',
  ),
  'Saxon\\SchemaValidator::registerSchemaFromString' => 
  array (
    0 => 'void',
    'schemaStr' => 'string',
  ),
  'Saxon\\SchemaValidator::setOutputFile' => 
  array (
    0 => 'void',
    'fileName' => 'string',
  ),
  'Saxon\\SchemaValidator::setParameter' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'Saxon\\XdmValue',
  ),
  'Saxon\\SchemaValidator::setProperty' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'string',
  ),
  'Saxon\\SchemaValidator::setSourceNode' => 
  array (
    0 => 'void',
    'node' => 'Saxon\\XdmNode',
  ),
  'Saxon\\SchemaValidator::validate' => 
  array (
    0 => 'void',
    'filename=' => 'null|string',
  ),
  'Saxon\\SchemaValidator::validateToNode' => 
  array (
    0 => 'Saxon\\XdmNode',
    'filename=' => 'null|string',
  ),
  'Saxon\\XdmAtomicValue::addXdmItem' => 
  array (
    0 => 'mixed',
    'item' => 'Saxon\\XdmItem',
  ),
  'Saxon\\XdmAtomicValue::getAtomicValue' => 
  array (
    0 => 'Saxon\\XdmAtomicValue|null',
  ),
  'Saxon\\XdmAtomicValue::getBooleanValue' => 
  array (
    0 => 'bool',
  ),
  'Saxon\\XdmAtomicValue::getDoubleValue' => 
  array (
    0 => 'float',
  ),
  'Saxon\\XdmAtomicValue::getHead' => 
  array (
    0 => 'Saxon\\XdmItem',
  ),
  'Saxon\\XdmAtomicValue::getLongValue' => 
  array (
    0 => 'int',
  ),
  'Saxon\\XdmAtomicValue::getNodeValue' => 
  array (
    0 => 'Saxon\\XdmNode|null',
  ),
  'Saxon\\XdmAtomicValue::getStringValue' => 
  array (
    0 => 'string',
  ),
  'Saxon\\XdmAtomicValue::isAtomic' => 
  array (
    0 => 'true',
  ),
  'Saxon\\XdmAtomicValue::isNode' => 
  array (
    0 => 'bool',
  ),
  'Saxon\\XdmAtomicValue::itemAt' => 
  array (
    0 => 'Saxon\\XdmItem',
    'index' => 'int',
  ),
  'Saxon\\XdmAtomicValue::size' => 
  array (
    0 => 'int',
  ),
  'Saxon\\XdmItem::addXdmItem' => 
  array (
    0 => 'mixed',
    'item' => 'Saxon\\XdmItem',
  ),
  'Saxon\\XdmItem::getAtomicValue' => 
  array (
    0 => 'Saxon\\XdmAtomicValue|null',
  ),
  'Saxon\\XdmItem::getHead' => 
  array (
    0 => 'Saxon\\XdmItem',
  ),
  'Saxon\\XdmItem::getNodeValue' => 
  array (
    0 => 'Saxon\\XdmNode|null',
  ),
  'Saxon\\XdmItem::getStringValue' => 
  array (
    0 => 'string',
  ),
  'Saxon\\XdmItem::isAtomic' => 
  array (
    0 => 'bool',
  ),
  'Saxon\\XdmItem::isNode' => 
  array (
    0 => 'bool',
  ),
  'Saxon\\XdmItem::itemAt' => 
  array (
    0 => 'Saxon\\XdmItem',
    'index' => 'int',
  ),
  'Saxon\\XdmItem::size' => 
  array (
    0 => 'int',
  ),
  'Saxon\\XdmNode::addXdmItem' => 
  array (
    0 => 'mixed',
    'item' => 'Saxon\\XdmItem',
  ),
  'Saxon\\XdmNode::getAtomicValue' => 
  array (
    0 => 'Saxon\\XdmAtomicValue|null',
  ),
  'Saxon\\XdmNode::getAttributeCount' => 
  array (
    0 => 'int',
  ),
  'Saxon\\XdmNode::getAttributeNode' => 
  array (
    0 => 'Saxon\\XdmNode|null',
    'index' => 'int',
  ),
  'Saxon\\XdmNode::getAttributeValue' => 
  array (
    0 => 'null|string',
    'index' => 'int',
  ),
  'Saxon\\XdmNode::getChildCount' => 
  array (
    0 => 'int',
  ),
  'Saxon\\XdmNode::getChildNode' => 
  array (
    0 => 'Saxon\\XdmNode|null',
    'index' => 'int',
  ),
  'Saxon\\XdmNode::getHead' => 
  array (
    0 => 'Saxon\\XdmItem',
  ),
  'Saxon\\XdmNode::getNodeKind' => 
  array (
    0 => 'int',
  ),
  'Saxon\\XdmNode::getNodeName' => 
  array (
    0 => 'string',
  ),
  'Saxon\\XdmNode::getNodeValue' => 
  array (
    0 => 'Saxon\\XdmNode|null',
  ),
  'Saxon\\XdmNode::getParent' => 
  array (
    0 => 'Saxon\\XdmNode|null',
  ),
  'Saxon\\XdmNode::getStringValue' => 
  array (
    0 => 'string',
  ),
  'Saxon\\XdmNode::isAtomic' => 
  array (
    0 => 'false',
  ),
  'Saxon\\XdmNode::isNode' => 
  array (
    0 => 'bool',
  ),
  'Saxon\\XdmNode::itemAt' => 
  array (
    0 => 'Saxon\\XdmItem',
    'index' => 'int',
  ),
  'Saxon\\XdmNode::size' => 
  array (
    0 => 'int',
  ),
  'Saxon\\XdmValue::addXdmItem' => 
  array (
    0 => 'mixed',
    'item' => 'Saxon\\XdmItem',
  ),
  'Saxon\\XdmValue::getHead' => 
  array (
    0 => 'Saxon\\XdmItem',
  ),
  'Saxon\\XdmValue::itemAt' => 
  array (
    0 => 'Saxon\\XdmItem',
    'index' => 'int',
  ),
  'Saxon\\XdmValue::size' => 
  array (
    0 => 'int',
  ),
  'Saxon\\XPathProcessor::clearParameters' => 
  array (
    0 => 'void',
  ),
  'Saxon\\XPathProcessor::clearProperties' => 
  array (
    0 => 'void',
  ),
  'Saxon\\XPathProcessor::declareNamespace' => 
  array (
    0 => 'void',
    'prefix' => 'mixed',
    'namespace' => 'mixed',
  ),
  'Saxon\\XPathProcessor::effectiveBooleanValue' => 
  array (
    0 => 'bool',
    'xpathStr' => 'string',
  ),
  'Saxon\\XPathProcessor::evaluate' => 
  array (
    0 => 'Saxon\\XdmValue',
    'xpathStr' => 'string',
  ),
  'Saxon\\XPathProcessor::evaluateSingle' => 
  array (
    0 => 'Saxon\\XdmItem',
    'xpathStr' => 'string',
  ),
  'Saxon\\XPathProcessor::exceptionClear' => 
  array (
    0 => 'void',
  ),
  'Saxon\\XPathProcessor::getErrorCode' => 
  array (
    0 => 'string',
    'i' => 'int',
  ),
  'Saxon\\XPathProcessor::getErrorMessage' => 
  array (
    0 => 'string',
    'i' => 'int',
  ),
  'Saxon\\XPathProcessor::getExceptionCount' => 
  array (
    0 => 'int',
  ),
  'Saxon\\XPathProcessor::setBaseURI' => 
  array (
    0 => 'void',
    'uri' => 'string',
  ),
  'Saxon\\XPathProcessor::setContextFile' => 
  array (
    0 => 'void',
    'fileName' => 'string',
  ),
  'Saxon\\XPathProcessor::setContextItem' => 
  array (
    0 => 'void',
    'item' => 'Saxon\\XdmItem',
  ),
  'Saxon\\XPathProcessor::setParameter' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'Saxon\\XdmValue',
  ),
  'Saxon\\XPathProcessor::setProperty' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'string',
  ),
  'Saxon\\XQueryProcessor::clearParameters' => 
  array (
    0 => 'void',
  ),
  'Saxon\\XQueryProcessor::clearProperties' => 
  array (
    0 => 'void',
  ),
  'Saxon\\XQueryProcessor::declareNamespace' => 
  array (
    0 => 'void',
    'prefix' => 'string',
    'namespace' => 'string',
  ),
  'Saxon\\XQueryProcessor::exceptionClear' => 
  array (
    0 => 'void',
  ),
  'Saxon\\XQueryProcessor::getErrorCode' => 
  array (
    0 => 'string',
    'i' => 'int',
  ),
  'Saxon\\XQueryProcessor::getErrorMessage' => 
  array (
    0 => 'string',
    'i' => 'int',
  ),
  'Saxon\\XQueryProcessor::getExceptionCount' => 
  array (
    0 => 'int',
  ),
  'Saxon\\XQueryProcessor::runQueryToFile' => 
  array (
    0 => 'void',
    'outfilename' => 'string',
  ),
  'Saxon\\XQueryProcessor::runQueryToString' => 
  array (
    0 => 'null|string',
  ),
  'Saxon\\XQueryProcessor::runQueryToValue' => 
  array (
    0 => 'Saxon\\XdmValue|null',
  ),
  'Saxon\\XQueryProcessor::setContextItem' => 
  array (
    0 => 'void',
    'object' => 'Saxon\\XdmAtomicValue|Saxon\\XdmItem|Saxon\\XdmNode|Saxon\\XdmValue',
  ),
  'Saxon\\XQueryProcessor::setContextItemFromFile' => 
  array (
    0 => 'void',
    'fileName' => 'string',
  ),
  'Saxon\\XQueryProcessor::setParameter' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'Saxon\\XdmValue',
  ),
  'Saxon\\XQueryProcessor::setProperty' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'string',
  ),
  'Saxon\\XQueryProcessor::setQueryBaseURI' => 
  array (
    0 => 'void',
    'uri' => 'string',
  ),
  'Saxon\\XQueryProcessor::setQueryContent' => 
  array (
    0 => 'void',
    'string' => 'string',
  ),
  'Saxon\\XQueryProcessor::setQueryFile' => 
  array (
    0 => 'void',
    'filename' => 'string',
  ),
  'Saxon\\XQueryProcessor::setQueryItem' => 
  array (
    0 => 'void',
    'item' => 'Saxon\\XdmItem',
  ),
  'Saxon\\XsltProcessor::clearParameters' => 
  array (
    0 => 'void',
  ),
  'Saxon\\XsltProcessor::clearProperties' => 
  array (
    0 => 'void',
  ),
  'Saxon\\XsltProcessor::compileFromFile' => 
  array (
    0 => 'void',
    'fileName' => 'string',
  ),
  'Saxon\\XsltProcessor::compileFromString' => 
  array (
    0 => 'void',
    'string' => 'string',
  ),
  'Saxon\\XsltProcessor::compileFromValue' => 
  array (
    0 => 'void',
    'node' => 'Saxon\\XdmNode',
  ),
  'Saxon\\XsltProcessor::exceptionClear' => 
  array (
    0 => 'void',
  ),
  'Saxon\\XsltProcessor::getErrorCode' => 
  array (
    0 => 'string',
    'i' => 'int',
  ),
  'Saxon\\XsltProcessor::getErrorMessage' => 
  array (
    0 => 'string',
    'i' => 'int',
  ),
  'Saxon\\XsltProcessor::getExceptionCount' => 
  array (
    0 => 'int',
  ),
  'Saxon\\XsltProcessor::setOutputFile' => 
  array (
    0 => 'void',
    'fileName' => 'string',
  ),
  'Saxon\\XsltProcessor::setParameter' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'Saxon\\XdmValue',
  ),
  'Saxon\\XsltProcessor::setProperty' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'string',
  ),
  'Saxon\\XsltProcessor::setSourceFromFile' => 
  array (
    0 => 'void',
    'filename' => 'string',
  ),
  'Saxon\\XsltProcessor::setSourceFromXdmValue' => 
  array (
    0 => 'void',
    'value' => 'Saxon\\XdmValue',
  ),
  'Saxon\\XsltProcessor::transformFileToFile' => 
  array (
    0 => 'void',
    'sourceFileName' => 'string',
    'stylesheetFileName' => 'string',
    'outputfileName' => 'string',
  ),
  'Saxon\\XsltProcessor::transformFileToString' => 
  array (
    0 => 'null|string',
    'sourceFileName' => 'string',
    'stylesheetFileName' => 'string',
  ),
  'Saxon\\XsltProcessor::transformFileToValue' => 
  array (
    0 => 'Saxon\\XdmValue',
    'fileName' => 'string',
  ),
  'Saxon\\XsltProcessor::transformToFile' => 
  array (
    0 => 'void',
  ),
  'Saxon\\XsltProcessor::transformToString' => 
  array (
    0 => 'string',
  ),
  'Saxon\\XsltProcessor::transformToValue' => 
  array (
    0 => 'Saxon\\XdmValue|null',
  ),
  'SCA::createDataObject' => 
  array (
    0 => 'SDO_DataObject',
    'type_namespace_uri' => 'string',
    'type_name' => 'string',
  ),
  'SCA::getService' => 
  array (
    0 => 'mixed',
    'target' => 'string',
    'binding=' => 'string',
    'config=' => 'array<array-key, mixed>',
  ),
  'SCA_LocalProxy::createDataObject' => 
  array (
    0 => 'SDO_DataObject',
    'type_namespace_uri' => 'string',
    'type_name' => 'string',
  ),
  'SCA_SoapProxy::createDataObject' => 
  array (
    0 => 'SDO_DataObject',
    'type_namespace_uri' => 'string',
    'type_name' => 'string',
  ),
  'scalebarObj::convertToString' => 
  array (
    0 => 'string',
  ),
  'scalebarObj::free' => 
  array (
    0 => 'void',
  ),
  'scalebarObj::set' => 
  array (
    0 => 'int',
    'property_name' => 'string',
    'new_value' => 'mixed',
  ),
  'scalebarObj::setImageColor' => 
  array (
    0 => 'int',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
  ),
  'scalebarObj::updateFromString' => 
  array (
    0 => 'int',
    'snippet' => 'string',
  ),
  'scandir' => 
  array (
    0 => 'false|list<string>',
    'directory' => 'string',
    'sorting_order=' => 'int',
    'context=' => 'resource',
  ),
  'SDO_DAS_ChangeSummary::beginLogging' => 
  array (
    0 => 'mixed',
  ),
  'SDO_DAS_ChangeSummary::endLogging' => 
  array (
    0 => 'mixed',
  ),
  'SDO_DAS_ChangeSummary::getChangedDataObjects' => 
  array (
    0 => 'SDO_List',
  ),
  'SDO_DAS_ChangeSummary::getChangeType' => 
  array (
    0 => 'int',
    'dataobject' => 'sdo_dataobject',
  ),
  'SDO_DAS_ChangeSummary::getOldContainer' => 
  array (
    0 => 'SDO_DataObject',
    'data_object' => 'sdo_dataobject',
  ),
  'SDO_DAS_ChangeSummary::getOldValues' => 
  array (
    0 => 'SDO_List',
    'data_object' => 'sdo_dataobject',
  ),
  'SDO_DAS_ChangeSummary::isLogging' => 
  array (
    0 => 'bool',
  ),
  'SDO_DAS_DataFactory::addPropertyToType' => 
  array (
    0 => 'mixed',
    'parent_type_namespace_uri' => 'string',
    'parent_type_name' => 'string',
    'property_name' => 'string',
    'type_namespace_uri' => 'string',
    'type_name' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'SDO_DAS_DataFactory::addType' => 
  array (
    0 => 'mixed',
    'type_namespace_uri' => 'string',
    'type_name' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'SDO_DAS_DataFactory::getDataFactory' => 
  array (
    0 => 'SDO_DAS_DataFactory',
  ),
  'SDO_DAS_DataObject::getChangeSummary' => 
  array (
    0 => 'SDO_DAS_ChangeSummary',
  ),
  'SDO_DAS_Relational::__construct' => 
  array (
    0 => 'void',
    'database_metadata' => 'array<array-key, mixed>',
    'application_root_type=' => 'string',
    'sdo_containment_references_metadata=' => 'array<array-key, mixed>',
  ),
  'SDO_DAS_Relational::applyChanges' => 
  array (
    0 => 'mixed',
    'database_handle' => 'pdo',
    'root_data_object' => 'sdodataobject',
  ),
  'SDO_DAS_Relational::createRootDataObject' => 
  array (
    0 => 'SDODataObject',
  ),
  'SDO_DAS_Relational::executePreparedQuery' => 
  array (
    0 => 'SDODataObject',
    'database_handle' => 'pdo',
    'prepared_statement' => 'pdostatement',
    'value_list' => 'array<array-key, mixed>',
    'column_specifier=' => 'array<array-key, mixed>',
  ),
  'SDO_DAS_Relational::executeQuery' => 
  array (
    0 => 'SDODataObject',
    'database_handle' => 'pdo',
    'sql_statement' => 'string',
    'column_specifier=' => 'array<array-key, mixed>',
  ),
  'SDO_DAS_Setting::getListIndex' => 
  array (
    0 => 'int',
  ),
  'SDO_DAS_Setting::getPropertyIndex' => 
  array (
    0 => 'int',
  ),
  'SDO_DAS_Setting::getPropertyName' => 
  array (
    0 => 'string',
  ),
  'SDO_DAS_Setting::getValue' => 
  array (
    0 => 'mixed',
  ),
  'SDO_DAS_Setting::isSet' => 
  array (
    0 => 'bool',
  ),
  'SDO_DAS_XML::addTypes' => 
  array (
    0 => 'mixed',
    'xsd_file' => 'string',
  ),
  'SDO_DAS_XML::create' => 
  array (
    0 => 'SDO_DAS_XML',
    'xsd_file=' => 'mixed',
    'key=' => 'string',
  ),
  'SDO_DAS_XML::createDataObject' => 
  array (
    0 => 'SDO_DataObject',
    'namespace_uri' => 'string',
    'type_name' => 'string',
  ),
  'SDO_DAS_XML::createDocument' => 
  array (
    0 => 'SDO_DAS_XML_Document',
    'document_element_name' => 'string',
    'document_element_namespace_uri' => 'string',
    'dataobject=' => 'sdo_dataobject',
  ),
  'SDO_DAS_XML::loadFile' => 
  array (
    0 => 'SDO_XMLDocument',
    'xml_file' => 'string',
  ),
  'SDO_DAS_XML::loadString' => 
  array (
    0 => 'SDO_DAS_XML_Document',
    'xml_string' => 'string',
  ),
  'SDO_DAS_XML::saveFile' => 
  array (
    0 => 'mixed',
    'xdoc' => 'sdo_xmldocument',
    'xml_file' => 'string',
    'indent=' => 'int',
  ),
  'SDO_DAS_XML::saveString' => 
  array (
    0 => 'string',
    'xdoc' => 'sdo_xmldocument',
    'indent=' => 'int',
  ),
  'SDO_DAS_XML_Document::getRootDataObject' => 
  array (
    0 => 'SDO_DataObject',
  ),
  'SDO_DAS_XML_Document::getRootElementName' => 
  array (
    0 => 'string',
  ),
  'SDO_DAS_XML_Document::getRootElementURI' => 
  array (
    0 => 'string',
  ),
  'SDO_DAS_XML_Document::setEncoding' => 
  array (
    0 => 'mixed',
    'encoding' => 'string',
  ),
  'SDO_DAS_XML_Document::setXMLDeclaration' => 
  array (
    0 => 'mixed',
    'xmldeclatation' => 'bool',
  ),
  'SDO_DAS_XML_Document::setXMLVersion' => 
  array (
    0 => 'mixed',
    'xmlversion' => 'string',
  ),
  'SDO_DataFactory::create' => 
  array (
    0 => 'void',
    'type_namespace_uri' => 'string',
    'type_name' => 'string',
  ),
  'SDO_DataObject::clear' => 
  array (
    0 => 'void',
  ),
  'SDO_DataObject::createDataObject' => 
  array (
    0 => 'SDO_DataObject',
    'identifier' => 'mixed',
  ),
  'SDO_DataObject::getContainer' => 
  array (
    0 => 'SDO_DataObject',
  ),
  'SDO_DataObject::getSequence' => 
  array (
    0 => 'SDO_Sequence',
  ),
  'SDO_DataObject::getTypeName' => 
  array (
    0 => 'string',
  ),
  'SDO_DataObject::getTypeNamespaceURI' => 
  array (
    0 => 'string',
  ),
  'SDO_Exception::getCause' => 
  array (
    0 => 'mixed',
  ),
  'SDO_List::insert' => 
  array (
    0 => 'void',
    'value' => 'mixed',
    'index=' => 'int',
  ),
  'SDO_Model_Property::getContainingType' => 
  array (
    0 => 'SDO_Model_Type',
  ),
  'SDO_Model_Property::getDefault' => 
  array (
    0 => 'mixed',
  ),
  'SDO_Model_Property::getName' => 
  array (
    0 => 'string',
  ),
  'SDO_Model_Property::getType' => 
  array (
    0 => 'SDO_Model_Type',
  ),
  'SDO_Model_Property::isContainment' => 
  array (
    0 => 'bool',
  ),
  'SDO_Model_Property::isMany' => 
  array (
    0 => 'bool',
  ),
  'SDO_Model_ReflectionDataObject::__construct' => 
  array (
    0 => 'void',
    'data_object' => 'sdo_dataobject',
  ),
  'SDO_Model_ReflectionDataObject::export' => 
  array (
    0 => 'mixed',
    'rdo' => 'sdo_model_reflectiondataobject',
    'return=' => 'bool',
  ),
  'SDO_Model_ReflectionDataObject::getContainmentProperty' => 
  array (
    0 => 'SDO_Model_Property',
  ),
  'SDO_Model_ReflectionDataObject::getInstanceProperties' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SDO_Model_ReflectionDataObject::getType' => 
  array (
    0 => 'SDO_Model_Type',
  ),
  'SDO_Model_Type::getBaseType' => 
  array (
    0 => 'SDO_Model_Type',
  ),
  'SDO_Model_Type::getName' => 
  array (
    0 => 'string',
  ),
  'SDO_Model_Type::getNamespaceURI' => 
  array (
    0 => 'string',
  ),
  'SDO_Model_Type::getProperties' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SDO_Model_Type::getProperty' => 
  array (
    0 => 'SDO_Model_Property',
    'identifier' => 'mixed',
  ),
  'SDO_Model_Type::isAbstractType' => 
  array (
    0 => 'bool',
  ),
  'SDO_Model_Type::isDataType' => 
  array (
    0 => 'bool',
  ),
  'SDO_Model_Type::isInstance' => 
  array (
    0 => 'bool',
    'data_object' => 'sdo_dataobject',
  ),
  'SDO_Model_Type::isOpenType' => 
  array (
    0 => 'bool',
  ),
  'SDO_Model_Type::isSequencedType' => 
  array (
    0 => 'bool',
  ),
  'SDO_Sequence::getProperty' => 
  array (
    0 => 'SDO_Model_Property',
    'sequence_index' => 'int',
  ),
  'SDO_Sequence::insert' => 
  array (
    0 => 'void',
    'value' => 'mixed',
    'sequenceindex=' => 'int',
    'propertyidentifier=' => 'mixed',
  ),
  'SDO_Sequence::move' => 
  array (
    0 => 'void',
    'toindex' => 'int',
    'fromindex' => 'int',
  ),
  'SeasLog::__destruct' => 
  array (
    0 => 'void',
  ),
  'SeasLog::alert' => 
  array (
    0 => 'bool',
    'message' => 'string',
    'content=' => 'array<array-key, mixed>',
    'logger=' => 'string',
  ),
  'SeasLog::analyzerCount' => 
  array (
    0 => 'mixed',
    'level' => 'string',
    'log_path=' => 'string',
    'key_word=' => 'string',
  ),
  'SeasLog::analyzerDetail' => 
  array (
    0 => 'mixed',
    'level' => 'string',
    'log_path=' => 'string',
    'key_word=' => 'string',
    'start=' => 'int',
    'limit=' => 'int',
    'order=' => 'int',
  ),
  'SeasLog::closeLoggerStream' => 
  array (
    0 => 'bool',
    'model' => 'int',
    'logger' => 'string',
  ),
  'SeasLog::critical' => 
  array (
    0 => 'bool',
    'message' => 'string',
    'content=' => 'array<array-key, mixed>',
    'logger=' => 'string',
  ),
  'SeasLog::debug' => 
  array (
    0 => 'bool',
    'message' => 'string',
    'content=' => 'array<array-key, mixed>',
    'logger=' => 'string',
  ),
  'SeasLog::emergency' => 
  array (
    0 => 'bool',
    'message' => 'string',
    'content=' => 'array<array-key, mixed>',
    'logger=' => 'string',
  ),
  'SeasLog::error' => 
  array (
    0 => 'bool',
    'message' => 'string',
    'content=' => 'array<array-key, mixed>',
    'logger=' => 'string',
  ),
  'SeasLog::flushBuffer' => 
  array (
    0 => 'bool',
  ),
  'SeasLog::getBasePath' => 
  array (
    0 => 'string',
  ),
  'SeasLog::getBuffer' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SeasLog::getBufferEnabled' => 
  array (
    0 => 'bool',
  ),
  'SeasLog::getDatetimeFormat' => 
  array (
    0 => 'string',
  ),
  'SeasLog::getLastLogger' => 
  array (
    0 => 'string',
  ),
  'SeasLog::getRequestID' => 
  array (
    0 => 'string',
  ),
  'SeasLog::getRequestVariable' => 
  array (
    0 => 'bool',
    'key' => 'int',
  ),
  'SeasLog::info' => 
  array (
    0 => 'bool',
    'message' => 'string',
    'content=' => 'array<array-key, mixed>',
    'logger=' => 'string',
  ),
  'SeasLog::log' => 
  array (
    0 => 'bool',
    'level' => 'string',
    'message=' => 'string',
    'content=' => 'array<array-key, mixed>',
    'logger=' => 'string',
  ),
  'SeasLog::notice' => 
  array (
    0 => 'bool',
    'message' => 'string',
    'content=' => 'array<array-key, mixed>',
    'logger=' => 'string',
  ),
  'SeasLog::setBasePath' => 
  array (
    0 => 'bool',
    'base_path' => 'string',
  ),
  'SeasLog::setDatetimeFormat' => 
  array (
    0 => 'bool',
    'format' => 'string',
  ),
  'SeasLog::setLogger' => 
  array (
    0 => 'bool',
    'logger' => 'string',
  ),
  'SeasLog::setRequestID' => 
  array (
    0 => 'bool',
    'request_id' => 'string',
  ),
  'SeasLog::setRequestVariable' => 
  array (
    0 => 'bool',
    'key' => 'int',
    'value' => 'string',
  ),
  'SeasLog::warning' => 
  array (
    0 => 'bool',
    'message' => 'string',
    'content=' => 'array<array-key, mixed>',
    'logger=' => 'string',
  ),
  'seaslog_get_author' => 
  array (
    0 => 'string',
  ),
  'seaslog_get_version' => 
  array (
    0 => 'string',
  ),
  'SeekableIterator::__construct' => 
  array (
    0 => 'void',
  ),
  'SeekableIterator::current' => 
  array (
    0 => 'mixed',
  ),
  'SeekableIterator::key' => 
  array (
    0 => 'int|string',
  ),
  'SeekableIterator::next' => 
  array (
    0 => 'void',
  ),
  'SeekableIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'SeekableIterator::seek' => 
  array (
    0 => 'void',
    'position' => 'int',
  ),
  'SeekableIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'sem_acquire' => 
  array (
    0 => 'bool',
    'semaphore' => 'SysvSemaphore',
    'non_blocking=' => 'bool',
  ),
  'sem_get' => 
  array (
    0 => 'SysvSemaphore|false',
    'key' => 'int',
    'max_acquire=' => 'int',
    'permissions=' => 'int',
    'auto_release=' => 'bool',
  ),
  'sem_release' => 
  array (
    0 => 'bool',
    'semaphore' => 'SysvSemaphore',
  ),
  'sem_remove' => 
  array (
    0 => 'bool',
    'semaphore' => 'SysvSemaphore',
  ),
  'Serializable::__construct' => 
  array (
    0 => 'void',
  ),
  'Serializable::serialize' => 
  array (
    0 => 'null|string',
  ),
  'Serializable::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'serialize' => 
  array (
    0 => 'string',
    'value' => 'mixed',
  ),
  'ServerRequest::withInput' => 
  array (
    0 => 'ServerRequest',
    'input' => 'mixed',
  ),
  'ServerRequest::withoutParams' => 
  array (
    0 => 'ServerRequest',
    'params' => 'int|string',
  ),
  'ServerRequest::withParam' => 
  array (
    0 => 'ServerRequest',
    'key' => 'int|string',
    'value' => 'mixed',
  ),
  'ServerRequest::withParams' => 
  array (
    0 => 'ServerRequest',
    'params' => 'mixed',
  ),
  'ServerRequest::withUrl' => 
  array (
    0 => 'ServerRequest',
    'url' => 'array<array-key, mixed>',
  ),
  'ServerResponse::addHeader' => 
  array (
    0 => 'void',
    'label' => 'string',
    'value' => 'string',
  ),
  'ServerResponse::date' => 
  array (
    0 => 'string',
    'date' => 'DateTimeInterface|string',
  ),
  'ServerResponse::getHeader' => 
  array (
    0 => 'string',
    'label' => 'string',
  ),
  'ServerResponse::getHeaders' => 
  array (
    0 => 'array<array-key, string>',
  ),
  'ServerResponse::getStatus' => 
  array (
    0 => 'int',
  ),
  'ServerResponse::getVersion' => 
  array (
    0 => 'string',
  ),
  'ServerResponse::setHeader' => 
  array (
    0 => 'void',
    'label' => 'string',
    'value' => 'string',
  ),
  'ServerResponse::setStatus' => 
  array (
    0 => 'void',
    'status' => 'int',
  ),
  'ServerResponse::setVersion' => 
  array (
    0 => 'void',
    'version' => 'string',
  ),
  'session_abort' => 
  array (
    0 => 'bool',
  ),
  'session_cache_expire' => 
  array (
    0 => 'false|int',
    'value=' => 'int|null',
  ),
  'session_cache_limiter' => 
  array (
    0 => 'false|string',
    'value=' => 'null|string',
  ),
  'session_commit' => 
  array (
    0 => 'bool',
  ),
  'session_create_id' => 
  array (
    0 => 'false|string',
    'prefix=' => 'string',
  ),
  'session_decode' => 
  array (
    0 => 'bool',
    'data' => 'string',
  ),
  'session_destroy' => 
  array (
    0 => 'bool',
  ),
  'session_encode' => 
  array (
    0 => 'false|string',
  ),
  'session_gc' => 
  array (
    0 => 'false|int',
  ),
  'session_get_cookie_params' => 
  array (
    0 => 'array{domain: null|string, httponly: bool|null, lifetime: int|null, path: null|string, samesite: null|string, secure: bool|null}',
  ),
  'session_id' => 
  array (
    0 => 'false|string',
    'id=' => 'null|string',
  ),
  'session_is_registered' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'session_module_name' => 
  array (
    0 => 'false|string',
    'module=' => 'null|string',
  ),
  'session_name' => 
  array (
    0 => 'false|string',
    'name=' => 'null|string',
  ),
  'session_pgsql_add_error' => 
  array (
    0 => 'bool',
    'error_level' => 'int',
    'error_message=' => 'string',
  ),
  'session_pgsql_get_error' => 
  array (
    0 => 'array<array-key, mixed>',
    'with_error_message=' => 'bool',
  ),
  'session_pgsql_get_field' => 
  array (
    0 => 'string',
  ),
  'session_pgsql_reset' => 
  array (
    0 => 'bool',
  ),
  'session_pgsql_set_field' => 
  array (
    0 => 'bool',
    'value' => 'string',
  ),
  'session_pgsql_status' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'session_regenerate_id' => 
  array (
    0 => 'bool',
    'delete_old_session=' => 'bool',
  ),
  'session_register' => 
  array (
    0 => 'bool',
    'name' => 'mixed',
    '...args=' => 'mixed',
  ),
  'session_register_shutdown' => 
  array (
    0 => 'void',
  ),
  'session_reset' => 
  array (
    0 => 'bool',
  ),
  'session_save_path' => 
  array (
    0 => 'false|string',
    'path=' => 'null|string',
  ),
  'session_set_cookie_params' => 
  array (
    0 => 'bool',
    'lifetime' => 'int',
    'path=' => 'null|string',
    'domain=' => 'null|string',
    'secure=' => 'bool|null',
    'httponly=' => 'bool|null',
  ),
  'session_set_cookie_params\'1' => 
  array (
    0 => 'bool',
    'options' => 'array{domain?: null|string, httponly?: bool|null, lifetime?: int|null, path?: null|string, samesite?: null|string, secure?: bool|null}',
  ),
  'session_set_save_handler' => 
  array (
    0 => 'bool',
    'open' => 'callable(string, string):bool',
    'close' => 'callable():bool',
    'read' => 'callable(string):string',
    'write' => 'callable(string, string):bool',
    'destroy' => 'callable(string):bool',
    'gc' => 'callable(string):bool',
    'create_sid=' => 'callable():string',
    'validate_sid=' => 'callable(string):bool',
    'update_timestamp=' => 'callable(string):bool',
  ),
  'session_set_save_handler\'1' => 
  array (
    0 => 'bool',
    'open' => 'SessionHandlerInterface',
    'close=' => 'bool',
  ),
  'session_start' => 
  array (
    0 => 'bool',
    'options=' => 'array<array-key, mixed>',
  ),
  'session_status' => 
  array (
    0 => 'int',
  ),
  'session_unregister' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'session_unset' => 
  array (
    0 => 'bool',
  ),
  'session_write_close' => 
  array (
    0 => 'bool',
  ),
  'SessionHandler::close' => 
  array (
    0 => 'bool',
  ),
  'SessionHandler::create_sid' => 
  array (
    0 => 'string',
  ),
  'SessionHandler::destroy' => 
  array (
    0 => 'bool',
    'id' => 'string',
  ),
  'SessionHandler::gc' => 
  array (
    0 => 'false|int',
    'max_lifetime' => 'int',
  ),
  'SessionHandler::open' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'name' => 'string',
  ),
  'SessionHandler::read' => 
  array (
    0 => 'false|string',
    'id' => 'string',
  ),
  'SessionHandler::write' => 
  array (
    0 => 'bool',
    'id' => 'string',
    'data' => 'string',
  ),
  'SessionHandlerInterface::close' => 
  array (
    0 => 'bool',
  ),
  'SessionHandlerInterface::destroy' => 
  array (
    0 => 'bool',
    'id' => 'string',
  ),
  'SessionHandlerInterface::gc' => 
  array (
    0 => 'false|int',
    'max_lifetime' => 'int',
  ),
  'SessionHandlerInterface::open' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'name' => 'string',
  ),
  'SessionHandlerInterface::read' => 
  array (
    0 => 'false|string',
    'id' => 'string',
  ),
  'SessionHandlerInterface::write' => 
  array (
    0 => 'bool',
    'id' => 'string',
    'data' => 'string',
  ),
  'SessionIdInterface::create_sid' => 
  array (
    0 => 'string',
  ),
  'SessionUpdateTimestampHandler::updateTimestamp' => 
  array (
    0 => 'bool',
    'id' => 'string',
    'data' => 'string',
  ),
  'SessionUpdateTimestampHandler::validateId' => 
  array (
    0 => 'char',
    'id' => 'string',
  ),
  'SessionUpdateTimestampHandlerInterface::updateTimestamp' => 
  array (
    0 => 'bool',
    'id' => 'string',
    'data' => 'string',
  ),
  'SessionUpdateTimestampHandlerInterface::validateId' => 
  array (
    0 => 'bool',
    'id' => 'string',
  ),
  'set_error_handler' => 
  array (
    0 => 'callable(int, string, string=, int=, array<array-key, mixed>=):bool|null',
    'callback' => 'callable(int, string, string=, int=, array<array-key, mixed>=):bool|null',
    'error_levels=' => 'int',
  ),
  'set_exception_handler' => 
  array (
    0 => 'callable(Throwable):void|null',
    'callback' => 'callable(Throwable):void|null',
  ),
  'set_file_buffer' => 
  array (
    0 => 'int',
    'stream' => 'resource',
    'size' => 'int',
  ),
  'set_include_path' => 
  array (
    0 => 'false|string',
    'include_path' => 'string',
  ),
  'set_magic_quotes_runtime' => 
  array (
    0 => 'bool',
    'new_setting' => 'bool',
  ),
  'set_time_limit' => 
  array (
    0 => 'bool',
    'seconds' => 'int',
  ),
  'setcookie' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value=' => 'string',
    'expires=' => 'int',
    'path=' => 'string',
    'domain=' => 'string',
    'secure=' => 'bool',
    'httponly=' => 'bool',
    'samesite=' => 'string',
    'url_encode=' => 'int',
  ),
  'setcookie\'1' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value=' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'setLeftFill' => 
  array (
    0 => 'void',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'a=' => 'int',
  ),
  'setLine' => 
  array (
    0 => 'void',
    'width' => 'int',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'a=' => 'int',
  ),
  'setlocale' => 
  array (
    0 => 'false|string',
    'category' => 'int',
    'locales' => '0|null|string',
    '...rest=' => 'string',
  ),
  'setlocale\'1' => 
  array (
    0 => 'false|string',
    'category' => 'int',
    'locales' => 'array<array-key, mixed>|null',
  ),
  'setproctitle' => 
  array (
    0 => 'void',
    'title' => 'string',
  ),
  'setrawcookie' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value=' => 'string',
    'expires=' => 'int',
    'path=' => 'string',
    'domain=' => 'string',
    'secure=' => 'bool',
    'httponly=' => 'bool',
  ),
  'setrawcookie\'1' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value=' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'setRightFill' => 
  array (
    0 => 'void',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'a=' => 'int',
  ),
  'setthreadtitle' => 
  array (
    0 => 'bool',
    'title' => 'string',
  ),
  'settype' => 
  array (
    0 => 'bool',
    '&rw_var' => 'mixed',
    'type' => 'string',
  ),
  'sha1' => 
  array (
    0 => 'string',
    'string' => 'string',
    'binary=' => 'bool',
  ),
  'sha1_file' => 
  array (
    0 => 'false|string',
    'filename' => 'string',
    'binary=' => 'bool',
  ),
  'sha256' => 
  array (
    0 => 'string',
    'string' => 'string',
    'raw_output=' => 'bool',
  ),
  'sha256_file' => 
  array (
    0 => 'string',
    'filename' => 'string',
    'raw_output=' => 'bool',
  ),
  'shapefileObj::__construct' => 
  array (
    0 => 'void',
    'filename' => 'string',
    'type' => 'int',
  ),
  'shapefileObj::addPoint' => 
  array (
    0 => 'int',
    'point' => 'pointObj',
  ),
  'shapefileObj::addShape' => 
  array (
    0 => 'int',
    'shape' => 'shapeObj',
  ),
  'shapefileObj::free' => 
  array (
    0 => 'void',
  ),
  'shapefileObj::getExtent' => 
  array (
    0 => 'rectObj',
    'i' => 'int',
  ),
  'shapefileObj::getPoint' => 
  array (
    0 => 'shapeObj',
    'i' => 'int',
  ),
  'shapefileObj::getShape' => 
  array (
    0 => 'shapeObj',
    'i' => 'int',
  ),
  'shapefileObj::getTransformed' => 
  array (
    0 => 'shapeObj',
    'map' => 'mapObj',
    'i' => 'int',
  ),
  'shapefileObj::ms_newShapefileObj' => 
  array (
    0 => 'shapefileObj',
    'filename' => 'string',
    'type' => 'int',
  ),
  'shapeObj::__construct' => 
  array (
    0 => 'void',
    'type' => 'int',
  ),
  'shapeObj::add' => 
  array (
    0 => 'int',
    'line' => 'lineObj',
  ),
  'shapeObj::boundary' => 
  array (
    0 => 'shapeObj',
  ),
  'shapeObj::contains' => 
  array (
    0 => 'bool',
    'point' => 'pointObj',
  ),
  'shapeObj::containsShape' => 
  array (
    0 => 'int',
    'shape2' => 'shapeObj',
  ),
  'shapeObj::convexhull' => 
  array (
    0 => 'shapeObj',
  ),
  'shapeObj::crosses' => 
  array (
    0 => 'int',
    'shape' => 'shapeObj',
  ),
  'shapeObj::difference' => 
  array (
    0 => 'shapeObj',
    'shape' => 'shapeObj',
  ),
  'shapeObj::disjoint' => 
  array (
    0 => 'int',
    'shape' => 'shapeObj',
  ),
  'shapeObj::draw' => 
  array (
    0 => 'int',
    'map' => 'mapObj',
    'layer' => 'layerObj',
    'img' => 'imageObj',
  ),
  'shapeObj::equals' => 
  array (
    0 => 'int',
    'shape' => 'shapeObj',
  ),
  'shapeObj::free' => 
  array (
    0 => 'void',
  ),
  'shapeObj::getArea' => 
  array (
    0 => 'float',
  ),
  'shapeObj::getCentroid' => 
  array (
    0 => 'pointObj',
  ),
  'shapeObj::getLabelPoint' => 
  array (
    0 => 'pointObj',
  ),
  'shapeObj::getLength' => 
  array (
    0 => 'float',
  ),
  'shapeObj::getPointUsingMeasure' => 
  array (
    0 => 'pointObj',
    'm' => 'float',
  ),
  'shapeObj::getValue' => 
  array (
    0 => 'string',
    'layer' => 'layerObj',
    'filedname' => 'string',
  ),
  'shapeObj::intersection' => 
  array (
    0 => 'shapeObj',
    'shape' => 'shapeObj',
  ),
  'shapeObj::intersects' => 
  array (
    0 => 'bool',
    'shape' => 'shapeObj',
  ),
  'shapeObj::line' => 
  array (
    0 => 'lineObj',
    'i' => 'int',
  ),
  'shapeObj::ms_shapeObjFromWkt' => 
  array (
    0 => 'shapeObj',
    'wkt' => 'string',
  ),
  'shapeObj::overlaps' => 
  array (
    0 => 'int',
    'shape' => 'shapeObj',
  ),
  'shapeObj::project' => 
  array (
    0 => 'int',
    'in' => 'projectionObj',
    'out' => 'projectionObj',
  ),
  'shapeObj::set' => 
  array (
    0 => 'int',
    'property_name' => 'string',
    'new_value' => 'mixed',
  ),
  'shapeObj::setBounds' => 
  array (
    0 => 'int',
  ),
  'shapeObj::simplify' => 
  array (
    0 => 'null|shapeObj',
    'tolerance' => 'float',
  ),
  'shapeObj::symdifference' => 
  array (
    0 => 'shapeObj',
    'shape' => 'shapeObj',
  ),
  'shapeObj::topologyPreservingSimplify' => 
  array (
    0 => 'null|shapeObj',
    'tolerance' => 'float',
  ),
  'shapeObj::touches' => 
  array (
    0 => 'int',
    'shape' => 'shapeObj',
  ),
  'shapeObj::toWkt' => 
  array (
    0 => 'string',
  ),
  'shapeObj::union' => 
  array (
    0 => 'shapeObj',
    'shape' => 'shapeObj',
  ),
  'shapeObj::within' => 
  array (
    0 => 'int',
    'shape2' => 'shapeObj',
  ),
  'shell_exec' => 
  array (
    0 => 'false|null|string',
    'command' => 'string',
  ),
  'shm_attach' => 
  array (
    0 => 'SysvSharedMemory|false',
    'key' => 'int',
    'size=' => 'int|null',
    'permissions=' => 'int',
  ),
  'shm_detach' => 
  array (
    0 => 'bool',
    'shm' => 'SysvSharedMemory',
  ),
  'shm_get_var' => 
  array (
    0 => 'mixed',
    'shm' => 'SysvSharedMemory',
    'key' => 'int',
  ),
  'shm_has_var' => 
  array (
    0 => 'bool',
    'shm' => 'SysvSharedMemory',
    'key' => 'int',
  ),
  'shm_put_var' => 
  array (
    0 => 'bool',
    'shm' => 'SysvSharedMemory',
    'key' => 'int',
    'value' => 'mixed',
  ),
  'shm_remove' => 
  array (
    0 => 'bool',
    'shm' => 'SysvSharedMemory',
  ),
  'shm_remove_var' => 
  array (
    0 => 'bool',
    'shm' => 'SysvSharedMemory',
    'key' => 'int',
  ),
  'shmop_close' => 
  array (
    0 => 'void',
    'shmop' => 'Shmop',
  ),
  'shmop_delete' => 
  array (
    0 => 'bool',
    'shmop' => 'Shmop',
  ),
  'shmop_open' => 
  array (
    0 => 'Shmop|false',
    'key' => 'int',
    'mode' => 'string',
    'permissions' => 'int',
    'size' => 'int',
  ),
  'shmop_read' => 
  array (
    0 => 'string',
    'shmop' => 'Shmop',
    'offset' => 'int',
    'size' => 'int',
  ),
  'shmop_size' => 
  array (
    0 => 'int',
    'shmop' => 'Shmop',
  ),
  'shmop_write' => 
  array (
    0 => 'int',
    'shmop' => 'Shmop',
    'data' => 'string',
    'offset' => 'int',
  ),
  'show_source' => 
  array (
    0 => 'bool|string',
    'filename' => 'string',
    'return=' => 'bool',
  ),
  'shuffle' => 
  array (
    0 => 'true',
    '&rw_array' => 'array<array-key, mixed>',
  ),
  'signeurlpaiement' => 
  array (
    0 => 'string',
    'clent' => 'string',
    'data' => 'string',
  ),
  'similar_text' => 
  array (
    0 => 'int',
    'string1' => 'string',
    'string2' => 'string',
    '&w_percent=' => 'float',
  ),
  'simplexml_import_dom' => 
  array (
    0 => 'SimpleXMLElement|null',
    'node' => 'DOMNode',
    'class_name=' => 'null|string',
  ),
  'simplexml_load_file' => 
  array (
    0 => 'SimpleXMLElement|false',
    'filename' => 'string',
    'class_name=' => 'null|string',
    'options=' => 'int',
    'namespace_or_prefix=' => 'string',
    'is_prefix=' => 'bool',
  ),
  'simplexml_load_string' => 
  array (
    0 => 'SimpleXMLElement|false',
    'data' => 'string',
    'class_name=' => 'null|string',
    'options=' => 'int',
    'namespace_or_prefix=' => 'string',
    'is_prefix=' => 'bool',
  ),
  'SimpleXMLElement::__construct' => 
  array (
    0 => 'void',
    'data' => 'string',
    'options=' => 'int',
    'dataIsURL=' => 'bool',
    'namespaceOrPrefix=' => 'string',
    'isPrefix=' => 'bool',
  ),
  'SimpleXMLElement::__get' => 
  array (
    0 => 'SimpleXMLElement',
    'name' => 'string',
  ),
  'SimpleXMLElement::__toString' => 
  array (
    0 => 'string',
  ),
  'SimpleXMLElement::addAttribute' => 
  array (
    0 => 'void',
    'qualifiedName' => 'string',
    'value' => 'string',
    'namespace=' => 'null|string',
  ),
  'SimpleXMLElement::addChild' => 
  array (
    0 => 'SimpleXMLElement|null',
    'qualifiedName' => 'string',
    'value=' => 'null|string',
    'namespace=' => 'null|string',
  ),
  'SimpleXMLElement::asXML' => 
  array (
    0 => 'bool|string',
    'filename=' => 'null|string',
  ),
  'SimpleXMLElement::asXML\'1' => 
  array (
    0 => 'false|string',
  ),
  'SimpleXMLElement::attributes' => 
  array (
    0 => 'SimpleXMLElement|null',
    'namespaceOrPrefix=' => 'null|string',
    'isPrefix=' => 'bool',
  ),
  'SimpleXMLElement::children' => 
  array (
    0 => 'SimpleXMLElement|null',
    'namespaceOrPrefix=' => 'null|string',
    'isPrefix=' => 'bool',
  ),
  'SimpleXMLElement::count' => 
  array (
    0 => 'int',
  ),
  'SimpleXMLElement::getDocNamespaces' => 
  array (
    0 => 'array<string, string>',
    'recursive=' => 'bool',
    'fromRoot=' => 'bool',
  ),
  'SimpleXMLElement::getName' => 
  array (
    0 => 'string',
  ),
  'SimpleXMLElement::getNamespaces' => 
  array (
    0 => 'array<string, string>',
    'recursive=' => 'bool',
  ),
  'SimpleXMLElement::offsetExists' => 
  array (
    0 => 'bool',
    'offset' => 'int|string',
  ),
  'SimpleXMLElement::offsetGet' => 
  array (
    0 => 'SimpleXMLElement',
    'offset' => 'int|string',
  ),
  'SimpleXMLElement::offsetSet' => 
  array (
    0 => 'void',
    'offset' => 'int|null|string',
    'value' => 'mixed',
  ),
  'SimpleXMLElement::offsetUnset' => 
  array (
    0 => 'void',
    'offset' => 'int|string',
  ),
  'SimpleXMLElement::registerXPathNamespace' => 
  array (
    0 => 'bool',
    'prefix' => 'string',
    'namespace' => 'string',
  ),
  'SimpleXMLElement::saveXML' => 
  array (
    0 => 'bool|string',
    'filename=' => 'null|string',
  ),
  'SimpleXMLElement::xpath' => 
  array (
    0 => 'array<array-key, SimpleXMLElement>|false|null',
    'expression' => 'string',
  ),
  'sin' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'sinh' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'sizeof' => 
  array (
    0 => 'int<0, max>',
    'value' => 'Countable|array<array-key, mixed>',
    'mode=' => 'int',
  ),
  'sleep' => 
  array (
    0 => 'int',
    'seconds' => 'int<0, max>',
  ),
  'snmp2_get' => 
  array (
    0 => 'false|string',
    'hostname' => 'string',
    'community' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'snmp2_getnext' => 
  array (
    0 => 'false|string',
    'hostname' => 'string',
    'community' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'snmp2_real_walk' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'hostname' => 'string',
    'community' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'snmp2_set' => 
  array (
    0 => 'bool',
    'hostname' => 'string',
    'community' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'type' => 'array<array-key, mixed>|string',
    'value' => 'array<array-key, mixed>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'snmp2_walk' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'hostname' => 'string',
    'community' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'snmp3_get' => 
  array (
    0 => 'false|string',
    'hostname' => 'string',
    'security_name' => 'string',
    'security_level' => 'string',
    'auth_protocol' => 'string',
    'auth_passphrase' => 'string',
    'privacy_protocol' => 'string',
    'privacy_passphrase' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'snmp3_getnext' => 
  array (
    0 => 'false|string',
    'hostname' => 'string',
    'security_name' => 'string',
    'security_level' => 'string',
    'auth_protocol' => 'string',
    'auth_passphrase' => 'string',
    'privacy_protocol' => 'string',
    'privacy_passphrase' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'snmp3_real_walk' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'hostname' => 'string',
    'security_name' => 'string',
    'security_level' => 'string',
    'auth_protocol' => 'string',
    'auth_passphrase' => 'string',
    'privacy_protocol' => 'string',
    'privacy_passphrase' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'snmp3_set' => 
  array (
    0 => 'bool',
    'hostname' => 'string',
    'security_name' => 'string',
    'security_level' => 'string',
    'auth_protocol' => 'string',
    'auth_passphrase' => 'string',
    'privacy_protocol' => 'string',
    'privacy_passphrase' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'type' => 'array<array-key, mixed>|string',
    'value' => 'array<array-key, mixed>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'snmp3_walk' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'hostname' => 'string',
    'security_name' => 'string',
    'security_level' => 'string',
    'auth_protocol' => 'string',
    'auth_passphrase' => 'string',
    'privacy_protocol' => 'string',
    'privacy_passphrase' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'SNMP::__construct' => 
  array (
    0 => 'void',
    'version' => 'int',
    'hostname' => 'string',
    'community' => 'string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'SNMP::close' => 
  array (
    0 => 'bool',
  ),
  'SNMP::get' => 
  array (
    0 => 'array<array-key, mixed>|false|string',
    'objectId' => 'array<array-key, mixed>|string',
    'preserveKeys=' => 'bool',
  ),
  'SNMP::getErrno' => 
  array (
    0 => 'int',
  ),
  'SNMP::getError' => 
  array (
    0 => 'string',
  ),
  'SNMP::getnext' => 
  array (
    0 => 'array<array-key, mixed>|false|string',
    'objectId' => 'array<array-key, mixed>|string',
  ),
  'SNMP::set' => 
  array (
    0 => 'bool',
    'objectId' => 'array<array-key, mixed>|string',
    'type' => 'array<array-key, mixed>|string',
    'value' => 'array<array-key, mixed>|string',
  ),
  'SNMP::setSecurity' => 
  array (
    0 => 'bool',
    'securityLevel' => 'string',
    'authProtocol=' => 'string',
    'authPassphrase=' => 'string',
    'privacyProtocol=' => 'string',
    'privacyPassphrase=' => 'string',
    'contextName=' => 'string',
    'contextEngineId=' => 'string',
  ),
  'SNMP::walk' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'objectId' => 'array<array-key, mixed>|string',
    'suffixAsKey=' => 'bool',
    'maxRepetitions=' => 'int',
    'nonRepeaters=' => 'int',
  ),
  'snmp_get_quick_print' => 
  array (
    0 => 'bool',
  ),
  'snmp_get_valueretrieval' => 
  array (
    0 => 'int',
  ),
  'snmp_read_mib' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'snmp_set_enum_print' => 
  array (
    0 => 'true',
    'enable' => 'bool',
  ),
  'snmp_set_oid_numeric_print' => 
  array (
    0 => 'true',
    'format' => 'int',
  ),
  'snmp_set_oid_output_format' => 
  array (
    0 => 'true',
    'format' => 'int',
  ),
  'snmp_set_quick_print' => 
  array (
    0 => 'bool',
    'enable' => 'bool',
  ),
  'snmp_set_valueretrieval' => 
  array (
    0 => 'true',
    'method' => 'int',
  ),
  'snmpget' => 
  array (
    0 => 'false|string',
    'hostname' => 'string',
    'community' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'snmpgetnext' => 
  array (
    0 => 'false|string',
    'hostname' => 'string',
    'community' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'snmprealwalk' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'hostname' => 'string',
    'community' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'snmpset' => 
  array (
    0 => 'bool',
    'hostname' => 'string',
    'community' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'type' => 'array<array-key, string>|string',
    'value' => 'array<array-key, string>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'snmpwalk' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'hostname' => 'string',
    'community' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'snmpwalkoid' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'hostname' => 'string',
    'community' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'SoapClient::__call' => 
  array (
    0 => 'mixed',
    'function_name' => 'string',
    'arguments' => 'array<array-key, mixed>',
  ),
  'SoapClient::__construct' => 
  array (
    0 => 'void',
    'wsdl' => 'mixed',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'SoapClient::__doRequest' => 
  array (
    0 => 'null|string',
    'request' => 'string',
    'location' => 'string',
    'action' => 'string',
    'version' => 'int',
    'one_way=' => 'bool',
  ),
  'SoapClient::__getCookies' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SoapClient::__getFunctions' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'SoapClient::__getLastRequest' => 
  array (
    0 => 'null|string',
  ),
  'SoapClient::__getLastRequestHeaders' => 
  array (
    0 => 'null|string',
  ),
  'SoapClient::__getLastResponse' => 
  array (
    0 => 'null|string',
  ),
  'SoapClient::__getLastResponseHeaders' => 
  array (
    0 => 'null|string',
  ),
  'SoapClient::__getTypes' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'SoapClient::__setCookie' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'value=' => 'string',
  ),
  'SoapClient::__setLocation' => 
  array (
    0 => 'string',
    'new_location=' => 'string',
  ),
  'SoapClient::__setSoapHeaders' => 
  array (
    0 => 'bool',
    'soapheaders=' => 'mixed',
  ),
  'SoapClient::__soapCall' => 
  array (
    0 => 'mixed',
    'function_name' => 'string',
    'arguments' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
    'input_headers=' => 'SoapHeader|array<array-key, mixed>',
    '&w_output_headers=' => 'array<array-key, mixed>',
  ),
  'SoapClient::SoapClient' => 
  array (
    0 => 'object',
    'wsdl' => 'mixed',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'SoapFault::__clone' => 
  array (
    0 => 'void',
  ),
  'SoapFault::__construct' => 
  array (
    0 => 'void',
    'code' => 'array<array-key, mixed>|null|string',
    'string' => 'string',
    'actor=' => 'null|string',
    'details=' => 'mixed|null',
    'name=' => 'null|string',
    'headerFault=' => 'mixed|null',
  ),
  'SoapFault::__toString' => 
  array (
    0 => 'string',
  ),
  'SoapFault::__wakeup' => 
  array (
    0 => 'void',
  ),
  'SoapFault::getCode' => 
  array (
    0 => 'int',
  ),
  'SoapFault::getFile' => 
  array (
    0 => 'string',
  ),
  'SoapFault::getLine' => 
  array (
    0 => 'int',
  ),
  'SoapFault::getMessage' => 
  array (
    0 => 'string',
  ),
  'SoapFault::getPrevious' => 
  array (
    0 => 'Exception|Throwable|null',
  ),
  'SoapFault::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'SoapFault::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'SoapFault::SoapFault' => 
  array (
    0 => 'object',
    'faultcode' => 'string',
    'faultstring' => 'string',
    'faultactor=' => 'null|string',
    'detail=' => 'mixed|null',
    'faultname=' => 'null|string',
    'headerfault=' => 'mixed|null',
  ),
  'SoapHeader::__construct' => 
  array (
    0 => 'void',
    'namespace' => 'string',
    'name' => 'string',
    'data=' => 'mixed',
    'mustunderstand=' => 'bool',
    'actor=' => 'string',
  ),
  'SoapHeader::SoapHeader' => 
  array (
    0 => 'object',
    'namespace' => 'string',
    'name' => 'string',
    'data=' => 'mixed',
    'mustunderstand=' => 'bool',
    'actor=' => 'string',
  ),
  'SoapParam::__construct' => 
  array (
    0 => 'void',
    'data' => 'mixed',
    'name' => 'string',
  ),
  'SoapParam::SoapParam' => 
  array (
    0 => 'object',
    'data' => 'mixed',
    'name' => 'string',
  ),
  'SoapServer::__construct' => 
  array (
    0 => 'void',
    'wsdl' => 'null|string',
    'options=' => 'array<array-key, mixed>',
  ),
  'SoapServer::addFunction' => 
  array (
    0 => 'void',
    'functions' => 'mixed',
  ),
  'SoapServer::addSoapHeader' => 
  array (
    0 => 'void',
    'object' => 'SoapHeader',
  ),
  'SoapServer::fault' => 
  array (
    0 => 'void',
    'code' => 'string',
    'string' => 'string',
    'actor=' => 'string',
    'details=' => 'string',
    'name=' => 'string',
  ),
  'SoapServer::getFunctions' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SoapServer::handle' => 
  array (
    0 => 'void',
    'soap_request=' => 'string',
  ),
  'SoapServer::setClass' => 
  array (
    0 => 'void',
    'class_name' => 'string',
    '...args=' => 'mixed',
  ),
  'SoapServer::setObject' => 
  array (
    0 => 'void',
    'object' => 'object',
  ),
  'SoapServer::setPersistence' => 
  array (
    0 => 'void',
    'mode' => 'int',
  ),
  'SoapServer::SoapServer' => 
  array (
    0 => 'object',
    'wsdl' => 'null|string',
    'options=' => 'array<array-key, mixed>',
  ),
  'SoapVar::__construct' => 
  array (
    0 => 'void',
    'data' => 'mixed',
    'encoding' => 'int',
    'type_name=' => 'null|string',
    'type_namespace=' => 'null|string',
    'node_name=' => 'null|string',
    'node_namespace=' => 'null|string',
  ),
  'SoapVar::SoapVar' => 
  array (
    0 => 'object',
    'data' => 'mixed',
    'encoding' => 'int',
    'type_name=' => 'null|string',
    'type_namespace=' => 'null|string',
    'node_name=' => 'null|string',
    'node_namespace=' => 'null|string',
  ),
  'socket_accept' => 
  array (
    0 => 'Socket|false',
    'socket' => 'Socket',
  ),
  'socket_addrinfo_bind' => 
  array (
    0 => 'Socket|false',
    'address' => 'AddressInfo',
  ),
  'socket_addrinfo_connect' => 
  array (
    0 => 'Socket|false',
    'address' => 'AddressInfo',
  ),
  'socket_addrinfo_explain' => 
  array (
    0 => 'array<array-key, mixed>',
    'address' => 'AddressInfo',
  ),
  'socket_addrinfo_lookup' => 
  array (
    0 => 'array<array-key, AddressInfo>|false',
    'host' => 'string',
    'service=' => 'null|string',
    'hints=' => 'array<array-key, mixed>',
  ),
  'socket_bind' => 
  array (
    0 => 'bool',
    'socket' => 'Socket',
    'address' => 'string',
    'port=' => 'int',
  ),
  'socket_clear_error' => 
  array (
    0 => 'void',
    'socket=' => 'Socket|null',
  ),
  'socket_close' => 
  array (
    0 => 'void',
    'socket' => 'Socket',
  ),
  'socket_cmsg_space' => 
  array (
    0 => 'int|null',
    'level' => 'int',
    'type' => 'int',
    'num=' => 'int',
  ),
  'socket_connect' => 
  array (
    0 => 'bool',
    'socket' => 'Socket',
    'address' => 'string',
    'port=' => 'int|null',
  ),
  'socket_create' => 
  array (
    0 => 'Socket|false',
    'domain' => 'int',
    'type' => 'int',
    'protocol' => 'int',
  ),
  'socket_create_listen' => 
  array (
    0 => 'Socket|false',
    'port' => 'int',
    'backlog=' => 'int',
  ),
  'socket_create_pair' => 
  array (
    0 => 'bool',
    'domain' => 'int',
    'type' => 'int',
    'protocol' => 'int',
    '&w_pair' => 'array<array-key, Socket>',
  ),
  'socket_export_stream' => 
  array (
    0 => 'false|resource',
    'socket' => 'Socket',
  ),
  'socket_get_option' => 
  array (
    0 => 'array<array-key, mixed>|false|int',
    'socket' => 'Socket',
    'level' => 'int',
    'option' => 'int',
  ),
  'socket_get_status' => 
  array (
    0 => 'array<array-key, mixed>',
    'stream' => 'Socket',
  ),
  'socket_getopt' => 
  array (
    0 => 'array<array-key, mixed>|false|int',
    'socket' => 'Socket',
    'level' => 'int',
    'option' => 'int',
  ),
  'socket_getpeername' => 
  array (
    0 => 'bool',
    'socket' => 'Socket',
    '&w_address' => 'string',
    '&w_port=' => 'int',
  ),
  'socket_getsockname' => 
  array (
    0 => 'bool',
    'socket' => 'Socket',
    '&w_address' => 'string',
    '&w_port=' => 'int',
  ),
  'socket_import_stream' => 
  array (
    0 => 'Socket|false',
    'stream' => 'resource',
  ),
  'socket_last_error' => 
  array (
    0 => 'int',
    'socket=' => 'Socket|null',
  ),
  'socket_listen' => 
  array (
    0 => 'bool',
    'socket' => 'Socket',
    'backlog=' => 'int',
  ),
  'socket_read' => 
  array (
    0 => 'false|string',
    'socket' => 'Socket',
    'length' => 'int',
    'mode=' => 'int',
  ),
  'socket_recv' => 
  array (
    0 => 'false|int',
    'socket' => 'Socket',
    '&w_data' => 'string',
    'length' => 'int',
    'flags' => 'int',
  ),
  'socket_recvfrom' => 
  array (
    0 => 'false|int',
    'socket' => 'Socket',
    '&w_data' => 'string',
    'length' => 'int',
    'flags' => 'int',
    '&w_address' => 'string',
    '&w_port=' => 'int',
  ),
  'socket_recvmsg' => 
  array (
    0 => 'false|int',
    'socket' => 'Socket',
    '&w_message' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'socket_select' => 
  array (
    0 => 'false|int',
    '&rw_read' => 'array<array-key, Socket>|null',
    '&rw_write' => 'array<array-key, Socket>|null',
    '&rw_except' => 'array<array-key, Socket>|null',
    'seconds' => 'int|null',
    'microseconds=' => 'int',
  ),
  'socket_send' => 
  array (
    0 => 'false|int',
    'socket' => 'Socket',
    'data' => 'string',
    'length' => 'int',
    'flags' => 'int',
  ),
  'socket_sendmsg' => 
  array (
    0 => 'false|int',
    'socket' => 'Socket',
    'message' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'socket_sendto' => 
  array (
    0 => 'false|int',
    'socket' => 'Socket',
    'data' => 'string',
    'length' => 'int',
    'flags' => 'int',
    'address' => 'string',
    'port=' => 'int|null',
  ),
  'socket_set_block' => 
  array (
    0 => 'bool',
    'socket' => 'Socket',
  ),
  'socket_set_blocking' => 
  array (
    0 => 'bool',
    'stream' => 'Socket',
    'enable' => 'bool',
  ),
  'socket_set_nonblock' => 
  array (
    0 => 'bool',
    'socket' => 'Socket',
  ),
  'socket_set_option' => 
  array (
    0 => 'bool',
    'socket' => 'Socket',
    'level' => 'int',
    'option' => 'int',
    'value' => 'array<array-key, mixed>|int|string',
  ),
  'socket_set_timeout' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
    'seconds' => 'int',
    'microseconds=' => 'int',
  ),
  'socket_setopt' => 
  array (
    0 => 'bool',
    'socket' => 'Socket',
    'level' => 'int',
    'option' => 'int',
    'value' => 'array<array-key, mixed>|int|string',
  ),
  'socket_shutdown' => 
  array (
    0 => 'bool',
    'socket' => 'Socket',
    'mode=' => 'int',
  ),
  'socket_strerror' => 
  array (
    0 => 'string',
    'error_code' => 'int',
  ),
  'socket_write' => 
  array (
    0 => 'false|int',
    'socket' => 'Socket',
    'data' => 'string',
    'length=' => 'int|null',
  ),
  'socket_wsaprotocol_info_export' => 
  array (
    0 => 'false|string',
    'socket' => 'Socket',
    'process_id' => 'int',
  ),
  'socket_wsaprotocol_info_import' => 
  array (
    0 => 'Socket|false',
    'info_id' => 'string',
  ),
  'socket_wsaprotocol_info_release' => 
  array (
    0 => 'bool',
    'info_id' => 'string',
  ),
  'sodium_add' => 
  array (
    0 => 'void',
    '&rw_string1' => 'string',
    'string2' => 'string',
  ),
  'sodium_base642bin' => 
  array (
    0 => 'string',
    'string' => 'string',
    'id' => 'int',
    'ignore=' => 'string',
  ),
  'sodium_bin2base64' => 
  array (
    0 => 'string',
    'string' => 'string',
    'id' => 'int',
  ),
  'sodium_bin2hex' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'sodium_compare' => 
  array (
    0 => 'int',
    'string1' => 'string',
    'string2' => 'string',
  ),
  'sodium_crypto_aead_aes256gcm_decrypt' => 
  array (
    0 => 'false|string',
    'ciphertext' => 'string',
    'additional_data' => 'string',
    'nonce' => 'string',
    'key' => 'string',
  ),
  'sodium_crypto_aead_aes256gcm_encrypt' => 
  array (
    0 => 'string',
    'message' => 'string',
    'additional_data' => 'string',
    'nonce' => 'string',
    'key' => 'string',
  ),
  'sodium_crypto_aead_aes256gcm_is_available' => 
  array (
    0 => 'bool',
  ),
  'sodium_crypto_aead_aes256gcm_keygen' => 
  array (
    0 => 'non-empty-string',
  ),
  'sodium_crypto_aead_chacha20poly1305_decrypt' => 
  array (
    0 => 'false|string',
    'ciphertext' => 'string',
    'additional_data' => 'string',
    'nonce' => 'string',
    'key' => 'string',
  ),
  'sodium_crypto_aead_chacha20poly1305_encrypt' => 
  array (
    0 => 'string',
    'message' => 'string',
    'additional_data' => 'string',
    'nonce' => 'string',
    'key' => 'string',
  ),
  'sodium_crypto_aead_chacha20poly1305_ietf_decrypt' => 
  array (
    0 => 'false|string',
    'ciphertext' => 'string',
    'additional_data' => 'string',
    'nonce' => 'string',
    'key' => 'string',
  ),
  'sodium_crypto_aead_chacha20poly1305_ietf_encrypt' => 
  array (
    0 => 'string',
    'message' => 'string',
    'additional_data' => 'string',
    'nonce' => 'string',
    'key' => 'string',
  ),
  'sodium_crypto_aead_chacha20poly1305_ietf_keygen' => 
  array (
    0 => 'non-empty-string',
  ),
  'sodium_crypto_aead_chacha20poly1305_keygen' => 
  array (
    0 => 'non-empty-string',
  ),
  'sodium_crypto_aead_xchacha20poly1305_ietf_decrypt' => 
  array (
    0 => 'false|string',
    'ciphertext' => 'string',
    'additional_data' => 'string',
    'nonce' => 'string',
    'key' => 'string',
  ),
  'sodium_crypto_aead_xchacha20poly1305_ietf_encrypt' => 
  array (
    0 => 'string',
    'message' => 'string',
    'additional_data' => 'string',
    'nonce' => 'string',
    'key' => 'string',
  ),
  'sodium_crypto_aead_xchacha20poly1305_ietf_keygen' => 
  array (
    0 => 'non-empty-string',
  ),
  'sodium_crypto_auth' => 
  array (
    0 => 'string',
    'message' => 'string',
    'key' => 'string',
  ),
  'sodium_crypto_auth_keygen' => 
  array (
    0 => 'non-empty-string',
  ),
  'sodium_crypto_auth_verify' => 
  array (
    0 => 'bool',
    'mac' => 'string',
    'message' => 'string',
    'key' => 'string',
  ),
  'sodium_crypto_box' => 
  array (
    0 => 'string',
    'message' => 'string',
    'nonce' => 'string',
    'key_pair' => 'string',
  ),
  'sodium_crypto_box_keypair' => 
  array (
    0 => 'string',
  ),
  'sodium_crypto_box_keypair_from_secretkey_and_publickey' => 
  array (
    0 => 'string',
    'secret_key' => 'string',
    'public_key' => 'string',
  ),
  'sodium_crypto_box_open' => 
  array (
    0 => 'false|string',
    'ciphertext' => 'string',
    'nonce' => 'string',
    'key_pair' => 'string',
  ),
  'sodium_crypto_box_publickey' => 
  array (
    0 => 'string',
    'key_pair' => 'string',
  ),
  'sodium_crypto_box_publickey_from_secretkey' => 
  array (
    0 => 'string',
    'secret_key' => 'string',
  ),
  'sodium_crypto_box_seal' => 
  array (
    0 => 'string',
    'message' => 'string',
    'public_key' => 'string',
  ),
  'sodium_crypto_box_seal_open' => 
  array (
    0 => 'false|string',
    'ciphertext' => 'string',
    'key_pair' => 'string',
  ),
  'sodium_crypto_box_secretkey' => 
  array (
    0 => 'string',
    'key_pair' => 'string',
  ),
  'sodium_crypto_box_seed_keypair' => 
  array (
    0 => 'string',
    'seed' => 'string',
  ),
  'sodium_crypto_generichash' => 
  array (
    0 => 'string',
    'message' => 'string',
    'key=' => 'string',
    'length=' => 'int',
  ),
  'sodium_crypto_generichash_final' => 
  array (
    0 => 'string',
    '&state' => 'string',
    'length=' => 'int',
  ),
  'sodium_crypto_generichash_init' => 
  array (
    0 => 'string',
    'key=' => 'string',
    'length=' => 'int',
  ),
  'sodium_crypto_generichash_keygen' => 
  array (
    0 => 'non-empty-string',
  ),
  'sodium_crypto_generichash_update' => 
  array (
    0 => 'true',
    '&rw_state' => 'string',
    'message' => 'string',
  ),
  'sodium_crypto_kdf_derive_from_key' => 
  array (
    0 => 'string',
    'subkey_length' => 'int',
    'subkey_id' => 'int',
    'context' => 'string',
    'key' => 'string',
  ),
  'sodium_crypto_kdf_keygen' => 
  array (
    0 => 'non-empty-string',
  ),
  'sodium_crypto_kx_client_session_keys' => 
  array (
    0 => 'array<int, string>',
    'client_key_pair' => 'string',
    'server_key' => 'string',
  ),
  'sodium_crypto_kx_keypair' => 
  array (
    0 => 'string',
  ),
  'sodium_crypto_kx_publickey' => 
  array (
    0 => 'string',
    'key_pair' => 'string',
  ),
  'sodium_crypto_kx_secretkey' => 
  array (
    0 => 'string',
    'key_pair' => 'string',
  ),
  'sodium_crypto_kx_seed_keypair' => 
  array (
    0 => 'string',
    'seed' => 'string',
  ),
  'sodium_crypto_kx_server_session_keys' => 
  array (
    0 => 'array<int, string>',
    'server_key_pair' => 'string',
    'client_key' => 'string',
  ),
  'sodium_crypto_pwhash' => 
  array (
    0 => 'string',
    'length' => 'int',
    'password' => 'string',
    'salt' => 'string',
    'opslimit' => 'int',
    'memlimit' => 'int',
    'algo=' => 'int',
  ),
  'sodium_crypto_pwhash_scryptsalsa208sha256' => 
  array (
    0 => 'string',
    'length' => 'int',
    'password' => 'string',
    'salt' => 'string',
    'opslimit' => 'int',
    'memlimit' => 'int',
  ),
  'sodium_crypto_pwhash_scryptsalsa208sha256_str' => 
  array (
    0 => 'string',
    'password' => 'string',
    'opslimit' => 'int',
    'memlimit' => 'int',
  ),
  'sodium_crypto_pwhash_scryptsalsa208sha256_str_verify' => 
  array (
    0 => 'bool',
    'hash' => 'string',
    'password' => 'string',
  ),
  'sodium_crypto_pwhash_str' => 
  array (
    0 => 'string',
    'password' => 'string',
    'opslimit' => 'int',
    'memlimit' => 'int',
  ),
  'sodium_crypto_pwhash_str_needs_rehash' => 
  array (
    0 => 'bool',
    'password' => 'string',
    'opslimit' => 'int',
    'memlimit' => 'int',
  ),
  'sodium_crypto_pwhash_str_verify' => 
  array (
    0 => 'bool',
    'hash' => 'string',
    'password' => 'string',
  ),
  'sodium_crypto_scalarmult' => 
  array (
    0 => 'string',
    'n' => 'string',
    'p' => 'string',
  ),
  'sodium_crypto_scalarmult_base' => 
  array (
    0 => 'string',
    'secret_key' => 'string',
  ),
  'sodium_crypto_secretbox' => 
  array (
    0 => 'string',
    'message' => 'string',
    'nonce' => 'string',
    'key' => 'string',
  ),
  'sodium_crypto_secretbox_keygen' => 
  array (
    0 => 'non-empty-string',
  ),
  'sodium_crypto_secretbox_open' => 
  array (
    0 => 'false|string',
    'ciphertext' => 'string',
    'nonce' => 'string',
    'key' => 'string',
  ),
  'sodium_crypto_secretstream_xchacha20poly1305_init_pull' => 
  array (
    0 => 'string',
    'header' => 'string',
    'key' => 'string',
  ),
  'sodium_crypto_secretstream_xchacha20poly1305_init_push' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
  ),
  'sodium_crypto_secretstream_xchacha20poly1305_keygen' => 
  array (
    0 => 'non-empty-string',
  ),
  'sodium_crypto_secretstream_xchacha20poly1305_pull' => 
  array (
    0 => 'array<array-key, mixed>|false',
    '&r_state' => 'string',
    'ciphertext' => 'string',
    'additional_data=' => 'string',
  ),
  'sodium_crypto_secretstream_xchacha20poly1305_push' => 
  array (
    0 => 'string',
    '&w_state' => 'string',
    'message' => 'string',
    'additional_data=' => 'string',
    'tag=' => 'int',
  ),
  'sodium_crypto_secretstream_xchacha20poly1305_rekey' => 
  array (
    0 => 'void',
    '&w_state' => 'string',
  ),
  'sodium_crypto_shorthash' => 
  array (
    0 => 'string',
    'message' => 'string',
    'key' => 'string',
  ),
  'sodium_crypto_shorthash_keygen' => 
  array (
    0 => 'non-empty-string',
  ),
  'sodium_crypto_sign' => 
  array (
    0 => 'string',
    'message' => 'string',
    'secret_key' => 'string',
  ),
  'sodium_crypto_sign_detached' => 
  array (
    0 => 'string',
    'message' => 'string',
    'secret_key' => 'string',
  ),
  'sodium_crypto_sign_ed25519_pk_to_curve25519' => 
  array (
    0 => 'string',
    'public_key' => 'string',
  ),
  'sodium_crypto_sign_ed25519_sk_to_curve25519' => 
  array (
    0 => 'string',
    'secret_key' => 'string',
  ),
  'sodium_crypto_sign_keypair' => 
  array (
    0 => 'string',
  ),
  'sodium_crypto_sign_keypair_from_secretkey_and_publickey' => 
  array (
    0 => 'string',
    'secret_key' => 'string',
    'public_key' => 'string',
  ),
  'sodium_crypto_sign_open' => 
  array (
    0 => 'false|string',
    'signed_message' => 'string',
    'public_key' => 'string',
  ),
  'sodium_crypto_sign_publickey' => 
  array (
    0 => 'string',
    'key_pair' => 'string',
  ),
  'sodium_crypto_sign_publickey_from_secretkey' => 
  array (
    0 => 'string',
    'secret_key' => 'string',
  ),
  'sodium_crypto_sign_secretkey' => 
  array (
    0 => 'string',
    'key_pair' => 'string',
  ),
  'sodium_crypto_sign_seed_keypair' => 
  array (
    0 => 'string',
    'seed' => 'string',
  ),
  'sodium_crypto_sign_verify_detached' => 
  array (
    0 => 'bool',
    'signature' => 'string',
    'message' => 'string',
    'public_key' => 'string',
  ),
  'sodium_crypto_stream' => 
  array (
    0 => 'string',
    'length' => 'int',
    'nonce' => 'string',
    'key' => 'string',
  ),
  'sodium_crypto_stream_keygen' => 
  array (
    0 => 'non-empty-string',
  ),
  'sodium_crypto_stream_xor' => 
  array (
    0 => 'string',
    'message' => 'string',
    'nonce' => 'string',
    'key' => 'string',
  ),
  'sodium_crypto_stream_xchacha20' => 
  array (
    0 => 'non-empty-string',
    'length' => 'int<1, max>',
    'nonce' => 'non-empty-string',
    'key' => 'non-empty-string',
  ),
  'sodium_crypto_stream_xchacha20_keygen' => 
  array (
    0 => 'non-empty-string',
  ),
  'sodium_crypto_stream_xchacha20_xor' => 
  array (
    0 => 'string',
    'message' => 'string',
    'nonce' => 'non-empty-string',
    'key' => 'non-empty-string',
  ),
  'sodium_crypto_stream_xchacha20_xor_ic' => 
  array (
    0 => 'string',
    'message' => 'string',
    'nonce' => 'non-empty-string',
    'counter' => 'int',
    'key' => 'non-empty-string',
  ),
  'sodium_hex2bin' => 
  array (
    0 => 'string',
    'string' => 'string',
    'ignore=' => 'string',
  ),
  'sodium_increment' => 
  array (
    0 => 'void',
    '&rw_string' => 'string',
  ),
  'sodium_memcmp' => 
  array (
    0 => 'int',
    'string1' => 'string',
    'string2' => 'string',
  ),
  'sodium_memzero' => 
  array (
    0 => 'void',
    '&w_string' => 'string',
  ),
  'sodium_pad' => 
  array (
    0 => 'string',
    'string' => 'string',
    'block_size' => 'int',
  ),
  'sodium_unpad' => 
  array (
    0 => 'string',
    'string' => 'string',
    'block_size' => 'int',
  ),
  'solid_fetch_prev' => 
  array (
    0 => 'bool',
    'result_id' => 'mixed',
  ),
  'solr_get_version' => 
  array (
    0 => 'false|string',
  ),
  'SolrClient::__construct' => 
  array (
    0 => 'void',
    'clientOptions' => 'array<array-key, mixed>',
  ),
  'SolrClient::__destruct' => 
  array (
    0 => 'void',
  ),
  'SolrClient::addDocument' => 
  array (
    0 => 'SolrUpdateResponse',
    'doc' => 'SolrInputDocument',
    'allowdups=' => 'bool',
    'commitwithin=' => 'int',
  ),
  'SolrClient::addDocuments' => 
  array (
    0 => 'SolrUpdateResponse',
    'docs' => 'array<array-key, mixed>',
    'allowdups=' => 'bool',
    'commitwithin=' => 'int',
  ),
  'SolrClient::commit' => 
  array (
    0 => 'SolrUpdateResponse',
    'maxsegments=' => 'int',
    'waitflush=' => 'bool',
    'waitsearcher=' => 'bool',
  ),
  'SolrClient::deleteById' => 
  array (
    0 => 'SolrUpdateResponse',
    'id' => 'string',
  ),
  'SolrClient::deleteByIds' => 
  array (
    0 => 'SolrUpdateResponse',
    'ids' => 'array<array-key, mixed>',
  ),
  'SolrClient::deleteByQueries' => 
  array (
    0 => 'SolrUpdateResponse',
    'queries' => 'array<array-key, mixed>',
  ),
  'SolrClient::deleteByQuery' => 
  array (
    0 => 'SolrUpdateResponse',
    'query' => 'string',
  ),
  'SolrClient::getById' => 
  array (
    0 => 'SolrQueryResponse',
    'id' => 'string',
  ),
  'SolrClient::getByIds' => 
  array (
    0 => 'SolrQueryResponse',
    'ids' => 'array<array-key, mixed>',
  ),
  'SolrClient::getDebug' => 
  array (
    0 => 'string',
  ),
  'SolrClient::getOptions' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrClient::optimize' => 
  array (
    0 => 'SolrUpdateResponse',
    'maxsegments=' => 'int',
    'waitflush=' => 'bool',
    'waitsearcher=' => 'bool',
  ),
  'SolrClient::ping' => 
  array (
    0 => 'SolrPingResponse',
  ),
  'SolrClient::query' => 
  array (
    0 => 'SolrQueryResponse',
    'query' => 'SolrParams',
  ),
  'SolrClient::request' => 
  array (
    0 => 'SolrUpdateResponse',
    'raw_request' => 'string',
  ),
  'SolrClient::rollback' => 
  array (
    0 => 'SolrUpdateResponse',
  ),
  'SolrClient::setResponseWriter' => 
  array (
    0 => 'void',
    'responsewriter' => 'string',
  ),
  'SolrClient::setServlet' => 
  array (
    0 => 'bool',
    'type' => 'int',
    'value' => 'string',
  ),
  'SolrClient::system' => 
  array (
    0 => 'SolrGenericResponse',
  ),
  'SolrClient::threads' => 
  array (
    0 => 'SolrGenericResponse',
  ),
  'SolrClientException::__clone' => 
  array (
    0 => 'void',
  ),
  'SolrClientException::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Exception|Throwable|null',
  ),
  'SolrClientException::__toString' => 
  array (
    0 => 'string',
  ),
  'SolrClientException::__wakeup' => 
  array (
    0 => 'void',
  ),
  'SolrClientException::getCode' => 
  array (
    0 => 'int',
  ),
  'SolrClientException::getFile' => 
  array (
    0 => 'string',
  ),
  'SolrClientException::getInternalInfo' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrClientException::getLine' => 
  array (
    0 => 'int',
  ),
  'SolrClientException::getMessage' => 
  array (
    0 => 'string',
  ),
  'SolrClientException::getPrevious' => 
  array (
    0 => 'Exception|Throwable|null',
  ),
  'SolrClientException::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'SolrClientException::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'SolrCollapseFunction::__construct' => 
  array (
    0 => 'void',
    'field' => 'string',
  ),
  'SolrCollapseFunction::__toString' => 
  array (
    0 => 'string',
  ),
  'SolrCollapseFunction::getField' => 
  array (
    0 => 'string',
  ),
  'SolrCollapseFunction::getHint' => 
  array (
    0 => 'string',
  ),
  'SolrCollapseFunction::getMax' => 
  array (
    0 => 'string',
  ),
  'SolrCollapseFunction::getMin' => 
  array (
    0 => 'string',
  ),
  'SolrCollapseFunction::getNullPolicy' => 
  array (
    0 => 'string',
  ),
  'SolrCollapseFunction::getSize' => 
  array (
    0 => 'int',
  ),
  'SolrCollapseFunction::setField' => 
  array (
    0 => 'SolrCollapseFunction',
    'fieldName' => 'string',
  ),
  'SolrCollapseFunction::setHint' => 
  array (
    0 => 'SolrCollapseFunction',
    'hint' => 'string',
  ),
  'SolrCollapseFunction::setMax' => 
  array (
    0 => 'SolrCollapseFunction',
    'max' => 'string',
  ),
  'SolrCollapseFunction::setMin' => 
  array (
    0 => 'SolrCollapseFunction',
    'min' => 'string',
  ),
  'SolrCollapseFunction::setNullPolicy' => 
  array (
    0 => 'SolrCollapseFunction',
    'nullPolicy' => 'string',
  ),
  'SolrCollapseFunction::setSize' => 
  array (
    0 => 'SolrCollapseFunction',
    'size' => 'int',
  ),
  'SolrDisMaxQuery::__construct' => 
  array (
    0 => 'void',
    'q=' => 'string',
  ),
  'SolrDisMaxQuery::__destruct' => 
  array (
    0 => 'void',
  ),
  'SolrDisMaxQuery::add' => 
  array (
    0 => 'SolrParams',
    'name' => 'string',
    'value' => 'string',
  ),
  'SolrDisMaxQuery::addBigramPhraseField' => 
  array (
    0 => 'SolrDisMaxQuery',
    'field' => 'string',
    'boost' => 'string',
    'slop=' => 'string',
  ),
  'SolrDisMaxQuery::addBoostQuery' => 
  array (
    0 => 'SolrDisMaxQuery',
    'field' => 'string',
    'value' => 'string',
    'boost=' => 'string',
  ),
  'SolrDisMaxQuery::addExpandFilterQuery' => 
  array (
    0 => 'SolrQuery',
    'fq' => 'string',
  ),
  'SolrDisMaxQuery::addExpandSortField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
    'order' => 'string',
  ),
  'SolrDisMaxQuery::addFacetDateField' => 
  array (
    0 => 'SolrQuery',
    'dateField' => 'string',
  ),
  'SolrDisMaxQuery::addFacetDateOther' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::addFacetField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'SolrDisMaxQuery::addFacetQuery' => 
  array (
    0 => 'SolrQuery',
    'facetQuery' => 'string',
  ),
  'SolrDisMaxQuery::addField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'SolrDisMaxQuery::addFilterQuery' => 
  array (
    0 => 'SolrQuery',
    'fq' => 'string',
  ),
  'SolrDisMaxQuery::addGroupField' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'SolrDisMaxQuery::addGroupFunction' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'SolrDisMaxQuery::addGroupQuery' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'SolrDisMaxQuery::addGroupSortField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
    'order' => 'int',
  ),
  'SolrDisMaxQuery::addHighlightField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'SolrDisMaxQuery::addMltField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'SolrDisMaxQuery::addMltQueryField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
    'boost' => 'float',
  ),
  'SolrDisMaxQuery::addParam' => 
  array (
    0 => 'SolrParams',
    'name' => 'string',
    'value' => 'string',
  ),
  'SolrDisMaxQuery::addPhraseField' => 
  array (
    0 => 'SolrDisMaxQuery',
    'field' => 'string',
    'boost' => 'string',
    'slop=' => 'string',
  ),
  'SolrDisMaxQuery::addQueryField' => 
  array (
    0 => 'SolrDisMaxQuery',
    'field' => 'string',
    'boost=' => 'string',
  ),
  'SolrDisMaxQuery::addSortField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
    'order=' => 'int',
  ),
  'SolrDisMaxQuery::addStatsFacet' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'SolrDisMaxQuery::addStatsField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'SolrDisMaxQuery::addTrigramPhraseField' => 
  array (
    0 => 'SolrDisMaxQuery',
    'field' => 'string',
    'boost' => 'string',
    'slop=' => 'string',
  ),
  'SolrDisMaxQuery::addUserField' => 
  array (
    0 => 'SolrDisMaxQuery',
    'field' => 'string',
  ),
  'SolrDisMaxQuery::collapse' => 
  array (
    0 => 'SolrQuery',
    'collapseFunction' => 'SolrCollapseFunction',
  ),
  'SolrDisMaxQuery::get' => 
  array (
    0 => 'mixed',
    'param_name' => 'string',
  ),
  'SolrDisMaxQuery::getExpand' => 
  array (
    0 => 'bool',
  ),
  'SolrDisMaxQuery::getExpandFilterQueries' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrDisMaxQuery::getExpandQuery' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrDisMaxQuery::getExpandRows' => 
  array (
    0 => 'int',
  ),
  'SolrDisMaxQuery::getExpandSortFields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrDisMaxQuery::getFacet' => 
  array (
    0 => 'bool',
  ),
  'SolrDisMaxQuery::getFacetDateEnd' => 
  array (
    0 => 'string',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::getFacetDateFields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrDisMaxQuery::getFacetDateGap' => 
  array (
    0 => 'string',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::getFacetDateHardEnd' => 
  array (
    0 => 'string',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::getFacetDateOther' => 
  array (
    0 => 'string',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::getFacetDateStart' => 
  array (
    0 => 'string',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::getFacetFields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrDisMaxQuery::getFacetLimit' => 
  array (
    0 => 'int',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::getFacetMethod' => 
  array (
    0 => 'string',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::getFacetMinCount' => 
  array (
    0 => 'int',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::getFacetMissing' => 
  array (
    0 => 'string',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::getFacetOffset' => 
  array (
    0 => 'int',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::getFacetPrefix' => 
  array (
    0 => 'string',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::getFacetQueries' => 
  array (
    0 => 'string',
  ),
  'SolrDisMaxQuery::getFacetSort' => 
  array (
    0 => 'int',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::getFields' => 
  array (
    0 => 'string',
  ),
  'SolrDisMaxQuery::getFilterQueries' => 
  array (
    0 => 'string',
  ),
  'SolrDisMaxQuery::getGroup' => 
  array (
    0 => 'bool',
  ),
  'SolrDisMaxQuery::getGroupCachePercent' => 
  array (
    0 => 'int',
  ),
  'SolrDisMaxQuery::getGroupFacet' => 
  array (
    0 => 'bool',
  ),
  'SolrDisMaxQuery::getGroupFields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrDisMaxQuery::getGroupFormat' => 
  array (
    0 => 'string',
  ),
  'SolrDisMaxQuery::getGroupFunctions' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrDisMaxQuery::getGroupLimit' => 
  array (
    0 => 'int',
  ),
  'SolrDisMaxQuery::getGroupMain' => 
  array (
    0 => 'bool',
  ),
  'SolrDisMaxQuery::getGroupNGroups' => 
  array (
    0 => 'bool',
  ),
  'SolrDisMaxQuery::getGroupOffset' => 
  array (
    0 => 'bool',
  ),
  'SolrDisMaxQuery::getGroupQueries' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrDisMaxQuery::getGroupSortFields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrDisMaxQuery::getGroupTruncate' => 
  array (
    0 => 'bool',
  ),
  'SolrDisMaxQuery::getHighlight' => 
  array (
    0 => 'bool',
  ),
  'SolrDisMaxQuery::getHighlightAlternateField' => 
  array (
    0 => 'string',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::getHighlightFields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrDisMaxQuery::getHighlightFormatter' => 
  array (
    0 => 'string',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::getHighlightFragmenter' => 
  array (
    0 => 'string',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::getHighlightFragsize' => 
  array (
    0 => 'int',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::getHighlightHighlightMultiTerm' => 
  array (
    0 => 'bool',
  ),
  'SolrDisMaxQuery::getHighlightMaxAlternateFieldLength' => 
  array (
    0 => 'int',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::getHighlightMaxAnalyzedChars' => 
  array (
    0 => 'int',
  ),
  'SolrDisMaxQuery::getHighlightMergeContiguous' => 
  array (
    0 => 'bool',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::getHighlightRegexMaxAnalyzedChars' => 
  array (
    0 => 'int',
  ),
  'SolrDisMaxQuery::getHighlightRegexPattern' => 
  array (
    0 => 'string',
  ),
  'SolrDisMaxQuery::getHighlightRegexSlop' => 
  array (
    0 => 'float',
  ),
  'SolrDisMaxQuery::getHighlightRequireFieldMatch' => 
  array (
    0 => 'bool',
  ),
  'SolrDisMaxQuery::getHighlightSimplePost' => 
  array (
    0 => 'string',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::getHighlightSimplePre' => 
  array (
    0 => 'string',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::getHighlightSnippets' => 
  array (
    0 => 'int',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::getHighlightUsePhraseHighlighter' => 
  array (
    0 => 'bool',
  ),
  'SolrDisMaxQuery::getMlt' => 
  array (
    0 => 'bool',
  ),
  'SolrDisMaxQuery::getMltBoost' => 
  array (
    0 => 'bool',
  ),
  'SolrDisMaxQuery::getMltCount' => 
  array (
    0 => 'int',
  ),
  'SolrDisMaxQuery::getMltFields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrDisMaxQuery::getMltMaxNumQueryTerms' => 
  array (
    0 => 'int',
  ),
  'SolrDisMaxQuery::getMltMaxNumTokens' => 
  array (
    0 => 'int',
  ),
  'SolrDisMaxQuery::getMltMaxWordLength' => 
  array (
    0 => 'int',
  ),
  'SolrDisMaxQuery::getMltMinDocFrequency' => 
  array (
    0 => 'int',
  ),
  'SolrDisMaxQuery::getMltMinTermFrequency' => 
  array (
    0 => 'int',
  ),
  'SolrDisMaxQuery::getMltMinWordLength' => 
  array (
    0 => 'int',
  ),
  'SolrDisMaxQuery::getMltQueryFields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrDisMaxQuery::getParam' => 
  array (
    0 => 'mixed',
    'param_name' => 'string',
  ),
  'SolrDisMaxQuery::getParams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrDisMaxQuery::getPreparedParams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrDisMaxQuery::getQuery' => 
  array (
    0 => 'string',
  ),
  'SolrDisMaxQuery::getRows' => 
  array (
    0 => 'int',
  ),
  'SolrDisMaxQuery::getSortFields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrDisMaxQuery::getStart' => 
  array (
    0 => 'int',
  ),
  'SolrDisMaxQuery::getStats' => 
  array (
    0 => 'bool',
  ),
  'SolrDisMaxQuery::getStatsFacets' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrDisMaxQuery::getStatsFields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrDisMaxQuery::getTerms' => 
  array (
    0 => 'bool',
  ),
  'SolrDisMaxQuery::getTermsField' => 
  array (
    0 => 'string',
  ),
  'SolrDisMaxQuery::getTermsIncludeLowerBound' => 
  array (
    0 => 'bool',
  ),
  'SolrDisMaxQuery::getTermsIncludeUpperBound' => 
  array (
    0 => 'bool',
  ),
  'SolrDisMaxQuery::getTermsLimit' => 
  array (
    0 => 'int',
  ),
  'SolrDisMaxQuery::getTermsLowerBound' => 
  array (
    0 => 'string',
  ),
  'SolrDisMaxQuery::getTermsMaxCount' => 
  array (
    0 => 'int',
  ),
  'SolrDisMaxQuery::getTermsMinCount' => 
  array (
    0 => 'int',
  ),
  'SolrDisMaxQuery::getTermsPrefix' => 
  array (
    0 => 'string',
  ),
  'SolrDisMaxQuery::getTermsReturnRaw' => 
  array (
    0 => 'bool',
  ),
  'SolrDisMaxQuery::getTermsSort' => 
  array (
    0 => 'int',
  ),
  'SolrDisMaxQuery::getTermsUpperBound' => 
  array (
    0 => 'string',
  ),
  'SolrDisMaxQuery::getTimeAllowed' => 
  array (
    0 => 'int',
  ),
  'SolrDisMaxQuery::removeBigramPhraseField' => 
  array (
    0 => 'SolrDisMaxQuery',
    'field' => 'string',
  ),
  'SolrDisMaxQuery::removeBoostQuery' => 
  array (
    0 => 'SolrDisMaxQuery',
    'field' => 'string',
  ),
  'SolrDisMaxQuery::removeExpandFilterQuery' => 
  array (
    0 => 'SolrQuery',
    'fq' => 'string',
  ),
  'SolrDisMaxQuery::removeExpandSortField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'SolrDisMaxQuery::removeFacetDateField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'SolrDisMaxQuery::removeFacetDateOther' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::removeFacetField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'SolrDisMaxQuery::removeFacetQuery' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'SolrDisMaxQuery::removeField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'SolrDisMaxQuery::removeFilterQuery' => 
  array (
    0 => 'SolrQuery',
    'fq' => 'string',
  ),
  'SolrDisMaxQuery::removeHighlightField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'SolrDisMaxQuery::removeMltField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'SolrDisMaxQuery::removeMltQueryField' => 
  array (
    0 => 'SolrQuery',
    'queryField' => 'string',
  ),
  'SolrDisMaxQuery::removePhraseField' => 
  array (
    0 => 'SolrDisMaxQuery',
    'field' => 'string',
  ),
  'SolrDisMaxQuery::removeQueryField' => 
  array (
    0 => 'SolrDisMaxQuery',
    'field' => 'string',
  ),
  'SolrDisMaxQuery::removeSortField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'SolrDisMaxQuery::removeStatsFacet' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'SolrDisMaxQuery::removeStatsField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'SolrDisMaxQuery::removeTrigramPhraseField' => 
  array (
    0 => 'SolrDisMaxQuery',
    'field' => 'string',
  ),
  'SolrDisMaxQuery::removeUserField' => 
  array (
    0 => 'SolrDisMaxQuery',
    'field' => 'string',
  ),
  'SolrDisMaxQuery::serialize' => 
  array (
    0 => 'string',
  ),
  'SolrDisMaxQuery::set' => 
  array (
    0 => 'SolrParams',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'SolrDisMaxQuery::setBigramPhraseFields' => 
  array (
    0 => 'SolrDisMaxQuery',
    'fields' => 'string',
  ),
  'SolrDisMaxQuery::setBigramPhraseSlop' => 
  array (
    0 => 'SolrDisMaxQuery',
    'slop' => 'string',
  ),
  'SolrDisMaxQuery::setBoostFunction' => 
  array (
    0 => 'SolrDisMaxQuery',
    'function' => 'string',
  ),
  'SolrDisMaxQuery::setBoostQuery' => 
  array (
    0 => 'SolrDisMaxQuery',
    'q' => 'string',
  ),
  'SolrDisMaxQuery::setEchoHandler' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'SolrDisMaxQuery::setEchoParams' => 
  array (
    0 => 'SolrQuery',
    'type' => 'string',
  ),
  'SolrDisMaxQuery::setExpand' => 
  array (
    0 => 'SolrQuery',
    'value' => 'bool',
  ),
  'SolrDisMaxQuery::setExpandQuery' => 
  array (
    0 => 'SolrQuery',
    'q' => 'string',
  ),
  'SolrDisMaxQuery::setExpandRows' => 
  array (
    0 => 'SolrQuery',
    'value' => 'int',
  ),
  'SolrDisMaxQuery::setExplainOther' => 
  array (
    0 => 'SolrQuery',
    'query' => 'string',
  ),
  'SolrDisMaxQuery::setFacet' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'SolrDisMaxQuery::setFacetDateEnd' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::setFacetDateGap' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::setFacetDateHardEnd' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::setFacetDateStart' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::setFacetEnumCacheMinDefaultFrequency' => 
  array (
    0 => 'SolrQuery',
    'frequency' => 'int',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::setFacetLimit' => 
  array (
    0 => 'SolrQuery',
    'limit' => 'int',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::setFacetMethod' => 
  array (
    0 => 'SolrQuery',
    'method' => 'string',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::setFacetMinCount' => 
  array (
    0 => 'SolrQuery',
    'mincount' => 'int',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::setFacetMissing' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::setFacetOffset' => 
  array (
    0 => 'SolrQuery',
    'offset' => 'int',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::setFacetPrefix' => 
  array (
    0 => 'SolrQuery',
    'prefix' => 'string',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::setFacetSort' => 
  array (
    0 => 'SolrQuery',
    'facetSort' => 'int',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::setGroup' => 
  array (
    0 => 'SolrQuery',
    'value' => 'bool',
  ),
  'SolrDisMaxQuery::setGroupCachePercent' => 
  array (
    0 => 'SolrQuery',
    'percent' => 'int',
  ),
  'SolrDisMaxQuery::setGroupFacet' => 
  array (
    0 => 'SolrQuery',
    'value' => 'bool',
  ),
  'SolrDisMaxQuery::setGroupFormat' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'SolrDisMaxQuery::setGroupLimit' => 
  array (
    0 => 'SolrQuery',
    'value' => 'int',
  ),
  'SolrDisMaxQuery::setGroupMain' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'SolrDisMaxQuery::setGroupNGroups' => 
  array (
    0 => 'SolrQuery',
    'value' => 'bool',
  ),
  'SolrDisMaxQuery::setGroupOffset' => 
  array (
    0 => 'SolrQuery',
    'value' => 'int',
  ),
  'SolrDisMaxQuery::setGroupTruncate' => 
  array (
    0 => 'SolrQuery',
    'value' => 'bool',
  ),
  'SolrDisMaxQuery::setHighlight' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'SolrDisMaxQuery::setHighlightAlternateField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::setHighlightFormatter' => 
  array (
    0 => 'SolrQuery',
    'formatter' => 'string',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::setHighlightFragmenter' => 
  array (
    0 => 'SolrQuery',
    'fragmenter' => 'string',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::setHighlightFragsize' => 
  array (
    0 => 'SolrQuery',
    'size' => 'int',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::setHighlightHighlightMultiTerm' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'SolrDisMaxQuery::setHighlightMaxAlternateFieldLength' => 
  array (
    0 => 'SolrQuery',
    'fieldLength' => 'string',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::setHighlightMaxAnalyzedChars' => 
  array (
    0 => 'SolrQuery',
    'value' => 'int',
  ),
  'SolrDisMaxQuery::setHighlightMergeContiguous' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::setHighlightRegexMaxAnalyzedChars' => 
  array (
    0 => 'SolrQuery',
    'maxAnalyzedChars' => 'int',
  ),
  'SolrDisMaxQuery::setHighlightRegexPattern' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'SolrDisMaxQuery::setHighlightRegexSlop' => 
  array (
    0 => 'SolrQuery',
    'factor' => 'float',
  ),
  'SolrDisMaxQuery::setHighlightRequireFieldMatch' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'SolrDisMaxQuery::setHighlightSimplePost' => 
  array (
    0 => 'SolrQuery',
    'simplePost' => 'string',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::setHighlightSimplePre' => 
  array (
    0 => 'SolrQuery',
    'simplePre' => 'string',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::setHighlightSnippets' => 
  array (
    0 => 'SolrQuery',
    'value' => 'int',
    'field_override' => 'string',
  ),
  'SolrDisMaxQuery::setHighlightUsePhraseHighlighter' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'SolrDisMaxQuery::setMinimumMatch' => 
  array (
    0 => 'SolrDisMaxQuery',
    'value' => 'string',
  ),
  'SolrDisMaxQuery::setMlt' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'SolrDisMaxQuery::setMltBoost' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'SolrDisMaxQuery::setMltCount' => 
  array (
    0 => 'SolrQuery',
    'count' => 'int',
  ),
  'SolrDisMaxQuery::setMltMaxNumQueryTerms' => 
  array (
    0 => 'SolrQuery',
    'value' => 'int',
  ),
  'SolrDisMaxQuery::setMltMaxNumTokens' => 
  array (
    0 => 'SolrQuery',
    'value' => 'int',
  ),
  'SolrDisMaxQuery::setMltMaxWordLength' => 
  array (
    0 => 'SolrQuery',
    'maxWordLength' => 'int',
  ),
  'SolrDisMaxQuery::setMltMinDocFrequency' => 
  array (
    0 => 'SolrQuery',
    'minDocFrequency' => 'int',
  ),
  'SolrDisMaxQuery::setMltMinTermFrequency' => 
  array (
    0 => 'SolrQuery',
    'minTermFrequency' => 'int',
  ),
  'SolrDisMaxQuery::setMltMinWordLength' => 
  array (
    0 => 'SolrQuery',
    'minWordLength' => 'int',
  ),
  'SolrDisMaxQuery::setOmitHeader' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'SolrDisMaxQuery::setParam' => 
  array (
    0 => 'SolrParams',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'SolrDisMaxQuery::setPhraseFields' => 
  array (
    0 => 'SolrDisMaxQuery',
    'fields' => 'string',
  ),
  'SolrDisMaxQuery::setPhraseSlop' => 
  array (
    0 => 'SolrDisMaxQuery',
    'slop' => 'string',
  ),
  'SolrDisMaxQuery::setQuery' => 
  array (
    0 => 'SolrQuery',
    'query' => 'string',
  ),
  'SolrDisMaxQuery::setQueryAlt' => 
  array (
    0 => 'SolrDisMaxQuery',
    'q' => 'string',
  ),
  'SolrDisMaxQuery::setQueryPhraseSlop' => 
  array (
    0 => 'SolrDisMaxQuery',
    'slop' => 'string',
  ),
  'SolrDisMaxQuery::setRows' => 
  array (
    0 => 'SolrQuery',
    'rows' => 'int',
  ),
  'SolrDisMaxQuery::setShowDebugInfo' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'SolrDisMaxQuery::setStart' => 
  array (
    0 => 'SolrQuery',
    'start' => 'int',
  ),
  'SolrDisMaxQuery::setStats' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'SolrDisMaxQuery::setTerms' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'SolrDisMaxQuery::setTermsField' => 
  array (
    0 => 'SolrQuery',
    'fieldname' => 'string',
  ),
  'SolrDisMaxQuery::setTermsIncludeLowerBound' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'SolrDisMaxQuery::setTermsIncludeUpperBound' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'SolrDisMaxQuery::setTermsLimit' => 
  array (
    0 => 'SolrQuery',
    'limit' => 'int',
  ),
  'SolrDisMaxQuery::setTermsLowerBound' => 
  array (
    0 => 'SolrQuery',
    'lowerBound' => 'string',
  ),
  'SolrDisMaxQuery::setTermsMaxCount' => 
  array (
    0 => 'SolrQuery',
    'frequency' => 'int',
  ),
  'SolrDisMaxQuery::setTermsMinCount' => 
  array (
    0 => 'SolrQuery',
    'frequency' => 'int',
  ),
  'SolrDisMaxQuery::setTermsPrefix' => 
  array (
    0 => 'SolrQuery',
    'prefix' => 'string',
  ),
  'SolrDisMaxQuery::setTermsReturnRaw' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'SolrDisMaxQuery::setTermsSort' => 
  array (
    0 => 'SolrQuery',
    'sortType' => 'int',
  ),
  'SolrDisMaxQuery::setTermsUpperBound' => 
  array (
    0 => 'SolrQuery',
    'upperBound' => 'string',
  ),
  'SolrDisMaxQuery::setTieBreaker' => 
  array (
    0 => 'SolrDisMaxQuery',
    'tieBreaker' => 'string',
  ),
  'SolrDisMaxQuery::setTimeAllowed' => 
  array (
    0 => 'SolrQuery',
    'timeAllowed' => 'int',
  ),
  'SolrDisMaxQuery::setTrigramPhraseFields' => 
  array (
    0 => 'SolrDisMaxQuery',
    'fields' => 'string',
  ),
  'SolrDisMaxQuery::setTrigramPhraseSlop' => 
  array (
    0 => 'SolrDisMaxQuery',
    'slop' => 'string',
  ),
  'SolrDisMaxQuery::setUserFields' => 
  array (
    0 => 'SolrDisMaxQuery',
    'fields' => 'string',
  ),
  'SolrDisMaxQuery::toString' => 
  array (
    0 => 'string',
    'url_encode=' => 'bool',
  ),
  'SolrDisMaxQuery::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'SolrDisMaxQuery::useDisMaxQueryParser' => 
  array (
    0 => 'SolrDisMaxQuery',
  ),
  'SolrDisMaxQuery::useEDisMaxQueryParser' => 
  array (
    0 => 'SolrDisMaxQuery',
  ),
  'SolrDocument::__clone' => 
  array (
    0 => 'void',
  ),
  'SolrDocument::__construct' => 
  array (
    0 => 'void',
  ),
  'SolrDocument::__destruct' => 
  array (
    0 => 'void',
  ),
  'SolrDocument::__get' => 
  array (
    0 => 'SolrDocumentField',
    'fieldname' => 'string',
  ),
  'SolrDocument::__isset' => 
  array (
    0 => 'bool',
    'fieldname' => 'string',
  ),
  'SolrDocument::__set' => 
  array (
    0 => 'bool',
    'fieldname' => 'string',
    'fieldvalue' => 'string',
  ),
  'SolrDocument::__unset' => 
  array (
    0 => 'bool',
    'fieldname' => 'string',
  ),
  'SolrDocument::addField' => 
  array (
    0 => 'bool',
    'fieldname' => 'string',
    'fieldvalue' => 'string',
  ),
  'SolrDocument::clear' => 
  array (
    0 => 'bool',
  ),
  'SolrDocument::current' => 
  array (
    0 => 'SolrDocumentField',
  ),
  'SolrDocument::deleteField' => 
  array (
    0 => 'bool',
    'fieldname' => 'string',
  ),
  'SolrDocument::fieldExists' => 
  array (
    0 => 'bool',
    'fieldname' => 'string',
  ),
  'SolrDocument::getChildDocuments' => 
  array (
    0 => 'array<array-key, SolrInputDocument>',
  ),
  'SolrDocument::getChildDocumentsCount' => 
  array (
    0 => 'int',
  ),
  'SolrDocument::getField' => 
  array (
    0 => 'SolrDocumentField|false',
    'fieldname' => 'string',
  ),
  'SolrDocument::getFieldCount' => 
  array (
    0 => 'false|int',
  ),
  'SolrDocument::getFieldNames' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'SolrDocument::getInputDocument' => 
  array (
    0 => 'SolrInputDocument',
  ),
  'SolrDocument::hasChildDocuments' => 
  array (
    0 => 'bool',
  ),
  'SolrDocument::key' => 
  array (
    0 => 'string',
  ),
  'SolrDocument::merge' => 
  array (
    0 => 'bool',
    'sourcedoc' => 'solrdocument',
    'overwrite=' => 'bool',
  ),
  'SolrDocument::next' => 
  array (
    0 => 'void',
  ),
  'SolrDocument::offsetExists' => 
  array (
    0 => 'bool',
    'fieldname' => 'string',
  ),
  'SolrDocument::offsetGet' => 
  array (
    0 => 'SolrDocumentField',
    'fieldname' => 'string',
  ),
  'SolrDocument::offsetSet' => 
  array (
    0 => 'void',
    'fieldname' => 'string',
    'fieldvalue' => 'string',
  ),
  'SolrDocument::offsetUnset' => 
  array (
    0 => 'void',
    'fieldname' => 'string',
  ),
  'SolrDocument::reset' => 
  array (
    0 => 'bool',
  ),
  'SolrDocument::rewind' => 
  array (
    0 => 'void',
  ),
  'SolrDocument::serialize' => 
  array (
    0 => 'string',
  ),
  'SolrDocument::sort' => 
  array (
    0 => 'bool',
    'sortorderby' => 'int',
    'sortdirection=' => 'int',
  ),
  'SolrDocument::toArray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrDocument::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'SolrDocument::valid' => 
  array (
    0 => 'bool',
  ),
  'SolrDocumentField::__construct' => 
  array (
    0 => 'void',
  ),
  'SolrDocumentField::__destruct' => 
  array (
    0 => 'void',
  ),
  'SolrException::__clone' => 
  array (
    0 => 'void',
  ),
  'SolrException::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Exception|Throwable|null',
  ),
  'SolrException::__toString' => 
  array (
    0 => 'string',
  ),
  'SolrException::__wakeup' => 
  array (
    0 => 'void',
  ),
  'SolrException::getCode' => 
  array (
    0 => 'int',
  ),
  'SolrException::getFile' => 
  array (
    0 => 'string',
  ),
  'SolrException::getInternalInfo' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrException::getLine' => 
  array (
    0 => 'int',
  ),
  'SolrException::getMessage' => 
  array (
    0 => 'string',
  ),
  'SolrException::getPrevious' => 
  array (
    0 => 'Exception|Throwable',
  ),
  'SolrException::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'SolrException::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'SolrGenericResponse::__construct' => 
  array (
    0 => 'void',
  ),
  'SolrGenericResponse::__destruct' => 
  array (
    0 => 'void',
  ),
  'SolrGenericResponse::getDigestedResponse' => 
  array (
    0 => 'string',
  ),
  'SolrGenericResponse::getHttpStatus' => 
  array (
    0 => 'int',
  ),
  'SolrGenericResponse::getHttpStatusMessage' => 
  array (
    0 => 'string',
  ),
  'SolrGenericResponse::getRawRequest' => 
  array (
    0 => 'string',
  ),
  'SolrGenericResponse::getRawRequestHeaders' => 
  array (
    0 => 'string',
  ),
  'SolrGenericResponse::getRawResponse' => 
  array (
    0 => 'string',
  ),
  'SolrGenericResponse::getRawResponseHeaders' => 
  array (
    0 => 'string',
  ),
  'SolrGenericResponse::getRequestUrl' => 
  array (
    0 => 'string',
  ),
  'SolrGenericResponse::getResponse' => 
  array (
    0 => 'SolrObject',
  ),
  'SolrGenericResponse::setParseMode' => 
  array (
    0 => 'bool',
    'parser_mode=' => 'int',
  ),
  'SolrGenericResponse::success' => 
  array (
    0 => 'bool',
  ),
  'SolrIllegalArgumentException::__clone' => 
  array (
    0 => 'void',
  ),
  'SolrIllegalArgumentException::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Exception|Throwable|null',
  ),
  'SolrIllegalArgumentException::__toString' => 
  array (
    0 => 'string',
  ),
  'SolrIllegalArgumentException::__wakeup' => 
  array (
    0 => 'void',
  ),
  'SolrIllegalArgumentException::getCode' => 
  array (
    0 => 'int',
  ),
  'SolrIllegalArgumentException::getFile' => 
  array (
    0 => 'string',
  ),
  'SolrIllegalArgumentException::getInternalInfo' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrIllegalArgumentException::getLine' => 
  array (
    0 => 'int',
  ),
  'SolrIllegalArgumentException::getMessage' => 
  array (
    0 => 'string',
  ),
  'SolrIllegalArgumentException::getPrevious' => 
  array (
    0 => 'Exception|Throwable',
  ),
  'SolrIllegalArgumentException::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'SolrIllegalArgumentException::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'SolrIllegalOperationException::__clone' => 
  array (
    0 => 'void',
  ),
  'SolrIllegalOperationException::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Exception|Throwable|null',
  ),
  'SolrIllegalOperationException::__toString' => 
  array (
    0 => 'string',
  ),
  'SolrIllegalOperationException::__wakeup' => 
  array (
    0 => 'void',
  ),
  'SolrIllegalOperationException::getCode' => 
  array (
    0 => 'int',
  ),
  'SolrIllegalOperationException::getFile' => 
  array (
    0 => 'string',
  ),
  'SolrIllegalOperationException::getInternalInfo' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrIllegalOperationException::getLine' => 
  array (
    0 => 'int',
  ),
  'SolrIllegalOperationException::getMessage' => 
  array (
    0 => 'string',
  ),
  'SolrIllegalOperationException::getPrevious' => 
  array (
    0 => 'Exception|Throwable',
  ),
  'SolrIllegalOperationException::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'SolrIllegalOperationException::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'SolrInputDocument::__clone' => 
  array (
    0 => 'void',
  ),
  'SolrInputDocument::__construct' => 
  array (
    0 => 'void',
  ),
  'SolrInputDocument::__destruct' => 
  array (
    0 => 'void',
  ),
  'SolrInputDocument::addChildDocument' => 
  array (
    0 => 'void',
    'child' => 'SolrInputDocument',
  ),
  'SolrInputDocument::addChildDocuments' => 
  array (
    0 => 'void',
    'docs' => 'array<array-key, mixed>',
  ),
  'SolrInputDocument::addField' => 
  array (
    0 => 'bool',
    'fieldname' => 'string',
    'fieldvalue' => 'string',
    'fieldboostvalue=' => 'float',
  ),
  'SolrInputDocument::clear' => 
  array (
    0 => 'bool',
  ),
  'SolrInputDocument::deleteField' => 
  array (
    0 => 'bool',
    'fieldname' => 'string',
  ),
  'SolrInputDocument::fieldExists' => 
  array (
    0 => 'bool',
    'fieldname' => 'string',
  ),
  'SolrInputDocument::getBoost' => 
  array (
    0 => 'false|float',
  ),
  'SolrInputDocument::getChildDocuments' => 
  array (
    0 => 'array<array-key, SolrInputDocument>',
  ),
  'SolrInputDocument::getChildDocumentsCount' => 
  array (
    0 => 'int',
  ),
  'SolrInputDocument::getField' => 
  array (
    0 => 'SolrDocumentField|false',
    'fieldname' => 'string',
  ),
  'SolrInputDocument::getFieldBoost' => 
  array (
    0 => 'false|float',
    'fieldname' => 'string',
  ),
  'SolrInputDocument::getFieldCount' => 
  array (
    0 => 'false|int',
  ),
  'SolrInputDocument::getFieldNames' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'SolrInputDocument::hasChildDocuments' => 
  array (
    0 => 'bool',
  ),
  'SolrInputDocument::merge' => 
  array (
    0 => 'bool',
    'sourcedoc' => 'SolrInputDocument',
    'overwrite=' => 'bool',
  ),
  'SolrInputDocument::reset' => 
  array (
    0 => 'bool',
  ),
  'SolrInputDocument::setBoost' => 
  array (
    0 => 'bool',
    'documentboostvalue' => 'float',
  ),
  'SolrInputDocument::setFieldBoost' => 
  array (
    0 => 'bool',
    'fieldname' => 'string',
    'fieldboostvalue' => 'float',
  ),
  'SolrInputDocument::sort' => 
  array (
    0 => 'bool',
    'sortorderby' => 'int',
    'sortdirection=' => 'int',
  ),
  'SolrInputDocument::toArray' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'SolrModifiableParams::__construct' => 
  array (
    0 => 'void',
  ),
  'SolrModifiableParams::__destruct' => 
  array (
    0 => 'void',
  ),
  'SolrModifiableParams::add' => 
  array (
    0 => 'SolrParams',
    'name' => 'string',
    'value' => 'string',
  ),
  'SolrModifiableParams::addParam' => 
  array (
    0 => 'SolrParams',
    'name' => 'string',
    'value' => 'string',
  ),
  'SolrModifiableParams::get' => 
  array (
    0 => 'mixed',
    'param_name' => 'string',
  ),
  'SolrModifiableParams::getParam' => 
  array (
    0 => 'mixed',
    'param_name' => 'string',
  ),
  'SolrModifiableParams::getParams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrModifiableParams::getPreparedParams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrModifiableParams::serialize' => 
  array (
    0 => 'string',
  ),
  'SolrModifiableParams::set' => 
  array (
    0 => 'SolrParams',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'SolrModifiableParams::setParam' => 
  array (
    0 => 'SolrParams',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'SolrModifiableParams::toString' => 
  array (
    0 => 'string',
    'url_encode=' => 'bool',
  ),
  'SolrModifiableParams::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'SolrObject::__construct' => 
  array (
    0 => 'void',
  ),
  'SolrObject::__destruct' => 
  array (
    0 => 'void',
  ),
  'SolrObject::getPropertyNames' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrObject::offsetExists' => 
  array (
    0 => 'bool',
    'property_name' => 'string',
  ),
  'SolrObject::offsetGet' => 
  array (
    0 => 'SolrDocumentField',
    'property_name' => 'string',
  ),
  'SolrObject::offsetSet' => 
  array (
    0 => 'void',
    'property_name' => 'string',
    'property_value' => 'string',
  ),
  'SolrObject::offsetUnset' => 
  array (
    0 => 'void',
    'property_name' => 'string',
  ),
  'SolrParams::__construct' => 
  array (
    0 => 'void',
  ),
  'SolrParams::add' => 
  array (
    0 => 'SolrParams|false',
    'name' => 'string',
    'value' => 'string',
  ),
  'SolrParams::addParam' => 
  array (
    0 => 'SolrParams|false',
    'name' => 'string',
    'value' => 'string',
  ),
  'SolrParams::get' => 
  array (
    0 => 'mixed',
    'param_name' => 'string',
  ),
  'SolrParams::getParam' => 
  array (
    0 => 'mixed',
    'param_name=' => 'string',
  ),
  'SolrParams::getParams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrParams::getPreparedParams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrParams::serialize' => 
  array (
    0 => 'string',
  ),
  'SolrParams::set' => 
  array (
    0 => 'SolrParams|false',
    'name' => 'string',
    'value' => 'string',
  ),
  'SolrParams::setParam' => 
  array (
    0 => 'SolrParams|false',
    'name' => 'string',
    'value' => 'string',
  ),
  'SolrParams::toString' => 
  array (
    0 => 'false|string',
    'url_encode=' => 'bool',
  ),
  'SolrParams::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'SolrPingResponse::__construct' => 
  array (
    0 => 'void',
  ),
  'SolrPingResponse::__destruct' => 
  array (
    0 => 'void',
  ),
  'SolrPingResponse::getDigestedResponse' => 
  array (
    0 => 'string',
  ),
  'SolrPingResponse::getHttpStatus' => 
  array (
    0 => 'int',
  ),
  'SolrPingResponse::getHttpStatusMessage' => 
  array (
    0 => 'string',
  ),
  'SolrPingResponse::getRawRequest' => 
  array (
    0 => 'string',
  ),
  'SolrPingResponse::getRawRequestHeaders' => 
  array (
    0 => 'string',
  ),
  'SolrPingResponse::getRawResponse' => 
  array (
    0 => 'string',
  ),
  'SolrPingResponse::getRawResponseHeaders' => 
  array (
    0 => 'string',
  ),
  'SolrPingResponse::getRequestUrl' => 
  array (
    0 => 'string',
  ),
  'SolrPingResponse::getResponse' => 
  array (
    0 => 'string',
  ),
  'SolrPingResponse::setParseMode' => 
  array (
    0 => 'bool',
    'parser_mode=' => 'int',
  ),
  'SolrPingResponse::success' => 
  array (
    0 => 'bool',
  ),
  'SolrQuery::__construct' => 
  array (
    0 => 'void',
    'q=' => 'string',
  ),
  'SolrQuery::__destruct' => 
  array (
    0 => 'void',
  ),
  'SolrQuery::add' => 
  array (
    0 => 'SolrParams',
    'name' => 'string',
    'value' => 'string',
  ),
  'SolrQuery::addExpandFilterQuery' => 
  array (
    0 => 'SolrQuery',
    'fq' => 'string',
  ),
  'SolrQuery::addExpandSortField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
    'order=' => 'string',
  ),
  'SolrQuery::addFacetDateField' => 
  array (
    0 => 'SolrQuery',
    'datefield' => 'string',
  ),
  'SolrQuery::addFacetDateOther' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
    'field_override=' => 'string',
  ),
  'SolrQuery::addFacetField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'SolrQuery::addFacetQuery' => 
  array (
    0 => 'SolrQuery',
    'facetquery' => 'string',
  ),
  'SolrQuery::addField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'SolrQuery::addFilterQuery' => 
  array (
    0 => 'SolrQuery',
    'fq' => 'string',
  ),
  'SolrQuery::addGroupField' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'SolrQuery::addGroupFunction' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'SolrQuery::addGroupQuery' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'SolrQuery::addGroupSortField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
    'order=' => 'int',
  ),
  'SolrQuery::addHighlightField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'SolrQuery::addMltField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'SolrQuery::addMltQueryField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
    'boost' => 'float',
  ),
  'SolrQuery::addParam' => 
  array (
    0 => 'SolrParams',
    'name' => 'string',
    'value' => 'string',
  ),
  'SolrQuery::addSortField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
    'order=' => 'int',
  ),
  'SolrQuery::addStatsFacet' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'SolrQuery::addStatsField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'SolrQuery::collapse' => 
  array (
    0 => 'SolrQuery',
    'collapseFunction' => 'SolrCollapseFunction',
  ),
  'SolrQuery::get' => 
  array (
    0 => 'mixed',
    'param_name' => 'string',
  ),
  'SolrQuery::getExpand' => 
  array (
    0 => 'bool',
  ),
  'SolrQuery::getExpandFilterQueries' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrQuery::getExpandQuery' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrQuery::getExpandRows' => 
  array (
    0 => 'int',
  ),
  'SolrQuery::getExpandSortFields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrQuery::getFacet' => 
  array (
    0 => 'bool|null',
  ),
  'SolrQuery::getFacetDateEnd' => 
  array (
    0 => 'null|string',
    'field_override=' => 'string',
  ),
  'SolrQuery::getFacetDateFields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrQuery::getFacetDateGap' => 
  array (
    0 => 'null|string',
    'field_override=' => 'string',
  ),
  'SolrQuery::getFacetDateHardEnd' => 
  array (
    0 => 'null|string',
    'field_override=' => 'string',
  ),
  'SolrQuery::getFacetDateOther' => 
  array (
    0 => 'null|string',
    'field_override=' => 'string',
  ),
  'SolrQuery::getFacetDateStart' => 
  array (
    0 => 'null|string',
    'field_override=' => 'string',
  ),
  'SolrQuery::getFacetFields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrQuery::getFacetLimit' => 
  array (
    0 => 'int|null',
    'field_override=' => 'string',
  ),
  'SolrQuery::getFacetMethod' => 
  array (
    0 => 'null|string',
    'field_override=' => 'string',
  ),
  'SolrQuery::getFacetMinCount' => 
  array (
    0 => 'int|null',
    'field_override=' => 'string',
  ),
  'SolrQuery::getFacetMissing' => 
  array (
    0 => 'bool|null',
    'field_override=' => 'string',
  ),
  'SolrQuery::getFacetOffset' => 
  array (
    0 => 'int|null',
    'field_override=' => 'string',
  ),
  'SolrQuery::getFacetPrefix' => 
  array (
    0 => 'null|string',
    'field_override=' => 'string',
  ),
  'SolrQuery::getFacetQueries' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'SolrQuery::getFacetSort' => 
  array (
    0 => 'int',
    'field_override=' => 'string',
  ),
  'SolrQuery::getFields' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'SolrQuery::getFilterQueries' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'SolrQuery::getGroup' => 
  array (
    0 => 'bool',
  ),
  'SolrQuery::getGroupCachePercent' => 
  array (
    0 => 'int',
  ),
  'SolrQuery::getGroupFacet' => 
  array (
    0 => 'bool',
  ),
  'SolrQuery::getGroupFields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrQuery::getGroupFormat' => 
  array (
    0 => 'string',
  ),
  'SolrQuery::getGroupFunctions' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrQuery::getGroupLimit' => 
  array (
    0 => 'int',
  ),
  'SolrQuery::getGroupMain' => 
  array (
    0 => 'bool',
  ),
  'SolrQuery::getGroupNGroups' => 
  array (
    0 => 'bool',
  ),
  'SolrQuery::getGroupOffset' => 
  array (
    0 => 'int',
  ),
  'SolrQuery::getGroupQueries' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrQuery::getGroupSortFields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrQuery::getGroupTruncate' => 
  array (
    0 => 'bool',
  ),
  'SolrQuery::getHighlight' => 
  array (
    0 => 'bool',
  ),
  'SolrQuery::getHighlightAlternateField' => 
  array (
    0 => 'null|string',
    'field_override=' => 'string',
  ),
  'SolrQuery::getHighlightFields' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'SolrQuery::getHighlightFormatter' => 
  array (
    0 => 'null|string',
    'field_override=' => 'string',
  ),
  'SolrQuery::getHighlightFragmenter' => 
  array (
    0 => 'null|string',
    'field_override=' => 'string',
  ),
  'SolrQuery::getHighlightFragsize' => 
  array (
    0 => 'int|null',
    'field_override=' => 'string',
  ),
  'SolrQuery::getHighlightHighlightMultiTerm' => 
  array (
    0 => 'bool|null',
  ),
  'SolrQuery::getHighlightMaxAlternateFieldLength' => 
  array (
    0 => 'int|null',
    'field_override=' => 'string',
  ),
  'SolrQuery::getHighlightMaxAnalyzedChars' => 
  array (
    0 => 'int|null',
  ),
  'SolrQuery::getHighlightMergeContiguous' => 
  array (
    0 => 'bool|null',
    'field_override=' => 'string',
  ),
  'SolrQuery::getHighlightRegexMaxAnalyzedChars' => 
  array (
    0 => 'int|null',
  ),
  'SolrQuery::getHighlightRegexPattern' => 
  array (
    0 => 'null|string',
  ),
  'SolrQuery::getHighlightRegexSlop' => 
  array (
    0 => 'float|null',
  ),
  'SolrQuery::getHighlightRequireFieldMatch' => 
  array (
    0 => 'bool|null',
  ),
  'SolrQuery::getHighlightSimplePost' => 
  array (
    0 => 'null|string',
    'field_override=' => 'string',
  ),
  'SolrQuery::getHighlightSimplePre' => 
  array (
    0 => 'null|string',
    'field_override=' => 'string',
  ),
  'SolrQuery::getHighlightSnippets' => 
  array (
    0 => 'int|null',
    'field_override=' => 'string',
  ),
  'SolrQuery::getHighlightUsePhraseHighlighter' => 
  array (
    0 => 'bool|null',
  ),
  'SolrQuery::getMlt' => 
  array (
    0 => 'bool|null',
  ),
  'SolrQuery::getMltBoost' => 
  array (
    0 => 'bool|null',
  ),
  'SolrQuery::getMltCount' => 
  array (
    0 => 'int|null',
  ),
  'SolrQuery::getMltFields' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'SolrQuery::getMltMaxNumQueryTerms' => 
  array (
    0 => 'int|null',
  ),
  'SolrQuery::getMltMaxNumTokens' => 
  array (
    0 => 'int|null',
  ),
  'SolrQuery::getMltMaxWordLength' => 
  array (
    0 => 'int|null',
  ),
  'SolrQuery::getMltMinDocFrequency' => 
  array (
    0 => 'int|null',
  ),
  'SolrQuery::getMltMinTermFrequency' => 
  array (
    0 => 'int|null',
  ),
  'SolrQuery::getMltMinWordLength' => 
  array (
    0 => 'int|null',
  ),
  'SolrQuery::getMltQueryFields' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'SolrQuery::getParam' => 
  array (
    0 => 'mixed|null',
    'param_name' => 'string',
  ),
  'SolrQuery::getParams' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'SolrQuery::getPreparedParams' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'SolrQuery::getQuery' => 
  array (
    0 => 'null|string',
  ),
  'SolrQuery::getRows' => 
  array (
    0 => 'int|null',
  ),
  'SolrQuery::getSortFields' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'SolrQuery::getStart' => 
  array (
    0 => 'int|null',
  ),
  'SolrQuery::getStats' => 
  array (
    0 => 'bool|null',
  ),
  'SolrQuery::getStatsFacets' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'SolrQuery::getStatsFields' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'SolrQuery::getTerms' => 
  array (
    0 => 'bool|null',
  ),
  'SolrQuery::getTermsField' => 
  array (
    0 => 'null|string',
  ),
  'SolrQuery::getTermsIncludeLowerBound' => 
  array (
    0 => 'bool|null',
  ),
  'SolrQuery::getTermsIncludeUpperBound' => 
  array (
    0 => 'bool|null',
  ),
  'SolrQuery::getTermsLimit' => 
  array (
    0 => 'int|null',
  ),
  'SolrQuery::getTermsLowerBound' => 
  array (
    0 => 'null|string',
  ),
  'SolrQuery::getTermsMaxCount' => 
  array (
    0 => 'int|null',
  ),
  'SolrQuery::getTermsMinCount' => 
  array (
    0 => 'int|null',
  ),
  'SolrQuery::getTermsPrefix' => 
  array (
    0 => 'null|string',
  ),
  'SolrQuery::getTermsReturnRaw' => 
  array (
    0 => 'bool|null',
  ),
  'SolrQuery::getTermsSort' => 
  array (
    0 => 'int|null',
  ),
  'SolrQuery::getTermsUpperBound' => 
  array (
    0 => 'null|string',
  ),
  'SolrQuery::getTimeAllowed' => 
  array (
    0 => 'int|null',
  ),
  'SolrQuery::removeExpandFilterQuery' => 
  array (
    0 => 'SolrQuery',
    'fq' => 'string',
  ),
  'SolrQuery::removeExpandSortField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'SolrQuery::removeFacetDateField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'SolrQuery::removeFacetDateOther' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
    'field_override=' => 'string',
  ),
  'SolrQuery::removeFacetField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'SolrQuery::removeFacetQuery' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'SolrQuery::removeField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'SolrQuery::removeFilterQuery' => 
  array (
    0 => 'SolrQuery',
    'fq' => 'string',
  ),
  'SolrQuery::removeHighlightField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'SolrQuery::removeMltField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'SolrQuery::removeMltQueryField' => 
  array (
    0 => 'SolrQuery',
    'queryfield' => 'string',
  ),
  'SolrQuery::removeSortField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'SolrQuery::removeStatsFacet' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'SolrQuery::removeStatsField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'SolrQuery::serialize' => 
  array (
    0 => 'string',
  ),
  'SolrQuery::set' => 
  array (
    0 => 'SolrParams',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'SolrQuery::setEchoHandler' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'SolrQuery::setEchoParams' => 
  array (
    0 => 'SolrQuery',
    'type' => 'string',
  ),
  'SolrQuery::setExpand' => 
  array (
    0 => 'SolrQuery',
    'value' => 'bool',
  ),
  'SolrQuery::setExpandQuery' => 
  array (
    0 => 'SolrQuery',
    'q' => 'string',
  ),
  'SolrQuery::setExpandRows' => 
  array (
    0 => 'SolrQuery',
    'value' => 'int',
  ),
  'SolrQuery::setExplainOther' => 
  array (
    0 => 'SolrQuery',
    'query' => 'string',
  ),
  'SolrQuery::setFacet' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'SolrQuery::setFacetDateEnd' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
    'field_override=' => 'string',
  ),
  'SolrQuery::setFacetDateGap' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
    'field_override=' => 'string',
  ),
  'SolrQuery::setFacetDateHardEnd' => 
  array (
    0 => 'SolrQuery',
    'value' => 'bool',
    'field_override=' => 'string',
  ),
  'SolrQuery::setFacetDateStart' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
    'field_override=' => 'string',
  ),
  'SolrQuery::setFacetEnumCacheMinDefaultFrequency' => 
  array (
    0 => 'SolrQuery',
    'frequency' => 'int',
    'field_override=' => 'string',
  ),
  'SolrQuery::setFacetLimit' => 
  array (
    0 => 'SolrQuery',
    'limit' => 'int',
    'field_override=' => 'string',
  ),
  'SolrQuery::setFacetMethod' => 
  array (
    0 => 'SolrQuery',
    'method' => 'string',
    'field_override=' => 'string',
  ),
  'SolrQuery::setFacetMinCount' => 
  array (
    0 => 'SolrQuery',
    'mincount' => 'int',
    'field_override=' => 'string',
  ),
  'SolrQuery::setFacetMissing' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
    'field_override=' => 'string',
  ),
  'SolrQuery::setFacetOffset' => 
  array (
    0 => 'SolrQuery',
    'offset' => 'int',
    'field_override=' => 'string',
  ),
  'SolrQuery::setFacetPrefix' => 
  array (
    0 => 'SolrQuery',
    'prefix' => 'string',
    'field_override=' => 'string',
  ),
  'SolrQuery::setFacetSort' => 
  array (
    0 => 'SolrQuery',
    'facetsort' => 'int',
    'field_override=' => 'string',
  ),
  'SolrQuery::setGroup' => 
  array (
    0 => 'SolrQuery',
    'value' => 'bool',
  ),
  'SolrQuery::setGroupCachePercent' => 
  array (
    0 => 'SolrQuery',
    'percent' => 'int',
  ),
  'SolrQuery::setGroupFacet' => 
  array (
    0 => 'SolrQuery',
    'value' => 'bool',
  ),
  'SolrQuery::setGroupFormat' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'SolrQuery::setGroupLimit' => 
  array (
    0 => 'SolrQuery',
    'value' => 'int',
  ),
  'SolrQuery::setGroupMain' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'SolrQuery::setGroupNGroups' => 
  array (
    0 => 'SolrQuery',
    'value' => 'bool',
  ),
  'SolrQuery::setGroupOffset' => 
  array (
    0 => 'SolrQuery',
    'value' => 'int',
  ),
  'SolrQuery::setGroupTruncate' => 
  array (
    0 => 'SolrQuery',
    'value' => 'bool',
  ),
  'SolrQuery::setHighlight' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'SolrQuery::setHighlightAlternateField' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
    'field_override=' => 'string',
  ),
  'SolrQuery::setHighlightFormatter' => 
  array (
    0 => 'SolrQuery',
    'formatter' => 'string',
    'field_override=' => 'string',
  ),
  'SolrQuery::setHighlightFragmenter' => 
  array (
    0 => 'SolrQuery',
    'fragmenter' => 'string',
    'field_override=' => 'string',
  ),
  'SolrQuery::setHighlightFragsize' => 
  array (
    0 => 'SolrQuery',
    'size' => 'int',
    'field_override=' => 'string',
  ),
  'SolrQuery::setHighlightHighlightMultiTerm' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'SolrQuery::setHighlightMaxAlternateFieldLength' => 
  array (
    0 => 'SolrQuery',
    'fieldlength' => 'int',
    'field_override=' => 'string',
  ),
  'SolrQuery::setHighlightMaxAnalyzedChars' => 
  array (
    0 => 'SolrQuery',
    'value' => 'int',
  ),
  'SolrQuery::setHighlightMergeContiguous' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
    'field_override=' => 'string',
  ),
  'SolrQuery::setHighlightRegexMaxAnalyzedChars' => 
  array (
    0 => 'SolrQuery',
    'maxanalyzedchars' => 'int',
  ),
  'SolrQuery::setHighlightRegexPattern' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'SolrQuery::setHighlightRegexSlop' => 
  array (
    0 => 'SolrQuery',
    'factor' => 'float',
  ),
  'SolrQuery::setHighlightRequireFieldMatch' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'SolrQuery::setHighlightSimplePost' => 
  array (
    0 => 'SolrQuery',
    'simplepost' => 'string',
    'field_override=' => 'string',
  ),
  'SolrQuery::setHighlightSimplePre' => 
  array (
    0 => 'SolrQuery',
    'simplepre' => 'string',
    'field_override=' => 'string',
  ),
  'SolrQuery::setHighlightSnippets' => 
  array (
    0 => 'SolrQuery',
    'value' => 'int',
    'field_override=' => 'string',
  ),
  'SolrQuery::setHighlightUsePhraseHighlighter' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'SolrQuery::setMlt' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'SolrQuery::setMltBoost' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'SolrQuery::setMltCount' => 
  array (
    0 => 'SolrQuery',
    'count' => 'int',
  ),
  'SolrQuery::setMltMaxNumQueryTerms' => 
  array (
    0 => 'SolrQuery',
    'value' => 'int',
  ),
  'SolrQuery::setMltMaxNumTokens' => 
  array (
    0 => 'SolrQuery',
    'value' => 'int',
  ),
  'SolrQuery::setMltMaxWordLength' => 
  array (
    0 => 'SolrQuery',
    'maxwordlength' => 'int',
  ),
  'SolrQuery::setMltMinDocFrequency' => 
  array (
    0 => 'SolrQuery',
    'mindocfrequency' => 'int',
  ),
  'SolrQuery::setMltMinTermFrequency' => 
  array (
    0 => 'SolrQuery',
    'mintermfrequency' => 'int',
  ),
  'SolrQuery::setMltMinWordLength' => 
  array (
    0 => 'SolrQuery',
    'minwordlength' => 'int',
  ),
  'SolrQuery::setOmitHeader' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'SolrQuery::setParam' => 
  array (
    0 => 'SolrParams',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'SolrQuery::setQuery' => 
  array (
    0 => 'SolrQuery',
    'query' => 'string',
  ),
  'SolrQuery::setRows' => 
  array (
    0 => 'SolrQuery',
    'rows' => 'int',
  ),
  'SolrQuery::setShowDebugInfo' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'SolrQuery::setStart' => 
  array (
    0 => 'SolrQuery',
    'start' => 'int',
  ),
  'SolrQuery::setStats' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'SolrQuery::setTerms' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'SolrQuery::setTermsField' => 
  array (
    0 => 'SolrQuery',
    'fieldname' => 'string',
  ),
  'SolrQuery::setTermsIncludeLowerBound' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'SolrQuery::setTermsIncludeUpperBound' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'SolrQuery::setTermsLimit' => 
  array (
    0 => 'SolrQuery',
    'limit' => 'int',
  ),
  'SolrQuery::setTermsLowerBound' => 
  array (
    0 => 'SolrQuery',
    'lowerbound' => 'string',
  ),
  'SolrQuery::setTermsMaxCount' => 
  array (
    0 => 'SolrQuery',
    'frequency' => 'int',
  ),
  'SolrQuery::setTermsMinCount' => 
  array (
    0 => 'SolrQuery',
    'frequency' => 'int',
  ),
  'SolrQuery::setTermsPrefix' => 
  array (
    0 => 'SolrQuery',
    'prefix' => 'string',
  ),
  'SolrQuery::setTermsReturnRaw' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'SolrQuery::setTermsSort' => 
  array (
    0 => 'SolrQuery',
    'sorttype' => 'int',
  ),
  'SolrQuery::setTermsUpperBound' => 
  array (
    0 => 'SolrQuery',
    'upperbound' => 'string',
  ),
  'SolrQuery::setTimeAllowed' => 
  array (
    0 => 'SolrQuery',
    'timeallowed' => 'int',
  ),
  'SolrQuery::toString' => 
  array (
    0 => 'string',
    'url_encode=' => 'bool',
  ),
  'SolrQuery::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'SolrQueryResponse::__construct' => 
  array (
    0 => 'void',
  ),
  'SolrQueryResponse::__destruct' => 
  array (
    0 => 'void',
  ),
  'SolrQueryResponse::getDigestedResponse' => 
  array (
    0 => 'string',
  ),
  'SolrQueryResponse::getHttpStatus' => 
  array (
    0 => 'int',
  ),
  'SolrQueryResponse::getHttpStatusMessage' => 
  array (
    0 => 'string',
  ),
  'SolrQueryResponse::getRawRequest' => 
  array (
    0 => 'string',
  ),
  'SolrQueryResponse::getRawRequestHeaders' => 
  array (
    0 => 'string',
  ),
  'SolrQueryResponse::getRawResponse' => 
  array (
    0 => 'string',
  ),
  'SolrQueryResponse::getRawResponseHeaders' => 
  array (
    0 => 'string',
  ),
  'SolrQueryResponse::getRequestUrl' => 
  array (
    0 => 'string',
  ),
  'SolrQueryResponse::getResponse' => 
  array (
    0 => 'SolrObject',
  ),
  'SolrQueryResponse::setParseMode' => 
  array (
    0 => 'bool',
    'parser_mode=' => 'int',
  ),
  'SolrQueryResponse::success' => 
  array (
    0 => 'bool',
  ),
  'SolrResponse::getDigestedResponse' => 
  array (
    0 => 'string',
  ),
  'SolrResponse::getHttpStatus' => 
  array (
    0 => 'int',
  ),
  'SolrResponse::getHttpStatusMessage' => 
  array (
    0 => 'string',
  ),
  'SolrResponse::getRawRequest' => 
  array (
    0 => 'string',
  ),
  'SolrResponse::getRawRequestHeaders' => 
  array (
    0 => 'string',
  ),
  'SolrResponse::getRawResponse' => 
  array (
    0 => 'string',
  ),
  'SolrResponse::getRawResponseHeaders' => 
  array (
    0 => 'string',
  ),
  'SolrResponse::getRequestUrl' => 
  array (
    0 => 'string',
  ),
  'SolrResponse::getResponse' => 
  array (
    0 => 'SolrObject',
  ),
  'SolrResponse::setParseMode' => 
  array (
    0 => 'bool',
    'parser_mode=' => 'int',
  ),
  'SolrResponse::success' => 
  array (
    0 => 'bool',
  ),
  'SolrServerException::__clone' => 
  array (
    0 => 'void',
  ),
  'SolrServerException::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Exception|Throwable|null',
  ),
  'SolrServerException::__toString' => 
  array (
    0 => 'string',
  ),
  'SolrServerException::__wakeup' => 
  array (
    0 => 'void',
  ),
  'SolrServerException::getCode' => 
  array (
    0 => 'int',
  ),
  'SolrServerException::getFile' => 
  array (
    0 => 'string',
  ),
  'SolrServerException::getInternalInfo' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SolrServerException::getLine' => 
  array (
    0 => 'int',
  ),
  'SolrServerException::getMessage' => 
  array (
    0 => 'string',
  ),
  'SolrServerException::getPrevious' => 
  array (
    0 => 'Exception|Throwable',
  ),
  'SolrServerException::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'SolrServerException::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'SolrUpdateResponse::__construct' => 
  array (
    0 => 'void',
  ),
  'SolrUpdateResponse::__destruct' => 
  array (
    0 => 'void',
  ),
  'SolrUpdateResponse::getDigestedResponse' => 
  array (
    0 => 'string',
  ),
  'SolrUpdateResponse::getHttpStatus' => 
  array (
    0 => 'int',
  ),
  'SolrUpdateResponse::getHttpStatusMessage' => 
  array (
    0 => 'string',
  ),
  'SolrUpdateResponse::getRawRequest' => 
  array (
    0 => 'string',
  ),
  'SolrUpdateResponse::getRawRequestHeaders' => 
  array (
    0 => 'string',
  ),
  'SolrUpdateResponse::getRawResponse' => 
  array (
    0 => 'string',
  ),
  'SolrUpdateResponse::getRawResponseHeaders' => 
  array (
    0 => 'string',
  ),
  'SolrUpdateResponse::getRequestUrl' => 
  array (
    0 => 'string',
  ),
  'SolrUpdateResponse::getResponse' => 
  array (
    0 => 'SolrObject',
  ),
  'SolrUpdateResponse::setParseMode' => 
  array (
    0 => 'bool',
    'parser_mode=' => 'int',
  ),
  'SolrUpdateResponse::success' => 
  array (
    0 => 'bool',
  ),
  'SolrUtils::digestXmlResponse' => 
  array (
    0 => 'SolrObject',
    'xmlresponse' => 'string',
    'parse_mode=' => 'int',
  ),
  'SolrUtils::escapeQueryChars' => 
  array (
    0 => 'false|string',
    'string' => 'string',
  ),
  'SolrUtils::getSolrVersion' => 
  array (
    0 => 'string',
  ),
  'SolrUtils::queryPhrase' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'sort' => 
  array (
    0 => 'true',
    '&rw_array' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'soundex' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'SphinxClient::__construct' => 
  array (
    0 => 'void',
  ),
  'SphinxClient::addQuery' => 
  array (
    0 => 'int',
    'query' => 'string',
    'index=' => 'string',
    'comment=' => 'string',
  ),
  'SphinxClient::buildExcerpts' => 
  array (
    0 => 'array<array-key, mixed>',
    'docs' => 'array<array-key, mixed>',
    'index' => 'string',
    'words' => 'string',
    'opts=' => 'array<array-key, mixed>',
  ),
  'SphinxClient::buildKeywords' => 
  array (
    0 => 'array<array-key, mixed>',
    'query' => 'string',
    'index' => 'string',
    'hits' => 'bool',
  ),
  'SphinxClient::close' => 
  array (
    0 => 'bool',
  ),
  'SphinxClient::escapeString' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'SphinxClient::getLastError' => 
  array (
    0 => 'string',
  ),
  'SphinxClient::getLastWarning' => 
  array (
    0 => 'string',
  ),
  'SphinxClient::open' => 
  array (
    0 => 'bool',
  ),
  'SphinxClient::query' => 
  array (
    0 => 'array<array-key, mixed>',
    'query' => 'string',
    'index=' => 'string',
    'comment=' => 'string',
  ),
  'SphinxClient::resetFilters' => 
  array (
    0 => 'void',
  ),
  'SphinxClient::resetGroupBy' => 
  array (
    0 => 'void',
  ),
  'SphinxClient::runQueries' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SphinxClient::setArrayResult' => 
  array (
    0 => 'bool',
    'array_result' => 'bool',
  ),
  'SphinxClient::setConnectTimeout' => 
  array (
    0 => 'bool',
    'timeout' => 'float',
  ),
  'SphinxClient::setFieldWeights' => 
  array (
    0 => 'bool',
    'weights' => 'array<array-key, mixed>',
  ),
  'SphinxClient::setFilter' => 
  array (
    0 => 'bool',
    'attribute' => 'string',
    'values' => 'array<array-key, mixed>',
    'exclude=' => 'bool',
  ),
  'SphinxClient::setFilterFloatRange' => 
  array (
    0 => 'bool',
    'attribute' => 'string',
    'min' => 'float',
    'max' => 'float',
    'exclude=' => 'bool',
  ),
  'SphinxClient::setFilterRange' => 
  array (
    0 => 'bool',
    'attribute' => 'string',
    'min' => 'int',
    'max' => 'int',
    'exclude=' => 'bool',
  ),
  'SphinxClient::setGeoAnchor' => 
  array (
    0 => 'bool',
    'attrlat' => 'string',
    'attrlong' => 'string',
    'latitude' => 'float',
    'longitude' => 'float',
  ),
  'SphinxClient::setGroupBy' => 
  array (
    0 => 'bool',
    'attribute' => 'string',
    'func' => 'int',
    'groupsort=' => 'string',
  ),
  'SphinxClient::setGroupDistinct' => 
  array (
    0 => 'bool',
    'attribute' => 'string',
  ),
  'SphinxClient::setIDRange' => 
  array (
    0 => 'bool',
    'min' => 'int',
    'max' => 'int',
  ),
  'SphinxClient::setIndexWeights' => 
  array (
    0 => 'bool',
    'weights' => 'array<array-key, mixed>',
  ),
  'SphinxClient::setLimits' => 
  array (
    0 => 'bool',
    'offset' => 'int',
    'limit' => 'int',
    'max_matches=' => 'int',
    'cutoff=' => 'int',
  ),
  'SphinxClient::setMatchMode' => 
  array (
    0 => 'bool',
    'mode' => 'int',
  ),
  'SphinxClient::setMaxQueryTime' => 
  array (
    0 => 'bool',
    'qtime' => 'int',
  ),
  'SphinxClient::setOverride' => 
  array (
    0 => 'bool',
    'attribute' => 'string',
    'type' => 'int',
    'values' => 'array<array-key, mixed>',
  ),
  'SphinxClient::setRankingMode' => 
  array (
    0 => 'bool',
    'ranker' => 'int',
  ),
  'SphinxClient::setRetries' => 
  array (
    0 => 'bool',
    'count' => 'int',
    'delay=' => 'int',
  ),
  'SphinxClient::setSelect' => 
  array (
    0 => 'bool',
    'clause' => 'string',
  ),
  'SphinxClient::setServer' => 
  array (
    0 => 'bool',
    'server' => 'string',
    'port' => 'int',
  ),
  'SphinxClient::setSortMode' => 
  array (
    0 => 'bool',
    'mode' => 'int',
    'sortby=' => 'string',
  ),
  'SphinxClient::status' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SphinxClient::updateAttributes' => 
  array (
    0 => 'int',
    'index' => 'string',
    'attributes' => 'array<array-key, mixed>',
    'values' => 'array<array-key, mixed>',
    'mva=' => 'bool',
  ),
  'spl_autoload' => 
  array (
    0 => 'void',
    'class' => 'string',
    'file_extensions=' => 'null|string',
  ),
  'spl_autoload_call' => 
  array (
    0 => 'void',
    'class' => 'string',
  ),
  'spl_autoload_extensions' => 
  array (
    0 => 'string',
    'file_extensions=' => 'null|string',
  ),
  'spl_autoload_functions' => 
  array (
    0 => 'list<callable(string):void>',
  ),
  'spl_autoload_register' => 
  array (
    0 => 'bool',
    'callback=' => 'callable(string):void|null',
    'throw=' => 'bool',
    'prepend=' => 'bool',
  ),
  'spl_autoload_unregister' => 
  array (
    0 => 'bool',
    'callback' => 'callable(string):void',
  ),
  'spl_classes' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'spl_object_hash' => 
  array (
    0 => 'string',
    'object' => 'object',
  ),
  'spl_object_id' => 
  array (
    0 => 'int',
    'object' => 'object',
  ),
  'SplDoublyLinkedList::__construct' => 
  array (
    0 => 'void',
  ),
  'SplDoublyLinkedList::add' => 
  array (
    0 => 'void',
    'index' => 'int',
    'value' => 'mixed',
  ),
  'SplDoublyLinkedList::bottom' => 
  array (
    0 => 'mixed',
  ),
  'SplDoublyLinkedList::count' => 
  array (
    0 => 'int',
  ),
  'SplDoublyLinkedList::current' => 
  array (
    0 => 'mixed',
  ),
  'SplDoublyLinkedList::getIteratorMode' => 
  array (
    0 => 'int',
  ),
  'SplDoublyLinkedList::isEmpty' => 
  array (
    0 => 'bool',
  ),
  'SplDoublyLinkedList::key' => 
  array (
    0 => 'int',
  ),
  'SplDoublyLinkedList::next' => 
  array (
    0 => 'void',
  ),
  'SplDoublyLinkedList::offsetExists' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'SplDoublyLinkedList::offsetGet' => 
  array (
    0 => 'mixed',
    'index' => 'int',
  ),
  'SplDoublyLinkedList::offsetSet' => 
  array (
    0 => 'void',
    'index' => 'int|null',
    'value' => 'mixed',
  ),
  'SplDoublyLinkedList::offsetUnset' => 
  array (
    0 => 'void',
    'index' => 'int',
  ),
  'SplDoublyLinkedList::pop' => 
  array (
    0 => 'mixed',
  ),
  'SplDoublyLinkedList::prev' => 
  array (
    0 => 'void',
  ),
  'SplDoublyLinkedList::push' => 
  array (
    0 => 'void',
    'value' => 'mixed',
  ),
  'SplDoublyLinkedList::rewind' => 
  array (
    0 => 'void',
  ),
  'SplDoublyLinkedList::serialize' => 
  array (
    0 => 'string',
  ),
  'SplDoublyLinkedList::setIteratorMode' => 
  array (
    0 => 'int',
    'mode' => 'int',
  ),
  'SplDoublyLinkedList::shift' => 
  array (
    0 => 'mixed',
  ),
  'SplDoublyLinkedList::top' => 
  array (
    0 => 'mixed',
  ),
  'SplDoublyLinkedList::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'SplDoublyLinkedList::unshift' => 
  array (
    0 => 'void',
    'value' => 'mixed',
  ),
  'SplDoublyLinkedList::valid' => 
  array (
    0 => 'bool',
  ),
  'SplEnum::__construct' => 
  array (
    0 => 'void',
    'initial_value=' => 'mixed',
    'strict=' => 'bool',
  ),
  'SplEnum::getConstList' => 
  array (
    0 => 'array<array-key, mixed>',
    'include_default=' => 'bool',
  ),
  'SplFileInfo::__construct' => 
  array (
    0 => 'void',
    'filename' => 'string',
  ),
  'SplFileInfo::__toString' => 
  array (
    0 => 'string',
  ),
  'SplFileInfo::getATime' => 
  array (
    0 => 'false|int',
  ),
  'SplFileInfo::getBasename' => 
  array (
    0 => 'string',
    'suffix=' => 'string',
  ),
  'SplFileInfo::getCTime' => 
  array (
    0 => 'false|int',
  ),
  'SplFileInfo::getExtension' => 
  array (
    0 => 'string',
  ),
  'SplFileInfo::getFileInfo' => 
  array (
    0 => 'SplFileInfo',
    'class=' => 'class-string|null',
  ),
  'SplFileInfo::getFilename' => 
  array (
    0 => 'string',
  ),
  'SplFileInfo::getGroup' => 
  array (
    0 => 'false|int',
  ),
  'SplFileInfo::getInode' => 
  array (
    0 => 'false|int',
  ),
  'SplFileInfo::getLinkTarget' => 
  array (
    0 => 'false|string',
  ),
  'SplFileInfo::getMTime' => 
  array (
    0 => 'false|int',
  ),
  'SplFileInfo::getOwner' => 
  array (
    0 => 'false|int',
  ),
  'SplFileInfo::getPath' => 
  array (
    0 => 'string',
  ),
  'SplFileInfo::getPathInfo' => 
  array (
    0 => 'SplFileInfo|null',
    'class=' => 'class-string|null',
  ),
  'SplFileInfo::getPathname' => 
  array (
    0 => 'string',
  ),
  'SplFileInfo::getPerms' => 
  array (
    0 => 'false|int',
  ),
  'SplFileInfo::getRealPath' => 
  array (
    0 => 'false|non-falsy-string',
  ),
  'SplFileInfo::getSize' => 
  array (
    0 => 'false|int',
  ),
  'SplFileInfo::getType' => 
  array (
    0 => 'false|string',
  ),
  'SplFileInfo::isDir' => 
  array (
    0 => 'bool',
  ),
  'SplFileInfo::isExecutable' => 
  array (
    0 => 'bool',
  ),
  'SplFileInfo::isFile' => 
  array (
    0 => 'bool',
  ),
  'SplFileInfo::isLink' => 
  array (
    0 => 'bool',
  ),
  'SplFileInfo::isReadable' => 
  array (
    0 => 'bool',
  ),
  'SplFileInfo::isWritable' => 
  array (
    0 => 'bool',
  ),
  'SplFileInfo::openFile' => 
  array (
    0 => 'SplFileObject',
    'mode=' => 'string',
    'useIncludePath=' => 'bool',
    'context=' => 'null|resource',
  ),
  'SplFileInfo::setFileClass' => 
  array (
    0 => 'void',
    'class=' => 'class-string',
  ),
  'SplFileInfo::setInfoClass' => 
  array (
    0 => 'void',
    'class=' => 'class-string',
  ),
  'SplFileObject::__construct' => 
  array (
    0 => 'void',
    'filename' => 'string',
    'mode=' => 'string',
    'useIncludePath=' => 'bool',
    'context=' => 'null|resource',
  ),
  'SplFileObject::__toString' => 
  array (
    0 => 'string',
  ),
  'SplFileObject::current' => 
  array (
    0 => 'array<array-key, mixed>|false|string',
  ),
  'SplFileObject::eof' => 
  array (
    0 => 'bool',
  ),
  'SplFileObject::fflush' => 
  array (
    0 => 'bool',
  ),
  'SplFileObject::fgetc' => 
  array (
    0 => 'false|string',
  ),
  'SplFileObject::fgetcsv' => 
  array (
    0 => 'array{0?: null|string, ...<int<0, max>, string>}|false',
    'separator=' => 'string',
    'enclosure=' => 'string',
    'escape=' => 'string',
  ),
  'SplFileObject::fgets' => 
  array (
    0 => 'string',
  ),
  'SplFileObject::flock' => 
  array (
    0 => 'bool',
    'operation' => 'int',
    '&w_wouldBlock=' => 'int',
  ),
  'SplFileObject::fpassthru' => 
  array (
    0 => 'int',
  ),
  'SplFileObject::fputcsv' => 
  array (
    0 => 'false|int',
    'fields' => 'array<array-key, Stringable|null|scalar>',
    'separator=' => 'string',
    'enclosure=' => 'string',
    'escape=' => 'string',
    'eol=' => 'string',
  ),
  'SplFileObject::fread' => 
  array (
    0 => 'false|string',
    'length' => 'int',
  ),
  'SplFileObject::fscanf' => 
  array (
    0 => 'array<array-key, mixed>|int',
    'format' => 'string',
    '&...w_vars=' => 'float|int|string',
  ),
  'SplFileObject::fseek' => 
  array (
    0 => 'int',
    'offset' => 'int',
    'whence=' => 'int',
  ),
  'SplFileObject::fstat' => 
  array (
    0 => 'array{0: int, 10: int, 11: int, 12: int, 1: int, 2: int, 3: int, 4: int, 5: int, 6: int, 7: int, 8: int, 9: int, atime: int, blksize: int, blocks: int, ctime: int, dev: int, gid: int, ino: int, mode: int, mtime: int, nlink: int, rdev: int, size: int, uid: int}',
  ),
  'SplFileObject::ftell' => 
  array (
    0 => 'false|int',
  ),
  'SplFileObject::ftruncate' => 
  array (
    0 => 'bool',
    'size' => 'int',
  ),
  'SplFileObject::fwrite' => 
  array (
    0 => 'false|int',
    'data' => 'string',
    'length=' => 'int',
  ),
  'SplFileObject::getATime' => 
  array (
    0 => 'false|int',
  ),
  'SplFileObject::getBasename' => 
  array (
    0 => 'string',
    'suffix=' => 'string',
  ),
  'SplFileObject::getChildren' => 
  array (
    0 => 'null',
  ),
  'SplFileObject::getCsvControl' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SplFileObject::getCTime' => 
  array (
    0 => 'false|int',
  ),
  'SplFileObject::getCurrentLine' => 
  array (
    0 => 'string',
  ),
  'SplFileObject::getExtension' => 
  array (
    0 => 'string',
  ),
  'SplFileObject::getFileInfo' => 
  array (
    0 => 'SplFileInfo',
    'class=' => 'class-string|null',
  ),
  'SplFileObject::getFilename' => 
  array (
    0 => 'string',
  ),
  'SplFileObject::getFlags' => 
  array (
    0 => 'int',
  ),
  'SplFileObject::getGroup' => 
  array (
    0 => 'false|int',
  ),
  'SplFileObject::getInode' => 
  array (
    0 => 'false|int',
  ),
  'SplFileObject::getLinkTarget' => 
  array (
    0 => 'false|string',
  ),
  'SplFileObject::getMaxLineLen' => 
  array (
    0 => 'int',
  ),
  'SplFileObject::getMTime' => 
  array (
    0 => 'false|int',
  ),
  'SplFileObject::getOwner' => 
  array (
    0 => 'false|int',
  ),
  'SplFileObject::getPath' => 
  array (
    0 => 'string',
  ),
  'SplFileObject::getPathInfo' => 
  array (
    0 => 'SplFileInfo|null',
    'class=' => 'class-string|null',
  ),
  'SplFileObject::getPathname' => 
  array (
    0 => 'string',
  ),
  'SplFileObject::getPerms' => 
  array (
    0 => 'false|int',
  ),
  'SplFileObject::getRealPath' => 
  array (
    0 => 'false|non-falsy-string',
  ),
  'SplFileObject::getSize' => 
  array (
    0 => 'false|int',
  ),
  'SplFileObject::getType' => 
  array (
    0 => 'false|string',
  ),
  'SplFileObject::hasChildren' => 
  array (
    0 => 'false',
  ),
  'SplFileObject::isDir' => 
  array (
    0 => 'bool',
  ),
  'SplFileObject::isExecutable' => 
  array (
    0 => 'bool',
  ),
  'SplFileObject::isFile' => 
  array (
    0 => 'bool',
  ),
  'SplFileObject::isLink' => 
  array (
    0 => 'bool',
  ),
  'SplFileObject::isReadable' => 
  array (
    0 => 'bool',
  ),
  'SplFileObject::isWritable' => 
  array (
    0 => 'bool',
  ),
  'SplFileObject::key' => 
  array (
    0 => 'int',
  ),
  'SplFileObject::next' => 
  array (
    0 => 'void',
  ),
  'SplFileObject::openFile' => 
  array (
    0 => 'SplFileObject',
    'mode=' => 'string',
    'useIncludePath=' => 'bool',
    'context=' => 'null|resource',
  ),
  'SplFileObject::rewind' => 
  array (
    0 => 'void',
  ),
  'SplFileObject::seek' => 
  array (
    0 => 'void',
    'line' => 'int',
  ),
  'SplFileObject::setCsvControl' => 
  array (
    0 => 'void',
    'separator=' => 'string',
    'enclosure=' => 'string',
    'escape=' => 'string',
  ),
  'SplFileObject::setFileClass' => 
  array (
    0 => 'void',
    'class=' => 'class-string',
  ),
  'SplFileObject::setFlags' => 
  array (
    0 => 'void',
    'flags' => 'int',
  ),
  'SplFileObject::setInfoClass' => 
  array (
    0 => 'void',
    'class=' => 'class-string',
  ),
  'SplFileObject::setMaxLineLen' => 
  array (
    0 => 'void',
    'maxLength' => 'int',
  ),
  'SplFileObject::valid' => 
  array (
    0 => 'bool',
  ),
  'SplFixedArray::__construct' => 
  array (
    0 => 'void',
    'size=' => 'int',
  ),
  'SplFixedArray::__wakeup' => 
  array (
    0 => 'void',
  ),
  'SplFixedArray::count' => 
  array (
    0 => 'int',
  ),
  'SplFixedArray::fromArray' => 
  array (
    0 => 'SplFixedArray',
    'array' => 'array<array-key, mixed>',
    'preserveKeys=' => 'bool',
  ),
  'SplFixedArray::getIterator' => 
  array (
    0 => 'Iterator',
  ),
  'SplFixedArray::getSize' => 
  array (
    0 => 'int',
  ),
  'SplFixedArray::offsetExists' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'SplFixedArray::offsetGet' => 
  array (
    0 => 'mixed',
    'index' => 'int',
  ),
  'SplFixedArray::offsetSet' => 
  array (
    0 => 'void',
    'index' => 'int',
    'value' => 'mixed',
  ),
  'SplFixedArray::offsetUnset' => 
  array (
    0 => 'void',
    'index' => 'int',
  ),
  'SplFixedArray::setSize' => 
  array (
    0 => 'bool',
    'size' => 'int',
  ),
  'SplFixedArray::toArray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SplHeap::__construct' => 
  array (
    0 => 'void',
  ),
  'SplHeap::compare' => 
  array (
    0 => 'int',
    'value1' => 'mixed',
    'value2' => 'mixed',
  ),
  'SplHeap::count' => 
  array (
    0 => 'int',
  ),
  'SplHeap::current' => 
  array (
    0 => 'mixed',
  ),
  'SplHeap::extract' => 
  array (
    0 => 'mixed',
  ),
  'SplHeap::insert' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'SplHeap::isCorrupted' => 
  array (
    0 => 'bool',
  ),
  'SplHeap::isEmpty' => 
  array (
    0 => 'bool',
  ),
  'SplHeap::key' => 
  array (
    0 => 'int',
  ),
  'SplHeap::next' => 
  array (
    0 => 'void',
  ),
  'SplHeap::recoverFromCorruption' => 
  array (
    0 => 'true',
  ),
  'SplHeap::rewind' => 
  array (
    0 => 'void',
  ),
  'SplHeap::top' => 
  array (
    0 => 'mixed',
  ),
  'SplHeap::valid' => 
  array (
    0 => 'bool',
  ),
  'SplMaxHeap::__construct' => 
  array (
    0 => 'void',
  ),
  'SplMaxHeap::compare' => 
  array (
    0 => 'int',
    'value1' => 'mixed',
    'value2' => 'mixed',
  ),
  'SplMinHeap::compare' => 
  array (
    0 => 'int',
    'value1' => 'mixed',
    'value2' => 'mixed',
  ),
  'SplMinHeap::count' => 
  array (
    0 => 'int',
  ),
  'SplMinHeap::current' => 
  array (
    0 => 'mixed',
  ),
  'SplMinHeap::extract' => 
  array (
    0 => 'mixed',
  ),
  'SplMinHeap::insert' => 
  array (
    0 => 'true',
    'value' => 'mixed',
  ),
  'SplMinHeap::isCorrupted' => 
  array (
    0 => 'bool',
  ),
  'SplMinHeap::isEmpty' => 
  array (
    0 => 'bool',
  ),
  'SplMinHeap::key' => 
  array (
    0 => 'int',
  ),
  'SplMinHeap::next' => 
  array (
    0 => 'void',
  ),
  'SplMinHeap::recoverFromCorruption' => 
  array (
    0 => 'true',
  ),
  'SplMinHeap::rewind' => 
  array (
    0 => 'void',
  ),
  'SplMinHeap::top' => 
  array (
    0 => 'mixed',
  ),
  'SplMinHeap::valid' => 
  array (
    0 => 'bool',
  ),
  'SplObjectStorage::__construct' => 
  array (
    0 => 'void',
  ),
  'SplObjectStorage::addAll' => 
  array (
    0 => 'int',
    'storage' => 'SplObjectStorage',
  ),
  'SplObjectStorage::attach' => 
  array (
    0 => 'void',
    'object' => 'object',
    'info=' => 'mixed',
  ),
  'SplObjectStorage::contains' => 
  array (
    0 => 'bool',
    'object' => 'object',
  ),
  'SplObjectStorage::count' => 
  array (
    0 => 'int',
    'mode=' => 'int',
  ),
  'SplObjectStorage::current' => 
  array (
    0 => 'object',
  ),
  'SplObjectStorage::detach' => 
  array (
    0 => 'void',
    'object' => 'object',
  ),
  'SplObjectStorage::getHash' => 
  array (
    0 => 'string',
    'object' => 'object',
  ),
  'SplObjectStorage::getInfo' => 
  array (
    0 => 'mixed',
  ),
  'SplObjectStorage::key' => 
  array (
    0 => 'int',
  ),
  'SplObjectStorage::next' => 
  array (
    0 => 'void',
  ),
  'SplObjectStorage::offsetExists' => 
  array (
    0 => 'bool',
    'object' => 'object',
  ),
  'SplObjectStorage::offsetGet' => 
  array (
    0 => 'mixed',
    'object' => 'object',
  ),
  'SplObjectStorage::offsetSet' => 
  array (
    0 => 'void',
    'object' => 'object',
    'info=' => 'mixed',
  ),
  'SplObjectStorage::offsetUnset' => 
  array (
    0 => 'void',
    'object' => 'object',
  ),
  'SplObjectStorage::removeAll' => 
  array (
    0 => 'int',
    'storage' => 'SplObjectStorage',
  ),
  'SplObjectStorage::removeAllExcept' => 
  array (
    0 => 'int',
    'storage' => 'SplObjectStorage',
  ),
  'SplObjectStorage::rewind' => 
  array (
    0 => 'void',
  ),
  'SplObjectStorage::serialize' => 
  array (
    0 => 'string',
  ),
  'SplObjectStorage::setInfo' => 
  array (
    0 => 'void',
    'info' => 'mixed',
  ),
  'SplObjectStorage::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'SplObjectStorage::valid' => 
  array (
    0 => 'bool',
  ),
  'SplObserver::update' => 
  array (
    0 => 'void',
    'subject' => 'SplSubject',
  ),
  'SplPriorityQueue::__construct' => 
  array (
    0 => 'void',
  ),
  'SplPriorityQueue::compare' => 
  array (
    0 => 'int',
    'priority1' => 'mixed',
    'priority2' => 'mixed',
  ),
  'SplPriorityQueue::count' => 
  array (
    0 => 'int',
  ),
  'SplPriorityQueue::current' => 
  array (
    0 => 'mixed',
  ),
  'SplPriorityQueue::extract' => 
  array (
    0 => 'mixed',
  ),
  'SplPriorityQueue::getExtractFlags' => 
  array (
    0 => 'int',
  ),
  'SplPriorityQueue::insert' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
    'priority' => 'mixed',
  ),
  'SplPriorityQueue::isCorrupted' => 
  array (
    0 => 'bool',
  ),
  'SplPriorityQueue::isEmpty' => 
  array (
    0 => 'bool',
  ),
  'SplPriorityQueue::key' => 
  array (
    0 => 'int',
  ),
  'SplPriorityQueue::next' => 
  array (
    0 => 'void',
  ),
  'SplPriorityQueue::recoverFromCorruption' => 
  array (
    0 => 'void',
  ),
  'SplPriorityQueue::rewind' => 
  array (
    0 => 'void',
  ),
  'SplPriorityQueue::setExtractFlags' => 
  array (
    0 => 'int',
    'flags' => 'int',
  ),
  'SplPriorityQueue::top' => 
  array (
    0 => 'mixed',
  ),
  'SplPriorityQueue::valid' => 
  array (
    0 => 'bool',
  ),
  'SplQueue::dequeue' => 
  array (
    0 => 'mixed',
  ),
  'SplQueue::enqueue' => 
  array (
    0 => 'void',
    'value' => 'mixed',
  ),
  'SplQueue::getIteratorMode' => 
  array (
    0 => 'int',
  ),
  'SplQueue::isEmpty' => 
  array (
    0 => 'bool',
  ),
  'SplQueue::key' => 
  array (
    0 => 'int',
  ),
  'SplQueue::next' => 
  array (
    0 => 'void',
  ),
  'SplQueue::offsetExists' => 
  array (
    0 => 'bool',
    'index' => 'mixed',
  ),
  'SplQueue::offsetGet' => 
  array (
    0 => 'mixed',
    'index' => 'mixed',
  ),
  'SplQueue::offsetSet' => 
  array (
    0 => 'void',
    'index' => 'int|null',
    'value' => 'mixed',
  ),
  'SplQueue::offsetUnset' => 
  array (
    0 => 'void',
    'index' => 'mixed',
  ),
  'SplQueue::pop' => 
  array (
    0 => 'mixed',
  ),
  'SplQueue::prev' => 
  array (
    0 => 'void',
  ),
  'SplQueue::push' => 
  array (
    0 => 'void',
    'value' => 'mixed',
  ),
  'SplQueue::rewind' => 
  array (
    0 => 'void',
  ),
  'SplQueue::serialize' => 
  array (
    0 => 'string',
  ),
  'SplQueue::setIteratorMode' => 
  array (
    0 => 'int',
    'mode' => 'int',
  ),
  'SplQueue::shift' => 
  array (
    0 => 'mixed',
  ),
  'SplQueue::top' => 
  array (
    0 => 'mixed',
  ),
  'SplQueue::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'SplQueue::unshift' => 
  array (
    0 => 'void',
    'value' => 'mixed',
  ),
  'SplQueue::valid' => 
  array (
    0 => 'bool',
  ),
  'SplStack::__construct' => 
  array (
    0 => 'void',
  ),
  'SplStack::add' => 
  array (
    0 => 'void',
    'index' => 'int',
    'value' => 'mixed',
  ),
  'SplStack::bottom' => 
  array (
    0 => 'mixed',
  ),
  'SplStack::count' => 
  array (
    0 => 'int',
  ),
  'SplStack::current' => 
  array (
    0 => 'mixed',
  ),
  'SplStack::getIteratorMode' => 
  array (
    0 => 'int',
  ),
  'SplStack::isEmpty' => 
  array (
    0 => 'bool',
  ),
  'SplStack::key' => 
  array (
    0 => 'int',
  ),
  'SplStack::next' => 
  array (
    0 => 'void',
  ),
  'SplStack::offsetExists' => 
  array (
    0 => 'bool',
    'index' => 'mixed',
  ),
  'SplStack::offsetGet' => 
  array (
    0 => 'mixed',
    'index' => 'mixed',
  ),
  'SplStack::offsetSet' => 
  array (
    0 => 'void',
    'index' => 'int|null',
    'value' => 'mixed',
  ),
  'SplStack::offsetUnset' => 
  array (
    0 => 'void',
    'index' => 'mixed',
  ),
  'SplStack::pop' => 
  array (
    0 => 'mixed',
  ),
  'SplStack::prev' => 
  array (
    0 => 'void',
  ),
  'SplStack::push' => 
  array (
    0 => 'void',
    'value' => 'mixed',
  ),
  'SplStack::rewind' => 
  array (
    0 => 'void',
  ),
  'SplStack::serialize' => 
  array (
    0 => 'string',
  ),
  'SplStack::setIteratorMode' => 
  array (
    0 => 'int',
    'mode' => 'int',
  ),
  'SplStack::shift' => 
  array (
    0 => 'mixed',
  ),
  'SplStack::top' => 
  array (
    0 => 'mixed',
  ),
  'SplStack::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'SplStack::unshift' => 
  array (
    0 => 'void',
    'value' => 'mixed',
  ),
  'SplStack::valid' => 
  array (
    0 => 'bool',
  ),
  'SplSubject::attach' => 
  array (
    0 => 'void',
    'observer' => 'SplObserver',
  ),
  'SplSubject::detach' => 
  array (
    0 => 'void',
    'observer' => 'SplObserver',
  ),
  'SplSubject::notify' => 
  array (
    0 => 'void',
  ),
  'SplTempFileObject::__construct' => 
  array (
    0 => 'void',
    'maxMemory=' => 'int',
  ),
  'SplTempFileObject::__toString' => 
  array (
    0 => 'string',
  ),
  'SplTempFileObject::current' => 
  array (
    0 => 'array<array-key, mixed>|false|string',
  ),
  'SplTempFileObject::eof' => 
  array (
    0 => 'bool',
  ),
  'SplTempFileObject::fflush' => 
  array (
    0 => 'bool',
  ),
  'SplTempFileObject::fgetc' => 
  array (
    0 => 'false|string',
  ),
  'SplTempFileObject::fgetcsv' => 
  array (
    0 => 'array{0?: null|string, ...<int<0, max>, string>}|false',
    'separator=' => 'string',
    'enclosure=' => 'string',
    'escape=' => 'string',
  ),
  'SplTempFileObject::fgets' => 
  array (
    0 => 'string',
  ),
  'SplTempFileObject::flock' => 
  array (
    0 => 'bool',
    'operation' => 'int',
    '&w_wouldBlock=' => 'int',
  ),
  'SplTempFileObject::fpassthru' => 
  array (
    0 => 'int',
  ),
  'SplTempFileObject::fputcsv' => 
  array (
    0 => 'false|int',
    'fields' => 'array<array-key, Stringable|null|scalar>',
    'separator=' => 'string',
    'enclosure=' => 'string',
    'escape=' => 'string',
    'eol=' => 'string',
  ),
  'SplTempFileObject::fread' => 
  array (
    0 => 'false|string',
    'length' => 'int',
  ),
  'SplTempFileObject::fscanf' => 
  array (
    0 => 'array<array-key, mixed>|int',
    'format' => 'string',
    '&...w_vars=' => 'float|int|string',
  ),
  'SplTempFileObject::fseek' => 
  array (
    0 => 'int',
    'offset' => 'int',
    'whence=' => 'int',
  ),
  'SplTempFileObject::fstat' => 
  array (
    0 => 'array{0: int, 10: int, 11: int, 12: int, 1: int, 2: int, 3: int, 4: int, 5: int, 6: int, 7: int, 8: int, 9: int, atime: int, blksize: int, blocks: int, ctime: int, dev: int, gid: int, ino: int, mode: int, mtime: int, nlink: int, rdev: int, size: int, uid: int}',
  ),
  'SplTempFileObject::ftell' => 
  array (
    0 => 'false|int',
  ),
  'SplTempFileObject::ftruncate' => 
  array (
    0 => 'bool',
    'size' => 'int',
  ),
  'SplTempFileObject::fwrite' => 
  array (
    0 => 'false|int',
    'data' => 'string',
    'length=' => 'int',
  ),
  'SplTempFileObject::getATime' => 
  array (
    0 => 'false|int',
  ),
  'SplTempFileObject::getBasename' => 
  array (
    0 => 'string',
    'suffix=' => 'string',
  ),
  'SplTempFileObject::getChildren' => 
  array (
    0 => 'null',
  ),
  'SplTempFileObject::getCsvControl' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SplTempFileObject::getCTime' => 
  array (
    0 => 'false|int',
  ),
  'SplTempFileObject::getCurrentLine' => 
  array (
    0 => 'string',
  ),
  'SplTempFileObject::getExtension' => 
  array (
    0 => 'string',
  ),
  'SplTempFileObject::getFileInfo' => 
  array (
    0 => 'SplFileInfo',
    'class=' => 'class-string|null',
  ),
  'SplTempFileObject::getFilename' => 
  array (
    0 => 'string',
  ),
  'SplTempFileObject::getFlags' => 
  array (
    0 => 'int',
  ),
  'SplTempFileObject::getGroup' => 
  array (
    0 => 'false|int',
  ),
  'SplTempFileObject::getInode' => 
  array (
    0 => 'false|int',
  ),
  'SplTempFileObject::getLinkTarget' => 
  array (
    0 => 'false|string',
  ),
  'SplTempFileObject::getMaxLineLen' => 
  array (
    0 => 'int',
  ),
  'SplTempFileObject::getMTime' => 
  array (
    0 => 'false|int',
  ),
  'SplTempFileObject::getOwner' => 
  array (
    0 => 'false|int',
  ),
  'SplTempFileObject::getPath' => 
  array (
    0 => 'string',
  ),
  'SplTempFileObject::getPathInfo' => 
  array (
    0 => 'SplFileInfo|null',
    'class=' => 'class-string|null',
  ),
  'SplTempFileObject::getPathname' => 
  array (
    0 => 'string',
  ),
  'SplTempFileObject::getPerms' => 
  array (
    0 => 'false|int',
  ),
  'SplTempFileObject::getRealPath' => 
  array (
    0 => 'false|non-falsy-string',
  ),
  'SplTempFileObject::getSize' => 
  array (
    0 => 'false|int',
  ),
  'SplTempFileObject::getType' => 
  array (
    0 => 'false|string',
  ),
  'SplTempFileObject::hasChildren' => 
  array (
    0 => 'false',
  ),
  'SplTempFileObject::isDir' => 
  array (
    0 => 'bool',
  ),
  'SplTempFileObject::isExecutable' => 
  array (
    0 => 'bool',
  ),
  'SplTempFileObject::isFile' => 
  array (
    0 => 'bool',
  ),
  'SplTempFileObject::isLink' => 
  array (
    0 => 'bool',
  ),
  'SplTempFileObject::isReadable' => 
  array (
    0 => 'bool',
  ),
  'SplTempFileObject::isWritable' => 
  array (
    0 => 'bool',
  ),
  'SplTempFileObject::key' => 
  array (
    0 => 'int',
  ),
  'SplTempFileObject::next' => 
  array (
    0 => 'void',
  ),
  'SplTempFileObject::openFile' => 
  array (
    0 => 'SplTempFileObject',
    'mode=' => 'string',
    'useIncludePath=' => 'bool',
    'context=' => 'null|resource',
  ),
  'SplTempFileObject::rewind' => 
  array (
    0 => 'void',
  ),
  'SplTempFileObject::seek' => 
  array (
    0 => 'void',
    'line' => 'int',
  ),
  'SplTempFileObject::setCsvControl' => 
  array (
    0 => 'void',
    'separator=' => 'string',
    'enclosure=' => 'string',
    'escape=' => 'string',
  ),
  'SplTempFileObject::setFileClass' => 
  array (
    0 => 'void',
    'class=' => 'class-string',
  ),
  'SplTempFileObject::setFlags' => 
  array (
    0 => 'void',
    'flags' => 'int',
  ),
  'SplTempFileObject::setInfoClass' => 
  array (
    0 => 'void',
    'class=' => 'class-string',
  ),
  'SplTempFileObject::setMaxLineLen' => 
  array (
    0 => 'void',
    'maxLength' => 'int',
  ),
  'SplTempFileObject::valid' => 
  array (
    0 => 'bool',
  ),
  'SplType::__construct' => 
  array (
    0 => 'void',
    'initial_value=' => 'mixed',
    'strict=' => 'bool',
  ),
  'Spoofchecker::__construct' => 
  array (
    0 => 'void',
  ),
  'Spoofchecker::areConfusable' => 
  array (
    0 => 'bool',
    'string1' => 'string',
    'string2' => 'string',
    '&w_errorCode=' => 'int',
  ),
  'Spoofchecker::isSuspicious' => 
  array (
    0 => 'bool',
    'string' => 'string',
    '&w_errorCode=' => 'int',
  ),
  'Spoofchecker::setAllowedLocales' => 
  array (
    0 => 'void',
    'locales' => 'string',
  ),
  'Spoofchecker::setChecks' => 
  array (
    0 => 'void',
    'checks' => 'int',
  ),
  'Spoofchecker::setRestrictionLevel' => 
  array (
    0 => 'void',
    'level' => 'int',
  ),
  'sprintf' => 
  array (
    0 => 'string',
    'format' => 'string',
    '...values=' => 'float|int|string',
  ),
  'SQLite3::__construct' => 
  array (
    0 => 'void',
    'filename' => 'string',
    'flags=' => 'int',
    'encryptionKey=' => 'string',
  ),
  'SQLite3::busyTimeout' => 
  array (
    0 => 'bool',
    'milliseconds' => 'int',
  ),
  'SQLite3::changes' => 
  array (
    0 => 'int',
  ),
  'SQLite3::close' => 
  array (
    0 => 'bool',
  ),
  'SQLite3::createAggregate' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'stepCallback' => 'callable',
    'finalCallback' => 'callable',
    'argCount=' => 'int',
  ),
  'SQLite3::createCollation' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'callback' => 'callable',
  ),
  'SQLite3::createFunction' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'callback' => 'callable',
    'argCount=' => 'int',
    'flags=' => 'int',
  ),
  'SQLite3::enableExceptions' => 
  array (
    0 => 'bool',
    'enable=' => 'bool',
  ),
  'SQLite3::escapeString' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'SQLite3::exec' => 
  array (
    0 => 'bool',
    'query' => 'string',
  ),
  'SQLite3::lastErrorCode' => 
  array (
    0 => 'int',
  ),
  'SQLite3::lastErrorMsg' => 
  array (
    0 => 'string',
  ),
  'SQLite3::lastInsertRowID' => 
  array (
    0 => 'int',
  ),
  'SQLite3::loadExtension' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'SQLite3::open' => 
  array (
    0 => 'void',
    'filename' => 'string',
    'flags=' => 'int',
    'encryptionKey=' => 'string',
  ),
  'SQLite3::openBlob' => 
  array (
    0 => 'false|resource',
    'table' => 'string',
    'column' => 'string',
    'rowid' => 'int',
    'database=' => 'string',
    'flags=' => 'int',
  ),
  'SQLite3::prepare' => 
  array (
    0 => 'SQLite3Stmt|false',
    'query' => 'string',
  ),
  'SQLite3::query' => 
  array (
    0 => 'SQLite3Result|false',
    'query' => 'string',
  ),
  'SQLite3::querySingle' => 
  array (
    0 => 'array<array-key, mixed>|null|scalar',
    'query' => 'string',
    'entireRow=' => 'bool',
  ),
  'SQLite3::version' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SQLite3Result::__construct' => 
  array (
    0 => 'void',
  ),
  'SQLite3Result::columnName' => 
  array (
    0 => 'string',
    'column' => 'int',
  ),
  'SQLite3Result::columnType' => 
  array (
    0 => 'int',
    'column' => 'int',
  ),
  'SQLite3Result::fetchArray' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'mode=' => 'int',
  ),
  'SQLite3Result::finalize' => 
  array (
    0 => 'bool',
  ),
  'SQLite3Result::numColumns' => 
  array (
    0 => 'int',
  ),
  'SQLite3Result::reset' => 
  array (
    0 => 'bool',
  ),
  'SQLite3Stmt::__construct' => 
  array (
    0 => 'void',
    'sqlite3' => 'sqlite3',
    'query' => 'string',
  ),
  'SQLite3Stmt::bindParam' => 
  array (
    0 => 'bool',
    'param' => 'int|string',
    '&rw_var' => 'mixed',
    'type=' => 'int',
  ),
  'SQLite3Stmt::bindValue' => 
  array (
    0 => 'bool',
    'param' => 'int|string',
    'value' => 'mixed',
    'type=' => 'int',
  ),
  'SQLite3Stmt::clear' => 
  array (
    0 => 'bool',
  ),
  'SQLite3Stmt::close' => 
  array (
    0 => 'bool',
  ),
  'SQLite3Stmt::execute' => 
  array (
    0 => 'SQLite3Result|false',
  ),
  'SQLite3Stmt::getSQL' => 
  array (
    0 => 'string',
    'expand=' => 'bool',
  ),
  'SQLite3Stmt::paramCount' => 
  array (
    0 => 'int',
  ),
  'SQLite3Stmt::readOnly' => 
  array (
    0 => 'bool',
  ),
  'SQLite3Stmt::reset' => 
  array (
    0 => 'bool',
  ),
  'sqlite_array_query' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'dbhandle' => 'resource',
    'query' => 'string',
    'result_type=' => 'int',
    'decode_binary=' => 'bool',
  ),
  'sqlite_busy_timeout' => 
  array (
    0 => 'void',
    'dbhandle' => 'resource',
    'milliseconds' => 'int',
  ),
  'sqlite_changes' => 
  array (
    0 => 'int',
    'dbhandle' => 'resource',
  ),
  'sqlite_close' => 
  array (
    0 => 'void',
    'dbhandle' => 'resource',
  ),
  'sqlite_column' => 
  array (
    0 => 'mixed',
    'result' => 'resource',
    'index_or_name' => 'mixed',
    'decode_binary=' => 'bool',
  ),
  'sqlite_create_aggregate' => 
  array (
    0 => 'void',
    'dbhandle' => 'resource',
    'function_name' => 'string',
    'step_func' => 'callable',
    'finalize_func' => 'callable',
    'num_args=' => 'int',
  ),
  'sqlite_create_function' => 
  array (
    0 => 'void',
    'dbhandle' => 'resource',
    'function_name' => 'string',
    'callback' => 'callable',
    'num_args=' => 'int',
  ),
  'sqlite_current' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'result' => 'resource',
    'result_type=' => 'int',
    'decode_binary=' => 'bool',
  ),
  'sqlite_error_string' => 
  array (
    0 => 'string',
    'error_code' => 'int',
  ),
  'sqlite_escape_string' => 
  array (
    0 => 'string',
    'item' => 'string',
  ),
  'sqlite_exec' => 
  array (
    0 => 'bool',
    'dbhandle' => 'resource',
    'query' => 'string',
    'error_msg=' => 'string',
  ),
  'sqlite_factory' => 
  array (
    0 => 'SQLiteDatabase',
    'filename' => 'string',
    'mode=' => 'int',
    'error_message=' => 'string',
  ),
  'sqlite_fetch_all' => 
  array (
    0 => 'array<array-key, mixed>',
    'result' => 'resource',
    'result_type=' => 'int',
    'decode_binary=' => 'bool',
  ),
  'sqlite_fetch_array' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'result' => 'resource',
    'result_type=' => 'int',
    'decode_binary=' => 'bool',
  ),
  'sqlite_fetch_column_types' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'table_name' => 'string',
    'dbhandle' => 'resource',
    'result_type=' => 'int',
  ),
  'sqlite_fetch_object' => 
  array (
    0 => 'object',
    'result' => 'resource',
    'class_name=' => 'string',
    'ctor_params=' => 'array<array-key, mixed>',
    'decode_binary=' => 'bool',
  ),
  'sqlite_fetch_single' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'decode_binary=' => 'bool',
  ),
  'sqlite_fetch_string' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'decode_binary' => 'bool',
  ),
  'sqlite_field_name' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'field_index' => 'int',
  ),
  'sqlite_has_more' => 
  array (
    0 => 'bool',
    'result' => 'resource',
  ),
  'sqlite_has_prev' => 
  array (
    0 => 'bool',
    'result' => 'resource',
  ),
  'sqlite_key' => 
  array (
    0 => 'int',
    'result' => 'resource',
  ),
  'sqlite_last_error' => 
  array (
    0 => 'int',
    'dbhandle' => 'resource',
  ),
  'sqlite_last_insert_rowid' => 
  array (
    0 => 'int',
    'dbhandle' => 'resource',
  ),
  'sqlite_libencoding' => 
  array (
    0 => 'string',
  ),
  'sqlite_libversion' => 
  array (
    0 => 'string',
  ),
  'sqlite_next' => 
  array (
    0 => 'bool',
    'result' => 'resource',
  ),
  'sqlite_num_fields' => 
  array (
    0 => 'int',
    'result' => 'resource',
  ),
  'sqlite_num_rows' => 
  array (
    0 => 'int',
    'result' => 'resource',
  ),
  'sqlite_open' => 
  array (
    0 => 'false|resource',
    'filename' => 'string',
    'mode=' => 'int',
    'error_message=' => 'string',
  ),
  'sqlite_popen' => 
  array (
    0 => 'false|resource',
    'filename' => 'string',
    'mode=' => 'int',
    'error_message=' => 'string',
  ),
  'sqlite_prev' => 
  array (
    0 => 'bool',
    'result' => 'resource',
  ),
  'sqlite_query' => 
  array (
    0 => 'false|resource',
    'dbhandle' => 'resource',
    'query' => 'resource|string',
    'result_type=' => 'int',
    'error_msg=' => 'string',
  ),
  'sqlite_rewind' => 
  array (
    0 => 'bool',
    'result' => 'resource',
  ),
  'sqlite_seek' => 
  array (
    0 => 'bool',
    'result' => 'resource',
    'rownum' => 'int',
  ),
  'sqlite_single_query' => 
  array (
    0 => 'array<array-key, mixed>',
    'db' => 'resource',
    'query' => 'string',
    'first_row_only=' => 'bool',
    'decode_binary=' => 'bool',
  ),
  'sqlite_udf_decode_binary' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'sqlite_udf_encode_binary' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'sqlite_unbuffered_query' => 
  array (
    0 => 'SQLiteUnbuffered|false',
    'dbhandle' => 'resource',
    'query' => 'string',
    'result_type=' => 'int',
    'error_msg=' => 'string',
  ),
  'sqlite_valid' => 
  array (
    0 => 'bool',
    'result' => 'resource',
  ),
  'SQLiteDatabase::__construct' => 
  array (
    0 => 'void',
    'filename' => 'mixed',
    'mode=' => 'int|mixed',
    '&error_message' => 'mixed',
  ),
  'SQLiteDatabase::arrayQuery' => 
  array (
    0 => 'array<array-key, mixed>',
    'query' => 'string',
    'result_type=' => 'int',
    'decode_binary=' => 'bool',
  ),
  'SQLiteDatabase::busyTimeout' => 
  array (
    0 => 'int',
    'milliseconds' => 'int',
  ),
  'SQLiteDatabase::changes' => 
  array (
    0 => 'int',
  ),
  'SQLiteDatabase::createAggregate' => 
  array (
    0 => 'mixed',
    'function_name' => 'string',
    'step_func' => 'callable',
    'finalize_func' => 'callable',
    'num_args=' => 'int',
  ),
  'SQLiteDatabase::createFunction' => 
  array (
    0 => 'mixed',
    'function_name' => 'string',
    'callback' => 'callable',
    'num_args=' => 'int',
  ),
  'SQLiteDatabase::exec' => 
  array (
    0 => 'bool',
    'query' => 'string',
    'error_msg=' => 'string',
  ),
  'SQLiteDatabase::fetchColumnTypes' => 
  array (
    0 => 'array<array-key, mixed>',
    'table_name' => 'string',
    'result_type=' => 'int',
  ),
  'SQLiteDatabase::lastError' => 
  array (
    0 => 'int',
  ),
  'SQLiteDatabase::lastInsertRowid' => 
  array (
    0 => 'int',
  ),
  'SQLiteDatabase::query' => 
  array (
    0 => 'SQLiteResult|false',
    'query' => 'string',
    'result_type=' => 'int',
    'error_msg=' => 'string',
  ),
  'SQLiteDatabase::queryExec' => 
  array (
    0 => 'bool',
    'query' => 'string',
    '&w_error_msg=' => 'string',
  ),
  'SQLiteDatabase::singleQuery' => 
  array (
    0 => 'array<array-key, mixed>',
    'query' => 'string',
    'first_row_only=' => 'bool',
    'decode_binary=' => 'bool',
  ),
  'SQLiteDatabase::unbufferedQuery' => 
  array (
    0 => 'SQLiteUnbuffered|false',
    'query' => 'string',
    'result_type=' => 'int',
    'error_msg=' => 'string',
  ),
  'SQLiteException::__clone' => 
  array (
    0 => 'void',
  ),
  'SQLiteException::__construct' => 
  array (
    0 => 'void',
    'message' => 'mixed',
    'code' => 'mixed',
    'previous' => 'mixed',
  ),
  'SQLiteException::__toString' => 
  array (
    0 => 'string',
  ),
  'SQLiteException::__wakeup' => 
  array (
    0 => 'void',
  ),
  'SQLiteException::getCode' => 
  array (
    0 => 'int',
  ),
  'SQLiteException::getFile' => 
  array (
    0 => 'string',
  ),
  'SQLiteException::getLine' => 
  array (
    0 => 'int',
  ),
  'SQLiteException::getMessage' => 
  array (
    0 => 'string',
  ),
  'SQLiteException::getPrevious' => 
  array (
    0 => 'RuntimeException|Throwable|null',
  ),
  'SQLiteException::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'SQLiteException::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'SQLiteResult::__construct' => 
  array (
    0 => 'void',
  ),
  'SQLiteResult::column' => 
  array (
    0 => 'mixed',
    'index_or_name' => 'mixed',
    'decode_binary=' => 'bool',
  ),
  'SQLiteResult::count' => 
  array (
    0 => 'int',
  ),
  'SQLiteResult::current' => 
  array (
    0 => 'array<array-key, mixed>',
    'result_type=' => 'int',
    'decode_binary=' => 'bool',
  ),
  'SQLiteResult::fetch' => 
  array (
    0 => 'array<array-key, mixed>',
    'result_type=' => 'int',
    'decode_binary=' => 'bool',
  ),
  'SQLiteResult::fetchAll' => 
  array (
    0 => 'array<array-key, mixed>',
    'result_type=' => 'int',
    'decode_binary=' => 'bool',
  ),
  'SQLiteResult::fetchObject' => 
  array (
    0 => 'object',
    'class_name=' => 'string',
    'ctor_params=' => 'array<array-key, mixed>',
    'decode_binary=' => 'bool',
  ),
  'SQLiteResult::fetchSingle' => 
  array (
    0 => 'string',
    'decode_binary=' => 'bool',
  ),
  'SQLiteResult::fieldName' => 
  array (
    0 => 'string',
    'field_index' => 'int',
  ),
  'SQLiteResult::hasPrev' => 
  array (
    0 => 'bool',
  ),
  'SQLiteResult::key' => 
  array (
    0 => 'mixed|null',
  ),
  'SQLiteResult::next' => 
  array (
    0 => 'bool',
  ),
  'SQLiteResult::numFields' => 
  array (
    0 => 'int',
  ),
  'SQLiteResult::numRows' => 
  array (
    0 => 'int',
  ),
  'SQLiteResult::prev' => 
  array (
    0 => 'bool',
  ),
  'SQLiteResult::rewind' => 
  array (
    0 => 'bool',
  ),
  'SQLiteResult::seek' => 
  array (
    0 => 'bool',
    'rownum' => 'int',
  ),
  'SQLiteResult::valid' => 
  array (
    0 => 'bool',
  ),
  'SQLiteUnbuffered::column' => 
  array (
    0 => 'void',
    'index_or_name' => 'mixed',
    'decode_binary=' => 'bool',
  ),
  'SQLiteUnbuffered::current' => 
  array (
    0 => 'array<array-key, mixed>',
    'result_type=' => 'int',
    'decode_binary=' => 'bool',
  ),
  'SQLiteUnbuffered::fetch' => 
  array (
    0 => 'array<array-key, mixed>',
    'result_type=' => 'int',
    'decode_binary=' => 'bool',
  ),
  'SQLiteUnbuffered::fetchAll' => 
  array (
    0 => 'array<array-key, mixed>',
    'result_type=' => 'int',
    'decode_binary=' => 'bool',
  ),
  'SQLiteUnbuffered::fetchObject' => 
  array (
    0 => 'object',
    'class_name=' => 'string',
    'ctor_params=' => 'array<array-key, mixed>',
    'decode_binary=' => 'bool',
  ),
  'SQLiteUnbuffered::fetchSingle' => 
  array (
    0 => 'string',
    'decode_binary=' => 'bool',
  ),
  'SQLiteUnbuffered::fieldName' => 
  array (
    0 => 'string',
    'field_index' => 'int',
  ),
  'SQLiteUnbuffered::next' => 
  array (
    0 => 'bool',
  ),
  'SQLiteUnbuffered::numFields' => 
  array (
    0 => 'int',
  ),
  'SQLiteUnbuffered::valid' => 
  array (
    0 => 'bool',
  ),
  'sqlsrv_begin_transaction' => 
  array (
    0 => 'bool',
    'conn' => 'resource',
  ),
  'sqlsrv_cancel' => 
  array (
    0 => 'bool',
    'stmt' => 'resource',
  ),
  'sqlsrv_client_info' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'conn' => 'resource',
  ),
  'sqlsrv_close' => 
  array (
    0 => 'bool',
    'conn' => 'null|resource',
  ),
  'sqlsrv_commit' => 
  array (
    0 => 'bool',
    'conn' => 'resource',
  ),
  'sqlsrv_configure' => 
  array (
    0 => 'bool',
    'setting' => 'string',
    'value' => 'mixed',
  ),
  'sqlsrv_connect' => 
  array (
    0 => 'false|resource',
    'server_name' => 'string',
    'connection_info=' => 'array<array-key, mixed>',
  ),
  'sqlsrv_errors' => 
  array (
    0 => 'array<array-key, mixed>|null',
    'errors_and_or_warnings=' => 'int',
  ),
  'sqlsrv_execute' => 
  array (
    0 => 'bool',
    'stmt' => 'resource',
  ),
  'sqlsrv_fetch' => 
  array (
    0 => 'bool|null',
    'stmt' => 'resource',
    'row=' => 'int',
    'offset=' => 'int',
  ),
  'sqlsrv_fetch_array' => 
  array (
    0 => 'array<array-key, mixed>|false|null',
    'stmt' => 'resource',
    'fetchType=' => 'int',
    'row=' => 'int',
    'offset=' => 'int',
  ),
  'sqlsrv_fetch_object' => 
  array (
    0 => 'false|null|object',
    'stmt' => 'resource',
    'className=' => 'string',
    'ctorParams=' => 'array<array-key, mixed>',
    'row=' => 'int',
    'offset=' => 'int',
  ),
  'sqlsrv_field_metadata' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'stmt' => 'resource',
  ),
  'sqlsrv_free_stmt' => 
  array (
    0 => 'bool',
    'stmt' => 'resource',
  ),
  'sqlsrv_get_config' => 
  array (
    0 => 'mixed',
    'setting' => 'string',
  ),
  'sqlsrv_get_field' => 
  array (
    0 => 'mixed',
    'stmt' => 'resource',
    'fieldIndex' => 'int',
    'getAsType=' => 'int',
  ),
  'sqlsrv_has_rows' => 
  array (
    0 => 'bool',
    'stmt' => 'resource',
  ),
  'sqlsrv_next_result' => 
  array (
    0 => 'bool|null',
    'stmt' => 'resource',
  ),
  'sqlsrv_num_fields' => 
  array (
    0 => 'false|int',
    'stmt' => 'resource',
  ),
  'sqlsrv_num_rows' => 
  array (
    0 => 'false|int',
    'stmt' => 'resource',
  ),
  'sqlsrv_prepare' => 
  array (
    0 => 'false|resource',
    'conn' => 'resource',
    'sql' => 'string',
    'params=' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'sqlsrv_query' => 
  array (
    0 => 'false|resource',
    'conn' => 'resource',
    'sql' => 'string',
    'params=' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'sqlsrv_rollback' => 
  array (
    0 => 'bool',
    'conn' => 'resource',
  ),
  'sqlsrv_rows_affected' => 
  array (
    0 => 'false|int',
    'stmt' => 'resource',
  ),
  'sqlsrv_send_stream_data' => 
  array (
    0 => 'bool',
    'stmt' => 'resource',
  ),
  'sqlsrv_server_info' => 
  array (
    0 => 'array<array-key, mixed>',
    'conn' => 'resource',
  ),
  'sqrt' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'srand' => 
  array (
    0 => 'void',
    'seed=' => 'int|null',
    'mode=' => 'int',
  ),
  'sscanf' => 
  array (
    0 => 'int|list<float|int|null|string>|null',
    'string' => 'string',
    'format' => 'string',
    '&...w_vars=' => 'float|int|null|string',
  ),
  'ssdeep_fuzzy_compare' => 
  array (
    0 => 'int',
    'signature1' => 'string',
    'signature2' => 'string',
  ),
  'ssdeep_fuzzy_hash' => 
  array (
    0 => 'string',
    'to_hash' => 'string',
  ),
  'ssdeep_fuzzy_hash_filename' => 
  array (
    0 => 'string',
    'file_name' => 'string',
  ),
  'ssh2_auth_agent' => 
  array (
    0 => 'bool',
    'session' => 'resource',
    'username' => 'string',
  ),
  'ssh2_auth_hostbased_file' => 
  array (
    0 => 'bool',
    'session' => 'resource',
    'username' => 'string',
    'hostname' => 'string',
    'pubkeyfile' => 'string',
    'privkeyfile' => 'string',
    'passphrase=' => 'string',
    'local_username=' => 'string',
  ),
  'ssh2_auth_none' => 
  array (
    0 => 'array<array-key, string>|bool',
    'session' => 'resource',
    'username' => 'string',
  ),
  'ssh2_auth_password' => 
  array (
    0 => 'bool',
    'session' => 'resource',
    'username' => 'string',
    'password' => 'string',
  ),
  'ssh2_auth_pubkey_file' => 
  array (
    0 => 'bool',
    'session' => 'resource',
    'username' => 'string',
    'pubkeyfile' => 'string',
    'privkeyfile' => 'string',
    'passphrase=' => 'string',
  ),
  'ssh2_connect' => 
  array (
    0 => 'false|resource',
    'host' => 'string',
    'port=' => 'int',
    'methods=' => 'array<array-key, mixed>',
    'callbacks=' => 'array<array-key, mixed>',
  ),
  'ssh2_disconnect' => 
  array (
    0 => 'bool',
    'session' => 'resource',
  ),
  'ssh2_exec' => 
  array (
    0 => 'false|resource',
    'session' => 'resource',
    'command' => 'string',
    'pty=' => 'string',
    'env=' => 'array<array-key, mixed>',
    'width=' => 'int',
    'height=' => 'int',
    'width_height_type=' => 'int',
  ),
  'ssh2_fetch_stream' => 
  array (
    0 => 'false|resource',
    'channel' => 'resource',
    'streamid' => 'int',
  ),
  'ssh2_fingerprint' => 
  array (
    0 => 'false|string',
    'session' => 'resource',
    'flags=' => 'int',
  ),
  'ssh2_forward_accept' => 
  array (
    0 => 'false|resource',
    'listener' => 'resource',
  ),
  'ssh2_forward_listen' => 
  array (
    0 => 'false|resource',
    'session' => 'resource',
    'port' => 'int',
    'host=' => 'string',
    'max_connections=' => 'string',
  ),
  'ssh2_methods_negotiated' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'session' => 'resource',
  ),
  'ssh2_poll' => 
  array (
    0 => 'int',
    '&polldes' => 'array<array-key, mixed>',
    'timeout=' => 'int',
  ),
  'ssh2_publickey_add' => 
  array (
    0 => 'bool',
    'pkey' => 'resource',
    'algoname' => 'string',
    'blob' => 'string',
    'overwrite=' => 'bool',
    'attributes=' => 'array<array-key, mixed>',
  ),
  'ssh2_publickey_init' => 
  array (
    0 => 'false|resource',
    'session' => 'resource',
  ),
  'ssh2_publickey_list' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'pkey' => 'resource',
  ),
  'ssh2_publickey_remove' => 
  array (
    0 => 'bool',
    'pkey' => 'resource',
    'algoname' => 'string',
    'blob' => 'string',
  ),
  'ssh2_scp_recv' => 
  array (
    0 => 'bool',
    'session' => 'resource',
    'remote_file' => 'string',
    'local_file' => 'string',
  ),
  'ssh2_scp_send' => 
  array (
    0 => 'bool',
    'session' => 'resource',
    'local_file' => 'string',
    'remote_file' => 'string',
    'create_mode=' => 'int',
  ),
  'ssh2_sftp' => 
  array (
    0 => 'false|resource',
    'session' => 'resource',
  ),
  'ssh2_sftp_chmod' => 
  array (
    0 => 'bool',
    'sftp' => 'resource',
    'filename' => 'string',
    'mode' => 'int',
  ),
  'ssh2_sftp_lstat' => 
  array (
    0 => 'array{0: int, 10: int, 11: int, 12: int, 1: int, 2: int, 3: int, 4: int, 5: int, 6: int, 7: int, 8: int, 9: int, atime: int, blksize: int, blocks: int, ctime: int, dev: int, gid: int, ino: int, mode: int, mtime: int, nlink: int, rdev: int, size: int, uid: int}|false',
    'sftp' => 'resource',
    'path' => 'string',
  ),
  'ssh2_sftp_mkdir' => 
  array (
    0 => 'bool',
    'sftp' => 'resource',
    'dirname' => 'string',
    'mode=' => 'int',
    'recursive=' => 'bool',
  ),
  'ssh2_sftp_readlink' => 
  array (
    0 => 'false|non-falsy-string',
    'sftp' => 'resource',
    'link' => 'string',
  ),
  'ssh2_sftp_realpath' => 
  array (
    0 => 'false|non-falsy-string',
    'sftp' => 'resource',
    'filename' => 'string',
  ),
  'ssh2_sftp_rename' => 
  array (
    0 => 'bool',
    'sftp' => 'resource',
    'from' => 'string',
    'to' => 'string',
  ),
  'ssh2_sftp_rmdir' => 
  array (
    0 => 'bool',
    'sftp' => 'resource',
    'dirname' => 'string',
  ),
  'ssh2_sftp_stat' => 
  array (
    0 => 'array{0: int, 10: int, 11: int, 12: int, 1: int, 2: int, 3: int, 4: int, 5: int, 6: int, 7: int, 8: int, 9: int, atime: int, blksize: int, blocks: int, ctime: int, dev: int, gid: int, ino: int, mode: int, mtime: int, nlink: int, rdev: int, size: int, uid: int}|false',
    'sftp' => 'resource',
    'path' => 'string',
  ),
  'ssh2_sftp_symlink' => 
  array (
    0 => 'bool',
    'sftp' => 'resource',
    'target' => 'string',
    'link' => 'string',
  ),
  'ssh2_sftp_unlink' => 
  array (
    0 => 'bool',
    'sftp' => 'resource',
    'filename' => 'string',
  ),
  'ssh2_shell' => 
  array (
    0 => 'false|resource',
    'session' => 'resource',
    'termtype=' => 'string',
    'env=' => 'array<array-key, mixed>',
    'width=' => 'int',
    'height=' => 'int',
    'width_height_type=' => 'int',
  ),
  'ssh2_tunnel' => 
  array (
    0 => 'false|resource',
    'session' => 'resource',
    'host' => 'string',
    'port' => 'int',
  ),
  'stat' => 
  array (
    0 => 'array{0: int, 10: int, 11: int, 12: int, 1: int, 2: int, 3: int, 4: int, 5: int, 6: int, 7: int, 8: int, 9: int, atime: int, blksize: int, blocks: int, ctime: int, dev: int, gid: int, ino: int, mode: int, mtime: int, nlink: int, rdev: int, size: int, uid: int}|false',
    'filename' => 'string',
  ),
  'stats_absolute_deviation' => 
  array (
    0 => 'float',
    'a' => 'array<array-key, mixed>',
  ),
  'stats_cdf_beta' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'par3' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_binomial' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'par3' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_cauchy' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'par3' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_chisquare' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_exponential' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_f' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'par3' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_gamma' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'par3' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_laplace' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'par3' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_logistic' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'par3' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_negative_binomial' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'par3' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_noncentral_chisquare' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'par3' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_noncentral_f' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'par3' => 'float',
    'par4' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_noncentral_t' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'par3' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_normal' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'par3' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_poisson' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_t' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_uniform' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'par3' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_weibull' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'par3' => 'float',
    'which' => 'int',
  ),
  'stats_covariance' => 
  array (
    0 => 'float',
    'a' => 'array<array-key, mixed>',
    'b' => 'array<array-key, mixed>',
  ),
  'stats_den_uniform' => 
  array (
    0 => 'float',
    'x' => 'float',
    'a' => 'float',
    'b' => 'float',
  ),
  'stats_dens_beta' => 
  array (
    0 => 'float',
    'x' => 'float',
    'a' => 'float',
    'b' => 'float',
  ),
  'stats_dens_cauchy' => 
  array (
    0 => 'float',
    'x' => 'float',
    'ave' => 'float',
    'stdev' => 'float',
  ),
  'stats_dens_chisquare' => 
  array (
    0 => 'float',
    'x' => 'float',
    'dfr' => 'float',
  ),
  'stats_dens_exponential' => 
  array (
    0 => 'float',
    'x' => 'float',
    'scale' => 'float',
  ),
  'stats_dens_f' => 
  array (
    0 => 'float',
    'x' => 'float',
    'dfr1' => 'float',
    'dfr2' => 'float',
  ),
  'stats_dens_gamma' => 
  array (
    0 => 'float',
    'x' => 'float',
    'shape' => 'float',
    'scale' => 'float',
  ),
  'stats_dens_laplace' => 
  array (
    0 => 'float',
    'x' => 'float',
    'ave' => 'float',
    'stdev' => 'float',
  ),
  'stats_dens_logistic' => 
  array (
    0 => 'float',
    'x' => 'float',
    'ave' => 'float',
    'stdev' => 'float',
  ),
  'stats_dens_negative_binomial' => 
  array (
    0 => 'float',
    'x' => 'float',
    'n' => 'float',
    'pi' => 'float',
  ),
  'stats_dens_normal' => 
  array (
    0 => 'float',
    'x' => 'float',
    'ave' => 'float',
    'stdev' => 'float',
  ),
  'stats_dens_pmf_binomial' => 
  array (
    0 => 'float',
    'x' => 'float',
    'n' => 'float',
    'pi' => 'float',
  ),
  'stats_dens_pmf_hypergeometric' => 
  array (
    0 => 'float',
    'n1' => 'float',
    'n2' => 'float',
    'N1' => 'float',
    'N2' => 'float',
  ),
  'stats_dens_pmf_negative_binomial' => 
  array (
    0 => 'float',
    'x' => 'float',
    'n' => 'float',
    'pi' => 'float',
  ),
  'stats_dens_pmf_poisson' => 
  array (
    0 => 'float',
    'x' => 'float',
    'lb' => 'float',
  ),
  'stats_dens_t' => 
  array (
    0 => 'float',
    'x' => 'float',
    'dfr' => 'float',
  ),
  'stats_dens_uniform' => 
  array (
    0 => 'float',
    'x' => 'float',
    'a' => 'float',
    'b' => 'float',
  ),
  'stats_dens_weibull' => 
  array (
    0 => 'float',
    'x' => 'float',
    'a' => 'float',
    'b' => 'float',
  ),
  'stats_harmonic_mean' => 
  array (
    0 => 'float',
    'a' => 'array<array-key, mixed>',
  ),
  'stats_kurtosis' => 
  array (
    0 => 'float',
    'a' => 'array<array-key, mixed>',
  ),
  'stats_rand_gen_beta' => 
  array (
    0 => 'float',
    'a' => 'float',
    'b' => 'float',
  ),
  'stats_rand_gen_chisquare' => 
  array (
    0 => 'float',
    'df' => 'float',
  ),
  'stats_rand_gen_exponential' => 
  array (
    0 => 'float',
    'av' => 'float',
  ),
  'stats_rand_gen_f' => 
  array (
    0 => 'float',
    'dfn' => 'float',
    'dfd' => 'float',
  ),
  'stats_rand_gen_funiform' => 
  array (
    0 => 'float',
    'low' => 'float',
    'high' => 'float',
  ),
  'stats_rand_gen_gamma' => 
  array (
    0 => 'float',
    'a' => 'float',
    'r' => 'float',
  ),
  'stats_rand_gen_ibinomial' => 
  array (
    0 => 'int',
    'n' => 'int',
    'pp' => 'float',
  ),
  'stats_rand_gen_ibinomial_negative' => 
  array (
    0 => 'int',
    'n' => 'int',
    'p' => 'float',
  ),
  'stats_rand_gen_int' => 
  array (
    0 => 'int',
  ),
  'stats_rand_gen_ipoisson' => 
  array (
    0 => 'int',
    'mu' => 'float',
  ),
  'stats_rand_gen_iuniform' => 
  array (
    0 => 'int',
    'low' => 'int',
    'high' => 'int',
  ),
  'stats_rand_gen_noncenral_chisquare' => 
  array (
    0 => 'float',
    'df' => 'float',
    'xnonc' => 'float',
  ),
  'stats_rand_gen_noncentral_chisquare' => 
  array (
    0 => 'float',
    'df' => 'float',
    'xnonc' => 'float',
  ),
  'stats_rand_gen_noncentral_f' => 
  array (
    0 => 'float',
    'dfn' => 'float',
    'dfd' => 'float',
    'xnonc' => 'float',
  ),
  'stats_rand_gen_noncentral_t' => 
  array (
    0 => 'float',
    'df' => 'float',
    'xnonc' => 'float',
  ),
  'stats_rand_gen_normal' => 
  array (
    0 => 'float',
    'av' => 'float',
    'sd' => 'float',
  ),
  'stats_rand_gen_t' => 
  array (
    0 => 'float',
    'df' => 'float',
  ),
  'stats_rand_get_seeds' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'stats_rand_phrase_to_seeds' => 
  array (
    0 => 'array<array-key, mixed>',
    'phrase' => 'string',
  ),
  'stats_rand_ranf' => 
  array (
    0 => 'float',
  ),
  'stats_rand_setall' => 
  array (
    0 => 'void',
    'iseed1' => 'int',
    'iseed2' => 'int',
  ),
  'stats_skew' => 
  array (
    0 => 'float',
    'a' => 'array<array-key, mixed>',
  ),
  'stats_standard_deviation' => 
  array (
    0 => 'float',
    'a' => 'array<array-key, mixed>',
    'sample=' => 'bool',
  ),
  'stats_stat_binomial_coef' => 
  array (
    0 => 'float',
    'x' => 'int',
    'n' => 'int',
  ),
  'stats_stat_correlation' => 
  array (
    0 => 'float',
    'array1' => 'array<array-key, mixed>',
    'array2' => 'array<array-key, mixed>',
  ),
  'stats_stat_factorial' => 
  array (
    0 => 'float',
    'n' => 'int',
  ),
  'stats_stat_gennch' => 
  array (
    0 => 'float',
    'n' => 'int',
  ),
  'stats_stat_independent_t' => 
  array (
    0 => 'float',
    'array1' => 'array<array-key, mixed>',
    'array2' => 'array<array-key, mixed>',
  ),
  'stats_stat_innerproduct' => 
  array (
    0 => 'float',
    'array1' => 'array<array-key, mixed>',
    'array2' => 'array<array-key, mixed>',
  ),
  'stats_stat_noncentral_t' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'par3' => 'float',
    'which' => 'int',
  ),
  'stats_stat_paired_t' => 
  array (
    0 => 'float',
    'array1' => 'array<array-key, mixed>',
    'array2' => 'array<array-key, mixed>',
  ),
  'stats_stat_percentile' => 
  array (
    0 => 'float',
    'arr' => 'array<array-key, mixed>',
    'perc' => 'float',
  ),
  'stats_stat_powersum' => 
  array (
    0 => 'float',
    'arr' => 'array<array-key, mixed>',
    'power' => 'float',
  ),
  'stats_variance' => 
  array (
    0 => 'float',
    'a' => 'array<array-key, mixed>',
    'sample=' => 'bool',
  ),
  'Stomp::__construct' => 
  array (
    0 => 'void',
    'broker=' => 'string',
    'username=' => 'string',
    'password=' => 'string',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'Stomp::abort' => 
  array (
    0 => 'bool',
    'transaction_id' => 'string',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'Stomp::ack' => 
  array (
    0 => 'bool',
    'msg' => 'mixed',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'Stomp::begin' => 
  array (
    0 => 'bool',
    'transaction_id' => 'string',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'Stomp::commit' => 
  array (
    0 => 'bool',
    'transaction_id' => 'string',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'Stomp::error' => 
  array (
    0 => 'string',
  ),
  'Stomp::getReadTimeout' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Stomp::getSessionId' => 
  array (
    0 => 'string',
  ),
  'Stomp::hasFrame' => 
  array (
    0 => 'bool',
  ),
  'Stomp::readFrame' => 
  array (
    0 => 'array<array-key, mixed>',
    'class_name=' => 'string',
  ),
  'Stomp::send' => 
  array (
    0 => 'bool',
    'destination' => 'string',
    'msg' => 'mixed',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'Stomp::setReadTimeout' => 
  array (
    0 => 'void',
    'seconds' => 'int',
    'microseconds=' => 'int|null',
  ),
  'Stomp::subscribe' => 
  array (
    0 => 'bool',
    'destination' => 'string',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'Stomp::unsubscribe' => 
  array (
    0 => 'bool',
    'destination' => 'string',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'stomp_abort' => 
  array (
    0 => 'bool',
    'link' => 'resource',
    'transaction_id' => 'string',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'stomp_ack' => 
  array (
    0 => 'bool',
    'link' => 'resource',
    'msg' => 'mixed',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'stomp_begin' => 
  array (
    0 => 'bool',
    'link' => 'resource',
    'transaction_id' => 'string',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'stomp_close' => 
  array (
    0 => 'bool',
    'link' => 'resource',
  ),
  'stomp_commit' => 
  array (
    0 => 'bool',
    'link' => 'resource',
    'transaction_id' => 'string',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'stomp_connect' => 
  array (
    0 => 'resource',
    'link' => 'resource',
    'broker=' => 'string',
    'username=' => 'string',
    'password=' => 'string',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'stomp_connect_error' => 
  array (
    0 => 'string',
  ),
  'stomp_error' => 
  array (
    0 => 'string',
    'link' => 'resource',
  ),
  'stomp_get_read_timeout' => 
  array (
    0 => 'array<array-key, mixed>',
    'link' => 'resource',
  ),
  'stomp_get_session_id' => 
  array (
    0 => 'string',
    'link' => 'resource',
  ),
  'stomp_has_frame' => 
  array (
    0 => 'bool',
    'link' => 'resource',
  ),
  'stomp_read_frame' => 
  array (
    0 => 'array<array-key, mixed>',
    'link' => 'resource',
    'class_name=' => 'string',
  ),
  'stomp_send' => 
  array (
    0 => 'bool',
    'link' => 'resource',
    'destination' => 'string',
    'msg' => 'mixed',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'stomp_set_read_timeout' => 
  array (
    0 => 'void',
    'link' => 'resource',
    'seconds' => 'int',
    'microseconds=' => 'int|null',
  ),
  'stomp_subscribe' => 
  array (
    0 => 'bool',
    'link' => 'resource',
    'destination' => 'string',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'stomp_unsubscribe' => 
  array (
    0 => 'bool',
    'link' => 'resource',
    'destination' => 'string',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'stomp_version' => 
  array (
    0 => 'string',
  ),
  'StompException::getDetails' => 
  array (
    0 => 'string',
  ),
  'StompFrame::__construct' => 
  array (
    0 => 'void',
    'command=' => 'string',
    'headers=' => 'array<array-key, mixed>|null',
    'body=' => 'string',
  ),
  'str_contains' => 
  array (
    0 => 'bool',
    'haystack' => 'string',
    'needle' => 'string',
  ),
  'str_ends_with' => 
  array (
    0 => 'bool',
    'haystack' => 'string',
    'needle' => 'string',
  ),
  'str_getcsv' => 
  array (
    0 => 'non-empty-list<null|string>',
    'string' => 'string',
    'separator=' => 'string',
    'enclosure=' => 'string',
    'escape=' => 'string',
  ),
  'str_ireplace' => 
  array (
    0 => 'string',
    'search' => 'string',
    'replace' => 'string',
    'subject' => 'string',
    '&w_count=' => 'int',
  ),
  'str_ireplace\'1' => 
  array (
    0 => 'array<array-key, string>',
    'search' => 'string',
    'replace' => 'string',
    'subject' => 'array<array-key, mixed>',
    '&w_count=' => 'int',
  ),
  'str_ireplace\'2' => 
  array (
    0 => 'string',
    'search' => 'array<array-key, mixed>',
    'replace' => 'array<array-key, string>|string',
    'subject' => 'string',
    '&w_count=' => 'int',
  ),
  'str_ireplace\'3' => 
  array (
    0 => 'array<array-key, string>',
    'search' => 'array<array-key, mixed>',
    'replace' => 'array<array-key, string>|string',
    'subject' => 'array<array-key, mixed>',
    '&w_count=' => 'int',
  ),
  'str_pad' => 
  array (
    0 => 'string',
    'string' => 'string',
    'length' => 'int',
    'pad_string=' => 'string',
    'pad_type=' => 'int',
  ),
  'str_repeat' => 
  array (
    0 => 'string',
    'string' => 'string',
    'times' => 'int',
  ),
  'str_replace' => 
  array (
    0 => 'string',
    'search' => 'string',
    'replace' => 'string',
    'subject' => 'string',
    '&w_count=' => 'int',
  ),
  'str_replace\'1' => 
  array (
    0 => 'array<array-key, string>',
    'search' => 'string',
    'replace' => 'string',
    'subject' => 'array<array-key, mixed>',
    '&w_count=' => 'int',
  ),
  'str_replace\'2' => 
  array (
    0 => 'string',
    'search' => 'array<array-key, mixed>',
    'replace' => 'array<array-key, string>|string',
    'subject' => 'string',
    '&w_count=' => 'int',
  ),
  'str_replace\'3' => 
  array (
    0 => 'array<array-key, string>',
    'search' => 'array<array-key, mixed>',
    'replace' => 'array<array-key, string>|string',
    'subject' => 'array<array-key, mixed>',
    '&w_count=' => 'int',
  ),
  'str_rot13' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'str_shuffle' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'str_split' => 
  array (
    0 => 'list<non-empty-string>',
    'string' => 'string',
    'length=' => 'int<1, max>',
  ),
  'str_starts_with' => 
  array (
    0 => 'bool',
    'haystack' => 'string',
    'needle' => 'string',
  ),
  'str_word_count' => 
  array (
    0 => 'array<int, string>|int',
    'string' => 'string',
    'format=' => 'int',
    'characters=' => 'null|string',
  ),
  'strcasecmp' => 
  array (
    0 => 'int<-1, 1>',
    'string1' => 'string',
    'string2' => 'string',
  ),
  'strchr' => 
  array (
    0 => 'false|string',
    'haystack' => 'string',
    'needle' => 'string',
    'before_needle=' => 'bool',
  ),
  'strcmp' => 
  array (
    0 => 'int<-1, 1>',
    'string1' => 'string',
    'string2' => 'string',
  ),
  'strcoll' => 
  array (
    0 => 'int',
    'string1' => 'string',
    'string2' => 'string',
  ),
  'strcspn' => 
  array (
    0 => 'int',
    'string' => 'string',
    'characters' => 'string',
    'offset=' => 'int',
    'length=' => 'int|null',
  ),
  'stream_bucket_append' => 
  array (
    0 => 'void',
    'brigade' => 'resource',
    'bucket' => 'object',
  ),
  'stream_bucket_make_writeable' => 
  array (
    0 => 'null|object',
    'brigade' => 'resource',
  ),
  'stream_bucket_new' => 
  array (
    0 => 'object',
    'stream' => 'resource',
    'buffer' => 'string',
  ),
  'stream_bucket_prepend' => 
  array (
    0 => 'void',
    'brigade' => 'resource',
    'bucket' => 'object',
  ),
  'stream_context_create' => 
  array (
    0 => 'resource',
    'options=' => 'array<array-key, mixed>|null',
    'params=' => 'array<array-key, mixed>|null',
  ),
  'stream_context_get_default' => 
  array (
    0 => 'resource',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'stream_context_get_options' => 
  array (
    0 => 'array<array-key, mixed>',
    'stream_or_context' => 'resource',
  ),
  'stream_context_get_params' => 
  array (
    0 => 'array{notification: string, options: array<array-key, mixed>}',
    'context' => 'resource',
  ),
  'stream_context_set_default' => 
  array (
    0 => 'resource',
    'options' => 'array<array-key, mixed>',
  ),
  'stream_context_set_option' => 
  array (
    0 => 'bool',
    'context' => 'mixed',
    'wrapper_or_options' => 'string',
    'option_name' => 'string',
    'value' => 'mixed',
  ),
  'stream_context_set_option\'1' => 
  array (
    0 => 'bool',
    'context' => 'mixed',
    'wrapper_or_options' => 'array<array-key, mixed>',
  ),
  'stream_context_set_params' => 
  array (
    0 => 'bool',
    'context' => 'resource',
    'params' => 'array<array-key, mixed>',
  ),
  'stream_copy_to_stream' => 
  array (
    0 => 'false|int',
    'from' => 'resource',
    'to' => 'resource',
    'length=' => 'int|null',
    'offset=' => 'int',
  ),
  'stream_encoding' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
    'encoding=' => 'string',
  ),
  'stream_filter_append' => 
  array (
    0 => 'false|resource',
    'stream' => 'resource',
    'filter_name' => 'string',
    'mode=' => 'int',
    'params=' => 'mixed',
  ),
  'stream_filter_prepend' => 
  array (
    0 => 'false|resource',
    'stream' => 'resource',
    'filter_name' => 'string',
    'mode=' => 'int',
    'params=' => 'mixed',
  ),
  'stream_filter_register' => 
  array (
    0 => 'bool',
    'filter_name' => 'string',
    'class' => 'string',
  ),
  'stream_filter_remove' => 
  array (
    0 => 'bool',
    'stream_filter' => 'resource',
  ),
  'stream_get_contents' => 
  array (
    0 => 'false|string',
    'stream' => 'resource',
    'length=' => 'int|null',
    'offset=' => 'int',
  ),
  'stream_get_filters' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'stream_get_line' => 
  array (
    0 => 'false|string',
    'stream' => 'resource',
    'length' => 'int',
    'ending=' => 'string',
  ),
  'stream_get_meta_data' => 
  array (
    0 => 'array{blocked: bool, crypto?: array{cipher_bits: int, cipher_name: string, cipher_version: string, protocol: string}, eof: bool, mediatype: string, mode: string, seekable: bool, stream_type: string, timed_out: bool, unread_bytes: int, uri: string, wrapper_data: mixed, wrapper_type: string}',
    'stream' => 'resource',
  ),
  'stream_get_transports' => 
  array (
    0 => 'list<string>',
  ),
  'stream_get_wrappers' => 
  array (
    0 => 'list<string>',
  ),
  'stream_is_local' => 
  array (
    0 => 'bool',
    'stream' => 'resource|string',
  ),
  'stream_isatty' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
  ),
  'stream_notification_callback' => 
  array (
    0 => 'callback',
    'notification_code' => 'int',
    'severity' => 'int',
    'message' => 'string',
    'message_code' => 'int',
    'bytes_transferred' => 'int',
    'bytes_max' => 'int',
  ),
  'stream_register_wrapper' => 
  array (
    0 => 'bool',
    'protocol' => 'string',
    'class' => 'string',
    'flags=' => 'int',
  ),
  'stream_resolve_include_path' => 
  array (
    0 => 'false|string',
    'filename' => 'string',
  ),
  'stream_select' => 
  array (
    0 => 'false|int',
    '&rw_read' => 'array<array-key, resource>|null',
    '&rw_write' => 'array<array-key, resource>|null',
    '&rw_except' => 'array<array-key, resource>|null',
    'seconds' => 'int|null',
    'microseconds=' => 'int|null',
  ),
  'stream_set_blocking' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
    'enable' => 'bool',
  ),
  'stream_set_chunk_size' => 
  array (
    0 => 'int',
    'stream' => 'resource',
    'size' => 'int',
  ),
  'stream_set_read_buffer' => 
  array (
    0 => 'int',
    'stream' => 'resource',
    'size' => 'int',
  ),
  'stream_set_timeout' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
    'seconds' => 'int',
    'microseconds=' => 'int',
  ),
  'stream_set_write_buffer' => 
  array (
    0 => 'int',
    'stream' => 'resource',
    'size' => 'int',
  ),
  'stream_socket_accept' => 
  array (
    0 => 'false|resource',
    'socket' => 'resource',
    'timeout=' => 'float|null',
    '&w_peer_name=' => 'string',
  ),
  'stream_socket_client' => 
  array (
    0 => 'false|resource',
    'address' => 'string',
    '&w_error_code=' => 'int',
    '&w_error_message=' => 'string',
    'timeout=' => 'float|null',
    'flags=' => 'int',
    'context=' => 'null|resource',
  ),
  'stream_socket_enable_crypto' => 
  array (
    0 => 'bool|int',
    'stream' => 'resource',
    'enable' => 'bool',
    'crypto_method=' => 'int|null',
    'session_stream=' => 'null|resource',
  ),
  'stream_socket_get_name' => 
  array (
    0 => 'false|string',
    'socket' => 'resource',
    'remote' => 'bool',
  ),
  'stream_socket_pair' => 
  array (
    0 => 'array<array-key, resource>|false',
    'domain' => 'int',
    'type' => 'int',
    'protocol' => 'int',
  ),
  'stream_socket_recvfrom' => 
  array (
    0 => 'false|string',
    'socket' => 'resource',
    'length' => 'int',
    'flags=' => 'int',
    '&w_address=' => 'string',
  ),
  'stream_socket_sendto' => 
  array (
    0 => 'false|int',
    'socket' => 'resource',
    'data' => 'string',
    'flags=' => 'int',
    'address=' => 'string',
  ),
  'stream_socket_server' => 
  array (
    0 => 'false|resource',
    'address' => 'string',
    '&w_error_code=' => 'int',
    '&w_error_message=' => 'string',
    'flags=' => 'int',
    'context=' => 'resource',
  ),
  'stream_socket_shutdown' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
    'mode' => 'int',
  ),
  'stream_supports_lock' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
  ),
  'stream_wrapper_register' => 
  array (
    0 => 'bool',
    'protocol' => 'string',
    'class' => 'string',
    'flags=' => 'int',
  ),
  'stream_wrapper_restore' => 
  array (
    0 => 'bool',
    'protocol' => 'string',
  ),
  'stream_wrapper_unregister' => 
  array (
    0 => 'bool',
    'protocol' => 'string',
  ),
  'streamWrapper::__construct' => 
  array (
    0 => 'void',
  ),
  'streamWrapper::__destruct' => 
  array (
    0 => 'void',
  ),
  'streamWrapper::dir_closedir' => 
  array (
    0 => 'bool',
  ),
  'streamWrapper::dir_opendir' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'options' => 'int',
  ),
  'streamWrapper::dir_readdir' => 
  array (
    0 => 'string',
  ),
  'streamWrapper::dir_rewinddir' => 
  array (
    0 => 'bool',
  ),
  'streamWrapper::mkdir' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'mode' => 'int',
    'options' => 'int',
  ),
  'streamWrapper::rename' => 
  array (
    0 => 'bool',
    'path_from' => 'string',
    'path_to' => 'string',
  ),
  'streamWrapper::rmdir' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'options' => 'int',
  ),
  'streamWrapper::stream_cast' => 
  array (
    0 => 'resource',
    'cast_as' => 'int',
  ),
  'streamWrapper::stream_close' => 
  array (
    0 => 'void',
  ),
  'streamWrapper::stream_eof' => 
  array (
    0 => 'bool',
  ),
  'streamWrapper::stream_flush' => 
  array (
    0 => 'bool',
  ),
  'streamWrapper::stream_lock' => 
  array (
    0 => 'bool',
    'operation' => 'mode',
  ),
  'streamWrapper::stream_metadata' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'option' => 'int',
    'value' => 'mixed',
  ),
  'streamWrapper::stream_open' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'mode' => 'string',
    'options' => 'int',
    'opened_path' => 'string',
  ),
  'streamWrapper::stream_read' => 
  array (
    0 => 'string',
    'count' => 'int',
  ),
  'streamWrapper::stream_seek' => 
  array (
    0 => 'bool',
    'offset' => 'int',
    'whence' => 'int',
  ),
  'streamWrapper::stream_set_option' => 
  array (
    0 => 'bool',
    'option' => 'int',
    'arg1' => 'int',
    'arg2' => 'int',
  ),
  'streamWrapper::stream_stat' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'streamWrapper::stream_tell' => 
  array (
    0 => 'int',
  ),
  'streamWrapper::stream_truncate' => 
  array (
    0 => 'bool',
    'new_size' => 'int',
  ),
  'streamWrapper::stream_write' => 
  array (
    0 => 'int',
    'data' => 'string',
  ),
  'streamWrapper::unlink' => 
  array (
    0 => 'bool',
    'path' => 'string',
  ),
  'streamWrapper::url_stat' => 
  array (
    0 => 'array<array-key, mixed>',
    'path' => 'string',
    'flags' => 'int',
  ),
  'strftime' => 
  array (
    0 => 'false|string',
    'format' => 'string',
    'timestamp=' => 'int|null',
  ),
  'strip_tags' => 
  array (
    0 => 'string',
    'string' => 'string',
    'allowed_tags=' => 'list<non-empty-string>|null|string',
  ),
  'stripcslashes' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'stripos' => 
  array (
    0 => 'false|int',
    'haystack' => 'string',
    'needle' => 'string',
    'offset=' => 'int',
  ),
  'stripslashes' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'stristr' => 
  array (
    0 => 'false|string',
    'haystack' => 'string',
    'needle' => 'string',
    'before_needle=' => 'bool',
  ),
  'strlen' => 
  array (
    0 => 'int<0, max>',
    'string' => 'string',
  ),
  'strnatcasecmp' => 
  array (
    0 => 'int<-1, 1>',
    'string1' => 'string',
    'string2' => 'string',
  ),
  'strnatcmp' => 
  array (
    0 => 'int<-1, 1>',
    'string1' => 'string',
    'string2' => 'string',
  ),
  'strncasecmp' => 
  array (
    0 => 'int<-1, 1>',
    'string1' => 'string',
    'string2' => 'string',
    'length' => 'int<0, max>',
  ),
  'strncmp' => 
  array (
    0 => 'int<-1, 1>',
    'string1' => 'string',
    'string2' => 'string',
    'length' => 'int<0, max>',
  ),
  'strpbrk' => 
  array (
    0 => 'false|string',
    'string' => 'string',
    'characters' => 'string',
  ),
  'strpos' => 
  array (
    0 => 'false|int',
    'haystack' => 'string',
    'needle' => 'string',
    'offset=' => 'int',
  ),
  'strptime' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'timestamp' => 'string',
    'format' => 'string',
  ),
  'strrchr' => 
  array (
    0 => 'false|string',
    'haystack' => 'string',
    'needle' => 'string',
    'before_needle=' => 'bool',
  ),
  'strrev' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'strripos' => 
  array (
    0 => 'false|int',
    'haystack' => 'string',
    'needle' => 'string',
    'offset=' => 'int',
  ),
  'strrpos' => 
  array (
    0 => 'false|int',
    'haystack' => 'string',
    'needle' => 'string',
    'offset=' => 'int',
  ),
  'strspn' => 
  array (
    0 => 'int',
    'string' => 'string',
    'characters' => 'string',
    'offset=' => 'int',
    'length=' => 'int|null',
  ),
  'strstr' => 
  array (
    0 => 'false|string',
    'haystack' => 'string',
    'needle' => 'string',
    'before_needle=' => 'bool',
  ),
  'strtok' => 
  array (
    0 => 'false|non-empty-string',
    'string' => 'string',
    'token' => 'string',
  ),
  'strtok\'1' => 
  array (
    0 => 'false|non-empty-string',
    'string' => 'string',
  ),
  'strtolower' => 
  array (
    0 => 'lowercase-string',
    'string' => 'string',
  ),
  'strtotime' => 
  array (
    0 => 'false|int',
    'datetime' => 'string',
    'baseTimestamp=' => 'int|null',
  ),
  'strtoupper' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'strtr' => 
  array (
    0 => 'string',
    'string' => 'string',
    'from' => 'string',
    'to' => 'string',
  ),
  'strtr\'1' => 
  array (
    0 => 'string',
    'string' => 'string',
    'from' => 'array<array-key, mixed>',
  ),
  'strval' => 
  array (
    0 => 'string',
    'value' => 'mixed',
  ),
  'styleObj::__construct' => 
  array (
    0 => 'void',
    'label' => 'labelObj',
    'style' => 'styleObj',
  ),
  'styleObj::convertToString' => 
  array (
    0 => 'string',
  ),
  'styleObj::free' => 
  array (
    0 => 'void',
  ),
  'styleObj::getBinding' => 
  array (
    0 => 'string',
    'stylebinding' => 'mixed',
  ),
  'styleObj::getGeomTransform' => 
  array (
    0 => 'string',
  ),
  'styleObj::ms_newStyleObj' => 
  array (
    0 => 'styleObj',
    'class' => 'classObj',
    'style' => 'styleObj',
  ),
  'styleObj::removeBinding' => 
  array (
    0 => 'int',
    'stylebinding' => 'mixed',
  ),
  'styleObj::set' => 
  array (
    0 => 'int',
    'property_name' => 'string',
    'new_value' => 'mixed',
  ),
  'styleObj::setBinding' => 
  array (
    0 => 'int',
    'stylebinding' => 'mixed',
    'value' => 'string',
  ),
  'styleObj::setGeomTransform' => 
  array (
    0 => 'int',
    'value' => 'string',
  ),
  'styleObj::updateFromString' => 
  array (
    0 => 'int',
    'snippet' => 'string',
  ),
  'substr' => 
  array (
    0 => 'string',
    'string' => 'string',
    'offset' => 'int',
    'length=' => 'int|null',
  ),
  'substr_compare' => 
  array (
    0 => 'int',
    'haystack' => 'string',
    'needle' => 'string',
    'offset' => 'int',
    'length=' => 'int|null',
    'case_insensitive=' => 'bool',
  ),
  'substr_count' => 
  array (
    0 => 'int',
    'haystack' => 'string',
    'needle' => 'string',
    'offset=' => 'int',
    'length=' => 'int|null',
  ),
  'substr_replace' => 
  array (
    0 => 'string',
    'string' => 'string',
    'replace' => 'array<array-key, string>|string',
    'offset' => 'array<array-key, int>|int',
    'length=' => 'array<array-key, int>|int|null',
  ),
  'substr_replace\'1' => 
  array (
    0 => 'array<array-key, string>',
    'string' => 'array<array-key, string>',
    'replace' => 'array<array-key, string>|string',
    'offset' => 'array<array-key, int>|int',
    'length=' => 'array<array-key, int>|int|null',
  ),
  'suhosin_encrypt_cookie' => 
  array (
    0 => 'false|string',
    'name' => 'string',
    'value' => 'string',
  ),
  'suhosin_get_raw_cookies' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SVM::__construct' => 
  array (
    0 => 'void',
  ),
  'svm::crossvalidate' => 
  array (
    0 => 'float',
    'problem' => 'array<array-key, mixed>',
    'number_of_folds' => 'int',
  ),
  'SVM::getOptions' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SVM::setOptions' => 
  array (
    0 => 'bool',
    'params' => 'array<array-key, mixed>',
  ),
  'svm::train' => 
  array (
    0 => 'SVMModel',
    'problem' => 'array<array-key, mixed>',
    'weights=' => 'array<array-key, mixed>',
  ),
  'SVMModel::__construct' => 
  array (
    0 => 'void',
    'filename=' => 'string',
  ),
  'SVMModel::checkProbabilityModel' => 
  array (
    0 => 'bool',
  ),
  'SVMModel::getLabels' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SVMModel::getNrClass' => 
  array (
    0 => 'int',
  ),
  'SVMModel::getSvmType' => 
  array (
    0 => 'int',
  ),
  'SVMModel::getSvrProbability' => 
  array (
    0 => 'float',
  ),
  'SVMModel::load' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'SVMModel::predict' => 
  array (
    0 => 'float',
    'data' => 'array<array-key, mixed>',
  ),
  'SVMModel::predict_probability' => 
  array (
    0 => 'float',
    'data' => 'array<array-key, mixed>',
  ),
  'SVMModel::save' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'svn_add' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'recursive=' => 'bool',
    'force=' => 'bool',
  ),
  'svn_auth_get_parameter' => 
  array (
    0 => 'null|string',
    'key' => 'string',
  ),
  'svn_auth_set_parameter' => 
  array (
    0 => 'void',
    'key' => 'string',
    'value' => 'string',
  ),
  'svn_blame' => 
  array (
    0 => 'array<array-key, mixed>',
    'repository_url' => 'string',
    'revision_no=' => 'int',
  ),
  'svn_cat' => 
  array (
    0 => 'string',
    'repos_url' => 'string',
    'revision_no=' => 'int',
  ),
  'svn_checkout' => 
  array (
    0 => 'bool',
    'repos' => 'string',
    'targetpath' => 'string',
    'revision=' => 'int',
    'flags=' => 'int',
  ),
  'svn_cleanup' => 
  array (
    0 => 'bool',
    'workingdir' => 'string',
  ),
  'svn_client_version' => 
  array (
    0 => 'string',
  ),
  'svn_commit' => 
  array (
    0 => 'array<array-key, mixed>',
    'log' => 'string',
    'targets' => 'array<array-key, mixed>',
    'dontrecurse=' => 'bool',
  ),
  'svn_delete' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'force=' => 'bool',
  ),
  'svn_diff' => 
  array (
    0 => 'array<array-key, mixed>',
    'path1' => 'string',
    'rev1' => 'int',
    'path2' => 'string',
    'rev2' => 'int',
  ),
  'svn_export' => 
  array (
    0 => 'bool',
    'frompath' => 'string',
    'topath' => 'string',
    'working_copy=' => 'bool',
    'revision_no=' => 'int',
  ),
  'svn_fs_abort_txn' => 
  array (
    0 => 'bool',
    'txn' => 'resource',
  ),
  'svn_fs_apply_text' => 
  array (
    0 => 'resource',
    'root' => 'resource',
    'path' => 'string',
  ),
  'svn_fs_begin_txn2' => 
  array (
    0 => 'resource',
    'repos' => 'resource',
    'rev' => 'int',
  ),
  'svn_fs_change_node_prop' => 
  array (
    0 => 'bool',
    'root' => 'resource',
    'path' => 'string',
    'name' => 'string',
    'value' => 'string',
  ),
  'svn_fs_check_path' => 
  array (
    0 => 'int',
    'fsroot' => 'resource',
    'path' => 'string',
  ),
  'svn_fs_contents_changed' => 
  array (
    0 => 'bool',
    'root1' => 'resource',
    'path1' => 'string',
    'root2' => 'resource',
    'path2' => 'string',
  ),
  'svn_fs_copy' => 
  array (
    0 => 'bool',
    'from_root' => 'resource',
    'from_path' => 'string',
    'to_root' => 'resource',
    'to_path' => 'string',
  ),
  'svn_fs_delete' => 
  array (
    0 => 'bool',
    'root' => 'resource',
    'path' => 'string',
  ),
  'svn_fs_dir_entries' => 
  array (
    0 => 'array<array-key, mixed>',
    'fsroot' => 'resource',
    'path' => 'string',
  ),
  'svn_fs_file_contents' => 
  array (
    0 => 'resource',
    'fsroot' => 'resource',
    'path' => 'string',
  ),
  'svn_fs_file_length' => 
  array (
    0 => 'int',
    'fsroot' => 'resource',
    'path' => 'string',
  ),
  'svn_fs_is_dir' => 
  array (
    0 => 'bool',
    'root' => 'resource',
    'path' => 'string',
  ),
  'svn_fs_is_file' => 
  array (
    0 => 'bool',
    'root' => 'resource',
    'path' => 'string',
  ),
  'svn_fs_make_dir' => 
  array (
    0 => 'bool',
    'root' => 'resource',
    'path' => 'string',
  ),
  'svn_fs_make_file' => 
  array (
    0 => 'bool',
    'root' => 'resource',
    'path' => 'string',
  ),
  'svn_fs_node_created_rev' => 
  array (
    0 => 'int',
    'fsroot' => 'resource',
    'path' => 'string',
  ),
  'svn_fs_node_prop' => 
  array (
    0 => 'string',
    'fsroot' => 'resource',
    'path' => 'string',
    'propname' => 'string',
  ),
  'svn_fs_props_changed' => 
  array (
    0 => 'bool',
    'root1' => 'resource',
    'path1' => 'string',
    'root2' => 'resource',
    'path2' => 'string',
  ),
  'svn_fs_revision_prop' => 
  array (
    0 => 'string',
    'fs' => 'resource',
    'revnum' => 'int',
    'propname' => 'string',
  ),
  'svn_fs_revision_root' => 
  array (
    0 => 'resource',
    'fs' => 'resource',
    'revnum' => 'int',
  ),
  'svn_fs_txn_root' => 
  array (
    0 => 'resource',
    'txn' => 'resource',
  ),
  'svn_fs_youngest_rev' => 
  array (
    0 => 'int',
    'fs' => 'resource',
  ),
  'svn_import' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'url' => 'string',
    'nonrecursive' => 'bool',
  ),
  'svn_log' => 
  array (
    0 => 'array<array-key, mixed>',
    'repos_url' => 'string',
    'start_revision=' => 'int',
    'end_revision=' => 'int',
    'limit=' => 'int',
    'flags=' => 'int',
  ),
  'svn_ls' => 
  array (
    0 => 'array<array-key, mixed>',
    'repos_url' => 'string',
    'revision_no=' => 'int',
    'recurse=' => 'bool',
    'peg=' => 'bool',
  ),
  'svn_mkdir' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'log_message=' => 'string',
  ),
  'svn_move' => 
  array (
    0 => 'mixed',
    'src_path' => 'string',
    'dst_path' => 'string',
    'force=' => 'bool',
  ),
  'svn_propget' => 
  array (
    0 => 'mixed',
    'path' => 'string',
    'property_name' => 'string',
    'recurse=' => 'bool',
    'revision' => 'int',
  ),
  'svn_proplist' => 
  array (
    0 => 'mixed',
    'path' => 'string',
    'recurse=' => 'bool',
    'revision' => 'int',
  ),
  'svn_repos_create' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'config=' => 'array<array-key, mixed>',
    'fsconfig=' => 'array<array-key, mixed>',
  ),
  'svn_repos_fs' => 
  array (
    0 => 'resource',
    'repos' => 'resource',
  ),
  'svn_repos_fs_begin_txn_for_commit' => 
  array (
    0 => 'resource',
    'repos' => 'resource',
    'rev' => 'int',
    'author' => 'string',
    'log_msg' => 'string',
  ),
  'svn_repos_fs_commit_txn' => 
  array (
    0 => 'int',
    'txn' => 'resource',
  ),
  'svn_repos_hotcopy' => 
  array (
    0 => 'bool',
    'repospath' => 'string',
    'destpath' => 'string',
    'cleanlogs' => 'bool',
  ),
  'svn_repos_open' => 
  array (
    0 => 'resource',
    'path' => 'string',
  ),
  'svn_repos_recover' => 
  array (
    0 => 'bool',
    'path' => 'string',
  ),
  'svn_revert' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'recursive=' => 'bool',
  ),
  'svn_status' => 
  array (
    0 => 'array<array-key, mixed>',
    'path' => 'string',
    'flags=' => 'int',
  ),
  'svn_update' => 
  array (
    0 => 'false|int',
    'path' => 'string',
    'revno=' => 'int',
    'recurse=' => 'bool',
  ),
  'swf_actiongeturl' => 
  array (
    0 => 'mixed',
    'url' => 'string',
    'target' => 'string',
  ),
  'swf_actiongotoframe' => 
  array (
    0 => 'mixed',
    'framenumber' => 'int',
  ),
  'swf_actiongotolabel' => 
  array (
    0 => 'mixed',
    'label' => 'string',
  ),
  'swf_actionnextframe' => 
  array (
    0 => 'mixed',
  ),
  'swf_actionplay' => 
  array (
    0 => 'mixed',
  ),
  'swf_actionprevframe' => 
  array (
    0 => 'mixed',
  ),
  'swf_actionsettarget' => 
  array (
    0 => 'mixed',
    'target' => 'string',
  ),
  'swf_actionstop' => 
  array (
    0 => 'mixed',
  ),
  'swf_actiontogglequality' => 
  array (
    0 => 'mixed',
  ),
  'swf_actionwaitforframe' => 
  array (
    0 => 'mixed',
    'framenumber' => 'int',
    'skipcount' => 'int',
  ),
  'swf_addbuttonrecord' => 
  array (
    0 => 'mixed',
    'states' => 'int',
    'shapeid' => 'int',
    'depth' => 'int',
  ),
  'swf_addcolor' => 
  array (
    0 => 'mixed',
    'r' => 'float',
    'g' => 'float',
    'b' => 'float',
    'a' => 'float',
  ),
  'swf_closefile' => 
  array (
    0 => 'mixed',
    'return_file=' => 'int',
  ),
  'swf_definebitmap' => 
  array (
    0 => 'mixed',
    'objid' => 'int',
    'image_name' => 'string',
  ),
  'swf_definefont' => 
  array (
    0 => 'mixed',
    'fontid' => 'int',
    'fontname' => 'string',
  ),
  'swf_defineline' => 
  array (
    0 => 'mixed',
    'objid' => 'int',
    'x1' => 'float',
    'y1' => 'float',
    'x2' => 'float',
    'y2' => 'float',
    'width' => 'float',
  ),
  'swf_definepoly' => 
  array (
    0 => 'mixed',
    'objid' => 'int',
    'coords' => 'array<array-key, mixed>',
    'npoints' => 'int',
    'width' => 'float',
  ),
  'swf_definerect' => 
  array (
    0 => 'mixed',
    'objid' => 'int',
    'x1' => 'float',
    'y1' => 'float',
    'x2' => 'float',
    'y2' => 'float',
    'width' => 'float',
  ),
  'swf_definetext' => 
  array (
    0 => 'mixed',
    'objid' => 'int',
    'string' => 'string',
    'docenter' => 'int',
  ),
  'swf_endbutton' => 
  array (
    0 => 'mixed',
  ),
  'swf_enddoaction' => 
  array (
    0 => 'mixed',
  ),
  'swf_endshape' => 
  array (
    0 => 'mixed',
  ),
  'swf_endsymbol' => 
  array (
    0 => 'mixed',
  ),
  'swf_fontsize' => 
  array (
    0 => 'mixed',
    'size' => 'float',
  ),
  'swf_fontslant' => 
  array (
    0 => 'mixed',
    'slant' => 'float',
  ),
  'swf_fonttracking' => 
  array (
    0 => 'mixed',
    'tracking' => 'float',
  ),
  'swf_getbitmapinfo' => 
  array (
    0 => 'array<array-key, mixed>',
    'bitmapid' => 'int',
  ),
  'swf_getfontinfo' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swf_getframe' => 
  array (
    0 => 'int',
  ),
  'swf_labelframe' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'swf_lookat' => 
  array (
    0 => 'mixed',
    'view_x' => 'float',
    'view_y' => 'float',
    'view_z' => 'float',
    'reference_x' => 'float',
    'reference_y' => 'float',
    'reference_z' => 'float',
    'twist' => 'float',
  ),
  'swf_modifyobject' => 
  array (
    0 => 'mixed',
    'depth' => 'int',
    'how' => 'int',
  ),
  'swf_mulcolor' => 
  array (
    0 => 'mixed',
    'r' => 'float',
    'g' => 'float',
    'b' => 'float',
    'a' => 'float',
  ),
  'swf_nextid' => 
  array (
    0 => 'int',
  ),
  'swf_oncondition' => 
  array (
    0 => 'mixed',
    'transition' => 'int',
  ),
  'swf_openfile' => 
  array (
    0 => 'mixed',
    'filename' => 'string',
    'width' => 'float',
    'height' => 'float',
    'framerate' => 'float',
    'r' => 'float',
    'g' => 'float',
    'b' => 'float',
  ),
  'swf_ortho' => 
  array (
    0 => 'mixed',
    'xmin' => 'float',
    'xmax' => 'float',
    'ymin' => 'float',
    'ymax' => 'float',
    'zmin' => 'float',
    'zmax' => 'float',
  ),
  'swf_ortho2' => 
  array (
    0 => 'mixed',
    'xmin' => 'float',
    'xmax' => 'float',
    'ymin' => 'float',
    'ymax' => 'float',
  ),
  'swf_perspective' => 
  array (
    0 => 'mixed',
    'fovy' => 'float',
    'aspect' => 'float',
    'near' => 'float',
    'far' => 'float',
  ),
  'swf_placeobject' => 
  array (
    0 => 'mixed',
    'objid' => 'int',
    'depth' => 'int',
  ),
  'swf_polarview' => 
  array (
    0 => 'mixed',
    'dist' => 'float',
    'azimuth' => 'float',
    'incidence' => 'float',
    'twist' => 'float',
  ),
  'swf_popmatrix' => 
  array (
    0 => 'mixed',
  ),
  'swf_posround' => 
  array (
    0 => 'mixed',
    'round' => 'int',
  ),
  'swf_pushmatrix' => 
  array (
    0 => 'mixed',
  ),
  'swf_removeobject' => 
  array (
    0 => 'mixed',
    'depth' => 'int',
  ),
  'swf_rotate' => 
  array (
    0 => 'mixed',
    'angle' => 'float',
    'axis' => 'string',
  ),
  'swf_scale' => 
  array (
    0 => 'mixed',
    'x' => 'float',
    'y' => 'float',
    'z' => 'float',
  ),
  'swf_setfont' => 
  array (
    0 => 'mixed',
    'fontid' => 'int',
  ),
  'swf_setframe' => 
  array (
    0 => 'mixed',
    'framenumber' => 'int',
  ),
  'swf_shapearc' => 
  array (
    0 => 'mixed',
    'x' => 'float',
    'y' => 'float',
    'r' => 'float',
    'ang1' => 'float',
    'ang2' => 'float',
  ),
  'swf_shapecurveto' => 
  array (
    0 => 'mixed',
    'x1' => 'float',
    'y1' => 'float',
    'x2' => 'float',
    'y2' => 'float',
  ),
  'swf_shapecurveto3' => 
  array (
    0 => 'mixed',
    'x1' => 'float',
    'y1' => 'float',
    'x2' => 'float',
    'y2' => 'float',
    'x3' => 'float',
    'y3' => 'float',
  ),
  'swf_shapefillbitmapclip' => 
  array (
    0 => 'mixed',
    'bitmapid' => 'int',
  ),
  'swf_shapefillbitmaptile' => 
  array (
    0 => 'mixed',
    'bitmapid' => 'int',
  ),
  'swf_shapefilloff' => 
  array (
    0 => 'mixed',
  ),
  'swf_shapefillsolid' => 
  array (
    0 => 'mixed',
    'r' => 'float',
    'g' => 'float',
    'b' => 'float',
    'a' => 'float',
  ),
  'swf_shapelinesolid' => 
  array (
    0 => 'mixed',
    'r' => 'float',
    'g' => 'float',
    'b' => 'float',
    'a' => 'float',
    'width' => 'float',
  ),
  'swf_shapelineto' => 
  array (
    0 => 'mixed',
    'x' => 'float',
    'y' => 'float',
  ),
  'swf_shapemoveto' => 
  array (
    0 => 'mixed',
    'x' => 'float',
    'y' => 'float',
  ),
  'swf_showframe' => 
  array (
    0 => 'mixed',
  ),
  'swf_startbutton' => 
  array (
    0 => 'mixed',
    'objid' => 'int',
    'type' => 'int',
  ),
  'swf_startdoaction' => 
  array (
    0 => 'mixed',
  ),
  'swf_startshape' => 
  array (
    0 => 'mixed',
    'objid' => 'int',
  ),
  'swf_startsymbol' => 
  array (
    0 => 'mixed',
    'objid' => 'int',
  ),
  'swf_textwidth' => 
  array (
    0 => 'float',
    'string' => 'string',
  ),
  'swf_translate' => 
  array (
    0 => 'mixed',
    'x' => 'float',
    'y' => 'float',
    'z' => 'float',
  ),
  'swf_viewport' => 
  array (
    0 => 'mixed',
    'xmin' => 'float',
    'xmax' => 'float',
    'ymin' => 'float',
    'ymax' => 'float',
  ),
  'SWFAction::__construct' => 
  array (
    0 => 'void',
    'script' => 'string',
  ),
  'SWFBitmap::__construct' => 
  array (
    0 => 'void',
    'file' => 'mixed',
    'alphafile=' => 'mixed',
  ),
  'SWFBitmap::getHeight' => 
  array (
    0 => 'float',
  ),
  'SWFBitmap::getWidth' => 
  array (
    0 => 'float',
  ),
  'SWFButton::__construct' => 
  array (
    0 => 'void',
  ),
  'SWFButton::addAction' => 
  array (
    0 => 'void',
    'action' => 'swfaction',
    'flags' => 'int',
  ),
  'SWFButton::addASound' => 
  array (
    0 => 'SWFSoundInstance',
    'sound' => 'swfsound',
    'flags' => 'int',
  ),
  'SWFButton::addShape' => 
  array (
    0 => 'void',
    'shape' => 'swfshape',
    'flags' => 'int',
  ),
  'SWFButton::setAction' => 
  array (
    0 => 'void',
    'action' => 'swfaction',
  ),
  'SWFButton::setDown' => 
  array (
    0 => 'void',
    'shape' => 'swfshape',
  ),
  'SWFButton::setHit' => 
  array (
    0 => 'void',
    'shape' => 'swfshape',
  ),
  'SWFButton::setMenu' => 
  array (
    0 => 'void',
    'flag' => 'int',
  ),
  'SWFButton::setOver' => 
  array (
    0 => 'void',
    'shape' => 'swfshape',
  ),
  'SWFButton::setUp' => 
  array (
    0 => 'void',
    'shape' => 'swfshape',
  ),
  'SWFDisplayItem::addAction' => 
  array (
    0 => 'void',
    'action' => 'swfaction',
    'flags' => 'int',
  ),
  'SWFDisplayItem::addColor' => 
  array (
    0 => 'void',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'a=' => 'int',
  ),
  'SWFDisplayItem::endMask' => 
  array (
    0 => 'void',
  ),
  'SWFDisplayItem::getRot' => 
  array (
    0 => 'float',
  ),
  'SWFDisplayItem::getX' => 
  array (
    0 => 'float',
  ),
  'SWFDisplayItem::getXScale' => 
  array (
    0 => 'float',
  ),
  'SWFDisplayItem::getXSkew' => 
  array (
    0 => 'float',
  ),
  'SWFDisplayItem::getY' => 
  array (
    0 => 'float',
  ),
  'SWFDisplayItem::getYScale' => 
  array (
    0 => 'float',
  ),
  'SWFDisplayItem::getYSkew' => 
  array (
    0 => 'float',
  ),
  'SWFDisplayItem::move' => 
  array (
    0 => 'void',
    'dx' => 'float',
    'dy' => 'float',
  ),
  'SWFDisplayItem::moveTo' => 
  array (
    0 => 'void',
    'x' => 'float',
    'y' => 'float',
  ),
  'SWFDisplayItem::multColor' => 
  array (
    0 => 'void',
    'red' => 'float',
    'green' => 'float',
    'blue' => 'float',
    'a=' => 'float',
  ),
  'SWFDisplayItem::remove' => 
  array (
    0 => 'void',
  ),
  'SWFDisplayItem::rotate' => 
  array (
    0 => 'void',
    'angle' => 'float',
  ),
  'SWFDisplayItem::rotateTo' => 
  array (
    0 => 'void',
    'angle' => 'float',
  ),
  'SWFDisplayItem::scale' => 
  array (
    0 => 'void',
    'dx' => 'float',
    'dy' => 'float',
  ),
  'SWFDisplayItem::scaleTo' => 
  array (
    0 => 'void',
    'x' => 'float',
    'y=' => 'float',
  ),
  'SWFDisplayItem::setDepth' => 
  array (
    0 => 'void',
    'depth' => 'int',
  ),
  'SWFDisplayItem::setMaskLevel' => 
  array (
    0 => 'void',
    'level' => 'int',
  ),
  'SWFDisplayItem::setMatrix' => 
  array (
    0 => 'void',
    'a' => 'float',
    'b' => 'float',
    'c' => 'float',
    'd' => 'float',
    'x' => 'float',
    'y' => 'float',
  ),
  'SWFDisplayItem::setName' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'SWFDisplayItem::setRatio' => 
  array (
    0 => 'void',
    'ratio' => 'float',
  ),
  'SWFDisplayItem::skewX' => 
  array (
    0 => 'void',
    'ddegrees' => 'float',
  ),
  'SWFDisplayItem::skewXTo' => 
  array (
    0 => 'void',
    'degrees' => 'float',
  ),
  'SWFDisplayItem::skewY' => 
  array (
    0 => 'void',
    'ddegrees' => 'float',
  ),
  'SWFDisplayItem::skewYTo' => 
  array (
    0 => 'void',
    'degrees' => 'float',
  ),
  'SWFFill::moveTo' => 
  array (
    0 => 'void',
    'x' => 'float',
    'y' => 'float',
  ),
  'SWFFill::rotateTo' => 
  array (
    0 => 'void',
    'angle' => 'float',
  ),
  'SWFFill::scaleTo' => 
  array (
    0 => 'void',
    'x' => 'float',
    'y=' => 'float',
  ),
  'SWFFill::skewXTo' => 
  array (
    0 => 'void',
    'x' => 'float',
  ),
  'SWFFill::skewYTo' => 
  array (
    0 => 'void',
    'y' => 'float',
  ),
  'SWFFont::__construct' => 
  array (
    0 => 'void',
    'filename' => 'string',
  ),
  'SWFFont::getAscent' => 
  array (
    0 => 'float',
  ),
  'SWFFont::getDescent' => 
  array (
    0 => 'float',
  ),
  'SWFFont::getLeading' => 
  array (
    0 => 'float',
  ),
  'SWFFont::getShape' => 
  array (
    0 => 'string',
    'code' => 'int',
  ),
  'SWFFont::getUTF8Width' => 
  array (
    0 => 'float',
    'string' => 'string',
  ),
  'SWFFont::getWidth' => 
  array (
    0 => 'float',
    'string' => 'string',
  ),
  'SWFFontChar::addChars' => 
  array (
    0 => 'void',
    'char' => 'string',
  ),
  'SWFFontChar::addUTF8Chars' => 
  array (
    0 => 'void',
    'char' => 'string',
  ),
  'SWFGradient::__construct' => 
  array (
    0 => 'void',
  ),
  'SWFGradient::addEntry' => 
  array (
    0 => 'void',
    'ratio' => 'float',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'alpha=' => 'int',
  ),
  'SWFMorph::__construct' => 
  array (
    0 => 'void',
  ),
  'SWFMorph::getShape1' => 
  array (
    0 => 'SWFShape',
  ),
  'SWFMorph::getShape2' => 
  array (
    0 => 'SWFShape',
  ),
  'SWFMovie::__construct' => 
  array (
    0 => 'void',
    'version=' => 'int',
  ),
  'SWFMovie::add' => 
  array (
    0 => 'mixed',
    'instance' => 'object',
  ),
  'SWFMovie::addExport' => 
  array (
    0 => 'void',
    'char' => 'swfcharacter',
    'name' => 'string',
  ),
  'SWFMovie::addFont' => 
  array (
    0 => 'mixed',
    'font' => 'swffont',
  ),
  'SWFMovie::importChar' => 
  array (
    0 => 'SWFSprite',
    'libswf' => 'string',
    'name' => 'string',
  ),
  'SWFMovie::importFont' => 
  array (
    0 => 'SWFFontChar',
    'libswf' => 'string',
    'name' => 'string',
  ),
  'SWFMovie::labelFrame' => 
  array (
    0 => 'void',
    'label' => 'string',
  ),
  'SWFMovie::namedAnchor' => 
  array (
    0 => 'mixed',
  ),
  'SWFMovie::nextFrame' => 
  array (
    0 => 'void',
  ),
  'SWFMovie::output' => 
  array (
    0 => 'int',
    'compression=' => 'int',
  ),
  'SWFMovie::protect' => 
  array (
    0 => 'mixed',
  ),
  'SWFMovie::remove' => 
  array (
    0 => 'void',
    'instance' => 'object',
  ),
  'SWFMovie::save' => 
  array (
    0 => 'int',
    'filename' => 'string',
    'compression=' => 'int',
  ),
  'SWFMovie::saveToFile' => 
  array (
    0 => 'int',
    'x' => 'resource',
    'compression=' => 'int',
  ),
  'SWFMovie::setbackground' => 
  array (
    0 => 'void',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
  ),
  'SWFMovie::setDimension' => 
  array (
    0 => 'void',
    'width' => 'float',
    'height' => 'float',
  ),
  'SWFMovie::setFrames' => 
  array (
    0 => 'void',
    'number' => 'int',
  ),
  'SWFMovie::setRate' => 
  array (
    0 => 'void',
    'rate' => 'float',
  ),
  'SWFMovie::startSound' => 
  array (
    0 => 'SWFSoundInstance',
    'sound' => 'swfsound',
  ),
  'SWFMovie::stopSound' => 
  array (
    0 => 'void',
    'sound' => 'swfsound',
  ),
  'SWFMovie::streamMP3' => 
  array (
    0 => 'int',
    'mp3file' => 'mixed',
    'skip=' => 'float',
  ),
  'SWFMovie::writeExports' => 
  array (
    0 => 'void',
  ),
  'SWFPrebuiltClip::__construct' => 
  array (
    0 => 'void',
    'file' => 'mixed',
  ),
  'SWFShape::__construct' => 
  array (
    0 => 'void',
  ),
  'SWFShape::addFill' => 
  array (
    0 => 'SWFFill',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'alpha=' => 'int',
    'bitmap=' => 'swfbitmap',
    'flags=' => 'int',
    'gradient=' => 'swfgradient',
  ),
  'SWFShape::addFill\'1' => 
  array (
    0 => 'SWFFill',
    'bitmap' => 'SWFBitmap',
    'flags=' => 'int',
  ),
  'SWFShape::addFill\'2' => 
  array (
    0 => 'SWFFill',
    'gradient' => 'SWFGradient',
    'flags=' => 'int',
  ),
  'SWFShape::drawArc' => 
  array (
    0 => 'void',
    'r' => 'float',
    'startangle' => 'float',
    'endangle' => 'float',
  ),
  'SWFShape::drawCircle' => 
  array (
    0 => 'void',
    'r' => 'float',
  ),
  'SWFShape::drawCubic' => 
  array (
    0 => 'int',
    'bx' => 'float',
    'by' => 'float',
    'cx' => 'float',
    'cy' => 'float',
    'dx' => 'float',
    'dy' => 'float',
  ),
  'SWFShape::drawCubicTo' => 
  array (
    0 => 'int',
    'bx' => 'float',
    'by' => 'float',
    'cx' => 'float',
    'cy' => 'float',
    'dx' => 'float',
    'dy' => 'float',
  ),
  'SWFShape::drawCurve' => 
  array (
    0 => 'int',
    'controldx' => 'float',
    'controldy' => 'float',
    'anchordx' => 'float',
    'anchordy' => 'float',
    'targetdx=' => 'float',
    'targetdy=' => 'float',
  ),
  'SWFShape::drawCurveTo' => 
  array (
    0 => 'int',
    'controlx' => 'float',
    'controly' => 'float',
    'anchorx' => 'float',
    'anchory' => 'float',
    'targetx=' => 'float',
    'targety=' => 'float',
  ),
  'SWFShape::drawGlyph' => 
  array (
    0 => 'void',
    'font' => 'swffont',
    'character' => 'string',
    'size=' => 'int',
  ),
  'SWFShape::drawLine' => 
  array (
    0 => 'void',
    'dx' => 'float',
    'dy' => 'float',
  ),
  'SWFShape::drawLineTo' => 
  array (
    0 => 'void',
    'x' => 'float',
    'y' => 'float',
  ),
  'SWFShape::movePen' => 
  array (
    0 => 'void',
    'dx' => 'float',
    'dy' => 'float',
  ),
  'SWFShape::movePenTo' => 
  array (
    0 => 'void',
    'x' => 'float',
    'y' => 'float',
  ),
  'SWFShape::setLeftFill' => 
  array (
    0 => 'mixed',
    'fill' => 'swfgradient',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'a=' => 'int',
  ),
  'SWFShape::setLine' => 
  array (
    0 => 'mixed',
    'shape' => 'swfshape',
    'width' => 'int',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'a=' => 'int',
  ),
  'SWFShape::setRightFill' => 
  array (
    0 => 'mixed',
    'fill' => 'swfgradient',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'a=' => 'int',
  ),
  'SWFSound' => 
  array (
    0 => 'SWFSound',
    'filename' => 'string',
    'flags=' => 'int',
  ),
  'SWFSound::__construct' => 
  array (
    0 => 'void',
    'filename' => 'string',
    'flags=' => 'int',
  ),
  'SWFSoundInstance::loopCount' => 
  array (
    0 => 'void',
    'point' => 'int',
  ),
  'SWFSoundInstance::loopInPoint' => 
  array (
    0 => 'void',
    'point' => 'int',
  ),
  'SWFSoundInstance::loopOutPoint' => 
  array (
    0 => 'void',
    'point' => 'int',
  ),
  'SWFSoundInstance::noMultiple' => 
  array (
    0 => 'void',
  ),
  'SWFSprite::__construct' => 
  array (
    0 => 'void',
  ),
  'SWFSprite::add' => 
  array (
    0 => 'void',
    'object' => 'object',
  ),
  'SWFSprite::labelFrame' => 
  array (
    0 => 'void',
    'label' => 'string',
  ),
  'SWFSprite::nextFrame' => 
  array (
    0 => 'void',
  ),
  'SWFSprite::remove' => 
  array (
    0 => 'void',
    'object' => 'object',
  ),
  'SWFSprite::setFrames' => 
  array (
    0 => 'void',
    'number' => 'int',
  ),
  'SWFSprite::startSound' => 
  array (
    0 => 'SWFSoundInstance',
    'sount' => 'swfsound',
  ),
  'SWFSprite::stopSound' => 
  array (
    0 => 'void',
    'sount' => 'swfsound',
  ),
  'SWFText::__construct' => 
  array (
    0 => 'void',
  ),
  'SWFText::addString' => 
  array (
    0 => 'void',
    'string' => 'string',
  ),
  'SWFText::addUTF8String' => 
  array (
    0 => 'void',
    'text' => 'string',
  ),
  'SWFText::getAscent' => 
  array (
    0 => 'float',
  ),
  'SWFText::getDescent' => 
  array (
    0 => 'float',
  ),
  'SWFText::getLeading' => 
  array (
    0 => 'float',
  ),
  'SWFText::getUTF8Width' => 
  array (
    0 => 'float',
    'string' => 'string',
  ),
  'SWFText::getWidth' => 
  array (
    0 => 'float',
    'string' => 'string',
  ),
  'SWFText::moveTo' => 
  array (
    0 => 'void',
    'x' => 'float',
    'y' => 'float',
  ),
  'SWFText::setColor' => 
  array (
    0 => 'void',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'a=' => 'int',
  ),
  'SWFText::setFont' => 
  array (
    0 => 'void',
    'font' => 'swffont',
  ),
  'SWFText::setHeight' => 
  array (
    0 => 'void',
    'height' => 'float',
  ),
  'SWFText::setSpacing' => 
  array (
    0 => 'void',
    'spacing' => 'float',
  ),
  'SWFTextField::__construct' => 
  array (
    0 => 'void',
    'flags=' => 'int',
  ),
  'SWFTextField::addChars' => 
  array (
    0 => 'void',
    'chars' => 'string',
  ),
  'SWFTextField::addString' => 
  array (
    0 => 'void',
    'string' => 'string',
  ),
  'SWFTextField::align' => 
  array (
    0 => 'void',
    'alignement' => 'int',
  ),
  'SWFTextField::setBounds' => 
  array (
    0 => 'void',
    'width' => 'float',
    'height' => 'float',
  ),
  'SWFTextField::setColor' => 
  array (
    0 => 'void',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'a=' => 'int',
  ),
  'SWFTextField::setFont' => 
  array (
    0 => 'void',
    'font' => 'swffont',
  ),
  'SWFTextField::setHeight' => 
  array (
    0 => 'void',
    'height' => 'float',
  ),
  'SWFTextField::setIndentation' => 
  array (
    0 => 'void',
    'width' => 'float',
  ),
  'SWFTextField::setLeftMargin' => 
  array (
    0 => 'void',
    'width' => 'float',
  ),
  'SWFTextField::setLineSpacing' => 
  array (
    0 => 'void',
    'height' => 'float',
  ),
  'SWFTextField::setMargins' => 
  array (
    0 => 'void',
    'left' => 'float',
    'right' => 'float',
  ),
  'SWFTextField::setName' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'SWFTextField::setPadding' => 
  array (
    0 => 'void',
    'padding' => 'float',
  ),
  'SWFTextField::setRightMargin' => 
  array (
    0 => 'void',
    'width' => 'float',
  ),
  'SWFVideoStream::__construct' => 
  array (
    0 => 'void',
    'file=' => 'string',
  ),
  'SWFVideoStream::getNumFrames' => 
  array (
    0 => 'int',
  ),
  'SWFVideoStream::setDimension' => 
  array (
    0 => 'void',
    'x' => 'int',
    'y' => 'int',
  ),
  'Swish::__construct' => 
  array (
    0 => 'void',
    'index_names' => 'string',
  ),
  'Swish::getMetaList' => 
  array (
    0 => 'array<array-key, mixed>',
    'index_name' => 'string',
  ),
  'Swish::getPropertyList' => 
  array (
    0 => 'array<array-key, mixed>',
    'index_name' => 'string',
  ),
  'Swish::prepare' => 
  array (
    0 => 'object',
    'query=' => 'string',
  ),
  'Swish::query' => 
  array (
    0 => 'object',
    'query' => 'string',
  ),
  'SwishResult::getMetaList' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'SwishResult::stem' => 
  array (
    0 => 'array<array-key, mixed>',
    'word' => 'string',
  ),
  'SwishResults::getParsedWords' => 
  array (
    0 => 'array<array-key, mixed>',
    'index_name' => 'string',
  ),
  'SwishResults::getRemovedStopwords' => 
  array (
    0 => 'array<array-key, mixed>',
    'index_name' => 'string',
  ),
  'SwishResults::nextResult' => 
  array (
    0 => 'object',
  ),
  'SwishResults::seekResult' => 
  array (
    0 => 'int',
    'position' => 'int',
  ),
  'SwishSearch::execute' => 
  array (
    0 => 'object',
    'query=' => 'string',
  ),
  'SwishSearch::resetLimit' => 
  array (
    0 => 'mixed',
  ),
  'SwishSearch::setLimit' => 
  array (
    0 => 'mixed',
    'property' => 'string',
    'low' => 'string',
    'high' => 'string',
  ),
  'SwishSearch::setPhraseDelimiter' => 
  array (
    0 => 'mixed',
    'delimiter' => 'string',
  ),
  'SwishSearch::setSort' => 
  array (
    0 => 'mixed',
    'sort' => 'string',
  ),
  'SwishSearch::setStructure' => 
  array (
    0 => 'mixed',
    'structure' => 'int',
  ),
  'swoole\\async::dnsLookup' => 
  array (
    0 => 'void',
    'hostname' => 'string',
    'callback' => 'callable',
  ),
  'swoole\\async::read' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'callback' => 'callable',
    'chunk_size=' => 'int',
    'offset=' => 'int',
  ),
  'swoole\\async::readFile' => 
  array (
    0 => 'void',
    'filename' => 'string',
    'callback' => 'callable',
  ),
  'swoole\\async::set' => 
  array (
    0 => 'void',
    'settings' => 'array<array-key, mixed>',
  ),
  'swoole\\async::write' => 
  array (
    0 => 'void',
    'filename' => 'string',
    'content' => 'string',
    'offset=' => 'int',
    'callback=' => 'callable',
  ),
  'swoole\\async::writeFile' => 
  array (
    0 => 'void',
    'filename' => 'string',
    'content' => 'string',
    'callback=' => 'callable',
    'flags=' => 'string',
  ),
  'swoole\\atomic::add' => 
  array (
    0 => 'int',
    'add_value=' => 'int',
  ),
  'swoole\\atomic::cmpset' => 
  array (
    0 => 'int',
    'cmp_value' => 'int',
    'new_value' => 'int',
  ),
  'swoole\\atomic::get' => 
  array (
    0 => 'int',
  ),
  'swoole\\atomic::set' => 
  array (
    0 => 'int',
    'value' => 'int',
  ),
  'swoole\\atomic::sub' => 
  array (
    0 => 'int',
    'sub_value=' => 'int',
  ),
  'swoole\\buffer::__destruct' => 
  array (
    0 => 'void',
  ),
  'swoole\\buffer::__toString' => 
  array (
    0 => 'string',
  ),
  'swoole\\buffer::append' => 
  array (
    0 => 'int',
    'data' => 'string',
  ),
  'swoole\\buffer::clear' => 
  array (
    0 => 'void',
  ),
  'swoole\\buffer::expand' => 
  array (
    0 => 'int',
    'size' => 'int',
  ),
  'swoole\\buffer::read' => 
  array (
    0 => 'string',
    'offset' => 'int',
    'length' => 'int',
  ),
  'swoole\\buffer::recycle' => 
  array (
    0 => 'void',
  ),
  'swoole\\buffer::substr' => 
  array (
    0 => 'string',
    'offset' => 'int',
    'length=' => 'int',
    'remove=' => 'bool',
  ),
  'swoole\\buffer::write' => 
  array (
    0 => 'void',
    'offset' => 'int',
    'data' => 'string',
  ),
  'swoole\\channel::__destruct' => 
  array (
    0 => 'void',
  ),
  'swoole\\channel::pop' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\channel::push' => 
  array (
    0 => 'bool',
    'data' => 'string',
  ),
  'swoole\\channel::stats' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\client::__destruct' => 
  array (
    0 => 'void',
  ),
  'swoole\\client::close' => 
  array (
    0 => 'bool',
    'force=' => 'bool',
  ),
  'swoole\\client::connect' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port=' => 'int',
    'timeout=' => 'int',
    'flag=' => 'int',
  ),
  'swoole\\client::getpeername' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\client::getsockname' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\client::isConnected' => 
  array (
    0 => 'bool',
  ),
  'swoole\\client::on' => 
  array (
    0 => 'void',
    'event' => 'string',
    'callback' => 'callable',
  ),
  'swoole\\client::pause' => 
  array (
    0 => 'void',
  ),
  'swoole\\client::pipe' => 
  array (
    0 => 'void',
    'socket' => 'string',
  ),
  'swoole\\client::recv' => 
  array (
    0 => 'void',
    'size=' => 'string',
    'flag=' => 'string',
  ),
  'swoole\\client::resume' => 
  array (
    0 => 'void',
  ),
  'swoole\\client::send' => 
  array (
    0 => 'int',
    'data' => 'string',
    'flag=' => 'string',
  ),
  'swoole\\client::sendfile' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'offset=' => 'int',
  ),
  'swoole\\client::sendto' => 
  array (
    0 => 'bool',
    'ip' => 'string',
    'port' => 'int',
    'data' => 'string',
  ),
  'swoole\\client::set' => 
  array (
    0 => 'void',
    'settings' => 'array<array-key, mixed>',
  ),
  'swoole\\client::sleep' => 
  array (
    0 => 'void',
  ),
  'swoole\\client::wakeup' => 
  array (
    0 => 'void',
  ),
  'swoole\\connection\\iterator::count' => 
  array (
    0 => 'int',
  ),
  'swoole\\connection\\iterator::current' => 
  array (
    0 => 'Connection',
  ),
  'swoole\\connection\\iterator::key' => 
  array (
    0 => 'int',
  ),
  'swoole\\connection\\iterator::next' => 
  array (
    0 => 'Connection',
  ),
  'swoole\\connection\\iterator::offsetExists' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'swoole\\connection\\iterator::offsetGet' => 
  array (
    0 => 'Connection',
    'index' => 'string',
  ),
  'swoole\\connection\\iterator::offsetSet' => 
  array (
    0 => 'void',
    'offset' => 'int',
    'connection' => 'mixed',
  ),
  'swoole\\connection\\iterator::offsetUnset' => 
  array (
    0 => 'void',
    'offset' => 'int',
  ),
  'swoole\\connection\\iterator::rewind' => 
  array (
    0 => 'void',
  ),
  'swoole\\connection\\iterator::valid' => 
  array (
    0 => 'bool',
  ),
  'swoole\\coroutine::call_user_func' => 
  array (
    0 => 'mixed',
    'callback' => 'callable',
    'parameter=' => 'mixed',
    '...args=' => 'mixed',
  ),
  'swoole\\coroutine::call_user_func_array' => 
  array (
    0 => 'mixed',
    'callback' => 'callable',
    'param_array' => 'array<array-key, mixed>',
  ),
  'swoole\\coroutine::cli_wait' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine::create' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine::getuid' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine::resume' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine::suspend' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\client::__destruct' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\client::close' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\client::connect' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\client::getpeername' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\client::getsockname' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\client::isConnected' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\client::recv' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\client::send' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\client::sendfile' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\client::sendto' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\client::set' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\http\\client::__destruct' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\http\\client::addFile' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\http\\client::close' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\http\\client::execute' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\http\\client::get' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\http\\client::getDefer' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\http\\client::isConnected' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\http\\client::post' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\http\\client::recv' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\http\\client::set' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\http\\client::setCookies' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\http\\client::setData' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\http\\client::setDefer' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\http\\client::setHeaders' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\http\\client::setMethod' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\mysql::__destruct' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\mysql::close' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\mysql::connect' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\mysql::getDefer' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\mysql::query' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\mysql::recv' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\mysql::setDefer' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\event::add' => 
  array (
    0 => 'bool',
    'fd' => 'int',
    'read_callback' => 'callable',
    'write_callback=' => 'callable',
    'events=' => 'string',
  ),
  'swoole\\event::defer' => 
  array (
    0 => 'void',
    'callback' => 'mixed',
  ),
  'swoole\\event::del' => 
  array (
    0 => 'bool',
    'fd' => 'string',
  ),
  'swoole\\event::exit' => 
  array (
    0 => 'void',
  ),
  'swoole\\event::set' => 
  array (
    0 => 'bool',
    'fd' => 'int',
    'read_callback=' => 'string',
    'write_callback=' => 'string',
    'events=' => 'string',
  ),
  'swoole\\event::wait' => 
  array (
    0 => 'void',
  ),
  'swoole\\event::write' => 
  array (
    0 => 'void',
    'fd' => 'string',
    'data' => 'string',
  ),
  'swoole\\http\\client::__destruct' => 
  array (
    0 => 'void',
  ),
  'swoole\\http\\client::addFile' => 
  array (
    0 => 'void',
    'path' => 'string',
    'name' => 'string',
    'type=' => 'string',
    'filename=' => 'string',
    'offset=' => 'string',
  ),
  'swoole\\http\\client::close' => 
  array (
    0 => 'void',
  ),
  'swoole\\http\\client::download' => 
  array (
    0 => 'void',
    'path' => 'string',
    'file' => 'string',
    'callback' => 'callable',
    'offset=' => 'int',
  ),
  'swoole\\http\\client::execute' => 
  array (
    0 => 'void',
    'path' => 'string',
    'callback' => 'string',
  ),
  'swoole\\http\\client::get' => 
  array (
    0 => 'void',
    'path' => 'string',
    'callback' => 'callable',
  ),
  'swoole\\http\\client::isConnected' => 
  array (
    0 => 'bool',
  ),
  'swoole\\http\\client::on' => 
  array (
    0 => 'void',
    'event_name' => 'string',
    'callback' => 'callable',
  ),
  'swoole\\http\\client::post' => 
  array (
    0 => 'void',
    'path' => 'string',
    'data' => 'string',
    'callback' => 'callable',
  ),
  'swoole\\http\\client::push' => 
  array (
    0 => 'void',
    'data' => 'string',
    'opcode=' => 'string',
    'finish=' => 'string',
  ),
  'swoole\\http\\client::set' => 
  array (
    0 => 'void',
    'settings' => 'array<array-key, mixed>',
  ),
  'swoole\\http\\client::setCookies' => 
  array (
    0 => 'void',
    'cookies' => 'array<array-key, mixed>',
  ),
  'swoole\\http\\client::setData' => 
  array (
    0 => 'ReturnType',
    'data' => 'string',
  ),
  'swoole\\http\\client::setHeaders' => 
  array (
    0 => 'void',
    'headers' => 'array<array-key, mixed>',
  ),
  'swoole\\http\\client::setMethod' => 
  array (
    0 => 'void',
    'method' => 'string',
  ),
  'swoole\\http\\client::upgrade' => 
  array (
    0 => 'void',
    'path' => 'string',
    'callback' => 'string',
  ),
  'swoole\\http\\request::__destruct' => 
  array (
    0 => 'void',
  ),
  'swoole\\http\\request::rawcontent' => 
  array (
    0 => 'string',
  ),
  'swoole\\http\\response::__destruct' => 
  array (
    0 => 'void',
  ),
  'swoole\\http\\response::cookie' => 
  array (
    0 => 'string',
    'name' => 'string',
    'value=' => 'string',
    'expires=' => 'string',
    'path=' => 'string',
    'domain=' => 'string',
    'secure=' => 'string',
    'httponly=' => 'string',
  ),
  'swoole\\http\\response::end' => 
  array (
    0 => 'void',
    'content=' => 'string',
  ),
  'swoole\\http\\response::gzip' => 
  array (
    0 => 'ReturnType',
    'compress_level=' => 'string',
  ),
  'swoole\\http\\response::header' => 
  array (
    0 => 'void',
    'key' => 'string',
    'value' => 'string',
    'ucwords=' => 'string',
  ),
  'swoole\\http\\response::initHeader' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\http\\response::rawcookie' => 
  array (
    0 => 'ReturnType',
    'name' => 'string',
    'value=' => 'string',
    'expires=' => 'string',
    'path=' => 'string',
    'domain=' => 'string',
    'secure=' => 'string',
    'httponly=' => 'string',
  ),
  'swoole\\http\\response::sendfile' => 
  array (
    0 => 'ReturnType',
    'filename' => 'string',
    'offset=' => 'int',
  ),
  'swoole\\http\\response::status' => 
  array (
    0 => 'ReturnType',
    'http_code' => 'string',
  ),
  'swoole\\http\\response::write' => 
  array (
    0 => 'void',
    'content' => 'string',
  ),
  'swoole\\http\\server::on' => 
  array (
    0 => 'void',
    'event_name' => 'string',
    'callback' => 'callable',
  ),
  'swoole\\http\\server::start' => 
  array (
    0 => 'void',
  ),
  'swoole\\lock::__destruct' => 
  array (
    0 => 'void',
  ),
  'swoole\\lock::lock' => 
  array (
    0 => 'void',
  ),
  'swoole\\lock::lock_read' => 
  array (
    0 => 'void',
  ),
  'swoole\\lock::trylock' => 
  array (
    0 => 'void',
  ),
  'swoole\\lock::trylock_read' => 
  array (
    0 => 'void',
  ),
  'swoole\\lock::unlock' => 
  array (
    0 => 'void',
  ),
  'swoole\\mmap::open' => 
  array (
    0 => 'ReturnType',
    'filename' => 'string',
    'size=' => 'string',
    'offset=' => 'string',
  ),
  'swoole\\mysql::__destruct' => 
  array (
    0 => 'void',
  ),
  'swoole\\mysql::close' => 
  array (
    0 => 'void',
  ),
  'swoole\\mysql::connect' => 
  array (
    0 => 'void',
    'server_config' => 'array<array-key, mixed>',
    'callback' => 'callable',
  ),
  'swoole\\mysql::getBuffer' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\mysql::on' => 
  array (
    0 => 'void',
    'event_name' => 'string',
    'callback' => 'callable',
  ),
  'swoole\\mysql::query' => 
  array (
    0 => 'ReturnType',
    'sql' => 'string',
    'callback' => 'callable',
  ),
  'swoole\\process::__destruct' => 
  array (
    0 => 'void',
  ),
  'swoole\\process::alarm' => 
  array (
    0 => 'void',
    'interval_usec' => 'int',
  ),
  'swoole\\process::close' => 
  array (
    0 => 'void',
  ),
  'swoole\\process::daemon' => 
  array (
    0 => 'void',
    'nochdir=' => 'bool',
    'noclose=' => 'bool',
  ),
  'swoole\\process::exec' => 
  array (
    0 => 'ReturnType',
    'exec_file' => 'string',
    'args' => 'string',
  ),
  'swoole\\process::exit' => 
  array (
    0 => 'void',
    'exit_code=' => 'string',
  ),
  'swoole\\process::freeQueue' => 
  array (
    0 => 'void',
  ),
  'swoole\\process::kill' => 
  array (
    0 => 'void',
    'pid' => 'int',
    'signal_no=' => 'string',
  ),
  'swoole\\process::name' => 
  array (
    0 => 'void',
    'process_name' => 'string',
  ),
  'swoole\\process::pop' => 
  array (
    0 => 'mixed',
    'maxsize=' => 'int',
  ),
  'swoole\\process::push' => 
  array (
    0 => 'bool',
    'data' => 'string',
  ),
  'swoole\\process::read' => 
  array (
    0 => 'string',
    'maxsize=' => 'int',
  ),
  'swoole\\process::signal' => 
  array (
    0 => 'void',
    'signal_no' => 'string',
    'callback' => 'callable',
  ),
  'swoole\\process::start' => 
  array (
    0 => 'void',
  ),
  'swoole\\process::statQueue' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\process::useQueue' => 
  array (
    0 => 'bool',
    'key' => 'int',
    'mode=' => 'int',
  ),
  'swoole\\process::wait' => 
  array (
    0 => 'array<array-key, mixed>',
    'blocking=' => 'bool',
  ),
  'swoole\\process::write' => 
  array (
    0 => 'int',
    'data' => 'string',
  ),
  'swoole\\redis\\server::format' => 
  array (
    0 => 'ReturnType',
    'type' => 'string',
    'value=' => 'string',
  ),
  'swoole\\redis\\server::setHandler' => 
  array (
    0 => 'ReturnType',
    'command' => 'string',
    'callback' => 'string',
    'number_of_string_param=' => 'string',
    'type_of_array_param=' => 'string',
  ),
  'swoole\\redis\\server::start' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\serialize::pack' => 
  array (
    0 => 'ReturnType',
    'data' => 'string',
    'is_fast=' => 'int',
  ),
  'swoole\\serialize::unpack' => 
  array (
    0 => 'ReturnType',
    'data' => 'string',
    'args=' => 'string',
  ),
  'swoole\\server::addlistener' => 
  array (
    0 => 'void',
    'host' => 'string',
    'port' => 'int',
    'socket_type' => 'string',
  ),
  'swoole\\server::addProcess' => 
  array (
    0 => 'bool',
    'process' => 'swoole_process',
  ),
  'swoole\\server::after' => 
  array (
    0 => 'ReturnType',
    'after_time_ms' => 'int',
    'callback' => 'callable',
    'param=' => 'string',
  ),
  'swoole\\server::bind' => 
  array (
    0 => 'bool',
    'fd' => 'int',
    'uid' => 'int',
  ),
  'swoole\\server::close' => 
  array (
    0 => 'bool',
    'fd' => 'int',
    'reset=' => 'bool',
  ),
  'swoole\\server::confirm' => 
  array (
    0 => 'bool',
    'fd' => 'int',
  ),
  'swoole\\server::connection_info' => 
  array (
    0 => 'array<array-key, mixed>',
    'fd' => 'int',
    'reactor_id=' => 'int',
  ),
  'swoole\\server::connection_list' => 
  array (
    0 => 'array<array-key, mixed>',
    'start_fd' => 'int',
    'pagesize=' => 'int',
  ),
  'swoole\\server::defer' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'swoole\\server::exist' => 
  array (
    0 => 'bool',
    'fd' => 'int',
  ),
  'swoole\\server::finish' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'swoole\\server::getClientInfo' => 
  array (
    0 => 'ReturnType',
    'fd' => 'int',
    'reactor_id=' => 'int',
  ),
  'swoole\\server::getClientList' => 
  array (
    0 => 'array<array-key, mixed>',
    'start_fd' => 'int',
    'pagesize=' => 'int',
  ),
  'swoole\\server::getLastError' => 
  array (
    0 => 'int',
  ),
  'swoole\\server::heartbeat' => 
  array (
    0 => 'mixed',
    'if_close_connection' => 'bool',
  ),
  'swoole\\server::listen' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port' => 'int',
    'socket_type' => 'string',
  ),
  'swoole\\server::on' => 
  array (
    0 => 'void',
    'event_name' => 'string',
    'callback' => 'callable',
  ),
  'swoole\\server::pause' => 
  array (
    0 => 'void',
    'fd' => 'int',
  ),
  'swoole\\server::protect' => 
  array (
    0 => 'void',
    'fd' => 'int',
    'is_protected=' => 'bool',
  ),
  'swoole\\server::reload' => 
  array (
    0 => 'bool',
  ),
  'swoole\\server::resume' => 
  array (
    0 => 'void',
    'fd' => 'int',
  ),
  'swoole\\server::send' => 
  array (
    0 => 'bool',
    'fd' => 'int',
    'data' => 'string',
    'reactor_id=' => 'int',
  ),
  'swoole\\server::sendfile' => 
  array (
    0 => 'bool',
    'fd' => 'int',
    'filename' => 'string',
    'offset=' => 'int',
  ),
  'swoole\\server::sendMessage' => 
  array (
    0 => 'bool',
    'worker_id' => 'int',
    'data' => 'string',
  ),
  'swoole\\server::sendto' => 
  array (
    0 => 'bool',
    'ip' => 'string',
    'port' => 'int',
    'data' => 'string',
    'server_socket=' => 'string',
  ),
  'swoole\\server::sendwait' => 
  array (
    0 => 'bool',
    'fd' => 'int',
    'data' => 'string',
  ),
  'swoole\\server::set' => 
  array (
    0 => 'ReturnType',
    'settings' => 'array<array-key, mixed>',
  ),
  'swoole\\server::shutdown' => 
  array (
    0 => 'void',
  ),
  'swoole\\server::start' => 
  array (
    0 => 'void',
  ),
  'swoole\\server::stats' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\server::stop' => 
  array (
    0 => 'bool',
    'worker_id=' => 'int',
  ),
  'swoole\\server::task' => 
  array (
    0 => 'mixed',
    'data' => 'string',
    'dst_worker_id=' => 'int',
    'callback=' => 'callable',
  ),
  'swoole\\server::taskwait' => 
  array (
    0 => 'void',
    'data' => 'string',
    'timeout=' => 'float',
    'worker_id=' => 'int',
  ),
  'swoole\\server::taskWaitMulti' => 
  array (
    0 => 'void',
    'tasks' => 'array<array-key, mixed>',
    'timeout_ms=' => 'float',
  ),
  'swoole\\server::tick' => 
  array (
    0 => 'void',
    'interval_ms' => 'int',
    'callback' => 'callable',
  ),
  'swoole\\server\\port::__destruct' => 
  array (
    0 => 'void',
  ),
  'swoole\\server\\port::on' => 
  array (
    0 => 'ReturnType',
    'event_name' => 'string',
    'callback' => 'callable',
  ),
  'swoole\\server\\port::set' => 
  array (
    0 => 'void',
    'settings' => 'array<array-key, mixed>',
  ),
  'swoole\\table::column' => 
  array (
    0 => 'ReturnType',
    'name' => 'string',
    'type' => 'string',
    'size=' => 'int',
  ),
  'swoole\\table::count' => 
  array (
    0 => 'int',
  ),
  'swoole\\table::create' => 
  array (
    0 => 'void',
  ),
  'swoole\\table::current' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\table::decr' => 
  array (
    0 => 'ReturnType',
    'key' => 'string',
    'column' => 'string',
    'decrby=' => 'int',
  ),
  'swoole\\table::del' => 
  array (
    0 => 'void',
    'key' => 'string',
  ),
  'swoole\\table::destroy' => 
  array (
    0 => 'void',
  ),
  'swoole\\table::exist' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'swoole\\table::get' => 
  array (
    0 => 'int',
    'row_key' => 'string',
    'column_key' => 'string',
  ),
  'swoole\\table::incr' => 
  array (
    0 => 'void',
    'key' => 'string',
    'column' => 'string',
    'incrby=' => 'int',
  ),
  'swoole\\table::key' => 
  array (
    0 => 'string',
  ),
  'swoole\\table::next' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\table::rewind' => 
  array (
    0 => 'void',
  ),
  'swoole\\table::set' => 
  array (
    0 => 'void',
    'key' => 'string',
    'value' => 'array<array-key, mixed>',
  ),
  'swoole\\table::valid' => 
  array (
    0 => 'bool',
  ),
  'swoole\\timer::after' => 
  array (
    0 => 'void',
    'after_time_ms' => 'int',
    'callback' => 'callable',
  ),
  'swoole\\timer::clear' => 
  array (
    0 => 'void',
    'timer_id' => 'int',
  ),
  'swoole\\timer::exists' => 
  array (
    0 => 'bool',
    'timer_id' => 'int',
  ),
  'swoole\\timer::tick' => 
  array (
    0 => 'void',
    'interval_ms' => 'int',
    'callback' => 'callable',
    'param=' => 'string',
  ),
  'swoole\\websocket\\server::exist' => 
  array (
    0 => 'bool',
    'fd' => 'int',
  ),
  'swoole\\websocket\\server::on' => 
  array (
    0 => 'ReturnType',
    'event_name' => 'string',
    'callback' => 'callable',
  ),
  'swoole\\websocket\\server::pack' => 
  array (
    0 => 'binary',
    'data' => 'string',
    'opcode=' => 'string',
    'finish=' => 'string',
    'mask=' => 'string',
  ),
  'swoole\\websocket\\server::push' => 
  array (
    0 => 'void',
    'fd' => 'string',
    'data' => 'string',
    'opcode=' => 'string',
    'finish=' => 'string',
  ),
  'swoole\\websocket\\server::unpack' => 
  array (
    0 => 'string',
    'data' => 'binary',
  ),
  'swoole_async_dns_lookup' => 
  array (
    0 => 'bool',
    'hostname' => 'string',
    'callback' => 'callable',
  ),
  'swoole_async_read' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'callback' => 'callable',
    'chunk_size=' => 'int',
    'offset=' => 'int',
  ),
  'swoole_async_readfile' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'callback' => 'string',
  ),
  'swoole_async_set' => 
  array (
    0 => 'void',
    'settings' => 'array<array-key, mixed>',
  ),
  'swoole_async_write' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'content' => 'string',
    'offset=' => 'int',
    'callback=' => 'callable',
  ),
  'swoole_async_writefile' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'content' => 'string',
    'callback=' => 'callable',
    'flags=' => 'int',
  ),
  'swoole_client_select' => 
  array (
    0 => 'int',
    'read_array' => 'array<array-key, mixed>',
    'write_array' => 'array<array-key, mixed>',
    'error_array' => 'array<array-key, mixed>',
    'timeout=' => 'float',
  ),
  'swoole_cpu_num' => 
  array (
    0 => 'int',
  ),
  'swoole_errno' => 
  array (
    0 => 'int',
  ),
  'swoole_event_add' => 
  array (
    0 => 'int',
    'fd' => 'int',
    'read_callback=' => 'callable',
    'write_callback=' => 'callable',
    'events=' => 'int',
  ),
  'swoole_event_defer' => 
  array (
    0 => 'bool',
    'callback' => 'callable',
  ),
  'swoole_event_del' => 
  array (
    0 => 'bool',
    'fd' => 'int',
  ),
  'swoole_event_exit' => 
  array (
    0 => 'void',
  ),
  'swoole_event_set' => 
  array (
    0 => 'bool',
    'fd' => 'int',
    'read_callback=' => 'callable',
    'write_callback=' => 'callable',
    'events=' => 'int',
  ),
  'swoole_event_wait' => 
  array (
    0 => 'void',
  ),
  'swoole_event_write' => 
  array (
    0 => 'bool',
    'fd' => 'int',
    'data' => 'string',
  ),
  'swoole_get_local_ip' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole_last_error' => 
  array (
    0 => 'int',
  ),
  'swoole_load_module' => 
  array (
    0 => 'mixed',
    'filename' => 'string',
  ),
  'swoole_select' => 
  array (
    0 => 'int',
    'read_array' => 'array<array-key, mixed>',
    'write_array' => 'array<array-key, mixed>',
    'error_array' => 'array<array-key, mixed>',
    'timeout=' => 'float',
  ),
  'swoole_set_process_name' => 
  array (
    0 => 'void',
    'process_name' => 'string',
    'size=' => 'int',
  ),
  'swoole_strerror' => 
  array (
    0 => 'string',
    'errno' => 'int',
    'error_type=' => 'int',
  ),
  'swoole_timer_after' => 
  array (
    0 => 'int',
    'ms' => 'int',
    'callback' => 'callable',
    'param=' => 'mixed',
  ),
  'swoole_timer_exists' => 
  array (
    0 => 'bool',
    'timer_id' => 'int',
  ),
  'swoole_timer_tick' => 
  array (
    0 => 'int',
    'ms' => 'int',
    'callback' => 'callable',
    'param=' => 'mixed',
  ),
  'swoole_version' => 
  array (
    0 => 'string',
  ),
  'symbolObj::__construct' => 
  array (
    0 => 'void',
    'map' => 'mapObj',
    'symbolname' => 'string',
  ),
  'symbolObj::free' => 
  array (
    0 => 'void',
  ),
  'symbolObj::getPatternArray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'symbolObj::getPointsArray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'symbolObj::ms_newSymbolObj' => 
  array (
    0 => 'int',
    'map' => 'mapObj',
    'symbolname' => 'string',
  ),
  'symbolObj::set' => 
  array (
    0 => 'int',
    'property_name' => 'string',
    'new_value' => 'mixed',
  ),
  'symbolObj::setImagePath' => 
  array (
    0 => 'int',
    'filename' => 'string',
  ),
  'symbolObj::setPattern' => 
  array (
    0 => 'int',
    'int' => 'array<array-key, mixed>',
  ),
  'symbolObj::setPoints' => 
  array (
    0 => 'int',
    'double' => 'array<array-key, mixed>',
  ),
  'symlink' => 
  array (
    0 => 'bool',
    'target' => 'string',
    'link' => 'string',
  ),
  'SyncEvent::__construct' => 
  array (
    0 => 'void',
    'name=' => 'string',
    'manual=' => 'bool',
  ),
  'SyncEvent::fire' => 
  array (
    0 => 'bool',
  ),
  'SyncEvent::reset' => 
  array (
    0 => 'bool',
  ),
  'SyncEvent::wait' => 
  array (
    0 => 'bool',
    'wait=' => 'int',
  ),
  'SyncMutex::__construct' => 
  array (
    0 => 'void',
    'name=' => 'string',
  ),
  'SyncMutex::lock' => 
  array (
    0 => 'bool',
    'wait=' => 'int',
  ),
  'SyncMutex::unlock' => 
  array (
    0 => 'bool',
    'all=' => 'bool',
  ),
  'SyncReaderWriter::__construct' => 
  array (
    0 => 'void',
    'name=' => 'string',
    'autounlock=' => 'bool',
  ),
  'SyncReaderWriter::readlock' => 
  array (
    0 => 'bool',
    'wait=' => 'int',
  ),
  'SyncReaderWriter::readunlock' => 
  array (
    0 => 'bool',
  ),
  'SyncReaderWriter::writelock' => 
  array (
    0 => 'bool',
    'wait=' => 'int',
  ),
  'SyncReaderWriter::writeunlock' => 
  array (
    0 => 'bool',
  ),
  'SyncSemaphore::__construct' => 
  array (
    0 => 'void',
    'name=' => 'string',
    'initialval=' => 'int',
    'autounlock=' => 'bool',
  ),
  'SyncSemaphore::lock' => 
  array (
    0 => 'bool',
    'wait=' => 'int',
  ),
  'SyncSemaphore::unlock' => 
  array (
    0 => 'bool',
    '&w_prevcount=' => 'int',
  ),
  'SyncSharedMemory::__construct' => 
  array (
    0 => 'void',
    'name' => 'string',
    'size' => 'int',
  ),
  'SyncSharedMemory::first' => 
  array (
    0 => 'bool',
  ),
  'SyncSharedMemory::read' => 
  array (
    0 => 'string',
    'start=' => 'int',
    'length=' => 'int',
  ),
  'SyncSharedMemory::size' => 
  array (
    0 => 'int',
  ),
  'SyncSharedMemory::write' => 
  array (
    0 => 'int',
    'string=' => 'string',
    'start=' => 'int',
  ),
  'sys_get_temp_dir' => 
  array (
    0 => 'string',
  ),
  'sys_getloadavg' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'syslog' => 
  array (
    0 => 'true',
    'priority' => 'int',
    'message' => 'string',
  ),
  'system' => 
  array (
    0 => 'false|string',
    'command' => 'string',
    '&w_result_code=' => 'int',
  ),
  'taint' => 
  array (
    0 => 'bool',
    '&rw_string' => 'string',
    '&...w_other_strings=' => 'string',
  ),
  'tan' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'tanh' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'tcpwrap_check' => 
  array (
    0 => 'bool',
    'daemon' => 'string',
    'address' => 'string',
    'user=' => 'string',
    'nodns=' => 'bool',
  ),
  'tempnam' => 
  array (
    0 => 'false|string',
    'directory' => 'string',
    'prefix' => 'string',
  ),
  'textdomain' => 
  array (
    0 => 'string',
    'domain' => 'null|string',
  ),
  'Thread::__construct' => 
  array (
    0 => 'void',
  ),
  'Thread::addRef' => 
  array (
    0 => 'void',
  ),
  'Thread::chunk' => 
  array (
    0 => 'array<array-key, mixed>',
    'size' => 'int',
    'preserve' => 'bool',
  ),
  'Thread::count' => 
  array (
    0 => 'int',
  ),
  'Thread::delRef' => 
  array (
    0 => 'void',
  ),
  'Thread::detach' => 
  array (
    0 => 'void',
  ),
  'Thread::extend' => 
  array (
    0 => 'bool',
    'class' => 'string',
  ),
  'Thread::getCreatorId' => 
  array (
    0 => 'int',
  ),
  'Thread::getCurrentThread' => 
  array (
    0 => 'Thread',
  ),
  'Thread::getCurrentThreadId' => 
  array (
    0 => 'int',
  ),
  'Thread::getRefCount' => 
  array (
    0 => 'int',
  ),
  'Thread::getTerminationInfo' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Thread::getThreadId' => 
  array (
    0 => 'int',
  ),
  'Thread::globally' => 
  array (
    0 => 'mixed',
  ),
  'Thread::isGarbage' => 
  array (
    0 => 'bool',
  ),
  'Thread::isJoined' => 
  array (
    0 => 'bool',
  ),
  'Thread::isRunning' => 
  array (
    0 => 'bool',
  ),
  'Thread::isStarted' => 
  array (
    0 => 'bool',
  ),
  'Thread::isTerminated' => 
  array (
    0 => 'bool',
  ),
  'Thread::isWaiting' => 
  array (
    0 => 'bool',
  ),
  'Thread::join' => 
  array (
    0 => 'bool',
  ),
  'Thread::kill' => 
  array (
    0 => 'void',
  ),
  'Thread::lock' => 
  array (
    0 => 'bool',
  ),
  'Thread::merge' => 
  array (
    0 => 'bool',
    'from' => 'mixed',
    'overwrite=' => 'mixed',
  ),
  'Thread::notify' => 
  array (
    0 => 'bool',
  ),
  'Thread::notifyOne' => 
  array (
    0 => 'bool',
  ),
  'Thread::offsetExists' => 
  array (
    0 => 'bool',
    'offset' => 'int|string',
  ),
  'Thread::offsetGet' => 
  array (
    0 => 'mixed',
    'offset' => 'int|string',
  ),
  'Thread::offsetSet' => 
  array (
    0 => 'void',
    'offset' => 'int|null|string',
    'value' => 'mixed',
  ),
  'Thread::offsetUnset' => 
  array (
    0 => 'void',
    'offset' => 'int|string',
  ),
  'Thread::pop' => 
  array (
    0 => 'bool',
  ),
  'Thread::run' => 
  array (
    0 => 'void',
  ),
  'Thread::setGarbage' => 
  array (
    0 => 'void',
  ),
  'Thread::shift' => 
  array (
    0 => 'bool',
  ),
  'Thread::start' => 
  array (
    0 => 'bool',
    'options=' => 'int',
  ),
  'Thread::synchronized' => 
  array (
    0 => 'mixed',
    'block' => 'Closure',
    '_=' => 'mixed',
  ),
  'Thread::unlock' => 
  array (
    0 => 'bool',
  ),
  'Thread::wait' => 
  array (
    0 => 'bool',
    'timeout=' => 'int',
  ),
  'Threaded::__construct' => 
  array (
    0 => 'void',
  ),
  'Threaded::addRef' => 
  array (
    0 => 'void',
  ),
  'Threaded::chunk' => 
  array (
    0 => 'array<array-key, mixed>',
    'size' => 'int',
    'preserve' => 'bool',
  ),
  'Threaded::count' => 
  array (
    0 => 'int',
  ),
  'Threaded::delRef' => 
  array (
    0 => 'void',
  ),
  'Threaded::extend' => 
  array (
    0 => 'bool',
    'class' => 'string',
  ),
  'Threaded::from' => 
  array (
    0 => 'Threaded',
    'run' => 'Closure',
    'construct=' => 'Closure',
    'args=' => 'array<array-key, mixed>',
  ),
  'Threaded::getRefCount' => 
  array (
    0 => 'int',
  ),
  'Threaded::getTerminationInfo' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Threaded::isGarbage' => 
  array (
    0 => 'bool',
  ),
  'Threaded::isRunning' => 
  array (
    0 => 'bool',
  ),
  'Threaded::isTerminated' => 
  array (
    0 => 'bool',
  ),
  'Threaded::isWaiting' => 
  array (
    0 => 'bool',
  ),
  'Threaded::lock' => 
  array (
    0 => 'bool',
  ),
  'Threaded::merge' => 
  array (
    0 => 'bool',
    'from' => 'mixed',
    'overwrite=' => 'bool',
  ),
  'Threaded::notify' => 
  array (
    0 => 'bool',
  ),
  'Threaded::notifyOne' => 
  array (
    0 => 'bool',
  ),
  'Threaded::offsetExists' => 
  array (
    0 => 'bool',
    'offset' => 'int|string',
  ),
  'Threaded::offsetGet' => 
  array (
    0 => 'mixed',
    'offset' => 'int|string',
  ),
  'Threaded::offsetSet' => 
  array (
    0 => 'void',
    'offset' => 'int|null|string',
    'value' => 'mixed',
  ),
  'Threaded::offsetUnset' => 
  array (
    0 => 'void',
    'offset' => 'int|string',
  ),
  'Threaded::pop' => 
  array (
    0 => 'bool',
  ),
  'Threaded::run' => 
  array (
    0 => 'void',
  ),
  'Threaded::setGarbage' => 
  array (
    0 => 'void',
  ),
  'Threaded::shift' => 
  array (
    0 => 'mixed',
  ),
  'Threaded::synchronized' => 
  array (
    0 => 'mixed',
    'block' => 'Closure',
    '...args=' => 'mixed',
  ),
  'Threaded::unlock' => 
  array (
    0 => 'bool',
  ),
  'Threaded::wait' => 
  array (
    0 => 'bool',
    'timeout=' => 'int',
  ),
  'Throwable::__toString' => 
  array (
    0 => 'string',
  ),
  'Throwable::getCode' => 
  array (
    0 => 'int|string',
  ),
  'Throwable::getFile' => 
  array (
    0 => 'string',
  ),
  'Throwable::getLine' => 
  array (
    0 => 'int',
  ),
  'Throwable::getMessage' => 
  array (
    0 => 'string',
  ),
  'Throwable::getPrevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'Throwable::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'Throwable::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'tidy::__construct' => 
  array (
    0 => 'void',
    'filename=' => 'null|string',
    'config=' => 'array<array-key, mixed>|null|string',
    'encoding=' => 'null|string',
    'useIncludePath=' => 'bool',
  ),
  'tidy::body' => 
  array (
    0 => 'null|tidyNode',
  ),
  'tidy::cleanRepair' => 
  array (
    0 => 'bool',
  ),
  'tidy::diagnose' => 
  array (
    0 => 'bool',
  ),
  'tidy::getConfig' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'tidy::getHtmlVer' => 
  array (
    0 => 'int',
  ),
  'tidy::getOpt' => 
  array (
    0 => 'bool|int|string',
    'option' => 'string',
  ),
  'tidy::getOptDoc' => 
  array (
    0 => 'string',
    'option' => 'string',
  ),
  'tidy::getRelease' => 
  array (
    0 => 'string',
  ),
  'tidy::getStatus' => 
  array (
    0 => 'int',
  ),
  'tidy::head' => 
  array (
    0 => 'null|tidyNode',
  ),
  'tidy::html' => 
  array (
    0 => 'null|tidyNode',
  ),
  'tidy::isXhtml' => 
  array (
    0 => 'bool',
  ),
  'tidy::isXml' => 
  array (
    0 => 'bool',
  ),
  'tidy::parseFile' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'config=' => 'array<array-key, mixed>|null|string',
    'encoding=' => 'null|string',
    'useIncludePath=' => 'bool',
  ),
  'tidy::parseString' => 
  array (
    0 => 'bool',
    'string' => 'string',
    'config=' => 'array<array-key, mixed>|null|string',
    'encoding=' => 'null|string',
  ),
  'tidy::repairFile' => 
  array (
    0 => 'string',
    'filename' => 'string',
    'config=' => 'array<array-key, mixed>|null|string',
    'encoding=' => 'null|string',
    'useIncludePath=' => 'bool',
  ),
  'tidy::repairString' => 
  array (
    0 => 'string',
    'string' => 'string',
    'config=' => 'array<array-key, mixed>|null|string',
    'encoding=' => 'null|string',
  ),
  'tidy::root' => 
  array (
    0 => 'null|tidyNode',
  ),
  'tidy_access_count' => 
  array (
    0 => 'int',
    'tidy' => 'tidy',
  ),
  'tidy_clean_repair' => 
  array (
    0 => 'bool',
    'tidy' => 'tidy',
  ),
  'tidy_config_count' => 
  array (
    0 => 'int',
    'tidy' => 'tidy',
  ),
  'tidy_diagnose' => 
  array (
    0 => 'bool',
    'tidy' => 'tidy',
  ),
  'tidy_error_count' => 
  array (
    0 => 'int',
    'tidy' => 'tidy',
  ),
  'tidy_get_body' => 
  array (
    0 => 'null|tidyNode',
    'tidy' => 'tidy',
  ),
  'tidy_get_config' => 
  array (
    0 => 'array<array-key, mixed>',
    'tidy' => 'tidy',
  ),
  'tidy_get_error_buffer' => 
  array (
    0 => 'string',
    'tidy' => 'tidy',
  ),
  'tidy_get_head' => 
  array (
    0 => 'null|tidyNode',
    'tidy' => 'tidy',
  ),
  'tidy_get_html' => 
  array (
    0 => 'null|tidyNode',
    'tidy' => 'tidy',
  ),
  'tidy_get_html_ver' => 
  array (
    0 => 'int',
    'tidy' => 'tidy',
  ),
  'tidy_get_opt_doc' => 
  array (
    0 => 'string',
    'tidy' => 'tidy',
    'option' => 'string',
  ),
  'tidy_get_output' => 
  array (
    0 => 'string',
    'tidy' => 'tidy',
  ),
  'tidy_get_release' => 
  array (
    0 => 'string',
  ),
  'tidy_get_root' => 
  array (
    0 => 'null|tidyNode',
    'tidy' => 'tidy',
  ),
  'tidy_get_status' => 
  array (
    0 => 'int',
    'tidy' => 'tidy',
  ),
  'tidy_getopt' => 
  array (
    0 => 'bool|int|string',
    'tidy' => 'tidy',
    'option' => 'string',
  ),
  'tidy_is_xhtml' => 
  array (
    0 => 'bool',
    'tidy' => 'tidy',
  ),
  'tidy_is_xml' => 
  array (
    0 => 'bool',
    'tidy' => 'tidy',
  ),
  'tidy_load_config' => 
  array (
    0 => 'void',
    'filename' => 'string',
    'encoding' => 'string',
  ),
  'tidy_parse_file' => 
  array (
    0 => 'tidy',
    'filename' => 'string',
    'config=' => 'array<array-key, mixed>|null|string',
    'encoding=' => 'null|string',
    'useIncludePath=' => 'bool',
  ),
  'tidy_parse_string' => 
  array (
    0 => 'tidy',
    'string' => 'string',
    'config=' => 'array<array-key, mixed>|null|string',
    'encoding=' => 'null|string',
  ),
  'tidy_repair_file' => 
  array (
    0 => 'string',
    'filename' => 'string',
    'config=' => 'array<array-key, mixed>|null|string',
    'encoding=' => 'null|string',
    'useIncludePath=' => 'bool',
  ),
  'tidy_repair_string' => 
  array (
    0 => 'string',
    'string' => 'string',
    'config=' => 'array<array-key, mixed>|null|string',
    'encoding=' => 'null|string',
  ),
  'tidy_reset_config' => 
  array (
    0 => 'bool',
  ),
  'tidy_save_config' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'tidy_set_encoding' => 
  array (
    0 => 'bool',
    'encoding' => 'string',
  ),
  'tidy_setopt' => 
  array (
    0 => 'bool',
    'option' => 'string',
    'value' => 'mixed',
  ),
  'tidy_warning_count' => 
  array (
    0 => 'int',
    'tidy' => 'tidy',
  ),
  'tidyNode::__construct' => 
  array (
    0 => 'void',
  ),
  'tidyNode::getParent' => 
  array (
    0 => 'null|tidyNode',
  ),
  'tidyNode::hasChildren' => 
  array (
    0 => 'bool',
  ),
  'tidyNode::hasSiblings' => 
  array (
    0 => 'bool',
  ),
  'tidyNode::isAsp' => 
  array (
    0 => 'bool',
  ),
  'tidyNode::isComment' => 
  array (
    0 => 'bool',
  ),
  'tidyNode::isHtml' => 
  array (
    0 => 'bool',
  ),
  'tidyNode::isJste' => 
  array (
    0 => 'bool',
  ),
  'tidyNode::isPhp' => 
  array (
    0 => 'bool',
  ),
  'tidyNode::isText' => 
  array (
    0 => 'bool',
  ),
  'time' => 
  array (
    0 => 'int<1, max>',
  ),
  'time_nanosleep' => 
  array (
    0 => 'array{0: int<0, max>, 1: int<0, max>}|bool',
    'seconds' => 'int<1, max>',
    'nanoseconds' => 'int<1, max>',
  ),
  'time_sleep_until' => 
  array (
    0 => 'bool',
    'timestamp' => 'float',
  ),
  'timezone_abbreviations_list' => 
  array (
    0 => 'array<string, list<array{dst: bool, offset: int, timezone_id: null|string}>>',
  ),
  'timezone_identifiers_list' => 
  array (
    0 => 'list<string>',
    'timezoneGroup=' => 'int',
    'countryCode=' => 'null|string',
  ),
  'timezone_location_get' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'object' => 'DateTimeZone',
  ),
  'timezone_name_from_abbr' => 
  array (
    0 => 'false|string',
    'abbr' => 'string',
    'utcOffset=' => 'int',
    'isDST=' => 'int',
  ),
  'timezone_name_get' => 
  array (
    0 => 'string',
    'object' => 'DateTimeZone',
  ),
  'timezone_offset_get' => 
  array (
    0 => 'int',
    'object' => 'DateTimeZone',
    'datetime' => 'DateTimeInterface',
  ),
  'timezone_open' => 
  array (
    0 => 'DateTimeZone|false',
    'timezone' => 'string',
  ),
  'timezone_transitions_get' => 
  array (
    0 => 'false|list<array{abbr: string, isdst: bool, offset: int, time: string, ts: int}>',
    'object' => 'DateTimeZone',
    'timestampBegin=' => 'int',
    'timestampEnd=' => 'int',
  ),
  'timezone_version_get' => 
  array (
    0 => 'string',
  ),
  'tmpfile' => 
  array (
    0 => 'false|resource',
  ),
  'token_get_all' => 
  array (
    0 => 'list<array{0: int, 1: string, 2: int}|string>',
    'code' => 'string',
    'flags=' => 'int',
  ),
  'token_name' => 
  array (
    0 => 'string',
    'id' => 'int',
  ),
  'TokyoTyrant::__construct' => 
  array (
    0 => 'void',
    'host=' => 'string',
    'port=' => 'int',
    'options=' => 'array<array-key, mixed>',
  ),
  'TokyoTyrant::add' => 
  array (
    0 => 'float|int',
    'key' => 'string',
    'increment' => 'float',
    'type=' => 'int',
  ),
  'TokyoTyrant::connect' => 
  array (
    0 => 'TokyoTyrant',
    'host' => 'string',
    'port=' => 'int',
    'options=' => 'array<array-key, mixed>',
  ),
  'TokyoTyrant::connectUri' => 
  array (
    0 => 'TokyoTyrant',
    'uri' => 'string',
  ),
  'TokyoTyrant::copy' => 
  array (
    0 => 'TokyoTyrant',
    'path' => 'string',
  ),
  'TokyoTyrant::ext' => 
  array (
    0 => 'string',
    'name' => 'string',
    'options' => 'int',
    'key' => 'string',
    'value' => 'string',
  ),
  'TokyoTyrant::fwmKeys' => 
  array (
    0 => 'array<array-key, mixed>',
    'prefix' => 'string',
    'max_recs' => 'int',
  ),
  'TokyoTyrant::get' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'mixed',
  ),
  'TokyoTyrant::getIterator' => 
  array (
    0 => 'TokyoTyrantIterator',
  ),
  'TokyoTyrant::num' => 
  array (
    0 => 'int',
  ),
  'TokyoTyrant::out' => 
  array (
    0 => 'string',
    'keys' => 'mixed',
  ),
  'TokyoTyrant::put' => 
  array (
    0 => 'TokyoTyrant',
    'keys' => 'mixed',
    'value=' => 'string',
  ),
  'TokyoTyrant::putCat' => 
  array (
    0 => 'TokyoTyrant',
    'keys' => 'mixed',
    'value=' => 'string',
  ),
  'TokyoTyrant::putKeep' => 
  array (
    0 => 'TokyoTyrant',
    'keys' => 'mixed',
    'value=' => 'string',
  ),
  'TokyoTyrant::putNr' => 
  array (
    0 => 'TokyoTyrant',
    'keys' => 'mixed',
    'value=' => 'string',
  ),
  'TokyoTyrant::putShl' => 
  array (
    0 => 'mixed',
    'key' => 'string',
    'value' => 'string',
    'width' => 'int',
  ),
  'TokyoTyrant::restore' => 
  array (
    0 => 'mixed',
    'log_dir' => 'string',
    'timestamp' => 'int',
    'check_consistency=' => 'bool',
  ),
  'TokyoTyrant::setMaster' => 
  array (
    0 => 'mixed',
    'host' => 'string',
    'port' => 'int',
    'timestamp' => 'int',
    'check_consistency=' => 'bool',
  ),
  'TokyoTyrant::size' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'TokyoTyrant::stat' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'TokyoTyrant::sync' => 
  array (
    0 => 'mixed',
  ),
  'TokyoTyrant::tune' => 
  array (
    0 => 'TokyoTyrant',
    'timeout' => 'float',
    'options=' => 'int',
  ),
  'TokyoTyrant::vanish' => 
  array (
    0 => 'mixed',
  ),
  'TokyoTyrantIterator::__construct' => 
  array (
    0 => 'void',
    'object' => 'mixed',
  ),
  'TokyoTyrantIterator::current' => 
  array (
    0 => 'mixed',
  ),
  'TokyoTyrantIterator::key' => 
  array (
    0 => 'mixed',
  ),
  'TokyoTyrantIterator::next' => 
  array (
    0 => 'mixed',
  ),
  'TokyoTyrantIterator::rewind' => 
  array (
    0 => 'void',
  ),
  'TokyoTyrantIterator::valid' => 
  array (
    0 => 'bool',
  ),
  'TokyoTyrantQuery::__construct' => 
  array (
    0 => 'void',
    'table' => 'TokyoTyrantTable',
  ),
  'TokyoTyrantQuery::addCond' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'op' => 'int',
    'expr' => 'string',
  ),
  'TokyoTyrantQuery::count' => 
  array (
    0 => 'int',
  ),
  'TokyoTyrantQuery::current' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'TokyoTyrantQuery::hint' => 
  array (
    0 => 'string',
  ),
  'TokyoTyrantQuery::key' => 
  array (
    0 => 'string',
  ),
  'TokyoTyrantQuery::metaSearch' => 
  array (
    0 => 'array<array-key, mixed>',
    'queries' => 'array<array-key, mixed>',
    'type' => 'int',
  ),
  'TokyoTyrantQuery::next' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'TokyoTyrantQuery::out' => 
  array (
    0 => 'TokyoTyrantQuery',
  ),
  'TokyoTyrantQuery::rewind' => 
  array (
    0 => 'bool',
  ),
  'TokyoTyrantQuery::search' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'TokyoTyrantQuery::setLimit' => 
  array (
    0 => 'mixed',
    'max=' => 'int',
    'skip=' => 'int',
  ),
  'TokyoTyrantQuery::setOrder' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'type' => 'int',
  ),
  'TokyoTyrantQuery::valid' => 
  array (
    0 => 'bool',
  ),
  'TokyoTyrantTable::add' => 
  array (
    0 => 'void',
    'key' => 'string',
    'increment' => 'mixed',
    'type=' => 'string',
  ),
  'TokyoTyrantTable::genUid' => 
  array (
    0 => 'int',
  ),
  'TokyoTyrantTable::get' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'mixed',
  ),
  'TokyoTyrantTable::getIterator' => 
  array (
    0 => 'TokyoTyrantIterator',
  ),
  'TokyoTyrantTable::getQuery' => 
  array (
    0 => 'TokyoTyrantQuery',
  ),
  'TokyoTyrantTable::out' => 
  array (
    0 => 'void',
    'keys' => 'mixed',
  ),
  'TokyoTyrantTable::put' => 
  array (
    0 => 'int',
    'key' => 'string',
    'columns' => 'array<array-key, mixed>',
  ),
  'TokyoTyrantTable::putCat' => 
  array (
    0 => 'void',
    'key' => 'string',
    'columns' => 'array<array-key, mixed>',
  ),
  'TokyoTyrantTable::putKeep' => 
  array (
    0 => 'void',
    'key' => 'string',
    'columns' => 'array<array-key, mixed>',
  ),
  'TokyoTyrantTable::putNr' => 
  array (
    0 => 'void',
    'keys' => 'mixed',
    'value=' => 'string',
  ),
  'TokyoTyrantTable::putShl' => 
  array (
    0 => 'void',
    'key' => 'string',
    'value' => 'string',
    'width' => 'int',
  ),
  'TokyoTyrantTable::setIndex' => 
  array (
    0 => 'mixed',
    'column' => 'string',
    'type' => 'int',
  ),
  'touch' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'mtime=' => 'int|null',
    'atime=' => 'int|null',
  ),
  'trader_acos' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_ad' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'volume' => 'array<array-key, mixed>',
  ),
  'trader_add' => 
  array (
    0 => 'array<array-key, mixed>',
    'real0' => 'array<array-key, mixed>',
    'real1' => 'array<array-key, mixed>',
  ),
  'trader_adosc' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'volume' => 'array<array-key, mixed>',
    'fastPeriod=' => 'int',
    'slowPeriod=' => 'int',
  ),
  'trader_adx' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_adxr' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_apo' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'fastPeriod=' => 'int',
    'slowPeriod=' => 'int',
    'mAType=' => 'int',
  ),
  'trader_aroon' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_aroonosc' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_asin' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_atan' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_atr' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_avgprice' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_bbands' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
    'nbDevUp=' => 'float',
    'nbDevDn=' => 'float',
    'mAType=' => 'int',
  ),
  'trader_beta' => 
  array (
    0 => 'array<array-key, mixed>',
    'real0' => 'array<array-key, mixed>',
    'real1' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_bop' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cci' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_cdl2crows' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdl3blackcrows' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdl3inside' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdl3linestrike' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdl3outside' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdl3starsinsouth' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdl3whitesoldiers' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlabandonedbaby' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'penetration=' => 'float',
  ),
  'trader_cdladvanceblock' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlbelthold' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlbreakaway' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlclosingmarubozu' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlconcealbabyswall' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlcounterattack' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdldarkcloudcover' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'penetration=' => 'float',
  ),
  'trader_cdldoji' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdldojistar' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdldragonflydoji' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlengulfing' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdleveningdojistar' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'penetration=' => 'float',
  ),
  'trader_cdleveningstar' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'penetration=' => 'float',
  ),
  'trader_cdlgapsidesidewhite' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlgravestonedoji' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlhammer' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlhangingman' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlharami' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlharamicross' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlhighwave' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlhikkake' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlhikkakemod' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlhomingpigeon' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlidentical3crows' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlinneck' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlinvertedhammer' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlkicking' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlkickingbylength' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlladderbottom' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdllongleggeddoji' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdllongline' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlmarubozu' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlmatchinglow' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlmathold' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'penetration=' => 'float',
  ),
  'trader_cdlmorningdojistar' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'penetration=' => 'float',
  ),
  'trader_cdlmorningstar' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'penetration=' => 'float',
  ),
  'trader_cdlonneck' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlpiercing' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlrickshawman' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlrisefall3methods' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlseparatinglines' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlshootingstar' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlshortline' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlspinningtop' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlstalledpattern' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlsticksandwich' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdltakuri' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdltasukigap' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlthrusting' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdltristar' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlunique3river' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlupsidegap2crows' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlxsidegap3methods' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_ceil' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_cmo' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_correl' => 
  array (
    0 => 'array<array-key, mixed>',
    'real0' => 'array<array-key, mixed>',
    'real1' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_cos' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_cosh' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_dema' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_div' => 
  array (
    0 => 'array<array-key, mixed>',
    'real0' => 'array<array-key, mixed>',
    'real1' => 'array<array-key, mixed>',
  ),
  'trader_dx' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_ema' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_errno' => 
  array (
    0 => 'int',
  ),
  'trader_exp' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_floor' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_get_compat' => 
  array (
    0 => 'int',
  ),
  'trader_get_unstable_period' => 
  array (
    0 => 'int',
    'functionId' => 'int',
  ),
  'trader_ht_dcperiod' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_ht_dcphase' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_ht_phasor' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_ht_sine' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_ht_trendline' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_ht_trendmode' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_kama' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_linearreg' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_linearreg_angle' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_linearreg_intercept' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_linearreg_slope' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_ln' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_log10' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_ma' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
    'mAType=' => 'int',
  ),
  'trader_macd' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'fastPeriod=' => 'int',
    'slowPeriod=' => 'int',
    'signalPeriod=' => 'int',
  ),
  'trader_macdext' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'fastPeriod=' => 'int',
    'fastMAType=' => 'int',
    'slowPeriod=' => 'int',
    'slowMAType=' => 'int',
    'signalPeriod=' => 'int',
    'signalMAType=' => 'int',
  ),
  'trader_macdfix' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'signalPeriod=' => 'int',
  ),
  'trader_mama' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'fastLimit=' => 'float',
    'slowLimit=' => 'float',
  ),
  'trader_mavp' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'periods' => 'array<array-key, mixed>',
    'minPeriod=' => 'int',
    'maxPeriod=' => 'int',
    'mAType=' => 'int',
  ),
  'trader_max' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_maxindex' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_medprice' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
  ),
  'trader_mfi' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'volume' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_midpoint' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_midprice' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_min' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_minindex' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_minmax' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_minmaxindex' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_minus_di' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_minus_dm' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_mom' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_mult' => 
  array (
    0 => 'array<array-key, mixed>',
    'real0' => 'array<array-key, mixed>',
    'real1' => 'array<array-key, mixed>',
  ),
  'trader_natr' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_obv' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'volume' => 'array<array-key, mixed>',
  ),
  'trader_plus_di' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_plus_dm' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_ppo' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'fastPeriod=' => 'int',
    'slowPeriod=' => 'int',
    'mAType=' => 'int',
  ),
  'trader_roc' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_rocp' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_rocr' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_rocr100' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_rsi' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_sar' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'acceleration=' => 'float',
    'maximum=' => 'float',
  ),
  'trader_sarext' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'startValue=' => 'float',
    'offsetOnReverse=' => 'float',
    'accelerationInitLong=' => 'float',
    'accelerationLong=' => 'float',
    'accelerationMaxLong=' => 'float',
    'accelerationInitShort=' => 'float',
    'accelerationShort=' => 'float',
    'accelerationMaxShort=' => 'float',
  ),
  'trader_set_compat' => 
  array (
    0 => 'void',
    'compatId' => 'int',
  ),
  'trader_set_unstable_period' => 
  array (
    0 => 'void',
    'functionId' => 'int',
    'timePeriod' => 'int',
  ),
  'trader_sin' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_sinh' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_sma' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_sqrt' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_stddev' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
    'nbDev=' => 'float',
  ),
  'trader_stoch' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'fastK_Period=' => 'int',
    'slowK_Period=' => 'int',
    'slowK_MAType=' => 'int',
    'slowD_Period=' => 'int',
    'slowD_MAType=' => 'int',
  ),
  'trader_stochf' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'fastK_Period=' => 'int',
    'fastD_Period=' => 'int',
    'fastD_MAType=' => 'int',
  ),
  'trader_stochrsi' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
    'fastK_Period=' => 'int',
    'fastD_Period=' => 'int',
    'fastD_MAType=' => 'int',
  ),
  'trader_sub' => 
  array (
    0 => 'array<array-key, mixed>',
    'real0' => 'array<array-key, mixed>',
    'real1' => 'array<array-key, mixed>',
  ),
  'trader_sum' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_t3' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
    'vFactor=' => 'float',
  ),
  'trader_tan' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_tanh' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_tema' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_trange' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_trima' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_trix' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_tsf' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_typprice' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_ultosc' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'timePeriod1=' => 'int',
    'timePeriod2=' => 'int',
    'timePeriod3=' => 'int',
  ),
  'trader_var' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
    'nbDev=' => 'float',
  ),
  'trader_wclprice' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_willr' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_wma' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trait_exists' => 
  array (
    0 => 'bool',
    'trait' => 'string',
    'autoload=' => 'bool',
  ),
  'Transliterator::create' => 
  array (
    0 => 'Transliterator|null',
    'id' => 'string',
    'direction=' => 'int',
  ),
  'Transliterator::createFromRules' => 
  array (
    0 => 'Transliterator|null',
    'rules' => 'string',
    'direction=' => 'int',
  ),
  'Transliterator::createInverse' => 
  array (
    0 => 'Transliterator|null',
  ),
  'Transliterator::getErrorCode' => 
  array (
    0 => 'int',
  ),
  'Transliterator::getErrorMessage' => 
  array (
    0 => 'string',
  ),
  'Transliterator::listIDs' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Transliterator::transliterate' => 
  array (
    0 => 'false|string',
    'string' => 'string',
    'start=' => 'int',
    'end=' => 'int',
  ),
  'transliterator_create' => 
  array (
    0 => 'Transliterator|null',
    'id' => 'string',
    'direction=' => 'int',
  ),
  'transliterator_create_from_rules' => 
  array (
    0 => 'Transliterator|null',
    'rules' => 'string',
    'direction=' => 'int',
  ),
  'transliterator_create_inverse' => 
  array (
    0 => 'Transliterator|null',
    'transliterator' => 'Transliterator',
  ),
  'transliterator_get_error_code' => 
  array (
    0 => 'int',
    'transliterator' => 'Transliterator',
  ),
  'transliterator_get_error_message' => 
  array (
    0 => 'string',
    'transliterator' => 'Transliterator',
  ),
  'transliterator_list_ids' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'transliterator_transliterate' => 
  array (
    0 => 'false|string',
    'transliterator' => 'Transliterator|string',
    'string' => 'string',
    'start=' => 'int',
    'end=' => 'int',
  ),
  'trigger_error' => 
  array (
    0 => 'bool',
    'message' => 'string',
    'error_level=' => '256|512|1024|16384',
  ),
  'trim' => 
  array (
    0 => 'string',
    'string' => 'string',
    'characters=' => 'string',
  ),
  'TypeError::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'TypeError::__toString' => 
  array (
    0 => 'string',
  ),
  'TypeError::getCode' => 
  array (
    0 => 'int',
  ),
  'TypeError::getFile' => 
  array (
    0 => 'string',
  ),
  'TypeError::getLine' => 
  array (
    0 => 'int',
  ),
  'TypeError::getMessage' => 
  array (
    0 => 'string',
  ),
  'TypeError::getPrevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'TypeError::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'TypeError::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'uasort' => 
  array (
    0 => 'true',
    '&rw_array' => 'array<array-key, mixed>',
    'callback' => 'callable(mixed, mixed):int',
  ),
  'ucfirst' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'UConverter::__construct' => 
  array (
    0 => 'void',
    'destination_encoding=' => 'null|string',
    'source_encoding=' => 'null|string',
  ),
  'UConverter::convert' => 
  array (
    0 => 'string',
    'str' => 'string',
    'reverse=' => 'bool',
  ),
  'UConverter::fromUCallback' => 
  array (
    0 => 'array<array-key, mixed>|int|null|string',
    'reason' => 'int',
    'source' => 'array<array-key, mixed>',
    'codePoint' => 'int',
    '&w_error' => 'int',
  ),
  'UConverter::getAliases' => 
  array (
    0 => 'array<array-key, mixed>|false|null',
    'name' => 'string',
  ),
  'UConverter::getAvailable' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'UConverter::getDestinationEncoding' => 
  array (
    0 => 'false|null|string',
  ),
  'UConverter::getDestinationType' => 
  array (
    0 => 'false|int|null',
  ),
  'UConverter::getErrorCode' => 
  array (
    0 => 'int',
  ),
  'UConverter::getErrorMessage' => 
  array (
    0 => 'null|string',
  ),
  'UConverter::getSourceEncoding' => 
  array (
    0 => 'false|null|string',
  ),
  'UConverter::getSourceType' => 
  array (
    0 => 'false|int|null',
  ),
  'UConverter::getStandards' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'UConverter::getSubstChars' => 
  array (
    0 => 'false|null|string',
  ),
  'UConverter::reasonText' => 
  array (
    0 => 'string',
    'reason' => 'int',
  ),
  'UConverter::setDestinationEncoding' => 
  array (
    0 => 'bool',
    'encoding' => 'string',
  ),
  'UConverter::setSourceEncoding' => 
  array (
    0 => 'bool',
    'encoding' => 'string',
  ),
  'UConverter::setSubstChars' => 
  array (
    0 => 'bool',
    'chars' => 'string',
  ),
  'UConverter::toUCallback' => 
  array (
    0 => 'array<array-key, mixed>|int|null|string',
    'reason' => 'int',
    'source' => 'string',
    'codeUnits' => 'string',
    '&w_error' => 'int',
  ),
  'UConverter::transcode' => 
  array (
    0 => 'string',
    'str' => 'string',
    'toEncoding' => 'string',
    'fromEncoding' => 'string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'ucwords' => 
  array (
    0 => 'string',
    'string' => 'string',
    'separators=' => 'string',
  ),
  'udm_add_search_limit' => 
  array (
    0 => 'bool',
    'agent' => 'resource',
    'var' => 'int',
    'value' => 'string',
  ),
  'udm_alloc_agent' => 
  array (
    0 => 'resource',
    'dbaddr' => 'string',
    'dbmode=' => 'string',
  ),
  'udm_alloc_agent_array' => 
  array (
    0 => 'resource',
    'databases' => 'array<array-key, mixed>',
  ),
  'udm_api_version' => 
  array (
    0 => 'int',
  ),
  'udm_cat_list' => 
  array (
    0 => 'array<array-key, mixed>',
    'agent' => 'resource',
    'category' => 'string',
  ),
  'udm_cat_path' => 
  array (
    0 => 'array<array-key, mixed>',
    'agent' => 'resource',
    'category' => 'string',
  ),
  'udm_check_charset' => 
  array (
    0 => 'bool',
    'agent' => 'resource',
    'charset' => 'string',
  ),
  'udm_check_stored' => 
  array (
    0 => 'int',
    'agent' => 'mixed',
    'link' => 'int',
    'doc_id' => 'string',
  ),
  'udm_clear_search_limits' => 
  array (
    0 => 'bool',
    'agent' => 'resource',
  ),
  'udm_close_stored' => 
  array (
    0 => 'int',
    'agent' => 'mixed',
    'link' => 'int',
  ),
  'udm_crc32' => 
  array (
    0 => 'int',
    'agent' => 'resource',
    'string' => 'string',
  ),
  'udm_errno' => 
  array (
    0 => 'int',
    'agent' => 'resource',
  ),
  'udm_error' => 
  array (
    0 => 'string',
    'agent' => 'resource',
  ),
  'udm_find' => 
  array (
    0 => 'resource',
    'agent' => 'resource',
    'query' => 'string',
  ),
  'udm_free_agent' => 
  array (
    0 => 'int',
    'agent' => 'resource',
  ),
  'udm_free_ispell_data' => 
  array (
    0 => 'bool',
    'agent' => 'int',
  ),
  'udm_free_res' => 
  array (
    0 => 'bool',
    'res' => 'resource',
  ),
  'udm_get_doc_count' => 
  array (
    0 => 'int',
    'agent' => 'resource',
  ),
  'udm_get_res_field' => 
  array (
    0 => 'string',
    'res' => 'resource',
    'row' => 'int',
    'field' => 'int',
  ),
  'udm_get_res_param' => 
  array (
    0 => 'string',
    'res' => 'resource',
    'param' => 'int',
  ),
  'udm_hash32' => 
  array (
    0 => 'int',
    'agent' => 'resource',
    'string' => 'string',
  ),
  'udm_load_ispell_data' => 
  array (
    0 => 'bool',
    'agent' => 'resource',
    'var' => 'int',
    'val1' => 'string',
    'val2' => 'string',
    'flag' => 'int',
  ),
  'udm_open_stored' => 
  array (
    0 => 'int',
    'agent' => 'mixed',
    'storedaddr' => 'string',
  ),
  'udm_set_agent_param' => 
  array (
    0 => 'bool',
    'agent' => 'resource',
    'var' => 'int',
    'val' => 'string',
  ),
  'ui\\area::onDraw' => 
  array (
    0 => 'mixed',
    'pen' => 'UI\\Draw\\Pen',
    'areaSize' => 'UI\\Size',
    'clipPoint' => 'UI\\Point',
    'clipSize' => 'UI\\Size',
  ),
  'ui\\area::onKey' => 
  array (
    0 => 'mixed',
    'key' => 'string',
    'ext' => 'int',
    'flags' => 'int',
  ),
  'ui\\area::onMouse' => 
  array (
    0 => 'mixed',
    'areaPoint' => 'UI\\Point',
    'areaSize' => 'UI\\Size',
    'flags' => 'int',
  ),
  'ui\\area::redraw' => 
  array (
    0 => 'mixed',
  ),
  'ui\\area::scrollTo' => 
  array (
    0 => 'mixed',
    'point' => 'UI\\Point',
    'size' => 'UI\\Size',
  ),
  'ui\\area::setSize' => 
  array (
    0 => 'mixed',
    'size' => 'UI\\Size',
  ),
  'ui\\control::destroy' => 
  array (
    0 => 'mixed',
  ),
  'ui\\control::disable' => 
  array (
    0 => 'mixed',
  ),
  'ui\\control::enable' => 
  array (
    0 => 'mixed',
  ),
  'ui\\control::getParent' => 
  array (
    0 => 'UI\\Control',
  ),
  'ui\\control::getTopLevel' => 
  array (
    0 => 'int',
  ),
  'ui\\control::hide' => 
  array (
    0 => 'mixed',
  ),
  'ui\\control::isEnabled' => 
  array (
    0 => 'bool',
  ),
  'ui\\control::isVisible' => 
  array (
    0 => 'bool',
  ),
  'ui\\control::setParent' => 
  array (
    0 => 'mixed',
    'parent' => 'UI\\Control',
  ),
  'ui\\control::show' => 
  array (
    0 => 'mixed',
  ),
  'ui\\controls\\box::append' => 
  array (
    0 => 'int',
    'control' => 'Control',
    'stretchy=' => 'bool',
  ),
  'ui\\controls\\box::delete' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'ui\\controls\\box::getOrientation' => 
  array (
    0 => 'int',
  ),
  'ui\\controls\\box::isPadded' => 
  array (
    0 => 'bool',
  ),
  'ui\\controls\\box::setPadded' => 
  array (
    0 => 'mixed',
    'padded' => 'bool',
  ),
  'ui\\controls\\button::getText' => 
  array (
    0 => 'string',
  ),
  'ui\\controls\\button::onClick' => 
  array (
    0 => 'mixed',
  ),
  'ui\\controls\\button::setText' => 
  array (
    0 => 'mixed',
    'text' => 'string',
  ),
  'ui\\controls\\check::getText' => 
  array (
    0 => 'string',
  ),
  'ui\\controls\\check::isChecked' => 
  array (
    0 => 'bool',
  ),
  'ui\\controls\\check::onToggle' => 
  array (
    0 => 'mixed',
  ),
  'ui\\controls\\check::setChecked' => 
  array (
    0 => 'mixed',
    'checked' => 'bool',
  ),
  'ui\\controls\\check::setText' => 
  array (
    0 => 'mixed',
    'text' => 'string',
  ),
  'ui\\controls\\colorbutton::getColor' => 
  array (
    0 => 'UI\\Color',
  ),
  'ui\\controls\\colorbutton::onChange' => 
  array (
    0 => 'mixed',
  ),
  'ui\\controls\\combo::append' => 
  array (
    0 => 'mixed',
    'text' => 'string',
  ),
  'ui\\controls\\combo::getSelected' => 
  array (
    0 => 'int',
  ),
  'ui\\controls\\combo::onSelected' => 
  array (
    0 => 'mixed',
  ),
  'ui\\controls\\combo::setSelected' => 
  array (
    0 => 'mixed',
    'index' => 'int',
  ),
  'ui\\controls\\editablecombo::append' => 
  array (
    0 => 'mixed',
    'text' => 'string',
  ),
  'ui\\controls\\editablecombo::getText' => 
  array (
    0 => 'string',
  ),
  'ui\\controls\\editablecombo::onChange' => 
  array (
    0 => 'mixed',
  ),
  'ui\\controls\\editablecombo::setText' => 
  array (
    0 => 'mixed',
    'text' => 'string',
  ),
  'ui\\controls\\entry::getText' => 
  array (
    0 => 'string',
  ),
  'ui\\controls\\entry::isReadOnly' => 
  array (
    0 => 'bool',
  ),
  'ui\\controls\\entry::onChange' => 
  array (
    0 => 'mixed',
  ),
  'ui\\controls\\entry::setReadOnly' => 
  array (
    0 => 'mixed',
    'readOnly' => 'bool',
  ),
  'ui\\controls\\entry::setText' => 
  array (
    0 => 'mixed',
    'text' => 'string',
  ),
  'ui\\controls\\form::append' => 
  array (
    0 => 'int',
    'label' => 'string',
    'control' => 'UI\\Control',
    'stretchy=' => 'bool',
  ),
  'ui\\controls\\form::delete' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'ui\\controls\\form::isPadded' => 
  array (
    0 => 'bool',
  ),
  'ui\\controls\\form::setPadded' => 
  array (
    0 => 'mixed',
    'padded' => 'bool',
  ),
  'ui\\controls\\grid::append' => 
  array (
    0 => 'mixed',
    'control' => 'UI\\Control',
    'left' => 'int',
    'top' => 'int',
    'xspan' => 'int',
    'yspan' => 'int',
    'hexpand' => 'bool',
    'halign' => 'int',
    'vexpand' => 'bool',
    'valign' => 'int',
  ),
  'ui\\controls\\grid::isPadded' => 
  array (
    0 => 'bool',
  ),
  'ui\\controls\\grid::setPadded' => 
  array (
    0 => 'mixed',
    'padding' => 'bool',
  ),
  'ui\\controls\\group::append' => 
  array (
    0 => 'mixed',
    'control' => 'UI\\Control',
  ),
  'ui\\controls\\group::getTitle' => 
  array (
    0 => 'string',
  ),
  'ui\\controls\\group::hasMargin' => 
  array (
    0 => 'bool',
  ),
  'ui\\controls\\group::setMargin' => 
  array (
    0 => 'mixed',
    'margin' => 'bool',
  ),
  'ui\\controls\\group::setTitle' => 
  array (
    0 => 'mixed',
    'title' => 'string',
  ),
  'ui\\controls\\label::getText' => 
  array (
    0 => 'string',
  ),
  'ui\\controls\\label::setText' => 
  array (
    0 => 'mixed',
    'text' => 'string',
  ),
  'ui\\controls\\multilineentry::append' => 
  array (
    0 => 'mixed',
    'text' => 'string',
  ),
  'ui\\controls\\multilineentry::getText' => 
  array (
    0 => 'string',
  ),
  'ui\\controls\\multilineentry::isReadOnly' => 
  array (
    0 => 'bool',
  ),
  'ui\\controls\\multilineentry::onChange' => 
  array (
    0 => 'mixed',
  ),
  'ui\\controls\\multilineentry::setReadOnly' => 
  array (
    0 => 'mixed',
    'readOnly' => 'bool',
  ),
  'ui\\controls\\multilineentry::setText' => 
  array (
    0 => 'mixed',
    'text' => 'string',
  ),
  'ui\\controls\\progress::getValue' => 
  array (
    0 => 'int',
  ),
  'ui\\controls\\progress::setValue' => 
  array (
    0 => 'mixed',
    'value' => 'int',
  ),
  'ui\\controls\\radio::append' => 
  array (
    0 => 'mixed',
    'text' => 'string',
  ),
  'ui\\controls\\radio::getSelected' => 
  array (
    0 => 'int',
  ),
  'ui\\controls\\radio::onSelected' => 
  array (
    0 => 'mixed',
  ),
  'ui\\controls\\radio::setSelected' => 
  array (
    0 => 'mixed',
    'index' => 'int',
  ),
  'ui\\controls\\slider::getValue' => 
  array (
    0 => 'int',
  ),
  'ui\\controls\\slider::onChange' => 
  array (
    0 => 'mixed',
  ),
  'ui\\controls\\slider::setValue' => 
  array (
    0 => 'mixed',
    'value' => 'int',
  ),
  'ui\\controls\\spin::getValue' => 
  array (
    0 => 'int',
  ),
  'ui\\controls\\spin::onChange' => 
  array (
    0 => 'mixed',
  ),
  'ui\\controls\\spin::setValue' => 
  array (
    0 => 'mixed',
    'value' => 'int',
  ),
  'ui\\controls\\tab::append' => 
  array (
    0 => 'int',
    'name' => 'string',
    'control' => 'UI\\Control',
  ),
  'ui\\controls\\tab::delete' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'ui\\controls\\tab::hasMargin' => 
  array (
    0 => 'bool',
    'page' => 'int',
  ),
  'ui\\controls\\tab::insertAt' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'page' => 'int',
    'control' => 'UI\\Control',
  ),
  'ui\\controls\\tab::pages' => 
  array (
    0 => 'int',
  ),
  'ui\\controls\\tab::setMargin' => 
  array (
    0 => 'mixed',
    'page' => 'int',
    'margin' => 'bool',
  ),
  'ui\\draw\\brush::getColor' => 
  array (
    0 => 'UI\\Draw\\Color',
  ),
  'ui\\draw\\brush\\gradient::delStop' => 
  array (
    0 => 'int',
    'index' => 'int',
  ),
  'ui\\draw\\color::getChannel' => 
  array (
    0 => 'float',
    'channel' => 'int',
  ),
  'ui\\draw\\color::setChannel' => 
  array (
    0 => 'void',
    'channel' => 'int',
    'value' => 'float',
  ),
  'ui\\draw\\matrix::invert' => 
  array (
    0 => 'mixed',
  ),
  'ui\\draw\\matrix::isInvertible' => 
  array (
    0 => 'bool',
  ),
  'ui\\draw\\matrix::multiply' => 
  array (
    0 => 'UI\\Draw\\Matrix',
    'matrix' => 'UI\\Draw\\Matrix',
  ),
  'ui\\draw\\matrix::rotate' => 
  array (
    0 => 'mixed',
    'point' => 'UI\\Point',
    'amount' => 'float',
  ),
  'ui\\draw\\matrix::scale' => 
  array (
    0 => 'mixed',
    'center' => 'UI\\Point',
    'point' => 'UI\\Point',
  ),
  'ui\\draw\\matrix::skew' => 
  array (
    0 => 'mixed',
    'point' => 'UI\\Point',
    'amount' => 'UI\\Point',
  ),
  'ui\\draw\\matrix::translate' => 
  array (
    0 => 'mixed',
    'point' => 'UI\\Point',
  ),
  'ui\\draw\\path::addRectangle' => 
  array (
    0 => 'mixed',
    'point' => 'UI\\Point',
    'size' => 'UI\\Size',
  ),
  'ui\\draw\\path::arcTo' => 
  array (
    0 => 'mixed',
    'point' => 'UI\\Point',
    'radius' => 'float',
    'angle' => 'float',
    'sweep' => 'float',
    'negative' => 'float',
  ),
  'ui\\draw\\path::bezierTo' => 
  array (
    0 => 'mixed',
    'point' => 'UI\\Point',
    'radius' => 'float',
    'angle' => 'float',
    'sweep' => 'float',
    'negative' => 'float',
  ),
  'ui\\draw\\path::closeFigure' => 
  array (
    0 => 'mixed',
  ),
  'ui\\draw\\path::end' => 
  array (
    0 => 'mixed',
  ),
  'ui\\draw\\path::lineTo' => 
  array (
    0 => 'mixed',
    'point' => 'UI\\Point',
    'radius' => 'float',
    'angle' => 'float',
    'sweep' => 'float',
    'negative' => 'float',
  ),
  'ui\\draw\\path::newFigure' => 
  array (
    0 => 'mixed',
    'point' => 'UI\\Point',
  ),
  'ui\\draw\\path::newFigureWithArc' => 
  array (
    0 => 'mixed',
    'point' => 'UI\\Point',
    'radius' => 'float',
    'angle' => 'float',
    'sweep' => 'float',
    'negative' => 'float',
  ),
  'ui\\draw\\pen::clip' => 
  array (
    0 => 'mixed',
    'path' => 'UI\\Draw\\Path',
  ),
  'ui\\draw\\pen::restore' => 
  array (
    0 => 'mixed',
  ),
  'ui\\draw\\pen::save' => 
  array (
    0 => 'mixed',
  ),
  'ui\\draw\\pen::transform' => 
  array (
    0 => 'mixed',
    'matrix' => 'UI\\Draw\\Matrix',
  ),
  'ui\\draw\\pen::write' => 
  array (
    0 => 'mixed',
    'point' => 'UI\\Point',
    'layout' => 'UI\\Draw\\Text\\Layout',
  ),
  'ui\\draw\\stroke::getCap' => 
  array (
    0 => 'int',
  ),
  'ui\\draw\\stroke::getJoin' => 
  array (
    0 => 'int',
  ),
  'ui\\draw\\stroke::getMiterLimit' => 
  array (
    0 => 'float',
  ),
  'ui\\draw\\stroke::getThickness' => 
  array (
    0 => 'float',
  ),
  'ui\\draw\\stroke::setCap' => 
  array (
    0 => 'mixed',
    'cap' => 'int',
  ),
  'ui\\draw\\stroke::setJoin' => 
  array (
    0 => 'mixed',
    'join' => 'int',
  ),
  'ui\\draw\\stroke::setMiterLimit' => 
  array (
    0 => 'mixed',
    'limit' => 'float',
  ),
  'ui\\draw\\stroke::setThickness' => 
  array (
    0 => 'mixed',
    'thickness' => 'float',
  ),
  'ui\\draw\\text\\font::getAscent' => 
  array (
    0 => 'float',
  ),
  'ui\\draw\\text\\font::getDescent' => 
  array (
    0 => 'float',
  ),
  'ui\\draw\\text\\font::getLeading' => 
  array (
    0 => 'float',
  ),
  'ui\\draw\\text\\font::getUnderlinePosition' => 
  array (
    0 => 'float',
  ),
  'ui\\draw\\text\\font::getUnderlineThickness' => 
  array (
    0 => 'float',
  ),
  'ui\\draw\\text\\font\\descriptor::getFamily' => 
  array (
    0 => 'string',
  ),
  'ui\\draw\\text\\font\\descriptor::getItalic' => 
  array (
    0 => 'int',
  ),
  'ui\\draw\\text\\font\\descriptor::getSize' => 
  array (
    0 => 'float',
  ),
  'ui\\draw\\text\\font\\descriptor::getStretch' => 
  array (
    0 => 'int',
  ),
  'ui\\draw\\text\\font\\descriptor::getWeight' => 
  array (
    0 => 'int',
  ),
  'ui\\draw\\text\\font\\fontfamilies' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ui\\draw\\text\\layout::setWidth' => 
  array (
    0 => 'mixed',
    'width' => 'float',
  ),
  'ui\\executor::kill' => 
  array (
    0 => 'void',
  ),
  'ui\\executor::onExecute' => 
  array (
    0 => 'void',
  ),
  'ui\\menu::append' => 
  array (
    0 => 'UI\\MenuItem',
    'name' => 'string',
    'type=' => 'string',
  ),
  'ui\\menu::appendAbout' => 
  array (
    0 => 'UI\\MenuItem',
    'type=' => 'string',
  ),
  'ui\\menu::appendCheck' => 
  array (
    0 => 'UI\\MenuItem',
    'name' => 'string',
    'type=' => 'string',
  ),
  'ui\\menu::appendPreferences' => 
  array (
    0 => 'UI\\MenuItem',
    'type=' => 'string',
  ),
  'ui\\menu::appendQuit' => 
  array (
    0 => 'UI\\MenuItem',
    'type=' => 'string',
  ),
  'ui\\menu::appendSeparator' => 
  array (
    0 => 'mixed',
  ),
  'ui\\menuitem::disable' => 
  array (
    0 => 'mixed',
  ),
  'ui\\menuitem::enable' => 
  array (
    0 => 'mixed',
  ),
  'ui\\menuitem::isChecked' => 
  array (
    0 => 'bool',
  ),
  'ui\\menuitem::onClick' => 
  array (
    0 => 'mixed',
  ),
  'ui\\menuitem::setChecked' => 
  array (
    0 => 'mixed',
    'checked' => 'bool',
  ),
  'ui\\point::getX' => 
  array (
    0 => 'float',
  ),
  'ui\\point::getY' => 
  array (
    0 => 'float',
  ),
  'ui\\point::setX' => 
  array (
    0 => 'mixed',
    'point' => 'float',
  ),
  'ui\\point::setY' => 
  array (
    0 => 'mixed',
    'point' => 'float',
  ),
  'ui\\quit' => 
  array (
    0 => 'void',
  ),
  'ui\\run' => 
  array (
    0 => 'void',
    'flags=' => 'int',
  ),
  'ui\\size::getHeight' => 
  array (
    0 => 'float',
  ),
  'ui\\size::getWidth' => 
  array (
    0 => 'float',
  ),
  'ui\\size::setHeight' => 
  array (
    0 => 'mixed',
    'size' => 'float',
  ),
  'ui\\size::setWidth' => 
  array (
    0 => 'mixed',
    'size' => 'float',
  ),
  'ui\\window::add' => 
  array (
    0 => 'mixed',
    'control' => 'UI\\Control',
  ),
  'ui\\window::error' => 
  array (
    0 => 'mixed',
    'title' => 'string',
    'msg' => 'string',
  ),
  'ui\\window::getSize' => 
  array (
    0 => 'UI\\Size',
  ),
  'ui\\window::getTitle' => 
  array (
    0 => 'string',
  ),
  'ui\\window::hasBorders' => 
  array (
    0 => 'bool',
  ),
  'ui\\window::hasMargin' => 
  array (
    0 => 'bool',
  ),
  'ui\\window::isFullScreen' => 
  array (
    0 => 'bool',
  ),
  'ui\\window::msg' => 
  array (
    0 => 'mixed',
    'title' => 'string',
    'msg' => 'string',
  ),
  'ui\\window::onClosing' => 
  array (
    0 => 'int',
  ),
  'ui\\window::open' => 
  array (
    0 => 'string',
  ),
  'ui\\window::save' => 
  array (
    0 => 'string',
  ),
  'ui\\window::setBorders' => 
  array (
    0 => 'mixed',
    'borders' => 'bool',
  ),
  'ui\\window::setFullScreen' => 
  array (
    0 => 'mixed',
    'full' => 'bool',
  ),
  'ui\\window::setMargin' => 
  array (
    0 => 'mixed',
    'margin' => 'bool',
  ),
  'ui\\window::setSize' => 
  array (
    0 => 'mixed',
    'size' => 'UI\\Size',
  ),
  'ui\\window::setTitle' => 
  array (
    0 => 'mixed',
    'title' => 'string',
  ),
  'uksort' => 
  array (
    0 => 'true',
    '&rw_array' => 'array<array-key, mixed>',
    'callback' => 'callable(mixed, mixed):int',
  ),
  'umask' => 
  array (
    0 => 'int',
    'mask=' => 'int|null',
  ),
  'UnderflowException::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'UnderflowException::__toString' => 
  array (
    0 => 'string',
  ),
  'UnderflowException::getCode' => 
  array (
    0 => 'int',
  ),
  'UnderflowException::getFile' => 
  array (
    0 => 'string',
  ),
  'UnderflowException::getLine' => 
  array (
    0 => 'int',
  ),
  'UnderflowException::getMessage' => 
  array (
    0 => 'string',
  ),
  'UnderflowException::getPrevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'UnderflowException::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'UnderflowException::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'UnexpectedValueException::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'UnexpectedValueException::__toString' => 
  array (
    0 => 'string',
  ),
  'UnexpectedValueException::getCode' => 
  array (
    0 => 'int',
  ),
  'UnexpectedValueException::getFile' => 
  array (
    0 => 'string',
  ),
  'UnexpectedValueException::getLine' => 
  array (
    0 => 'int',
  ),
  'UnexpectedValueException::getMessage' => 
  array (
    0 => 'string',
  ),
  'UnexpectedValueException::getPrevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'UnexpectedValueException::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'UnexpectedValueException::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'uniqid' => 
  array (
    0 => 'non-empty-string',
    'prefix=' => 'string',
    'more_entropy=' => 'bool',
  ),
  'unixtojd' => 
  array (
    0 => 'false|int',
    'timestamp=' => 'int|null',
  ),
  'unlink' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'context=' => 'resource',
  ),
  'unpack' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'format' => 'string',
    'string' => 'string',
    'offset=' => 'int',
  ),
  'unregister_tick_function' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'unserialize' => 
  array (
    0 => 'mixed',
    'data' => 'string',
    'options=' => 'array{allowed_classes?: array<array-key, class-string>|bool}',
  ),
  'unset' => 
  array (
    0 => 'void',
    'var=' => 'mixed',
    '...args=' => 'mixed',
  ),
  'untaint' => 
  array (
    0 => 'bool',
    '&rw_string' => 'string',
    '&...rw_strings=' => 'string',
  ),
  'uopz_allow_exit' => 
  array (
    0 => 'void',
    'allow' => 'bool',
  ),
  'uopz_backup' => 
  array (
    0 => 'void',
    'class' => 'string',
    'function' => 'string',
  ),
  'uopz_backup\'1' => 
  array (
    0 => 'void',
    'function' => 'string',
  ),
  'uopz_compose' => 
  array (
    0 => 'void',
    'name' => 'string',
    'classes' => 'array<array-key, mixed>',
    'methods=' => 'array<array-key, mixed>',
    'properties=' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'uopz_copy' => 
  array (
    0 => 'Closure',
    'class' => 'string',
    'function' => 'string',
  ),
  'uopz_copy\'1' => 
  array (
    0 => 'Closure',
    'function' => 'string',
  ),
  'uopz_delete' => 
  array (
    0 => 'void',
    'class' => 'string',
    'function' => 'string',
  ),
  'uopz_delete\'1' => 
  array (
    0 => 'void',
    'function' => 'string',
  ),
  'uopz_extend' => 
  array (
    0 => 'bool',
    'class' => 'string',
    'parent' => 'string',
  ),
  'uopz_flags' => 
  array (
    0 => 'int',
    'class' => 'string',
    'function' => 'string',
    'flags' => 'int',
  ),
  'uopz_flags\'1' => 
  array (
    0 => 'int',
    'function' => 'string',
    'flags' => 'int',
  ),
  'uopz_function' => 
  array (
    0 => 'void',
    'class' => 'string',
    'function' => 'string',
    'handler' => 'Closure',
    'modifiers=' => 'int',
  ),
  'uopz_function\'1' => 
  array (
    0 => 'void',
    'function' => 'string',
    'handler' => 'Closure',
    'modifiers=' => 'int',
  ),
  'uopz_get_exit_status' => 
  array (
    0 => 'int|null',
  ),
  'uopz_get_hook' => 
  array (
    0 => 'Closure|null',
    'class' => 'string',
    'function' => 'string',
  ),
  'uopz_get_hook\'1' => 
  array (
    0 => 'Closure|null',
    'function' => 'string',
  ),
  'uopz_get_mock' => 
  array (
    0 => 'null|object|string',
    'class' => 'string',
  ),
  'uopz_get_property' => 
  array (
    0 => 'mixed',
    'class' => 'object|string',
    'property' => 'string',
  ),
  'uopz_get_return' => 
  array (
    0 => 'mixed',
    'class=' => 'class-string',
    'function=' => 'string',
  ),
  'uopz_get_static' => 
  array (
    0 => 'array<array-key, mixed>|null',
    'class' => 'string',
    'function' => 'string',
  ),
  'uopz_implement' => 
  array (
    0 => 'bool',
    'class' => 'string',
    'interface' => 'string',
  ),
  'uopz_overload' => 
  array (
    0 => 'void',
    'opcode' => 'int',
    'callable' => 'callable',
  ),
  'uopz_redefine' => 
  array (
    0 => 'bool',
    'class' => 'string',
    'constant' => 'string',
    'value' => 'mixed',
  ),
  'uopz_redefine\'1' => 
  array (
    0 => 'bool',
    'constant' => 'string',
    'value' => 'mixed',
  ),
  'uopz_rename' => 
  array (
    0 => 'void',
    'class' => 'string',
    'function' => 'string',
    'rename' => 'string',
  ),
  'uopz_rename\'1' => 
  array (
    0 => 'void',
    'function' => 'string',
    'rename' => 'string',
  ),
  'uopz_restore' => 
  array (
    0 => 'void',
    'class' => 'string',
    'function' => 'string',
  ),
  'uopz_restore\'1' => 
  array (
    0 => 'void',
    'function' => 'string',
  ),
  'uopz_set_hook' => 
  array (
    0 => 'bool',
    'class' => 'string',
    'function' => 'string',
    'hook' => 'Closure',
  ),
  'uopz_set_hook\'1' => 
  array (
    0 => 'bool',
    'function' => 'string',
    'hook' => 'Closure',
  ),
  'uopz_set_mock' => 
  array (
    0 => 'void',
    'class' => 'string',
    'mock' => 'object|string',
  ),
  'uopz_set_property' => 
  array (
    0 => 'void',
    'class' => 'object|string',
    'property' => 'string',
    'value' => 'mixed',
  ),
  'uopz_set_return' => 
  array (
    0 => 'bool',
    'class' => 'string',
    'function' => 'string',
    'value' => 'mixed',
    'execute=' => 'bool',
  ),
  'uopz_set_return\'1' => 
  array (
    0 => 'bool',
    'function' => 'string',
    'value' => 'mixed',
    'execute=' => 'bool',
  ),
  'uopz_set_static' => 
  array (
    0 => 'void',
    'class' => 'string',
    'function' => 'string',
    'static' => 'array<array-key, mixed>',
  ),
  'uopz_undefine' => 
  array (
    0 => 'bool',
    'class' => 'string',
    'constant' => 'string',
  ),
  'uopz_undefine\'1' => 
  array (
    0 => 'bool',
    'constant' => 'string',
  ),
  'uopz_unset_hook' => 
  array (
    0 => 'bool',
    'class' => 'string',
    'function' => 'string',
  ),
  'uopz_unset_hook\'1' => 
  array (
    0 => 'bool',
    'function' => 'string',
  ),
  'uopz_unset_mock' => 
  array (
    0 => 'void',
    'class' => 'string',
  ),
  'uopz_unset_return' => 
  array (
    0 => 'bool',
    'class=' => 'class-string',
    'function=' => 'string',
  ),
  'uopz_unset_return\'1' => 
  array (
    0 => 'bool',
    'function' => 'string',
  ),
  'urldecode' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'urlencode' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'use_soap_error_handler' => 
  array (
    0 => 'bool',
    'enable=' => 'bool',
  ),
  'user_error' => 
  array (
    0 => 'bool',
    'message' => 'string',
    'error_level=' => 'int',
  ),
  'usleep' => 
  array (
    0 => 'void',
    'microseconds' => 'int<0, max>',
  ),
  'usort' => 
  array (
    0 => 'true',
    '&rw_array' => 'array<array-key, mixed>',
    'callback' => 'callable(mixed, mixed):int',
  ),
  'utf8_decode' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'utf8_encode' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'V8Js::__construct' => 
  array (
    0 => 'void',
    'object_name=' => 'string',
    'variables=' => 'array<array-key, mixed>',
    'extensions=' => 'array<array-key, mixed>',
    'report_uncaught_exceptions=' => 'bool',
    'snapshot_blob=' => 'string',
  ),
  'V8Js::clearPendingException' => 
  array (
    0 => 'mixed',
  ),
  'V8Js::compileString' => 
  array (
    0 => 'resource',
    'script' => 'mixed',
    'identifier=' => 'string',
  ),
  'V8Js::createSnapshot' => 
  array (
    0 => 'false|string',
    'embed_source' => 'string',
  ),
  'V8Js::executeScript' => 
  array (
    0 => 'mixed',
    'script' => 'resource',
    'flags=' => 'int',
    'time_limit=' => 'int',
    'memory_limit=' => 'int',
  ),
  'V8Js::executeString' => 
  array (
    0 => 'mixed',
    'script' => 'string',
    'identifier=' => 'string',
    'flags=' => 'int',
  ),
  'V8Js::getExtensions' => 
  array (
    0 => 'array<array-key, string>',
  ),
  'V8Js::getPendingException' => 
  array (
    0 => 'V8JsException|null',
  ),
  'V8Js::registerExtension' => 
  array (
    0 => 'bool',
    'extension_name' => 'string',
    'script' => 'string',
    'dependencies=' => 'array<array-key, mixed>',
    'auto_enable=' => 'bool',
  ),
  'V8Js::setAverageObjectSize' => 
  array (
    0 => 'mixed',
    'average_object_size' => 'int',
  ),
  'V8Js::setMemoryLimit' => 
  array (
    0 => 'mixed',
    'limit' => 'int',
  ),
  'V8Js::setModuleLoader' => 
  array (
    0 => 'mixed',
    'loader' => 'callable',
  ),
  'V8Js::setModuleNormaliser' => 
  array (
    0 => 'mixed',
    'normaliser' => 'callable',
  ),
  'V8Js::setTimeLimit' => 
  array (
    0 => 'mixed',
    'limit' => 'int',
  ),
  'V8JsException::getJsFileName' => 
  array (
    0 => 'string',
  ),
  'V8JsException::getJsLineNumber' => 
  array (
    0 => 'int',
  ),
  'V8JsException::getJsSourceLine' => 
  array (
    0 => 'int',
  ),
  'V8JsException::getJsTrace' => 
  array (
    0 => 'string',
  ),
  'V8JsScriptException::__clone' => 
  array (
    0 => 'void',
  ),
  'V8JsScriptException::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Exception|Throwable|null',
  ),
  'V8JsScriptException::__toString' => 
  array (
    0 => 'string',
  ),
  'V8JsScriptException::__wakeup' => 
  array (
    0 => 'void',
  ),
  'V8JsScriptException::getCode' => 
  array (
    0 => 'int',
  ),
  'V8JsScriptException::getFile' => 
  array (
    0 => 'string',
  ),
  'V8JsScriptException::getJsEndColumn' => 
  array (
    0 => 'int',
  ),
  'V8JsScriptException::getJsFileName' => 
  array (
    0 => 'string',
  ),
  'V8JsScriptException::getJsLineNumber' => 
  array (
    0 => 'int',
  ),
  'V8JsScriptException::getJsSourceLine' => 
  array (
    0 => 'string',
  ),
  'V8JsScriptException::getJsStartColumn' => 
  array (
    0 => 'int',
  ),
  'V8JsScriptException::getJsTrace' => 
  array (
    0 => 'string',
  ),
  'V8JsScriptException::getLine' => 
  array (
    0 => 'int',
  ),
  'V8JsScriptException::getMessage' => 
  array (
    0 => 'string',
  ),
  'V8JsScriptException::getPrevious' => 
  array (
    0 => 'Exception|Throwable',
  ),
  'V8JsScriptException::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'V8JsScriptException::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'var_dump' => 
  array (
    0 => 'void',
    'value' => 'mixed',
    '...values=' => 'mixed',
  ),
  'var_export' => 
  array (
    0 => 'null|string',
    'value' => 'mixed',
    'return=' => 'bool',
  ),
  'VARIANT::__construct' => 
  array (
    0 => 'void',
    'value=' => 'mixed',
    'type=' => 'int',
    'codepage=' => 'int',
  ),
  'variant_abs' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
  ),
  'variant_add' => 
  array (
    0 => 'mixed',
    'left' => 'mixed',
    'right' => 'mixed',
  ),
  'variant_and' => 
  array (
    0 => 'mixed',
    'left' => 'mixed',
    'right' => 'mixed',
  ),
  'variant_cast' => 
  array (
    0 => 'VARIANT',
    'variant' => 'VARIANT',
    'type' => 'int',
  ),
  'variant_cat' => 
  array (
    0 => 'mixed',
    'left' => 'mixed',
    'right' => 'mixed',
  ),
  'variant_cmp' => 
  array (
    0 => 'int',
    'left' => 'mixed',
    'right' => 'mixed',
    'locale_id=' => 'int',
    'flags=' => 'int',
  ),
  'variant_date_from_timestamp' => 
  array (
    0 => 'VARIANT',
    'timestamp' => 'int',
  ),
  'variant_date_to_timestamp' => 
  array (
    0 => 'int',
    'variant' => 'VARIANT',
  ),
  'variant_div' => 
  array (
    0 => 'mixed',
    'left' => 'mixed',
    'right' => 'mixed',
  ),
  'variant_eqv' => 
  array (
    0 => 'mixed',
    'left' => 'mixed',
    'right' => 'mixed',
  ),
  'variant_fix' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
  ),
  'variant_get_type' => 
  array (
    0 => 'int',
    'variant' => 'VARIANT',
  ),
  'variant_idiv' => 
  array (
    0 => 'mixed',
    'left' => 'mixed',
    'right' => 'mixed',
  ),
  'variant_imp' => 
  array (
    0 => 'mixed',
    'left' => 'mixed',
    'right' => 'mixed',
  ),
  'variant_int' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
  ),
  'variant_mod' => 
  array (
    0 => 'mixed',
    'left' => 'mixed',
    'right' => 'mixed',
  ),
  'variant_mul' => 
  array (
    0 => 'mixed',
    'left' => 'mixed',
    'right' => 'mixed',
  ),
  'variant_neg' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
  ),
  'variant_not' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
  ),
  'variant_or' => 
  array (
    0 => 'mixed',
    'left' => 'mixed',
    'right' => 'mixed',
  ),
  'variant_pow' => 
  array (
    0 => 'mixed',
    'left' => 'mixed',
    'right' => 'mixed',
  ),
  'variant_round' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
    'decimals' => 'int',
  ),
  'variant_set' => 
  array (
    0 => 'void',
    'variant' => 'object',
    'value' => 'mixed',
  ),
  'variant_set_type' => 
  array (
    0 => 'void',
    'variant' => 'object',
    'type' => 'int',
  ),
  'variant_sub' => 
  array (
    0 => 'mixed',
    'left' => 'mixed',
    'right' => 'mixed',
  ),
  'variant_xor' => 
  array (
    0 => 'mixed',
    'left' => 'mixed',
    'right' => 'mixed',
  ),
  'VarnishAdmin::__construct' => 
  array (
    0 => 'void',
    'args=' => 'array<array-key, mixed>',
  ),
  'VarnishAdmin::auth' => 
  array (
    0 => 'bool',
  ),
  'VarnishAdmin::ban' => 
  array (
    0 => 'int',
    'vcl_regex' => 'string',
  ),
  'VarnishAdmin::banUrl' => 
  array (
    0 => 'int',
    'vcl_regex' => 'string',
  ),
  'VarnishAdmin::clearPanic' => 
  array (
    0 => 'int',
  ),
  'VarnishAdmin::connect' => 
  array (
    0 => 'bool',
  ),
  'VarnishAdmin::disconnect' => 
  array (
    0 => 'bool',
  ),
  'VarnishAdmin::getPanic' => 
  array (
    0 => 'string',
  ),
  'VarnishAdmin::getParams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'VarnishAdmin::isRunning' => 
  array (
    0 => 'bool',
  ),
  'VarnishAdmin::setCompat' => 
  array (
    0 => 'void',
    'compat' => 'int',
  ),
  'VarnishAdmin::setHost' => 
  array (
    0 => 'void',
    'host' => 'string',
  ),
  'VarnishAdmin::setIdent' => 
  array (
    0 => 'void',
    'ident' => 'string',
  ),
  'VarnishAdmin::setParam' => 
  array (
    0 => 'int',
    'name' => 'string',
    'value' => 'int|string',
  ),
  'VarnishAdmin::setPort' => 
  array (
    0 => 'void',
    'port' => 'int',
  ),
  'VarnishAdmin::setSecret' => 
  array (
    0 => 'void',
    'secret' => 'string',
  ),
  'VarnishAdmin::setTimeout' => 
  array (
    0 => 'void',
    'timeout' => 'int',
  ),
  'VarnishAdmin::start' => 
  array (
    0 => 'int',
  ),
  'VarnishAdmin::stop' => 
  array (
    0 => 'int',
  ),
  'VarnishLog::__construct' => 
  array (
    0 => 'void',
    'args=' => 'array<array-key, mixed>',
  ),
  'VarnishLog::getLine' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'VarnishLog::getTagName' => 
  array (
    0 => 'string',
    'index' => 'int',
  ),
  'VarnishStat::__construct' => 
  array (
    0 => 'void',
    'args=' => 'array<array-key, mixed>',
  ),
  'VarnishStat::getSnapshot' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'version_compare' => 
  array (
    0 => 'bool',
    'version1' => 'string',
    'version2' => 'string',
    'operator' => '\'!=\'|\'<\'|\'<=\'|\'<>\'|\'=\'|\'==\'|\'>\'|\'>=\'|\'eq\'|\'ge\'|\'gt\'|\'le\'|\'lt\'|\'ne\'',
  ),
  'version_compare\'1' => 
  array (
    0 => 'int',
    'version1' => 'string',
    'version2' => 'string',
  ),
  'vfprintf' => 
  array (
    0 => 'int<0, max>',
    'stream' => 'resource',
    'format' => 'string',
    'values' => 'array<array-key, float|int|string>',
  ),
  'virtual' => 
  array (
    0 => 'bool',
    'uri' => 'string',
  ),
  'vpopmail_add_alias_domain' => 
  array (
    0 => 'bool',
    'domain' => 'string',
    'aliasdomain' => 'string',
  ),
  'vpopmail_add_alias_domain_ex' => 
  array (
    0 => 'bool',
    'olddomain' => 'string',
    'newdomain' => 'string',
  ),
  'vpopmail_add_domain' => 
  array (
    0 => 'bool',
    'domain' => 'string',
    'dir' => 'string',
    'uid' => 'int',
    'gid' => 'int',
  ),
  'vpopmail_add_domain_ex' => 
  array (
    0 => 'bool',
    'domain' => 'string',
    'passwd' => 'string',
    'quota=' => 'string',
    'bounce=' => 'string',
    'apop=' => 'bool',
  ),
  'vpopmail_add_user' => 
  array (
    0 => 'bool',
    'user' => 'string',
    'domain' => 'string',
    'password' => 'string',
    'gecos=' => 'string',
    'apop=' => 'bool',
  ),
  'vpopmail_alias_add' => 
  array (
    0 => 'bool',
    'user' => 'string',
    'domain' => 'string',
    'alias' => 'string',
  ),
  'vpopmail_alias_del' => 
  array (
    0 => 'bool',
    'user' => 'string',
    'domain' => 'string',
  ),
  'vpopmail_alias_del_domain' => 
  array (
    0 => 'bool',
    'domain' => 'string',
  ),
  'vpopmail_alias_get' => 
  array (
    0 => 'array<array-key, mixed>',
    'alias' => 'string',
    'domain' => 'string',
  ),
  'vpopmail_alias_get_all' => 
  array (
    0 => 'array<array-key, mixed>',
    'domain' => 'string',
  ),
  'vpopmail_auth_user' => 
  array (
    0 => 'bool',
    'user' => 'string',
    'domain' => 'string',
    'password' => 'string',
    'apop=' => 'string',
  ),
  'vpopmail_del_domain' => 
  array (
    0 => 'bool',
    'domain' => 'string',
  ),
  'vpopmail_del_domain_ex' => 
  array (
    0 => 'bool',
    'domain' => 'string',
  ),
  'vpopmail_del_user' => 
  array (
    0 => 'bool',
    'user' => 'string',
    'domain' => 'string',
  ),
  'vpopmail_error' => 
  array (
    0 => 'string',
  ),
  'vpopmail_passwd' => 
  array (
    0 => 'bool',
    'user' => 'string',
    'domain' => 'string',
    'password' => 'string',
    'apop=' => 'bool',
  ),
  'vpopmail_set_user_quota' => 
  array (
    0 => 'bool',
    'user' => 'string',
    'domain' => 'string',
    'quota' => 'string',
  ),
  'vprintf' => 
  array (
    0 => 'int<0, max>',
    'format' => 'string',
    'values' => 'array<array-key, float|int|string>',
  ),
  'vsprintf' => 
  array (
    0 => 'string',
    'format' => 'string',
    'values' => 'array<array-key, float|int|string>',
  ),
  'Vtiful\\Kernel\\Chart::__construct' => 
  array (
    0 => 'void',
    'handle' => 'resource',
    'type' => 'int',
  ),
  'Vtiful\\Kernel\\Chart::axisNameX' => 
  array (
    0 => 'Vtiful\\Kernel\\Chart',
    'name' => 'string',
  ),
  'Vtiful\\Kernel\\Chart::axisNameY' => 
  array (
    0 => 'Vtiful\\Kernel\\Chart',
    'name' => 'string',
  ),
  'Vtiful\\Kernel\\Chart::legendSetPosition' => 
  array (
    0 => 'Vtiful\\Kernel\\Chart',
    'type' => 'int',
  ),
  'Vtiful\\Kernel\\Chart::series' => 
  array (
    0 => 'Vtiful\\Kernel\\Chart',
    'value' => 'string',
    'categories=' => 'string',
  ),
  'Vtiful\\Kernel\\Chart::seriesName' => 
  array (
    0 => 'Vtiful\\Kernel\\Chart',
    'value' => 'string',
  ),
  'Vtiful\\Kernel\\Chart::style' => 
  array (
    0 => 'Vtiful\\Kernel\\Chart',
    'style' => 'int',
  ),
  'Vtiful\\Kernel\\Chart::title' => 
  array (
    0 => 'Vtiful\\Kernel\\Chart',
    'title' => 'string',
  ),
  'Vtiful\\Kernel\\Chart::toResource' => 
  array (
    0 => 'resource',
  ),
  'Vtiful\\Kernel\\Excel::__construct' => 
  array (
    0 => 'void',
    'config' => 'array<array-key, mixed>',
  ),
  'Vtiful\\Kernel\\Excel::activateSheet' => 
  array (
    0 => 'bool',
    'sheet_name' => 'string',
  ),
  'Vtiful\\Kernel\\Excel::addSheet' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'sheet_name=' => 'null|string',
  ),
  'Vtiful\\Kernel\\Excel::autoFilter' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'range' => 'string',
  ),
  'Vtiful\\Kernel\\Excel::checkoutSheet' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'sheet_name' => 'string',
  ),
  'Vtiful\\Kernel\\Excel::close' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
  ),
  'Vtiful\\Kernel\\Excel::columnIndexFromString' => 
  array (
    0 => 'int',
    'index' => 'string',
  ),
  'Vtiful\\Kernel\\Excel::constMemory' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'file_name' => 'string',
    'sheet_name=' => 'null|string',
  ),
  'Vtiful\\Kernel\\Excel::data' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'data' => 'array<array-key, mixed>',
  ),
  'Vtiful\\Kernel\\Excel::defaultFormat' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'format_handle' => 'resource',
  ),
  'Vtiful\\Kernel\\Excel::existSheet' => 
  array (
    0 => 'bool',
    'sheet_name' => 'string',
  ),
  'Vtiful\\Kernel\\Excel::fileName' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'file_name' => 'string',
    'sheet_name=' => 'null|string',
  ),
  'Vtiful\\Kernel\\Excel::freezePanes' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'row' => 'int',
    'column' => 'int',
  ),
  'Vtiful\\Kernel\\Excel::getHandle' => 
  array (
    0 => 'resource',
  ),
  'Vtiful\\Kernel\\Excel::getSheetData' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'Vtiful\\Kernel\\Excel::gridline' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'option=' => 'int',
  ),
  'Vtiful\\Kernel\\Excel::header' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'header' => 'array<array-key, mixed>',
    'format_handle=' => 'null|resource',
  ),
  'Vtiful\\Kernel\\Excel::insertChart' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'row' => 'int',
    'column' => 'int',
    'chart_resource' => 'resource',
  ),
  'Vtiful\\Kernel\\Excel::insertComment' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'row' => 'int',
    'column' => 'int',
    'comment' => 'string',
  ),
  'Vtiful\\Kernel\\Excel::insertDate' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'row' => 'int',
    'column' => 'int',
    'timestamp' => 'int',
    'format=' => 'null|string',
    'format_handle=' => 'null|resource',
  ),
  'Vtiful\\Kernel\\Excel::insertFormula' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'row' => 'int',
    'column' => 'int',
    'formula' => 'string',
    'format_handle=' => 'null|resource',
  ),
  'Vtiful\\Kernel\\Excel::insertImage' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'row' => 'int',
    'column' => 'int',
    'image' => 'string',
    'width=' => 'float|null',
    'height=' => 'float|null',
  ),
  'Vtiful\\Kernel\\Excel::insertText' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'row' => 'int',
    'column' => 'int',
    'data' => 'float|int|string',
    'format=' => 'null|string',
    'format_handle=' => 'null|resource',
  ),
  'Vtiful\\Kernel\\Excel::insertUrl' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'row' => 'int',
    'column' => 'int',
    'url' => 'string',
    'text=' => 'null|string',
    'tool_tip=' => 'null|string',
    'format=' => 'null|resource',
  ),
  'Vtiful\\Kernel\\Excel::mergeCells' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'range' => 'string',
    'data' => 'string',
    'format_handle=' => 'null|resource',
  ),
  'Vtiful\\Kernel\\Excel::nextCellCallback' => 
  array (
    0 => 'void',
    'fci' => 'callable(int, int, mixed)',
    'sheet_name=' => 'null|string',
  ),
  'Vtiful\\Kernel\\Excel::nextRow' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'zv_type_t=' => 'array<array-key, mixed>|null',
  ),
  'Vtiful\\Kernel\\Excel::openFile' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'zs_file_name' => 'string',
  ),
  'Vtiful\\Kernel\\Excel::openSheet' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'zs_sheet_name=' => 'null|string',
    'zl_flag=' => 'int|null',
  ),
  'Vtiful\\Kernel\\Excel::output' => 
  array (
    0 => 'string',
  ),
  'Vtiful\\Kernel\\Excel::protection' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'password=' => 'null|string',
  ),
  'Vtiful\\Kernel\\Excel::putCSV' => 
  array (
    0 => 'bool',
    'fp' => 'resource',
    'delimiter_str=' => 'null|string',
    'enclosure_str=' => 'null|string',
    'escape_str=' => 'null|string',
  ),
  'Vtiful\\Kernel\\Excel::putCSVCallback' => 
  array (
    0 => 'bool',
    'callback' => 'callable(array<array-key, mixed>):array<array-key, mixed>',
    'fp' => 'resource',
    'delimiter_str=' => 'null|string',
    'enclosure_str=' => 'null|string',
    'escape_str=' => 'null|string',
  ),
  'Vtiful\\Kernel\\Excel::setColumn' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'range' => 'string',
    'width' => 'float',
    'format_handle=' => 'null|resource',
  ),
  'Vtiful\\Kernel\\Excel::setCurrentSheetHide' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
  ),
  'Vtiful\\Kernel\\Excel::setCurrentSheetIsFirst' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
  ),
  'Vtiful\\Kernel\\Excel::setGlobalType' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'zv_type_t' => 'int',
  ),
  'Vtiful\\Kernel\\Excel::setLandscape' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
  ),
  'Vtiful\\Kernel\\Excel::setMargins' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'left=' => 'float|null',
    'right=' => 'float|null',
    'top=' => 'float|null',
    'bottom=' => 'float|null',
  ),
  'Vtiful\\Kernel\\Excel::setPaper' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'paper' => 'int',
  ),
  'Vtiful\\Kernel\\Excel::setPortrait' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
  ),
  'Vtiful\\Kernel\\Excel::setRow' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'range' => 'string',
    'height' => 'float',
    'format_handle=' => 'null|resource',
  ),
  'Vtiful\\Kernel\\Excel::setSkipRows' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'zv_skip_t' => 'int',
  ),
  'Vtiful\\Kernel\\Excel::setType' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'zv_type_t' => 'array<array-key, mixed>',
  ),
  'Vtiful\\Kernel\\Excel::sheetList' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Vtiful\\Kernel\\Excel::showComment' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
  ),
  'Vtiful\\Kernel\\Excel::stringFromColumnIndex' => 
  array (
    0 => 'string',
    'index' => 'int',
  ),
  'Vtiful\\Kernel\\Excel::timestampFromDateDouble' => 
  array (
    0 => 'int',
    'index' => 'float|null',
  ),
  'Vtiful\\Kernel\\Excel::validation' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'range' => 'string',
    'validation_resource' => 'resource',
  ),
  'Vtiful\\Kernel\\Excel::zoom' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'scale' => 'int',
  ),
  'Vtiful\\Kernel\\Format::__construct' => 
  array (
    0 => 'void',
    'handle' => 'resource',
  ),
  'Vtiful\\Kernel\\Format::align' => 
  array (
    0 => 'Vtiful\\Kernel\\Format',
    '...style' => 'int',
  ),
  'Vtiful\\Kernel\\Format::background' => 
  array (
    0 => 'Vtiful\\Kernel\\Format',
    'color' => 'int',
    'pattern=' => 'int',
  ),
  'Vtiful\\Kernel\\Format::bold' => 
  array (
    0 => 'Vtiful\\Kernel\\Format',
  ),
  'Vtiful\\Kernel\\Format::border' => 
  array (
    0 => 'Vtiful\\Kernel\\Format',
    'style' => 'int',
  ),
  'Vtiful\\Kernel\\Format::font' => 
  array (
    0 => 'Vtiful\\Kernel\\Format',
    'font' => 'string',
  ),
  'Vtiful\\Kernel\\Format::fontColor' => 
  array (
    0 => 'Vtiful\\Kernel\\Format',
    'color' => 'int',
  ),
  'Vtiful\\Kernel\\Format::fontSize' => 
  array (
    0 => 'Vtiful\\Kernel\\Format',
    'size' => 'float',
  ),
  'Vtiful\\Kernel\\Format::italic' => 
  array (
    0 => 'Vtiful\\Kernel\\Format',
  ),
  'Vtiful\\Kernel\\Format::number' => 
  array (
    0 => 'Vtiful\\Kernel\\Format',
    'format' => 'string',
  ),
  'Vtiful\\Kernel\\Format::strikeout' => 
  array (
    0 => 'Vtiful\\Kernel\\Format',
  ),
  'Vtiful\\Kernel\\Format::toResource' => 
  array (
    0 => 'resource',
  ),
  'Vtiful\\Kernel\\Format::underline' => 
  array (
    0 => 'Vtiful\\Kernel\\Format',
    'style' => 'int',
  ),
  'Vtiful\\Kernel\\Format::unlocked' => 
  array (
    0 => 'Vtiful\\Kernel\\Format',
  ),
  'Vtiful\\Kernel\\Format::wrap' => 
  array (
    0 => 'Vtiful\\Kernel\\Format',
  ),
  'Vtiful\\Kernel\\Validation::__construct' => 
  array (
    0 => 'void',
  ),
  'Vtiful\\Kernel\\Validation::criteriaType' => 
  array (
    0 => 'Vtiful\\Kernel\\Validation|null',
    'type' => 'int',
  ),
  'Vtiful\\Kernel\\Validation::maximumFormula' => 
  array (
    0 => 'Vtiful\\Kernel\\Validation|null',
    'maximum_formula' => 'string',
  ),
  'Vtiful\\Kernel\\Validation::maximumNumber' => 
  array (
    0 => 'Vtiful\\Kernel\\Validation|null',
    'maximum_number' => 'float',
  ),
  'Vtiful\\Kernel\\Validation::minimumFormula' => 
  array (
    0 => 'Vtiful\\Kernel\\Validation|null',
    'minimum_formula' => 'string',
  ),
  'Vtiful\\Kernel\\Validation::minimumNumber' => 
  array (
    0 => 'Vtiful\\Kernel\\Validation|null',
    'minimum_number' => 'float',
  ),
  'Vtiful\\Kernel\\Validation::toResource' => 
  array (
    0 => 'resource',
  ),
  'Vtiful\\Kernel\\Validation::validationType' => 
  array (
    0 => 'Vtiful\\Kernel\\Validation|null',
    'type' => 'int',
  ),
  'Vtiful\\Kernel\\Validation::valueList' => 
  array (
    0 => 'Vtiful\\Kernel\\Validation|null',
    'value_list' => 'array<array-key, mixed>',
  ),
  'Vtiful\\Kernel\\Validation::valueNumber' => 
  array (
    0 => 'Vtiful\\Kernel\\Validation|null',
    'value_number' => 'int',
  ),
  'w32api_deftype' => 
  array (
    0 => 'bool',
    'typename' => 'string',
    'member1_type' => 'string',
    'member1_name' => 'string',
    '...args=' => 'string',
  ),
  'w32api_init_dtype' => 
  array (
    0 => 'resource',
    'typename' => 'string',
    'value' => 'mixed',
    '...args=' => 'mixed',
  ),
  'w32api_invoke_function' => 
  array (
    0 => 'mixed',
    'funcname' => 'string',
    'argument' => 'mixed',
    '...args=' => 'mixed',
  ),
  'w32api_register_function' => 
  array (
    0 => 'bool',
    'library' => 'string',
    'function_name' => 'string',
    'return_type' => 'string',
  ),
  'w32api_set_call_method' => 
  array (
    0 => 'mixed',
    'method' => 'int',
  ),
  'wddx_add_vars' => 
  array (
    0 => 'bool',
    'packet_id' => 'resource',
    'var_names' => 'mixed',
    '...vars=' => 'mixed',
  ),
  'wddx_deserialize' => 
  array (
    0 => 'mixed',
    'packet' => 'string',
  ),
  'wddx_packet_end' => 
  array (
    0 => 'string',
    'packet_id' => 'resource',
  ),
  'wddx_packet_start' => 
  array (
    0 => 'false|resource',
    'comment=' => 'string',
  ),
  'wddx_serialize_value' => 
  array (
    0 => 'false|string',
    'value' => 'mixed',
    'comment=' => 'string',
  ),
  'wddx_serialize_vars' => 
  array (
    0 => 'false|string',
    'var_name' => 'mixed',
    '...vars=' => 'mixed',
  ),
  'WeakMap::count' => 
  array (
    0 => 'int',
  ),
  'WeakMap::getIterator' => 
  array (
    0 => 'Iterator',
  ),
  'WeakMap::offsetExists' => 
  array (
    0 => 'bool',
    'object' => 'object',
  ),
  'WeakMap::offsetGet' => 
  array (
    0 => 'mixed',
    'object' => 'object',
  ),
  'WeakMap::offsetSet' => 
  array (
    0 => 'void',
    'object' => 'object',
    'value' => 'mixed',
  ),
  'WeakMap::offsetUnset' => 
  array (
    0 => 'void',
    'object' => 'object',
  ),
  'Weakref::acquire' => 
  array (
    0 => 'bool',
  ),
  'Weakref::get' => 
  array (
    0 => 'object',
  ),
  'Weakref::release' => 
  array (
    0 => 'bool',
  ),
  'Weakref::valid' => 
  array (
    0 => 'bool',
  ),
  'webObj::convertToString' => 
  array (
    0 => 'string',
  ),
  'webObj::free' => 
  array (
    0 => 'void',
  ),
  'webObj::set' => 
  array (
    0 => 'int',
    'property_name' => 'string',
    'new_value' => 'mixed',
  ),
  'webObj::updateFromString' => 
  array (
    0 => 'int',
    'snippet' => 'string',
  ),
  'win32_continue_service' => 
  array (
    0 => 'false|int',
    'servicename' => 'string',
    'machine=' => 'string',
  ),
  'win32_create_service' => 
  array (
    0 => 'false|int',
    'details' => 'array<array-key, mixed>',
    'machine=' => 'string',
  ),
  'win32_delete_service' => 
  array (
    0 => 'false|int',
    'servicename' => 'string',
    'machine=' => 'string',
  ),
  'win32_get_last_control_message' => 
  array (
    0 => 'int',
  ),
  'win32_pause_service' => 
  array (
    0 => 'false|int',
    'servicename' => 'string',
    'machine=' => 'string',
  ),
  'win32_ps_list_procs' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'win32_ps_stat_mem' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'win32_ps_stat_proc' => 
  array (
    0 => 'array<array-key, mixed>',
    'pid=' => 'int',
  ),
  'win32_query_service_status' => 
  array (
    0 => 'array<array-key, mixed>|false|int',
    'servicename' => 'string',
    'machine=' => 'string',
  ),
  'win32_send_custom_control' => 
  array (
    0 => 'int',
    'servicename' => 'string',
    'control' => 'int',
    'machine=' => 'string',
  ),
  'win32_set_service_exit_code' => 
  array (
    0 => 'int',
    'exitCode=' => 'int',
  ),
  'win32_set_service_exit_mode' => 
  array (
    0 => 'bool',
    'gracefulMode=' => 'bool',
  ),
  'win32_set_service_status' => 
  array (
    0 => 'bool|int',
    'status' => 'int',
    'checkpoint=' => 'int',
  ),
  'win32_start_service' => 
  array (
    0 => 'false|int',
    'servicename' => 'string',
    'machine=' => 'string',
  ),
  'win32_start_service_ctrl_dispatcher' => 
  array (
    0 => 'bool|int',
    'name' => 'string',
  ),
  'win32_stop_service' => 
  array (
    0 => 'false|int',
    'servicename' => 'string',
    'machine=' => 'string',
  ),
  'wincache_fcache_fileinfo' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'summaryonly=' => 'bool',
  ),
  'wincache_fcache_meminfo' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'wincache_lock' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'isglobal=' => 'bool',
  ),
  'wincache_ocache_fileinfo' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'summaryonly=' => 'bool',
  ),
  'wincache_ocache_meminfo' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'wincache_refresh_if_changed' => 
  array (
    0 => 'bool',
    'files=' => 'array<array-key, mixed>',
  ),
  'wincache_rplist_fileinfo' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'summaryonly=' => 'bool',
  ),
  'wincache_rplist_meminfo' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'wincache_scache_info' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'summaryonly=' => 'bool',
  ),
  'wincache_scache_meminfo' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'wincache_ucache_add' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'mixed',
    'ttl=' => 'int',
  ),
  'wincache_ucache_add\'1' => 
  array (
    0 => 'bool',
    'values' => 'array<array-key, mixed>',
    'unused=' => 'mixed',
    'ttl=' => 'int',
  ),
  'wincache_ucache_cas' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'old_value' => 'int',
    'new_value' => 'int',
  ),
  'wincache_ucache_clear' => 
  array (
    0 => 'bool',
  ),
  'wincache_ucache_dec' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'dec_by=' => 'int',
    'success=' => 'bool',
  ),
  'wincache_ucache_delete' => 
  array (
    0 => 'bool',
    'key' => 'mixed',
  ),
  'wincache_ucache_exists' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'wincache_ucache_get' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    '&w_success=' => 'bool',
  ),
  'wincache_ucache_inc' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'inc_by=' => 'int',
    'success=' => 'bool',
  ),
  'wincache_ucache_info' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'summaryonly=' => 'bool',
    'key=' => 'string',
  ),
  'wincache_ucache_meminfo' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'wincache_ucache_set' => 
  array (
    0 => 'bool',
    'key' => 'mixed',
    'value' => 'mixed',
    'ttl=' => 'int',
  ),
  'wincache_ucache_set\'1' => 
  array (
    0 => 'bool',
    'values' => 'array<array-key, mixed>',
    'unused=' => 'mixed',
    'ttl=' => 'int',
  ),
  'wincache_unlock' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'wkhtmltox\\image\\converter::convert' => 
  array (
    0 => 'null|string',
  ),
  'wkhtmltox\\image\\converter::getVersion' => 
  array (
    0 => 'string',
  ),
  'wkhtmltox\\pdf\\converter::add' => 
  array (
    0 => 'void',
    'object' => 'wkhtmltox\\PDF\\Object',
  ),
  'wkhtmltox\\pdf\\converter::convert' => 
  array (
    0 => 'null|string',
  ),
  'wkhtmltox\\pdf\\converter::getVersion' => 
  array (
    0 => 'string',
  ),
  'wordwrap' => 
  array (
    0 => 'string',
    'string' => 'string',
    'width=' => 'int',
    'break=' => 'string',
    'cut_long_words=' => 'bool',
  ),
  'Worker::__construct' => 
  array (
    0 => 'void',
  ),
  'Worker::addRef' => 
  array (
    0 => 'void',
  ),
  'Worker::chunk' => 
  array (
    0 => 'array<array-key, mixed>',
    'size' => 'int',
    'preserve' => 'bool',
  ),
  'Worker::collect' => 
  array (
    0 => 'int',
    'collector=' => 'callable',
  ),
  'Worker::count' => 
  array (
    0 => 'int',
  ),
  'Worker::delRef' => 
  array (
    0 => 'void',
  ),
  'Worker::detach' => 
  array (
    0 => 'void',
  ),
  'Worker::extend' => 
  array (
    0 => 'bool',
    'class' => 'string',
  ),
  'Worker::getCreatorId' => 
  array (
    0 => 'int',
  ),
  'Worker::getCurrentThread' => 
  array (
    0 => 'Thread',
  ),
  'Worker::getCurrentThreadId' => 
  array (
    0 => 'int',
  ),
  'Worker::getRefCount' => 
  array (
    0 => 'int',
  ),
  'Worker::getStacked' => 
  array (
    0 => 'int',
  ),
  'Worker::getTerminationInfo' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Worker::getThreadId' => 
  array (
    0 => 'int',
  ),
  'Worker::globally' => 
  array (
    0 => 'mixed',
  ),
  'Worker::isGarbage' => 
  array (
    0 => 'bool',
  ),
  'Worker::isJoined' => 
  array (
    0 => 'bool',
  ),
  'Worker::isRunning' => 
  array (
    0 => 'bool',
  ),
  'Worker::isShutdown' => 
  array (
    0 => 'bool',
  ),
  'Worker::isStarted' => 
  array (
    0 => 'bool',
  ),
  'Worker::isTerminated' => 
  array (
    0 => 'bool',
  ),
  'Worker::isWaiting' => 
  array (
    0 => 'bool',
  ),
  'Worker::isWorking' => 
  array (
    0 => 'bool',
  ),
  'Worker::join' => 
  array (
    0 => 'bool',
  ),
  'Worker::kill' => 
  array (
    0 => 'bool',
  ),
  'Worker::lock' => 
  array (
    0 => 'bool',
  ),
  'Worker::merge' => 
  array (
    0 => 'bool',
    'from' => 'mixed',
    'overwrite=' => 'mixed',
  ),
  'Worker::notify' => 
  array (
    0 => 'bool',
  ),
  'Worker::notifyOne' => 
  array (
    0 => 'bool',
  ),
  'Worker::offsetExists' => 
  array (
    0 => 'bool',
    'offset' => 'int|string',
  ),
  'Worker::offsetGet' => 
  array (
    0 => 'mixed',
    'offset' => 'int|string',
  ),
  'Worker::offsetSet' => 
  array (
    0 => 'void',
    'offset' => 'int|null|string',
    'value' => 'mixed',
  ),
  'Worker::offsetUnset' => 
  array (
    0 => 'void',
    'offset' => 'int|string',
  ),
  'Worker::pop' => 
  array (
    0 => 'bool',
  ),
  'Worker::run' => 
  array (
    0 => 'void',
  ),
  'Worker::setGarbage' => 
  array (
    0 => 'void',
  ),
  'Worker::shift' => 
  array (
    0 => 'bool',
  ),
  'Worker::shutdown' => 
  array (
    0 => 'bool',
  ),
  'Worker::stack' => 
  array (
    0 => 'int',
    '&rw_work' => 'Threaded',
  ),
  'Worker::start' => 
  array (
    0 => 'bool',
    'options=' => 'int',
  ),
  'Worker::synchronized' => 
  array (
    0 => 'mixed',
    'block' => 'Closure',
    '_=' => 'mixed',
  ),
  'Worker::unlock' => 
  array (
    0 => 'bool',
  ),
  'Worker::unstack' => 
  array (
    0 => 'int',
    '&rw_work=' => 'Threaded',
  ),
  'Worker::wait' => 
  array (
    0 => 'bool',
    'timeout=' => 'int',
  ),
  'xattr_get' => 
  array (
    0 => 'string',
    'filename' => 'string',
    'name' => 'string',
    'flags=' => 'int',
  ),
  'xattr_list' => 
  array (
    0 => 'array<array-key, mixed>',
    'filename' => 'string',
    'flags=' => 'int',
  ),
  'xattr_remove' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'name' => 'string',
    'flags=' => 'int',
  ),
  'xattr_set' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'name' => 'string',
    'value' => 'string',
    'flags=' => 'int',
  ),
  'xattr_supported' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'flags=' => 'int',
  ),
  'xcache_asm' => 
  array (
    0 => 'string',
    'filename' => 'string',
  ),
  'xcache_clear_cache' => 
  array (
    0 => 'void',
    'type' => 'int',
    'id=' => 'int',
  ),
  'xcache_coredump' => 
  array (
    0 => 'string',
    'op_type' => 'int',
  ),
  'xcache_count' => 
  array (
    0 => 'int',
    'type' => 'int',
  ),
  'xcache_coverager_decode' => 
  array (
    0 => 'array<array-key, mixed>',
    'data' => 'string',
  ),
  'xcache_coverager_get' => 
  array (
    0 => 'array<array-key, mixed>',
    'clean=' => 'bool',
  ),
  'xcache_coverager_start' => 
  array (
    0 => 'void',
    'clean=' => 'bool',
  ),
  'xcache_coverager_stop' => 
  array (
    0 => 'void',
    'clean=' => 'bool',
  ),
  'xcache_dasm_file' => 
  array (
    0 => 'string',
    'filename' => 'string',
  ),
  'xcache_dasm_string' => 
  array (
    0 => 'string',
    'code' => 'string',
  ),
  'xcache_dec' => 
  array (
    0 => 'int',
    'name' => 'string',
    'value=' => 'int|mixed',
    'ttl=' => 'int',
  ),
  'xcache_decode' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'xcache_encode' => 
  array (
    0 => 'string',
    'filename' => 'string',
  ),
  'xcache_get' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'xcache_get_data_type' => 
  array (
    0 => 'string',
    'type' => 'int',
  ),
  'xcache_get_op_spec' => 
  array (
    0 => 'string',
    'op_type' => 'int',
  ),
  'xcache_get_op_type' => 
  array (
    0 => 'string',
    'op_type' => 'int',
  ),
  'xcache_get_opcode' => 
  array (
    0 => 'string',
    'opcode' => 'int',
  ),
  'xcache_get_opcode_spec' => 
  array (
    0 => 'string',
    'opcode' => 'int',
  ),
  'xcache_inc' => 
  array (
    0 => 'int',
    'name' => 'string',
    'value=' => 'int|mixed',
    'ttl=' => 'int',
  ),
  'xcache_info' => 
  array (
    0 => 'array<array-key, mixed>',
    'type' => 'int',
    'id' => 'int',
  ),
  'xcache_is_autoglobal' => 
  array (
    0 => 'string',
    'name' => 'string',
  ),
  'xcache_isset' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'xcache_list' => 
  array (
    0 => 'array<array-key, mixed>',
    'type' => 'int',
    'id' => 'int',
  ),
  'xcache_set' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value' => 'mixed',
    'ttl=' => 'int',
  ),
  'xcache_unset' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'xcache_unset_by_prefix' => 
  array (
    0 => 'bool',
    'prefix' => 'string',
  ),
  'Xcom::__construct' => 
  array (
    0 => 'void',
    'fabric_url=' => 'string',
    'fabric_token=' => 'string',
    'capability_token=' => 'string',
  ),
  'Xcom::decode' => 
  array (
    0 => 'object',
    'avro_msg' => 'string',
    'json_schema' => 'string',
  ),
  'Xcom::encode' => 
  array (
    0 => 'string',
    'data' => 'stdClass',
    'avro_schema' => 'string',
  ),
  'Xcom::getDebugOutput' => 
  array (
    0 => 'string',
  ),
  'Xcom::getLastResponse' => 
  array (
    0 => 'string',
  ),
  'Xcom::getLastResponseInfo' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Xcom::getOnboardingURL' => 
  array (
    0 => 'string',
    'capability_name' => 'string',
    'agreement_url' => 'string',
  ),
  'Xcom::send' => 
  array (
    0 => 'int',
    'topic' => 'string',
    'data' => 'mixed',
    'json_schema=' => 'string',
    'http_headers=' => 'array<array-key, mixed>',
  ),
  'Xcom::sendAsync' => 
  array (
    0 => 'int',
    'topic' => 'string',
    'data' => 'mixed',
    'json_schema=' => 'string',
    'http_headers=' => 'array<array-key, mixed>',
  ),
  'xdebug_break' => 
  array (
    0 => 'bool',
  ),
  'xdebug_call_class' => 
  array (
    0 => 'string',
    'depth=' => 'int',
  ),
  'xdebug_call_file' => 
  array (
    0 => 'string',
    'depth=' => 'int',
  ),
  'xdebug_call_function' => 
  array (
    0 => 'string',
    'depth=' => 'int',
  ),
  'xdebug_call_line' => 
  array (
    0 => 'int',
    'depth=' => 'int',
  ),
  'xdebug_clear_aggr_profiling_data' => 
  array (
    0 => 'bool',
  ),
  'xdebug_code_coverage_started' => 
  array (
    0 => 'bool',
  ),
  'xdebug_debug_zval' => 
  array (
    0 => 'void',
    '...varName' => 'string',
  ),
  'xdebug_debug_zval_stdout' => 
  array (
    0 => 'void',
    '...varName' => 'string',
  ),
  'xdebug_disable' => 
  array (
    0 => 'void',
  ),
  'xdebug_dump_aggr_profiling_data' => 
  array (
    0 => 'bool',
  ),
  'xdebug_dump_superglobals' => 
  array (
    0 => 'void',
  ),
  'xdebug_enable' => 
  array (
    0 => 'void',
  ),
  'xdebug_get_code_coverage' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'xdebug_get_collected_errors' => 
  array (
    0 => 'string',
    'clean=' => 'bool',
  ),
  'xdebug_get_declared_vars' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'xdebug_get_formatted_function_stack' => 
  array (
    0 => 'mixed',
  ),
  'xdebug_get_function_count' => 
  array (
    0 => 'int',
  ),
  'xdebug_get_function_stack' => 
  array (
    0 => 'array<array-key, mixed>',
    'message=' => 'string',
    'options=' => 'int',
  ),
  'xdebug_get_headers' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'xdebug_get_monitored_functions' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'xdebug_get_profiler_filename' => 
  array (
    0 => 'false|string',
  ),
  'xdebug_get_stack_depth' => 
  array (
    0 => 'int',
  ),
  'xdebug_get_tracefile_name' => 
  array (
    0 => 'string',
  ),
  'xdebug_info' => 
  array (
    0 => 'mixed',
    'category=' => 'string',
  ),
  'xdebug_is_debugger_active' => 
  array (
    0 => 'bool',
  ),
  'xdebug_is_enabled' => 
  array (
    0 => 'bool',
  ),
  'xdebug_memory_usage' => 
  array (
    0 => 'int',
  ),
  'xdebug_peak_memory_usage' => 
  array (
    0 => 'int',
  ),
  'xdebug_print_function_stack' => 
  array (
    0 => 'array<array-key, mixed>',
    'message=' => 'string',
    'options=' => 'int',
  ),
  'xdebug_set_filter' => 
  array (
    0 => 'void',
    'group' => 'int',
    'list_type' => 'int',
    'configuration' => 'array<array-key, mixed>',
  ),
  'xdebug_start_code_coverage' => 
  array (
    0 => 'void',
    'options=' => 'int',
  ),
  'xdebug_start_error_collection' => 
  array (
    0 => 'void',
  ),
  'xdebug_start_function_monitor' => 
  array (
    0 => 'void',
    'list_of_functions_to_monitor' => 'array<array-key, string>',
  ),
  'xdebug_start_trace' => 
  array (
    0 => 'void',
    'trace_file' => 'mixed',
    'options=' => 'int|mixed',
  ),
  'xdebug_stop_code_coverage' => 
  array (
    0 => 'void',
    'cleanup=' => 'bool',
  ),
  'xdebug_stop_error_collection' => 
  array (
    0 => 'void',
  ),
  'xdebug_stop_function_monitor' => 
  array (
    0 => 'void',
  ),
  'xdebug_stop_trace' => 
  array (
    0 => 'void',
  ),
  'xdebug_time_index' => 
  array (
    0 => 'float',
  ),
  'xdebug_var_dump' => 
  array (
    0 => 'void',
    '...var' => 'mixed',
  ),
  'xdiff_file_bdiff' => 
  array (
    0 => 'bool',
    'old_file' => 'string',
    'new_file' => 'string',
    'dest' => 'string',
  ),
  'xdiff_file_bdiff_size' => 
  array (
    0 => 'int',
    'file' => 'string',
  ),
  'xdiff_file_bpatch' => 
  array (
    0 => 'bool',
    'file' => 'string',
    'patch' => 'string',
    'dest' => 'string',
  ),
  'xdiff_file_diff' => 
  array (
    0 => 'bool',
    'old_file' => 'string',
    'new_file' => 'string',
    'dest' => 'string',
    'context=' => 'int',
    'minimal=' => 'bool',
  ),
  'xdiff_file_diff_binary' => 
  array (
    0 => 'bool',
    'old_file' => 'string',
    'new_file' => 'string',
    'dest' => 'string',
  ),
  'xdiff_file_merge3' => 
  array (
    0 => 'mixed',
    'old_file' => 'string',
    'new_file1' => 'string',
    'new_file2' => 'string',
    'dest' => 'string',
  ),
  'xdiff_file_patch' => 
  array (
    0 => 'mixed',
    'file' => 'string',
    'patch' => 'string',
    'dest' => 'string',
    'flags=' => 'int',
  ),
  'xdiff_file_patch_binary' => 
  array (
    0 => 'bool',
    'file' => 'string',
    'patch' => 'string',
    'dest' => 'string',
  ),
  'xdiff_file_rabdiff' => 
  array (
    0 => 'bool',
    'old_file' => 'string',
    'new_file' => 'string',
    'dest' => 'string',
  ),
  'xdiff_string_bdiff' => 
  array (
    0 => 'string',
    'old_data' => 'string',
    'new_data' => 'string',
  ),
  'xdiff_string_bdiff_size' => 
  array (
    0 => 'int',
    'patch' => 'string',
  ),
  'xdiff_string_bpatch' => 
  array (
    0 => 'string',
    'string' => 'string',
    'patch' => 'string',
  ),
  'xdiff_string_diff' => 
  array (
    0 => 'string',
    'old_data' => 'string',
    'new_data' => 'string',
    'context=' => 'int',
    'minimal=' => 'bool',
  ),
  'xdiff_string_diff_binary' => 
  array (
    0 => 'string',
    'old_data' => 'string',
    'new_data' => 'string',
  ),
  'xdiff_string_merge3' => 
  array (
    0 => 'mixed',
    'old_data' => 'string',
    'new_data1' => 'string',
    'new_data2' => 'string',
    'error=' => 'string',
  ),
  'xdiff_string_patch' => 
  array (
    0 => 'string',
    'string' => 'string',
    'patch' => 'string',
    'flags=' => 'int',
    '&w_error=' => 'string',
  ),
  'xdiff_string_patch_binary' => 
  array (
    0 => 'string',
    'string' => 'string',
    'patch' => 'string',
  ),
  'xdiff_string_rabdiff' => 
  array (
    0 => 'string',
    'old_data' => 'string',
    'new_data' => 'string',
  ),
  'xhprof_disable' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'xhprof_enable' => 
  array (
    0 => 'void',
    'flags=' => 'int',
    'options=' => 'array<array-key, mixed>',
  ),
  'xhprof_sample_disable' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'xhprof_sample_enable' => 
  array (
    0 => 'void',
  ),
  'xlswriter_get_author' => 
  array (
    0 => 'string',
  ),
  'xlswriter_get_version' => 
  array (
    0 => 'string',
  ),
  'xml_error_string' => 
  array (
    0 => 'null|string',
    'error_code' => 'int',
  ),
  'xml_get_current_byte_index' => 
  array (
    0 => 'int',
    'parser' => 'XMLParser',
  ),
  'xml_get_current_column_number' => 
  array (
    0 => 'int',
    'parser' => 'XMLParser',
  ),
  'xml_get_current_line_number' => 
  array (
    0 => 'int',
    'parser' => 'XMLParser',
  ),
  'xml_get_error_code' => 
  array (
    0 => 'int',
    'parser' => 'XMLParser',
  ),
  'xml_parse' => 
  array (
    0 => 'int',
    'parser' => 'XMLParser',
    'data' => 'string',
    'is_final=' => 'bool',
  ),
  'xml_parse_into_struct' => 
  array (
    0 => 'int',
    'parser' => 'XMLParser',
    'data' => 'string',
    '&w_values' => 'array<array-key, mixed>',
    '&w_index=' => 'array<array-key, mixed>',
  ),
  'xml_parser_create' => 
  array (
    0 => 'XMLParser',
    'encoding=' => 'null|string',
  ),
  'xml_parser_create_ns' => 
  array (
    0 => 'XMLParser',
    'encoding=' => 'null|string',
    'separator=' => 'string',
  ),
  'xml_parser_free' => 
  array (
    0 => 'bool',
    'parser' => 'XMLParser',
  ),
  'xml_parser_get_option' => 
  array (
    0 => 'int|string',
    'parser' => 'XMLParser',
    'option' => 'int',
  ),
  'xml_parser_set_option' => 
  array (
    0 => 'bool',
    'parser' => 'XMLParser',
    'option' => 'int',
    'value' => 'mixed',
  ),
  'xml_set_character_data_handler' => 
  array (
    0 => 'true',
    'parser' => 'XMLParser',
    'handler' => 'callable',
  ),
  'xml_set_default_handler' => 
  array (
    0 => 'true',
    'parser' => 'XMLParser',
    'handler' => 'callable',
  ),
  'xml_set_element_handler' => 
  array (
    0 => 'true',
    'parser' => 'XMLParser',
    'start_handler' => 'callable',
    'end_handler' => 'callable',
  ),
  'xml_set_end_namespace_decl_handler' => 
  array (
    0 => 'true',
    'parser' => 'XMLParser',
    'handler' => 'callable',
  ),
  'xml_set_external_entity_ref_handler' => 
  array (
    0 => 'true',
    'parser' => 'XMLParser',
    'handler' => 'callable',
  ),
  'xml_set_notation_decl_handler' => 
  array (
    0 => 'true',
    'parser' => 'XMLParser',
    'handler' => 'callable',
  ),
  'xml_set_object' => 
  array (
    0 => 'true',
    'parser' => 'XMLParser',
    'object' => 'object',
  ),
  'xml_set_processing_instruction_handler' => 
  array (
    0 => 'true',
    'parser' => 'XMLParser',
    'handler' => 'callable',
  ),
  'xml_set_start_namespace_decl_handler' => 
  array (
    0 => 'true',
    'parser' => 'XMLParser',
    'handler' => 'callable',
  ),
  'xml_set_unparsed_entity_decl_handler' => 
  array (
    0 => 'true',
    'parser' => 'XMLParser',
    'handler' => 'callable',
  ),
  'XMLDiff\\Base::__construct' => 
  array (
    0 => 'void',
    'nsname' => 'string',
  ),
  'XMLDiff\\Base::diff' => 
  array (
    0 => 'mixed',
    'from' => 'mixed',
    'to' => 'mixed',
  ),
  'XMLDiff\\Base::merge' => 
  array (
    0 => 'mixed',
    'src' => 'mixed',
    'diff' => 'mixed',
  ),
  'XMLDiff\\DOM::diff' => 
  array (
    0 => 'DOMDocument',
    'from' => 'DOMDocument',
    'to' => 'DOMDocument',
  ),
  'XMLDiff\\DOM::merge' => 
  array (
    0 => 'DOMDocument',
    'src' => 'DOMDocument',
    'diff' => 'DOMDocument',
  ),
  'XMLDiff\\File::diff' => 
  array (
    0 => 'string',
    'from' => 'string',
    'to' => 'string',
  ),
  'XMLDiff\\File::merge' => 
  array (
    0 => 'string',
    'src' => 'string',
    'diff' => 'string',
  ),
  'XMLDiff\\Memory::diff' => 
  array (
    0 => 'string',
    'from' => 'string',
    'to' => 'string',
  ),
  'XMLDiff\\Memory::merge' => 
  array (
    0 => 'string',
    'src' => 'string',
    'diff' => 'string',
  ),
  'XMLReader::close' => 
  array (
    0 => 'bool',
  ),
  'XMLReader::expand' => 
  array (
    0 => 'DOMNode|false',
    'baseNode=' => 'DOMNode|null',
  ),
  'XMLReader::getAttribute' => 
  array (
    0 => 'null|string',
    'name' => 'string',
  ),
  'XMLReader::getAttributeNo' => 
  array (
    0 => 'null|string',
    'index' => 'int',
  ),
  'XMLReader::getAttributeNs' => 
  array (
    0 => 'null|string',
    'name' => 'string',
    'namespace' => 'string',
  ),
  'XMLReader::getParserProperty' => 
  array (
    0 => 'bool',
    'property' => 'int',
  ),
  'XMLReader::isValid' => 
  array (
    0 => 'bool',
  ),
  'XMLReader::lookupNamespace' => 
  array (
    0 => 'null|string',
    'prefix' => 'string',
  ),
  'XMLReader::moveToAttribute' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'XMLReader::moveToAttributeNo' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'XMLReader::moveToAttributeNs' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'namespace' => 'string',
  ),
  'XMLReader::moveToElement' => 
  array (
    0 => 'bool',
  ),
  'XMLReader::moveToFirstAttribute' => 
  array (
    0 => 'bool',
  ),
  'XMLReader::moveToNextAttribute' => 
  array (
    0 => 'bool',
  ),
  'XMLReader::next' => 
  array (
    0 => 'bool',
    'name=' => 'null|string',
  ),
  'XMLReader::open' => 
  array (
    0 => 'XmlReader|bool',
    'uri' => 'string',
    'encoding=' => 'null|string',
    'flags=' => 'int',
  ),
  'XMLReader::read' => 
  array (
    0 => 'bool',
  ),
  'XMLReader::readInnerXML' => 
  array (
    0 => 'string',
  ),
  'XMLReader::readOuterXML' => 
  array (
    0 => 'string',
  ),
  'XMLReader::readString' => 
  array (
    0 => 'string',
  ),
  'XMLReader::setParserProperty' => 
  array (
    0 => 'bool',
    'property' => 'int',
    'value' => 'bool',
  ),
  'XMLReader::setRelaxNGSchema' => 
  array (
    0 => 'bool',
    'filename' => 'null|string',
  ),
  'XMLReader::setRelaxNGSchemaSource' => 
  array (
    0 => 'bool',
    'source' => 'null|string',
  ),
  'XMLReader::setSchema' => 
  array (
    0 => 'bool',
    'filename' => 'null|string',
  ),
  'XMLReader::XML' => 
  array (
    0 => 'XMLReader|bool',
    'source' => 'string',
    'encoding=' => 'null|string',
    'flags=' => 'int',
  ),
  'XMLWriter::endAttribute' => 
  array (
    0 => 'bool',
  ),
  'XMLWriter::endCdata' => 
  array (
    0 => 'bool',
  ),
  'XMLWriter::endComment' => 
  array (
    0 => 'bool',
  ),
  'XMLWriter::endDocument' => 
  array (
    0 => 'bool',
  ),
  'XMLWriter::endDtd' => 
  array (
    0 => 'bool',
  ),
  'XMLWriter::endDtdAttlist' => 
  array (
    0 => 'bool',
  ),
  'XMLWriter::endDtdElement' => 
  array (
    0 => 'bool',
  ),
  'XMLWriter::endDtdEntity' => 
  array (
    0 => 'bool',
  ),
  'XMLWriter::endElement' => 
  array (
    0 => 'bool',
  ),
  'XMLWriter::endPi' => 
  array (
    0 => 'bool',
  ),
  'XMLWriter::flush' => 
  array (
    0 => 'int|string',
    'empty=' => 'bool',
  ),
  'XMLWriter::fullEndElement' => 
  array (
    0 => 'bool',
  ),
  'XMLWriter::openMemory' => 
  array (
    0 => 'bool',
  ),
  'XMLWriter::openUri' => 
  array (
    0 => 'bool',
    'uri' => 'string',
  ),
  'XMLWriter::outputMemory' => 
  array (
    0 => 'string',
    'flush=' => 'bool',
  ),
  'XMLWriter::setIndent' => 
  array (
    0 => 'bool',
    'enable' => 'bool',
  ),
  'XMLWriter::setIndentString' => 
  array (
    0 => 'bool',
    'indentation' => 'string',
  ),
  'XMLWriter::startAttribute' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'XMLWriter::startAttributeNs' => 
  array (
    0 => 'bool',
    'prefix' => 'null|string',
    'name' => 'string',
    'namespace' => 'null|string',
  ),
  'XMLWriter::startCdata' => 
  array (
    0 => 'bool',
  ),
  'XMLWriter::startComment' => 
  array (
    0 => 'bool',
  ),
  'XMLWriter::startDocument' => 
  array (
    0 => 'bool',
    'version=' => 'null|string',
    'encoding=' => 'null|string',
    'standalone=' => 'null|string',
  ),
  'XMLWriter::startDtd' => 
  array (
    0 => 'bool',
    'qualifiedName' => 'string',
    'publicId=' => 'null|string',
    'systemId=' => 'null|string',
  ),
  'XMLWriter::startDtdAttlist' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'XMLWriter::startDtdElement' => 
  array (
    0 => 'bool',
    'qualifiedName' => 'string',
  ),
  'XMLWriter::startDtdEntity' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'isParam' => 'bool',
  ),
  'XMLWriter::startElement' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'XMLWriter::startElementNs' => 
  array (
    0 => 'bool',
    'prefix' => 'null|string',
    'name' => 'string',
    'namespace' => 'null|string',
  ),
  'XMLWriter::startPi' => 
  array (
    0 => 'bool',
    'target' => 'string',
  ),
  'XMLWriter::text' => 
  array (
    0 => 'bool',
    'content' => 'string',
  ),
  'XMLWriter::writeAttribute' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value' => 'string',
  ),
  'XMLWriter::writeAttributeNs' => 
  array (
    0 => 'bool',
    'prefix' => 'null|string',
    'name' => 'string',
    'namespace' => 'null|string',
    'value' => 'string',
  ),
  'XMLWriter::writeCdata' => 
  array (
    0 => 'bool',
    'content' => 'string',
  ),
  'XMLWriter::writeComment' => 
  array (
    0 => 'bool',
    'content' => 'string',
  ),
  'XMLWriter::writeDtd' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'publicId=' => 'null|string',
    'systemId=' => 'null|string',
    'content=' => 'null|string',
  ),
  'XMLWriter::writeDtdAttlist' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'content' => 'string',
  ),
  'XMLWriter::writeDtdElement' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'content' => 'string',
  ),
  'XMLWriter::writeDtdEntity' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'content' => 'string',
    'isParam=' => 'bool',
    'publicId=' => 'null|string',
    'systemId=' => 'null|string',
    'notationData=' => 'null|string',
  ),
  'XMLWriter::writeElement' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'content=' => 'null|string',
  ),
  'XMLWriter::writeElementNs' => 
  array (
    0 => 'bool',
    'prefix' => 'null|string',
    'name' => 'string',
    'namespace' => 'null|string',
    'content=' => 'null|string',
  ),
  'XMLWriter::writePi' => 
  array (
    0 => 'bool',
    'target' => 'string',
    'content' => 'string',
  ),
  'XMLWriter::writeRaw' => 
  array (
    0 => 'bool',
    'content' => 'string',
  ),
  'xmlwriter_end_attribute' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
  ),
  'xmlwriter_end_cdata' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
  ),
  'xmlwriter_end_comment' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
  ),
  'xmlwriter_end_document' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
  ),
  'xmlwriter_end_dtd' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
  ),
  'xmlwriter_end_dtd_attlist' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
  ),
  'xmlwriter_end_dtd_element' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
  ),
  'xmlwriter_end_dtd_entity' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
  ),
  'xmlwriter_end_element' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
  ),
  'xmlwriter_end_pi' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
  ),
  'xmlwriter_flush' => 
  array (
    0 => 'int|string',
    'writer' => 'XMLWriter',
    'empty=' => 'bool',
  ),
  'xmlwriter_full_end_element' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
  ),
  'xmlwriter_open_memory' => 
  array (
    0 => 'XMLWriter|false',
  ),
  'xmlwriter_open_uri' => 
  array (
    0 => 'XMLWriter|false',
    'uri' => 'string',
  ),
  'xmlwriter_output_memory' => 
  array (
    0 => 'string',
    'writer' => 'XMLWriter',
    'flush=' => 'bool',
  ),
  'xmlwriter_set_indent' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'enable' => 'bool',
  ),
  'xmlwriter_set_indent_string' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'indentation' => 'string',
  ),
  'xmlwriter_start_attribute' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'name' => 'string',
  ),
  'xmlwriter_start_attribute_ns' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'prefix' => 'null|string',
    'name' => 'string',
    'namespace' => 'null|string',
  ),
  'xmlwriter_start_cdata' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
  ),
  'xmlwriter_start_comment' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
  ),
  'xmlwriter_start_document' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'version=' => 'null|string',
    'encoding=' => 'null|string',
    'standalone=' => 'null|string',
  ),
  'xmlwriter_start_dtd' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'qualifiedName' => 'string',
    'publicId=' => 'null|string',
    'systemId=' => 'null|string',
  ),
  'xmlwriter_start_dtd_attlist' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'name' => 'string',
  ),
  'xmlwriter_start_dtd_element' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'qualifiedName' => 'string',
  ),
  'xmlwriter_start_dtd_entity' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'name' => 'string',
    'isParam' => 'bool',
  ),
  'xmlwriter_start_element' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'name' => 'string',
  ),
  'xmlwriter_start_element_ns' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'prefix' => 'null|string',
    'name' => 'string',
    'namespace' => 'null|string',
  ),
  'xmlwriter_start_pi' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'target' => 'string',
  ),
  'xmlwriter_text' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'content' => 'string',
  ),
  'xmlwriter_write_attribute' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'name' => 'string',
    'value' => 'string',
  ),
  'xmlwriter_write_attribute_ns' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'prefix' => 'null|string',
    'name' => 'string',
    'namespace' => 'null|string',
    'value' => 'string',
  ),
  'xmlwriter_write_cdata' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'content' => 'string',
  ),
  'xmlwriter_write_comment' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'content' => 'string',
  ),
  'xmlwriter_write_dtd' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'name' => 'string',
    'publicId=' => 'null|string',
    'systemId=' => 'null|string',
    'content=' => 'null|string',
  ),
  'xmlwriter_write_dtd_attlist' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'name' => 'string',
    'content' => 'string',
  ),
  'xmlwriter_write_dtd_element' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'name' => 'string',
    'content' => 'string',
  ),
  'xmlwriter_write_dtd_entity' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'name' => 'string',
    'content' => 'string',
    'isParam=' => 'bool',
    'publicId=' => 'null|string',
    'systemId=' => 'null|string',
    'notationData=' => 'null|string',
  ),
  'xmlwriter_write_element' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'name' => 'string',
    'content=' => 'null|string',
  ),
  'xmlwriter_write_element_ns' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'prefix' => 'null|string',
    'name' => 'string',
    'namespace' => 'null|string',
    'content=' => 'null|string',
  ),
  'xmlwriter_write_pi' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'target' => 'string',
    'content' => 'string',
  ),
  'xmlwriter_write_raw' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'content' => 'string',
  ),
  'xpath_new_context' => 
  array (
    0 => 'XPathContext',
    'dom_document' => 'DOMDocument',
  ),
  'xpath_register_ns' => 
  array (
    0 => 'bool',
    'xpath_context' => 'xpathcontext',
    'prefix' => 'string',
    'uri' => 'string',
  ),
  'xpath_register_ns_auto' => 
  array (
    0 => 'bool',
    'xpath_context' => 'xpathcontext',
    'context_node=' => 'object',
  ),
  'xptr_new_context' => 
  array (
    0 => 'XPathContext',
  ),
  'XSLTProcessor::getParameter' => 
  array (
    0 => 'false|string',
    'namespace' => 'string',
    'name' => 'string',
  ),
  'XsltProcessor::getSecurityPrefs' => 
  array (
    0 => 'int',
  ),
  'XSLTProcessor::hasExsltSupport' => 
  array (
    0 => 'bool',
  ),
  'XSLTProcessor::importStylesheet' => 
  array (
    0 => 'bool',
    'stylesheet' => 'object',
  ),
  'XSLTProcessor::registerPHPFunctions' => 
  array (
    0 => 'void',
    'functions=' => 'array<array-key, mixed>|null|string',
  ),
  'XSLTProcessor::removeParameter' => 
  array (
    0 => 'bool',
    'namespace' => 'string',
    'name' => 'string',
  ),
  'XSLTProcessor::setParameter' => 
  array (
    0 => 'bool',
    'namespace' => 'string',
    'name' => 'string',
    'value' => 'string',
  ),
  'XSLTProcessor::setParameter\'1' => 
  array (
    0 => 'bool',
    'namespace' => 'string',
    'options' => 'array<array-key, mixed>',
  ),
  'XSLTProcessor::setProfiling' => 
  array (
    0 => 'bool',
    'filename' => 'null|string',
  ),
  'XsltProcessor::setSecurityPrefs' => 
  array (
    0 => 'int',
    'preferences' => 'int',
  ),
  'XSLTProcessor::transformToDoc' => 
  array (
    0 => 'DOMDocument|false',
    'document' => 'DOMNode',
    'returnClass=' => 'null|string',
  ),
  'XSLTProcessor::transformToURI' => 
  array (
    0 => 'int',
    'document' => 'DOMDocument',
    'uri' => 'string',
  ),
  'XSLTProcessor::transformToXML' => 
  array (
    0 => 'false|string',
    'document' => 'DOMDocument',
  ),
  'yac::__construct' => 
  array (
    0 => 'void',
    'prefix=' => 'string',
  ),
  'yac::__get' => 
  array (
    0 => 'mixed',
    'key' => 'string',
  ),
  'yac::__set' => 
  array (
    0 => 'mixed',
    'key' => 'string',
    'value' => 'mixed',
  ),
  'yac::delete' => 
  array (
    0 => 'bool',
    'keys' => 'array<array-key, mixed>|string',
    'ttl=' => 'int',
  ),
  'yac::dump' => 
  array (
    0 => 'mixed',
    'num' => 'int',
  ),
  'yac::flush' => 
  array (
    0 => 'bool',
  ),
  'yac::get' => 
  array (
    0 => 'mixed',
    'key' => 'array<array-key, mixed>|string',
    'cas=' => 'int',
  ),
  'yac::info' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Yaconf::get' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'default_value=' => 'mixed',
  ),
  'Yaconf::has' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'Yaf\\Action_Abstract::__clone' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Action_Abstract::__construct' => 
  array (
    0 => 'void',
    'request' => 'Yaf\\Request_Abstract',
    'response' => 'Yaf\\Response_Abstract',
    'view' => 'Yaf\\View_Interface',
    'invokeArgs=' => 'array<array-key, mixed>|null',
  ),
  'Yaf\\Action_Abstract::display' => 
  array (
    0 => 'bool',
    'tpl' => 'string',
    'parameters=' => 'array<array-key, mixed>|null',
  ),
  'Yaf\\Action_Abstract::execute' => 
  array (
    0 => 'mixed',
  ),
  'Yaf\\Action_Abstract::forward' => 
  array (
    0 => 'bool',
    'module' => 'string',
    'controller=' => 'string',
    'action=' => 'string',
    'parameters=' => 'array<array-key, mixed>|null',
  ),
  'Yaf\\Action_Abstract::getController' => 
  array (
    0 => 'Yaf\\Controller_Abstract',
  ),
  'Yaf\\Action_Abstract::getInvokeArg' => 
  array (
    0 => 'mixed|null',
    'name' => 'string',
  ),
  'Yaf\\Action_Abstract::getInvokeArgs' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Yaf\\Action_Abstract::getModuleName' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Action_Abstract::getRequest' => 
  array (
    0 => 'Yaf\\Request_Abstract',
  ),
  'Yaf\\Action_Abstract::getResponse' => 
  array (
    0 => 'Yaf\\Response_Abstract',
  ),
  'Yaf\\Action_Abstract::getView' => 
  array (
    0 => 'Yaf\\View_Interface',
  ),
  'Yaf\\Action_Abstract::getViewpath' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Action_Abstract::init' => 
  array (
    0 => 'mixed',
  ),
  'Yaf\\Action_Abstract::initView' => 
  array (
    0 => 'Yaf\\Response_Abstract',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'Yaf\\Action_Abstract::redirect' => 
  array (
    0 => 'bool',
    'url' => 'string',
  ),
  'Yaf\\Action_Abstract::render' => 
  array (
    0 => 'string',
    'tpl' => 'string',
    'parameters=' => 'array<array-key, mixed>|null',
  ),
  'Yaf\\Action_Abstract::setViewpath' => 
  array (
    0 => 'bool',
    'view_directory' => 'string',
  ),
  'Yaf\\Application::__clone' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Application::__construct' => 
  array (
    0 => 'void',
    'config' => 'array<array-key, mixed>|string',
    'envrion=' => 'string',
  ),
  'Yaf\\Application::__destruct' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Application::__sleep' => 
  array (
    0 => 'array<array-key, string>',
  ),
  'Yaf\\Application::__wakeup' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Application::app' => 
  array (
    0 => 'Yaf\\Application|null',
  ),
  'Yaf\\Application::bootstrap' => 
  array (
    0 => 'Yaf\\Application',
    'bootstrap=' => 'Yaf\\Bootstrap_Abstract|null',
  ),
  'Yaf\\Application::clearLastError' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Application::environ' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Application::execute' => 
  array (
    0 => 'void',
    'entry' => 'callable',
    '_=' => 'string',
  ),
  'Yaf\\Application::getAppDirectory' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Application::getConfig' => 
  array (
    0 => 'Yaf\\Config_Abstract',
  ),
  'Yaf\\Application::getDispatcher' => 
  array (
    0 => 'Yaf\\Dispatcher',
  ),
  'Yaf\\Application::getLastErrorMsg' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Application::getLastErrorNo' => 
  array (
    0 => 'int',
  ),
  'Yaf\\Application::getModules' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Yaf\\Application::run' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Application::setAppDirectory' => 
  array (
    0 => 'Yaf\\Application',
    'directory' => 'string',
  ),
  'Yaf\\Config\\Ini::__construct' => 
  array (
    0 => 'void',
    'config_file' => 'string',
    'section=' => 'string',
  ),
  'Yaf\\Config\\Ini::__get' => 
  array (
    0 => 'mixed',
    'name=' => 'mixed',
  ),
  'Yaf\\Config\\Ini::__isset' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'Yaf\\Config\\Ini::__set' => 
  array (
    0 => 'void',
    'name' => 'mixed',
    'value' => 'mixed',
  ),
  'Yaf\\Config\\Ini::count' => 
  array (
    0 => 'int',
  ),
  'Yaf\\Config\\Ini::current' => 
  array (
    0 => 'mixed',
  ),
  'Yaf\\Config\\Ini::get' => 
  array (
    0 => 'mixed',
    'name=' => 'mixed',
  ),
  'Yaf\\Config\\Ini::key' => 
  array (
    0 => 'int|string',
  ),
  'Yaf\\Config\\Ini::next' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Config\\Ini::offsetExists' => 
  array (
    0 => 'bool',
    'name' => 'int|string',
  ),
  'Yaf\\Config\\Ini::offsetGet' => 
  array (
    0 => 'mixed',
    'name' => 'int|string',
  ),
  'Yaf\\Config\\Ini::offsetSet' => 
  array (
    0 => 'void',
    'name' => 'int|null|string',
    'value' => 'mixed',
  ),
  'Yaf\\Config\\Ini::offsetUnset' => 
  array (
    0 => 'void',
    'name' => 'int|string',
  ),
  'Yaf\\Config\\Ini::readonly' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Config\\Ini::rewind' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Config\\Ini::set' => 
  array (
    0 => 'Yaf\\Config_Abstract',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'Yaf\\Config\\Ini::toArray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Yaf\\Config\\Ini::valid' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Config\\Simple::__construct' => 
  array (
    0 => 'void',
    'array' => 'array<array-key, mixed>',
    'readonly=' => 'string',
  ),
  'Yaf\\Config\\Simple::__get' => 
  array (
    0 => 'mixed',
    'name=' => 'mixed',
  ),
  'Yaf\\Config\\Simple::__isset' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'Yaf\\Config\\Simple::__set' => 
  array (
    0 => 'void',
    'name' => 'mixed',
    'value' => 'mixed',
  ),
  'Yaf\\Config\\Simple::count' => 
  array (
    0 => 'int',
  ),
  'Yaf\\Config\\Simple::current' => 
  array (
    0 => 'mixed',
  ),
  'Yaf\\Config\\Simple::get' => 
  array (
    0 => 'mixed',
    'name=' => 'mixed',
  ),
  'Yaf\\Config\\Simple::key' => 
  array (
    0 => 'int|string',
  ),
  'Yaf\\Config\\Simple::next' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Config\\Simple::offsetExists' => 
  array (
    0 => 'bool',
    'name' => 'int|string',
  ),
  'Yaf\\Config\\Simple::offsetGet' => 
  array (
    0 => 'mixed',
    'name' => 'int|string',
  ),
  'Yaf\\Config\\Simple::offsetSet' => 
  array (
    0 => 'void',
    'name' => 'int|null|string',
    'value' => 'mixed',
  ),
  'Yaf\\Config\\Simple::offsetUnset' => 
  array (
    0 => 'void',
    'name' => 'int|string',
  ),
  'Yaf\\Config\\Simple::readonly' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Config\\Simple::rewind' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Config\\Simple::set' => 
  array (
    0 => 'Yaf\\Config_Abstract',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'Yaf\\Config\\Simple::toArray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Yaf\\Config\\Simple::valid' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Config_Abstract::__construct' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Config_Abstract::get' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
  ),
  'Yaf\\Config_Abstract::readonly' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Config_Abstract::set' => 
  array (
    0 => 'Yaf\\Config_Abstract',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'Yaf\\Config_Abstract::toArray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Yaf\\Controller_Abstract::__clone' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Controller_Abstract::__construct' => 
  array (
    0 => 'void',
    'request' => 'Yaf\\Request_Abstract',
    'response' => 'Yaf\\Response_Abstract',
    'view' => 'Yaf\\View_Interface',
    'invokeArgs=' => 'array<array-key, mixed>|null',
  ),
  'Yaf\\Controller_Abstract::display' => 
  array (
    0 => 'bool',
    'tpl' => 'string',
    'parameters=' => 'array<array-key, mixed>|null',
  ),
  'Yaf\\Controller_Abstract::forward' => 
  array (
    0 => 'bool',
    'module' => 'string',
    'controller=' => 'string',
    'action=' => 'string',
    'parameters=' => 'array<array-key, mixed>|null',
  ),
  'Yaf\\Controller_Abstract::getInvokeArg' => 
  array (
    0 => 'mixed|null',
    'name' => 'string',
  ),
  'Yaf\\Controller_Abstract::getInvokeArgs' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Yaf\\Controller_Abstract::getModuleName' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Controller_Abstract::getRequest' => 
  array (
    0 => 'Yaf\\Request_Abstract',
  ),
  'Yaf\\Controller_Abstract::getResponse' => 
  array (
    0 => 'Yaf\\Response_Abstract',
  ),
  'Yaf\\Controller_Abstract::getView' => 
  array (
    0 => 'Yaf\\View_Interface',
  ),
  'Yaf\\Controller_Abstract::getViewpath' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Controller_Abstract::init' => 
  array (
    0 => 'mixed',
  ),
  'Yaf\\Controller_Abstract::initView' => 
  array (
    0 => 'Yaf\\Response_Abstract',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'Yaf\\Controller_Abstract::redirect' => 
  array (
    0 => 'bool',
    'url' => 'string',
  ),
  'Yaf\\Controller_Abstract::render' => 
  array (
    0 => 'string',
    'tpl' => 'string',
    'parameters=' => 'array<array-key, mixed>|null',
  ),
  'Yaf\\Controller_Abstract::setViewpath' => 
  array (
    0 => 'bool',
    'view_directory' => 'string',
  ),
  'Yaf\\Dispatcher::__clone' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Dispatcher::__construct' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Dispatcher::__sleep' => 
  array (
    0 => 'list<string>',
  ),
  'Yaf\\Dispatcher::__wakeup' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Dispatcher::autoRender' => 
  array (
    0 => 'Yaf\\Dispatcher',
    'flag=' => 'bool',
  ),
  'Yaf\\Dispatcher::catchException' => 
  array (
    0 => 'Yaf\\Dispatcher',
    'flag=' => 'bool',
  ),
  'Yaf\\Dispatcher::disableView' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Dispatcher::dispatch' => 
  array (
    0 => 'Yaf\\Response_Abstract',
    'request' => 'Yaf\\Request_Abstract',
  ),
  'Yaf\\Dispatcher::enableView' => 
  array (
    0 => 'Yaf\\Dispatcher',
  ),
  'Yaf\\Dispatcher::flushInstantly' => 
  array (
    0 => 'Yaf\\Dispatcher',
    'flag=' => 'bool',
  ),
  'Yaf\\Dispatcher::getApplication' => 
  array (
    0 => 'Yaf\\Application',
  ),
  'Yaf\\Dispatcher::getInstance' => 
  array (
    0 => 'Yaf\\Dispatcher',
  ),
  'Yaf\\Dispatcher::getRequest' => 
  array (
    0 => 'Yaf\\Request_Abstract',
  ),
  'Yaf\\Dispatcher::getRouter' => 
  array (
    0 => 'Yaf\\Router',
  ),
  'Yaf\\Dispatcher::initView' => 
  array (
    0 => 'Yaf\\View_Interface',
    'templates_dir' => 'string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'Yaf\\Dispatcher::registerPlugin' => 
  array (
    0 => 'Yaf\\Dispatcher',
    'plugin' => 'Yaf\\Plugin_Abstract',
  ),
  'Yaf\\Dispatcher::returnResponse' => 
  array (
    0 => 'Yaf\\Dispatcher',
    'flag' => 'bool',
  ),
  'Yaf\\Dispatcher::setDefaultAction' => 
  array (
    0 => 'Yaf\\Dispatcher',
    'action' => 'string',
  ),
  'Yaf\\Dispatcher::setDefaultController' => 
  array (
    0 => 'Yaf\\Dispatcher',
    'controller' => 'string',
  ),
  'Yaf\\Dispatcher::setDefaultModule' => 
  array (
    0 => 'Yaf\\Dispatcher',
    'module' => 'string',
  ),
  'Yaf\\Dispatcher::setErrorHandler' => 
  array (
    0 => 'Yaf\\Dispatcher',
    'callback' => 'callable',
    'error_types' => 'int',
  ),
  'Yaf\\Dispatcher::setRequest' => 
  array (
    0 => 'Yaf\\Dispatcher',
    'request' => 'Yaf\\Request_Abstract',
  ),
  'Yaf\\Dispatcher::setView' => 
  array (
    0 => 'Yaf\\Dispatcher',
    'view' => 'Yaf\\View_Interface',
  ),
  'Yaf\\Dispatcher::throwException' => 
  array (
    0 => 'Yaf\\Dispatcher',
    'flag=' => 'bool',
  ),
  'Yaf\\Loader::__clone' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Loader::__construct' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Loader::__sleep' => 
  array (
    0 => 'list<string>',
  ),
  'Yaf\\Loader::__wakeup' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Loader::autoload' => 
  array (
    0 => 'bool',
    'class_name' => 'string',
  ),
  'Yaf\\Loader::clearLocalNamespace' => 
  array (
    0 => 'mixed',
  ),
  'Yaf\\Loader::getInstance' => 
  array (
    0 => 'Yaf\\Loader',
    'local_library_path=' => 'string',
    'global_library_path=' => 'string',
  ),
  'Yaf\\Loader::getLibraryPath' => 
  array (
    0 => 'string',
    'is_global=' => 'bool',
  ),
  'Yaf\\Loader::getLocalNamespace' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Loader::import' => 
  array (
    0 => 'bool',
    'file' => 'string',
  ),
  'Yaf\\Loader::isLocalName' => 
  array (
    0 => 'bool',
    'class_name' => 'string',
  ),
  'Yaf\\Loader::registerLocalNamespace' => 
  array (
    0 => 'bool',
    'name_prefix' => 'array<array-key, string>|string',
  ),
  'Yaf\\Loader::setLibraryPath' => 
  array (
    0 => 'Yaf\\Loader',
    'directory' => 'string',
    'global=' => 'bool',
  ),
  'Yaf\\Plugin_Abstract::dispatchLoopShutdown' => 
  array (
    0 => 'bool',
    'request' => 'Yaf\\Request_Abstract',
    'response' => 'Yaf\\Response_Abstract',
  ),
  'Yaf\\Plugin_Abstract::dispatchLoopStartup' => 
  array (
    0 => 'bool',
    'request' => 'Yaf\\Request_Abstract',
    'response' => 'Yaf\\Response_Abstract',
  ),
  'Yaf\\Plugin_Abstract::postDispatch' => 
  array (
    0 => 'bool',
    'request' => 'Yaf\\Request_Abstract',
    'response' => 'Yaf\\Response_Abstract',
  ),
  'Yaf\\Plugin_Abstract::preDispatch' => 
  array (
    0 => 'bool',
    'request' => 'Yaf\\Request_Abstract',
    'response' => 'Yaf\\Response_Abstract',
  ),
  'Yaf\\Plugin_Abstract::preResponse' => 
  array (
    0 => 'bool',
    'request' => 'Yaf\\Request_Abstract',
    'response' => 'Yaf\\Response_Abstract',
  ),
  'Yaf\\Plugin_Abstract::routerShutdown' => 
  array (
    0 => 'bool',
    'request' => 'Yaf\\Request_Abstract',
    'response' => 'Yaf\\Response_Abstract',
  ),
  'Yaf\\Plugin_Abstract::routerStartup' => 
  array (
    0 => 'bool',
    'request' => 'Yaf\\Request_Abstract',
    'response' => 'Yaf\\Response_Abstract',
  ),
  'Yaf\\Registry::__clone' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Registry::__construct' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Registry::del' => 
  array (
    0 => 'bool|null',
    'name' => 'string',
  ),
  'Yaf\\Registry::get' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'Yaf\\Registry::has' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'Yaf\\Registry::set' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'Yaf\\Request\\Http::__clone' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Request\\Http::__construct' => 
  array (
    0 => 'void',
    'request_uri' => 'string',
    'base_uri' => 'string',
  ),
  'Yaf\\Request\\Http::get' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'default=' => 'string',
  ),
  'Yaf\\Request\\Http::getActionName' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Request\\Http::getBaseUri' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Request\\Http::getControllerName' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Request\\Http::getCookie' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'mixed',
  ),
  'Yaf\\Request\\Http::getEnv' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'mixed',
  ),
  'Yaf\\Request\\Http::getException' => 
  array (
    0 => 'Yaf\\Exception',
  ),
  'Yaf\\Request\\Http::getFiles' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'mixed',
  ),
  'Yaf\\Request\\Http::getLanguage' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Request\\Http::getMethod' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Request\\Http::getModuleName' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Request\\Http::getParam' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'default=' => 'mixed',
  ),
  'Yaf\\Request\\Http::getParams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Yaf\\Request\\Http::getPost' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'mixed',
  ),
  'Yaf\\Request\\Http::getQuery' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'mixed',
  ),
  'Yaf\\Request\\Http::getRequest' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'mixed',
  ),
  'Yaf\\Request\\Http::getRequestUri' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Request\\Http::getServer' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'mixed',
  ),
  'Yaf\\Request\\Http::isCli' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Request\\Http::isDispatched' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Request\\Http::isGet' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Request\\Http::isHead' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Request\\Http::isOptions' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Request\\Http::isPost' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Request\\Http::isPut' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Request\\Http::isRouted' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Request\\Http::isXmlHttpRequest' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Request\\Http::setActionName' => 
  array (
    0 => 'Yaf\\Request_Abstract|bool',
    'action' => 'string',
  ),
  'Yaf\\Request\\Http::setBaseUri' => 
  array (
    0 => 'bool',
    'uri' => 'string',
  ),
  'Yaf\\Request\\Http::setControllerName' => 
  array (
    0 => 'Yaf\\Request_Abstract|bool',
    'controller' => 'string',
  ),
  'Yaf\\Request\\Http::setDispatched' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Request\\Http::setModuleName' => 
  array (
    0 => 'Yaf\\Request_Abstract|bool',
    'module' => 'string',
  ),
  'Yaf\\Request\\Http::setParam' => 
  array (
    0 => 'Yaf\\Request_Abstract|bool',
    'name' => 'array<array-key, mixed>|string',
    'value=' => 'string',
  ),
  'Yaf\\Request\\Http::setRequestUri' => 
  array (
    0 => 'mixed',
    'uri' => 'string',
  ),
  'Yaf\\Request\\Http::setRouted' => 
  array (
    0 => 'Yaf\\Request_Abstract|bool',
  ),
  'Yaf\\Request\\Simple::__clone' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Request\\Simple::__construct' => 
  array (
    0 => 'void',
    'method' => 'string',
    'controller' => 'string',
    'action' => 'string',
    'params=' => 'string',
  ),
  'Yaf\\Request\\Simple::get' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'default=' => 'string',
  ),
  'Yaf\\Request\\Simple::getActionName' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Request\\Simple::getBaseUri' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Request\\Simple::getControllerName' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Request\\Simple::getCookie' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'string',
  ),
  'Yaf\\Request\\Simple::getEnv' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'mixed',
  ),
  'Yaf\\Request\\Simple::getException' => 
  array (
    0 => 'Yaf\\Exception',
  ),
  'Yaf\\Request\\Simple::getFiles' => 
  array (
    0 => 'array<array-key, mixed>',
    'name=' => 'mixed',
    'default=' => 'null',
  ),
  'Yaf\\Request\\Simple::getLanguage' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Request\\Simple::getMethod' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Request\\Simple::getModuleName' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Request\\Simple::getParam' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'default=' => 'mixed',
  ),
  'Yaf\\Request\\Simple::getParams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Yaf\\Request\\Simple::getPost' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'string',
  ),
  'Yaf\\Request\\Simple::getQuery' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'string',
  ),
  'Yaf\\Request\\Simple::getRequest' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'string',
  ),
  'Yaf\\Request\\Simple::getRequestUri' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Request\\Simple::getServer' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'mixed',
  ),
  'Yaf\\Request\\Simple::isCli' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Request\\Simple::isDispatched' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Request\\Simple::isGet' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Request\\Simple::isHead' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Request\\Simple::isOptions' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Request\\Simple::isPost' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Request\\Simple::isPut' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Request\\Simple::isRouted' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Request\\Simple::isXmlHttpRequest' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Request\\Simple::setActionName' => 
  array (
    0 => 'Yaf\\Request_Abstract|bool',
    'action' => 'string',
  ),
  'Yaf\\Request\\Simple::setBaseUri' => 
  array (
    0 => 'bool',
    'uri' => 'string',
  ),
  'Yaf\\Request\\Simple::setControllerName' => 
  array (
    0 => 'Yaf\\Request_Abstract|bool',
    'controller' => 'string',
  ),
  'Yaf\\Request\\Simple::setDispatched' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Request\\Simple::setModuleName' => 
  array (
    0 => 'Yaf\\Request_Abstract|bool',
    'module' => 'string',
  ),
  'Yaf\\Request\\Simple::setParam' => 
  array (
    0 => 'Yaf\\Request_Abstract|bool',
    'name' => 'array<array-key, mixed>|string',
    'value=' => 'string',
  ),
  'Yaf\\Request\\Simple::setRequestUri' => 
  array (
    0 => 'mixed',
    'uri' => 'string',
  ),
  'Yaf\\Request\\Simple::setRouted' => 
  array (
    0 => 'Yaf\\Request_Abstract|bool',
  ),
  'Yaf\\Request_Abstract::getActionName' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Request_Abstract::getBaseUri' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Request_Abstract::getControllerName' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Request_Abstract::getEnv' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'mixed',
  ),
  'Yaf\\Request_Abstract::getException' => 
  array (
    0 => 'Yaf\\Exception',
  ),
  'Yaf\\Request_Abstract::getLanguage' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Request_Abstract::getMethod' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Request_Abstract::getModuleName' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Request_Abstract::getParam' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'default=' => 'mixed',
  ),
  'Yaf\\Request_Abstract::getParams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Yaf\\Request_Abstract::getRequestUri' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Request_Abstract::getServer' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'mixed',
  ),
  'Yaf\\Request_Abstract::isCli' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Request_Abstract::isDispatched' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Request_Abstract::isGet' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Request_Abstract::isHead' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Request_Abstract::isOptions' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Request_Abstract::isPost' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Request_Abstract::isPut' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Request_Abstract::isRouted' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Request_Abstract::isXmlHttpRequest' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Request_Abstract::setActionName' => 
  array (
    0 => 'Yaf\\Request_Abstract|bool',
    'action' => 'string',
  ),
  'Yaf\\Request_Abstract::setBaseUri' => 
  array (
    0 => 'bool',
    'uri' => 'string',
  ),
  'Yaf\\Request_Abstract::setControllerName' => 
  array (
    0 => 'Yaf\\Request_Abstract|bool',
    'controller' => 'string',
  ),
  'Yaf\\Request_Abstract::setDispatched' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Request_Abstract::setModuleName' => 
  array (
    0 => 'Yaf\\Request_Abstract|bool',
    'module' => 'string',
  ),
  'Yaf\\Request_Abstract::setParam' => 
  array (
    0 => 'Yaf\\Request_Abstract|bool',
    'name' => 'array<array-key, mixed>|string',
    'value=' => 'string',
  ),
  'Yaf\\Request_Abstract::setRequestUri' => 
  array (
    0 => 'mixed',
    'uri' => 'string',
  ),
  'Yaf\\Request_Abstract::setRouted' => 
  array (
    0 => 'Yaf\\Request_Abstract|bool',
  ),
  'Yaf\\Response\\Cli::__clone' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Response\\Cli::__construct' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Response\\Cli::__destruct' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Response\\Cli::__toString' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Response\\Cli::appendBody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'Yaf\\Response\\Cli::clearBody' => 
  array (
    0 => 'bool',
    'key=' => 'string',
  ),
  'Yaf\\Response\\Cli::getBody' => 
  array (
    0 => 'mixed',
    'key=' => 'null|string',
  ),
  'Yaf\\Response\\Cli::prependBody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'Yaf\\Response\\Cli::setBody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'Yaf\\Response\\Http::__clone' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Response\\Http::__construct' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Response\\Http::__destruct' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Response\\Http::__toString' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Response\\Http::appendBody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'Yaf\\Response\\Http::clearBody' => 
  array (
    0 => 'bool',
    'key=' => 'string',
  ),
  'Yaf\\Response\\Http::clearHeaders' => 
  array (
    0 => 'Yaf\\Response_Abstract|false',
    'name=' => 'string',
  ),
  'Yaf\\Response\\Http::getBody' => 
  array (
    0 => 'mixed',
    'key=' => 'null|string',
  ),
  'Yaf\\Response\\Http::getHeader' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
  ),
  'Yaf\\Response\\Http::prependBody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'Yaf\\Response\\Http::response' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\Response\\Http::setAllHeaders' => 
  array (
    0 => 'bool',
    'headers' => 'array<array-key, mixed>',
  ),
  'Yaf\\Response\\Http::setBody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'Yaf\\Response\\Http::setHeader' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value' => 'string',
    'replace=' => 'bool',
    'response_code=' => 'int',
  ),
  'Yaf\\Response\\Http::setRedirect' => 
  array (
    0 => 'bool',
    'url' => 'string',
  ),
  'Yaf\\Response_Abstract::__clone' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Response_Abstract::__construct' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Response_Abstract::__destruct' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Response_Abstract::__toString' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Response_Abstract::appendBody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'Yaf\\Response_Abstract::clearBody' => 
  array (
    0 => 'bool',
    'key=' => 'string',
  ),
  'Yaf\\Response_Abstract::getBody' => 
  array (
    0 => 'mixed',
    'key=' => 'null|string',
  ),
  'Yaf\\Response_Abstract::prependBody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'Yaf\\Response_Abstract::setBody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'Yaf\\Route\\Map::__construct' => 
  array (
    0 => 'void',
    'controller_prefer=' => 'bool',
    'delimiter=' => 'string',
  ),
  'Yaf\\Route\\Map::assemble' => 
  array (
    0 => 'bool',
    'info' => 'array<array-key, mixed>',
    'query=' => 'array<array-key, mixed>|null',
  ),
  'Yaf\\Route\\Map::route' => 
  array (
    0 => 'bool',
    'request' => 'Yaf\\Request_Abstract',
  ),
  'Yaf\\Route\\Regex::__construct' => 
  array (
    0 => 'void',
    'match' => 'string',
    'route' => 'array<array-key, mixed>',
    'map=' => 'array<array-key, mixed>|null',
    'verify=' => 'array<array-key, mixed>|null',
    'reverse=' => 'string',
  ),
  'Yaf\\Route\\Regex::addConfig' => 
  array (
    0 => 'Yaf\\Router|bool',
    'config' => 'Yaf\\Config_Abstract',
  ),
  'Yaf\\Route\\Regex::addRoute' => 
  array (
    0 => 'Yaf\\Router|bool',
    'name' => 'string',
    'route' => 'Yaf\\Route_Interface',
  ),
  'Yaf\\Route\\Regex::assemble' => 
  array (
    0 => 'bool',
    'info' => 'array<array-key, mixed>',
    'query=' => 'array<array-key, mixed>|null',
  ),
  'Yaf\\Route\\Regex::getCurrentRoute' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Route\\Regex::getRoute' => 
  array (
    0 => 'Yaf\\Route_Interface',
    'name' => 'string',
  ),
  'Yaf\\Route\\Regex::getRoutes' => 
  array (
    0 => 'array<array-key, Yaf\\Route_Interface>',
  ),
  'Yaf\\Route\\Regex::route' => 
  array (
    0 => 'bool',
    'request' => 'Yaf\\Request_Abstract',
  ),
  'Yaf\\Route\\Rewrite::__construct' => 
  array (
    0 => 'void',
    'match' => 'string',
    'route' => 'array<array-key, mixed>',
    'verify=' => 'array<array-key, mixed>|null',
    'reverse=' => 'string',
  ),
  'Yaf\\Route\\Rewrite::addConfig' => 
  array (
    0 => 'Yaf\\Router|bool',
    'config' => 'Yaf\\Config_Abstract',
  ),
  'Yaf\\Route\\Rewrite::addRoute' => 
  array (
    0 => 'Yaf\\Router|bool',
    'name' => 'string',
    'route' => 'Yaf\\Route_Interface',
  ),
  'Yaf\\Route\\Rewrite::assemble' => 
  array (
    0 => 'bool',
    'info' => 'array<array-key, mixed>',
    'query=' => 'array<array-key, mixed>|null',
  ),
  'Yaf\\Route\\Rewrite::getCurrentRoute' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Route\\Rewrite::getRoute' => 
  array (
    0 => 'Yaf\\Route_Interface',
    'name' => 'string',
  ),
  'Yaf\\Route\\Rewrite::getRoutes' => 
  array (
    0 => 'array<array-key, Yaf\\Route_Interface>',
  ),
  'Yaf\\Route\\Rewrite::route' => 
  array (
    0 => 'bool',
    'request' => 'Yaf\\Request_Abstract',
  ),
  'Yaf\\Route\\Simple::__construct' => 
  array (
    0 => 'void',
    'module_name' => 'string',
    'controller_name' => 'string',
    'action_name' => 'string',
  ),
  'Yaf\\Route\\Simple::assemble' => 
  array (
    0 => 'bool',
    'info' => 'array<array-key, mixed>',
    'query=' => 'array<array-key, mixed>|null',
  ),
  'Yaf\\Route\\Simple::route' => 
  array (
    0 => 'bool',
    'request' => 'Yaf\\Request_Abstract',
  ),
  'Yaf\\Route\\Supervar::__construct' => 
  array (
    0 => 'void',
    'supervar_name' => 'string',
  ),
  'Yaf\\Route\\Supervar::assemble' => 
  array (
    0 => 'bool',
    'info' => 'array<array-key, mixed>',
    'query=' => 'array<array-key, mixed>|null',
  ),
  'Yaf\\Route\\Supervar::route' => 
  array (
    0 => 'bool',
    'request' => 'Yaf\\Request_Abstract',
  ),
  'Yaf\\Route_Interface::__construct' => 
  array (
    0 => 'Yaf\\Route_Interface',
  ),
  'Yaf\\Route_Interface::assemble' => 
  array (
    0 => 'bool',
    'info' => 'array<array-key, mixed>',
    'query=' => 'array<array-key, mixed>|null',
  ),
  'Yaf\\Route_Interface::route' => 
  array (
    0 => 'bool',
    'request' => 'Yaf\\Request_Abstract',
  ),
  'Yaf\\Route_Static::assemble' => 
  array (
    0 => 'bool',
    'info' => 'array<array-key, mixed>',
    'query=' => 'array<array-key, mixed>|null',
  ),
  'Yaf\\Route_Static::match' => 
  array (
    0 => 'bool',
    'uri' => 'string',
  ),
  'Yaf\\Route_Static::route' => 
  array (
    0 => 'bool',
    'request' => 'Yaf\\Request_Abstract',
  ),
  'Yaf\\Router::__construct' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Router::addConfig' => 
  array (
    0 => 'Yaf\\Router|false',
    'config' => 'Yaf\\Config_Abstract',
  ),
  'Yaf\\Router::addRoute' => 
  array (
    0 => 'Yaf\\Router|false',
    'name' => 'string',
    'route' => 'Yaf\\Route_Interface',
  ),
  'Yaf\\Router::getCurrentRoute' => 
  array (
    0 => 'string',
  ),
  'Yaf\\Router::getRoute' => 
  array (
    0 => 'Yaf\\Route_Interface',
    'name' => 'string',
  ),
  'Yaf\\Router::getRoutes' => 
  array (
    0 => 'array<array-key, Yaf\\Route_Interface>',
  ),
  'Yaf\\Router::route' => 
  array (
    0 => 'Yaf\\Router|false',
    'request' => 'Yaf\\Request_Abstract',
  ),
  'Yaf\\Session::__clone' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Session::__construct' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Session::__get' => 
  array (
    0 => 'void',
    'name' => 'mixed',
  ),
  'Yaf\\Session::__isset' => 
  array (
    0 => 'void',
    'name' => 'mixed',
  ),
  'Yaf\\Session::__set' => 
  array (
    0 => 'void',
    'name' => 'mixed',
    'value' => 'mixed',
  ),
  'Yaf\\Session::__sleep' => 
  array (
    0 => 'list<string>',
  ),
  'Yaf\\Session::__unset' => 
  array (
    0 => 'void',
    'name' => 'mixed',
  ),
  'Yaf\\Session::__wakeup' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Session::count' => 
  array (
    0 => 'int',
  ),
  'Yaf\\Session::current' => 
  array (
    0 => 'mixed',
  ),
  'Yaf\\Session::del' => 
  array (
    0 => 'Yaf\\Session|false',
    'name' => 'string',
  ),
  'Yaf\\Session::get' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'Yaf\\Session::getInstance' => 
  array (
    0 => 'Yaf\\Session',
  ),
  'Yaf\\Session::has' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'Yaf\\Session::key' => 
  array (
    0 => 'int|string',
  ),
  'Yaf\\Session::next' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Session::offsetExists' => 
  array (
    0 => 'bool',
    'name' => 'int|string',
  ),
  'Yaf\\Session::offsetGet' => 
  array (
    0 => 'mixed',
    'name' => 'int|string',
  ),
  'Yaf\\Session::offsetSet' => 
  array (
    0 => 'void',
    'name' => 'int|null|string',
    'value' => 'mixed',
  ),
  'Yaf\\Session::offsetUnset' => 
  array (
    0 => 'void',
    'name' => 'int|string',
  ),
  'Yaf\\Session::rewind' => 
  array (
    0 => 'void',
  ),
  'Yaf\\Session::set' => 
  array (
    0 => 'Yaf\\Session|false',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'Yaf\\Session::start' => 
  array (
    0 => 'Yaf\\Session',
  ),
  'Yaf\\Session::valid' => 
  array (
    0 => 'bool',
  ),
  'Yaf\\View\\Simple::__construct' => 
  array (
    0 => 'void',
    'template_dir' => 'string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'Yaf\\View\\Simple::__get' => 
  array (
    0 => 'mixed',
    'name=' => 'null',
  ),
  'Yaf\\View\\Simple::__isset' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'Yaf\\View\\Simple::__set' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value=' => 'mixed',
  ),
  'Yaf\\View\\Simple::assign' => 
  array (
    0 => 'Yaf\\View\\Simple',
    'name' => 'array<array-key, mixed>|string',
    'value=' => 'mixed',
  ),
  'Yaf\\View\\Simple::assignRef' => 
  array (
    0 => 'Yaf\\View\\Simple',
    'name' => 'string',
    '&value' => 'mixed',
  ),
  'Yaf\\View\\Simple::clear' => 
  array (
    0 => 'Yaf\\View\\Simple',
    'name=' => 'string',
  ),
  'Yaf\\View\\Simple::display' => 
  array (
    0 => 'bool',
    'tpl' => 'string',
    'tpl_vars=' => 'array<array-key, mixed>|null',
  ),
  'Yaf\\View\\Simple::eval' => 
  array (
    0 => 'bool|null',
    'tpl_str' => 'string',
    'vars=' => 'array<array-key, mixed>|null',
  ),
  'Yaf\\View\\Simple::getScriptPath' => 
  array (
    0 => 'string',
  ),
  'Yaf\\View\\Simple::render' => 
  array (
    0 => 'null|string',
    'tpl' => 'string',
    'tpl_vars=' => 'array<array-key, mixed>|null',
  ),
  'Yaf\\View\\Simple::setScriptPath' => 
  array (
    0 => 'Yaf\\View\\Simple',
    'template_dir' => 'string',
  ),
  'Yaf\\View_Interface::assign' => 
  array (
    0 => 'bool',
    'name' => 'array<array-key, mixed>|string',
    'value' => 'mixed',
  ),
  'Yaf\\View_Interface::display' => 
  array (
    0 => 'bool',
    'tpl' => 'string',
    'tpl_vars=' => 'array<array-key, mixed>|null',
  ),
  'Yaf\\View_Interface::getScriptPath' => 
  array (
    0 => 'string',
  ),
  'Yaf\\View_Interface::render' => 
  array (
    0 => 'string',
    'tpl' => 'string',
    'tpl_vars=' => 'array<array-key, mixed>|null',
  ),
  'Yaf\\View_Interface::setScriptPath' => 
  array (
    0 => 'void',
    'template_dir' => 'string',
  ),
  'Yaf_Action_Abstract::__clone' => 
  array (
    0 => 'void',
  ),
  'Yaf_Action_Abstract::__construct' => 
  array (
    0 => 'void',
    'request' => 'Yaf_Request_Abstract',
    'response' => 'Yaf_Response_Abstract',
    'view' => 'Yaf_View_Interface',
    'invokeArgs=' => 'array<array-key, mixed>|null',
  ),
  'Yaf_Action_Abstract::display' => 
  array (
    0 => 'bool',
    'tpl' => 'string',
    'parameters=' => 'array<array-key, mixed>|null',
  ),
  'Yaf_Action_Abstract::execute' => 
  array (
    0 => 'mixed',
    'arg=' => 'mixed',
    '...args=' => 'mixed',
  ),
  'Yaf_Action_Abstract::forward' => 
  array (
    0 => 'bool',
    'module' => 'string',
    'controller=' => 'string',
    'action=' => 'string',
    'parameters=' => 'array<array-key, mixed>|null',
  ),
  'Yaf_Action_Abstract::getController' => 
  array (
    0 => 'Yaf_Controller_Abstract',
  ),
  'Yaf_Action_Abstract::getControllerName' => 
  array (
    0 => 'string',
  ),
  'Yaf_Action_Abstract::getInvokeArg' => 
  array (
    0 => 'mixed|null',
    'name' => 'string',
  ),
  'Yaf_Action_Abstract::getInvokeArgs' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Yaf_Action_Abstract::getModuleName' => 
  array (
    0 => 'string',
  ),
  'Yaf_Action_Abstract::getRequest' => 
  array (
    0 => 'Yaf_Request_Abstract',
  ),
  'Yaf_Action_Abstract::getResponse' => 
  array (
    0 => 'Yaf_Response_Abstract',
  ),
  'Yaf_Action_Abstract::getView' => 
  array (
    0 => 'Yaf_View_Interface',
  ),
  'Yaf_Action_Abstract::getViewpath' => 
  array (
    0 => 'string',
  ),
  'Yaf_Action_Abstract::init' => 
  array (
    0 => 'mixed',
  ),
  'Yaf_Action_Abstract::initView' => 
  array (
    0 => 'Yaf_Response_Abstract',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'Yaf_Action_Abstract::redirect' => 
  array (
    0 => 'bool',
    'url' => 'string',
  ),
  'Yaf_Action_Abstract::render' => 
  array (
    0 => 'string',
    'tpl' => 'string',
    'parameters=' => 'array<array-key, mixed>|null',
  ),
  'Yaf_Action_Abstract::setViewpath' => 
  array (
    0 => 'bool',
    'view_directory' => 'string',
  ),
  'Yaf_Application::__clone' => 
  array (
    0 => 'void',
  ),
  'Yaf_Application::__construct' => 
  array (
    0 => 'void',
    'config' => 'mixed',
    'envrion=' => 'string',
  ),
  'Yaf_Application::__destruct' => 
  array (
    0 => 'void',
  ),
  'Yaf_Application::__sleep' => 
  array (
    0 => 'list<string>',
  ),
  'Yaf_Application::__wakeup' => 
  array (
    0 => 'void',
  ),
  'Yaf_Application::app' => 
  array (
    0 => 'Yaf_Application|null',
  ),
  'Yaf_Application::bootstrap' => 
  array (
    0 => 'Yaf_Application',
    'bootstrap=' => 'Yaf_Bootstrap_Abstract',
  ),
  'Yaf_Application::clearLastError' => 
  array (
    0 => 'Yaf_Application',
  ),
  'Yaf_Application::environ' => 
  array (
    0 => 'string',
  ),
  'Yaf_Application::execute' => 
  array (
    0 => 'void',
    'entry' => 'callable',
    '...args' => 'string',
  ),
  'Yaf_Application::getAppDirectory' => 
  array (
    0 => 'Yaf_Application',
  ),
  'Yaf_Application::getConfig' => 
  array (
    0 => 'Yaf_Config_Abstract',
  ),
  'Yaf_Application::getDispatcher' => 
  array (
    0 => 'Yaf_Dispatcher',
  ),
  'Yaf_Application::getLastErrorMsg' => 
  array (
    0 => 'string',
  ),
  'Yaf_Application::getLastErrorNo' => 
  array (
    0 => 'int',
  ),
  'Yaf_Application::getModules' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Yaf_Application::run' => 
  array (
    0 => 'void',
  ),
  'Yaf_Application::setAppDirectory' => 
  array (
    0 => 'Yaf_Application',
    'directory' => 'string',
  ),
  'Yaf_Config_Abstract::__construct' => 
  array (
    0 => 'void',
  ),
  'Yaf_Config_Abstract::get' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'Yaf_Config_Abstract::readonly' => 
  array (
    0 => 'bool',
  ),
  'Yaf_Config_Abstract::set' => 
  array (
    0 => 'Yaf_Config_Abstract',
  ),
  'Yaf_Config_Abstract::toArray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Yaf_Config_Ini::__construct' => 
  array (
    0 => 'void',
    'config_file' => 'string',
    'section=' => 'string',
  ),
  'Yaf_Config_Ini::__get' => 
  array (
    0 => 'void',
    'name=' => 'string',
  ),
  'Yaf_Config_Ini::__isset' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'Yaf_Config_Ini::__set' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'Yaf_Config_Ini::count' => 
  array (
    0 => 'void',
  ),
  'Yaf_Config_Ini::current' => 
  array (
    0 => 'void',
  ),
  'Yaf_Config_Ini::get' => 
  array (
    0 => 'mixed',
    'name=' => 'mixed',
  ),
  'Yaf_Config_Ini::key' => 
  array (
    0 => 'void',
  ),
  'Yaf_Config_Ini::next' => 
  array (
    0 => 'void',
  ),
  'Yaf_Config_Ini::offsetExists' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'Yaf_Config_Ini::offsetGet' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'Yaf_Config_Ini::offsetSet' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'string',
  ),
  'Yaf_Config_Ini::offsetUnset' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'Yaf_Config_Ini::readonly' => 
  array (
    0 => 'void',
  ),
  'Yaf_Config_Ini::rewind' => 
  array (
    0 => 'void',
  ),
  'Yaf_Config_Ini::set' => 
  array (
    0 => 'Yaf_Config_Abstract',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'Yaf_Config_Ini::toArray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Yaf_Config_Ini::valid' => 
  array (
    0 => 'void',
  ),
  'Yaf_Config_Simple::__construct' => 
  array (
    0 => 'void',
    'config_file' => 'string',
    'section=' => 'string',
  ),
  'Yaf_Config_Simple::__get' => 
  array (
    0 => 'void',
    'name=' => 'string',
  ),
  'Yaf_Config_Simple::__isset' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'Yaf_Config_Simple::__set' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'string',
  ),
  'Yaf_Config_Simple::count' => 
  array (
    0 => 'void',
  ),
  'Yaf_Config_Simple::current' => 
  array (
    0 => 'void',
  ),
  'Yaf_Config_Simple::get' => 
  array (
    0 => 'mixed',
    'name=' => 'mixed',
  ),
  'Yaf_Config_Simple::key' => 
  array (
    0 => 'void',
  ),
  'Yaf_Config_Simple::next' => 
  array (
    0 => 'void',
  ),
  'Yaf_Config_Simple::offsetExists' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'Yaf_Config_Simple::offsetGet' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'Yaf_Config_Simple::offsetSet' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'string',
  ),
  'Yaf_Config_Simple::offsetUnset' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'Yaf_Config_Simple::readonly' => 
  array (
    0 => 'void',
  ),
  'Yaf_Config_Simple::rewind' => 
  array (
    0 => 'void',
  ),
  'Yaf_Config_Simple::set' => 
  array (
    0 => 'Yaf_Config_Abstract',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'Yaf_Config_Simple::toArray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Yaf_Config_Simple::valid' => 
  array (
    0 => 'void',
  ),
  'Yaf_Controller_Abstract::__clone' => 
  array (
    0 => 'void',
  ),
  'Yaf_Controller_Abstract::__construct' => 
  array (
    0 => 'void',
  ),
  'Yaf_Controller_Abstract::display' => 
  array (
    0 => 'bool',
    'tpl' => 'string',
    'parameters=' => 'array<array-key, mixed>',
  ),
  'Yaf_Controller_Abstract::forward' => 
  array (
    0 => 'void',
    'action' => 'string',
    'parameters=' => 'array<array-key, mixed>',
  ),
  'Yaf_Controller_Abstract::forward\'1' => 
  array (
    0 => 'void',
    'controller' => 'string',
    'action' => 'string',
    'parameters=' => 'array<array-key, mixed>',
  ),
  'Yaf_Controller_Abstract::forward\'2' => 
  array (
    0 => 'void',
    'module' => 'string',
    'controller' => 'string',
    'action' => 'string',
    'parameters=' => 'array<array-key, mixed>',
  ),
  'Yaf_Controller_Abstract::getInvokeArg' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'Yaf_Controller_Abstract::getInvokeArgs' => 
  array (
    0 => 'void',
  ),
  'Yaf_Controller_Abstract::getModuleName' => 
  array (
    0 => 'string',
  ),
  'Yaf_Controller_Abstract::getName' => 
  array (
    0 => 'string',
  ),
  'Yaf_Controller_Abstract::getRequest' => 
  array (
    0 => 'Yaf_Request_Abstract',
  ),
  'Yaf_Controller_Abstract::getResponse' => 
  array (
    0 => 'Yaf_Response_Abstract',
  ),
  'Yaf_Controller_Abstract::getView' => 
  array (
    0 => 'Yaf_View_Interface',
  ),
  'Yaf_Controller_Abstract::getViewpath' => 
  array (
    0 => 'void',
  ),
  'Yaf_Controller_Abstract::init' => 
  array (
    0 => 'void',
  ),
  'Yaf_Controller_Abstract::initView' => 
  array (
    0 => 'void',
    'options=' => 'array<array-key, mixed>',
  ),
  'Yaf_Controller_Abstract::redirect' => 
  array (
    0 => 'bool',
    'url' => 'string',
  ),
  'Yaf_Controller_Abstract::render' => 
  array (
    0 => 'string',
    'tpl' => 'string',
    'parameters=' => 'array<array-key, mixed>',
  ),
  'Yaf_Controller_Abstract::setViewpath' => 
  array (
    0 => 'void',
    'view_directory' => 'string',
  ),
  'Yaf_Dispatcher::__clone' => 
  array (
    0 => 'void',
  ),
  'Yaf_Dispatcher::__construct' => 
  array (
    0 => 'void',
  ),
  'Yaf_Dispatcher::__sleep' => 
  array (
    0 => 'list<string>',
  ),
  'Yaf_Dispatcher::__wakeup' => 
  array (
    0 => 'void',
  ),
  'Yaf_Dispatcher::autoRender' => 
  array (
    0 => 'Yaf_Dispatcher',
    'flag=' => 'bool',
  ),
  'Yaf_Dispatcher::catchException' => 
  array (
    0 => 'Yaf_Dispatcher',
    'flag=' => 'bool',
  ),
  'Yaf_Dispatcher::disableView' => 
  array (
    0 => 'bool',
  ),
  'Yaf_Dispatcher::dispatch' => 
  array (
    0 => 'Yaf_Response_Abstract',
    'request' => 'Yaf_Request_Abstract',
  ),
  'Yaf_Dispatcher::enableView' => 
  array (
    0 => 'Yaf_Dispatcher',
  ),
  'Yaf_Dispatcher::flushInstantly' => 
  array (
    0 => 'Yaf_Dispatcher',
    'flag=' => 'bool',
  ),
  'Yaf_Dispatcher::getApplication' => 
  array (
    0 => 'Yaf_Application',
  ),
  'Yaf_Dispatcher::getDefaultAction' => 
  array (
    0 => 'string',
  ),
  'Yaf_Dispatcher::getDefaultController' => 
  array (
    0 => 'string',
  ),
  'Yaf_Dispatcher::getDefaultModule' => 
  array (
    0 => 'string',
  ),
  'Yaf_Dispatcher::getInstance' => 
  array (
    0 => 'Yaf_Dispatcher',
  ),
  'Yaf_Dispatcher::getRequest' => 
  array (
    0 => 'Yaf_Request_Abstract',
  ),
  'Yaf_Dispatcher::getRouter' => 
  array (
    0 => 'Yaf_Router',
  ),
  'Yaf_Dispatcher::initView' => 
  array (
    0 => 'Yaf_View_Interface',
    'templates_dir' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'Yaf_Dispatcher::registerPlugin' => 
  array (
    0 => 'Yaf_Dispatcher',
    'plugin' => 'Yaf_Plugin_Abstract',
  ),
  'Yaf_Dispatcher::returnResponse' => 
  array (
    0 => 'Yaf_Dispatcher',
    'flag' => 'bool',
  ),
  'Yaf_Dispatcher::setDefaultAction' => 
  array (
    0 => 'Yaf_Dispatcher',
    'action' => 'string',
  ),
  'Yaf_Dispatcher::setDefaultController' => 
  array (
    0 => 'Yaf_Dispatcher',
    'controller' => 'string',
  ),
  'Yaf_Dispatcher::setDefaultModule' => 
  array (
    0 => 'Yaf_Dispatcher',
    'module' => 'string',
  ),
  'Yaf_Dispatcher::setErrorHandler' => 
  array (
    0 => 'Yaf_Dispatcher',
    'callback' => 'callable',
    'error_types' => 'int',
  ),
  'Yaf_Dispatcher::setRequest' => 
  array (
    0 => 'Yaf_Dispatcher',
    'request' => 'Yaf_Request_Abstract',
  ),
  'Yaf_Dispatcher::setView' => 
  array (
    0 => 'Yaf_Dispatcher',
    'view' => 'Yaf_View_Interface',
  ),
  'Yaf_Dispatcher::throwException' => 
  array (
    0 => 'Yaf_Dispatcher',
    'flag=' => 'bool',
  ),
  'Yaf_Exception::__construct' => 
  array (
    0 => 'void',
  ),
  'Yaf_Exception::getPrevious' => 
  array (
    0 => 'void',
  ),
  'Yaf_Loader::__clone' => 
  array (
    0 => 'void',
  ),
  'Yaf_Loader::__construct' => 
  array (
    0 => 'void',
  ),
  'Yaf_Loader::__sleep' => 
  array (
    0 => 'list<string>',
  ),
  'Yaf_Loader::__wakeup' => 
  array (
    0 => 'void',
  ),
  'Yaf_Loader::autoload' => 
  array (
    0 => 'void',
  ),
  'Yaf_Loader::clearLocalNamespace' => 
  array (
    0 => 'void',
  ),
  'Yaf_Loader::getInstance' => 
  array (
    0 => 'Yaf_Loader',
  ),
  'Yaf_Loader::getLibraryPath' => 
  array (
    0 => 'Yaf_Loader',
    'is_global=' => 'bool',
  ),
  'Yaf_Loader::getLocalNamespace' => 
  array (
    0 => 'void',
  ),
  'Yaf_Loader::getNamespacePath' => 
  array (
    0 => 'string',
    'namespaces' => 'string',
  ),
  'Yaf_Loader::import' => 
  array (
    0 => 'bool',
  ),
  'Yaf_Loader::isLocalName' => 
  array (
    0 => 'bool',
  ),
  'Yaf_Loader::registerLocalNamespace' => 
  array (
    0 => 'void',
    'prefix' => 'mixed',
  ),
  'Yaf_Loader::registerNamespace' => 
  array (
    0 => 'bool',
    'namespaces' => 'array<array-key, mixed>|string',
    'path=' => 'string',
  ),
  'Yaf_Loader::setLibraryPath' => 
  array (
    0 => 'Yaf_Loader',
    'directory' => 'string',
    'is_global=' => 'bool',
  ),
  'Yaf_Plugin_Abstract::dispatchLoopShutdown' => 
  array (
    0 => 'void',
    'request' => 'Yaf_Request_Abstract',
    'response' => 'Yaf_Response_Abstract',
  ),
  'Yaf_Plugin_Abstract::dispatchLoopStartup' => 
  array (
    0 => 'void',
    'request' => 'Yaf_Request_Abstract',
    'response' => 'Yaf_Response_Abstract',
  ),
  'Yaf_Plugin_Abstract::postDispatch' => 
  array (
    0 => 'void',
    'request' => 'Yaf_Request_Abstract',
    'response' => 'Yaf_Response_Abstract',
  ),
  'Yaf_Plugin_Abstract::preDispatch' => 
  array (
    0 => 'void',
    'request' => 'Yaf_Request_Abstract',
    'response' => 'Yaf_Response_Abstract',
  ),
  'Yaf_Plugin_Abstract::preResponse' => 
  array (
    0 => 'void',
    'request' => 'Yaf_Request_Abstract',
    'response' => 'Yaf_Response_Abstract',
  ),
  'Yaf_Plugin_Abstract::routerShutdown' => 
  array (
    0 => 'void',
    'request' => 'Yaf_Request_Abstract',
    'response' => 'Yaf_Response_Abstract',
  ),
  'Yaf_Plugin_Abstract::routerStartup' => 
  array (
    0 => 'void',
    'request' => 'Yaf_Request_Abstract',
    'response' => 'Yaf_Response_Abstract',
  ),
  'Yaf_Registry::__clone' => 
  array (
    0 => 'void',
  ),
  'Yaf_Registry::__construct' => 
  array (
    0 => 'void',
  ),
  'Yaf_Registry::del' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'Yaf_Registry::get' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'Yaf_Registry::has' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'Yaf_Registry::set' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value' => 'string',
  ),
  'Yaf_Request_Abstract::clearParams' => 
  array (
    0 => 'bool',
  ),
  'Yaf_Request_Abstract::getActionName' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Abstract::getBaseUri' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Abstract::getControllerName' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Abstract::getEnv' => 
  array (
    0 => 'void',
    'name' => 'string',
    'default=' => 'string',
  ),
  'Yaf_Request_Abstract::getException' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Abstract::getLanguage' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Abstract::getMethod' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Abstract::getModuleName' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Abstract::getParam' => 
  array (
    0 => 'void',
    'name' => 'string',
    'default=' => 'string',
  ),
  'Yaf_Request_Abstract::getParams' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Abstract::getRequestUri' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Abstract::getServer' => 
  array (
    0 => 'void',
    'name' => 'string',
    'default=' => 'string',
  ),
  'Yaf_Request_Abstract::isCli' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Abstract::isDispatched' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Abstract::isGet' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Abstract::isHead' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Abstract::isOptions' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Abstract::isPost' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Abstract::isPut' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Abstract::isRouted' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Abstract::isXmlHttpRequest' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Abstract::setActionName' => 
  array (
    0 => 'void',
    'action' => 'string',
  ),
  'Yaf_Request_Abstract::setBaseUri' => 
  array (
    0 => 'bool',
    'uir' => 'string',
  ),
  'Yaf_Request_Abstract::setControllerName' => 
  array (
    0 => 'void',
    'controller' => 'string',
  ),
  'Yaf_Request_Abstract::setDispatched' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Abstract::setModuleName' => 
  array (
    0 => 'void',
    'module' => 'string',
  ),
  'Yaf_Request_Abstract::setParam' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value=' => 'string',
  ),
  'Yaf_Request_Abstract::setRequestUri' => 
  array (
    0 => 'void',
    'uir' => 'string',
  ),
  'Yaf_Request_Abstract::setRouted' => 
  array (
    0 => 'void',
    'flag=' => 'string',
  ),
  'Yaf_Request_Http::__clone' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Http::__construct' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Http::get' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'default=' => 'string',
  ),
  'Yaf_Request_Http::getActionName' => 
  array (
    0 => 'string',
  ),
  'Yaf_Request_Http::getBaseUri' => 
  array (
    0 => 'string',
  ),
  'Yaf_Request_Http::getControllerName' => 
  array (
    0 => 'string',
  ),
  'Yaf_Request_Http::getCookie' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'default=' => 'string',
  ),
  'Yaf_Request_Http::getEnv' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'mixed',
  ),
  'Yaf_Request_Http::getException' => 
  array (
    0 => 'Yaf_Exception',
  ),
  'Yaf_Request_Http::getFiles' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Http::getLanguage' => 
  array (
    0 => 'string',
  ),
  'Yaf_Request_Http::getMethod' => 
  array (
    0 => 'string',
  ),
  'Yaf_Request_Http::getModuleName' => 
  array (
    0 => 'string',
  ),
  'Yaf_Request_Http::getParam' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'default=' => 'mixed',
  ),
  'Yaf_Request_Http::getParams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Yaf_Request_Http::getPost' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'default=' => 'string',
  ),
  'Yaf_Request_Http::getQuery' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'default=' => 'string',
  ),
  'Yaf_Request_Http::getRaw' => 
  array (
    0 => 'mixed',
  ),
  'Yaf_Request_Http::getRequest' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Http::getRequestUri' => 
  array (
    0 => 'string',
  ),
  'Yaf_Request_Http::getServer' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'mixed',
  ),
  'Yaf_Request_Http::isCli' => 
  array (
    0 => 'bool',
  ),
  'Yaf_Request_Http::isDispatched' => 
  array (
    0 => 'bool',
  ),
  'Yaf_Request_Http::isGet' => 
  array (
    0 => 'bool',
  ),
  'Yaf_Request_Http::isHead' => 
  array (
    0 => 'bool',
  ),
  'Yaf_Request_Http::isOptions' => 
  array (
    0 => 'bool',
  ),
  'Yaf_Request_Http::isPost' => 
  array (
    0 => 'bool',
  ),
  'Yaf_Request_Http::isPut' => 
  array (
    0 => 'bool',
  ),
  'Yaf_Request_Http::isRouted' => 
  array (
    0 => 'bool',
  ),
  'Yaf_Request_Http::isXmlHttpRequest' => 
  array (
    0 => 'bool',
  ),
  'Yaf_Request_Http::setActionName' => 
  array (
    0 => 'Yaf_Request_Abstract|bool',
    'action' => 'string',
  ),
  'Yaf_Request_Http::setBaseUri' => 
  array (
    0 => 'bool',
    'uri' => 'string',
  ),
  'Yaf_Request_Http::setControllerName' => 
  array (
    0 => 'Yaf_Request_Abstract|bool',
    'controller' => 'string',
  ),
  'Yaf_Request_Http::setDispatched' => 
  array (
    0 => 'bool',
  ),
  'Yaf_Request_Http::setModuleName' => 
  array (
    0 => 'Yaf_Request_Abstract|bool',
    'module' => 'string',
  ),
  'Yaf_Request_Http::setParam' => 
  array (
    0 => 'Yaf_Request_Abstract|bool',
    'name' => 'array<array-key, mixed>|string',
    'value=' => 'string',
  ),
  'Yaf_Request_Http::setRequestUri' => 
  array (
    0 => 'mixed',
    'uri' => 'string',
  ),
  'Yaf_Request_Http::setRouted' => 
  array (
    0 => 'Yaf_Request_Abstract|bool',
  ),
  'Yaf_Request_Simple::__clone' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Simple::__construct' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Simple::get' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Simple::getActionName' => 
  array (
    0 => 'string',
  ),
  'Yaf_Request_Simple::getBaseUri' => 
  array (
    0 => 'string',
  ),
  'Yaf_Request_Simple::getControllerName' => 
  array (
    0 => 'string',
  ),
  'Yaf_Request_Simple::getCookie' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Simple::getEnv' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'mixed',
  ),
  'Yaf_Request_Simple::getException' => 
  array (
    0 => 'Yaf_Exception',
  ),
  'Yaf_Request_Simple::getFiles' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Simple::getLanguage' => 
  array (
    0 => 'string',
  ),
  'Yaf_Request_Simple::getMethod' => 
  array (
    0 => 'string',
  ),
  'Yaf_Request_Simple::getModuleName' => 
  array (
    0 => 'string',
  ),
  'Yaf_Request_Simple::getParam' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'default=' => 'mixed',
  ),
  'Yaf_Request_Simple::getParams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'Yaf_Request_Simple::getPost' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Simple::getQuery' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Simple::getRequest' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Simple::getRequestUri' => 
  array (
    0 => 'string',
  ),
  'Yaf_Request_Simple::getServer' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'mixed',
  ),
  'Yaf_Request_Simple::isCli' => 
  array (
    0 => 'bool',
  ),
  'Yaf_Request_Simple::isDispatched' => 
  array (
    0 => 'bool',
  ),
  'Yaf_Request_Simple::isGet' => 
  array (
    0 => 'bool',
  ),
  'Yaf_Request_Simple::isHead' => 
  array (
    0 => 'bool',
  ),
  'Yaf_Request_Simple::isOptions' => 
  array (
    0 => 'bool',
  ),
  'Yaf_Request_Simple::isPost' => 
  array (
    0 => 'bool',
  ),
  'Yaf_Request_Simple::isPut' => 
  array (
    0 => 'bool',
  ),
  'Yaf_Request_Simple::isRouted' => 
  array (
    0 => 'bool',
  ),
  'Yaf_Request_Simple::isXmlHttpRequest' => 
  array (
    0 => 'void',
  ),
  'Yaf_Request_Simple::setActionName' => 
  array (
    0 => 'Yaf_Request_Abstract|bool',
    'action' => 'string',
  ),
  'Yaf_Request_Simple::setBaseUri' => 
  array (
    0 => 'bool',
    'uri' => 'string',
  ),
  'Yaf_Request_Simple::setControllerName' => 
  array (
    0 => 'Yaf_Request_Abstract|bool',
    'controller' => 'string',
  ),
  'Yaf_Request_Simple::setDispatched' => 
  array (
    0 => 'bool',
  ),
  'Yaf_Request_Simple::setModuleName' => 
  array (
    0 => 'Yaf_Request_Abstract|bool',
    'module' => 'string',
  ),
  'Yaf_Request_Simple::setParam' => 
  array (
    0 => 'Yaf_Request_Abstract|bool',
    'name' => 'array<array-key, mixed>|string',
    'value=' => 'string',
  ),
  'Yaf_Request_Simple::setRequestUri' => 
  array (
    0 => 'mixed',
    'uri' => 'string',
  ),
  'Yaf_Request_Simple::setRouted' => 
  array (
    0 => 'Yaf_Request_Abstract|bool',
  ),
  'Yaf_Response_Abstract::__clone' => 
  array (
    0 => 'void',
  ),
  'Yaf_Response_Abstract::__construct' => 
  array (
    0 => 'void',
  ),
  'Yaf_Response_Abstract::__destruct' => 
  array (
    0 => 'void',
  ),
  'Yaf_Response_Abstract::__toString' => 
  array (
    0 => 'string',
  ),
  'Yaf_Response_Abstract::appendBody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'Yaf_Response_Abstract::clearBody' => 
  array (
    0 => 'bool',
    'key=' => 'string',
  ),
  'Yaf_Response_Abstract::clearHeaders' => 
  array (
    0 => 'void',
  ),
  'Yaf_Response_Abstract::getBody' => 
  array (
    0 => 'mixed',
    'key=' => 'string',
  ),
  'Yaf_Response_Abstract::getHeader' => 
  array (
    0 => 'void',
  ),
  'Yaf_Response_Abstract::prependBody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'Yaf_Response_Abstract::response' => 
  array (
    0 => 'void',
  ),
  'Yaf_Response_Abstract::setAllHeaders' => 
  array (
    0 => 'void',
  ),
  'Yaf_Response_Abstract::setBody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'Yaf_Response_Abstract::setHeader' => 
  array (
    0 => 'void',
  ),
  'Yaf_Response_Abstract::setRedirect' => 
  array (
    0 => 'void',
  ),
  'Yaf_Response_Cli::__clone' => 
  array (
    0 => 'void',
  ),
  'Yaf_Response_Cli::__construct' => 
  array (
    0 => 'void',
  ),
  'Yaf_Response_Cli::__destruct' => 
  array (
    0 => 'void',
  ),
  'Yaf_Response_Cli::__toString' => 
  array (
    0 => 'string',
  ),
  'Yaf_Response_Cli::appendBody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'Yaf_Response_Cli::clearBody' => 
  array (
    0 => 'bool',
    'key=' => 'string',
  ),
  'Yaf_Response_Cli::getBody' => 
  array (
    0 => 'mixed',
    'key=' => 'null|string',
  ),
  'Yaf_Response_Cli::prependBody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'Yaf_Response_Cli::setBody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'Yaf_Response_Http::__clone' => 
  array (
    0 => 'void',
  ),
  'Yaf_Response_Http::__construct' => 
  array (
    0 => 'void',
  ),
  'Yaf_Response_Http::__destruct' => 
  array (
    0 => 'void',
  ),
  'Yaf_Response_Http::__toString' => 
  array (
    0 => 'string',
  ),
  'Yaf_Response_Http::appendBody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'Yaf_Response_Http::clearBody' => 
  array (
    0 => 'bool',
    'key=' => 'string',
  ),
  'Yaf_Response_Http::clearHeaders' => 
  array (
    0 => 'Yaf_Response_Abstract|false',
    'name=' => 'string',
  ),
  'Yaf_Response_Http::getBody' => 
  array (
    0 => 'mixed',
    'key=' => 'null|string',
  ),
  'Yaf_Response_Http::getHeader' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
  ),
  'Yaf_Response_Http::prependBody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'Yaf_Response_Http::response' => 
  array (
    0 => 'bool',
  ),
  'Yaf_Response_Http::setAllHeaders' => 
  array (
    0 => 'bool',
    'headers' => 'array<array-key, mixed>',
  ),
  'Yaf_Response_Http::setBody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'Yaf_Response_Http::setHeader' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value' => 'string',
    'replace=' => 'bool',
    'response_code=' => 'int',
  ),
  'Yaf_Response_Http::setRedirect' => 
  array (
    0 => 'bool',
    'url' => 'string',
  ),
  'Yaf_Route_Interface::__construct' => 
  array (
    0 => 'void',
  ),
  'Yaf_Route_Interface::assemble' => 
  array (
    0 => 'string',
    'info' => 'array<array-key, mixed>',
    'query=' => 'array<array-key, mixed>',
  ),
  'Yaf_Route_Interface::route' => 
  array (
    0 => 'bool',
    'request' => 'Yaf_Request_Abstract',
  ),
  'Yaf_Route_Map::__construct' => 
  array (
    0 => 'void',
    'controller_prefer=' => 'string',
    'delimiter=' => 'string',
  ),
  'Yaf_Route_Map::assemble' => 
  array (
    0 => 'string',
    'info' => 'array<array-key, mixed>',
    'query=' => 'array<array-key, mixed>',
  ),
  'Yaf_Route_Map::route' => 
  array (
    0 => 'bool',
    'request' => 'Yaf_Request_Abstract',
  ),
  'Yaf_Route_Regex::__construct' => 
  array (
    0 => 'void',
    'match' => 'string',
    'route' => 'array<array-key, mixed>',
    'map=' => 'array<array-key, mixed>',
    'verify=' => 'array<array-key, mixed>',
    'reverse=' => 'string',
  ),
  'Yaf_Route_Regex::addConfig' => 
  array (
    0 => 'Yaf_Router|bool',
    'config' => 'Yaf_Config_Abstract',
  ),
  'Yaf_Route_Regex::addRoute' => 
  array (
    0 => 'Yaf_Router|bool',
    'name' => 'string',
    'route' => 'Yaf_Route_Interface',
  ),
  'Yaf_Route_Regex::assemble' => 
  array (
    0 => 'string',
    'info' => 'array<array-key, mixed>',
    'query=' => 'array<array-key, mixed>',
  ),
  'Yaf_Route_Regex::getCurrentRoute' => 
  array (
    0 => 'string',
  ),
  'Yaf_Route_Regex::getRoute' => 
  array (
    0 => 'Yaf_Route_Interface',
    'name' => 'string',
  ),
  'Yaf_Route_Regex::getRoutes' => 
  array (
    0 => 'array<array-key, Yaf_Route_Interface>',
  ),
  'Yaf_Route_Regex::route' => 
  array (
    0 => 'bool',
    'request' => 'Yaf_Request_Abstract',
  ),
  'Yaf_Route_Rewrite::__construct' => 
  array (
    0 => 'void',
    'match' => 'string',
    'route' => 'array<array-key, mixed>',
    'verify=' => 'array<array-key, mixed>',
  ),
  'Yaf_Route_Rewrite::addConfig' => 
  array (
    0 => 'Yaf_Router|bool',
    'config' => 'Yaf_Config_Abstract',
  ),
  'Yaf_Route_Rewrite::addRoute' => 
  array (
    0 => 'Yaf_Router|bool',
    'name' => 'string',
    'route' => 'Yaf_Route_Interface',
  ),
  'Yaf_Route_Rewrite::assemble' => 
  array (
    0 => 'string',
    'info' => 'array<array-key, mixed>',
    'query=' => 'array<array-key, mixed>',
  ),
  'Yaf_Route_Rewrite::getCurrentRoute' => 
  array (
    0 => 'string',
  ),
  'Yaf_Route_Rewrite::getRoute' => 
  array (
    0 => 'Yaf_Route_Interface',
    'name' => 'string',
  ),
  'Yaf_Route_Rewrite::getRoutes' => 
  array (
    0 => 'array<array-key, Yaf_Route_Interface>',
  ),
  'Yaf_Route_Rewrite::route' => 
  array (
    0 => 'bool',
    'request' => 'Yaf_Request_Abstract',
  ),
  'Yaf_Route_Simple::__construct' => 
  array (
    0 => 'void',
    'module_name' => 'string',
    'controller_name' => 'string',
    'action_name' => 'string',
  ),
  'Yaf_Route_Simple::assemble' => 
  array (
    0 => 'string',
    'info' => 'array<array-key, mixed>',
    'query=' => 'array<array-key, mixed>',
  ),
  'Yaf_Route_Simple::route' => 
  array (
    0 => 'bool',
    'request' => 'Yaf_Request_Abstract',
  ),
  'Yaf_Route_Static::assemble' => 
  array (
    0 => 'string',
    'info' => 'array<array-key, mixed>',
    'query=' => 'array<array-key, mixed>',
  ),
  'Yaf_Route_Static::match' => 
  array (
    0 => 'void',
    'uri' => 'string',
  ),
  'Yaf_Route_Static::route' => 
  array (
    0 => 'bool',
    'request' => 'Yaf_Request_Abstract',
  ),
  'Yaf_Route_Supervar::__construct' => 
  array (
    0 => 'void',
    'supervar_name' => 'string',
  ),
  'Yaf_Route_Supervar::assemble' => 
  array (
    0 => 'string',
    'info' => 'array<array-key, mixed>',
    'query=' => 'array<array-key, mixed>',
  ),
  'Yaf_Route_Supervar::route' => 
  array (
    0 => 'bool',
    'request' => 'Yaf_Request_Abstract',
  ),
  'Yaf_Router::__construct' => 
  array (
    0 => 'void',
  ),
  'Yaf_Router::addConfig' => 
  array (
    0 => 'bool',
    'config' => 'Yaf_Config_Abstract',
  ),
  'Yaf_Router::addRoute' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'route' => 'Yaf_Route_Interface',
  ),
  'Yaf_Router::getCurrentRoute' => 
  array (
    0 => 'string',
  ),
  'Yaf_Router::getRoute' => 
  array (
    0 => 'Yaf_Route_Interface',
    'name' => 'string',
  ),
  'Yaf_Router::getRoutes' => 
  array (
    0 => 'mixed',
  ),
  'Yaf_Router::route' => 
  array (
    0 => 'bool',
    'request' => 'Yaf_Request_Abstract',
  ),
  'Yaf_Session::__clone' => 
  array (
    0 => 'void',
  ),
  'Yaf_Session::__construct' => 
  array (
    0 => 'void',
  ),
  'Yaf_Session::__get' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'Yaf_Session::__isset' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'Yaf_Session::__set' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'string',
  ),
  'Yaf_Session::__sleep' => 
  array (
    0 => 'list<string>',
  ),
  'Yaf_Session::__unset' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'Yaf_Session::__wakeup' => 
  array (
    0 => 'void',
  ),
  'Yaf_Session::count' => 
  array (
    0 => 'void',
  ),
  'Yaf_Session::current' => 
  array (
    0 => 'void',
  ),
  'Yaf_Session::del' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'Yaf_Session::get' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'Yaf_Session::getInstance' => 
  array (
    0 => 'void',
  ),
  'Yaf_Session::has' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'Yaf_Session::key' => 
  array (
    0 => 'void',
  ),
  'Yaf_Session::next' => 
  array (
    0 => 'void',
  ),
  'Yaf_Session::offsetExists' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'Yaf_Session::offsetGet' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'Yaf_Session::offsetSet' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'string',
  ),
  'Yaf_Session::offsetUnset' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'Yaf_Session::rewind' => 
  array (
    0 => 'void',
  ),
  'Yaf_Session::set' => 
  array (
    0 => 'Yaf_Session|bool',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'Yaf_Session::start' => 
  array (
    0 => 'void',
  ),
  'Yaf_Session::valid' => 
  array (
    0 => 'void',
  ),
  'Yaf_View_Interface::assign' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value=' => 'string',
  ),
  'Yaf_View_Interface::display' => 
  array (
    0 => 'bool',
    'tpl' => 'string',
    'tpl_vars=' => 'array<array-key, mixed>',
  ),
  'Yaf_View_Interface::getScriptPath' => 
  array (
    0 => 'string',
  ),
  'Yaf_View_Interface::render' => 
  array (
    0 => 'string',
    'tpl' => 'string',
    'tpl_vars=' => 'array<array-key, mixed>',
  ),
  'Yaf_View_Interface::setScriptPath' => 
  array (
    0 => 'void',
    'template_dir' => 'string',
  ),
  'Yaf_View_Simple::__construct' => 
  array (
    0 => 'void',
    'tempalte_dir' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'Yaf_View_Simple::__get' => 
  array (
    0 => 'void',
    'name=' => 'string',
  ),
  'Yaf_View_Simple::__isset' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'Yaf_View_Simple::__set' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'Yaf_View_Simple::assign' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value=' => 'mixed',
  ),
  'Yaf_View_Simple::assignRef' => 
  array (
    0 => 'bool',
    'name' => 'string',
    '&rw_value' => 'mixed',
  ),
  'Yaf_View_Simple::clear' => 
  array (
    0 => 'bool',
    'name=' => 'string',
  ),
  'Yaf_View_Simple::display' => 
  array (
    0 => 'bool',
    'tpl' => 'string',
    'tpl_vars=' => 'array<array-key, mixed>',
  ),
  'Yaf_View_Simple::eval' => 
  array (
    0 => 'string',
    'tpl_content' => 'string',
    'tpl_vars=' => 'array<array-key, mixed>',
  ),
  'Yaf_View_Simple::getScriptPath' => 
  array (
    0 => 'string',
  ),
  'Yaf_View_Simple::render' => 
  array (
    0 => 'string',
    'tpl' => 'string',
    'tpl_vars=' => 'array<array-key, mixed>',
  ),
  'Yaf_View_Simple::setScriptPath' => 
  array (
    0 => 'bool',
    'template_dir' => 'string',
  ),
  'yaml_emit' => 
  array (
    0 => 'string',
    'data' => 'mixed',
    'encoding=' => 'int',
    'linebreak=' => 'int',
    'callbacks=' => 'array<array-key, mixed>',
  ),
  'yaml_emit_file' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'data' => 'mixed',
    'encoding=' => 'int',
    'linebreak=' => 'int',
    'callbacks=' => 'array<array-key, mixed>',
  ),
  'yaml_parse' => 
  array (
    0 => 'false|mixed',
    'input' => 'string',
    'pos=' => 'int',
    '&w_ndocs=' => 'int',
    'callbacks=' => 'array<array-key, mixed>',
  ),
  'yaml_parse_file' => 
  array (
    0 => 'false|mixed',
    'filename' => 'string',
    'pos=' => 'int',
    '&w_ndocs=' => 'int',
    'callbacks=' => 'array<array-key, mixed>',
  ),
  'yaml_parse_url' => 
  array (
    0 => 'false|mixed',
    'url' => 'string',
    'pos=' => 'int',
    '&w_ndocs=' => 'int',
    'callbacks=' => 'array<array-key, mixed>',
  ),
  'Yar_Client::__call' => 
  array (
    0 => 'void',
    'method' => 'string',
    'parameters' => 'array<array-key, mixed>',
  ),
  'Yar_Client::__construct' => 
  array (
    0 => 'void',
    'url' => 'string',
  ),
  'Yar_Client::setOpt' => 
  array (
    0 => 'Yar_Client|false',
    'name' => 'int',
    'value' => 'mixed',
  ),
  'Yar_Client_Exception::__clone' => 
  array (
    0 => 'void',
  ),
  'Yar_Client_Exception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Exception|Throwable|null',
  ),
  'Yar_Client_Exception::__toString' => 
  array (
    0 => 'string',
  ),
  'Yar_Client_Exception::__wakeup' => 
  array (
    0 => 'void',
  ),
  'Yar_Client_Exception::getCode' => 
  array (
    0 => 'int',
  ),
  'Yar_Client_Exception::getFile' => 
  array (
    0 => 'string',
  ),
  'Yar_Client_Exception::getLine' => 
  array (
    0 => 'int',
  ),
  'Yar_Client_Exception::getMessage' => 
  array (
    0 => 'string',
  ),
  'Yar_Client_Exception::getPrevious' => 
  array (
    0 => 'Exception|Throwable|null',
  ),
  'Yar_Client_Exception::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'Yar_Client_Exception::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'Yar_Client_Exception::getType' => 
  array (
    0 => 'string',
  ),
  'Yar_Concurrent_Client::call' => 
  array (
    0 => 'int',
    'uri' => 'string',
    'method' => 'string',
    'parameters' => 'array<array-key, mixed>',
    'callback=' => 'callable',
  ),
  'Yar_Concurrent_Client::loop' => 
  array (
    0 => 'bool',
    'callback=' => 'callable',
    'error_callback=' => 'callable',
  ),
  'Yar_Concurrent_Client::reset' => 
  array (
    0 => 'bool',
  ),
  'Yar_Server::__construct' => 
  array (
    0 => 'void',
    'object' => 'object',
  ),
  'Yar_Server::handle' => 
  array (
    0 => 'bool',
  ),
  'Yar_Server_Exception::__clone' => 
  array (
    0 => 'void',
  ),
  'Yar_Server_Exception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Exception|Throwable|null',
  ),
  'Yar_Server_Exception::__toString' => 
  array (
    0 => 'string',
  ),
  'Yar_Server_Exception::__wakeup' => 
  array (
    0 => 'void',
  ),
  'Yar_Server_Exception::getCode' => 
  array (
    0 => 'int',
  ),
  'Yar_Server_Exception::getFile' => 
  array (
    0 => 'string',
  ),
  'Yar_Server_Exception::getLine' => 
  array (
    0 => 'int',
  ),
  'Yar_Server_Exception::getMessage' => 
  array (
    0 => 'string',
  ),
  'Yar_Server_Exception::getPrevious' => 
  array (
    0 => 'Exception|Throwable|null',
  ),
  'Yar_Server_Exception::getTrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'Yar_Server_Exception::getTraceAsString' => 
  array (
    0 => 'string',
  ),
  'Yar_Server_Exception::getType' => 
  array (
    0 => 'string',
  ),
  'yaz_addinfo' => 
  array (
    0 => 'string',
    'id' => 'resource',
  ),
  'yaz_ccl_conf' => 
  array (
    0 => 'void',
    'id' => 'resource',
    'config' => 'array<array-key, mixed>',
  ),
  'yaz_ccl_parse' => 
  array (
    0 => 'bool',
    'id' => 'resource',
    'query' => 'string',
    '&w_result' => 'array<array-key, mixed>',
  ),
  'yaz_close' => 
  array (
    0 => 'bool',
    'id' => 'resource',
  ),
  'yaz_connect' => 
  array (
    0 => 'mixed',
    'zurl' => 'string',
    'options=' => 'mixed',
  ),
  'yaz_database' => 
  array (
    0 => 'bool',
    'id' => 'resource',
    'databases' => 'string',
  ),
  'yaz_element' => 
  array (
    0 => 'bool',
    'id' => 'resource',
    'elementset' => 'string',
  ),
  'yaz_errno' => 
  array (
    0 => 'int',
    'id' => 'resource',
  ),
  'yaz_error' => 
  array (
    0 => 'string',
    'id' => 'resource',
  ),
  'yaz_es' => 
  array (
    0 => 'void',
    'id' => 'resource',
    'type' => 'string',
    'args' => 'array<array-key, mixed>',
  ),
  'yaz_es_result' => 
  array (
    0 => 'array<array-key, mixed>',
    'id' => 'resource',
  ),
  'yaz_get_option' => 
  array (
    0 => 'string',
    'id' => 'resource',
    'name' => 'string',
  ),
  'yaz_hits' => 
  array (
    0 => 'int',
    'id' => 'resource',
    'searchresult=' => 'array<array-key, mixed>',
  ),
  'yaz_itemorder' => 
  array (
    0 => 'void',
    'id' => 'resource',
    'args' => 'array<array-key, mixed>',
  ),
  'yaz_present' => 
  array (
    0 => 'bool',
    'id' => 'resource',
  ),
  'yaz_range' => 
  array (
    0 => 'void',
    'id' => 'resource',
    'start' => 'int',
    'number' => 'int',
  ),
  'yaz_record' => 
  array (
    0 => 'string',
    'id' => 'resource',
    'pos' => 'int',
    'type' => 'string',
  ),
  'yaz_scan' => 
  array (
    0 => 'void',
    'id' => 'resource',
    'type' => 'string',
    'startterm' => 'string',
    'flags=' => 'array<array-key, mixed>',
  ),
  'yaz_scan_result' => 
  array (
    0 => 'array<array-key, mixed>',
    'id' => 'resource',
    'result=' => 'array<array-key, mixed>',
  ),
  'yaz_schema' => 
  array (
    0 => 'void',
    'id' => 'resource',
    'schema' => 'string',
  ),
  'yaz_search' => 
  array (
    0 => 'bool',
    'id' => 'resource',
    'type' => 'string',
    'query' => 'string',
  ),
  'yaz_set_option' => 
  array (
    0 => 'mixed',
    'id' => 'mixed',
    'name' => 'string',
    'value' => 'string',
    'options' => 'array<array-key, mixed>',
  ),
  'yaz_sort' => 
  array (
    0 => 'void',
    'id' => 'resource',
    'criteria' => 'string',
  ),
  'yaz_syntax' => 
  array (
    0 => 'void',
    'id' => 'resource',
    'syntax' => 'string',
  ),
  'yaz_wait' => 
  array (
    0 => 'mixed',
    '&rw_options=' => 'array<array-key, mixed>',
  ),
  'yp_all' => 
  array (
    0 => 'void',
    'domain' => 'string',
    'map' => 'string',
    'callback' => 'string',
  ),
  'yp_cat' => 
  array (
    0 => 'array<array-key, mixed>',
    'domain' => 'string',
    'map' => 'string',
  ),
  'yp_err_string' => 
  array (
    0 => 'string',
    'errorcode' => 'int',
  ),
  'yp_errno' => 
  array (
    0 => 'int',
  ),
  'yp_first' => 
  array (
    0 => 'array<array-key, mixed>',
    'domain' => 'string',
    'map' => 'string',
  ),
  'yp_get_default_domain' => 
  array (
    0 => 'string',
  ),
  'yp_master' => 
  array (
    0 => 'string',
    'domain' => 'string',
    'map' => 'string',
  ),
  'yp_match' => 
  array (
    0 => 'string',
    'domain' => 'string',
    'map' => 'string',
    'key' => 'string',
  ),
  'yp_next' => 
  array (
    0 => 'array<array-key, mixed>',
    'domain' => 'string',
    'map' => 'string',
    'key' => 'string',
  ),
  'yp_order' => 
  array (
    0 => 'int',
    'domain' => 'string',
    'map' => 'string',
  ),
  'zem_get_extension_info_by_id' => 
  array (
    0 => 'mixed',
  ),
  'zem_get_extension_info_by_name' => 
  array (
    0 => 'mixed',
  ),
  'zem_get_extensions_info' => 
  array (
    0 => 'mixed',
  ),
  'zem_get_license_info' => 
  array (
    0 => 'mixed',
  ),
  'zend_current_obfuscation_level' => 
  array (
    0 => 'int',
  ),
  'zend_disk_cache_clear' => 
  array (
    0 => 'bool',
    'namespace=' => 'mixed|string',
  ),
  'zend_disk_cache_delete' => 
  array (
    0 => 'mixed|null',
    'key' => 'string',
  ),
  'zend_disk_cache_fetch' => 
  array (
    0 => 'mixed|null',
    'key' => 'string',
  ),
  'zend_disk_cache_store' => 
  array (
    0 => 'bool',
    'key' => 'mixed',
    'value' => 'mixed',
    'ttl=' => 'int|mixed',
  ),
  'zend_get_id' => 
  array (
    0 => 'array<array-key, mixed>',
    'all_ids=' => 'all_ids|false',
  ),
  'zend_is_configuration_changed' => 
  array (
    0 => 'mixed',
  ),
  'zend_loader_current_file' => 
  array (
    0 => 'string',
  ),
  'zend_loader_enabled' => 
  array (
    0 => 'bool',
  ),
  'zend_loader_file_encoded' => 
  array (
    0 => 'bool',
  ),
  'zend_loader_file_licensed' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'zend_loader_install_license' => 
  array (
    0 => 'bool',
    'license_file' => 'string',
    'override' => 'bool',
  ),
  'zend_logo_guid' => 
  array (
    0 => 'string',
  ),
  'zend_obfuscate_class_name' => 
  array (
    0 => 'string',
    'class_name' => 'string',
  ),
  'zend_obfuscate_function_name' => 
  array (
    0 => 'string',
    'function_name' => 'string',
  ),
  'zend_optimizer_version' => 
  array (
    0 => 'string',
  ),
  'zend_runtime_obfuscate' => 
  array (
    0 => 'void',
  ),
  'zend_send_buffer' => 
  array (
    0 => 'false|null',
    'buffer' => 'string',
    'mime_type=' => 'string',
    'custom_headers=' => 'string',
  ),
  'zend_send_file' => 
  array (
    0 => 'false|null',
    'filename' => 'string',
    'mime_type=' => 'string',
    'custom_headers=' => 'string',
  ),
  'zend_set_configuration_changed' => 
  array (
    0 => 'mixed',
  ),
  'zend_shm_cache_clear' => 
  array (
    0 => 'bool',
    'namespace=' => 'mixed|string',
  ),
  'zend_shm_cache_delete' => 
  array (
    0 => 'mixed|null',
    'key' => 'string',
  ),
  'zend_shm_cache_fetch' => 
  array (
    0 => 'mixed|null',
    'key' => 'string',
  ),
  'zend_shm_cache_store' => 
  array (
    0 => 'bool',
    'key' => 'mixed',
    'value' => 'mixed',
    'ttl=' => 'int|mixed',
  ),
  'zend_thread_id' => 
  array (
    0 => 'int',
  ),
  'zend_version' => 
  array (
    0 => 'string',
  ),
  'ZendAPI_Job::addJobToQueue' => 
  array (
    0 => 'int',
    'jobqueue_url' => 'string',
    'password' => 'string',
  ),
  'ZendAPI_Job::getApplicationID' => 
  array (
    0 => 'mixed',
  ),
  'ZendAPI_Job::getEndTime' => 
  array (
    0 => 'mixed',
  ),
  'ZendAPI_Job::getGlobalVariables' => 
  array (
    0 => 'mixed',
  ),
  'ZendAPI_Job::getHost' => 
  array (
    0 => 'mixed',
  ),
  'ZendAPI_Job::getID' => 
  array (
    0 => 'mixed',
  ),
  'ZendAPI_Job::getInterval' => 
  array (
    0 => 'mixed',
  ),
  'ZendAPI_Job::getJobDependency' => 
  array (
    0 => 'mixed',
  ),
  'ZendAPI_Job::getJobName' => 
  array (
    0 => 'mixed',
  ),
  'ZendAPI_Job::getJobPriority' => 
  array (
    0 => 'mixed',
  ),
  'ZendAPI_Job::getJobStatus' => 
  array (
    0 => 'int',
  ),
  'ZendAPI_Job::getLastPerformedStatus' => 
  array (
    0 => 'int',
  ),
  'ZendAPI_Job::getOutput' => 
  array (
    0 => 'An',
  ),
  'ZendAPI_Job::getPreserved' => 
  array (
    0 => 'mixed',
  ),
  'ZendAPI_Job::getProperties' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ZendAPI_Job::getScheduledTime' => 
  array (
    0 => 'mixed',
  ),
  'ZendAPI_Job::getScript' => 
  array (
    0 => 'mixed',
  ),
  'ZendAPI_Job::getTimeToNextRepeat' => 
  array (
    0 => 'int',
  ),
  'ZendAPI_Job::getUserVariables' => 
  array (
    0 => 'mixed',
  ),
  'ZendAPI_Job::setApplicationID' => 
  array (
    0 => 'mixed',
    'app_id' => 'mixed',
  ),
  'ZendAPI_Job::setGlobalVariables' => 
  array (
    0 => 'mixed',
    'vars' => 'mixed',
  ),
  'ZendAPI_Job::setJobDependency' => 
  array (
    0 => 'mixed',
    'job_id' => 'mixed',
  ),
  'ZendAPI_Job::setJobName' => 
  array (
    0 => 'mixed',
    'name' => 'mixed',
  ),
  'ZendAPI_Job::setJobPriority' => 
  array (
    0 => 'mixed',
    'priority' => 'int',
  ),
  'ZendAPI_Job::setPreserved' => 
  array (
    0 => 'mixed',
    'preserved' => 'mixed',
  ),
  'ZendAPI_Job::setRecurrenceData' => 
  array (
    0 => 'mixed',
    'interval' => 'mixed',
    'end_time=' => 'mixed',
  ),
  'ZendAPI_Job::setScheduledTime' => 
  array (
    0 => 'mixed',
    'timestamp' => 'mixed',
  ),
  'ZendAPI_Job::setScript' => 
  array (
    0 => 'mixed',
    'script' => 'mixed',
  ),
  'ZendAPI_Job::setUserVariables' => 
  array (
    0 => 'mixed',
    'vars' => 'mixed',
  ),
  'ZendAPI_Job::ZendAPI_Job' => 
  array (
    0 => 'Job',
    'script' => 'script',
  ),
  'ZendAPI_Queue::addJob' => 
  array (
    0 => 'int',
    '&job' => 'Job',
  ),
  'ZendAPI_Queue::getAllApplicationIDs' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ZendAPI_Queue::getAllhosts' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ZendAPI_Queue::getHistoricJobs' => 
  array (
    0 => 'array<array-key, mixed>',
    'status' => 'int',
    'start_time' => 'mixed',
    'end_time' => 'mixed',
    'index' => 'int',
    'count' => 'int',
    '&total' => 'int',
  ),
  'ZendAPI_Queue::getJob' => 
  array (
    0 => 'Job',
    'job_id' => 'int',
  ),
  'ZendAPI_Queue::getJobsInQueue' => 
  array (
    0 => 'array<array-key, mixed>',
    'filter_options=' => 'array<array-key, mixed>',
    'max_jobs=' => 'int',
    'with_globals_and_output=' => 'bool',
  ),
  'ZendAPI_Queue::getLastError' => 
  array (
    0 => 'string',
  ),
  'ZendAPI_Queue::getNumOfJobsInQueue' => 
  array (
    0 => 'int',
    'filter_options=' => 'array<array-key, mixed>',
  ),
  'ZendAPI_Queue::getStatistics' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ZendAPI_Queue::isScriptExists' => 
  array (
    0 => 'bool',
    'path' => 'string',
  ),
  'ZendAPI_Queue::isSuspend' => 
  array (
    0 => 'bool',
  ),
  'ZendAPI_Queue::login' => 
  array (
    0 => 'bool',
    'password' => 'string',
    'application_id=' => 'int',
  ),
  'ZendAPI_Queue::removeJob' => 
  array (
    0 => 'bool',
    'job_id' => 'array<array-key, mixed>|int',
  ),
  'ZendAPI_Queue::requeueJob' => 
  array (
    0 => 'bool',
    'job' => 'Job',
  ),
  'ZendAPI_Queue::resumeJob' => 
  array (
    0 => 'bool',
    'job_id' => 'array<array-key, mixed>|int',
  ),
  'ZendAPI_Queue::resumeQueue' => 
  array (
    0 => 'bool',
  ),
  'ZendAPI_Queue::setMaxHistoryTime' => 
  array (
    0 => 'bool',
  ),
  'ZendAPI_Queue::suspendJob' => 
  array (
    0 => 'bool',
    'job_id' => 'array<array-key, mixed>|int',
  ),
  'ZendAPI_Queue::suspendQueue' => 
  array (
    0 => 'bool',
  ),
  'ZendAPI_Queue::updateJob' => 
  array (
    0 => 'int',
    '&job' => 'Job',
  ),
  'ZendAPI_Queue::zendapi_queue' => 
  array (
    0 => 'ZendAPI_Queue',
    'queue_url' => 'string',
  ),
  'zip_close' => 
  array (
    0 => 'void',
    'zip' => 'resource',
  ),
  'zip_entry_close' => 
  array (
    0 => 'bool',
    'zip_entry' => 'resource',
  ),
  'zip_entry_compressedsize' => 
  array (
    0 => 'int',
    'zip_entry' => 'resource',
  ),
  'zip_entry_compressionmethod' => 
  array (
    0 => 'string',
    'zip_entry' => 'resource',
  ),
  'zip_entry_filesize' => 
  array (
    0 => 'int',
    'zip_entry' => 'resource',
  ),
  'zip_entry_name' => 
  array (
    0 => 'false|string',
    'zip_entry' => 'resource',
  ),
  'zip_entry_open' => 
  array (
    0 => 'bool',
    'zip_dp' => 'resource',
    'zip_entry' => 'resource',
    'mode=' => 'string',
  ),
  'zip_entry_read' => 
  array (
    0 => 'false|string',
    'zip_entry' => 'resource',
    'len=' => 'int',
  ),
  'zip_open' => 
  array (
    0 => 'false|int|resource',
    'filename' => 'string',
  ),
  'zip_read' => 
  array (
    0 => 'resource',
    'zip' => 'resource',
  ),
  'ZipArchive::addEmptyDir' => 
  array (
    0 => 'bool',
    'dirname' => 'string',
    'flags=' => 'int',
  ),
  'ZipArchive::addFile' => 
  array (
    0 => 'bool',
    'filepath' => 'string',
    'entryname=' => 'string',
    'start=' => 'int',
    'length=' => 'int',
    'flags=' => 'int',
  ),
  'ZipArchive::addFromString' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'content' => 'string',
    'flags=' => 'int',
  ),
  'ZipArchive::addGlob' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'pattern' => 'string',
    'flags=' => 'int',
    'options=' => 'array<array-key, mixed>',
  ),
  'ZipArchive::addPattern' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'pattern' => 'string',
    'path=' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'ZipArchive::clearError' => 
  array (
    0 => 'void',
  ),
  'ZipArchive::close' => 
  array (
    0 => 'bool',
  ),
  'ZipArchive::count' => 
  array (
    0 => 'int',
  ),
  'ZipArchive::deleteIndex' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'ZipArchive::deleteName' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'ZipArchive::extractTo' => 
  array (
    0 => 'bool',
    'pathto' => 'string',
    'files=' => 'array<array-key, string>|null|string',
  ),
  'ZipArchive::getArchiveComment' => 
  array (
    0 => 'false|string',
    'flags=' => 'int',
  ),
  'ZipArchive::getCommentIndex' => 
  array (
    0 => 'false|string',
    'index' => 'int',
    'flags=' => 'int',
  ),
  'ZipArchive::getCommentName' => 
  array (
    0 => 'false|string',
    'name' => 'string',
    'flags=' => 'int',
  ),
  'ZipArchive::getExternalAttributesIndex' => 
  array (
    0 => 'bool',
    'index' => 'int',
    '&w_opsys' => 'int',
    '&w_attr' => 'int',
    'flags=' => 'int',
  ),
  'ZipArchive::getExternalAttributesName' => 
  array (
    0 => 'bool',
    'name' => 'string',
    '&w_opsys' => 'int',
    '&w_attr' => 'int',
    'flags=' => 'int',
  ),
  'ZipArchive::getFromIndex' => 
  array (
    0 => 'false|string',
    'index' => 'int',
    'len=' => 'int',
    'flags=' => 'int',
  ),
  'ZipArchive::getFromName' => 
  array (
    0 => 'false|string',
    'name' => 'string',
    'len=' => 'int',
    'flags=' => 'int',
  ),
  'ZipArchive::getNameIndex' => 
  array (
    0 => 'false|string',
    'index' => 'int',
    'flags=' => 'int',
  ),
  'ZipArchive::getStatusString' => 
  array (
    0 => 'string',
  ),
  'ZipArchive::getStream' => 
  array (
    0 => 'false|resource',
    'name' => 'string',
  ),
  'ZipArchive::getStreamIndex' => 
  array (
    0 => 'false|resource',
    'index' => 'int',
    'flags=' => 'int',
  ),
  'ZipArchive::getStreamName' => 
  array (
    0 => 'false|resource',
    'name' => 'string',
    'flags=' => 'int',
  ),
  'ZipArchive::isCompressionMethodSupported' => 
  array (
    0 => 'bool',
    'method' => 'int',
    'enc=' => 'bool',
  ),
  'ZipArchive::isEncryptionMethodSupported' => 
  array (
    0 => 'bool',
    'method' => 'int',
    'enc=' => 'bool',
  ),
  'ZipArchive::locateName' => 
  array (
    0 => 'false|int',
    'name' => 'string',
    'flags=' => 'int',
  ),
  'ZipArchive::open' => 
  array (
    0 => 'bool|int',
    'filename' => 'string',
    'flags=' => 'int',
  ),
  'ZipArchive::registerCancelCallback' => 
  array (
    0 => 'bool',
    'callback' => 'callable',
  ),
  'ZipArchive::registerProgressCallback' => 
  array (
    0 => 'bool',
    'rate' => 'float',
    'callback' => 'callable',
  ),
  'ZipArchive::renameIndex' => 
  array (
    0 => 'bool',
    'index' => 'int',
    'new_name' => 'string',
  ),
  'ZipArchive::renameName' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'new_name' => 'string',
  ),
  'ZipArchive::replaceFile' => 
  array (
    0 => 'bool',
    'filepath' => 'string',
    'index' => 'int',
    'start=' => 'int',
    'length=' => 'int',
    'flags=' => 'int',
  ),
  'ZipArchive::setArchiveComment' => 
  array (
    0 => 'bool',
    'comment' => 'string',
  ),
  'ZipArchive::setCommentIndex' => 
  array (
    0 => 'bool',
    'index' => 'int',
    'comment' => 'string',
  ),
  'ZipArchive::setCommentName' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'comment' => 'string',
  ),
  'ZipArchive::setCompressionIndex' => 
  array (
    0 => 'bool',
    'index' => 'int',
    'method' => 'int',
    'compflags=' => 'int',
  ),
  'ZipArchive::setCompressionName' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'method' => 'int',
    'compflags=' => 'int',
  ),
  'ZipArchive::setEncryptionIndex' => 
  array (
    0 => 'bool',
    'index' => 'int',
    'method' => 'int',
    'password=' => 'null|string',
  ),
  'ZipArchive::setEncryptionName' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'method' => 'int',
    'password=' => 'null|string',
  ),
  'ZipArchive::setExternalAttributesIndex' => 
  array (
    0 => 'bool',
    'index' => 'int',
    'opsys' => 'int',
    'attr' => 'int',
    'flags=' => 'int',
  ),
  'ZipArchive::setExternalAttributesName' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'opsys' => 'int',
    'attr' => 'int',
    'flags=' => 'int',
  ),
  'ZipArchive::setMtimeIndex' => 
  array (
    0 => 'bool',
    'index' => 'int',
    'timestamp' => 'int',
    'flags=' => 'int',
  ),
  'ZipArchive::setMtimeName' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'timestamp' => 'int',
    'flags=' => 'int',
  ),
  'ZipArchive::setPassword' => 
  array (
    0 => 'bool',
    'password' => 'string',
  ),
  'ZipArchive::statIndex' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'index' => 'int',
    'flags=' => 'int',
  ),
  'ZipArchive::statName' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'name' => 'string',
    'flags=' => 'int',
  ),
  'ZipArchive::unchangeAll' => 
  array (
    0 => 'bool',
  ),
  'ZipArchive::unchangeArchive' => 
  array (
    0 => 'bool',
  ),
  'ZipArchive::unchangeIndex' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'ZipArchive::unchangeName' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'zlib_decode' => 
  array (
    0 => 'false|string',
    'data' => 'string',
    'max_length=' => 'int',
  ),
  'zlib_encode' => 
  array (
    0 => 'false|string',
    'data' => 'string',
    'encoding' => 'int',
    'level=' => 'int',
  ),
  'zlib_get_coding_type' => 
  array (
    0 => 'false|string',
  ),
  'ZMQ::__construct' => 
  array (
    0 => 'void',
  ),
  'ZMQContext::__construct' => 
  array (
    0 => 'void',
    'io_threads=' => 'int',
    'is_persistent=' => 'bool',
  ),
  'ZMQContext::getOpt' => 
  array (
    0 => 'int|string',
    'key' => 'string',
  ),
  'ZMQContext::getSocket' => 
  array (
    0 => 'ZMQSocket',
    'type' => 'int',
    'persistent_id=' => 'string',
    'on_new_socket=' => 'callable',
  ),
  'ZMQContext::isPersistent' => 
  array (
    0 => 'bool',
  ),
  'ZMQContext::setOpt' => 
  array (
    0 => 'ZMQContext',
    'key' => 'int',
    'value' => 'mixed',
  ),
  'ZMQDevice::__construct' => 
  array (
    0 => 'void',
    'frontend' => 'ZMQSocket',
    'backend' => 'ZMQSocket',
    'listener=' => 'ZMQSocket',
  ),
  'ZMQDevice::getIdleTimeout' => 
  array (
    0 => 'ZMQDevice',
  ),
  'ZMQDevice::getTimerTimeout' => 
  array (
    0 => 'ZMQDevice',
  ),
  'ZMQDevice::run' => 
  array (
    0 => 'void',
  ),
  'ZMQDevice::setIdleCallback' => 
  array (
    0 => 'ZMQDevice',
    'cb_func' => 'callable',
    'timeout' => 'int',
    'user_data=' => 'mixed',
  ),
  'ZMQDevice::setIdleTimeout' => 
  array (
    0 => 'ZMQDevice',
    'timeout' => 'int',
  ),
  'ZMQDevice::setTimerCallback' => 
  array (
    0 => 'ZMQDevice',
    'cb_func' => 'callable',
    'timeout' => 'int',
    'user_data=' => 'mixed',
  ),
  'ZMQDevice::setTimerTimeout' => 
  array (
    0 => 'ZMQDevice',
    'timeout' => 'int',
  ),
  'ZMQPoll::add' => 
  array (
    0 => 'string',
    'entry' => 'mixed',
    'type' => 'int',
  ),
  'ZMQPoll::clear' => 
  array (
    0 => 'ZMQPoll',
  ),
  'ZMQPoll::count' => 
  array (
    0 => 'int',
  ),
  'ZMQPoll::getLastErrors' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ZMQPoll::poll' => 
  array (
    0 => 'int',
    '&w_readable' => 'array<array-key, mixed>',
    '&w_writable' => 'array<array-key, mixed>',
    'timeout=' => 'int',
  ),
  'ZMQPoll::remove' => 
  array (
    0 => 'bool',
    'item' => 'mixed',
  ),
  'ZMQSocket::__construct' => 
  array (
    0 => 'void',
    'context' => 'ZMQContext',
    'type' => 'int',
    'persistent_id=' => 'string',
    'on_new_socket=' => 'callable',
  ),
  'ZMQSocket::bind' => 
  array (
    0 => 'ZMQSocket',
    'dsn' => 'string',
    'force=' => 'bool',
  ),
  'ZMQSocket::connect' => 
  array (
    0 => 'ZMQSocket',
    'dsn' => 'string',
    'force=' => 'bool',
  ),
  'ZMQSocket::disconnect' => 
  array (
    0 => 'ZMQSocket',
    'dsn' => 'string',
  ),
  'ZMQSocket::getEndpoints' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ZMQSocket::getPersistentId' => 
  array (
    0 => 'null|string',
  ),
  'ZMQSocket::getSocketType' => 
  array (
    0 => 'int',
  ),
  'ZMQSocket::getSockOpt' => 
  array (
    0 => 'int|string',
    'key' => 'string',
  ),
  'ZMQSocket::isPersistent' => 
  array (
    0 => 'bool',
  ),
  'ZMQSocket::recv' => 
  array (
    0 => 'string',
    'mode=' => 'int',
  ),
  'ZMQSocket::recvMulti' => 
  array (
    0 => 'array<array-key, string>',
    'mode=' => 'int',
  ),
  'ZMQSocket::send' => 
  array (
    0 => 'ZMQSocket',
    'message' => 'array<array-key, mixed>',
    'mode=' => 'int',
  ),
  'ZMQSocket::send\'1' => 
  array (
    0 => 'ZMQSocket',
    'message' => 'string',
    'mode=' => 'int',
  ),
  'ZMQSocket::sendmulti' => 
  array (
    0 => 'ZMQSocket',
    'message' => 'array<array-key, mixed>',
    'mode=' => 'int',
  ),
  'ZMQSocket::setSockOpt' => 
  array (
    0 => 'ZMQSocket',
    'key' => 'int',
    'value' => 'mixed',
  ),
  'ZMQSocket::unbind' => 
  array (
    0 => 'ZMQSocket',
    'dsn' => 'string',
  ),
  'Zookeeper::addAuth' => 
  array (
    0 => 'bool',
    'scheme' => 'string',
    'cert' => 'string',
    'completion_cb=' => 'callable',
  ),
  'Zookeeper::close' => 
  array (
    0 => 'void',
  ),
  'Zookeeper::connect' => 
  array (
    0 => 'void',
    'host' => 'string',
    'watcher_cb=' => 'callable',
    'recv_timeout=' => 'int',
  ),
  'Zookeeper::create' => 
  array (
    0 => 'string',
    'path' => 'string',
    'value' => 'string',
    'acls' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'Zookeeper::delete' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'version=' => 'int',
  ),
  'Zookeeper::exists' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'watcher_cb=' => 'callable',
  ),
  'Zookeeper::get' => 
  array (
    0 => 'string',
    'path' => 'string',
    'watcher_cb=' => 'callable',
    'stat=' => 'array<array-key, mixed>',
    'max_size=' => 'int',
  ),
  'Zookeeper::getAcl' => 
  array (
    0 => 'array<array-key, mixed>',
    'path' => 'string',
  ),
  'Zookeeper::getChildren' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'path' => 'string',
    'watcher_cb=' => 'callable',
  ),
  'Zookeeper::getClientId' => 
  array (
    0 => 'int',
  ),
  'Zookeeper::getConfig' => 
  array (
    0 => 'ZookeeperConfig',
  ),
  'Zookeeper::getRecvTimeout' => 
  array (
    0 => 'int',
  ),
  'Zookeeper::getState' => 
  array (
    0 => 'int',
  ),
  'Zookeeper::isRecoverable' => 
  array (
    0 => 'bool',
  ),
  'Zookeeper::set' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'value' => 'string',
    'version=' => 'int',
    'stat=' => 'array<array-key, mixed>',
  ),
  'Zookeeper::setAcl' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'version' => 'int',
    'acl' => 'array<array-key, mixed>',
  ),
  'Zookeeper::setDebugLevel' => 
  array (
    0 => 'bool',
    'logLevel' => 'int',
  ),
  'Zookeeper::setDeterministicConnOrder' => 
  array (
    0 => 'bool',
    'yesOrNo' => 'bool',
  ),
  'Zookeeper::setLogStream' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
  ),
  'Zookeeper::setWatcher' => 
  array (
    0 => 'bool',
    'watcher_cb' => 'callable',
  ),
  'zookeeper_dispatch' => 
  array (
    0 => 'void',
  ),
  'ZookeeperConfig::add' => 
  array (
    0 => 'void',
    'members' => 'string',
    'version=' => 'int',
    'stat=' => 'array<array-key, mixed>',
  ),
  'ZookeeperConfig::get' => 
  array (
    0 => 'string',
    'watcher_cb=' => 'callable',
    'stat=' => 'array<array-key, mixed>',
  ),
  'ZookeeperConfig::remove' => 
  array (
    0 => 'void',
    'id_list' => 'string',
    'version=' => 'int',
    'stat=' => 'array<array-key, mixed>',
  ),
  'ZookeeperConfig::set' => 
  array (
    0 => 'void',
    'members' => 'string',
    'version=' => 'int',
    'stat=' => 'array<array-key, mixed>',
  ),
);