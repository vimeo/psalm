<?php // phpcs:ignoreFile

return array (
  '_' => 
  array (
    0 => 'string',
    'message' => 'string',
  ),
  '__halt_compiler' => 
  array (
    0 => 'void',
  ),
  '_array' => 
  array (
    0 => 'Swoole\\ArrayObject',
    'array=' => 'array<array-key, mixed>',
  ),
  '_mbstring' => 
  array (
    0 => 'Swoole\\MultibyteStringObject',
    'string=' => 'string',
  ),
  '_string' => 
  array (
    0 => 'Swoole\\StringObject',
    'string=' => 'string',
  ),
  'abs' => 
  array (
    0 => 'int<0, max>',
    'num' => 'int',
  ),
  'abs\'1' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'abs\'2' => 
  array (
    0 => 'numeric',
    'num' => 'numeric',
  ),
  'accelerator_get_configuration' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'accelerator_get_scripts' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'accelerator_get_status' => 
  array (
    0 => 'array<array-key, mixed>',
    'fetch_scripts' => 'bool',
  ),
  'accelerator_reset' => 
  array (
    0 => 'mixed',
  ),
  'accelerator_set_status' => 
  array (
    0 => 'void',
    'status' => 'bool',
  ),
  'acos' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'acosh' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'addcslashes' => 
  array (
    0 => 'string',
    'string' => 'string',
    'characters' => 'string',
  ),
  'addslashes' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'amqpbasicproperties::__construct' => 
  array (
    0 => 'void',
    'contentType=' => 'null|string',
    'contentEncoding=' => 'null|string',
    'headers=' => 'array<array-key, mixed>',
    'deliveryMode=' => 'int',
    'priority=' => 'int',
    'correlationId=' => 'null|string',
    'replyTo=' => 'null|string',
    'expiration=' => 'null|string',
    'messageId=' => 'null|string',
    'timestamp=' => 'int|null',
    'type=' => 'null|string',
    'userId=' => 'null|string',
    'appId=' => 'null|string',
    'clusterId=' => 'null|string',
  ),
  'amqpbasicproperties::getappid' => 
  array (
    0 => 'null|string',
  ),
  'amqpbasicproperties::getclusterid' => 
  array (
    0 => 'null|string',
  ),
  'amqpbasicproperties::getcontentencoding' => 
  array (
    0 => 'null|string',
  ),
  'amqpbasicproperties::getcontenttype' => 
  array (
    0 => 'null|string',
  ),
  'amqpbasicproperties::getcorrelationid' => 
  array (
    0 => 'null|string',
  ),
  'amqpbasicproperties::getdeliverymode' => 
  array (
    0 => 'int',
  ),
  'amqpbasicproperties::getexpiration' => 
  array (
    0 => 'null|string',
  ),
  'amqpbasicproperties::getheaders' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'amqpbasicproperties::getmessageid' => 
  array (
    0 => 'null|string',
  ),
  'amqpbasicproperties::getpriority' => 
  array (
    0 => 'int',
  ),
  'amqpbasicproperties::getreplyto' => 
  array (
    0 => 'null|string',
  ),
  'amqpbasicproperties::gettimestamp' => 
  array (
    0 => 'int|null',
  ),
  'amqpbasicproperties::gettype' => 
  array (
    0 => 'null|string',
  ),
  'amqpbasicproperties::getuserid' => 
  array (
    0 => 'null|string',
  ),
  'amqpchannel::__construct' => 
  array (
    0 => 'void',
    'connection' => 'AMQPConnection',
  ),
  'amqpchannel::basicrecover' => 
  array (
    0 => 'void',
    'requeue=' => 'bool',
  ),
  'amqpchannel::close' => 
  array (
    0 => 'void',
  ),
  'amqpchannel::committransaction' => 
  array (
    0 => 'void',
  ),
  'amqpchannel::confirmselect' => 
  array (
    0 => 'void',
  ),
  'amqpchannel::getchannelid' => 
  array (
    0 => 'int',
  ),
  'amqpchannel::getconnection' => 
  array (
    0 => 'AMQPConnection',
  ),
  'amqpchannel::getconsumers' => 
  array (
    0 => 'array<array-key, AMQPQueue>',
  ),
  'amqpchannel::getglobalprefetchcount' => 
  array (
    0 => 'int',
  ),
  'amqpchannel::getglobalprefetchsize' => 
  array (
    0 => 'int',
  ),
  'amqpchannel::getprefetchcount' => 
  array (
    0 => 'int',
  ),
  'amqpchannel::getprefetchsize' => 
  array (
    0 => 'int',
  ),
  'amqpchannel::isconnected' => 
  array (
    0 => 'bool',
  ),
  'amqpchannel::qos' => 
  array (
    0 => 'void',
    'size' => 'int',
    'count' => 'int',
    'global=' => 'bool',
  ),
  'amqpchannel::rollbacktransaction' => 
  array (
    0 => 'void',
  ),
  'amqpchannel::setconfirmcallback' => 
  array (
    0 => 'void',
    'ackCallback' => 'callable|null',
    'nackCallback=' => 'callable|null',
  ),
  'amqpchannel::setglobalprefetchcount' => 
  array (
    0 => 'void',
    'count' => 'int',
  ),
  'amqpchannel::setglobalprefetchsize' => 
  array (
    0 => 'void',
    'size' => 'int',
  ),
  'amqpchannel::setprefetchcount' => 
  array (
    0 => 'void',
    'count' => 'int',
  ),
  'amqpchannel::setprefetchsize' => 
  array (
    0 => 'void',
    'size' => 'int',
  ),
  'amqpchannel::setreturncallback' => 
  array (
    0 => 'void',
    'returnCallback' => 'callable|null',
  ),
  'amqpchannel::starttransaction' => 
  array (
    0 => 'void',
  ),
  'amqpchannel::waitforbasicreturn' => 
  array (
    0 => 'void',
    'timeout=' => 'float',
  ),
  'amqpchannel::waitforconfirm' => 
  array (
    0 => 'void',
    'timeout=' => 'float',
  ),
  'amqpchannelexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'amqpchannelexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'amqpchannelexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'amqpchannelexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'amqpchannelexception::getfile' => 
  array (
    0 => 'string',
  ),
  'amqpchannelexception::getline' => 
  array (
    0 => 'int',
  ),
  'amqpchannelexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'amqpchannelexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'amqpchannelexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'amqpchannelexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'amqpconnection::__construct' => 
  array (
    0 => 'void',
    'credentials=' => 'array<array-key, mixed>',
  ),
  'amqpconnection::connect' => 
  array (
    0 => 'void',
  ),
  'amqpconnection::disconnect' => 
  array (
    0 => 'void',
  ),
  'amqpconnection::getcacert' => 
  array (
    0 => 'null|string',
  ),
  'amqpconnection::getcert' => 
  array (
    0 => 'null|string',
  ),
  'amqpconnection::getconnectionname' => 
  array (
    0 => 'null|string',
  ),
  'amqpconnection::getconnecttimeout' => 
  array (
    0 => 'float',
  ),
  'amqpconnection::getheartbeatinterval' => 
  array (
    0 => 'int',
  ),
  'amqpconnection::gethost' => 
  array (
    0 => 'string',
  ),
  'amqpconnection::getkey' => 
  array (
    0 => 'null|string',
  ),
  'amqpconnection::getlogin' => 
  array (
    0 => 'string',
  ),
  'amqpconnection::getmaxchannels' => 
  array (
    0 => 'int',
  ),
  'amqpconnection::getmaxframesize' => 
  array (
    0 => 'int',
  ),
  'amqpconnection::getpassword' => 
  array (
    0 => 'string',
  ),
  'amqpconnection::getport' => 
  array (
    0 => 'int',
  ),
  'amqpconnection::getreadtimeout' => 
  array (
    0 => 'float',
  ),
  'amqpconnection::getrpctimeout' => 
  array (
    0 => 'float',
  ),
  'amqpconnection::getsaslmethod' => 
  array (
    0 => 'int',
  ),
  'amqpconnection::gettimeout' => 
  array (
    0 => 'float',
  ),
  'amqpconnection::getusedchannels' => 
  array (
    0 => 'int',
  ),
  'amqpconnection::getverify' => 
  array (
    0 => 'bool',
  ),
  'amqpconnection::getvhost' => 
  array (
    0 => 'string',
  ),
  'amqpconnection::getwritetimeout' => 
  array (
    0 => 'float',
  ),
  'amqpconnection::isconnected' => 
  array (
    0 => 'bool',
  ),
  'amqpconnection::ispersistent' => 
  array (
    0 => 'bool',
  ),
  'amqpconnection::pconnect' => 
  array (
    0 => 'void',
  ),
  'amqpconnection::pdisconnect' => 
  array (
    0 => 'void',
  ),
  'amqpconnection::preconnect' => 
  array (
    0 => 'void',
  ),
  'amqpconnection::reconnect' => 
  array (
    0 => 'void',
  ),
  'amqpconnection::setcacert' => 
  array (
    0 => 'void',
    'cacert' => 'null|string',
  ),
  'amqpconnection::setcert' => 
  array (
    0 => 'void',
    'cert' => 'null|string',
  ),
  'amqpconnection::setconnectionname' => 
  array (
    0 => 'void',
    'connectionName' => 'null|string',
  ),
  'amqpconnection::sethost' => 
  array (
    0 => 'void',
    'host' => 'string',
  ),
  'amqpconnection::setkey' => 
  array (
    0 => 'void',
    'key' => 'null|string',
  ),
  'amqpconnection::setlogin' => 
  array (
    0 => 'void',
    'login' => 'string',
  ),
  'amqpconnection::setpassword' => 
  array (
    0 => 'void',
    'password' => 'string',
  ),
  'amqpconnection::setport' => 
  array (
    0 => 'void',
    'port' => 'int',
  ),
  'amqpconnection::setreadtimeout' => 
  array (
    0 => 'void',
    'timeout' => 'float',
  ),
  'amqpconnection::setrpctimeout' => 
  array (
    0 => 'void',
    'timeout' => 'float',
  ),
  'amqpconnection::setsaslmethod' => 
  array (
    0 => 'void',
    'saslMethod' => 'int',
  ),
  'amqpconnection::settimeout' => 
  array (
    0 => 'void',
    'timeout' => 'float',
  ),
  'amqpconnection::setverify' => 
  array (
    0 => 'void',
    'verify' => 'bool',
  ),
  'amqpconnection::setvhost' => 
  array (
    0 => 'void',
    'vhost' => 'string',
  ),
  'amqpconnection::setwritetimeout' => 
  array (
    0 => 'void',
    'timeout' => 'float',
  ),
  'amqpconnectionexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'amqpconnectionexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'amqpconnectionexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'amqpconnectionexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'amqpconnectionexception::getfile' => 
  array (
    0 => 'string',
  ),
  'amqpconnectionexception::getline' => 
  array (
    0 => 'int',
  ),
  'amqpconnectionexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'amqpconnectionexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'amqpconnectionexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'amqpconnectionexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'amqpdecimal::__construct' => 
  array (
    0 => 'void',
    'exponent' => 'int',
    'significand' => 'int',
  ),
  'amqpdecimal::getexponent' => 
  array (
    0 => 'int',
  ),
  'amqpdecimal::getsignificand' => 
  array (
    0 => 'int',
  ),
  'amqpdecimal::toamqpvalue' => 
  array (
    0 => 'mixed',
  ),
  'amqpenvelope::__construct' => 
  array (
    0 => 'void',
  ),
  'amqpenvelope::getappid' => 
  array (
    0 => 'null|string',
  ),
  'amqpenvelope::getbody' => 
  array (
    0 => 'string',
  ),
  'amqpenvelope::getclusterid' => 
  array (
    0 => 'null|string',
  ),
  'amqpenvelope::getconsumertag' => 
  array (
    0 => 'null|string',
  ),
  'amqpenvelope::getcontentencoding' => 
  array (
    0 => 'null|string',
  ),
  'amqpenvelope::getcontenttype' => 
  array (
    0 => 'null|string',
  ),
  'amqpenvelope::getcorrelationid' => 
  array (
    0 => 'null|string',
  ),
  'amqpenvelope::getdeliverymode' => 
  array (
    0 => 'int',
  ),
  'amqpenvelope::getdeliverytag' => 
  array (
    0 => 'int|null',
  ),
  'amqpenvelope::getexchangename' => 
  array (
    0 => 'null|string',
  ),
  'amqpenvelope::getexpiration' => 
  array (
    0 => 'null|string',
  ),
  'amqpenvelope::getheader' => 
  array (
    0 => 'false|string',
    'headerName' => 'string',
  ),
  'amqpenvelope::getheaders' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'amqpenvelope::getmessageid' => 
  array (
    0 => 'null|string',
  ),
  'amqpenvelope::getpriority' => 
  array (
    0 => 'int',
  ),
  'amqpenvelope::getreplyto' => 
  array (
    0 => 'null|string',
  ),
  'amqpenvelope::getroutingkey' => 
  array (
    0 => 'string',
  ),
  'amqpenvelope::gettimestamp' => 
  array (
    0 => 'int|null',
  ),
  'amqpenvelope::gettype' => 
  array (
    0 => 'null|string',
  ),
  'amqpenvelope::getuserid' => 
  array (
    0 => 'null|string',
  ),
  'amqpenvelope::hasheader' => 
  array (
    0 => 'bool',
    'headerName' => 'string',
  ),
  'amqpenvelope::isredelivery' => 
  array (
    0 => 'bool',
  ),
  'amqpenvelopeexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'amqpenvelopeexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'amqpenvelopeexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'amqpenvelopeexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'amqpenvelopeexception::getenvelope' => 
  array (
    0 => 'AMQPEnvelope',
  ),
  'amqpenvelopeexception::getfile' => 
  array (
    0 => 'string',
  ),
  'amqpenvelopeexception::getline' => 
  array (
    0 => 'int',
  ),
  'amqpenvelopeexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'amqpenvelopeexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'amqpenvelopeexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'amqpenvelopeexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'amqpexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'amqpexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'amqpexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'amqpexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'amqpexception::getfile' => 
  array (
    0 => 'string',
  ),
  'amqpexception::getline' => 
  array (
    0 => 'int',
  ),
  'amqpexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'amqpexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'amqpexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'amqpexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'amqpexchange::__construct' => 
  array (
    0 => 'void',
    'channel' => 'AMQPChannel',
  ),
  'amqpexchange::bind' => 
  array (
    0 => 'void',
    'exchangeName' => 'string',
    'routingKey=' => 'null|string',
    'arguments=' => 'array<array-key, mixed>',
  ),
  'amqpexchange::declare' => 
  array (
    0 => 'void',
  ),
  'amqpexchange::declareexchange' => 
  array (
    0 => 'void',
  ),
  'amqpexchange::delete' => 
  array (
    0 => 'void',
    'exchangeName=' => 'null|string',
    'flags=' => 'int|null',
  ),
  'amqpexchange::getargument' => 
  array (
    0 => 'false|int|string',
    'argumentName' => 'string',
  ),
  'amqpexchange::getarguments' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'amqpexchange::getchannel' => 
  array (
    0 => 'AMQPChannel',
  ),
  'amqpexchange::getconnection' => 
  array (
    0 => 'AMQPConnection',
  ),
  'amqpexchange::getflags' => 
  array (
    0 => 'int',
  ),
  'amqpexchange::getname' => 
  array (
    0 => 'null|string',
  ),
  'amqpexchange::gettype' => 
  array (
    0 => 'null|string',
  ),
  'amqpexchange::hasargument' => 
  array (
    0 => 'bool',
    'argumentName' => 'string',
  ),
  'amqpexchange::publish' => 
  array (
    0 => 'void',
    'message' => 'string',
    'routingKey=' => 'null|string',
    'flags=' => 'int|null',
    'headers=' => 'array<array-key, mixed>',
  ),
  'amqpexchange::removeargument' => 
  array (
    0 => 'void',
    'argumentName' => 'string',
  ),
  'amqpexchange::setargument' => 
  array (
    0 => 'void',
    'argumentName' => 'string',
    'argumentValue' => 'int|string',
  ),
  'amqpexchange::setarguments' => 
  array (
    0 => 'void',
    'arguments' => 'array<array-key, mixed>',
  ),
  'amqpexchange::setflags' => 
  array (
    0 => 'void',
    'flags' => 'int|null',
  ),
  'amqpexchange::setname' => 
  array (
    0 => 'void',
    'exchangeName' => 'null|string',
  ),
  'amqpexchange::settype' => 
  array (
    0 => 'void',
    'exchangeType' => 'null|string',
  ),
  'amqpexchange::unbind' => 
  array (
    0 => 'void',
    'exchangeName' => 'string',
    'routingKey=' => 'null|string',
    'arguments=' => 'array<array-key, mixed>',
  ),
  'amqpexchangeexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'amqpexchangeexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'amqpexchangeexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'amqpexchangeexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'amqpexchangeexception::getfile' => 
  array (
    0 => 'string',
  ),
  'amqpexchangeexception::getline' => 
  array (
    0 => 'int',
  ),
  'amqpexchangeexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'amqpexchangeexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'amqpexchangeexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'amqpexchangeexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'amqpqueue::__construct' => 
  array (
    0 => 'void',
    'channel' => 'AMQPChannel',
  ),
  'amqpqueue::ack' => 
  array (
    0 => 'void',
    'deliveryTag' => 'int',
    'flags=' => 'int|null',
  ),
  'amqpqueue::bind' => 
  array (
    0 => 'void',
    'exchangeName' => 'string',
    'routingKey=' => 'null|string',
    'arguments=' => 'array<array-key, mixed>',
  ),
  'amqpqueue::cancel' => 
  array (
    0 => 'void',
    'consumerTag=' => 'string',
  ),
  'amqpqueue::consume' => 
  array (
    0 => 'void',
    'callback=' => 'callable|null',
    'flags=' => 'int|null',
    'consumerTag=' => 'null|string',
  ),
  'amqpqueue::declare' => 
  array (
    0 => 'int',
  ),
  'amqpqueue::declarequeue' => 
  array (
    0 => 'int',
  ),
  'amqpqueue::delete' => 
  array (
    0 => 'int',
    'flags=' => 'int|null',
  ),
  'amqpqueue::get' => 
  array (
    0 => 'AMQPEnvelope|null',
    'flags=' => 'int|null',
  ),
  'amqpqueue::getargument' => 
  array (
    0 => 'false|int|string',
    'argumentName' => 'string',
  ),
  'amqpqueue::getarguments' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'amqpqueue::getchannel' => 
  array (
    0 => 'AMQPChannel',
  ),
  'amqpqueue::getconnection' => 
  array (
    0 => 'AMQPConnection',
  ),
  'amqpqueue::getconsumertag' => 
  array (
    0 => 'null|string',
  ),
  'amqpqueue::getflags' => 
  array (
    0 => 'int',
  ),
  'amqpqueue::getname' => 
  array (
    0 => 'null|string',
  ),
  'amqpqueue::hasargument' => 
  array (
    0 => 'bool',
    'argumentName' => 'string',
  ),
  'amqpqueue::nack' => 
  array (
    0 => 'void',
    'deliveryTag' => 'int',
    'flags=' => 'int|null',
  ),
  'amqpqueue::purge' => 
  array (
    0 => 'int',
  ),
  'amqpqueue::recover' => 
  array (
    0 => 'void',
    'requeue=' => 'bool',
  ),
  'amqpqueue::reject' => 
  array (
    0 => 'void',
    'deliveryTag' => 'int',
    'flags=' => 'int|null',
  ),
  'amqpqueue::removeargument' => 
  array (
    0 => 'void',
    'argumentName' => 'string',
  ),
  'amqpqueue::setargument' => 
  array (
    0 => 'void',
    'argumentName' => 'string',
    'argumentValue' => 'mixed',
  ),
  'amqpqueue::setarguments' => 
  array (
    0 => 'void',
    'arguments' => 'array<array-key, mixed>',
  ),
  'amqpqueue::setflags' => 
  array (
    0 => 'void',
    'flags' => 'int|null',
  ),
  'amqpqueue::setname' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'amqpqueue::unbind' => 
  array (
    0 => 'void',
    'exchangeName' => 'string',
    'routingKey=' => 'null|string',
    'arguments=' => 'array<array-key, mixed>',
  ),
  'amqpqueueexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'amqpqueueexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'amqpqueueexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'amqpqueueexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'amqpqueueexception::getfile' => 
  array (
    0 => 'string',
  ),
  'amqpqueueexception::getline' => 
  array (
    0 => 'int',
  ),
  'amqpqueueexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'amqpqueueexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'amqpqueueexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'amqpqueueexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'amqptimestamp::__construct' => 
  array (
    0 => 'void',
    'timestamp' => 'float',
  ),
  'amqptimestamp::__tostring' => 
  array (
    0 => 'string',
  ),
  'amqptimestamp::gettimestamp' => 
  array (
    0 => 'float',
  ),
  'amqptimestamp::toamqpvalue' => 
  array (
    0 => 'mixed',
  ),
  'amqpvalueexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'amqpvalueexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'amqpvalueexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'amqpvalueexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'amqpvalueexception::getfile' => 
  array (
    0 => 'string',
  ),
  'amqpvalueexception::getline' => 
  array (
    0 => 'int',
  ),
  'amqpvalueexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'amqpvalueexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'amqpvalueexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'amqpvalueexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'apache_child_terminate' => 
  array (
    0 => 'bool',
  ),
  'apache_get_modules' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'apache_get_version' => 
  array (
    0 => 'false|string',
  ),
  'apache_getenv' => 
  array (
    0 => 'false|string',
    'variable' => 'string',
    'walk_to_top=' => 'bool',
  ),
  'apache_lookup_uri' => 
  array (
    0 => 'object',
    'filename' => 'string',
  ),
  'apache_note' => 
  array (
    0 => 'false|string',
    'note_name' => 'string',
    'note_value=' => 'string',
  ),
  'apache_request_headers' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'apache_reset_timeout' => 
  array (
    0 => 'bool',
  ),
  'apache_response_headers' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'apache_setenv' => 
  array (
    0 => 'bool',
    'variable' => 'string',
    'value' => 'string',
    'walk_to_top=' => 'bool',
  ),
  'apc_add' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'var' => 'mixed',
    'ttl=' => 'int',
  ),
  'apc_add\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'values' => 'array<array-key, mixed>',
    'unused=' => 'mixed',
    'ttl=' => 'int',
  ),
  'apc_bin_dump' => 
  array (
    0 => 'false|null|string',
    'files=' => 'array<array-key, mixed>',
    'user_vars=' => 'array<array-key, mixed>',
  ),
  'apc_bin_dumpfile' => 
  array (
    0 => 'false|int',
    'files' => 'array<array-key, mixed>',
    'user_vars' => 'array<array-key, mixed>',
    'filename' => 'string',
    'flags=' => 'int',
    'context=' => 'resource',
  ),
  'apc_bin_load' => 
  array (
    0 => 'bool',
    'data' => 'string',
    'flags=' => 'int',
  ),
  'apc_bin_loadfile' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'context=' => 'resource',
    'flags=' => 'int',
  ),
  'apc_cache_info' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'cache_type=' => 'string',
    'limited=' => 'bool',
  ),
  'apc_cas' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'old' => 'int',
    'new' => 'int',
  ),
  'apc_clear_cache' => 
  array (
    0 => 'bool',
    'cache_type=' => 'string',
  ),
  'apc_compile_file' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'atomic=' => 'bool',
  ),
  'apc_dec' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'step=' => 'int',
    '&w_success=' => 'bool',
  ),
  'apc_define_constants' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'constants' => 'array<array-key, mixed>',
    'case_sensitive=' => 'bool',
  ),
  'apc_delete' => 
  array (
    0 => 'bool',
    'key' => 'APCIterator|array<array-key, string>|string',
  ),
  'apc_delete_file' => 
  array (
    0 => 'array<array-key, string>|bool',
    'keys' => 'mixed',
  ),
  'apc_exists' => 
  array (
    0 => 'bool',
    'keys' => 'string',
  ),
  'apc_exists\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'array<array-key, string>',
  ),
  'apc_fetch' => 
  array (
    0 => 'false|mixed',
    'key' => 'string',
    '&w_success=' => 'bool',
  ),
  'apc_fetch\'1' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'key' => 'array<array-key, string>',
    '&w_success=' => 'bool',
  ),
  'apc_inc' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'step=' => 'int',
    '&w_success=' => 'bool',
  ),
  'apc_load_constants' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'case_sensitive=' => 'bool',
  ),
  'apc_sma_info' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'limited=' => 'bool',
  ),
  'apc_store' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'var' => 'mixed',
    'ttl=' => 'int',
  ),
  'apc_store\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'values' => 'array<array-key, mixed>',
    'unused=' => 'mixed',
    'ttl=' => 'int',
  ),
  'apciterator::__construct' => 
  array (
    0 => 'void',
    'cache' => 'string',
    'search=' => 'array<array-key, string>|null|string',
    'format=' => 'int',
    'chunk_size=' => 'int',
    'list=' => 'int',
  ),
  'apciterator::current' => 
  array (
    0 => 'false|mixed',
  ),
  'apciterator::gettotalcount' => 
  array (
    0 => 'false|int',
  ),
  'apciterator::gettotalhits' => 
  array (
    0 => 'false|int',
  ),
  'apciterator::gettotalsize' => 
  array (
    0 => 'false|int',
  ),
  'apciterator::key' => 
  array (
    0 => 'string',
  ),
  'apciterator::next' => 
  array (
    0 => 'void',
  ),
  'apciterator::rewind' => 
  array (
    0 => 'void',
  ),
  'apciterator::valid' => 
  array (
    0 => 'bool',
  ),
  'apcu_add' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value=' => 'mixed',
    'ttl=' => 'int',
  ),
  'apcu_add\'1' => 
  array (
    0 => 'array<string, int>',
    'values' => 'array<string, mixed>',
    'unused=' => 'mixed',
    'ttl=' => 'int',
  ),
  'apcu_cache_info' => 
  array (
    0 => 'array<string, mixed>|false',
    'limited=' => 'bool',
  ),
  'apcu_cas' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'old' => 'int',
    'new' => 'int',
  ),
  'apcu_clear_cache' => 
  array (
    0 => 'bool',
  ),
  'apcu_dec' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'step=' => 'int',
    '&w_success=' => 'bool',
    'ttl=' => 'int',
  ),
  'apcu_delete' => 
  array (
    0 => 'bool',
    'key' => 'APCuIterator|string',
  ),
  'apcu_delete\'1' => 
  array (
    0 => 'list<string>',
    'key' => 'array<array-key, string>',
  ),
  'apcu_enabled' => 
  array (
    0 => 'bool',
  ),
  'apcu_entry' => 
  array (
    0 => 'mixed',
    'key' => 'string',
    'callback' => 'callable(string):mixed',
    'ttl=' => 'int',
  ),
  'apcu_exists' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'apcu_exists\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'array<array-key, string>',
  ),
  'apcu_fetch' => 
  array (
    0 => 'false|mixed',
    'key' => 'string',
    '&w_success=' => 'bool',
  ),
  'apcu_fetch\'1' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'key' => 'array<array-key, string>',
    '&w_success=' => 'bool',
  ),
  'apcu_inc' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'step=' => 'int',
    '&w_success=' => 'bool',
    'ttl=' => 'int',
  ),
  'apcu_key_info' => 
  array (
    0 => 'array<array-key, mixed>|null',
    'key' => 'string',
  ),
  'apcu_sma_info' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'limited=' => 'bool',
  ),
  'apcu_store' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value=' => 'mixed',
    'ttl=' => 'int',
  ),
  'apcu_store\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'values' => 'array<array-key, mixed>',
    'unused=' => 'mixed',
    'ttl=' => 'int',
  ),
  'apcuiterator::__construct' => 
  array (
    0 => 'void',
    'search=' => 'array<array-key, string>|null|string',
    'format=' => 'int',
    'chunk_size=' => 'int',
    'list=' => 'int',
  ),
  'apcuiterator::current' => 
  array (
    0 => 'mixed',
  ),
  'apcuiterator::gettotalcount' => 
  array (
    0 => 'int',
  ),
  'apcuiterator::gettotalhits' => 
  array (
    0 => 'int',
  ),
  'apcuiterator::gettotalsize' => 
  array (
    0 => 'int',
  ),
  'apcuiterator::key' => 
  array (
    0 => 'string',
  ),
  'apcuiterator::next' => 
  array (
    0 => 'void',
  ),
  'apcuiterator::rewind' => 
  array (
    0 => 'void',
  ),
  'apcuiterator::valid' => 
  array (
    0 => 'bool',
  ),
  'apd_breakpoint' => 
  array (
    0 => 'bool',
    'debug_level' => 'int',
  ),
  'apd_callstack' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'apd_clunk' => 
  array (
    0 => 'void',
    'warning' => 'string',
    'delimiter=' => 'string',
  ),
  'apd_continue' => 
  array (
    0 => 'bool',
    'debug_level' => 'int',
  ),
  'apd_croak' => 
  array (
    0 => 'void',
    'warning' => 'string',
    'delimiter=' => 'string',
  ),
  'apd_dump_function_table' => 
  array (
    0 => 'void',
  ),
  'apd_dump_persistent_resources' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'apd_dump_regular_resources' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'apd_echo' => 
  array (
    0 => 'bool',
    'output' => 'string',
  ),
  'apd_get_active_symbols' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'apd_set_pprof_trace' => 
  array (
    0 => 'string',
    'dump_directory=' => 'string',
    'fragment=' => 'string',
  ),
  'apd_set_session' => 
  array (
    0 => 'void',
    'debug_level' => 'int',
  ),
  'apd_set_session_trace' => 
  array (
    0 => 'void',
    'debug_level' => 'int',
    'dump_directory=' => 'string',
  ),
  'apd_set_session_trace_socket' => 
  array (
    0 => 'bool',
    'tcp_server' => 'string',
    'socket_type' => 'int',
    'port' => 'int',
    'debug_level' => 'int',
  ),
  'appenditerator::__construct' => 
  array (
    0 => 'void',
  ),
  'appenditerator::append' => 
  array (
    0 => 'void',
    'iterator' => 'Iterator',
  ),
  'appenditerator::current' => 
  array (
    0 => 'mixed',
  ),
  'appenditerator::getarrayiterator' => 
  array (
    0 => 'ArrayIterator',
  ),
  'appenditerator::getinneriterator' => 
  array (
    0 => 'Iterator',
  ),
  'appenditerator::getiteratorindex' => 
  array (
    0 => 'int',
  ),
  'appenditerator::key' => 
  array (
    0 => 'scalar',
  ),
  'appenditerator::next' => 
  array (
    0 => 'void',
  ),
  'appenditerator::rewind' => 
  array (
    0 => 'void',
  ),
  'appenditerator::valid' => 
  array (
    0 => 'bool',
  ),
  'argumentcounterror::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'argumentcounterror::__tostring' => 
  array (
    0 => 'string',
  ),
  'argumentcounterror::__wakeup' => 
  array (
    0 => 'void',
  ),
  'argumentcounterror::getcode' => 
  array (
    0 => 'int',
  ),
  'argumentcounterror::getfile' => 
  array (
    0 => 'string',
  ),
  'argumentcounterror::getline' => 
  array (
    0 => 'int',
  ),
  'argumentcounterror::getmessage' => 
  array (
    0 => 'string',
  ),
  'argumentcounterror::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'argumentcounterror::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'argumentcounterror::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'arithmeticerror::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'arithmeticerror::__tostring' => 
  array (
    0 => 'string',
  ),
  'arithmeticerror::__wakeup' => 
  array (
    0 => 'void',
  ),
  'arithmeticerror::getcode' => 
  array (
    0 => 'int',
  ),
  'arithmeticerror::getfile' => 
  array (
    0 => 'string',
  ),
  'arithmeticerror::getline' => 
  array (
    0 => 'int',
  ),
  'arithmeticerror::getmessage' => 
  array (
    0 => 'string',
  ),
  'arithmeticerror::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'arithmeticerror::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'arithmeticerror::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'array_change_key_case' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'case=' => 'int',
  ),
  'array_chunk' => 
  array (
    0 => 'list<array<array-key, array<array-key, mixed>>>',
    'array' => 'array<array-key, mixed>',
    'length' => 'int',
    'preserve_keys=' => 'bool',
  ),
  'array_column' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'column_key' => 'int|null|string',
    'index_key=' => 'int|null|string',
  ),
  'array_combine' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'array<array-key, int|string>',
    'values' => 'array<array-key, mixed>',
  ),
  'array_count_values' => 
  array (
    0 => 'array<array-key, int>',
    'array' => 'array<array-key, int|string>',
  ),
  'array_diff' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    '...arrays=' => 'array<array-key, mixed>',
  ),
  'array_diff_assoc' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    '...arrays=' => 'array<array-key, mixed>',
  ),
  'array_diff_key' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    '...arrays=' => 'array<array-key, mixed>',
  ),
  'array_diff_uassoc' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    '...rest' => 'array<array-key, mixed>|callable(array-key, array-key):int|callable(int, int):int|callable(string, string):int',
  ),
  'array_diff_uassoc\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'rest' => 'array<array-key, mixed>',
    'arr3' => 'array<array-key, mixed>',
    'arg4' => 'array<array-key, mixed>|callable(mixed, mixed):int',
    '...rest=' => 'array<array-key, mixed>|callable(mixed, mixed):int',
  ),
  'array_diff_ukey' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    '...rest' => 'array<array-key, mixed>|callable(array-key, array-key):int|callable(int, int):int|callable(string, string):int',
  ),
  'array_diff_ukey\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'rest' => 'array<array-key, mixed>',
    'arr3' => 'array<array-key, mixed>',
    'arg4' => 'array<array-key, mixed>|callable(mixed, mixed):int',
    '...rest=' => 'array<array-key, mixed>|callable(mixed, mixed):int',
  ),
  'array_fill' => 
  array (
    0 => 'array<int, mixed>',
    'start_index' => 'int',
    'count' => 'int',
    'value' => 'mixed',
  ),
  'array_fill_keys' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'array<array-key, mixed>',
    'value' => 'mixed',
  ),
  'array_filter' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'callback=' => 'callable(mixed, array-key=):mixed|null',
    'mode=' => 'int',
  ),
  'array_flip' => 
  array (
    0 => 'array<array-key, int|string>',
    'array' => 'array<array-key, int|string>',
  ),
  'array_intersect' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    '...arrays=' => 'array<array-key, mixed>',
  ),
  'array_intersect_assoc' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    '...arrays=' => 'array<array-key, mixed>',
  ),
  'array_intersect_key' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    '...arrays=' => 'array<array-key, mixed>',
  ),
  'array_intersect_uassoc' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    '...rest' => 'array<array-key, mixed>|callable(array-key, array-key):int|callable(int, int):int|callable(string, string):int',
  ),
  'array_intersect_uassoc\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'rest' => 'array<array-key, mixed>',
    'arr3' => 'array<array-key, mixed>',
    'arg4' => 'array<array-key, mixed>|callable(mixed, mixed):int',
    '...rest' => 'array<array-key, mixed>|callable(mixed, mixed):int',
  ),
  'array_intersect_ukey' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    '...rest' => 'array<array-key, mixed>|callable(array-key, array-key):int|callable(int, int):int|callable(string, string):int',
  ),
  'array_intersect_ukey\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'rest' => 'array<array-key, mixed>',
    'arr3' => 'array<array-key, mixed>',
    'arg4' => 'array<array-key, mixed>|callable(mixed, mixed):int',
    '...rest' => 'array<array-key, mixed>|callable(mixed, mixed):int',
  ),
  'array_key_exists' => 
  array (
    0 => 'bool',
    'key' => 'int|string',
    'array' => 'array<array-key, mixed>',
  ),
  'array_key_first' => 
  array (
    0 => 'int|null|string',
    'array' => 'array<array-key, mixed>',
  ),
  'array_key_last' => 
  array (
    0 => 'int|null|string',
    'array' => 'array<array-key, mixed>',
  ),
  'array_keys' => 
  array (
    0 => 'list<int|string>',
    'array' => 'array<array-key, mixed>',
    'filter_value=' => 'mixed',
    'strict=' => 'bool',
  ),
  'array_map' => 
  array (
    0 => 'array<array-key, mixed>',
    'callback' => 'callable|null',
    'array' => 'array<array-key, mixed>',
    '...arrays=' => 'array<array-key, mixed>',
  ),
  'array_merge' => 
  array (
    0 => 'array<array-key, mixed>',
    '...arrays=' => 'array<array-key, mixed>',
  ),
  'array_merge_recursive' => 
  array (
    0 => 'array<array-key, mixed>',
    '...arrays=' => 'array<array-key, mixed>',
  ),
  'array_multisort' => 
  array (
    0 => 'bool',
    '&array' => 'array<array-key, mixed>',
    '&...rest=' => 'array<array-key, mixed>|int',
  ),
  'array_pad' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'length' => 'int',
    'value' => 'mixed',
  ),
  'array_pop' => 
  array (
    0 => 'mixed',
    '&array' => 'array<array-key, mixed>',
  ),
  'array_product' => 
  array (
    0 => 'float|int',
    'array' => 'array<array-key, mixed>',
  ),
  'array_push' => 
  array (
    0 => 'int',
    '&array' => 'array<array-key, mixed>',
    '...values=' => 'mixed',
  ),
  'array_rand' => 
  array (
    0 => 'array<int, int|string>|int|string',
    'array' => 'non-empty-array<array-key, mixed>',
    'num=' => 'int',
  ),
  'array_rand\'1' => 
  array (
    0 => 'int|string',
    'array' => 'array<array-key, mixed>',
  ),
  'array_reduce' => 
  array (
    0 => 'mixed',
    'array' => 'array<array-key, mixed>',
    'callback' => 'callable(mixed, mixed):mixed',
    'initial=' => 'mixed',
  ),
  'array_replace' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    '...replacements=' => 'array<array-key, mixed>',
  ),
  'array_replace_recursive' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    '...replacements=' => 'array<array-key, mixed>',
  ),
  'array_reverse' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'preserve_keys=' => 'bool',
  ),
  'array_search' => 
  array (
    0 => 'false|int|string',
    'needle' => 'mixed',
    'haystack' => 'array<array-key, mixed>',
    'strict=' => 'bool',
  ),
  'array_shift' => 
  array (
    0 => 'mixed|null',
    '&array' => 'array<array-key, mixed>',
  ),
  'array_slice' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'offset' => 'int',
    'length=' => 'int|null',
    'preserve_keys=' => 'bool',
  ),
  'array_splice' => 
  array (
    0 => 'array<array-key, mixed>',
    '&array' => 'array<array-key, mixed>',
    'offset' => 'int',
    'length=' => 'int|null',
    'replacement=' => 'array<array-key, mixed>|string',
  ),
  'array_sum' => 
  array (
    0 => 'float|int',
    'array' => 'array<array-key, mixed>',
  ),
  'array_udiff' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    '...rest' => 'array<array-key, mixed>|callable(mixed, mixed):int',
  ),
  'array_udiff\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'rest' => 'array<array-key, mixed>',
    'arr3' => 'array<array-key, mixed>',
    'arg4' => 'array<array-key, mixed>|callable(mixed, mixed):int',
    '...rest=' => 'array<array-key, mixed>|callable(mixed, mixed):int',
  ),
  'array_udiff_assoc' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    '...rest' => 'array<array-key, mixed>|callable(mixed, mixed):int',
  ),
  'array_udiff_assoc\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'rest' => 'array<array-key, mixed>',
    'arr3' => 'array<array-key, mixed>',
    'arg4' => 'array<array-key, mixed>|callable(mixed, mixed):int',
    '...rest=' => 'array<array-key, mixed>|callable(mixed, mixed):int',
  ),
  'array_udiff_uassoc' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'arr2' => 'array<array-key, mixed>',
    'value_compare_func' => 'callable(mixed, mixed):int',
    'key_compare_func' => 'callable(array-key, array-key):int|callable(int, int):int|callable(string, string):int',
  ),
  'array_udiff_uassoc\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'rest' => 'array<array-key, mixed>',
    'arr3' => 'array<array-key, mixed>',
    'arg4' => 'array<array-key, mixed>|callable(mixed, mixed):int',
    'arg5' => 'array<array-key, mixed>|callable(mixed, mixed):int',
    '...rest=' => 'array<array-key, mixed>|callable(mixed, mixed):int',
  ),
  'array_uintersect' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    '...rest' => 'array<array-key, mixed>|callable(mixed, mixed):int',
  ),
  'array_uintersect\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'rest' => 'array<array-key, mixed>',
    'arr3' => 'array<array-key, mixed>',
    'arg4' => 'array<array-key, mixed>|callable(mixed, mixed):int',
    '...rest=' => 'array<array-key, mixed>|callable(mixed, mixed):int',
  ),
  'array_uintersect_assoc' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    '...rest' => 'array<array-key, mixed>|callable(mixed, mixed):int',
  ),
  'array_uintersect_assoc\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'rest' => 'array<array-key, mixed>',
    'arr3' => 'array<array-key, mixed>',
    'arg4' => 'array<array-key, mixed>|callable',
    '...rest=' => 'array<array-key, mixed>|callable(mixed, mixed):int',
  ),
  'array_uintersect_uassoc' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'arr2' => 'array<array-key, mixed>',
    'value_compare_func' => 'callable(mixed, mixed):int',
    'key_compare_func' => 'callable(array-key, array-key):int|callable(int, int):int|callable(string, string):int',
  ),
  'array_uintersect_uassoc\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'rest' => 'array<array-key, mixed>',
    'arr3' => 'array<array-key, mixed>',
    'arg4' => 'array<array-key, mixed>|callable(mixed, mixed):int',
    'arg5' => 'array<array-key, mixed>|callable(mixed, mixed):int',
    '...rest=' => 'array<array-key, mixed>|callable(mixed, mixed):int',
  ),
  'array_unique' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'array_unshift' => 
  array (
    0 => 'int',
    '&array' => 'array<array-key, mixed>',
    '...values=' => 'mixed',
  ),
  'array_values' => 
  array (
    0 => 'list<mixed>',
    'array' => 'array<array-key, mixed>',
  ),
  'array_walk' => 
  array (
    0 => 'bool',
    '&array' => 'array<array-key, mixed>',
    'callback' => 'callable',
    'arg=' => 'mixed',
  ),
  'array_walk\'1' => 
  array (
    0 => 'bool',
    '&rw_array' => 'object',
    'callback' => 'callable',
    'arg=' => 'mixed',
  ),
  'array_walk_recursive' => 
  array (
    0 => 'bool',
    '&array' => 'array<array-key, mixed>',
    'callback' => 'callable',
    'arg=' => 'mixed',
  ),
  'array_walk_recursive\'1' => 
  array (
    0 => 'bool',
    '&rw_array' => 'object',
    'callback' => 'callable',
    'arg=' => 'mixed',
  ),
  'arrayaccess::offsetexists' => 
  array (
    0 => 'bool',
    'offset' => 'int|string',
  ),
  'arrayaccess::offsetget' => 
  array (
    0 => 'mixed',
    'offset' => 'int|string',
  ),
  'arrayaccess::offsetset' => 
  array (
    0 => 'void',
    'offset' => 'int|null|string',
    'value' => 'mixed',
  ),
  'arrayaccess::offsetunset' => 
  array (
    0 => 'void',
    'offset' => 'int|string',
  ),
  'arrayiterator::__construct' => 
  array (
    0 => 'void',
    'array=' => 'array<array-key, mixed>|object',
    'flags=' => 'int',
  ),
  'arrayiterator::__debuginfo' => 
  array (
    0 => 'mixed',
  ),
  'arrayiterator::__serialize' => 
  array (
    0 => 'mixed',
  ),
  'arrayiterator::__unserialize' => 
  array (
    0 => 'mixed',
    'data' => 'array<array-key, mixed>',
  ),
  'arrayiterator::append' => 
  array (
    0 => 'void',
    'value' => 'mixed',
  ),
  'arrayiterator::asort' => 
  array (
    0 => 'true',
    'flags=' => 'int',
  ),
  'arrayiterator::count' => 
  array (
    0 => 'int',
  ),
  'arrayiterator::current' => 
  array (
    0 => 'mixed',
  ),
  'arrayiterator::getarraycopy' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'arrayiterator::getflags' => 
  array (
    0 => 'int',
  ),
  'arrayiterator::key' => 
  array (
    0 => 'int|null|string',
  ),
  'arrayiterator::ksort' => 
  array (
    0 => 'true',
    'flags=' => 'int',
  ),
  'arrayiterator::natcasesort' => 
  array (
    0 => 'true',
  ),
  'arrayiterator::natsort' => 
  array (
    0 => 'true',
  ),
  'arrayiterator::next' => 
  array (
    0 => 'void',
  ),
  'arrayiterator::offsetexists' => 
  array (
    0 => 'bool',
    'key' => 'int|string',
  ),
  'arrayiterator::offsetget' => 
  array (
    0 => 'mixed',
    'key' => 'int|string',
  ),
  'arrayiterator::offsetset' => 
  array (
    0 => 'void',
    'key' => 'int|null|string',
    'value' => 'mixed',
  ),
  'arrayiterator::offsetunset' => 
  array (
    0 => 'void',
    'key' => 'int|string',
  ),
  'arrayiterator::rewind' => 
  array (
    0 => 'void',
  ),
  'arrayiterator::seek' => 
  array (
    0 => 'void',
    'offset' => 'int',
  ),
  'arrayiterator::serialize' => 
  array (
    0 => 'string',
  ),
  'arrayiterator::setflags' => 
  array (
    0 => 'void',
    'flags' => 'int',
  ),
  'arrayiterator::uasort' => 
  array (
    0 => 'true',
    'callback' => 'callable(mixed, mixed):int',
  ),
  'arrayiterator::uksort' => 
  array (
    0 => 'true',
    'callback' => 'callable(mixed, mixed):int',
  ),
  'arrayiterator::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'arrayiterator::valid' => 
  array (
    0 => 'bool',
  ),
  'arrayobject::__construct' => 
  array (
    0 => 'void',
    'array=' => 'array<array-key, mixed>|object',
    'flags=' => 'int',
    'iteratorClass=' => 'class-string',
  ),
  'arrayobject::__debuginfo' => 
  array (
    0 => 'mixed',
  ),
  'arrayobject::__serialize' => 
  array (
    0 => 'mixed',
  ),
  'arrayobject::__unserialize' => 
  array (
    0 => 'mixed',
    'data' => 'array<array-key, mixed>',
  ),
  'arrayobject::append' => 
  array (
    0 => 'void',
    'value' => 'mixed',
  ),
  'arrayobject::asort' => 
  array (
    0 => 'true',
    'flags=' => 'int',
  ),
  'arrayobject::count' => 
  array (
    0 => 'int',
  ),
  'arrayobject::exchangearray' => 
  array (
    0 => 'array<array-key, mixed>',
    'array' => 'array<array-key, mixed>|object',
  ),
  'arrayobject::getarraycopy' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'arrayobject::getflags' => 
  array (
    0 => 'int',
  ),
  'arrayobject::getiterator' => 
  array (
    0 => 'ArrayIterator',
  ),
  'arrayobject::getiteratorclass' => 
  array (
    0 => 'string',
  ),
  'arrayobject::ksort' => 
  array (
    0 => 'true',
    'flags=' => 'int',
  ),
  'arrayobject::natcasesort' => 
  array (
    0 => 'true',
  ),
  'arrayobject::natsort' => 
  array (
    0 => 'true',
  ),
  'arrayobject::offsetexists' => 
  array (
    0 => 'bool',
    'key' => 'int|string',
  ),
  'arrayobject::offsetget' => 
  array (
    0 => 'mixed|null',
    'key' => 'int|string',
  ),
  'arrayobject::offsetset' => 
  array (
    0 => 'void',
    'key' => 'int|null|string',
    'value' => 'mixed',
  ),
  'arrayobject::offsetunset' => 
  array (
    0 => 'void',
    'key' => 'int|string',
  ),
  'arrayobject::serialize' => 
  array (
    0 => 'string',
  ),
  'arrayobject::setflags' => 
  array (
    0 => 'void',
    'flags' => 'int',
  ),
  'arrayobject::setiteratorclass' => 
  array (
    0 => 'void',
    'iteratorClass' => 'class-string',
  ),
  'arrayobject::uasort' => 
  array (
    0 => 'true',
    'callback' => 'callable(mixed, mixed):int',
  ),
  'arrayobject::uksort' => 
  array (
    0 => 'true',
    'callback' => 'callable(mixed, mixed):int',
  ),
  'arrayobject::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'arsort' => 
  array (
    0 => 'true',
    '&array' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'asin' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'asinh' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'asort' => 
  array (
    0 => 'true',
    '&array' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'assert' => 
  array (
    0 => 'bool',
    'assertion' => 'bool|int|string',
    'description=' => 'Throwable|null|string',
  ),
  'assert_options' => 
  array (
    0 => 'false|mixed',
    'option' => 'int',
    'value=' => 'mixed',
  ),
  'assertionerror::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'assertionerror::__tostring' => 
  array (
    0 => 'string',
  ),
  'assertionerror::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'assertionerror::getcode' => 
  array (
    0 => 'mixed',
  ),
  'assertionerror::getfile' => 
  array (
    0 => 'string',
  ),
  'assertionerror::getline' => 
  array (
    0 => 'int',
  ),
  'assertionerror::getmessage' => 
  array (
    0 => 'string',
  ),
  'assertionerror::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'assertionerror::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'assertionerror::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'ast\\get_kind_name' => 
  array (
    0 => 'string',
    'kind' => 'int',
  ),
  'ast\\get_metadata' => 
  array (
    0 => 'array<int, ast\\Metadata>',
  ),
  'ast\\get_supported_versions' => 
  array (
    0 => 'array<int, int>',
    'exclude_deprecated=' => 'bool',
  ),
  'ast\\kind_uses_flags' => 
  array (
    0 => 'bool',
    'kind' => 'int',
  ),
  'ast\\node::__construct' => 
  array (
    0 => 'void',
    'kind=' => 'int',
    'flags=' => 'int',
    'children=' => 'array<array-key, ast\\Node|ast\\Node\\Decl|null|scalar>',
    'start_line=' => 'int',
  ),
  'ast\\parse_code' => 
  array (
    0 => 'ast\\Node',
    'code' => 'string',
    'version' => 'int',
    'filename=' => 'string',
  ),
  'ast\\parse_file' => 
  array (
    0 => 'ast\\Node',
    'filename' => 'string',
    'version' => 'int',
  ),
  'atan' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'atan2' => 
  array (
    0 => 'float',
    'y' => 'float',
    'x' => 'float',
  ),
  'atanh' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'attribute::__construct' => 
  array (
    0 => 'void',
    'flags=' => 'int',
  ),
  'badfunctioncallexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'badfunctioncallexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'badfunctioncallexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'badfunctioncallexception::getcode' => 
  array (
    0 => 'int',
  ),
  'badfunctioncallexception::getfile' => 
  array (
    0 => 'string',
  ),
  'badfunctioncallexception::getline' => 
  array (
    0 => 'int',
  ),
  'badfunctioncallexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'badfunctioncallexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'badfunctioncallexception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'badfunctioncallexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'badmethodcallexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'badmethodcallexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'badmethodcallexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'badmethodcallexception::getcode' => 
  array (
    0 => 'int',
  ),
  'badmethodcallexception::getfile' => 
  array (
    0 => 'string',
  ),
  'badmethodcallexception::getline' => 
  array (
    0 => 'int',
  ),
  'badmethodcallexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'badmethodcallexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'badmethodcallexception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'badmethodcallexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'base64_decode' => 
  array (
    0 => 'string',
    'string' => 'string',
    'strict=' => 'false',
  ),
  'base64_decode\'1' => 
  array (
    0 => 'false|string',
    'string' => 'string',
    'strict=' => 'true',
  ),
  'base64_encode' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'base_convert' => 
  array (
    0 => 'string',
    'num' => 'string',
    'from_base' => 'int',
    'to_base' => 'int',
  ),
  'basename' => 
  array (
    0 => 'string',
    'path' => 'string',
    'suffix=' => 'string',
  ),
  'bbcode_add_element' => 
  array (
    0 => 'bool',
    'bbcode_container' => 'resource',
    'tag_name' => 'string',
    'tag_rules' => 'array<array-key, mixed>',
  ),
  'bbcode_add_smiley' => 
  array (
    0 => 'bool',
    'bbcode_container' => 'resource',
    'smiley' => 'string',
    'replace_by' => 'string',
  ),
  'bbcode_create' => 
  array (
    0 => 'resource',
    'bbcode_initial_tags=' => 'array<array-key, mixed>',
  ),
  'bbcode_destroy' => 
  array (
    0 => 'bool',
    'bbcode_container' => 'resource',
  ),
  'bbcode_parse' => 
  array (
    0 => 'string',
    'bbcode_container' => 'resource',
    'to_parse' => 'string',
  ),
  'bbcode_set_arg_parser' => 
  array (
    0 => 'bool',
    'bbcode_container' => 'resource',
    'bbcode_arg_parser' => 'resource',
  ),
  'bbcode_set_flags' => 
  array (
    0 => 'bool',
    'bbcode_container' => 'resource',
    'flags' => 'int',
    'mode=' => 'int',
  ),
  'bcadd' => 
  array (
    0 => 'numeric-string',
    'num1' => 'numeric-string',
    'num2' => 'numeric-string',
    'scale=' => 'int|null',
  ),
  'bccomp' => 
  array (
    0 => 'int',
    'num1' => 'numeric-string',
    'num2' => 'numeric-string',
    'scale=' => 'int|null',
  ),
  'bcdiv' => 
  array (
    0 => 'numeric-string',
    'num1' => 'numeric-string',
    'num2' => 'numeric-string',
    'scale=' => 'int|null',
  ),
  'bcmod' => 
  array (
    0 => 'numeric-string',
    'num1' => 'numeric-string',
    'num2' => 'numeric-string',
    'scale=' => 'int|null',
  ),
  'bcmul' => 
  array (
    0 => 'numeric-string',
    'num1' => 'numeric-string',
    'num2' => 'numeric-string',
    'scale=' => 'int|null',
  ),
  'bcompiler_load' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'bcompiler_load_exe' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'bcompiler_parse_class' => 
  array (
    0 => 'bool',
    'class' => 'string',
    'callback' => 'string',
  ),
  'bcompiler_read' => 
  array (
    0 => 'bool',
    'filehandle' => 'resource',
  ),
  'bcompiler_write_class' => 
  array (
    0 => 'bool',
    'filehandle' => 'resource',
    'classname' => 'string',
    'extends=' => 'string',
  ),
  'bcompiler_write_constant' => 
  array (
    0 => 'bool',
    'filehandle' => 'resource',
    'constantname' => 'string',
  ),
  'bcompiler_write_exe_footer' => 
  array (
    0 => 'bool',
    'filehandle' => 'resource',
    'startpos' => 'int',
  ),
  'bcompiler_write_file' => 
  array (
    0 => 'bool',
    'filehandle' => 'resource',
    'filename' => 'string',
  ),
  'bcompiler_write_footer' => 
  array (
    0 => 'bool',
    'filehandle' => 'resource',
  ),
  'bcompiler_write_function' => 
  array (
    0 => 'bool',
    'filehandle' => 'resource',
    'functionname' => 'string',
  ),
  'bcompiler_write_functions_from_file' => 
  array (
    0 => 'bool',
    'filehandle' => 'resource',
    'filename' => 'string',
  ),
  'bcompiler_write_header' => 
  array (
    0 => 'bool',
    'filehandle' => 'resource',
    'write_ver=' => 'string',
  ),
  'bcompiler_write_included_filename' => 
  array (
    0 => 'bool',
    'filehandle' => 'resource',
    'filename' => 'string',
  ),
  'bcpow' => 
  array (
    0 => 'numeric-string',
    'num' => 'numeric-string',
    'exponent' => 'numeric-string',
    'scale=' => 'int|null',
  ),
  'bcpowmod' => 
  array (
    0 => 'numeric-string',
    'num' => 'numeric-string',
    'exponent' => 'numeric-string',
    'modulus' => 'numeric-string',
    'scale=' => 'int|null',
  ),
  'bcscale' => 
  array (
    0 => 'int',
    'scale=' => 'int|null',
  ),
  'bcsqrt' => 
  array (
    0 => 'numeric-string',
    'num' => 'numeric-string',
    'scale=' => 'int|null',
  ),
  'bcsub' => 
  array (
    0 => 'numeric-string',
    'num1' => 'numeric-string',
    'num2' => 'numeric-string',
    'scale=' => 'int|null',
  ),
  'bin2hex' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'bind_textdomain_codeset' => 
  array (
    0 => 'string',
    'domain' => 'string',
    'codeset' => 'null|string',
  ),
  'bindec' => 
  array (
    0 => 'float|int',
    'binary_string' => 'string',
  ),
  'bindtextdomain' => 
  array (
    0 => 'string',
    'domain' => 'string',
    'directory' => 'null|string',
  ),
  'birdstep_autocommit' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'birdstep_close' => 
  array (
    0 => 'bool',
    'id' => 'int',
  ),
  'birdstep_commit' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'birdstep_connect' => 
  array (
    0 => 'int',
    'server' => 'string',
    'user' => 'string',
    'pass' => 'string',
  ),
  'birdstep_exec' => 
  array (
    0 => 'int',
    'index' => 'int',
    'exec_str' => 'string',
  ),
  'birdstep_fetch' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'birdstep_fieldname' => 
  array (
    0 => 'string',
    'index' => 'int',
    'col' => 'int',
  ),
  'birdstep_fieldnum' => 
  array (
    0 => 'int',
    'index' => 'int',
  ),
  'birdstep_freeresult' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'birdstep_off_autocommit' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'birdstep_result' => 
  array (
    0 => 'mixed',
    'index' => 'int',
    'col' => 'mixed',
  ),
  'birdstep_rollback' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'blenc_encrypt' => 
  array (
    0 => 'string',
    'plaintext' => 'string',
    'encodedfile' => 'string',
    'encryption_key=' => 'string',
  ),
  'boolval' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'bson_decode' => 
  array (
    0 => 'array<array-key, mixed>',
    'bson' => 'string',
  ),
  'bson_encode' => 
  array (
    0 => 'string',
    'anything' => 'mixed',
  ),
  'bzclose' => 
  array (
    0 => 'bool',
    'bz' => 'resource',
  ),
  'bzcompress' => 
  array (
    0 => 'int|string',
    'data' => 'string',
    'block_size=' => 'int',
    'work_factor=' => 'int',
  ),
  'bzdecompress' => 
  array (
    0 => 'false|int|string',
    'data' => 'string',
    'use_less_memory=' => 'bool',
  ),
  'bzerrno' => 
  array (
    0 => 'int',
    'bz' => 'resource',
  ),
  'bzerror' => 
  array (
    0 => 'array<array-key, mixed>',
    'bz' => 'resource',
  ),
  'bzerrstr' => 
  array (
    0 => 'string',
    'bz' => 'resource',
  ),
  'bzflush' => 
  array (
    0 => 'bool',
    'bz' => 'resource',
  ),
  'bzopen' => 
  array (
    0 => 'false|resource',
    'file' => 'resource|string',
    'mode' => 'string',
  ),
  'bzread' => 
  array (
    0 => 'false|string',
    'bz' => 'resource',
    'length=' => 'int',
  ),
  'bzwrite' => 
  array (
    0 => 'false|int',
    'bz' => 'resource',
    'data' => 'string',
    'length=' => 'int|null',
  ),
  'cachingiterator::__construct' => 
  array (
    0 => 'void',
    'iterator' => 'Iterator',
    'flags=' => 'int',
  ),
  'cachingiterator::__tostring' => 
  array (
    0 => 'string',
  ),
  'cachingiterator::count' => 
  array (
    0 => 'int',
  ),
  'cachingiterator::current' => 
  array (
    0 => 'mixed',
  ),
  'cachingiterator::getcache' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'cachingiterator::getflags' => 
  array (
    0 => 'int',
  ),
  'cachingiterator::getinneriterator' => 
  array (
    0 => 'Iterator',
  ),
  'cachingiterator::hasnext' => 
  array (
    0 => 'bool',
  ),
  'cachingiterator::key' => 
  array (
    0 => 'scalar',
  ),
  'cachingiterator::next' => 
  array (
    0 => 'void',
  ),
  'cachingiterator::offsetexists' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'cachingiterator::offsetget' => 
  array (
    0 => 'mixed',
    'key' => 'string',
  ),
  'cachingiterator::offsetset' => 
  array (
    0 => 'void',
    'key' => 'string',
    'value' => 'mixed',
  ),
  'cachingiterator::offsetunset' => 
  array (
    0 => 'void',
    'key' => 'string',
  ),
  'cachingiterator::rewind' => 
  array (
    0 => 'void',
  ),
  'cachingiterator::setflags' => 
  array (
    0 => 'void',
    'flags' => 'int',
  ),
  'cachingiterator::valid' => 
  array (
    0 => 'bool',
  ),
  'cal_days_in_month' => 
  array (
    0 => 'int',
    'calendar' => 'int',
    'month' => 'int',
    'year' => 'int',
  ),
  'cal_from_jd' => 
  array (
    0 => 'array{abbrevdayname: string, abbrevmonth: string, date: string, day: int, dayname: string, dow: int, month: int, monthname: string, year: int}',
    'julian_day' => 'int',
    'calendar' => 'int',
  ),
  'cal_info' => 
  array (
    0 => 'array<array-key, mixed>',
    'calendar=' => 'int',
  ),
  'cal_to_jd' => 
  array (
    0 => 'int',
    'calendar' => 'int',
    'month' => 'int',
    'day' => 'int',
    'year' => 'int',
  ),
  'calcul_hmac' => 
  array (
    0 => 'string',
    'clent' => 'string',
    'siretcode' => 'string',
    'price' => 'string',
    'reference' => 'string',
    'validity' => 'string',
    'taxation' => 'string',
    'devise' => 'string',
    'language' => 'string',
  ),
  'calculhmac' => 
  array (
    0 => 'string',
    'clent' => 'string',
    'data' => 'string',
  ),
  'call_user_func' => 
  array (
    0 => 'false|mixed',
    'callback' => 'callable',
    '...args=' => 'mixed',
  ),
  'call_user_func_array' => 
  array (
    0 => 'false|mixed',
    'callback' => 'callable',
    'args' => 'list<mixed>',
  ),
  'call_user_method' => 
  array (
    0 => 'mixed',
    'method_name' => 'string',
    'object' => 'object',
    'parameter=' => 'mixed',
    '...args=' => 'mixed',
  ),
  'call_user_method_array' => 
  array (
    0 => 'mixed',
    'method_name' => 'string',
    'object' => 'object',
    'params' => 'list<mixed>',
  ),
  'callbackfilteriterator::__construct' => 
  array (
    0 => 'void',
    'iterator' => 'Iterator',
    'callback' => 'callable(mixed, mixed=, mixed=):bool',
  ),
  'callbackfilteriterator::accept' => 
  array (
    0 => 'bool',
  ),
  'callbackfilteriterator::current' => 
  array (
    0 => 'mixed',
  ),
  'callbackfilteriterator::getinneriterator' => 
  array (
    0 => 'Iterator',
  ),
  'callbackfilteriterator::key' => 
  array (
    0 => 'mixed',
  ),
  'callbackfilteriterator::next' => 
  array (
    0 => 'void',
  ),
  'callbackfilteriterator::rewind' => 
  array (
    0 => 'void',
  ),
  'callbackfilteriterator::valid' => 
  array (
    0 => 'bool',
  ),
  'ceil' => 
  array (
    0 => 'float',
    'num' => 'float|int',
  ),
  'chan::__construct' => 
  array (
    0 => 'void',
    'size=' => 'int',
  ),
  'chan::close' => 
  array (
    0 => 'bool',
  ),
  'chan::isempty' => 
  array (
    0 => 'bool',
  ),
  'chan::isfull' => 
  array (
    0 => 'bool',
  ),
  'chan::length' => 
  array (
    0 => 'int',
  ),
  'chan::pop' => 
  array (
    0 => 'mixed',
    'timeout=' => 'float',
  ),
  'chan::push' => 
  array (
    0 => 'bool',
    'data' => 'mixed',
    'timeout=' => 'float',
  ),
  'chan::stats' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'chdb::__construct' => 
  array (
    0 => 'void',
    'pathname' => 'string',
  ),
  'chdb::get' => 
  array (
    0 => 'string',
    'key' => 'string',
  ),
  'chdb_create' => 
  array (
    0 => 'bool',
    'pathname' => 'string',
    'data' => 'array<array-key, mixed>',
  ),
  'chdir' => 
  array (
    0 => 'bool',
    'directory' => 'string',
  ),
  'checkdate' => 
  array (
    0 => 'bool',
    'month' => 'int',
    'day' => 'int',
    'year' => 'int',
  ),
  'checkdnsrr' => 
  array (
    0 => 'bool',
    'hostname' => 'string',
    'type=' => 'string',
  ),
  'chgrp' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'group' => 'int|string',
  ),
  'chmod' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'permissions' => 'int',
  ),
  'chop' => 
  array (
    0 => 'string',
    'string' => 'string',
    'characters=' => 'string',
  ),
  'chown' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'user' => 'int|string',
  ),
  'chr' => 
  array (
    0 => 'non-empty-string',
    'codepoint' => 'int',
  ),
  'chroot' => 
  array (
    0 => 'bool',
    'directory' => 'string',
  ),
  'chunk_split' => 
  array (
    0 => 'string',
    'string' => 'string',
    'length=' => 'int',
    'separator=' => 'string',
  ),
  'class_alias' => 
  array (
    0 => 'bool',
    'class' => 'string',
    'alias' => 'string',
    'autoload=' => 'bool',
  ),
  'class_exists' => 
  array (
    0 => 'bool',
    'class' => 'string',
    'autoload=' => 'bool',
  ),
  'class_implements' => 
  array (
    0 => 'array<interface-string, interface-string>|false',
    'object_or_class' => 'object|string',
    'autoload=' => 'bool',
  ),
  'class_parents' => 
  array (
    0 => 'array<class-string, class-string>|false',
    'object_or_class' => 'object|string',
    'autoload=' => 'bool',
  ),
  'class_uses' => 
  array (
    0 => 'array<trait-string, trait-string>|false',
    'object_or_class' => 'object|string',
    'autoload=' => 'bool',
  ),
  'classkit_import' => 
  array (
    0 => 'array<array-key, mixed>',
    'filename' => 'string',
  ),
  'classkit_method_add' => 
  array (
    0 => 'bool',
    'classname' => 'string',
    'methodname' => 'string',
    'args' => 'string',
    'code' => 'string',
    'flags=' => 'int',
  ),
  'classkit_method_copy' => 
  array (
    0 => 'bool',
    'dclass' => 'string',
    'dmethod' => 'string',
    'sclass' => 'string',
    'smethod=' => 'string',
  ),
  'classkit_method_redefine' => 
  array (
    0 => 'bool',
    'classname' => 'string',
    'methodname' => 'string',
    'args' => 'string',
    'code' => 'string',
    'flags=' => 'int',
  ),
  'classkit_method_remove' => 
  array (
    0 => 'bool',
    'classname' => 'string',
    'methodname' => 'string',
  ),
  'classkit_method_rename' => 
  array (
    0 => 'bool',
    'classname' => 'string',
    'methodname' => 'string',
    'newname' => 'string',
  ),
  'classobj::__construct' => 
  array (
    0 => 'void',
    'layer' => 'layerObj',
    'class' => 'classObj',
  ),
  'classobj::addlabel' => 
  array (
    0 => 'int',
    'label' => 'labelObj',
  ),
  'classobj::converttostring' => 
  array (
    0 => 'string',
  ),
  'classobj::createlegendicon' => 
  array (
    0 => 'imageObj',
    'width' => 'int',
    'height' => 'int',
  ),
  'classobj::deletestyle' => 
  array (
    0 => 'int',
    'index' => 'int',
  ),
  'classobj::drawlegendicon' => 
  array (
    0 => 'int',
    'width' => 'int',
    'height' => 'int',
    'im' => 'imageObj',
    'dstX' => 'int',
    'dstY' => 'int',
  ),
  'classobj::free' => 
  array (
    0 => 'void',
  ),
  'classobj::getexpressionstring' => 
  array (
    0 => 'string',
  ),
  'classobj::getlabel' => 
  array (
    0 => 'labelObj',
    'index' => 'int',
  ),
  'classobj::getmetadata' => 
  array (
    0 => 'int',
    'name' => 'string',
  ),
  'classobj::getstyle' => 
  array (
    0 => 'styleObj',
    'index' => 'int',
  ),
  'classobj::gettextstring' => 
  array (
    0 => 'string',
  ),
  'classobj::movestyledown' => 
  array (
    0 => 'int',
    'index' => 'int',
  ),
  'classobj::movestyleup' => 
  array (
    0 => 'int',
    'index' => 'int',
  ),
  'classobj::ms_newclassobj' => 
  array (
    0 => 'classObj',
    'layer' => 'layerObj',
    'class' => 'classObj',
  ),
  'classobj::removelabel' => 
  array (
    0 => 'labelObj',
    'index' => 'int',
  ),
  'classobj::removemetadata' => 
  array (
    0 => 'int',
    'name' => 'string',
  ),
  'classobj::set' => 
  array (
    0 => 'int',
    'property_name' => 'string',
    'new_value' => 'mixed',
  ),
  'classobj::setexpression' => 
  array (
    0 => 'int',
    'expression' => 'string',
  ),
  'classobj::setmetadata' => 
  array (
    0 => 'int',
    'name' => 'string',
    'value' => 'string',
  ),
  'classobj::settext' => 
  array (
    0 => 'int',
    'text' => 'string',
  ),
  'classobj::updatefromstring' => 
  array (
    0 => 'int',
    'snippet' => 'string',
  ),
  'clearstatcache' => 
  array (
    0 => 'void',
    'clear_realpath_cache=' => 'bool',
    'filename=' => 'string',
  ),
  'cli_get_process_title' => 
  array (
    0 => 'null|string',
  ),
  'cli_set_process_title' => 
  array (
    0 => 'bool',
    'title' => 'string',
  ),
  'closedgeneratorexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'closedgeneratorexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'closedgeneratorexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'closedgeneratorexception::getcode' => 
  array (
    0 => 'int',
  ),
  'closedgeneratorexception::getfile' => 
  array (
    0 => 'string',
  ),
  'closedgeneratorexception::getline' => 
  array (
    0 => 'int',
  ),
  'closedgeneratorexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'closedgeneratorexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'closedgeneratorexception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'closedgeneratorexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'closedir' => 
  array (
    0 => 'void',
    'dir_handle=' => 'resource',
  ),
  'closelog' => 
  array (
    0 => 'true',
  ),
  'closure::__construct' => 
  array (
    0 => 'void',
  ),
  'closure::__invoke' => 
  array (
    0 => 'mixed',
    '...args=' => 'mixed',
  ),
  'closure::bind' => 
  array (
    0 => 'Closure|null',
    'closure' => 'Closure',
    'newThis' => 'null|object',
    'newScope=' => 'null|object|string',
  ),
  'closure::bindto' => 
  array (
    0 => 'Closure|null',
    'newThis' => 'null|object',
    'newScope=' => 'null|object|string',
  ),
  'closure::call' => 
  array (
    0 => 'mixed',
    'newThis' => 'object',
    '...args=' => 'mixed',
  ),
  'closure::fromcallable' => 
  array (
    0 => 'Closure',
    'callback' => 'callable',
  ),
  'clusterobj::converttostring' => 
  array (
    0 => 'string',
  ),
  'clusterobj::getfilterstring' => 
  array (
    0 => 'string',
  ),
  'clusterobj::getgroupstring' => 
  array (
    0 => 'string',
  ),
  'clusterobj::setfilter' => 
  array (
    0 => 'int',
    'expression' => 'string',
  ),
  'clusterobj::setgroup' => 
  array (
    0 => 'int',
    'expression' => 'string',
  ),
  'co::cancel' => 
  array (
    0 => 'bool',
    'cid' => 'int',
  ),
  'co::create' => 
  array (
    0 => 'false|int',
    'func' => 'callable',
    '...param=' => 'mixed',
  ),
  'co::defer' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'co::disablescheduler' => 
  array (
    0 => 'bool',
  ),
  'co::dnslookup' => 
  array (
    0 => 'false|string',
    'domain_name' => 'string',
    'timeout=' => 'float',
    'type=' => 'int',
  ),
  'co::enablescheduler' => 
  array (
    0 => 'bool',
  ),
  'co::exec' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'command' => 'string',
    'get_error_stream=' => 'bool',
  ),
  'co::exists' => 
  array (
    0 => 'bool',
    'cid' => 'int',
  ),
  'co::fgets' => 
  array (
    0 => 'false|string',
    'handle' => 'mixed',
  ),
  'co::fread' => 
  array (
    0 => 'false|string',
    'handle' => 'mixed',
    'length=' => 'int',
  ),
  'co::fwrite' => 
  array (
    0 => 'false|int',
    'handle' => 'mixed',
    'data' => 'string',
    'length=' => 'int',
  ),
  'co::getaddrinfo' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'domain' => 'string',
    'family=' => 'int',
    'socktype=' => 'int',
    'protocol=' => 'int',
    'service=' => 'null|string',
    'timeout=' => 'float',
  ),
  'co::getbacktrace' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'cid=' => 'int',
    'options=' => 'int',
    'limit=' => 'int',
  ),
  'co::getcid' => 
  array (
    0 => 'int',
  ),
  'co::getcontext' => 
  array (
    0 => 'Swoole\\Coroutine\\Context|null',
    'cid=' => 'int',
  ),
  'co::getelapsed' => 
  array (
    0 => 'int',
    'cid=' => 'int',
  ),
  'co::gethostbyname' => 
  array (
    0 => 'false|string',
    'domain_name' => 'string',
    'type=' => 'int',
    'timeout=' => 'float',
  ),
  'co::getoptions' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'co::getpcid' => 
  array (
    0 => 'false|int',
    'cid=' => 'int',
  ),
  'co::getstackusage' => 
  array (
    0 => 'false|int',
    'cid=' => 'int',
  ),
  'co::getuid' => 
  array (
    0 => 'int',
  ),
  'co::iscanceled' => 
  array (
    0 => 'bool',
  ),
  'co::join' => 
  array (
    0 => 'bool',
    'cid_array' => 'array<array-key, mixed>',
    'timeout=' => 'float',
  ),
  'co::list' => 
  array (
    0 => 'Swoole\\Coroutine\\Iterator',
  ),
  'co::listcoroutines' => 
  array (
    0 => 'Swoole\\Coroutine\\Iterator',
  ),
  'co::printbacktrace' => 
  array (
    0 => 'void',
    'cid=' => 'int',
    'options=' => 'int',
    'limit=' => 'int',
  ),
  'co::readfile' => 
  array (
    0 => 'false|string',
    'filename' => 'string',
    'flag=' => 'int',
  ),
  'co::resume' => 
  array (
    0 => 'bool',
    'cid' => 'int',
  ),
  'co::set' => 
  array (
    0 => 'void',
    'options' => 'array<array-key, mixed>',
  ),
  'co::sleep' => 
  array (
    0 => 'bool',
    'seconds' => 'float',
  ),
  'co::stats' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'co::statvfs' => 
  array (
    0 => 'array<array-key, mixed>',
    'path' => 'string',
  ),
  'co::suspend' => 
  array (
    0 => 'bool',
  ),
  'co::wait' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'timeout=' => 'float',
  ),
  'co::waitevent' => 
  array (
    0 => 'false|int',
    'socket' => 'mixed',
    'events=' => 'int',
    'timeout=' => 'float',
  ),
  'co::waitpid' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'pid' => 'int',
    'timeout=' => 'float',
  ),
  'co::waitsignal' => 
  array (
    0 => 'bool',
    'signo' => 'int',
    'timeout=' => 'float',
  ),
  'co::writefile' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
    'fileContent' => 'string',
    'flags=' => 'int',
  ),
  'co::yield' => 
  array (
    0 => 'bool',
  ),
  'co\\channel::__construct' => 
  array (
    0 => 'void',
    'size=' => 'int',
  ),
  'co\\channel::close' => 
  array (
    0 => 'bool',
  ),
  'co\\channel::isempty' => 
  array (
    0 => 'bool',
  ),
  'co\\channel::isfull' => 
  array (
    0 => 'bool',
  ),
  'co\\channel::length' => 
  array (
    0 => 'int',
  ),
  'co\\channel::pop' => 
  array (
    0 => 'mixed',
    'timeout=' => 'float',
  ),
  'co\\channel::push' => 
  array (
    0 => 'bool',
    'data' => 'mixed',
    'timeout=' => 'float',
  ),
  'co\\channel::stats' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'co\\client::__construct' => 
  array (
    0 => 'void',
    'type' => 'int',
  ),
  'co\\client::__destruct' => 
  array (
    0 => 'mixed',
  ),
  'co\\client::close' => 
  array (
    0 => 'bool',
  ),
  'co\\client::connect' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port=' => 'int',
    'timeout=' => 'float',
    'sock_flag=' => 'int',
  ),
  'co\\client::enablessl' => 
  array (
    0 => 'bool',
  ),
  'co\\client::exportsocket' => 
  array (
    0 => 'Swoole\\Coroutine\\Socket|false',
  ),
  'co\\client::getpeercert' => 
  array (
    0 => 'false|string',
  ),
  'co\\client::getpeername' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'co\\client::getsockname' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'co\\client::isconnected' => 
  array (
    0 => 'bool',
  ),
  'co\\client::peek' => 
  array (
    0 => 'false|string',
    'length=' => 'int',
  ),
  'co\\client::recv' => 
  array (
    0 => 'false|string',
    'timeout=' => 'float',
  ),
  'co\\client::recvfrom' => 
  array (
    0 => 'false|string',
    'length' => 'int',
    '&address' => 'mixed',
    '&port=' => 'mixed',
  ),
  'co\\client::send' => 
  array (
    0 => 'false|int',
    'data' => 'string',
    'timeout=' => 'float',
  ),
  'co\\client::sendfile' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'offset=' => 'int',
    'length=' => 'int',
  ),
  'co\\client::sendto' => 
  array (
    0 => 'bool',
    'address' => 'string',
    'port' => 'int',
    'data' => 'string',
  ),
  'co\\client::set' => 
  array (
    0 => 'bool',
    'settings' => 'array<array-key, mixed>',
  ),
  'co\\client::verifypeercert' => 
  array (
    0 => 'bool',
    'allow_self_signed=' => 'bool',
  ),
  'co\\context::__construct' => 
  array (
    0 => 'void',
    'array=' => 'array<array-key, mixed>|object',
    'flags=' => 'int',
    'iteratorClass=' => 'string',
  ),
  'co\\context::__debuginfo' => 
  array (
    0 => 'mixed',
  ),
  'co\\context::__serialize' => 
  array (
    0 => 'mixed',
  ),
  'co\\context::__unserialize' => 
  array (
    0 => 'mixed',
    'data' => 'array<array-key, mixed>',
  ),
  'co\\context::append' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
  ),
  'co\\context::asort' => 
  array (
    0 => 'mixed',
    'flags=' => 'int',
  ),
  'co\\context::count' => 
  array (
    0 => 'mixed',
  ),
  'co\\context::exchangearray' => 
  array (
    0 => 'mixed',
    'array' => 'array<array-key, mixed>|object',
  ),
  'co\\context::getarraycopy' => 
  array (
    0 => 'mixed',
  ),
  'co\\context::getflags' => 
  array (
    0 => 'mixed',
  ),
  'co\\context::getiterator' => 
  array (
    0 => 'mixed',
  ),
  'co\\context::getiteratorclass' => 
  array (
    0 => 'mixed',
  ),
  'co\\context::ksort' => 
  array (
    0 => 'mixed',
    'flags=' => 'int',
  ),
  'co\\context::natcasesort' => 
  array (
    0 => 'mixed',
  ),
  'co\\context::natsort' => 
  array (
    0 => 'mixed',
  ),
  'co\\context::offsetexists' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\context::offsetget' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\context::offsetset' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'co\\context::offsetunset' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\context::serialize' => 
  array (
    0 => 'mixed',
  ),
  'co\\context::setflags' => 
  array (
    0 => 'mixed',
    'flags' => 'int',
  ),
  'co\\context::setiteratorclass' => 
  array (
    0 => 'mixed',
    'iteratorClass' => 'string',
  ),
  'co\\context::uasort' => 
  array (
    0 => 'mixed',
    'callback' => 'callable',
  ),
  'co\\context::uksort' => 
  array (
    0 => 'mixed',
    'callback' => 'callable',
  ),
  'co\\context::unserialize' => 
  array (
    0 => 'mixed',
    'data' => 'string',
  ),
  'co\\defer' => 
  array (
    0 => 'mixed',
    'fn' => 'callable',
  ),
  'co\\fastcgi\\client::__construct' => 
  array (
    0 => 'void',
    'host' => 'string',
    'port=' => 'int',
    'ssl=' => 'bool',
  ),
  'co\\fastcgi\\client::call' => 
  array (
    0 => 'string',
    'url' => 'string',
    'path' => 'string',
    'data=' => 'mixed',
    'timeout=' => 'float',
  ),
  'co\\fastcgi\\client::execute' => 
  array (
    0 => 'Swoole\\FastCGI\\Response',
    'request' => 'Swoole\\FastCGI\\Request',
    'timeout=' => 'float',
  ),
  'co\\fastcgi\\client::ioexception' => 
  array (
    0 => 'void',
    'errno=' => 'int|null',
  ),
  'co\\fastcgi\\client::parseurl' => 
  array (
    0 => 'array<array-key, mixed>',
    'url' => 'string',
  ),
  'co\\fastcgi\\client\\exception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'co\\fastcgi\\client\\exception::__tostring' => 
  array (
    0 => 'string',
  ),
  'co\\fastcgi\\client\\exception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'co\\fastcgi\\client\\exception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'co\\fastcgi\\client\\exception::getfile' => 
  array (
    0 => 'string',
  ),
  'co\\fastcgi\\client\\exception::getline' => 
  array (
    0 => 'int',
  ),
  'co\\fastcgi\\client\\exception::getmessage' => 
  array (
    0 => 'string',
  ),
  'co\\fastcgi\\client\\exception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'co\\fastcgi\\client\\exception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'co\\fastcgi\\client\\exception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'co\\fastcgi\\proxy::__construct' => 
  array (
    0 => 'void',
    'url' => 'string',
    'documentRoot=' => 'string',
  ),
  'co\\fastcgi\\proxy::getparam' => 
  array (
    0 => 'null|string',
    'name' => 'string',
  ),
  'co\\fastcgi\\proxy::getparams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'co\\fastcgi\\proxy::pass' => 
  array (
    0 => 'void',
    'userRequest' => 'Swoole\\FastCGI\\HttpRequest|Swoole\\Http\\Request',
    'userResponse' => 'Swoole\\Http\\Response',
  ),
  'co\\fastcgi\\proxy::staticfilefiltrate' => 
  array (
    0 => 'bool',
    'request' => 'Swoole\\FastCGI\\HttpRequest',
    'userResponse' => 'Swoole\\Http\\Response',
  ),
  'co\\fastcgi\\proxy::translaterequest' => 
  array (
    0 => 'Swoole\\FastCGI\\HttpRequest',
    'userRequest' => 'Swoole\\Http\\Request',
  ),
  'co\\fastcgi\\proxy::translateresponse' => 
  array (
    0 => 'void',
    'response' => 'Swoole\\FastCGI\\HttpResponse',
    'userResponse' => 'Swoole\\Http\\Response',
  ),
  'co\\fastcgi\\proxy::withaddedparams' => 
  array (
    0 => 'self',
    'params' => 'array<array-key, mixed>',
  ),
  'co\\fastcgi\\proxy::withhttps' => 
  array (
    0 => 'self',
    'https' => 'bool',
  ),
  'co\\fastcgi\\proxy::withindex' => 
  array (
    0 => 'self',
    'index' => 'string',
  ),
  'co\\fastcgi\\proxy::withoutparam' => 
  array (
    0 => 'self',
    'name' => 'string',
  ),
  'co\\fastcgi\\proxy::withparam' => 
  array (
    0 => 'self',
    'name' => 'string',
    'value' => 'string',
  ),
  'co\\fastcgi\\proxy::withparams' => 
  array (
    0 => 'self',
    'params' => 'array<array-key, mixed>',
  ),
  'co\\fastcgi\\proxy::withstaticfilefilter' => 
  array (
    0 => 'self',
    'filter' => 'callable|null',
  ),
  'co\\fastcgi\\proxy::withtimeout' => 
  array (
    0 => 'self',
    'timeout' => 'float',
  ),
  'co\\go' => 
  array (
    0 => 'mixed',
    'fn' => 'callable',
    '...args=' => 'mixed',
  ),
  'co\\http2\\client::__construct' => 
  array (
    0 => 'void',
    'host' => 'string',
    'port=' => 'int',
    'open_ssl=' => 'bool',
  ),
  'co\\http2\\client::__destruct' => 
  array (
    0 => 'mixed',
  ),
  'co\\http2\\client::close' => 
  array (
    0 => 'bool',
  ),
  'co\\http2\\client::connect' => 
  array (
    0 => 'bool',
  ),
  'co\\http2\\client::goaway' => 
  array (
    0 => 'bool',
    'error_code=' => 'int',
    'debug_data=' => 'string',
  ),
  'co\\http2\\client::isstreamexist' => 
  array (
    0 => 'bool',
    'stream_id' => 'int',
  ),
  'co\\http2\\client::ping' => 
  array (
    0 => 'bool',
  ),
  'co\\http2\\client::read' => 
  array (
    0 => 'Swoole\\Http2\\Response|false',
    'timeout=' => 'float',
  ),
  'co\\http2\\client::recv' => 
  array (
    0 => 'Swoole\\Http2\\Response|false',
    'timeout=' => 'float',
  ),
  'co\\http2\\client::send' => 
  array (
    0 => 'false|int',
    'request' => 'Swoole\\Http2\\Request',
  ),
  'co\\http2\\client::set' => 
  array (
    0 => 'bool',
    'settings' => 'array<array-key, mixed>',
  ),
  'co\\http2\\client::stats' => 
  array (
    0 => 'array<array-key, mixed>|int',
    'key=' => 'string',
  ),
  'co\\http2\\client::write' => 
  array (
    0 => 'bool',
    'stream_id' => 'int',
    'data' => 'mixed',
    'end_stream=' => 'bool',
  ),
  'co\\http2\\client\\exception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'co\\http2\\client\\exception::__tostring' => 
  array (
    0 => 'string',
  ),
  'co\\http2\\client\\exception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'co\\http2\\client\\exception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'co\\http2\\client\\exception::getfile' => 
  array (
    0 => 'string',
  ),
  'co\\http2\\client\\exception::getline' => 
  array (
    0 => 'int',
  ),
  'co\\http2\\client\\exception::getmessage' => 
  array (
    0 => 'string',
  ),
  'co\\http2\\client\\exception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'co\\http2\\client\\exception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'co\\http2\\client\\exception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'co\\http\\client::__construct' => 
  array (
    0 => 'void',
    'host' => 'string',
    'port=' => 'int',
    'ssl=' => 'bool',
  ),
  'co\\http\\client::__destruct' => 
  array (
    0 => 'mixed',
  ),
  'co\\http\\client::adddata' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'name' => 'string',
    'type=' => 'null|string',
    'filename=' => 'null|string',
  ),
  'co\\http\\client::addfile' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'name' => 'string',
    'type=' => 'null|string',
    'filename=' => 'null|string',
    'offset=' => 'int',
    'length=' => 'int',
  ),
  'co\\http\\client::close' => 
  array (
    0 => 'bool',
  ),
  'co\\http\\client::download' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'file' => 'string',
    'offset=' => 'int',
  ),
  'co\\http\\client::execute' => 
  array (
    0 => 'bool',
    'path' => 'string',
  ),
  'co\\http\\client::get' => 
  array (
    0 => 'bool',
    'path' => 'string',
  ),
  'co\\http\\client::getbody' => 
  array (
    0 => 'false|string',
  ),
  'co\\http\\client::getcookies' => 
  array (
    0 => 'array<array-key, mixed>|false|null',
  ),
  'co\\http\\client::getdefer' => 
  array (
    0 => 'bool',
  ),
  'co\\http\\client::getheaderout' => 
  array (
    0 => 'false|string',
  ),
  'co\\http\\client::getheaders' => 
  array (
    0 => 'array<array-key, mixed>|false|null',
  ),
  'co\\http\\client::getpeercert' => 
  array (
    0 => 'false|string',
  ),
  'co\\http\\client::getpeername' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'co\\http\\client::getsockname' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'co\\http\\client::getstatuscode' => 
  array (
    0 => 'false|int',
  ),
  'co\\http\\client::post' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'data' => 'mixed',
  ),
  'co\\http\\client::push' => 
  array (
    0 => 'bool',
    'data' => 'mixed',
    'opcode=' => 'int',
    'flags=' => 'int',
  ),
  'co\\http\\client::recv' => 
  array (
    0 => 'Swoole\\WebSocket\\Frame|bool',
    'timeout=' => 'float',
  ),
  'co\\http\\client::set' => 
  array (
    0 => 'bool',
    'settings' => 'array<array-key, mixed>',
  ),
  'co\\http\\client::setbasicauth' => 
  array (
    0 => 'void',
    'username' => 'string',
    'password' => 'string',
  ),
  'co\\http\\client::setcookies' => 
  array (
    0 => 'bool',
    'cookies' => 'array<array-key, mixed>',
  ),
  'co\\http\\client::setdata' => 
  array (
    0 => 'bool',
    'data' => 'array<array-key, mixed>|string',
  ),
  'co\\http\\client::setdefer' => 
  array (
    0 => 'bool',
    'defer=' => 'bool',
  ),
  'co\\http\\client::setheaders' => 
  array (
    0 => 'bool',
    'headers' => 'array<array-key, mixed>',
  ),
  'co\\http\\client::setmethod' => 
  array (
    0 => 'bool',
    'method' => 'string',
  ),
  'co\\http\\client::upgrade' => 
  array (
    0 => 'bool',
    'path' => 'string',
  ),
  'co\\http\\client\\exception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'co\\http\\client\\exception::__tostring' => 
  array (
    0 => 'string',
  ),
  'co\\http\\client\\exception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'co\\http\\client\\exception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'co\\http\\client\\exception::getfile' => 
  array (
    0 => 'string',
  ),
  'co\\http\\client\\exception::getline' => 
  array (
    0 => 'int',
  ),
  'co\\http\\client\\exception::getmessage' => 
  array (
    0 => 'string',
  ),
  'co\\http\\client\\exception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'co\\http\\client\\exception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'co\\http\\client\\exception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'co\\http\\server::__construct' => 
  array (
    0 => 'void',
    'host' => 'string',
    'port=' => 'int',
    'ssl=' => 'bool',
    'reuse_port=' => 'bool',
  ),
  'co\\http\\server::handle' => 
  array (
    0 => 'void',
    'pattern' => 'string',
    'callback' => 'callable',
  ),
  'co\\http\\server::onaccept' => 
  array (
    0 => 'void',
    'conn' => 'Swoole\\Coroutine\\Socket',
  ),
  'co\\http\\server::set' => 
  array (
    0 => 'bool',
    'settings' => 'array<array-key, mixed>',
  ),
  'co\\http\\server::shutdown' => 
  array (
    0 => 'void',
  ),
  'co\\http\\server::start' => 
  array (
    0 => 'bool',
  ),
  'co\\iterator::__construct' => 
  array (
    0 => 'void',
    'array=' => 'array<array-key, mixed>|object',
    'flags=' => 'int',
  ),
  'co\\iterator::__debuginfo' => 
  array (
    0 => 'mixed',
  ),
  'co\\iterator::__serialize' => 
  array (
    0 => 'mixed',
  ),
  'co\\iterator::__unserialize' => 
  array (
    0 => 'mixed',
    'data' => 'array<array-key, mixed>',
  ),
  'co\\iterator::append' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
  ),
  'co\\iterator::asort' => 
  array (
    0 => 'mixed',
    'flags=' => 'int',
  ),
  'co\\iterator::count' => 
  array (
    0 => 'mixed',
  ),
  'co\\iterator::current' => 
  array (
    0 => 'mixed',
  ),
  'co\\iterator::getarraycopy' => 
  array (
    0 => 'mixed',
  ),
  'co\\iterator::getflags' => 
  array (
    0 => 'mixed',
  ),
  'co\\iterator::key' => 
  array (
    0 => 'mixed',
  ),
  'co\\iterator::ksort' => 
  array (
    0 => 'mixed',
    'flags=' => 'int',
  ),
  'co\\iterator::natcasesort' => 
  array (
    0 => 'mixed',
  ),
  'co\\iterator::natsort' => 
  array (
    0 => 'mixed',
  ),
  'co\\iterator::next' => 
  array (
    0 => 'mixed',
  ),
  'co\\iterator::offsetexists' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\iterator::offsetget' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\iterator::offsetset' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'co\\iterator::offsetunset' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\iterator::rewind' => 
  array (
    0 => 'mixed',
  ),
  'co\\iterator::seek' => 
  array (
    0 => 'mixed',
    'offset' => 'int',
  ),
  'co\\iterator::serialize' => 
  array (
    0 => 'mixed',
  ),
  'co\\iterator::setflags' => 
  array (
    0 => 'mixed',
    'flags' => 'int',
  ),
  'co\\iterator::uasort' => 
  array (
    0 => 'mixed',
    'callback' => 'callable',
  ),
  'co\\iterator::uksort' => 
  array (
    0 => 'mixed',
    'callback' => 'callable',
  ),
  'co\\iterator::unserialize' => 
  array (
    0 => 'mixed',
    'data' => 'string',
  ),
  'co\\iterator::valid' => 
  array (
    0 => 'mixed',
  ),
  'co\\mysql::__construct' => 
  array (
    0 => 'void',
  ),
  'co\\mysql::__destruct' => 
  array (
    0 => 'mixed',
  ),
  'co\\mysql::begin' => 
  array (
    0 => 'mixed',
    'timeout=' => 'mixed',
  ),
  'co\\mysql::close' => 
  array (
    0 => 'mixed',
  ),
  'co\\mysql::commit' => 
  array (
    0 => 'mixed',
    'timeout=' => 'mixed',
  ),
  'co\\mysql::connect' => 
  array (
    0 => 'mixed',
    'server_config=' => 'array<array-key, mixed>',
  ),
  'co\\mysql::escape' => 
  array (
    0 => 'mixed',
    'string' => 'mixed',
    'flags=' => 'mixed',
  ),
  'co\\mysql::fetch' => 
  array (
    0 => 'mixed',
  ),
  'co\\mysql::fetchall' => 
  array (
    0 => 'mixed',
  ),
  'co\\mysql::getdefer' => 
  array (
    0 => 'mixed',
  ),
  'co\\mysql::nextresult' => 
  array (
    0 => 'mixed',
  ),
  'co\\mysql::prepare' => 
  array (
    0 => 'mixed',
    'query' => 'mixed',
    'timeout=' => 'mixed',
  ),
  'co\\mysql::query' => 
  array (
    0 => 'mixed',
    'sql' => 'mixed',
    'timeout=' => 'mixed',
  ),
  'co\\mysql::recv' => 
  array (
    0 => 'mixed',
  ),
  'co\\mysql::rollback' => 
  array (
    0 => 'mixed',
    'timeout=' => 'mixed',
  ),
  'co\\mysql::setdefer' => 
  array (
    0 => 'mixed',
    'defer=' => 'mixed',
  ),
  'co\\mysql\\exception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'co\\mysql\\exception::__tostring' => 
  array (
    0 => 'string',
  ),
  'co\\mysql\\exception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'co\\mysql\\exception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'co\\mysql\\exception::getfile' => 
  array (
    0 => 'string',
  ),
  'co\\mysql\\exception::getline' => 
  array (
    0 => 'int',
  ),
  'co\\mysql\\exception::getmessage' => 
  array (
    0 => 'string',
  ),
  'co\\mysql\\exception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'co\\mysql\\exception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'co\\mysql\\exception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'co\\mysql\\statement::close' => 
  array (
    0 => 'mixed',
  ),
  'co\\mysql\\statement::execute' => 
  array (
    0 => 'mixed',
    'params=' => 'mixed',
    'timeout=' => 'mixed',
  ),
  'co\\mysql\\statement::fetch' => 
  array (
    0 => 'mixed',
    'timeout=' => 'mixed',
  ),
  'co\\mysql\\statement::fetchall' => 
  array (
    0 => 'mixed',
    'timeout=' => 'mixed',
  ),
  'co\\mysql\\statement::nextresult' => 
  array (
    0 => 'mixed',
    'timeout=' => 'mixed',
  ),
  'co\\mysql\\statement::recv' => 
  array (
    0 => 'mixed',
    'timeout=' => 'mixed',
  ),
  'co\\postgresql::__construct' => 
  array (
    0 => 'void',
  ),
  'co\\postgresql::__destruct' => 
  array (
    0 => 'mixed',
  ),
  'co\\postgresql::connect' => 
  array (
    0 => 'bool',
    'conninfo' => 'string',
    'timeout=' => 'float',
  ),
  'co\\postgresql::createlob' => 
  array (
    0 => 'false|int',
  ),
  'co\\postgresql::escape' => 
  array (
    0 => 'false|string',
    'string' => 'string',
  ),
  'co\\postgresql::escapeidentifier' => 
  array (
    0 => 'false|string',
    'string' => 'string',
  ),
  'co\\postgresql::escapeliteral' => 
  array (
    0 => 'false|string',
    'string' => 'string',
  ),
  'co\\postgresql::metadata' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'table_name' => 'string',
  ),
  'co\\postgresql::openlob' => 
  array (
    0 => 'mixed',
    'oid' => 'int',
    'mode=' => 'string',
  ),
  'co\\postgresql::prepare' => 
  array (
    0 => 'Swoole\\Coroutine\\PostgreSQLStatement|false',
    'query' => 'string',
  ),
  'co\\postgresql::query' => 
  array (
    0 => 'Swoole\\Coroutine\\PostgreSQLStatement|false',
    'query' => 'string',
  ),
  'co\\postgresql::unlinklob' => 
  array (
    0 => 'bool',
    'oid' => 'int',
  ),
  'co\\redis::__construct' => 
  array (
    0 => 'void',
    'config=' => 'mixed',
  ),
  'co\\redis::__destruct' => 
  array (
    0 => 'mixed',
  ),
  'co\\redis::append' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'co\\redis::auth' => 
  array (
    0 => 'mixed',
    'password' => 'mixed',
  ),
  'co\\redis::bgrewriteaof' => 
  array (
    0 => 'mixed',
  ),
  'co\\redis::bgsave' => 
  array (
    0 => 'mixed',
  ),
  'co\\redis::bitcount' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\redis::bitop' => 
  array (
    0 => 'mixed',
    'operation' => 'mixed',
    'ret_key' => 'mixed',
    'key' => 'mixed',
    'other_keys=' => 'mixed',
  ),
  'co\\redis::blpop' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'timeout_or_key' => 'mixed',
    'extra_args=' => 'mixed',
  ),
  'co\\redis::brpop' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'timeout_or_key' => 'mixed',
    'extra_args=' => 'mixed',
  ),
  'co\\redis::brpoplpush' => 
  array (
    0 => 'mixed',
    'src' => 'mixed',
    'dst' => 'mixed',
    'timeout' => 'mixed',
  ),
  'co\\redis::bzpopmax' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'timeout_or_key' => 'mixed',
    'extra_args=' => 'mixed',
  ),
  'co\\redis::bzpopmin' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'timeout_or_key' => 'mixed',
    'extra_args=' => 'mixed',
  ),
  'co\\redis::close' => 
  array (
    0 => 'mixed',
  ),
  'co\\redis::connect' => 
  array (
    0 => 'mixed',
    'host' => 'mixed',
    'port=' => 'mixed',
    'serialize=' => 'mixed',
  ),
  'co\\redis::dbsize' => 
  array (
    0 => 'mixed',
  ),
  'co\\redis::debug' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\redis::decr' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\redis::decrby' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'co\\redis::del' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'other_keys=' => 'mixed',
  ),
  'co\\redis::delete' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'other_keys=' => 'mixed',
  ),
  'co\\redis::dump' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\redis::eval' => 
  array (
    0 => 'mixed',
    'script' => 'mixed',
    'args=' => 'mixed',
    'num_keys=' => 'mixed',
  ),
  'co\\redis::evalsha' => 
  array (
    0 => 'mixed',
    'script_sha' => 'mixed',
    'args=' => 'mixed',
    'num_keys=' => 'mixed',
  ),
  'co\\redis::exec' => 
  array (
    0 => 'mixed',
  ),
  'co\\redis::exists' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'other_keys=' => 'mixed',
  ),
  'co\\redis::expire' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'integer' => 'mixed',
  ),
  'co\\redis::expireat' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'timestamp' => 'mixed',
  ),
  'co\\redis::flushall' => 
  array (
    0 => 'mixed',
  ),
  'co\\redis::flushdb' => 
  array (
    0 => 'mixed',
  ),
  'co\\redis::get' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\redis::getauth' => 
  array (
    0 => 'mixed',
  ),
  'co\\redis::getbit' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'offset' => 'mixed',
  ),
  'co\\redis::getdbnum' => 
  array (
    0 => 'mixed',
  ),
  'co\\redis::getdefer' => 
  array (
    0 => 'mixed',
  ),
  'co\\redis::getkeys' => 
  array (
    0 => 'mixed',
    'pattern' => 'mixed',
  ),
  'co\\redis::getoptions' => 
  array (
    0 => 'mixed',
  ),
  'co\\redis::getrange' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'start' => 'mixed',
    'end' => 'mixed',
  ),
  'co\\redis::getset' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'co\\redis::hdel' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'member' => 'mixed',
    'other_members=' => 'mixed',
  ),
  'co\\redis::hexists' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'member' => 'mixed',
  ),
  'co\\redis::hget' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'member' => 'mixed',
  ),
  'co\\redis::hgetall' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\redis::hincrby' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'member' => 'mixed',
    'value' => 'mixed',
  ),
  'co\\redis::hincrbyfloat' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'member' => 'mixed',
    'value' => 'mixed',
  ),
  'co\\redis::hkeys' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\redis::hlen' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\redis::hmget' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'keys' => 'mixed',
  ),
  'co\\redis::hmset' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'pairs' => 'mixed',
  ),
  'co\\redis::hset' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'member' => 'mixed',
    'value' => 'mixed',
  ),
  'co\\redis::hsetnx' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'member' => 'mixed',
    'value' => 'mixed',
  ),
  'co\\redis::hvals' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\redis::incr' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\redis::incrby' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'co\\redis::incrbyfloat' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'co\\redis::keys' => 
  array (
    0 => 'mixed',
    'pattern' => 'mixed',
  ),
  'co\\redis::lastsave' => 
  array (
    0 => 'mixed',
  ),
  'co\\redis::lget' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'index' => 'mixed',
  ),
  'co\\redis::lgetrange' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'start' => 'mixed',
    'end' => 'mixed',
  ),
  'co\\redis::lindex' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'integer' => 'mixed',
  ),
  'co\\redis::linsert' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'position' => 'mixed',
    'pivot' => 'mixed',
    'value' => 'mixed',
  ),
  'co\\redis::listtrim' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'start' => 'mixed',
    'stop' => 'mixed',
  ),
  'co\\redis::llen' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\redis::lpop' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\redis::lpush' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'co\\redis::lpushx' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'co\\redis::lrange' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'start' => 'mixed',
    'end' => 'mixed',
  ),
  'co\\redis::lrem' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
    'count' => 'mixed',
  ),
  'co\\redis::lremove' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
    'count' => 'mixed',
  ),
  'co\\redis::lset' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'index' => 'mixed',
    'value' => 'mixed',
  ),
  'co\\redis::lsize' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\redis::ltrim' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'start' => 'mixed',
    'stop' => 'mixed',
  ),
  'co\\redis::mget' => 
  array (
    0 => 'mixed',
    'keys' => 'mixed',
  ),
  'co\\redis::move' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'dbindex' => 'mixed',
  ),
  'co\\redis::mset' => 
  array (
    0 => 'mixed',
    'pairs' => 'mixed',
  ),
  'co\\redis::msetnx' => 
  array (
    0 => 'mixed',
    'pairs' => 'mixed',
  ),
  'co\\redis::multi' => 
  array (
    0 => 'mixed',
  ),
  'co\\redis::persist' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\redis::pexpire' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'timestamp' => 'mixed',
  ),
  'co\\redis::pexpireat' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'timestamp' => 'mixed',
  ),
  'co\\redis::pfadd' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'elements' => 'mixed',
  ),
  'co\\redis::pfcount' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\redis::pfmerge' => 
  array (
    0 => 'mixed',
    'dstkey' => 'mixed',
    'keys' => 'mixed',
  ),
  'co\\redis::ping' => 
  array (
    0 => 'mixed',
  ),
  'co\\redis::psetex' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'expire' => 'mixed',
    'value' => 'mixed',
  ),
  'co\\redis::psubscribe' => 
  array (
    0 => 'mixed',
    'patterns' => 'mixed',
  ),
  'co\\redis::pttl' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\redis::publish' => 
  array (
    0 => 'mixed',
    'channel' => 'mixed',
    'message' => 'mixed',
  ),
  'co\\redis::punsubscribe' => 
  array (
    0 => 'mixed',
    'patterns' => 'mixed',
  ),
  'co\\redis::randomkey' => 
  array (
    0 => 'mixed',
  ),
  'co\\redis::recv' => 
  array (
    0 => 'mixed',
  ),
  'co\\redis::rename' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'newkey' => 'mixed',
  ),
  'co\\redis::renamekey' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'newkey' => 'mixed',
  ),
  'co\\redis::renamenx' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'newkey' => 'mixed',
  ),
  'co\\redis::request' => 
  array (
    0 => 'mixed',
    'params' => 'array<array-key, mixed>',
  ),
  'co\\redis::restore' => 
  array (
    0 => 'mixed',
    'ttl' => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'co\\redis::role' => 
  array (
    0 => 'mixed',
  ),
  'co\\redis::rpop' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\redis::rpoplpush' => 
  array (
    0 => 'mixed',
    'src' => 'mixed',
    'dst' => 'mixed',
  ),
  'co\\redis::rpush' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'co\\redis::rpushx' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'co\\redis::sadd' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'co\\redis::save' => 
  array (
    0 => 'mixed',
  ),
  'co\\redis::scard' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\redis::scontains' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'co\\redis::script' => 
  array (
    0 => 'mixed',
    'cmd' => 'mixed',
    'args=' => 'mixed',
  ),
  'co\\redis::sdiff' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'other_keys=' => 'mixed',
  ),
  'co\\redis::sdiffstore' => 
  array (
    0 => 'mixed',
    'dst' => 'mixed',
    'key' => 'mixed',
    'other_keys=' => 'mixed',
  ),
  'co\\redis::select' => 
  array (
    0 => 'mixed',
    'dbindex' => 'mixed',
  ),
  'co\\redis::set' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
    'timeout=' => 'mixed',
    'opt=' => 'mixed',
  ),
  'co\\redis::setbit' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'offset' => 'mixed',
    'value' => 'mixed',
  ),
  'co\\redis::setdefer' => 
  array (
    0 => 'mixed',
    'defer' => 'mixed',
  ),
  'co\\redis::setex' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'expire' => 'mixed',
    'value' => 'mixed',
  ),
  'co\\redis::setnx' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'co\\redis::setoptions' => 
  array (
    0 => 'mixed',
    'options' => 'mixed',
  ),
  'co\\redis::setrange' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'offset' => 'mixed',
    'value' => 'mixed',
  ),
  'co\\redis::settimeout' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'timeout' => 'mixed',
  ),
  'co\\redis::sgetmembers' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\redis::sinter' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'other_keys=' => 'mixed',
  ),
  'co\\redis::sinterstore' => 
  array (
    0 => 'mixed',
    'dst' => 'mixed',
    'key' => 'mixed',
    'other_keys=' => 'mixed',
  ),
  'co\\redis::sismember' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'co\\redis::smembers' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\redis::smove' => 
  array (
    0 => 'mixed',
    'src' => 'mixed',
    'dst' => 'mixed',
    'value' => 'mixed',
  ),
  'co\\redis::spop' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\redis::srandmember' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'count=' => 'mixed',
  ),
  'co\\redis::srem' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'co\\redis::sremove' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'co\\redis::ssize' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\redis::strlen' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\redis::subscribe' => 
  array (
    0 => 'mixed',
    'channels' => 'mixed',
  ),
  'co\\redis::sunion' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'other_keys=' => 'mixed',
  ),
  'co\\redis::sunionstore' => 
  array (
    0 => 'mixed',
    'dst' => 'mixed',
    'key' => 'mixed',
    'other_keys=' => 'mixed',
  ),
  'co\\redis::time' => 
  array (
    0 => 'mixed',
  ),
  'co\\redis::ttl' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\redis::type' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\redis::unsubscribe' => 
  array (
    0 => 'mixed',
    'channels' => 'mixed',
  ),
  'co\\redis::unwatch' => 
  array (
    0 => 'mixed',
  ),
  'co\\redis::watch' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'other_keys=' => 'mixed',
  ),
  'co\\redis::xack' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'group_name' => 'mixed',
    'id' => 'mixed',
  ),
  'co\\redis::xadd' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'id' => 'mixed',
    'pairs' => 'mixed',
    'options=' => 'mixed',
  ),
  'co\\redis::xautoclaim' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'group_name' => 'mixed',
    'consumer_name' => 'mixed',
    'min_idle_time' => 'mixed',
    'start' => 'mixed',
    'options=' => 'mixed',
  ),
  'co\\redis::xclaim' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'group_name' => 'mixed',
    'consumer_name' => 'mixed',
    'min_idle_time' => 'mixed',
    'id' => 'mixed',
    'options=' => 'mixed',
  ),
  'co\\redis::xdel' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'id' => 'mixed',
  ),
  'co\\redis::xgroupcreate' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'group_name' => 'mixed',
    'id' => 'mixed',
    'mkstream=' => 'mixed',
  ),
  'co\\redis::xgroupcreateconsumer' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'group_name' => 'mixed',
    'consumer_name' => 'mixed',
  ),
  'co\\redis::xgroupdelconsumer' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'group_name' => 'mixed',
    'consumer_name' => 'mixed',
  ),
  'co\\redis::xgroupdestroy' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'group_name' => 'mixed',
  ),
  'co\\redis::xgroupsetid' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'group_name' => 'mixed',
    'id' => 'mixed',
  ),
  'co\\redis::xinfoconsumers' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'group_name' => 'mixed',
  ),
  'co\\redis::xinfogroups' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\redis::xinfostream' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\redis::xlen' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\redis::xpending' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'group_name' => 'mixed',
    'options=' => 'mixed',
  ),
  'co\\redis::xrange' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'start' => 'mixed',
    'end' => 'mixed',
    'count=' => 'mixed',
  ),
  'co\\redis::xread' => 
  array (
    0 => 'mixed',
    'streams' => 'mixed',
    'options=' => 'mixed',
  ),
  'co\\redis::xreadgroup' => 
  array (
    0 => 'mixed',
    'group_name' => 'mixed',
    'consumer_name' => 'mixed',
    'streams' => 'mixed',
    'options=' => 'mixed',
  ),
  'co\\redis::xrevrange' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'start' => 'mixed',
    'end' => 'mixed',
    'count=' => 'mixed',
  ),
  'co\\redis::xtrim' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'options=' => 'mixed',
  ),
  'co\\redis::zadd' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'score' => 'mixed',
    'value' => 'mixed',
  ),
  'co\\redis::zcard' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\redis::zcount' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'min' => 'mixed',
    'max' => 'mixed',
  ),
  'co\\redis::zdelete' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'member' => 'mixed',
    'other_members=' => 'mixed',
  ),
  'co\\redis::zdeleterangebyrank' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'start' => 'mixed',
    'end' => 'mixed',
  ),
  'co\\redis::zdeleterangebyscore' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'min' => 'mixed',
    'max' => 'mixed',
  ),
  'co\\redis::zincrby' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
    'member' => 'mixed',
  ),
  'co\\redis::zinter' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'keys' => 'mixed',
    'weights=' => 'mixed',
    'aggregate=' => 'mixed',
  ),
  'co\\redis::zinterstore' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'keys' => 'mixed',
    'weights=' => 'mixed',
    'aggregate=' => 'mixed',
  ),
  'co\\redis::zpopmax' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'count' => 'mixed',
  ),
  'co\\redis::zpopmin' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'count' => 'mixed',
  ),
  'co\\redis::zrange' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'start' => 'mixed',
    'end' => 'mixed',
    'scores=' => 'mixed',
  ),
  'co\\redis::zrangebylex' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'min' => 'mixed',
    'max' => 'mixed',
    'offset=' => 'mixed',
    'limit=' => 'mixed',
  ),
  'co\\redis::zrangebyscore' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'start' => 'mixed',
    'end' => 'mixed',
    'options=' => 'mixed',
  ),
  'co\\redis::zrank' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'member' => 'mixed',
  ),
  'co\\redis::zrem' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'member' => 'mixed',
    'other_members=' => 'mixed',
  ),
  'co\\redis::zremove' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'member' => 'mixed',
    'other_members=' => 'mixed',
  ),
  'co\\redis::zremrangebyrank' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'min' => 'mixed',
    'max' => 'mixed',
  ),
  'co\\redis::zremrangebyscore' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'min' => 'mixed',
    'max' => 'mixed',
  ),
  'co\\redis::zrevrange' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'start' => 'mixed',
    'end' => 'mixed',
    'scores=' => 'mixed',
  ),
  'co\\redis::zrevrangebylex' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'min' => 'mixed',
    'max' => 'mixed',
    'offset=' => 'mixed',
    'limit=' => 'mixed',
  ),
  'co\\redis::zrevrangebyscore' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'start' => 'mixed',
    'end' => 'mixed',
    'options=' => 'mixed',
  ),
  'co\\redis::zrevrank' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'member' => 'mixed',
  ),
  'co\\redis::zscore' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'member' => 'mixed',
  ),
  'co\\redis::zsize' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'co\\redis::zunion' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'keys' => 'mixed',
    'weights=' => 'mixed',
    'aggregate=' => 'mixed',
  ),
  'co\\redis::zunionstore' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'keys' => 'mixed',
    'weights=' => 'mixed',
    'aggregate=' => 'mixed',
  ),
  'co\\run' => 
  array (
    0 => 'mixed',
    'fn' => 'callable',
    '...args=' => 'mixed',
  ),
  'co\\scheduler::add' => 
  array (
    0 => 'void',
    'func' => 'callable',
    '...param=' => 'mixed',
  ),
  'co\\scheduler::getoptions' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'co\\scheduler::parallel' => 
  array (
    0 => 'void',
    'n' => 'int',
    'func' => 'callable',
    '...param=' => 'mixed',
  ),
  'co\\scheduler::set' => 
  array (
    0 => 'void',
    'settings' => 'array<array-key, mixed>',
  ),
  'co\\scheduler::start' => 
  array (
    0 => 'bool',
  ),
  'co\\server::__construct' => 
  array (
    0 => 'void',
    'host' => 'string',
    'port=' => 'int',
    'ssl=' => 'bool',
    'reuse_port=' => 'bool',
  ),
  'co\\server::handle' => 
  array (
    0 => 'void',
    'fn' => 'callable',
  ),
  'co\\server::set' => 
  array (
    0 => 'void',
    'setting' => 'array<array-key, mixed>',
  ),
  'co\\server::shutdown' => 
  array (
    0 => 'bool',
  ),
  'co\\server::start' => 
  array (
    0 => 'bool',
  ),
  'co\\server\\connection::__construct' => 
  array (
    0 => 'void',
    'conn' => 'Swoole\\Coroutine\\Socket',
  ),
  'co\\server\\connection::close' => 
  array (
    0 => 'bool',
  ),
  'co\\server\\connection::exportsocket' => 
  array (
    0 => 'Swoole\\Coroutine\\Socket',
  ),
  'co\\server\\connection::recv' => 
  array (
    0 => 'mixed',
    'timeout=' => 'float',
  ),
  'co\\server\\connection::send' => 
  array (
    0 => 'mixed',
    'data' => 'string',
  ),
  'co\\socket::__construct' => 
  array (
    0 => 'void',
    'domain' => 'int',
    'type' => 'int',
    'protocol=' => 'int',
  ),
  'co\\socket::accept' => 
  array (
    0 => 'Swoole\\Coroutine\\Socket|false',
    'timeout=' => 'float',
  ),
  'co\\socket::bind' => 
  array (
    0 => 'bool',
    'address' => 'string',
    'port=' => 'int',
  ),
  'co\\socket::cancel' => 
  array (
    0 => 'bool',
    'event=' => 'int',
  ),
  'co\\socket::checkliveness' => 
  array (
    0 => 'bool',
  ),
  'co\\socket::close' => 
  array (
    0 => 'bool',
  ),
  'co\\socket::connect' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port=' => 'int',
    'timeout=' => 'float',
  ),
  'co\\socket::getboundcid' => 
  array (
    0 => 'int',
    'event' => 'int',
  ),
  'co\\socket::getoption' => 
  array (
    0 => 'mixed',
    'level' => 'int',
    'opt_name' => 'int',
  ),
  'co\\socket::getpeername' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'co\\socket::getsockname' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'co\\socket::import' => 
  array (
    0 => 'Swoole\\Coroutine\\Socket|false',
    'stream' => 'mixed',
  ),
  'co\\socket::isclosed' => 
  array (
    0 => 'bool',
  ),
  'co\\socket::listen' => 
  array (
    0 => 'bool',
    'backlog=' => 'int',
  ),
  'co\\socket::peek' => 
  array (
    0 => 'false|string',
    'length=' => 'int',
  ),
  'co\\socket::readvector' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'io_vector' => 'array<array-key, mixed>',
    'timeout=' => 'float',
  ),
  'co\\socket::readvectorall' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'io_vector' => 'array<array-key, mixed>',
    'timeout=' => 'float',
  ),
  'co\\socket::recv' => 
  array (
    0 => 'false|string',
    'length=' => 'int',
    'timeout=' => 'float',
  ),
  'co\\socket::recvall' => 
  array (
    0 => 'false|string',
    'length=' => 'int',
    'timeout=' => 'float',
  ),
  'co\\socket::recvfrom' => 
  array (
    0 => 'false|string',
    '&peername' => 'mixed',
    'timeout=' => 'float',
  ),
  'co\\socket::recvline' => 
  array (
    0 => 'false|string',
    'length=' => 'int',
    'timeout=' => 'float',
  ),
  'co\\socket::recvpacket' => 
  array (
    0 => 'false|string',
    'timeout=' => 'float',
  ),
  'co\\socket::recvwithbuffer' => 
  array (
    0 => 'false|string',
    'length=' => 'int',
    'timeout=' => 'float',
  ),
  'co\\socket::send' => 
  array (
    0 => 'false|int',
    'data' => 'string',
    'timeout=' => 'float',
  ),
  'co\\socket::sendall' => 
  array (
    0 => 'false|int',
    'data' => 'string',
    'timeout=' => 'float',
  ),
  'co\\socket::sendfile' => 
  array (
    0 => 'bool',
    'file' => 'string',
    'offset=' => 'int',
    'length=' => 'int',
  ),
  'co\\socket::sendto' => 
  array (
    0 => 'false|int',
    'addr' => 'string',
    'port' => 'int',
    'data' => 'string',
  ),
  'co\\socket::setoption' => 
  array (
    0 => 'bool',
    'level' => 'int',
    'opt_name' => 'int',
    'opt_value' => 'mixed',
  ),
  'co\\socket::setprotocol' => 
  array (
    0 => 'bool',
    'settings' => 'array<array-key, mixed>',
  ),
  'co\\socket::shutdown' => 
  array (
    0 => 'bool',
    'how=' => 'int',
  ),
  'co\\socket::sslhandshake' => 
  array (
    0 => 'bool',
  ),
  'co\\socket::writevector' => 
  array (
    0 => 'false|int',
    'io_vector' => 'array<array-key, mixed>',
    'timeout=' => 'float',
  ),
  'co\\socket::writevectorall' => 
  array (
    0 => 'false|int',
    'io_vector' => 'array<array-key, mixed>',
    'timeout=' => 'float',
  ),
  'co\\socket\\exception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'co\\socket\\exception::__tostring' => 
  array (
    0 => 'string',
  ),
  'co\\socket\\exception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'co\\socket\\exception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'co\\socket\\exception::getfile' => 
  array (
    0 => 'string',
  ),
  'co\\socket\\exception::getline' => 
  array (
    0 => 'int',
  ),
  'co\\socket\\exception::getmessage' => 
  array (
    0 => 'string',
  ),
  'co\\socket\\exception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'co\\socket\\exception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'co\\socket\\exception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'co\\system::dnslookup' => 
  array (
    0 => 'false|string',
    'domain_name' => 'string',
    'timeout=' => 'float',
    'type=' => 'int',
  ),
  'co\\system::exec' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'command' => 'string',
    'get_error_stream=' => 'bool',
  ),
  'co\\system::fgets' => 
  array (
    0 => 'false|string',
    'handle' => 'mixed',
  ),
  'co\\system::fread' => 
  array (
    0 => 'false|string',
    'handle' => 'mixed',
    'length=' => 'int',
  ),
  'co\\system::fwrite' => 
  array (
    0 => 'false|int',
    'handle' => 'mixed',
    'data' => 'string',
    'length=' => 'int',
  ),
  'co\\system::getaddrinfo' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'domain' => 'string',
    'family=' => 'int',
    'socktype=' => 'int',
    'protocol=' => 'int',
    'service=' => 'null|string',
    'timeout=' => 'float',
  ),
  'co\\system::gethostbyname' => 
  array (
    0 => 'false|string',
    'domain_name' => 'string',
    'type=' => 'int',
    'timeout=' => 'float',
  ),
  'co\\system::readfile' => 
  array (
    0 => 'false|string',
    'filename' => 'string',
    'flag=' => 'int',
  ),
  'co\\system::sleep' => 
  array (
    0 => 'bool',
    'seconds' => 'float',
  ),
  'co\\system::statvfs' => 
  array (
    0 => 'array<array-key, mixed>',
    'path' => 'string',
  ),
  'co\\system::wait' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'timeout=' => 'float',
  ),
  'co\\system::waitevent' => 
  array (
    0 => 'false|int',
    'socket' => 'mixed',
    'events=' => 'int',
    'timeout=' => 'float',
  ),
  'co\\system::waitpid' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'pid' => 'int',
    'timeout=' => 'float',
  ),
  'co\\system::waitsignal' => 
  array (
    0 => 'bool',
    'signo' => 'int',
    'timeout=' => 'float',
  ),
  'co\\system::writefile' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
    'fileContent' => 'string',
    'flags=' => 'int',
  ),
  'co\\waitgroup::__construct' => 
  array (
    0 => 'void',
    'delta=' => 'int',
  ),
  'co\\waitgroup::add' => 
  array (
    0 => 'void',
    'delta=' => 'int',
  ),
  'co\\waitgroup::count' => 
  array (
    0 => 'int',
  ),
  'co\\waitgroup::done' => 
  array (
    0 => 'void',
  ),
  'co\\waitgroup::wait' => 
  array (
    0 => 'bool',
    'timeout=' => 'float',
  ),
  'collator::__construct' => 
  array (
    0 => 'void',
    'locale' => 'string',
  ),
  'collator::asort' => 
  array (
    0 => 'bool',
    '&array' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'collator::compare' => 
  array (
    0 => 'false|int',
    'string1' => 'string',
    'string2' => 'string',
  ),
  'collator::create' => 
  array (
    0 => 'Collator|null',
    'locale' => 'string',
  ),
  'collator::getattribute' => 
  array (
    0 => 'false|int',
    'attribute' => 'int',
  ),
  'collator::geterrorcode' => 
  array (
    0 => 'int',
  ),
  'collator::geterrormessage' => 
  array (
    0 => 'string',
  ),
  'collator::getlocale' => 
  array (
    0 => 'string',
    'type' => 'int',
  ),
  'collator::getsortkey' => 
  array (
    0 => 'false|string',
    'string' => 'string',
  ),
  'collator::getstrength' => 
  array (
    0 => 'int',
  ),
  'collator::setattribute' => 
  array (
    0 => 'bool',
    'attribute' => 'int',
    'value' => 'int',
  ),
  'collator::setstrength' => 
  array (
    0 => 'bool',
    'strength' => 'int',
  ),
  'collator::sort' => 
  array (
    0 => 'bool',
    '&array' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'collator::sortwithsortkeys' => 
  array (
    0 => 'bool',
    '&array' => 'array<array-key, mixed>',
  ),
  'collator_asort' => 
  array (
    0 => 'bool',
    'object' => 'collator',
    '&array' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'collator_compare' => 
  array (
    0 => 'int',
    'object' => 'collator',
    'string1' => 'string',
    'string2' => 'string',
  ),
  'collator_create' => 
  array (
    0 => 'Collator|null',
    'locale' => 'string',
  ),
  'collator_get_attribute' => 
  array (
    0 => 'false|int',
    'object' => 'collator',
    'attribute' => 'int',
  ),
  'collator_get_error_code' => 
  array (
    0 => 'int',
    'object' => 'collator',
  ),
  'collator_get_error_message' => 
  array (
    0 => 'string',
    'object' => 'collator',
  ),
  'collator_get_locale' => 
  array (
    0 => 'string',
    'object' => 'collator',
    'type' => 'int',
  ),
  'collator_get_sort_key' => 
  array (
    0 => 'string',
    'object' => 'collator',
    'string' => 'string',
  ),
  'collator_get_strength' => 
  array (
    0 => 'int',
    'object' => 'collator',
  ),
  'collator_set_attribute' => 
  array (
    0 => 'bool',
    'object' => 'collator',
    'attribute' => 'int',
    'value' => 'int',
  ),
  'collator_set_strength' => 
  array (
    0 => 'bool',
    'object' => 'collator',
    'strength' => 'int',
  ),
  'collator_sort' => 
  array (
    0 => 'bool',
    'object' => 'collator',
    '&array' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'collator_sort_with_sort_keys' => 
  array (
    0 => 'bool',
    'object' => 'collator',
    '&array' => 'array<array-key, mixed>',
  ),
  'collectable::isgarbage' => 
  array (
    0 => 'bool',
  ),
  'collectable::setgarbage' => 
  array (
    0 => 'void',
  ),
  'colorobj::sethex' => 
  array (
    0 => 'int',
    'hex' => 'string',
  ),
  'colorobj::tohex' => 
  array (
    0 => 'string',
  ),
  'com::__call' => 
  array (
    0 => 'mixed',
    'name' => 'mixed',
    'args' => 'mixed',
  ),
  'com::__construct' => 
  array (
    0 => 'void',
    'module_name' => 'string',
    'server_name=' => 'mixed',
    'codepage=' => 'int',
    'typelib=' => 'string',
  ),
  'com::__get' => 
  array (
    0 => 'mixed',
    'name' => 'mixed',
  ),
  'com::__set' => 
  array (
    0 => 'void',
    'name' => 'mixed',
    'value' => 'mixed',
  ),
  'com_addref' => 
  array (
    0 => 'mixed',
  ),
  'com_create_guid' => 
  array (
    0 => 'string',
  ),
  'com_event_sink' => 
  array (
    0 => 'bool',
    'variant' => 'VARIANT',
    'sink_object' => 'object',
    'sink_interface=' => 'mixed',
  ),
  'com_get_active_object' => 
  array (
    0 => 'VARIANT',
    'prog_id' => 'string',
    'codepage=' => 'int',
  ),
  'com_isenum' => 
  array (
    0 => 'bool',
    'com_module' => 'variant',
  ),
  'com_load_typelib' => 
  array (
    0 => 'bool',
    'typelib_name' => 'string',
    'case_insensitive=' => 'true',
  ),
  'com_message_pump' => 
  array (
    0 => 'bool',
    'timeout_milliseconds=' => 'int',
  ),
  'com_print_typeinfo' => 
  array (
    0 => 'bool',
    'variant' => 'object',
    'dispatch_interface=' => 'string',
    'display_sink=' => 'bool',
  ),
  'commonmark\\cql::__invoke' => 
  array (
    0 => 'mixed',
    'root' => 'CommonMark\\Node',
    'handler' => 'callable',
  ),
  'commonmark\\interfaces\\ivisitable::accept' => 
  array (
    0 => 'void',
    'visitor' => 'CommonMark\\Interfaces\\IVisitor',
  ),
  'commonmark\\interfaces\\ivisitor::enter' => 
  array (
    0 => 'IVisitable|int|null',
    'visitable' => 'IVisitable',
  ),
  'commonmark\\interfaces\\ivisitor::leave' => 
  array (
    0 => 'IVisitable|int|null',
    'visitable' => 'IVisitable',
  ),
  'commonmark\\node::accept' => 
  array (
    0 => 'void',
    'visitor' => 'CommonMark\\Interfaces\\IVisitor',
  ),
  'commonmark\\node::appendchild' => 
  array (
    0 => 'CommonMark\\Node',
    'child' => 'CommonMark\\Node',
  ),
  'commonmark\\node::insertafter' => 
  array (
    0 => 'CommonMark\\Node',
    'sibling' => 'CommonMark\\Node',
  ),
  'commonmark\\node::insertbefore' => 
  array (
    0 => 'CommonMark\\Node',
    'sibling' => 'CommonMark\\Node',
  ),
  'commonmark\\node::prependchild' => 
  array (
    0 => 'CommonMark\\Node',
    'child' => 'CommonMark\\Node',
  ),
  'commonmark\\node::replace' => 
  array (
    0 => 'CommonMark\\Node',
    'target' => 'CommonMark\\Node',
  ),
  'commonmark\\node::unlink' => 
  array (
    0 => 'void',
  ),
  'commonmark\\parse' => 
  array (
    0 => 'CommonMark\\Node',
    'content' => 'string',
    'options=' => 'int',
  ),
  'commonmark\\parser::finish' => 
  array (
    0 => 'CommonMark\\Node',
  ),
  'commonmark\\parser::parse' => 
  array (
    0 => 'void',
    'buffer' => 'string',
  ),
  'commonmark\\render' => 
  array (
    0 => 'string',
    'node' => 'CommonMark\\Node',
    'options=' => 'int',
    'width=' => 'int',
  ),
  'commonmark\\render\\html' => 
  array (
    0 => 'string',
    'node' => 'CommonMark\\Node',
    'options=' => 'int',
  ),
  'commonmark\\render\\latex' => 
  array (
    0 => 'string',
    'node' => 'CommonMark\\Node',
    'options=' => 'int',
    'width=' => 'int',
  ),
  'commonmark\\render\\man' => 
  array (
    0 => 'string',
    'node' => 'CommonMark\\Node',
    'options=' => 'int',
    'width=' => 'int',
  ),
  'commonmark\\render\\xml' => 
  array (
    0 => 'string',
    'node' => 'CommonMark\\Node',
    'options=' => 'int',
  ),
  'compact' => 
  array (
    0 => 'array<string, mixed>',
    'var_name' => 'array<array-key, mixed>|string',
    '...var_names=' => 'array<array-key, mixed>|string',
  ),
  'compersisthelper::__construct' => 
  array (
    0 => 'void',
    'variant' => 'object',
  ),
  'compersisthelper::getcurfile' => 
  array (
    0 => 'string',
  ),
  'compersisthelper::getcurfilename' => 
  array (
    0 => 'string',
  ),
  'compersisthelper::getmaxstreamsize' => 
  array (
    0 => 'int',
  ),
  'compersisthelper::initnew' => 
  array (
    0 => 'int',
  ),
  'compersisthelper::loadfromfile' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'flags' => 'int',
  ),
  'compersisthelper::loadfromstream' => 
  array (
    0 => 'mixed',
    'stream' => 'mixed',
  ),
  'compersisthelper::savetofile' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'remember' => 'bool',
  ),
  'compersisthelper::savetostream' => 
  array (
    0 => 'int',
    'stream' => 'mixed',
  ),
  'compileerror::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'compileerror::__tostring' => 
  array (
    0 => 'string',
  ),
  'compileerror::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'compileerror::getcode' => 
  array (
    0 => 'mixed',
  ),
  'compileerror::getfile' => 
  array (
    0 => 'string',
  ),
  'compileerror::getline' => 
  array (
    0 => 'int',
  ),
  'compileerror::getmessage' => 
  array (
    0 => 'string',
  ),
  'compileerror::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'compileerror::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'compileerror::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'componere\\abstract\\definition::addinterface' => 
  array (
    0 => 'Componere\\Abstract\\Definition',
    'interface' => 'string',
  ),
  'componere\\abstract\\definition::addmethod' => 
  array (
    0 => 'Componere\\Abstract\\Definition',
    'name' => 'string',
    'method' => 'Componere\\Method',
  ),
  'componere\\abstract\\definition::addtrait' => 
  array (
    0 => 'Componere\\Abstract\\Definition',
    'trait' => 'string',
  ),
  'componere\\abstract\\definition::getreflector' => 
  array (
    0 => 'ReflectionClass',
  ),
  'componere\\cast' => 
  array (
    0 => 'object',
    'arg1' => 'string',
    'object' => 'object',
  ),
  'componere\\cast_by_ref' => 
  array (
    0 => 'object',
    'arg1' => 'string',
    'object' => 'object',
  ),
  'componere\\definition::addconstant' => 
  array (
    0 => 'Componere\\Definition',
    'name' => 'string',
    'value' => 'Componere\\Value',
  ),
  'componere\\definition::addproperty' => 
  array (
    0 => 'Componere\\Definition',
    'name' => 'string',
    'value' => 'Componere\\Value',
  ),
  'componere\\definition::getclosure' => 
  array (
    0 => 'Closure',
    'name' => 'string',
  ),
  'componere\\definition::getclosures' => 
  array (
    0 => 'array<array-key, Closure>',
  ),
  'componere\\definition::isregistered' => 
  array (
    0 => 'bool',
  ),
  'componere\\definition::register' => 
  array (
    0 => 'void',
  ),
  'componere\\method::getreflector' => 
  array (
    0 => 'ReflectionMethod',
  ),
  'componere\\method::setprivate' => 
  array (
    0 => 'Method',
  ),
  'componere\\method::setprotected' => 
  array (
    0 => 'Method',
  ),
  'componere\\method::setstatic' => 
  array (
    0 => 'Method',
  ),
  'componere\\patch::apply' => 
  array (
    0 => 'void',
  ),
  'componere\\patch::derive' => 
  array (
    0 => 'Componere\\Patch',
    'instance' => 'object',
  ),
  'componere\\patch::getclosure' => 
  array (
    0 => 'Closure',
    'name' => 'string',
  ),
  'componere\\patch::getclosures' => 
  array (
    0 => 'array<array-key, Closure>',
  ),
  'componere\\patch::isapplied' => 
  array (
    0 => 'bool',
  ),
  'componere\\patch::revert' => 
  array (
    0 => 'void',
  ),
  'componere\\value::hasdefault' => 
  array (
    0 => 'bool',
  ),
  'componere\\value::isprivate' => 
  array (
    0 => 'bool',
  ),
  'componere\\value::isprotected' => 
  array (
    0 => 'bool',
  ),
  'componere\\value::isstatic' => 
  array (
    0 => 'bool',
  ),
  'componere\\value::setprivate' => 
  array (
    0 => 'Value',
  ),
  'componere\\value::setprotected' => 
  array (
    0 => 'Value',
  ),
  'componere\\value::setstatic' => 
  array (
    0 => 'Value',
  ),
  'cond::broadcast' => 
  array (
    0 => 'bool',
    'condition' => 'long',
  ),
  'cond::create' => 
  array (
    0 => 'long',
  ),
  'cond::destroy' => 
  array (
    0 => 'bool',
    'condition' => 'long',
  ),
  'cond::signal' => 
  array (
    0 => 'bool',
    'condition' => 'long',
  ),
  'cond::wait' => 
  array (
    0 => 'bool',
    'condition' => 'long',
    'mutex' => 'long',
    'timeout=' => 'long',
  ),
  'confirm_pdo_ibm_compiled' => 
  array (
    0 => 'mixed',
  ),
  'connection_aborted' => 
  array (
    0 => 'int',
  ),
  'connection_status' => 
  array (
    0 => 'int',
  ),
  'connection_timeout' => 
  array (
    0 => 'int',
  ),
  'constant' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'convert_uudecode' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'convert_uuencode' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'copy' => 
  array (
    0 => 'bool',
    'from' => 'string',
    'to' => 'string',
    'context=' => 'resource',
  ),
  'cos' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'cosh' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'couchbase\\analyticsexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\analyticsexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\analyticsexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\analyticsexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\analyticsexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\analyticsexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\analyticsexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\analyticsexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\analyticsexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\analyticsexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\analyticsexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\analyticsexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\analyticsindexmanager::connectlink' => 
  array (
    0 => 'mixed',
    'options=' => 'Couchbase\\ConnectAnalyticsLinkOptions|null',
  ),
  'couchbase\\analyticsindexmanager::createdataset' => 
  array (
    0 => 'mixed',
    'datasetName' => 'string',
    'bucketName' => 'string',
    'options=' => 'Couchbase\\CreateAnalyticsDatasetOptions|null',
  ),
  'couchbase\\analyticsindexmanager::createdataverse' => 
  array (
    0 => 'mixed',
    'dataverseName' => 'string',
    'options=' => 'Couchbase\\CreateAnalyticsDataverseOptions|null',
  ),
  'couchbase\\analyticsindexmanager::createindex' => 
  array (
    0 => 'mixed',
    'datasetName' => 'string',
    'indexName' => 'string',
    'fields' => 'array<array-key, mixed>',
    'options=' => 'Couchbase\\CreateAnalyticsIndexOptions|null',
  ),
  'couchbase\\analyticsindexmanager::createlink' => 
  array (
    0 => 'mixed',
    'link' => 'Couchbase\\AnalyticsLink',
    'options=' => 'Couchbase\\CreateAnalyticsLinkOptions|null',
  ),
  'couchbase\\analyticsindexmanager::disconnectlink' => 
  array (
    0 => 'mixed',
    'options=' => 'Couchbase\\DisconnectAnalyticsLinkOptions|null',
  ),
  'couchbase\\analyticsindexmanager::dropdataset' => 
  array (
    0 => 'mixed',
    'datasetName' => 'string',
    'options=' => 'Couchbase\\DropAnalyticsDatasetOptions|null',
  ),
  'couchbase\\analyticsindexmanager::dropdataverse' => 
  array (
    0 => 'mixed',
    'dataverseName' => 'string',
    'options=' => 'Couchbase\\DropAnalyticsDataverseOptions|null',
  ),
  'couchbase\\analyticsindexmanager::dropindex' => 
  array (
    0 => 'mixed',
    'datasetName' => 'string',
    'indexName' => 'string',
    'options=' => 'Couchbase\\DropAnalyticsIndexOptions|null',
  ),
  'couchbase\\analyticsindexmanager::droplink' => 
  array (
    0 => 'mixed',
    'linkName' => 'string',
    'dataverseName' => 'string',
    'options=' => 'Couchbase\\DropAnalyticsLinkOptions|null',
  ),
  'couchbase\\analyticsindexmanager::getalldatasets' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\analyticsindexmanager::getallindexes' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\analyticsindexmanager::getlinks' => 
  array (
    0 => 'mixed',
    'options=' => 'Couchbase\\GetAnalyticsLinksOptions|null',
  ),
  'couchbase\\analyticsindexmanager::getpendingmutations' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\analyticsindexmanager::replacelink' => 
  array (
    0 => 'mixed',
    'link' => 'Couchbase\\AnalyticsLink',
    'options=' => 'Couchbase\\ReplaceAnalyticsLinkOptions|null',
  ),
  'couchbase\\analyticsoptions::clientcontextid' => 
  array (
    0 => 'Couchbase\\AnalyticsOptions',
    'value' => 'string',
  ),
  'couchbase\\analyticsoptions::namedparameters' => 
  array (
    0 => 'Couchbase\\AnalyticsOptions',
    'pairs' => 'array<array-key, mixed>',
  ),
  'couchbase\\analyticsoptions::positionalparameters' => 
  array (
    0 => 'Couchbase\\AnalyticsOptions',
    'args' => 'array<array-key, mixed>',
  ),
  'couchbase\\analyticsoptions::priority' => 
  array (
    0 => 'Couchbase\\AnalyticsOptions',
    'urgent' => 'bool',
  ),
  'couchbase\\analyticsoptions::raw' => 
  array (
    0 => 'Couchbase\\AnalyticsOptions',
    'key' => 'string',
    'value' => 'mixed',
  ),
  'couchbase\\analyticsoptions::readonly' => 
  array (
    0 => 'Couchbase\\AnalyticsOptions',
    'arg' => 'bool',
  ),
  'couchbase\\analyticsoptions::scanconsistency' => 
  array (
    0 => 'Couchbase\\AnalyticsOptions',
    'arg' => 'string',
  ),
  'couchbase\\analyticsoptions::timeout' => 
  array (
    0 => 'Couchbase\\AnalyticsOptions',
    'arg' => 'int',
  ),
  'couchbase\\analyticsquery::__construct' => 
  array (
    0 => 'void',
  ),
  'couchbase\\analyticsquery::fromstring' => 
  array (
    0 => 'Couchbase\\AnalyticsQuery',
    'statement' => 'string',
  ),
  'couchbase\\appendoptions::durabilitylevel' => 
  array (
    0 => 'Couchbase\\AppendOptions',
    'arg' => 'int',
  ),
  'couchbase\\appendoptions::timeout' => 
  array (
    0 => 'Couchbase\\AppendOptions',
    'arg' => 'int',
  ),
  'couchbase\\authenticationexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\authenticationexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\authenticationexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\authenticationexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\authenticationexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\authenticationexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\authenticationexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\authenticationexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\authenticationexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\authenticationexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\authenticationexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\authenticationexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\azureblobexternalanalyticslink::accountkey' => 
  array (
    0 => 'Couchbase\\AzureBlobExternalAnalyticsLink',
    'accountKey' => 'string',
  ),
  'couchbase\\azureblobexternalanalyticslink::accountname' => 
  array (
    0 => 'Couchbase\\AzureBlobExternalAnalyticsLink',
    'accountName' => 'string',
  ),
  'couchbase\\azureblobexternalanalyticslink::blobendpoint' => 
  array (
    0 => 'Couchbase\\AzureBlobExternalAnalyticsLink',
    'blobEndpoint' => 'string',
  ),
  'couchbase\\azureblobexternalanalyticslink::connectionstring' => 
  array (
    0 => 'Couchbase\\AzureBlobExternalAnalyticsLink',
    'connectionString' => 'string',
  ),
  'couchbase\\azureblobexternalanalyticslink::dataverse' => 
  array (
    0 => 'Couchbase\\AzureBlobExternalAnalyticsLink',
    'dataverse' => 'string',
  ),
  'couchbase\\azureblobexternalanalyticslink::endpointsuffix' => 
  array (
    0 => 'Couchbase\\AzureBlobExternalAnalyticsLink',
    'suffix' => 'string',
  ),
  'couchbase\\azureblobexternalanalyticslink::name' => 
  array (
    0 => 'Couchbase\\AzureBlobExternalAnalyticsLink',
    'name' => 'string',
  ),
  'couchbase\\azureblobexternalanalyticslink::sharedaccesssignature' => 
  array (
    0 => 'Couchbase\\AzureBlobExternalAnalyticsLink',
    'signature' => 'string',
  ),
  'couchbase\\badinputexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\badinputexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\badinputexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\badinputexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\badinputexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\badinputexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\badinputexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\badinputexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\badinputexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\badinputexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\badinputexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\badinputexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\baseexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\baseexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\baseexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\baseexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\baseexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\baseexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\baseexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\baseexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\baseexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\baseexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\baseexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\baseexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\basicdecoderv1' => 
  array (
    0 => 'mixed',
    'bytes' => 'string',
    'flags' => 'int',
    'datatype' => 'int',
    'options' => 'array<array-key, mixed>',
  ),
  'couchbase\\basicencoderv1' => 
  array (
    0 => 'array<array-key, mixed>',
    'value' => 'mixed',
    'options' => 'array<array-key, mixed>',
  ),
  'couchbase\\binarycollection::append' => 
  array (
    0 => 'Couchbase\\MutationResult',
    'id' => 'string',
    'value' => 'string',
    'options=' => 'Couchbase\\AppendOptions|null',
  ),
  'couchbase\\binarycollection::decrement' => 
  array (
    0 => 'Couchbase\\CounterResult',
    'id' => 'string',
    'options=' => 'Couchbase\\DecrementOptions|null',
  ),
  'couchbase\\binarycollection::increment' => 
  array (
    0 => 'Couchbase\\CounterResult',
    'id' => 'string',
    'options=' => 'Couchbase\\IncrementOptions|null',
  ),
  'couchbase\\binarycollection::name' => 
  array (
    0 => 'string',
  ),
  'couchbase\\binarycollection::prepend' => 
  array (
    0 => 'Couchbase\\MutationResult',
    'id' => 'string',
    'value' => 'string',
    'options=' => 'Couchbase\\PrependOptions|null',
  ),
  'couchbase\\bindingsexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\bindingsexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\bindingsexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\bindingsexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\bindingsexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\bindingsexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\bindingsexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\bindingsexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\bindingsexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\bindingsexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\bindingsexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\bindingsexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\booleanfieldsearchquery::__construct' => 
  array (
    0 => 'void',
    'arg' => 'bool',
  ),
  'couchbase\\booleanfieldsearchquery::boost' => 
  array (
    0 => 'Couchbase\\BooleanFieldSearchQuery',
    'boost' => 'float',
  ),
  'couchbase\\booleanfieldsearchquery::field' => 
  array (
    0 => 'Couchbase\\BooleanFieldSearchQuery',
    'field' => 'string',
  ),
  'couchbase\\booleanfieldsearchquery::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\booleansearchquery::__construct' => 
  array (
    0 => 'void',
  ),
  'couchbase\\booleansearchquery::boost' => 
  array (
    0 => 'Couchbase\\BooleanSearchQuery',
    'boost' => 'float',
  ),
  'couchbase\\booleansearchquery::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\booleansearchquery::must' => 
  array (
    0 => 'Couchbase\\BooleanSearchQuery',
    'query' => 'Couchbase\\ConjunctionSearchQuery',
  ),
  'couchbase\\booleansearchquery::mustnot' => 
  array (
    0 => 'Couchbase\\BooleanSearchQuery',
    'query' => 'Couchbase\\DisjunctionSearchQuery',
  ),
  'couchbase\\booleansearchquery::should' => 
  array (
    0 => 'Couchbase\\BooleanSearchQuery',
    'query' => 'Couchbase\\DisjunctionSearchQuery',
  ),
  'couchbase\\bucket::__construct' => 
  array (
    0 => 'void',
  ),
  'couchbase\\bucket::__get' => 
  array (
    0 => 'int',
    'name' => 'string',
  ),
  'couchbase\\bucket::__set' => 
  array (
    0 => 'int',
    'name' => 'string',
    'value' => 'int',
  ),
  'couchbase\\bucket::append' => 
  array (
    0 => 'Couchbase\\Document|array<array-key, mixed>',
    'ids' => 'array<array-key, mixed>|string',
    'value' => 'mixed',
    'options=' => 'array<array-key, mixed>',
  ),
  'couchbase\\bucket::collections' => 
  array (
    0 => 'Couchbase\\CollectionManager',
  ),
  'couchbase\\bucket::counter' => 
  array (
    0 => 'Couchbase\\Document|array<array-key, mixed>',
    'ids' => 'array<array-key, mixed>|string',
    'delta=' => 'int',
    'options=' => 'array<array-key, mixed>',
  ),
  'couchbase\\bucket::decryptfields' => 
  array (
    0 => 'array<array-key, mixed>',
    'document' => 'array<array-key, mixed>',
    'fieldOptions' => 'mixed',
    'prefix=' => 'string',
  ),
  'couchbase\\bucket::defaultcollection' => 
  array (
    0 => 'Couchbase\\Collection',
  ),
  'couchbase\\bucket::defaultscope' => 
  array (
    0 => 'Couchbase\\Scope',
  ),
  'couchbase\\bucket::diag' => 
  array (
    0 => 'array<array-key, mixed>',
    'reportId=' => 'string',
  ),
  'couchbase\\bucket::diagnostics' => 
  array (
    0 => 'mixed',
    'reportId' => 'mixed',
  ),
  'couchbase\\bucket::encryptfields' => 
  array (
    0 => 'array<array-key, mixed>',
    'document' => 'array<array-key, mixed>',
    'fieldOptions' => 'mixed',
    'prefix=' => 'string',
  ),
  'couchbase\\bucket::get' => 
  array (
    0 => 'Couchbase\\Document|array<array-key, mixed>',
    'ids' => 'array<array-key, mixed>|string',
    'options=' => 'array<array-key, mixed>',
  ),
  'couchbase\\bucket::getandlock' => 
  array (
    0 => 'Couchbase\\Document|array<array-key, mixed>',
    'ids' => 'array<array-key, mixed>|string',
    'lockTime' => 'int',
    'options=' => 'array<array-key, mixed>',
  ),
  'couchbase\\bucket::getandtouch' => 
  array (
    0 => 'Couchbase\\Document|array<array-key, mixed>',
    'ids' => 'array<array-key, mixed>|string',
    'expiry' => 'int',
    'options=' => 'array<array-key, mixed>',
  ),
  'couchbase\\bucket::getfromreplica' => 
  array (
    0 => 'Couchbase\\Document|array<array-key, mixed>',
    'ids' => 'array<array-key, mixed>|string',
    'options=' => 'array<array-key, mixed>',
  ),
  'couchbase\\bucket::getname' => 
  array (
    0 => 'string',
  ),
  'couchbase\\bucket::insert' => 
  array (
    0 => 'Couchbase\\Document|array<array-key, mixed>',
    'ids' => 'array<array-key, mixed>|string',
    'value' => 'mixed',
    'options=' => 'array<array-key, mixed>',
  ),
  'couchbase\\bucket::listexists' => 
  array (
    0 => 'bool',
    'id' => 'string',
    'value' => 'mixed',
  ),
  'couchbase\\bucket::listget' => 
  array (
    0 => 'mixed',
    'id' => 'string',
    'index' => 'int',
  ),
  'couchbase\\bucket::listpush' => 
  array (
    0 => 'mixed',
    'id' => 'string',
    'value' => 'mixed',
  ),
  'couchbase\\bucket::listremove' => 
  array (
    0 => 'mixed',
    'id' => 'string',
    'index' => 'int',
  ),
  'couchbase\\bucket::listset' => 
  array (
    0 => 'mixed',
    'id' => 'string',
    'index' => 'int',
    'value' => 'mixed',
  ),
  'couchbase\\bucket::listshift' => 
  array (
    0 => 'mixed',
    'id' => 'string',
    'value' => 'mixed',
  ),
  'couchbase\\bucket::listsize' => 
  array (
    0 => 'int',
    'id' => 'string',
  ),
  'couchbase\\bucket::lookupin' => 
  array (
    0 => 'Couchbase\\LookupInBuilder',
    'id' => 'string',
  ),
  'couchbase\\bucket::manager' => 
  array (
    0 => 'Couchbase\\BucketManager',
  ),
  'couchbase\\bucket::mapadd' => 
  array (
    0 => 'mixed',
    'id' => 'string',
    'key' => 'string',
    'value' => 'mixed',
  ),
  'couchbase\\bucket::mapget' => 
  array (
    0 => 'mixed',
    'id' => 'string',
    'key' => 'string',
  ),
  'couchbase\\bucket::mapremove' => 
  array (
    0 => 'mixed',
    'id' => 'string',
    'key' => 'string',
  ),
  'couchbase\\bucket::mapsize' => 
  array (
    0 => 'int',
    'id' => 'string',
  ),
  'couchbase\\bucket::mutatein' => 
  array (
    0 => 'Couchbase\\MutateInBuilder',
    'id' => 'string',
    'cas' => 'string',
  ),
  'couchbase\\bucket::name' => 
  array (
    0 => 'string',
  ),
  'couchbase\\bucket::ping' => 
  array (
    0 => 'array<array-key, mixed>',
    'services' => 'int',
    'reportId' => 'string',
  ),
  'couchbase\\bucket::prepend' => 
  array (
    0 => 'Couchbase\\Document|array<array-key, mixed>',
    'ids' => 'array<array-key, mixed>|string',
    'value' => 'mixed',
    'options=' => 'array<array-key, mixed>',
  ),
  'couchbase\\bucket::query' => 
  array (
    0 => 'object',
    'query' => 'Couchbase\\AnalyticsQuery|Couchbase\\N1qlQuery|Couchbase\\SearchQuery|Couchbase\\SpatialViewQuery|Couchbase\\ViewQuery',
    'jsonAsArray=' => 'bool',
  ),
  'couchbase\\bucket::queueadd' => 
  array (
    0 => 'mixed',
    'id' => 'string',
    'value' => 'mixed',
  ),
  'couchbase\\bucket::queueexists' => 
  array (
    0 => 'bool',
    'id' => 'string',
    'value' => 'mixed',
  ),
  'couchbase\\bucket::queueremove' => 
  array (
    0 => 'mixed',
    'id' => 'string',
  ),
  'couchbase\\bucket::queuesize' => 
  array (
    0 => 'int',
    'id' => 'string',
  ),
  'couchbase\\bucket::remove' => 
  array (
    0 => 'Couchbase\\Document|array<array-key, mixed>',
    'ids' => 'array<array-key, mixed>|string',
    'options=' => 'array<array-key, mixed>',
  ),
  'couchbase\\bucket::replace' => 
  array (
    0 => 'Couchbase\\Document|array<array-key, mixed>',
    'ids' => 'array<array-key, mixed>|string',
    'value' => 'mixed',
    'options=' => 'array<array-key, mixed>',
  ),
  'couchbase\\bucket::retrievein' => 
  array (
    0 => 'Couchbase\\DocumentFragment',
    'id' => 'string',
    '...paths=' => 'array<int, string>',
  ),
  'couchbase\\bucket::scope' => 
  array (
    0 => 'Couchbase\\Scope',
    'name' => 'string',
  ),
  'couchbase\\bucket::setadd' => 
  array (
    0 => 'mixed',
    'id' => 'string',
    'value' => 'scalar',
  ),
  'couchbase\\bucket::setexists' => 
  array (
    0 => 'bool',
    'id' => 'string',
    'value' => 'scalar',
  ),
  'couchbase\\bucket::setremove' => 
  array (
    0 => 'mixed',
    'id' => 'string',
    'value' => 'scalar',
  ),
  'couchbase\\bucket::setsize' => 
  array (
    0 => 'int',
    'id' => 'string',
  ),
  'couchbase\\bucket::settranscoder' => 
  array (
    0 => 'mixed',
    'encoder' => 'callable',
    'decoder' => 'callable',
  ),
  'couchbase\\bucket::touch' => 
  array (
    0 => 'Couchbase\\Document|array<array-key, mixed>',
    'ids' => 'array<array-key, mixed>|string',
    'expiry' => 'int',
    'options=' => 'array<array-key, mixed>',
  ),
  'couchbase\\bucket::unlock' => 
  array (
    0 => 'Couchbase\\Document|array<array-key, mixed>',
    'ids' => 'array<array-key, mixed>|string',
    'options=' => 'array<array-key, mixed>',
  ),
  'couchbase\\bucket::upsert' => 
  array (
    0 => 'Couchbase\\Document|array<array-key, mixed>',
    'ids' => 'array<array-key, mixed>|string',
    'value' => 'mixed',
    'options=' => 'array<array-key, mixed>',
  ),
  'couchbase\\bucket::viewindexes' => 
  array (
    0 => 'Couchbase\\ViewIndexManager',
  ),
  'couchbase\\bucket::viewquery' => 
  array (
    0 => 'Couchbase\\ViewResult',
    'designDoc' => 'string',
    'viewName' => 'string',
    'options=' => 'Couchbase\\ViewOptions|null',
  ),
  'couchbase\\bucketmanager::__construct' => 
  array (
    0 => 'void',
  ),
  'couchbase\\bucketmanager::createbucket' => 
  array (
    0 => 'mixed',
    'settings' => 'Couchbase\\BucketSettings',
  ),
  'couchbase\\bucketmanager::createn1qlindex' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'fields' => 'array<array-key, mixed>',
    'whereClause=' => 'string',
    'ignoreIfExist=' => 'bool',
    'defer=' => 'bool',
  ),
  'couchbase\\bucketmanager::createn1qlprimaryindex' => 
  array (
    0 => 'mixed',
    'customName=' => 'string',
    'ignoreIfExist=' => 'bool',
    'defer=' => 'bool',
  ),
  'couchbase\\bucketmanager::dropn1qlindex' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'ignoreIfNotExist=' => 'bool',
  ),
  'couchbase\\bucketmanager::dropn1qlprimaryindex' => 
  array (
    0 => 'mixed',
    'customName=' => 'string',
    'ignoreIfNotExist=' => 'bool',
  ),
  'couchbase\\bucketmanager::flush' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'couchbase\\bucketmanager::getallbuckets' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\bucketmanager::getbucket' => 
  array (
    0 => 'Couchbase\\BucketSettings',
    'name' => 'string',
  ),
  'couchbase\\bucketmanager::getdesigndocument' => 
  array (
    0 => 'array<array-key, mixed>',
    'name' => 'string',
  ),
  'couchbase\\bucketmanager::info' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\bucketmanager::insertdesigndocument' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'document' => 'array<array-key, mixed>',
  ),
  'couchbase\\bucketmanager::listdesigndocuments' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\bucketmanager::listn1qlindexes' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\bucketmanager::removebucket' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'couchbase\\bucketmanager::removedesigndocument' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'couchbase\\bucketmanager::upsertdesigndocument' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'document' => 'array<array-key, mixed>',
  ),
  'couchbase\\bucketmissingexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\bucketmissingexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\bucketmissingexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\bucketmissingexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\bucketmissingexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\bucketmissingexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\bucketmissingexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\bucketmissingexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\bucketmissingexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\bucketmissingexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\bucketmissingexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\bucketmissingexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\bucketsettings::buckettype' => 
  array (
    0 => 'string',
  ),
  'couchbase\\bucketsettings::compressionmode' => 
  array (
    0 => 'string',
  ),
  'couchbase\\bucketsettings::enableflush' => 
  array (
    0 => 'Couchbase\\BucketSettings',
    'enable' => 'bool',
  ),
  'couchbase\\bucketsettings::enablereplicaindexes' => 
  array (
    0 => 'Couchbase\\BucketSettings',
    'enable' => 'bool',
  ),
  'couchbase\\bucketsettings::evictionpolicy' => 
  array (
    0 => 'string',
  ),
  'couchbase\\bucketsettings::flushenabled' => 
  array (
    0 => 'bool',
  ),
  'couchbase\\bucketsettings::maxttl' => 
  array (
    0 => 'int',
  ),
  'couchbase\\bucketsettings::minimaldurabilitylevel' => 
  array (
    0 => 'int',
  ),
  'couchbase\\bucketsettings::name' => 
  array (
    0 => 'string',
  ),
  'couchbase\\bucketsettings::numreplicas' => 
  array (
    0 => 'int',
  ),
  'couchbase\\bucketsettings::ramquotamb' => 
  array (
    0 => 'int',
  ),
  'couchbase\\bucketsettings::replicaindexes' => 
  array (
    0 => 'bool',
  ),
  'couchbase\\bucketsettings::setbuckettype' => 
  array (
    0 => 'Couchbase\\BucketSettings',
    'type' => 'string',
  ),
  'couchbase\\bucketsettings::setcompressionmode' => 
  array (
    0 => 'Couchbase\\BucketSettings',
    'mode' => 'string',
  ),
  'couchbase\\bucketsettings::setevictionpolicy' => 
  array (
    0 => 'Couchbase\\BucketSettings',
    'policy' => 'string',
  ),
  'couchbase\\bucketsettings::setmaxttl' => 
  array (
    0 => 'Couchbase\\BucketSettings',
    'ttlSeconds' => 'int',
  ),
  'couchbase\\bucketsettings::setminimaldurabilitylevel' => 
  array (
    0 => 'Couchbase\\BucketSettings',
    'durabilityLevel' => 'int',
  ),
  'couchbase\\bucketsettings::setname' => 
  array (
    0 => 'Couchbase\\BucketSettings',
    'name' => 'string',
  ),
  'couchbase\\bucketsettings::setnumreplicas' => 
  array (
    0 => 'Couchbase\\BucketSettings',
    'numReplicas' => 'int',
  ),
  'couchbase\\bucketsettings::setramquotamb' => 
  array (
    0 => 'Couchbase\\BucketSettings',
    'sizeInMb' => 'int',
  ),
  'couchbase\\bucketsettings::setstoragebackend' => 
  array (
    0 => 'Couchbase\\BucketSettings',
    'policy' => 'string',
  ),
  'couchbase\\bucketsettings::storagebackend' => 
  array (
    0 => 'string',
  ),
  'couchbase\\casmismatchexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\casmismatchexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\casmismatchexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\casmismatchexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\casmismatchexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\casmismatchexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\casmismatchexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\casmismatchexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\casmismatchexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\casmismatchexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\casmismatchexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\casmismatchexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\classicauthenticator::bucket' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'password' => 'string',
  ),
  'couchbase\\classicauthenticator::cluster' => 
  array (
    0 => 'mixed',
    'username' => 'string',
    'password' => 'string',
  ),
  'couchbase\\cluster::__construct' => 
  array (
    0 => 'void',
    'connstr' => 'string',
    'options' => 'Couchbase\\ClusterOptions',
  ),
  'couchbase\\cluster::analyticsindexes' => 
  array (
    0 => 'Couchbase\\AnalyticsIndexManager',
  ),
  'couchbase\\cluster::analyticsquery' => 
  array (
    0 => 'Couchbase\\AnalyticsResult',
    'statement' => 'string',
    'options=' => 'Couchbase\\AnalyticsOptions|null',
  ),
  'couchbase\\cluster::authenticate' => 
  array (
    0 => 'null',
    'authenticator' => 'Couchbase\\Authenticator',
  ),
  'couchbase\\cluster::authenticateas' => 
  array (
    0 => 'null',
    'username' => 'string',
    'password' => 'string',
  ),
  'couchbase\\cluster::bucket' => 
  array (
    0 => 'Couchbase\\Bucket',
    'name' => 'string',
  ),
  'couchbase\\cluster::buckets' => 
  array (
    0 => 'Couchbase\\BucketManager',
  ),
  'couchbase\\cluster::manager' => 
  array (
    0 => 'Couchbase\\ClusterManager',
    'username=' => 'string',
    'password=' => 'string',
  ),
  'couchbase\\cluster::openbucket' => 
  array (
    0 => 'Couchbase\\Bucket',
    'name=' => 'string',
    'password=' => 'string',
  ),
  'couchbase\\cluster::query' => 
  array (
    0 => 'Couchbase\\QueryResult',
    'statement' => 'string',
    'options=' => 'Couchbase\\QueryOptions|null',
  ),
  'couchbase\\cluster::queryindexes' => 
  array (
    0 => 'Couchbase\\QueryIndexManager',
  ),
  'couchbase\\cluster::searchindexes' => 
  array (
    0 => 'Couchbase\\SearchIndexManager',
  ),
  'couchbase\\cluster::searchquery' => 
  array (
    0 => 'Couchbase\\SearchResult',
    'indexName' => 'string',
    'query' => 'Couchbase\\SearchQuery',
    'options=' => 'Couchbase\\SearchOptions|null',
  ),
  'couchbase\\cluster::users' => 
  array (
    0 => 'Couchbase\\UserManager',
  ),
  'couchbase\\clustermanager::__construct' => 
  array (
    0 => 'void',
  ),
  'couchbase\\clustermanager::createbucket' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'couchbase\\clustermanager::getuser' => 
  array (
    0 => 'array<array-key, mixed>',
    'username' => 'string',
    'domain=' => 'int',
  ),
  'couchbase\\clustermanager::info' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\clustermanager::listbuckets' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\clustermanager::listusers' => 
  array (
    0 => 'array<array-key, mixed>',
    'domain=' => 'int',
  ),
  'couchbase\\clustermanager::removebucket' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'couchbase\\clustermanager::removeuser' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'domain=' => 'int',
  ),
  'couchbase\\clustermanager::upsertuser' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'settings' => 'Couchbase\\UserSettings',
    'domain=' => 'int',
  ),
  'couchbase\\clusteroptions::credentials' => 
  array (
    0 => 'Couchbase\\ClusterOptions',
    'username' => 'string',
    'password' => 'string',
  ),
  'couchbase\\collection::binary' => 
  array (
    0 => 'Couchbase\\BinaryCollection',
  ),
  'couchbase\\collection::exists' => 
  array (
    0 => 'Couchbase\\ExistsResult',
    'id' => 'string',
    'options=' => 'Couchbase\\ExistsOptions|null',
  ),
  'couchbase\\collection::get' => 
  array (
    0 => 'Couchbase\\GetResult',
    'id' => 'string',
    'options=' => 'Couchbase\\GetOptions|null',
  ),
  'couchbase\\collection::getallreplicas' => 
  array (
    0 => 'array<array-key, mixed>',
    'id' => 'string',
    'options=' => 'Couchbase\\GetAllReplicasOptions|null',
  ),
  'couchbase\\collection::getandlock' => 
  array (
    0 => 'Couchbase\\GetResult',
    'id' => 'string',
    'lockTime' => 'int',
    'options=' => 'Couchbase\\GetAndLockOptions|null',
  ),
  'couchbase\\collection::getandtouch' => 
  array (
    0 => 'Couchbase\\GetResult',
    'id' => 'string',
    'expiry' => 'int',
    'options=' => 'Couchbase\\GetAndTouchOptions|null',
  ),
  'couchbase\\collection::getanyreplica' => 
  array (
    0 => 'Couchbase\\GetReplicaResult',
    'id' => 'string',
    'options=' => 'Couchbase\\GetAnyReplicaOptions|null',
  ),
  'couchbase\\collection::getmulti' => 
  array (
    0 => 'array<array-key, mixed>',
    'ids' => 'array<array-key, mixed>',
    'options=' => 'Couchbase\\RemoveOptions|null',
  ),
  'couchbase\\collection::insert' => 
  array (
    0 => 'Couchbase\\MutationResult',
    'id' => 'string',
    'value' => 'mixed',
    'options=' => 'Couchbase\\InsertOptions|null',
  ),
  'couchbase\\collection::lookupin' => 
  array (
    0 => 'Couchbase\\LookupInResult',
    'id' => 'string',
    'specs' => 'array<array-key, mixed>',
    'options=' => 'Couchbase\\LookupInOptions|null',
  ),
  'couchbase\\collection::mutatein' => 
  array (
    0 => 'Couchbase\\MutateInResult',
    'id' => 'string',
    'specs' => 'array<array-key, mixed>',
    'options=' => 'Couchbase\\MutateInOptions|null',
  ),
  'couchbase\\collection::name' => 
  array (
    0 => 'string',
  ),
  'couchbase\\collection::remove' => 
  array (
    0 => 'Couchbase\\MutationResult',
    'id' => 'string',
    'options=' => 'Couchbase\\RemoveOptions|null',
  ),
  'couchbase\\collection::removemulti' => 
  array (
    0 => 'array<array-key, mixed>',
    'entries' => 'array<array-key, mixed>',
    'options=' => 'Couchbase\\RemoveOptions|null',
  ),
  'couchbase\\collection::replace' => 
  array (
    0 => 'Couchbase\\MutationResult',
    'id' => 'string',
    'value' => 'mixed',
    'options=' => 'Couchbase\\ReplaceOptions|null',
  ),
  'couchbase\\collection::touch' => 
  array (
    0 => 'Couchbase\\MutationResult',
    'id' => 'string',
    'expiry' => 'int',
    'options=' => 'Couchbase\\TouchOptions|null',
  ),
  'couchbase\\collection::unlock' => 
  array (
    0 => 'Couchbase\\Result',
    'id' => 'string',
    'cas' => 'string',
    'options=' => 'Couchbase\\UnlockOptions|null',
  ),
  'couchbase\\collection::upsert' => 
  array (
    0 => 'Couchbase\\MutationResult',
    'id' => 'string',
    'value' => 'mixed',
    'options=' => 'Couchbase\\UpsertOptions|null',
  ),
  'couchbase\\collection::upsertmulti' => 
  array (
    0 => 'array<array-key, mixed>',
    'entries' => 'array<array-key, mixed>',
    'options=' => 'Couchbase\\UpsertOptions|null',
  ),
  'couchbase\\collectionmanager::createcollection' => 
  array (
    0 => 'mixed',
    'collection' => 'Couchbase\\CollectionSpec',
  ),
  'couchbase\\collectionmanager::createscope' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'couchbase\\collectionmanager::dropcollection' => 
  array (
    0 => 'mixed',
    'collection' => 'Couchbase\\CollectionSpec',
  ),
  'couchbase\\collectionmanager::dropscope' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'couchbase\\collectionmanager::getallscopes' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\collectionmanager::getscope' => 
  array (
    0 => 'Couchbase\\ScopeSpec',
    'name' => 'string',
  ),
  'couchbase\\collectionmissingexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\collectionmissingexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\collectionmissingexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\collectionmissingexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\collectionmissingexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\collectionmissingexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\collectionmissingexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\collectionmissingexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\collectionmissingexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\collectionmissingexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\collectionmissingexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\collectionmissingexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\collectionspec::name' => 
  array (
    0 => 'string',
  ),
  'couchbase\\collectionspec::scopename' => 
  array (
    0 => 'string',
  ),
  'couchbase\\collectionspec::setmaxexpiry' => 
  array (
    0 => 'Couchbase\\CollectionSpec',
    'ms' => 'int',
  ),
  'couchbase\\collectionspec::setname' => 
  array (
    0 => 'Couchbase\\CollectionSpec',
    'name' => 'string',
  ),
  'couchbase\\collectionspec::setscopename' => 
  array (
    0 => 'Couchbase\\CollectionSpec',
    'name' => 'string',
  ),
  'couchbase\\conjunctionsearchquery::__construct' => 
  array (
    0 => 'void',
    'queries' => 'array<array-key, mixed>',
  ),
  'couchbase\\conjunctionsearchquery::boost' => 
  array (
    0 => 'Couchbase\\ConjunctionSearchQuery',
    'boost' => 'float',
  ),
  'couchbase\\conjunctionsearchquery::every' => 
  array (
    0 => 'Couchbase\\ConjunctionSearchQuery',
    '...queries=' => 'Couchbase\\SearchQuery',
  ),
  'couchbase\\conjunctionsearchquery::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\connectanalyticslinkoptions::dataversename' => 
  array (
    0 => 'Couchbase\\ConnectAnalyticsLinkOptions',
    'dataverseName' => 'string',
  ),
  'couchbase\\connectanalyticslinkoptions::linkname' => 
  array (
    0 => 'Couchbase\\ConnectAnalyticsLinkOptions',
    'linkName' => 'Couchbase\\bstring',
  ),
  'couchbase\\coordinate::__construct' => 
  array (
    0 => 'void',
    'longitude' => 'float',
    'latitude' => 'float',
  ),
  'couchbase\\coordinate::jsonserialize' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\couchbaseremoteanalyticslink::dataverse' => 
  array (
    0 => 'Couchbase\\CouchbaseRemoteAnalyticsLink',
    'dataverse' => 'string',
  ),
  'couchbase\\couchbaseremoteanalyticslink::encryption' => 
  array (
    0 => 'Couchbase\\CouchbaseRemoteAnalyticsLink',
    'settings' => 'Couchbase\\EncryptionSettings',
  ),
  'couchbase\\couchbaseremoteanalyticslink::hostname' => 
  array (
    0 => 'Couchbase\\CouchbaseRemoteAnalyticsLink',
    'hostname' => 'string',
  ),
  'couchbase\\couchbaseremoteanalyticslink::name' => 
  array (
    0 => 'Couchbase\\CouchbaseRemoteAnalyticsLink',
    'name' => 'string',
  ),
  'couchbase\\couchbaseremoteanalyticslink::password' => 
  array (
    0 => 'Couchbase\\CouchbaseRemoteAnalyticsLink',
    'password' => 'string',
  ),
  'couchbase\\couchbaseremoteanalyticslink::username' => 
  array (
    0 => 'Couchbase\\CouchbaseRemoteAnalyticsLink',
    'username' => 'string',
  ),
  'couchbase\\createanalyticsdatasetoptions::condition' => 
  array (
    0 => 'Couchbase\\CreateAnalyticsDatasetOptions',
    'condition' => 'string',
  ),
  'couchbase\\createanalyticsdatasetoptions::dataversename' => 
  array (
    0 => 'Couchbase\\CreateAnalyticsDatasetOptions',
    'dataverseName' => 'string',
  ),
  'couchbase\\createanalyticsdatasetoptions::ignoreifexists' => 
  array (
    0 => 'Couchbase\\CreateAnalyticsDatasetOptions',
    'shouldIgnore' => 'bool',
  ),
  'couchbase\\createanalyticsdataverseoptions::ignoreifexists' => 
  array (
    0 => 'Couchbase\\CreateAnalyticsDataverseOptions',
    'shouldIgnore' => 'bool',
  ),
  'couchbase\\createanalyticsindexoptions::dataversename' => 
  array (
    0 => 'Couchbase\\CreateAnalyticsIndexOptions',
    'dataverseName' => 'string',
  ),
  'couchbase\\createanalyticsindexoptions::ignoreifexists' => 
  array (
    0 => 'Couchbase\\CreateAnalyticsIndexOptions',
    'shouldIgnore' => 'bool',
  ),
  'couchbase\\createanalyticslinkoptions::timeout' => 
  array (
    0 => 'Couchbase\\CreateAnalyticsLinkOptions',
    'arg' => 'int',
  ),
  'couchbase\\createqueryindexoptions::condition' => 
  array (
    0 => 'Couchbase\\CreateQueryIndexOptions',
    'condition' => 'string',
  ),
  'couchbase\\createqueryindexoptions::deferred' => 
  array (
    0 => 'Couchbase\\CreateQueryIndexOptions',
    'isDeferred' => 'bool',
  ),
  'couchbase\\createqueryindexoptions::ignoreifexists' => 
  array (
    0 => 'Couchbase\\CreateQueryIndexOptions',
    'shouldIgnore' => 'bool',
  ),
  'couchbase\\createqueryindexoptions::numreplicas' => 
  array (
    0 => 'Couchbase\\CreateQueryIndexOptions',
    'number' => 'int',
  ),
  'couchbase\\createqueryprimaryindexoptions::deferred' => 
  array (
    0 => 'Couchbase\\CreateQueryPrimaryIndexOptions',
    'isDeferred' => 'bool',
  ),
  'couchbase\\createqueryprimaryindexoptions::ignoreifexists' => 
  array (
    0 => 'Couchbase\\CreateQueryPrimaryIndexOptions',
    'shouldIgnore' => 'bool',
  ),
  'couchbase\\createqueryprimaryindexoptions::indexname' => 
  array (
    0 => 'Couchbase\\CreateQueryPrimaryIndexOptions',
    'name' => 'string',
  ),
  'couchbase\\createqueryprimaryindexoptions::numreplicas' => 
  array (
    0 => 'Couchbase\\CreateQueryPrimaryIndexOptions',
    'number' => 'int',
  ),
  'couchbase\\daterangesearchfacet::__construct' => 
  array (
    0 => 'void',
    'field' => 'string',
    'limit' => 'int',
  ),
  'couchbase\\daterangesearchfacet::addrange' => 
  array (
    0 => 'Couchbase\\DateRangeSearchFacet',
    'name' => 'string',
    'start=' => 'int|string',
    'end=' => 'int|string',
  ),
  'couchbase\\daterangesearchfacet::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\daterangesearchquery::__construct' => 
  array (
    0 => 'void',
  ),
  'couchbase\\daterangesearchquery::boost' => 
  array (
    0 => 'Couchbase\\DateRangeSearchQuery',
    'boost' => 'float',
  ),
  'couchbase\\daterangesearchquery::datetimeparser' => 
  array (
    0 => 'Couchbase\\DateRangeSearchQuery',
    'dateTimeParser' => 'string',
  ),
  'couchbase\\daterangesearchquery::end' => 
  array (
    0 => 'Couchbase\\DateRangeSearchQuery',
    'end' => 'int|string',
    'inclusive=' => 'bool',
  ),
  'couchbase\\daterangesearchquery::field' => 
  array (
    0 => 'Couchbase\\DateRangeSearchQuery',
    'field' => 'string',
  ),
  'couchbase\\daterangesearchquery::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\daterangesearchquery::start' => 
  array (
    0 => 'Couchbase\\DateRangeSearchQuery',
    'start' => 'int|string',
    'inclusive=' => 'bool',
  ),
  'couchbase\\decrementoptions::delta' => 
  array (
    0 => 'Couchbase\\DecrementOptions',
    'arg' => 'int',
  ),
  'couchbase\\decrementoptions::durabilitylevel' => 
  array (
    0 => 'Couchbase\\DecrementOptions',
    'arg' => 'int',
  ),
  'couchbase\\decrementoptions::expiry' => 
  array (
    0 => 'Couchbase\\DecrementOptions',
    'arg' => 'mixed',
  ),
  'couchbase\\decrementoptions::initial' => 
  array (
    0 => 'Couchbase\\DecrementOptions',
    'arg' => 'int',
  ),
  'couchbase\\decrementoptions::timeout' => 
  array (
    0 => 'Couchbase\\DecrementOptions',
    'arg' => 'int',
  ),
  'couchbase\\defaultdecoder' => 
  array (
    0 => 'mixed',
    'bytes' => 'string',
    'flags' => 'int',
    'datatype' => 'int',
  ),
  'couchbase\\defaultencoder' => 
  array (
    0 => 'array<array-key, mixed>',
    'value' => 'mixed',
  ),
  'couchbase\\designdocument::name' => 
  array (
    0 => 'string',
  ),
  'couchbase\\designdocument::setname' => 
  array (
    0 => 'Couchbase\\DesignDocument',
    'name' => 'string',
  ),
  'couchbase\\designdocument::setviews' => 
  array (
    0 => 'Couchbase\\DesignDocument',
    'views' => 'array<array-key, mixed>',
  ),
  'couchbase\\designdocument::views' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\disconnectanalyticslinkoptions::dataversename' => 
  array (
    0 => 'Couchbase\\DisconnectAnalyticsLinkOptions',
    'dataverseName' => 'string',
  ),
  'couchbase\\disconnectanalyticslinkoptions::linkname' => 
  array (
    0 => 'Couchbase\\DisconnectAnalyticsLinkOptions',
    'linkName' => 'Couchbase\\bstring',
  ),
  'couchbase\\disjunctionsearchquery::__construct' => 
  array (
    0 => 'void',
    'queries' => 'array<array-key, mixed>',
  ),
  'couchbase\\disjunctionsearchquery::boost' => 
  array (
    0 => 'Couchbase\\DisjunctionSearchQuery',
    'boost' => 'float',
  ),
  'couchbase\\disjunctionsearchquery::either' => 
  array (
    0 => 'Couchbase\\DisjunctionSearchQuery',
    '...queries=' => 'Couchbase\\SearchQuery',
  ),
  'couchbase\\disjunctionsearchquery::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\disjunctionsearchquery::min' => 
  array (
    0 => 'Couchbase\\DisjunctionSearchQuery',
    'min' => 'int',
  ),
  'couchbase\\dmlfailureexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\dmlfailureexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\dmlfailureexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\dmlfailureexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\dmlfailureexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\dmlfailureexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\dmlfailureexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\dmlfailureexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\dmlfailureexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\dmlfailureexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\dmlfailureexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\dmlfailureexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\docidsearchquery::__construct' => 
  array (
    0 => 'void',
  ),
  'couchbase\\docidsearchquery::boost' => 
  array (
    0 => 'Couchbase\\DocIdSearchQuery',
    'boost' => 'float',
  ),
  'couchbase\\docidsearchquery::docids' => 
  array (
    0 => 'Couchbase\\DocIdSearchQuery',
    '...documentIds=' => 'string',
  ),
  'couchbase\\docidsearchquery::field' => 
  array (
    0 => 'Couchbase\\DocIdSearchQuery',
    'field' => 'string',
  ),
  'couchbase\\docidsearchquery::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\documentnotfoundexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\documentnotfoundexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\documentnotfoundexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\documentnotfoundexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\documentnotfoundexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\documentnotfoundexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\documentnotfoundexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\documentnotfoundexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\documentnotfoundexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\documentnotfoundexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\documentnotfoundexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\documentnotfoundexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\dropanalyticsdatasetoptions::dataversename' => 
  array (
    0 => 'Couchbase\\DropAnalyticsDatasetOptions',
    'dataverseName' => 'string',
  ),
  'couchbase\\dropanalyticsdatasetoptions::ignoreifnotexists' => 
  array (
    0 => 'Couchbase\\DropAnalyticsDatasetOptions',
    'shouldIgnore' => 'bool',
  ),
  'couchbase\\dropanalyticsdataverseoptions::ignoreifnotexists' => 
  array (
    0 => 'Couchbase\\DropAnalyticsDataverseOptions',
    'shouldIgnore' => 'bool',
  ),
  'couchbase\\dropanalyticsindexoptions::dataversename' => 
  array (
    0 => 'Couchbase\\DropAnalyticsIndexOptions',
    'dataverseName' => 'string',
  ),
  'couchbase\\dropanalyticsindexoptions::ignoreifnotexists' => 
  array (
    0 => 'Couchbase\\DropAnalyticsIndexOptions',
    'shouldIgnore' => 'bool',
  ),
  'couchbase\\dropanalyticslinkoptions::timeout' => 
  array (
    0 => 'Couchbase\\DropAnalyticsLinkOptions',
    'arg' => 'int',
  ),
  'couchbase\\dropqueryindexoptions::ignoreifnotexists' => 
  array (
    0 => 'Couchbase\\DropQueryIndexOptions',
    'shouldIgnore' => 'bool',
  ),
  'couchbase\\dropqueryprimaryindexoptions::ignoreifnotexists' => 
  array (
    0 => 'Couchbase\\DropQueryPrimaryIndexOptions',
    'shouldIgnore' => 'bool',
  ),
  'couchbase\\dropqueryprimaryindexoptions::indexname' => 
  array (
    0 => 'Couchbase\\DropQueryPrimaryIndexOptions',
    'name' => 'string',
  ),
  'couchbase\\dropuseroptions::domainname' => 
  array (
    0 => 'Couchbase\\DropUserOptions',
    'name' => 'string',
  ),
  'couchbase\\durabilityexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\durabilityexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\durabilityexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\durabilityexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\durabilityexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\durabilityexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\durabilityexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\durabilityexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\durabilityexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\durabilityexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\durabilityexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\durabilityexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\encryptionsettings::certificate' => 
  array (
    0 => 'mixed',
    'certificate' => 'string',
  ),
  'couchbase\\encryptionsettings::clientcertificate' => 
  array (
    0 => 'mixed',
    'certificate' => 'string',
  ),
  'couchbase\\encryptionsettings::clientkey' => 
  array (
    0 => 'mixed',
    'key' => 'string',
  ),
  'couchbase\\encryptionsettings::level' => 
  array (
    0 => 'mixed',
    'level' => 'string',
  ),
  'couchbase\\existsoptions::timeout' => 
  array (
    0 => 'Couchbase\\ExistsOptions',
    'arg' => 'int',
  ),
  'couchbase\\fastlzcompress' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'couchbase\\fastlzdecompress' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'couchbase\\geoboundingboxsearchquery::__construct' => 
  array (
    0 => 'void',
    'top_left_longitude' => 'float',
    'top_left_latitude' => 'float',
    'buttom_right_longitude' => 'float',
    'buttom_right_latitude' => 'float',
  ),
  'couchbase\\geoboundingboxsearchquery::boost' => 
  array (
    0 => 'Couchbase\\GeoBoundingBoxSearchQuery',
    'boost' => 'float',
  ),
  'couchbase\\geoboundingboxsearchquery::field' => 
  array (
    0 => 'Couchbase\\GeoBoundingBoxSearchQuery',
    'field' => 'string',
  ),
  'couchbase\\geoboundingboxsearchquery::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\geodistancesearchquery::__construct' => 
  array (
    0 => 'void',
    'longitude' => 'float',
    'latitude' => 'float',
    'distance=' => 'null|string',
  ),
  'couchbase\\geodistancesearchquery::boost' => 
  array (
    0 => 'Couchbase\\GeoDistanceSearchQuery',
    'boost' => 'float',
  ),
  'couchbase\\geodistancesearchquery::field' => 
  array (
    0 => 'Couchbase\\GeoDistanceSearchQuery',
    'field' => 'string',
  ),
  'couchbase\\geodistancesearchquery::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\geopolygonquery::__construct' => 
  array (
    0 => 'void',
    'coordinates' => 'array<array-key, mixed>',
  ),
  'couchbase\\geopolygonquery::boost' => 
  array (
    0 => 'Couchbase\\GeoPolygonQuery',
    'boost' => 'float',
  ),
  'couchbase\\geopolygonquery::field' => 
  array (
    0 => 'Couchbase\\GeoPolygonQuery',
    'field' => 'string',
  ),
  'couchbase\\geopolygonquery::jsonserialize' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\getallreplicasoptions::decoder' => 
  array (
    0 => 'Couchbase\\GetAllReplicasOptions',
    'arg' => 'callable',
  ),
  'couchbase\\getallreplicasoptions::timeout' => 
  array (
    0 => 'Couchbase\\GetAllReplicasOptions',
    'arg' => 'int',
  ),
  'couchbase\\getallusersoptions::domainname' => 
  array (
    0 => 'Couchbase\\GetAllUsersOptions',
    'name' => 'string',
  ),
  'couchbase\\getanalyticslinksoptions::dataverse' => 
  array (
    0 => 'Couchbase\\DropAnalyticsLinkOptions',
    'dataverse' => 'string',
  ),
  'couchbase\\getanalyticslinksoptions::linktype' => 
  array (
    0 => 'Couchbase\\DropAnalyticsLinkOptions',
    'type' => 'string',
  ),
  'couchbase\\getanalyticslinksoptions::name' => 
  array (
    0 => 'Couchbase\\DropAnalyticsLinkOptions',
    'name' => 'string',
  ),
  'couchbase\\getanalyticslinksoptions::timeout' => 
  array (
    0 => 'Couchbase\\DropAnalyticsLinkOptions',
    'arg' => 'int',
  ),
  'couchbase\\getandlockoptions::decoder' => 
  array (
    0 => 'Couchbase\\GetAndLockOptions',
    'arg' => 'callable',
  ),
  'couchbase\\getandlockoptions::timeout' => 
  array (
    0 => 'Couchbase\\GetAndLockOptions',
    'arg' => 'int',
  ),
  'couchbase\\getandtouchoptions::decoder' => 
  array (
    0 => 'Couchbase\\GetAndTouchOptions',
    'arg' => 'callable',
  ),
  'couchbase\\getandtouchoptions::timeout' => 
  array (
    0 => 'Couchbase\\GetAndTouchOptions',
    'arg' => 'int',
  ),
  'couchbase\\getanyreplicaoptions::decoder' => 
  array (
    0 => 'Couchbase\\GetAnyReplicaOptions',
    'arg' => 'callable',
  ),
  'couchbase\\getanyreplicaoptions::timeout' => 
  array (
    0 => 'Couchbase\\GetAnyReplicaOptions',
    'arg' => 'int',
  ),
  'couchbase\\getoptions::decoder' => 
  array (
    0 => 'Couchbase\\GetOptions',
    'arg' => 'callable',
  ),
  'couchbase\\getoptions::project' => 
  array (
    0 => 'Couchbase\\GetOptions',
    'arg' => 'array<array-key, mixed>',
  ),
  'couchbase\\getoptions::timeout' => 
  array (
    0 => 'Couchbase\\GetOptions',
    'arg' => 'int',
  ),
  'couchbase\\getoptions::withexpiry' => 
  array (
    0 => 'Couchbase\\GetOptions',
    'arg' => 'bool',
  ),
  'couchbase\\getuseroptions::domainname' => 
  array (
    0 => 'Couchbase\\GetUserOptions',
    'name' => 'string',
  ),
  'couchbase\\group::description' => 
  array (
    0 => 'string',
  ),
  'couchbase\\group::ldapgroupreference' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\group::name' => 
  array (
    0 => 'string',
  ),
  'couchbase\\group::roles' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\group::setdescription' => 
  array (
    0 => 'Couchbase\\Group',
    'description' => 'string',
  ),
  'couchbase\\group::setname' => 
  array (
    0 => 'Couchbase\\Group',
    'name' => 'string',
  ),
  'couchbase\\group::setroles' => 
  array (
    0 => 'Couchbase\\Group',
    'roles' => 'array<array-key, mixed>',
  ),
  'couchbase\\httpexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\httpexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\httpexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\httpexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\httpexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\httpexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\httpexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\httpexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\httpexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\httpexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\httpexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\httpexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\incrementoptions::delta' => 
  array (
    0 => 'Couchbase\\IncrementOptions',
    'arg' => 'int',
  ),
  'couchbase\\incrementoptions::durabilitylevel' => 
  array (
    0 => 'Couchbase\\IncrementOptions',
    'arg' => 'int',
  ),
  'couchbase\\incrementoptions::expiry' => 
  array (
    0 => 'Couchbase\\IncrementOptions',
    'arg' => 'mixed',
  ),
  'couchbase\\incrementoptions::initial' => 
  array (
    0 => 'Couchbase\\IncrementOptions',
    'arg' => 'int',
  ),
  'couchbase\\incrementoptions::timeout' => 
  array (
    0 => 'Couchbase\\IncrementOptions',
    'arg' => 'int',
  ),
  'couchbase\\indexfailureexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\indexfailureexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\indexfailureexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\indexfailureexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\indexfailureexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\indexfailureexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\indexfailureexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\indexfailureexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\indexfailureexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\indexfailureexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\indexfailureexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\indexfailureexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\indexnotfoundexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\indexnotfoundexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\indexnotfoundexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\indexnotfoundexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\indexnotfoundexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\indexnotfoundexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\indexnotfoundexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\indexnotfoundexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\indexnotfoundexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\indexnotfoundexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\indexnotfoundexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\indexnotfoundexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\insertoptions::durabilitylevel' => 
  array (
    0 => 'Couchbase\\InsertOptions',
    'arg' => 'int',
  ),
  'couchbase\\insertoptions::encoder' => 
  array (
    0 => 'Couchbase\\InsertOptions',
    'arg' => 'callable',
  ),
  'couchbase\\insertoptions::expiry' => 
  array (
    0 => 'Couchbase\\InsertOptions',
    'arg' => 'int',
  ),
  'couchbase\\insertoptions::timeout' => 
  array (
    0 => 'Couchbase\\InsertOptions',
    'arg' => 'int',
  ),
  'couchbase\\invalidconfigurationexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\invalidconfigurationexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\invalidconfigurationexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\invalidconfigurationexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\invalidconfigurationexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\invalidconfigurationexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\invalidconfigurationexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\invalidconfigurationexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\invalidconfigurationexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\invalidconfigurationexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\invalidconfigurationexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\invalidconfigurationexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\invalidrangeexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\invalidrangeexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\invalidrangeexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\invalidrangeexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\invalidrangeexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\invalidrangeexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\invalidrangeexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\invalidrangeexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\invalidrangeexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\invalidrangeexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\invalidrangeexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\invalidrangeexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\invalidstateexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\invalidstateexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\invalidstateexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\invalidstateexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\invalidstateexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\invalidstateexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\invalidstateexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\invalidstateexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\invalidstateexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\invalidstateexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\invalidstateexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\invalidstateexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\keydeletedexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\keydeletedexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\keydeletedexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\keydeletedexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\keydeletedexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\keydeletedexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\keydeletedexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\keydeletedexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\keydeletedexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\keydeletedexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\keydeletedexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\keydeletedexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\keyexistsexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\keyexistsexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\keyexistsexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\keyexistsexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\keyexistsexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\keyexistsexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\keyexistsexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\keyexistsexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\keyexistsexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\keyexistsexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\keyexistsexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\keyexistsexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\keylockedexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\keylockedexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\keylockedexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\keylockedexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\keylockedexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\keylockedexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\keylockedexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\keylockedexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\keylockedexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\keylockedexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\keylockedexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\keylockedexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\keyspacenotfoundexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\keyspacenotfoundexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\keyspacenotfoundexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\keyspacenotfoundexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\keyspacenotfoundexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\keyspacenotfoundexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\keyspacenotfoundexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\keyspacenotfoundexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\keyspacenotfoundexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\keyspacenotfoundexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\keyspacenotfoundexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\keyspacenotfoundexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\keyvalueexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\keyvalueexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\keyvalueexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\keyvalueexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\keyvalueexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\keyvalueexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\keyvalueexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\keyvalueexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\keyvalueexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\keyvalueexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\keyvalueexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\keyvalueexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\loggingmeter::flushinterval' => 
  array (
    0 => 'Couchbase\\LoggingMeter',
    'duration' => 'int',
  ),
  'couchbase\\loggingmeter::valuerecorder' => 
  array (
    0 => 'Couchbase\\ValueRecorder',
    'name' => 'string',
    'tags' => 'array<array-key, mixed>',
  ),
  'couchbase\\lookupcountspec::__construct' => 
  array (
    0 => 'void',
    'path' => 'string',
    'isXattr=' => 'bool',
  ),
  'couchbase\\lookupexistsspec::__construct' => 
  array (
    0 => 'void',
    'path' => 'string',
    'isXattr=' => 'bool',
  ),
  'couchbase\\lookupgetfullspec::__construct' => 
  array (
    0 => 'void',
  ),
  'couchbase\\lookupgetspec::__construct' => 
  array (
    0 => 'void',
    'path' => 'string',
    'isXattr=' => 'bool',
  ),
  'couchbase\\lookupinbuilder::__construct' => 
  array (
    0 => 'void',
  ),
  'couchbase\\lookupinbuilder::execute' => 
  array (
    0 => 'Couchbase\\DocumentFragment',
  ),
  'couchbase\\lookupinbuilder::exists' => 
  array (
    0 => 'Couchbase\\LookupInBuilder',
    'path' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'couchbase\\lookupinbuilder::get' => 
  array (
    0 => 'Couchbase\\LookupInBuilder',
    'path' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'couchbase\\lookupinbuilder::getcount' => 
  array (
    0 => 'Couchbase\\LookupInBuilder',
    'path' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'couchbase\\lookupinoptions::timeout' => 
  array (
    0 => 'Couchbase\\LookupInOptions',
    'arg' => 'int',
  ),
  'couchbase\\lookupinoptions::withexpiry' => 
  array (
    0 => 'Couchbase\\LookupInOptions',
    'arg' => 'bool',
  ),
  'couchbase\\matchallsearchquery::__construct' => 
  array (
    0 => 'void',
  ),
  'couchbase\\matchallsearchquery::boost' => 
  array (
    0 => 'Couchbase\\MatchAllSearchQuery',
    'boost' => 'float',
  ),
  'couchbase\\matchallsearchquery::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\matchnonesearchquery::__construct' => 
  array (
    0 => 'void',
  ),
  'couchbase\\matchnonesearchquery::boost' => 
  array (
    0 => 'Couchbase\\MatchNoneSearchQuery',
    'boost' => 'float',
  ),
  'couchbase\\matchnonesearchquery::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\matchphrasesearchquery::__construct' => 
  array (
    0 => 'void',
    'value' => 'string',
  ),
  'couchbase\\matchphrasesearchquery::analyzer' => 
  array (
    0 => 'Couchbase\\MatchPhraseSearchQuery',
    'analyzer' => 'string',
  ),
  'couchbase\\matchphrasesearchquery::boost' => 
  array (
    0 => 'Couchbase\\MatchPhraseSearchQuery',
    'boost' => 'float',
  ),
  'couchbase\\matchphrasesearchquery::field' => 
  array (
    0 => 'Couchbase\\MatchPhraseSearchQuery',
    'field' => 'string',
  ),
  'couchbase\\matchphrasesearchquery::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\matchsearchquery::__construct' => 
  array (
    0 => 'void',
    'value' => 'string',
  ),
  'couchbase\\matchsearchquery::analyzer' => 
  array (
    0 => 'Couchbase\\MatchSearchQuery',
    'analyzer' => 'string',
  ),
  'couchbase\\matchsearchquery::boost' => 
  array (
    0 => 'Couchbase\\MatchSearchQuery',
    'boost' => 'float',
  ),
  'couchbase\\matchsearchquery::field' => 
  array (
    0 => 'Couchbase\\MatchSearchQuery',
    'field' => 'string',
  ),
  'couchbase\\matchsearchquery::fuzziness' => 
  array (
    0 => 'Couchbase\\MatchSearchQuery',
    'fuzziness' => 'int',
  ),
  'couchbase\\matchsearchquery::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\matchsearchquery::prefixlength' => 
  array (
    0 => 'Couchbase\\MatchSearchQuery',
    'prefixLength' => 'int',
  ),
  'couchbase\\mutatearrayadduniquespec::__construct' => 
  array (
    0 => 'void',
    'path' => 'string',
    'value' => 'mixed',
    'isXattr' => 'bool',
    'createPath' => 'bool',
    'expandMacros' => 'bool',
  ),
  'couchbase\\mutatearrayappendspec::__construct' => 
  array (
    0 => 'void',
    'path' => 'string',
    'values' => 'array<array-key, mixed>',
    'isXattr' => 'bool',
    'createPath' => 'bool',
    'expandMacros' => 'bool',
  ),
  'couchbase\\mutatearrayinsertspec::__construct' => 
  array (
    0 => 'void',
    'path' => 'string',
    'values' => 'array<array-key, mixed>',
    'isXattr' => 'bool',
    'createPath' => 'bool',
    'expandMacros' => 'bool',
  ),
  'couchbase\\mutatearrayprependspec::__construct' => 
  array (
    0 => 'void',
    'path' => 'string',
    'values' => 'array<array-key, mixed>',
    'isXattr' => 'bool',
    'createPath' => 'bool',
    'expandMacros' => 'bool',
  ),
  'couchbase\\mutatecounterspec::__construct' => 
  array (
    0 => 'void',
    'path' => 'string',
    'delta' => 'int',
    'isXattr' => 'bool',
    'createPath' => 'bool',
  ),
  'couchbase\\mutateinbuilder::__construct' => 
  array (
    0 => 'void',
  ),
  'couchbase\\mutateinbuilder::arrayaddunique' => 
  array (
    0 => 'Couchbase\\MutateInBuilder',
    'path' => 'string',
    'value' => 'mixed',
    'options=' => 'array<array-key, mixed>|bool',
  ),
  'couchbase\\mutateinbuilder::arrayappend' => 
  array (
    0 => 'Couchbase\\MutateInBuilder',
    'path' => 'string',
    'value' => 'mixed',
    'options=' => 'array<array-key, mixed>|bool',
  ),
  'couchbase\\mutateinbuilder::arrayappendall' => 
  array (
    0 => 'Couchbase\\MutateInBuilder',
    'path' => 'string',
    'values' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>|bool',
  ),
  'couchbase\\mutateinbuilder::arrayinsert' => 
  array (
    0 => 'Couchbase\\MutateInBuilder',
    'path' => 'string',
    'value' => 'mixed',
    'options=' => 'array<array-key, mixed>',
  ),
  'couchbase\\mutateinbuilder::arrayinsertall' => 
  array (
    0 => 'Couchbase\\MutateInBuilder',
    'path' => 'string',
    'values' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'couchbase\\mutateinbuilder::arrayprepend' => 
  array (
    0 => 'Couchbase\\MutateInBuilder',
    'path' => 'string',
    'value' => 'mixed',
    'options=' => 'array<array-key, mixed>|bool',
  ),
  'couchbase\\mutateinbuilder::arrayprependall' => 
  array (
    0 => 'Couchbase\\MutateInBuilder',
    'path' => 'string',
    'values' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>|bool',
  ),
  'couchbase\\mutateinbuilder::counter' => 
  array (
    0 => 'Couchbase\\MutateInBuilder',
    'path' => 'string',
    'delta' => 'int',
    'options=' => 'array<array-key, mixed>|bool',
  ),
  'couchbase\\mutateinbuilder::execute' => 
  array (
    0 => 'Couchbase\\DocumentFragment',
  ),
  'couchbase\\mutateinbuilder::insert' => 
  array (
    0 => 'Couchbase\\MutateInBuilder',
    'path' => 'string',
    'value' => 'mixed',
    'options=' => 'array<array-key, mixed>|bool',
  ),
  'couchbase\\mutateinbuilder::modedocument' => 
  array (
    0 => 'mixed',
    'mode' => 'int',
  ),
  'couchbase\\mutateinbuilder::remove' => 
  array (
    0 => 'Couchbase\\MutateInBuilder',
    'path' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'couchbase\\mutateinbuilder::replace' => 
  array (
    0 => 'Couchbase\\MutateInBuilder',
    'path' => 'string',
    'value' => 'mixed',
    'options=' => 'array<array-key, mixed>',
  ),
  'couchbase\\mutateinbuilder::upsert' => 
  array (
    0 => 'Couchbase\\MutateInBuilder',
    'path' => 'string',
    'value' => 'mixed',
    'options=' => 'array<array-key, mixed>|bool',
  ),
  'couchbase\\mutateinbuilder::withexpiry' => 
  array (
    0 => 'Couchbase\\MutateInBuilder',
    'expiry' => 'Couchbase\\expiry',
  ),
  'couchbase\\mutateinoptions::cas' => 
  array (
    0 => 'Couchbase\\MutateInOptions',
    'arg' => 'string',
  ),
  'couchbase\\mutateinoptions::durabilitylevel' => 
  array (
    0 => 'Couchbase\\MutateInOptions',
    'arg' => 'int',
  ),
  'couchbase\\mutateinoptions::expiry' => 
  array (
    0 => 'Couchbase\\MutateInOptions',
    'arg' => 'mixed',
  ),
  'couchbase\\mutateinoptions::preserveexpiry' => 
  array (
    0 => 'Couchbase\\MutateInOptions',
    'shouldPreserve' => 'bool',
  ),
  'couchbase\\mutateinoptions::storesemantics' => 
  array (
    0 => 'Couchbase\\MutateInOptions',
    'arg' => 'int',
  ),
  'couchbase\\mutateinoptions::timeout' => 
  array (
    0 => 'Couchbase\\MutateInOptions',
    'arg' => 'int',
  ),
  'couchbase\\mutateinsertspec::__construct' => 
  array (
    0 => 'void',
    'path' => 'string',
    'value' => 'mixed',
    'isXattr' => 'bool',
    'createPath' => 'bool',
    'expandMacros' => 'bool',
  ),
  'couchbase\\mutateremovespec::__construct' => 
  array (
    0 => 'void',
    'path' => 'string',
    'isXattr' => 'bool',
  ),
  'couchbase\\mutatereplacespec::__construct' => 
  array (
    0 => 'void',
    'path' => 'string',
    'value' => 'mixed',
    'isXattr' => 'bool',
  ),
  'couchbase\\mutateupsertspec::__construct' => 
  array (
    0 => 'void',
    'path' => 'string',
    'value' => 'mixed',
    'isXattr' => 'bool',
    'createPath' => 'bool',
    'expandMacros' => 'bool',
  ),
  'couchbase\\mutationstate::__construct' => 
  array (
    0 => 'void',
  ),
  'couchbase\\mutationstate::add' => 
  array (
    0 => 'Couchbase\\MutationState',
    'source' => 'Couchbase\\MutationResult',
  ),
  'couchbase\\mutationstate::from' => 
  array (
    0 => 'Couchbase\\MutationState',
    'source' => 'Couchbase\\Document|Couchbase\\DocumentFragment|array<array-key, mixed>',
  ),
  'couchbase\\mutationtoken::__construct' => 
  array (
    0 => 'void',
  ),
  'couchbase\\mutationtoken::bucketname' => 
  array (
    0 => 'string',
  ),
  'couchbase\\mutationtoken::from' => 
  array (
    0 => 'mixed',
    'bucketName' => 'string',
    'vbucketId' => 'int',
    'vbucketUuid' => 'string',
    'sequenceNumber' => 'string',
  ),
  'couchbase\\mutationtoken::sequencenumber' => 
  array (
    0 => 'string',
  ),
  'couchbase\\mutationtoken::vbucketid' => 
  array (
    0 => 'int',
  ),
  'couchbase\\mutationtoken::vbucketuuid' => 
  array (
    0 => 'string',
  ),
  'couchbase\\n1qlindex::__construct' => 
  array (
    0 => 'void',
  ),
  'couchbase\\n1qlquery::__construct' => 
  array (
    0 => 'void',
  ),
  'couchbase\\n1qlquery::adhoc' => 
  array (
    0 => 'Couchbase\\N1qlQuery',
    'adhoc' => 'bool',
  ),
  'couchbase\\n1qlquery::consistency' => 
  array (
    0 => 'Couchbase\\N1qlQuery',
    'consistency' => 'int',
  ),
  'couchbase\\n1qlquery::consistentwith' => 
  array (
    0 => 'Couchbase\\N1qlQuery',
    'state' => 'Couchbase\\MutationState',
  ),
  'couchbase\\n1qlquery::crossbucket' => 
  array (
    0 => 'Couchbase\\N1qlQuery',
    'crossBucket' => 'bool',
  ),
  'couchbase\\n1qlquery::fromstring' => 
  array (
    0 => 'Couchbase\\N1qlQuery',
    'statement' => 'string',
  ),
  'couchbase\\n1qlquery::maxparallelism' => 
  array (
    0 => 'Couchbase\\N1qlQuery',
    'maxParallelism' => 'int',
  ),
  'couchbase\\n1qlquery::namedparams' => 
  array (
    0 => 'Couchbase\\N1qlQuery',
    'params' => 'array<array-key, mixed>',
  ),
  'couchbase\\n1qlquery::pipelinebatch' => 
  array (
    0 => 'Couchbase\\N1qlQuery',
    'pipelineBatch' => 'int',
  ),
  'couchbase\\n1qlquery::pipelinecap' => 
  array (
    0 => 'Couchbase\\N1qlQuery',
    'pipelineCap' => 'int',
  ),
  'couchbase\\n1qlquery::positionalparams' => 
  array (
    0 => 'Couchbase\\N1qlQuery',
    'params' => 'array<array-key, mixed>',
  ),
  'couchbase\\n1qlquery::profile' => 
  array (
    0 => 'mixed',
    'profileType' => 'string',
  ),
  'couchbase\\n1qlquery::readonly' => 
  array (
    0 => 'Couchbase\\N1qlQuery',
    'readonly' => 'bool',
  ),
  'couchbase\\n1qlquery::scancap' => 
  array (
    0 => 'Couchbase\\N1qlQuery',
    'scanCap' => 'int',
  ),
  'couchbase\\networkexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\networkexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\networkexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\networkexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\networkexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\networkexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\networkexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\networkexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\networkexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\networkexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\networkexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\networkexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\noopmeter::valuerecorder' => 
  array (
    0 => 'Couchbase\\ValueRecorder',
    'name' => 'string',
    'tags' => 'array<array-key, mixed>',
  ),
  'couchbase\\nooptracer::requestspan' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'parent=' => 'Couchbase\\RequestSpan|null',
  ),
  'couchbase\\numericrangesearchfacet::__construct' => 
  array (
    0 => 'void',
    'field' => 'string',
    'limit' => 'int',
  ),
  'couchbase\\numericrangesearchfacet::addrange' => 
  array (
    0 => 'Couchbase\\NumericRangeSearchFacet',
    'name' => 'string',
    'min=' => 'float|null',
    'max=' => 'float|null',
  ),
  'couchbase\\numericrangesearchfacet::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\numericrangesearchquery::__construct' => 
  array (
    0 => 'void',
  ),
  'couchbase\\numericrangesearchquery::boost' => 
  array (
    0 => 'Couchbase\\NumericRangeSearchQuery',
    'boost' => 'float',
  ),
  'couchbase\\numericrangesearchquery::field' => 
  array (
    0 => 'Couchbase\\NumericRangeSearchQuery',
    'field' => 'string',
  ),
  'couchbase\\numericrangesearchquery::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\numericrangesearchquery::max' => 
  array (
    0 => 'Couchbase\\NumericRangeSearchQuery',
    'max' => 'float',
    'inclusive=' => 'bool',
  ),
  'couchbase\\numericrangesearchquery::min' => 
  array (
    0 => 'Couchbase\\NumericRangeSearchQuery',
    'min' => 'float',
    'inclusive=' => 'bool',
  ),
  'couchbase\\origin::name' => 
  array (
    0 => 'string',
  ),
  'couchbase\\origin::type' => 
  array (
    0 => 'string',
  ),
  'couchbase\\parsingfailureexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\parsingfailureexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\parsingfailureexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\parsingfailureexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\parsingfailureexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\parsingfailureexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\parsingfailureexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\parsingfailureexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\parsingfailureexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\parsingfailureexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\parsingfailureexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\parsingfailureexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\partialviewexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\partialviewexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\partialviewexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\partialviewexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\partialviewexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\partialviewexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\partialviewexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\partialviewexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\partialviewexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\partialviewexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\partialviewexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\partialviewexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\passthrudecoder' => 
  array (
    0 => 'string',
    'bytes' => 'string',
    'flags' => 'int',
    'datatype' => 'int',
  ),
  'couchbase\\passthruencoder' => 
  array (
    0 => 'array<array-key, mixed>',
    'value' => 'string',
  ),
  'couchbase\\passwordauthenticator::password' => 
  array (
    0 => 'Couchbase\\PasswordAuthenticator',
    'password' => 'string',
  ),
  'couchbase\\passwordauthenticator::username' => 
  array (
    0 => 'Couchbase\\PasswordAuthenticator',
    'username' => 'string',
  ),
  'couchbase\\pathexistsexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\pathexistsexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\pathexistsexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\pathexistsexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\pathexistsexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\pathexistsexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\pathexistsexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\pathexistsexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\pathexistsexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\pathexistsexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\pathexistsexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\pathexistsexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\pathnotfoundexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\pathnotfoundexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\pathnotfoundexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\pathnotfoundexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\pathnotfoundexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\pathnotfoundexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\pathnotfoundexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\pathnotfoundexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\pathnotfoundexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\pathnotfoundexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\pathnotfoundexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\pathnotfoundexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\phrasesearchquery::__construct' => 
  array (
    0 => 'void',
    '...terms=' => 'string',
  ),
  'couchbase\\phrasesearchquery::boost' => 
  array (
    0 => 'Couchbase\\PhraseSearchQuery',
    'boost' => 'float',
  ),
  'couchbase\\phrasesearchquery::field' => 
  array (
    0 => 'Couchbase\\PhraseSearchQuery',
    'field' => 'string',
  ),
  'couchbase\\phrasesearchquery::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\planningfailureexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\planningfailureexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\planningfailureexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\planningfailureexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\planningfailureexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\planningfailureexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\planningfailureexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\planningfailureexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\planningfailureexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\planningfailureexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\planningfailureexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\planningfailureexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\prefixsearchquery::__construct' => 
  array (
    0 => 'void',
    'prefix' => 'string',
  ),
  'couchbase\\prefixsearchquery::boost' => 
  array (
    0 => 'Couchbase\\PrefixSearchQuery',
    'boost' => 'float',
  ),
  'couchbase\\prefixsearchquery::field' => 
  array (
    0 => 'Couchbase\\PrefixSearchQuery',
    'field' => 'string',
  ),
  'couchbase\\prefixsearchquery::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\preparedstatementexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\preparedstatementexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\preparedstatementexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\preparedstatementexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\preparedstatementexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\preparedstatementexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\preparedstatementexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\preparedstatementexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\preparedstatementexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\preparedstatementexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\preparedstatementexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\preparedstatementexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\prependoptions::durabilitylevel' => 
  array (
    0 => 'Couchbase\\PrependOptions',
    'arg' => 'int',
  ),
  'couchbase\\prependoptions::timeout' => 
  array (
    0 => 'Couchbase\\PrependOptions',
    'arg' => 'int',
  ),
  'couchbase\\queryerrorexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\queryerrorexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\queryerrorexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\queryerrorexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\queryerrorexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\queryerrorexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\queryerrorexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\queryerrorexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\queryerrorexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\queryerrorexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\queryerrorexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\queryerrorexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\queryexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\queryexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\queryexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\queryexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\queryexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\queryexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\queryexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\queryexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\queryexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\queryexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\queryexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\queryexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\queryindex::condition' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\queryindex::indexkey' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\queryindex::isprimary' => 
  array (
    0 => 'bool',
  ),
  'couchbase\\queryindex::keyspace' => 
  array (
    0 => 'string',
  ),
  'couchbase\\queryindex::name' => 
  array (
    0 => 'string',
  ),
  'couchbase\\queryindex::state' => 
  array (
    0 => 'string',
  ),
  'couchbase\\queryindex::type' => 
  array (
    0 => 'string',
  ),
  'couchbase\\queryindexmanager::builddeferredindexes' => 
  array (
    0 => 'mixed',
    'bucketName' => 'string',
  ),
  'couchbase\\queryindexmanager::createindex' => 
  array (
    0 => 'mixed',
    'bucketName' => 'string',
    'indexName' => 'string',
    'fields' => 'array<array-key, mixed>',
    'options=' => 'Couchbase\\CreateQueryIndexOptions|null',
  ),
  'couchbase\\queryindexmanager::createprimaryindex' => 
  array (
    0 => 'mixed',
    'bucketName' => 'string',
    'options=' => 'Couchbase\\CreateQueryPrimaryIndexOptions|null',
  ),
  'couchbase\\queryindexmanager::dropindex' => 
  array (
    0 => 'mixed',
    'bucketName' => 'string',
    'indexName' => 'string',
    'options=' => 'Couchbase\\DropQueryIndexOptions|null',
  ),
  'couchbase\\queryindexmanager::dropprimaryindex' => 
  array (
    0 => 'mixed',
    'bucketName' => 'string',
    'options=' => 'Couchbase\\DropQueryPrimaryIndexOptions|null',
  ),
  'couchbase\\queryindexmanager::getallindexes' => 
  array (
    0 => 'array<array-key, mixed>',
    'bucketName' => 'string',
  ),
  'couchbase\\queryindexmanager::watchindexes' => 
  array (
    0 => 'mixed',
    'bucketName' => 'string',
    'indexNames' => 'array<array-key, mixed>',
    'timeout' => 'int',
    'options=' => 'Couchbase\\WatchQueryIndexesOptions|null',
  ),
  'couchbase\\queryoptions::adhoc' => 
  array (
    0 => 'Couchbase\\QueryOptions',
    'arg' => 'bool',
  ),
  'couchbase\\queryoptions::clientcontextid' => 
  array (
    0 => 'Couchbase\\QueryOptions',
    'arg' => 'string',
  ),
  'couchbase\\queryoptions::consistentwith' => 
  array (
    0 => 'Couchbase\\QueryOptions',
    'arg' => 'Couchbase\\MutationState',
  ),
  'couchbase\\queryoptions::flexindex' => 
  array (
    0 => 'Couchbase\\QueryOptions',
    'arg' => 'bool',
  ),
  'couchbase\\queryoptions::maxparallelism' => 
  array (
    0 => 'Couchbase\\QueryOptions',
    'arg' => 'int',
  ),
  'couchbase\\queryoptions::metrics' => 
  array (
    0 => 'Couchbase\\QueryOptions',
    'arg' => 'bool',
  ),
  'couchbase\\queryoptions::namedparameters' => 
  array (
    0 => 'Couchbase\\QueryOptions',
    'pairs' => 'array<array-key, mixed>',
  ),
  'couchbase\\queryoptions::pipelinebatch' => 
  array (
    0 => 'Couchbase\\QueryOptions',
    'arg' => 'int',
  ),
  'couchbase\\queryoptions::pipelinecap' => 
  array (
    0 => 'Couchbase\\QueryOptions',
    'arg' => 'int',
  ),
  'couchbase\\queryoptions::positionalparameters' => 
  array (
    0 => 'Couchbase\\QueryOptions',
    'args' => 'array<array-key, mixed>',
  ),
  'couchbase\\queryoptions::profile' => 
  array (
    0 => 'Couchbase\\QueryOptions',
    'arg' => 'int',
  ),
  'couchbase\\queryoptions::raw' => 
  array (
    0 => 'Couchbase\\QueryOptions',
    'key' => 'string',
    'value' => 'mixed',
  ),
  'couchbase\\queryoptions::readonly' => 
  array (
    0 => 'Couchbase\\QueryOptions',
    'arg' => 'bool',
  ),
  'couchbase\\queryoptions::scancap' => 
  array (
    0 => 'Couchbase\\QueryOptions',
    'arg' => 'int',
  ),
  'couchbase\\queryoptions::scanconsistency' => 
  array (
    0 => 'Couchbase\\QueryOptions',
    'arg' => 'int',
  ),
  'couchbase\\queryoptions::scopename' => 
  array (
    0 => 'Couchbase\\QueryOptions',
    'arg' => 'string',
  ),
  'couchbase\\queryoptions::scopequalifier' => 
  array (
    0 => 'Couchbase\\QueryOptions',
    'arg' => 'string',
  ),
  'couchbase\\queryoptions::timeout' => 
  array (
    0 => 'Couchbase\\QueryOptions',
    'arg' => 'int',
  ),
  'couchbase\\queryserviceexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\queryserviceexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\queryserviceexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\queryserviceexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\queryserviceexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\queryserviceexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\queryserviceexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\queryserviceexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\queryserviceexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\queryserviceexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\queryserviceexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\queryserviceexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\querystringsearchquery::__construct' => 
  array (
    0 => 'void',
    'query_string' => 'string',
  ),
  'couchbase\\querystringsearchquery::boost' => 
  array (
    0 => 'Couchbase\\QueryStringSearchQuery',
    'boost' => 'float',
  ),
  'couchbase\\querystringsearchquery::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\quotalimitedexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\quotalimitedexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\quotalimitedexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\quotalimitedexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\quotalimitedexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\quotalimitedexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\quotalimitedexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\quotalimitedexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\quotalimitedexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\quotalimitedexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\quotalimitedexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\quotalimitedexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\ratelimitedexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\ratelimitedexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\ratelimitedexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\ratelimitedexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\ratelimitedexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\ratelimitedexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\ratelimitedexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\ratelimitedexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\ratelimitedexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\ratelimitedexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\ratelimitedexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\ratelimitedexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\regexpsearchquery::__construct' => 
  array (
    0 => 'void',
    'regexp' => 'string',
  ),
  'couchbase\\regexpsearchquery::boost' => 
  array (
    0 => 'Couchbase\\RegexpSearchQuery',
    'boost' => 'float',
  ),
  'couchbase\\regexpsearchquery::field' => 
  array (
    0 => 'Couchbase\\RegexpSearchQuery',
    'field' => 'string',
  ),
  'couchbase\\regexpsearchquery::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\removeoptions::cas' => 
  array (
    0 => 'Couchbase\\RemoveOptions',
    'arg' => 'string',
  ),
  'couchbase\\removeoptions::durabilitylevel' => 
  array (
    0 => 'Couchbase\\RemoveOptions',
    'arg' => 'int',
  ),
  'couchbase\\removeoptions::timeout' => 
  array (
    0 => 'Couchbase\\RemoveOptions',
    'arg' => 'int',
  ),
  'couchbase\\replaceanalyticslinkoptions::timeout' => 
  array (
    0 => 'Couchbase\\ReplaceAnalyticsLinkOptions',
    'arg' => 'int',
  ),
  'couchbase\\replaceoptions::cas' => 
  array (
    0 => 'Couchbase\\ReplaceOptions',
    'arg' => 'string',
  ),
  'couchbase\\replaceoptions::durabilitylevel' => 
  array (
    0 => 'Couchbase\\ReplaceOptions',
    'arg' => 'int',
  ),
  'couchbase\\replaceoptions::encoder' => 
  array (
    0 => 'Couchbase\\ReplaceOptions',
    'arg' => 'callable',
  ),
  'couchbase\\replaceoptions::expiry' => 
  array (
    0 => 'Couchbase\\ReplaceOptions',
    'arg' => 'mixed',
  ),
  'couchbase\\replaceoptions::preserveexpiry' => 
  array (
    0 => 'Couchbase\\ReplaceOptions',
    'shouldPreserve' => 'bool',
  ),
  'couchbase\\replaceoptions::timeout' => 
  array (
    0 => 'Couchbase\\ReplaceOptions',
    'arg' => 'int',
  ),
  'couchbase\\requestcanceledexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\requestcanceledexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\requestcanceledexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\requestcanceledexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\requestcanceledexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\requestcanceledexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\requestcanceledexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\requestcanceledexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\requestcanceledexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\requestcanceledexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\requestcanceledexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\requestcanceledexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\role::bucket' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\role::collection' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\role::name' => 
  array (
    0 => 'string',
  ),
  'couchbase\\role::scope' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\role::setbucket' => 
  array (
    0 => 'Couchbase\\Role',
    'bucket' => 'string',
  ),
  'couchbase\\role::setcollection' => 
  array (
    0 => 'Couchbase\\Role',
    'bucket' => 'string',
  ),
  'couchbase\\role::setname' => 
  array (
    0 => 'Couchbase\\Role',
    'name' => 'string',
  ),
  'couchbase\\role::setscope' => 
  array (
    0 => 'Couchbase\\Role',
    'bucket' => 'string',
  ),
  'couchbase\\roleanddescription::description' => 
  array (
    0 => 'string',
  ),
  'couchbase\\roleanddescription::displayname' => 
  array (
    0 => 'string',
  ),
  'couchbase\\roleanddescription::role' => 
  array (
    0 => 'Couchbase\\Role',
  ),
  'couchbase\\roleandorigin::origins' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\roleandorigin::role' => 
  array (
    0 => 'Couchbase\\Role',
  ),
  'couchbase\\s3externalanalyticslink::accesskeyid' => 
  array (
    0 => 'Couchbase\\S3ExternalAnalyticsLink',
    'accessKeyId' => 'string',
  ),
  'couchbase\\s3externalanalyticslink::dataverse' => 
  array (
    0 => 'Couchbase\\S3ExternalAnalyticsLink',
    'dataverse' => 'string',
  ),
  'couchbase\\s3externalanalyticslink::name' => 
  array (
    0 => 'Couchbase\\S3ExternalAnalyticsLink',
    'name' => 'string',
  ),
  'couchbase\\s3externalanalyticslink::region' => 
  array (
    0 => 'Couchbase\\S3ExternalAnalyticsLink',
    'region' => 'string',
  ),
  'couchbase\\s3externalanalyticslink::secretaccesskey' => 
  array (
    0 => 'Couchbase\\S3ExternalAnalyticsLink',
    'secretAccessKey' => 'string',
  ),
  'couchbase\\s3externalanalyticslink::serviceendpoint' => 
  array (
    0 => 'Couchbase\\S3ExternalAnalyticsLink',
    'serviceEndpoint' => 'string',
  ),
  'couchbase\\s3externalanalyticslink::sessiontoken' => 
  array (
    0 => 'Couchbase\\S3ExternalAnalyticsLink',
    'sessionToken' => 'string',
  ),
  'couchbase\\scope::__construct' => 
  array (
    0 => 'void',
    'bucket' => 'Couchbase\\Bucket',
    'name' => 'string',
  ),
  'couchbase\\scope::analyticsquery' => 
  array (
    0 => 'Couchbase\\AnalyticsResult',
    'statement' => 'string',
    'options=' => 'Couchbase\\AnalyticsOptions|null',
  ),
  'couchbase\\scope::collection' => 
  array (
    0 => 'Couchbase\\Collection',
    'name' => 'string',
  ),
  'couchbase\\scope::name' => 
  array (
    0 => 'string',
  ),
  'couchbase\\scope::query' => 
  array (
    0 => 'Couchbase\\QueryResult',
    'statement' => 'string',
    'options=' => 'Couchbase\\QueryOptions|null',
  ),
  'couchbase\\scopemissingexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\scopemissingexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\scopemissingexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\scopemissingexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\scopemissingexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\scopemissingexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\scopemissingexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\scopemissingexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\scopemissingexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\scopemissingexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\scopemissingexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\scopemissingexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\scopespec::collections' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\scopespec::name' => 
  array (
    0 => 'string',
  ),
  'couchbase\\searchexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\searchexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\searchexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\searchexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\searchexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\searchexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\searchexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\searchexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\searchexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\searchexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\searchexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\searchexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\searchindex::jsonserialize' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\searchindex::params' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\searchindex::setparams' => 
  array (
    0 => 'Couchbase\\SearchIndex',
    'params' => 'string',
  ),
  'couchbase\\searchindex::setsourcename' => 
  array (
    0 => 'Couchbase\\SearchIndex',
    'params' => 'string',
  ),
  'couchbase\\searchindex::setsourceparams' => 
  array (
    0 => 'Couchbase\\SearchIndex',
    'params' => 'string',
  ),
  'couchbase\\searchindex::setsourcetype' => 
  array (
    0 => 'Couchbase\\SearchIndex',
    'type' => 'string',
  ),
  'couchbase\\searchindex::setsourceuuid' => 
  array (
    0 => 'Couchbase\\SearchIndex',
    'uuid' => 'string',
  ),
  'couchbase\\searchindex::settype' => 
  array (
    0 => 'Couchbase\\SearchIndex',
    'type' => 'string',
  ),
  'couchbase\\searchindex::setuuid' => 
  array (
    0 => 'Couchbase\\SearchIndex',
    'uuid' => 'string',
  ),
  'couchbase\\searchindex::sourcename' => 
  array (
    0 => 'string',
  ),
  'couchbase\\searchindex::sourceparams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\searchindex::sourcetype' => 
  array (
    0 => 'string',
  ),
  'couchbase\\searchindex::sourceuuid' => 
  array (
    0 => 'string',
  ),
  'couchbase\\searchindex::type' => 
  array (
    0 => 'string',
  ),
  'couchbase\\searchindex::uuid' => 
  array (
    0 => 'string',
  ),
  'couchbase\\searchindexmanager::allowquerying' => 
  array (
    0 => 'mixed',
    'indexName' => 'string',
  ),
  'couchbase\\searchindexmanager::analyzedocument' => 
  array (
    0 => 'mixed',
    'indexName' => 'string',
    'document' => 'mixed',
  ),
  'couchbase\\searchindexmanager::disallowquerying' => 
  array (
    0 => 'mixed',
    'indexName' => 'string',
  ),
  'couchbase\\searchindexmanager::dropindex' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'couchbase\\searchindexmanager::freezeplan' => 
  array (
    0 => 'mixed',
    'indexName' => 'string',
  ),
  'couchbase\\searchindexmanager::getallindexes' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\searchindexmanager::getindex' => 
  array (
    0 => 'Couchbase\\SearchIndex',
    'name' => 'string',
  ),
  'couchbase\\searchindexmanager::getindexeddocumentscount' => 
  array (
    0 => 'int',
    'indexName' => 'string',
  ),
  'couchbase\\searchindexmanager::pauseingest' => 
  array (
    0 => 'mixed',
    'indexName' => 'string',
  ),
  'couchbase\\searchindexmanager::resumeingest' => 
  array (
    0 => 'mixed',
    'indexName' => 'string',
  ),
  'couchbase\\searchindexmanager::unfreezeplan' => 
  array (
    0 => 'mixed',
    'indexName' => 'string',
  ),
  'couchbase\\searchindexmanager::upsertindex' => 
  array (
    0 => 'mixed',
    'indexDefinition' => 'Couchbase\\SearchIndex',
  ),
  'couchbase\\searchoptions::collections' => 
  array (
    0 => 'Couchbase\\SearchOptions',
    'collectionNames' => 'array<array-key, mixed>',
  ),
  'couchbase\\searchoptions::consistentwith' => 
  array (
    0 => 'Couchbase\\SearchOptions',
    'index' => 'string',
    'state' => 'Couchbase\\MutationState',
  ),
  'couchbase\\searchoptions::disablescoring' => 
  array (
    0 => 'Couchbase\\SearchOptions',
    'disabled' => 'bool',
  ),
  'couchbase\\searchoptions::explain' => 
  array (
    0 => 'Couchbase\\SearchOptions',
    'explain' => 'bool',
  ),
  'couchbase\\searchoptions::facets' => 
  array (
    0 => 'Couchbase\\SearchOptions',
    'facets' => 'array<array-key, mixed>',
  ),
  'couchbase\\searchoptions::fields' => 
  array (
    0 => 'Couchbase\\SearchOptions',
    'fields' => 'array<array-key, mixed>',
  ),
  'couchbase\\searchoptions::highlight' => 
  array (
    0 => 'Couchbase\\SearchOptions',
    'style=' => 'null|string',
    'fields=' => 'array<array-key, mixed>|null',
  ),
  'couchbase\\searchoptions::jsonserialize' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\searchoptions::limit' => 
  array (
    0 => 'Couchbase\\SearchOptions',
    'limit' => 'int',
  ),
  'couchbase\\searchoptions::skip' => 
  array (
    0 => 'Couchbase\\SearchOptions',
    'skip' => 'int',
  ),
  'couchbase\\searchoptions::sort' => 
  array (
    0 => 'Couchbase\\SearchOptions',
    'specs' => 'array<array-key, mixed>',
  ),
  'couchbase\\searchoptions::timeout' => 
  array (
    0 => 'Couchbase\\SearchOptions',
    'ms' => 'int',
  ),
  'couchbase\\searchquery::__construct' => 
  array (
    0 => 'void',
    'indexName' => 'string',
    'queryPart' => 'Couchbase\\SearchQueryPart',
  ),
  'couchbase\\searchquery::addfacet' => 
  array (
    0 => 'Couchbase\\SearchQuery',
    'name' => 'string',
    'facet' => 'Couchbase\\SearchFacet',
  ),
  'couchbase\\searchquery::boolean' => 
  array (
    0 => 'Couchbase\\BooleanSearchQuery',
  ),
  'couchbase\\searchquery::booleanfield' => 
  array (
    0 => 'Couchbase\\BooleanFieldSearchQuery',
    'value' => 'bool',
  ),
  'couchbase\\searchquery::conjuncts' => 
  array (
    0 => 'Couchbase\\ConjunctionSearchQuery',
    '...queries=' => 'array<int, Couchbase\\SearchQueryPart>',
  ),
  'couchbase\\searchquery::consistentwith' => 
  array (
    0 => 'Couchbase\\SearchQuery',
    'state' => 'Couchbase\\MutationState',
  ),
  'couchbase\\searchquery::daterange' => 
  array (
    0 => 'Couchbase\\DateRangeSearchQuery',
  ),
  'couchbase\\searchquery::daterangefacet' => 
  array (
    0 => 'Couchbase\\DateRangeSearchFacet',
    'field' => 'string',
    'limit' => 'int',
  ),
  'couchbase\\searchquery::disjuncts' => 
  array (
    0 => 'Couchbase\\DisjunctionSearchQuery',
    '...queries=' => 'array<int, Couchbase\\SearchQueryPart>',
  ),
  'couchbase\\searchquery::docid' => 
  array (
    0 => 'Couchbase\\DocIdSearchQuery',
    '...documentIds=' => 'array<int, string>',
  ),
  'couchbase\\searchquery::explain' => 
  array (
    0 => 'Couchbase\\SearchQuery',
    'explain' => 'bool',
  ),
  'couchbase\\searchquery::fields' => 
  array (
    0 => 'Couchbase\\SearchQuery',
    '...fields=' => 'array<int, string>',
  ),
  'couchbase\\searchquery::geoboundingbox' => 
  array (
    0 => 'Couchbase\\GeoBoundingBoxSearchQuery',
    'topLeftLongitude' => 'float',
    'topLeftLatitude' => 'float',
    'bottomRightLongitude' => 'float',
    'bottomRightLatitude' => 'float',
  ),
  'couchbase\\searchquery::geodistance' => 
  array (
    0 => 'Couchbase\\GeoDistanceSearchQuery',
    'longitude' => 'float',
    'latitude' => 'float',
    'distance' => 'string',
  ),
  'couchbase\\searchquery::highlight' => 
  array (
    0 => 'Couchbase\\SearchQuery',
    'style' => 'string',
    '...fields=' => 'array<int, string>',
  ),
  'couchbase\\searchquery::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\searchquery::limit' => 
  array (
    0 => 'Couchbase\\SearchQuery',
    'limit' => 'int',
  ),
  'couchbase\\searchquery::match' => 
  array (
    0 => 'Couchbase\\MatchSearchQuery',
    'match' => 'string',
  ),
  'couchbase\\searchquery::matchall' => 
  array (
    0 => 'Couchbase\\MatchAllSearchQuery',
  ),
  'couchbase\\searchquery::matchnone' => 
  array (
    0 => 'Couchbase\\MatchNoneSearchQuery',
  ),
  'couchbase\\searchquery::matchphrase' => 
  array (
    0 => 'Couchbase\\MatchPhraseSearchQuery',
    '...terms=' => 'array<int, string>',
  ),
  'couchbase\\searchquery::numericrange' => 
  array (
    0 => 'Couchbase\\NumericRangeSearchQuery',
  ),
  'couchbase\\searchquery::numericrangefacet' => 
  array (
    0 => 'Couchbase\\NumericRangeSearchFacet',
    'field' => 'string',
    'limit' => 'int',
  ),
  'couchbase\\searchquery::prefix' => 
  array (
    0 => 'Couchbase\\PrefixSearchQuery',
    'prefix' => 'string',
  ),
  'couchbase\\searchquery::querystring' => 
  array (
    0 => 'Couchbase\\QueryStringSearchQuery',
    'queryString' => 'string',
  ),
  'couchbase\\searchquery::regexp' => 
  array (
    0 => 'Couchbase\\RegexpSearchQuery',
    'regexp' => 'string',
  ),
  'couchbase\\searchquery::serversidetimeout' => 
  array (
    0 => 'Couchbase\\SearchQuery',
    'serverSideTimeout' => 'int',
  ),
  'couchbase\\searchquery::skip' => 
  array (
    0 => 'Couchbase\\SearchQuery',
    'skip' => 'int',
  ),
  'couchbase\\searchquery::sort' => 
  array (
    0 => 'Couchbase\\SearchQuery',
    '...sort=' => 'array<int, Couchbase\\sort>',
  ),
  'couchbase\\searchquery::term' => 
  array (
    0 => 'Couchbase\\TermSearchQuery',
    'term' => 'string',
  ),
  'couchbase\\searchquery::termfacet' => 
  array (
    0 => 'Couchbase\\TermSearchFacet',
    'field' => 'string',
    'limit' => 'int',
  ),
  'couchbase\\searchquery::termrange' => 
  array (
    0 => 'Couchbase\\TermRangeSearchQuery',
  ),
  'couchbase\\searchquery::wildcard' => 
  array (
    0 => 'Couchbase\\WildcardSearchQuery',
    'wildcard' => 'string',
  ),
  'couchbase\\searchsort::__construct' => 
  array (
    0 => 'void',
  ),
  'couchbase\\searchsort::field' => 
  array (
    0 => 'Couchbase\\SearchSortField',
    'field' => 'string',
  ),
  'couchbase\\searchsort::geodistance' => 
  array (
    0 => 'Couchbase\\SearchSortGeoDistance',
    'field' => 'string',
    'longitude' => 'float',
    'latitude' => 'float',
  ),
  'couchbase\\searchsort::id' => 
  array (
    0 => 'Couchbase\\SearchSortId',
  ),
  'couchbase\\searchsort::score' => 
  array (
    0 => 'Couchbase\\SearchSortScore',
  ),
  'couchbase\\searchsortfield::__construct' => 
  array (
    0 => 'void',
    'field' => 'string',
  ),
  'couchbase\\searchsortfield::descending' => 
  array (
    0 => 'Couchbase\\SearchSortField',
    'descending' => 'bool',
  ),
  'couchbase\\searchsortfield::field' => 
  array (
    0 => 'Couchbase\\SearchSortField',
    'field' => 'string',
  ),
  'couchbase\\searchsortfield::geodistance' => 
  array (
    0 => 'Couchbase\\SearchSortGeoDistance',
    'field' => 'string',
    'longitude' => 'float',
    'latitude' => 'float',
  ),
  'couchbase\\searchsortfield::id' => 
  array (
    0 => 'Couchbase\\SearchSortId',
  ),
  'couchbase\\searchsortfield::jsonserialize' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\searchsortfield::missing' => 
  array (
    0 => 'Couchbase\\SearchSortField',
    'missing' => 'string',
  ),
  'couchbase\\searchsortfield::mode' => 
  array (
    0 => 'Couchbase\\SearchSortField',
    'mode' => 'string',
  ),
  'couchbase\\searchsortfield::score' => 
  array (
    0 => 'Couchbase\\SearchSortScore',
  ),
  'couchbase\\searchsortfield::type' => 
  array (
    0 => 'Couchbase\\SearchSortField',
    'type' => 'string',
  ),
  'couchbase\\searchsortgeodistance::__construct' => 
  array (
    0 => 'void',
    'field' => 'string',
    'logitude' => 'float',
    'latitude' => 'float',
  ),
  'couchbase\\searchsortgeodistance::descending' => 
  array (
    0 => 'Couchbase\\SearchSortGeoDistance',
    'descending' => 'bool',
  ),
  'couchbase\\searchsortgeodistance::field' => 
  array (
    0 => 'Couchbase\\SearchSortField',
    'field' => 'string',
  ),
  'couchbase\\searchsortgeodistance::geodistance' => 
  array (
    0 => 'Couchbase\\SearchSortGeoDistance',
    'field' => 'string',
    'longitude' => 'float',
    'latitude' => 'float',
  ),
  'couchbase\\searchsortgeodistance::id' => 
  array (
    0 => 'Couchbase\\SearchSortId',
  ),
  'couchbase\\searchsortgeodistance::jsonserialize' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\searchsortgeodistance::score' => 
  array (
    0 => 'Couchbase\\SearchSortScore',
  ),
  'couchbase\\searchsortgeodistance::unit' => 
  array (
    0 => 'Couchbase\\SearchSortGeoDistance',
    'unit' => 'string',
  ),
  'couchbase\\searchsortid::__construct' => 
  array (
    0 => 'void',
  ),
  'couchbase\\searchsortid::descending' => 
  array (
    0 => 'Couchbase\\SearchSortId',
    'descending' => 'bool',
  ),
  'couchbase\\searchsortid::field' => 
  array (
    0 => 'Couchbase\\SearchSortField',
    'field' => 'string',
  ),
  'couchbase\\searchsortid::geodistance' => 
  array (
    0 => 'Couchbase\\SearchSortGeoDistance',
    'field' => 'string',
    'longitude' => 'float',
    'latitude' => 'float',
  ),
  'couchbase\\searchsortid::id' => 
  array (
    0 => 'Couchbase\\SearchSortId',
  ),
  'couchbase\\searchsortid::jsonserialize' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\searchsortid::score' => 
  array (
    0 => 'Couchbase\\SearchSortScore',
  ),
  'couchbase\\searchsortscore::__construct' => 
  array (
    0 => 'void',
  ),
  'couchbase\\searchsortscore::descending' => 
  array (
    0 => 'Couchbase\\SearchSortScore',
    'descending' => 'bool',
  ),
  'couchbase\\searchsortscore::field' => 
  array (
    0 => 'Couchbase\\SearchSortField',
    'field' => 'string',
  ),
  'couchbase\\searchsortscore::geodistance' => 
  array (
    0 => 'Couchbase\\SearchSortGeoDistance',
    'field' => 'string',
    'longitude' => 'float',
    'latitude' => 'float',
  ),
  'couchbase\\searchsortscore::id' => 
  array (
    0 => 'Couchbase\\SearchSortId',
  ),
  'couchbase\\searchsortscore::jsonserialize' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\searchsortscore::score' => 
  array (
    0 => 'Couchbase\\SearchSortScore',
  ),
  'couchbase\\servicemissingexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\servicemissingexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\servicemissingexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\servicemissingexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\servicemissingexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\servicemissingexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\servicemissingexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\servicemissingexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\servicemissingexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\servicemissingexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\servicemissingexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\servicemissingexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\spatialviewquery::__construct' => 
  array (
    0 => 'void',
  ),
  'couchbase\\spatialviewquery::bbox' => 
  array (
    0 => 'Couchbase\\SpatialViewQuery',
    'bbox' => 'array<array-key, mixed>',
  ),
  'couchbase\\spatialviewquery::consistency' => 
  array (
    0 => 'Couchbase\\SpatialViewQuery',
    'consistency' => 'int',
  ),
  'couchbase\\spatialviewquery::custom' => 
  array (
    0 => 'mixed',
    'customParameters' => 'array<array-key, mixed>',
  ),
  'couchbase\\spatialviewquery::encode' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\spatialviewquery::endrange' => 
  array (
    0 => 'Couchbase\\SpatialViewQuery',
    'range' => 'array<array-key, mixed>',
  ),
  'couchbase\\spatialviewquery::limit' => 
  array (
    0 => 'Couchbase\\SpatialViewQuery',
    'limit' => 'int',
  ),
  'couchbase\\spatialviewquery::order' => 
  array (
    0 => 'Couchbase\\SpatialViewQuery',
    'order' => 'int',
  ),
  'couchbase\\spatialviewquery::skip' => 
  array (
    0 => 'Couchbase\\SpatialViewQuery',
    'skip' => 'int',
  ),
  'couchbase\\spatialviewquery::startrange' => 
  array (
    0 => 'Couchbase\\SpatialViewQuery',
    'range' => 'array<array-key, mixed>',
  ),
  'couchbase\\subdocumentexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\subdocumentexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\subdocumentexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\subdocumentexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\subdocumentexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\subdocumentexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\subdocumentexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\subdocumentexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\subdocumentexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\subdocumentexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\subdocumentexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\subdocumentexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\tempfailexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\tempfailexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\tempfailexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\tempfailexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\tempfailexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\tempfailexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\tempfailexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\tempfailexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\tempfailexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\tempfailexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\tempfailexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\tempfailexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\termrangesearchquery::__construct' => 
  array (
    0 => 'void',
  ),
  'couchbase\\termrangesearchquery::boost' => 
  array (
    0 => 'Couchbase\\TermRangeSearchQuery',
    'boost' => 'float',
  ),
  'couchbase\\termrangesearchquery::field' => 
  array (
    0 => 'Couchbase\\TermRangeSearchQuery',
    'field' => 'string',
  ),
  'couchbase\\termrangesearchquery::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\termrangesearchquery::max' => 
  array (
    0 => 'Couchbase\\TermRangeSearchQuery',
    'max' => 'string',
    'inclusive=' => 'bool',
  ),
  'couchbase\\termrangesearchquery::min' => 
  array (
    0 => 'Couchbase\\TermRangeSearchQuery',
    'min' => 'string',
    'inclusive=' => 'bool',
  ),
  'couchbase\\termsearchfacet::__construct' => 
  array (
    0 => 'void',
    'field' => 'string',
    'limit' => 'int',
  ),
  'couchbase\\termsearchfacet::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\termsearchquery::__construct' => 
  array (
    0 => 'void',
    'term' => 'string',
  ),
  'couchbase\\termsearchquery::boost' => 
  array (
    0 => 'Couchbase\\TermSearchQuery',
    'boost' => 'float',
  ),
  'couchbase\\termsearchquery::field' => 
  array (
    0 => 'Couchbase\\TermSearchQuery',
    'field' => 'string',
  ),
  'couchbase\\termsearchquery::fuzziness' => 
  array (
    0 => 'Couchbase\\TermSearchQuery',
    'fuzziness' => 'int',
  ),
  'couchbase\\termsearchquery::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\termsearchquery::prefixlength' => 
  array (
    0 => 'Couchbase\\TermSearchQuery',
    'prefixLength' => 'int',
  ),
  'couchbase\\thresholdloggingtracer::analyticsthreshold' => 
  array (
    0 => 'mixed',
    'duration' => 'int',
  ),
  'couchbase\\thresholdloggingtracer::emitinterval' => 
  array (
    0 => 'mixed',
    'duration' => 'int',
  ),
  'couchbase\\thresholdloggingtracer::kvthreshold' => 
  array (
    0 => 'mixed',
    'duration' => 'int',
  ),
  'couchbase\\thresholdloggingtracer::querythreshold' => 
  array (
    0 => 'mixed',
    'duration' => 'int',
  ),
  'couchbase\\thresholdloggingtracer::requestspan' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'parent=' => 'Couchbase\\RequestSpan|null',
  ),
  'couchbase\\thresholdloggingtracer::samplesize' => 
  array (
    0 => 'mixed',
    'size' => 'int',
  ),
  'couchbase\\thresholdloggingtracer::searchthreshold' => 
  array (
    0 => 'mixed',
    'duration' => 'int',
  ),
  'couchbase\\thresholdloggingtracer::viewsthreshold' => 
  array (
    0 => 'mixed',
    'duration' => 'int',
  ),
  'couchbase\\timeoutexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\timeoutexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\timeoutexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\timeoutexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\timeoutexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\timeoutexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\timeoutexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\timeoutexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\timeoutexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\timeoutexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\timeoutexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\timeoutexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\touchoptions::timeout' => 
  array (
    0 => 'Couchbase\\TouchOptions',
    'arg' => 'int',
  ),
  'couchbase\\unlockoptions::timeout' => 
  array (
    0 => 'Couchbase\\UnlockOptions',
    'arg' => 'int',
  ),
  'couchbase\\upsertoptions::durabilitylevel' => 
  array (
    0 => 'Couchbase\\UpsertOptions',
    'arg' => 'int',
  ),
  'couchbase\\upsertoptions::encoder' => 
  array (
    0 => 'Couchbase\\UpsertOptions',
    'arg' => 'callable',
  ),
  'couchbase\\upsertoptions::expiry' => 
  array (
    0 => 'Couchbase\\UpsertOptions',
    'arg' => 'mixed',
  ),
  'couchbase\\upsertoptions::preserveexpiry' => 
  array (
    0 => 'Couchbase\\UpsertOptions',
    'shouldPreserve' => 'bool',
  ),
  'couchbase\\upsertoptions::timeout' => 
  array (
    0 => 'Couchbase\\UpsertOptions',
    'arg' => 'int',
  ),
  'couchbase\\upsertuseroptions::domainname' => 
  array (
    0 => 'Couchbase\\DropUserOptions',
    'name' => 'string',
  ),
  'couchbase\\user::displayname' => 
  array (
    0 => 'string',
  ),
  'couchbase\\user::groups' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\user::roles' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\user::setdisplayname' => 
  array (
    0 => 'Couchbase\\User',
    'name' => 'string',
  ),
  'couchbase\\user::setgroups' => 
  array (
    0 => 'Couchbase\\User',
    'groups' => 'array<array-key, mixed>',
  ),
  'couchbase\\user::setpassword' => 
  array (
    0 => 'Couchbase\\User',
    'password' => 'string',
  ),
  'couchbase\\user::setroles' => 
  array (
    0 => 'Couchbase\\User',
    'roles' => 'array<array-key, mixed>',
  ),
  'couchbase\\user::setusername' => 
  array (
    0 => 'Couchbase\\User',
    'username' => 'string',
  ),
  'couchbase\\user::username' => 
  array (
    0 => 'string',
  ),
  'couchbase\\userandmetadata::domain' => 
  array (
    0 => 'string',
  ),
  'couchbase\\userandmetadata::effectiveroles' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\userandmetadata::externalgroups' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\userandmetadata::passwordchanged' => 
  array (
    0 => 'string',
  ),
  'couchbase\\userandmetadata::user' => 
  array (
    0 => 'Couchbase\\User',
  ),
  'couchbase\\usermanager::dropgroup' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'couchbase\\usermanager::dropuser' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'options=' => 'Couchbase\\DropUserOptions|null',
  ),
  'couchbase\\usermanager::getallgroups' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\usermanager::getallusers' => 
  array (
    0 => 'array<array-key, mixed>',
    'options=' => 'Couchbase\\GetAllUsersOptions|null',
  ),
  'couchbase\\usermanager::getgroup' => 
  array (
    0 => 'Couchbase\\Group',
    'name' => 'string',
  ),
  'couchbase\\usermanager::getroles' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\usermanager::getuser' => 
  array (
    0 => 'Couchbase\\UserAndMetadata',
    'name' => 'string',
    'options=' => 'Couchbase\\GetUserOptions|null',
  ),
  'couchbase\\usermanager::upsertgroup' => 
  array (
    0 => 'mixed',
    'group' => 'Couchbase\\Group',
  ),
  'couchbase\\usermanager::upsertuser' => 
  array (
    0 => 'mixed',
    'user' => 'Couchbase\\User',
    'options=' => 'Couchbase\\UpsertUserOptions|null',
  ),
  'couchbase\\usersettings::fullname' => 
  array (
    0 => 'Couchbase\\UserSettings',
    'fullName' => 'string',
  ),
  'couchbase\\usersettings::password' => 
  array (
    0 => 'Couchbase\\UserSettings',
    'password' => 'string',
  ),
  'couchbase\\usersettings::role' => 
  array (
    0 => 'Couchbase\\UserSettings',
    'role' => 'string',
    'bucket=' => 'string',
  ),
  'couchbase\\valuetoobigexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\valuetoobigexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\valuetoobigexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\valuetoobigexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\valuetoobigexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\valuetoobigexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\valuetoobigexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\valuetoobigexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\valuetoobigexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\valuetoobigexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\valuetoobigexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\valuetoobigexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\view::map' => 
  array (
    0 => 'string',
  ),
  'couchbase\\view::name' => 
  array (
    0 => 'string',
  ),
  'couchbase\\view::reduce' => 
  array (
    0 => 'string',
  ),
  'couchbase\\view::setmap' => 
  array (
    0 => 'Couchbase\\View',
    'mapJsCode' => 'string',
  ),
  'couchbase\\view::setname' => 
  array (
    0 => 'Couchbase\\View',
    'name' => 'string',
  ),
  'couchbase\\view::setreduce' => 
  array (
    0 => 'Couchbase\\View',
    'reduceJsCode' => 'string',
  ),
  'couchbase\\viewexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'couchbase\\viewexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\viewexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\viewexception::context' => 
  array (
    0 => 'null|object',
  ),
  'couchbase\\viewexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\viewexception::getfile' => 
  array (
    0 => 'string',
  ),
  'couchbase\\viewexception::getline' => 
  array (
    0 => 'int',
  ),
  'couchbase\\viewexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'couchbase\\viewexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'couchbase\\viewexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\viewexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'couchbase\\viewexception::ref' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\viewindexmanager::dropdesigndocument' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'couchbase\\viewindexmanager::getalldesigndocuments' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\viewindexmanager::getdesigndocument' => 
  array (
    0 => 'Couchbase\\DesignDocument',
    'name' => 'string',
  ),
  'couchbase\\viewindexmanager::upsertdesigndocument' => 
  array (
    0 => 'mixed',
    'document' => 'Couchbase\\DesignDocument',
  ),
  'couchbase\\viewoptions::group' => 
  array (
    0 => 'Couchbase\\ViewOptions',
    'arg' => 'bool',
  ),
  'couchbase\\viewoptions::grouplevel' => 
  array (
    0 => 'Couchbase\\ViewOptions',
    'arg' => 'int',
  ),
  'couchbase\\viewoptions::idrange' => 
  array (
    0 => 'Couchbase\\ViewOptions',
    'start' => 'mixed',
    'end' => 'mixed',
    'inclusiveEnd=' => 'mixed',
  ),
  'couchbase\\viewoptions::includedocuments' => 
  array (
    0 => 'Couchbase\\ViewOptions',
    'arg' => 'bool',
    'maxConcurrentDocuments=' => 'int',
  ),
  'couchbase\\viewoptions::key' => 
  array (
    0 => 'Couchbase\\ViewOptions',
    'arg' => 'mixed',
  ),
  'couchbase\\viewoptions::keys' => 
  array (
    0 => 'Couchbase\\ViewOptions',
    'args' => 'array<array-key, mixed>',
  ),
  'couchbase\\viewoptions::limit' => 
  array (
    0 => 'Couchbase\\ViewOptions',
    'arg' => 'int',
  ),
  'couchbase\\viewoptions::order' => 
  array (
    0 => 'Couchbase\\ViewOptions',
    'arg' => 'int',
  ),
  'couchbase\\viewoptions::range' => 
  array (
    0 => 'Couchbase\\ViewOptions',
    'start' => 'mixed',
    'end' => 'mixed',
    'inclusiveEnd=' => 'mixed',
  ),
  'couchbase\\viewoptions::raw' => 
  array (
    0 => 'Couchbase\\ViewOptions',
    'key' => 'string',
    'value' => 'mixed',
  ),
  'couchbase\\viewoptions::reduce' => 
  array (
    0 => 'Couchbase\\ViewOptions',
    'arg' => 'bool',
  ),
  'couchbase\\viewoptions::scanconsistency' => 
  array (
    0 => 'Couchbase\\ViewOptions',
    'arg' => 'int',
  ),
  'couchbase\\viewoptions::skip' => 
  array (
    0 => 'Couchbase\\ViewOptions',
    'arg' => 'int',
  ),
  'couchbase\\viewoptions::timeout' => 
  array (
    0 => 'Couchbase\\ViewOptions',
    'arg' => 'int',
  ),
  'couchbase\\viewquery::__construct' => 
  array (
    0 => 'void',
  ),
  'couchbase\\viewquery::consistency' => 
  array (
    0 => 'Couchbase\\ViewQuery',
    'consistency' => 'int',
  ),
  'couchbase\\viewquery::custom' => 
  array (
    0 => 'Couchbase\\ViewQuery',
    'customParameters' => 'array<array-key, mixed>',
  ),
  'couchbase\\viewquery::encode' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\viewquery::from' => 
  array (
    0 => 'Couchbase\\ViewQuery',
    'designDocumentName' => 'string',
    'viewName' => 'string',
  ),
  'couchbase\\viewquery::fromspatial' => 
  array (
    0 => 'Couchbase\\SpatialViewQuery',
    'designDocumentName' => 'string',
    'viewName' => 'string',
  ),
  'couchbase\\viewquery::group' => 
  array (
    0 => 'Couchbase\\ViewQuery',
    'group' => 'bool',
  ),
  'couchbase\\viewquery::grouplevel' => 
  array (
    0 => 'Couchbase\\ViewQuery',
    'groupLevel' => 'int',
  ),
  'couchbase\\viewquery::idrange' => 
  array (
    0 => 'Couchbase\\ViewQuery',
    'startKeyDocumentId' => 'string',
    'endKeyDocumentId' => 'string',
  ),
  'couchbase\\viewquery::key' => 
  array (
    0 => 'Couchbase\\ViewQuery',
    'key' => 'mixed',
  ),
  'couchbase\\viewquery::keys' => 
  array (
    0 => 'Couchbase\\ViewQuery',
    'keys' => 'array<array-key, mixed>',
  ),
  'couchbase\\viewquery::limit' => 
  array (
    0 => 'Couchbase\\ViewQuery',
    'limit' => 'int',
  ),
  'couchbase\\viewquery::order' => 
  array (
    0 => 'Couchbase\\ViewQuery',
    'order' => 'int',
  ),
  'couchbase\\viewquery::range' => 
  array (
    0 => 'Couchbase\\ViewQuery',
    'startKey' => 'mixed',
    'endKey' => 'mixed',
    'inclusiveEnd=' => 'bool',
  ),
  'couchbase\\viewquery::reduce' => 
  array (
    0 => 'Couchbase\\ViewQuery',
    'reduce' => 'bool',
  ),
  'couchbase\\viewquery::skip' => 
  array (
    0 => 'Couchbase\\ViewQuery',
    'skip' => 'int',
  ),
  'couchbase\\viewqueryencodable::encode' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\viewrow::document' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\viewrow::id' => 
  array (
    0 => 'null|string',
  ),
  'couchbase\\viewrow::key' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\viewrow::value' => 
  array (
    0 => 'mixed',
  ),
  'couchbase\\watchqueryindexesoptions::watchprimary' => 
  array (
    0 => 'Couchbase\\WatchQueryIndexesOptions',
    'shouldWatch' => 'bool',
  ),
  'couchbase\\wildcardsearchquery::__construct' => 
  array (
    0 => 'void',
    'wildcard' => 'string',
  ),
  'couchbase\\wildcardsearchquery::boost' => 
  array (
    0 => 'Couchbase\\WildcardSearchQuery',
    'boost' => 'float',
  ),
  'couchbase\\wildcardsearchquery::field' => 
  array (
    0 => 'Couchbase\\WildcardSearchQuery',
    'field' => 'string',
  ),
  'couchbase\\wildcardsearchquery::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'couchbase\\zlibcompress' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'couchbase\\zlibdecompress' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'count' => 
  array (
    0 => 'int<0, max>',
    'value' => 'Countable|array<array-key, mixed>',
    'mode=' => 'int',
  ),
  'count_chars' => 
  array (
    0 => 'array<int, int>',
    'string' => 'string',
    'mode=' => '0|1|2',
  ),
  'count_chars\'1' => 
  array (
    0 => 'string',
    'input' => 'string',
    'mode=' => '3|4',
  ),
  'countable::count' => 
  array (
    0 => 'int',
  ),
  'crack_check' => 
  array (
    0 => 'bool',
    'dictionary' => 'mixed',
    'password' => 'string',
  ),
  'crack_closedict' => 
  array (
    0 => 'bool',
    'dictionary=' => 'resource',
  ),
  'crack_getlastmessage' => 
  array (
    0 => 'string',
  ),
  'crack_opendict' => 
  array (
    0 => 'false|resource',
    'dictionary' => 'string',
  ),
  'crash' => 
  array (
    0 => 'mixed',
  ),
  'crc32' => 
  array (
    0 => 'int',
    'string' => 'string',
  ),
  'crypt' => 
  array (
    0 => 'string',
    'string' => 'string',
    'salt' => 'string',
  ),
  'ctype_alnum' => 
  array (
    0 => 'bool',
    'text' => 'int|string',
  ),
  'ctype_alpha' => 
  array (
    0 => 'bool',
    'text' => 'int|string',
  ),
  'ctype_cntrl' => 
  array (
    0 => 'bool',
    'text' => 'int|string',
  ),
  'ctype_digit' => 
  array (
    0 => 'bool',
    'text' => 'int|string',
  ),
  'ctype_graph' => 
  array (
    0 => 'bool',
    'text' => 'int|string',
  ),
  'ctype_lower' => 
  array (
    0 => 'bool',
    'text' => 'int|string',
  ),
  'ctype_print' => 
  array (
    0 => 'bool',
    'text' => 'int|string',
  ),
  'ctype_punct' => 
  array (
    0 => 'bool',
    'text' => 'int|string',
  ),
  'ctype_space' => 
  array (
    0 => 'bool',
    'text' => 'int|string',
  ),
  'ctype_upper' => 
  array (
    0 => 'bool',
    'text' => 'int|string',
  ),
  'ctype_xdigit' => 
  array (
    0 => 'bool',
    'text' => 'int|string',
  ),
  'cubrid_affected_rows' => 
  array (
    0 => 'int',
    'req_identifier=' => 'mixed',
  ),
  'cubrid_bind' => 
  array (
    0 => 'bool',
    'req_identifier' => 'resource',
    'bind_param' => 'int',
    'bind_value' => 'mixed',
    'bind_value_type=' => 'string',
  ),
  'cubrid_client_encoding' => 
  array (
    0 => 'string',
    'conn_identifier=' => 'mixed',
  ),
  'cubrid_close' => 
  array (
    0 => 'bool',
    'conn_identifier=' => 'mixed',
  ),
  'cubrid_close_prepare' => 
  array (
    0 => 'bool',
    'req_identifier' => 'resource',
  ),
  'cubrid_close_request' => 
  array (
    0 => 'bool',
    'req_identifier' => 'resource',
  ),
  'cubrid_col_get' => 
  array (
    0 => 'array<array-key, mixed>',
    'conn_identifier' => 'resource',
    'oid' => 'string',
    'attr_name' => 'string',
  ),
  'cubrid_col_size' => 
  array (
    0 => 'int',
    'conn_identifier' => 'resource',
    'oid' => 'string',
    'attr_name' => 'string',
  ),
  'cubrid_column_names' => 
  array (
    0 => 'array<array-key, mixed>',
    'req_identifier' => 'resource',
  ),
  'cubrid_column_types' => 
  array (
    0 => 'array<array-key, mixed>',
    'req_identifier' => 'resource',
  ),
  'cubrid_commit' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
  ),
  'cubrid_connect' => 
  array (
    0 => 'resource',
    'host' => 'string',
    'port' => 'int',
    'dbname' => 'string',
    'userid=' => 'string',
    'passwd=' => 'string',
  ),
  'cubrid_connect_with_url' => 
  array (
    0 => 'resource',
    'conn_url' => 'string',
    'userid=' => 'string',
    'passwd=' => 'string',
  ),
  'cubrid_current_oid' => 
  array (
    0 => 'string',
    'req_identifier' => 'resource',
  ),
  'cubrid_data_seek' => 
  array (
    0 => 'bool',
    'req_identifier' => 'mixed',
    'row_number' => 'int',
  ),
  'cubrid_db_name' => 
  array (
    0 => 'string',
    'result' => 'array<array-key, mixed>',
    'index' => 'int',
  ),
  'cubrid_db_parameter' => 
  array (
    0 => 'array<array-key, mixed>',
    'conn_identifier' => 'resource',
  ),
  'cubrid_disconnect' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
  ),
  'cubrid_drop' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
    'oid' => 'string',
  ),
  'cubrid_errno' => 
  array (
    0 => 'int',
    'conn_identifier=' => 'mixed',
  ),
  'cubrid_error' => 
  array (
    0 => 'string',
    'connection=' => 'mixed',
  ),
  'cubrid_error_code' => 
  array (
    0 => 'int',
  ),
  'cubrid_error_code_facility' => 
  array (
    0 => 'int',
  ),
  'cubrid_error_msg' => 
  array (
    0 => 'string',
  ),
  'cubrid_execute' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'mixed',
    'sql' => 'string',
    'option=' => 'int',
    'request_identifier=' => 'mixed',
  ),
  'cubrid_fetch' => 
  array (
    0 => 'mixed',
    'result' => 'resource',
    'type=' => 'int',
  ),
  'cubrid_fetch_array' => 
  array (
    0 => 'array<array-key, mixed>',
    'result' => 'resource',
    'type=' => 'int',
  ),
  'cubrid_fetch_assoc' => 
  array (
    0 => 'array<array-key, mixed>',
    'result' => 'resource',
  ),
  'cubrid_fetch_field' => 
  array (
    0 => 'object',
    'result' => 'resource',
    'field_offset=' => 'int',
  ),
  'cubrid_fetch_lengths' => 
  array (
    0 => 'array<array-key, mixed>',
    'result' => 'resource',
  ),
  'cubrid_fetch_object' => 
  array (
    0 => 'object',
    'result' => 'resource',
    'class_name=' => 'string',
    'params=' => 'array<array-key, mixed>',
  ),
  'cubrid_fetch_row' => 
  array (
    0 => 'array<array-key, mixed>',
    'result' => 'resource',
  ),
  'cubrid_field_flags' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'field_offset' => 'int',
  ),
  'cubrid_field_len' => 
  array (
    0 => 'int',
    'result' => 'resource',
    'field_offset' => 'int',
  ),
  'cubrid_field_name' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'field_offset' => 'int',
  ),
  'cubrid_field_seek' => 
  array (
    0 => 'bool',
    'result' => 'resource',
    'field_offset=' => 'int',
  ),
  'cubrid_field_table' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'field_offset' => 'int',
  ),
  'cubrid_field_type' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'field_offset' => 'int',
  ),
  'cubrid_free_result' => 
  array (
    0 => 'bool',
    'req_identifier' => 'resource',
  ),
  'cubrid_get' => 
  array (
    0 => 'mixed',
    'conn_identifier' => 'resource',
    'oid' => 'string',
    'attr=' => 'mixed',
  ),
  'cubrid_get_autocommit' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
  ),
  'cubrid_get_charset' => 
  array (
    0 => 'string',
    'conn_identifier' => 'resource',
  ),
  'cubrid_get_class_name' => 
  array (
    0 => 'string',
    'conn_identifier' => 'resource',
    'oid' => 'string',
  ),
  'cubrid_get_client_info' => 
  array (
    0 => 'string',
  ),
  'cubrid_get_db_parameter' => 
  array (
    0 => 'array<array-key, mixed>',
    'conn_identifier' => 'resource',
  ),
  'cubrid_get_query_timeout' => 
  array (
    0 => 'int',
    'req_identifier' => 'resource',
  ),
  'cubrid_get_server_info' => 
  array (
    0 => 'string',
    'conn_identifier' => 'resource',
  ),
  'cubrid_insert_id' => 
  array (
    0 => 'string',
    'conn_identifier=' => 'resource',
  ),
  'cubrid_is_instance' => 
  array (
    0 => 'int',
    'conn_identifier' => 'resource',
    'oid' => 'string',
  ),
  'cubrid_list_dbs' => 
  array (
    0 => 'array<array-key, mixed>',
    'conn_identifier' => 'resource',
  ),
  'cubrid_load_from_glo' => 
  array (
    0 => 'int',
    'conn_identifier' => 'mixed',
    'oid' => 'string',
    'file_name' => 'string',
  ),
  'cubrid_lob2_bind' => 
  array (
    0 => 'bool',
    'req_identifier' => 'resource',
    'bind_index' => 'int',
    'bind_value' => 'mixed',
    'bind_value_type=' => 'string',
  ),
  'cubrid_lob2_close' => 
  array (
    0 => 'bool',
    'lob_identifier' => 'resource',
  ),
  'cubrid_lob2_export' => 
  array (
    0 => 'bool',
    'lob_identifier' => 'resource',
    'file_name' => 'string',
  ),
  'cubrid_lob2_import' => 
  array (
    0 => 'bool',
    'lob_identifier' => 'resource',
    'file_name' => 'string',
  ),
  'cubrid_lob2_new' => 
  array (
    0 => 'resource',
    'conn_identifier=' => 'resource',
    'type=' => 'string',
  ),
  'cubrid_lob2_read' => 
  array (
    0 => 'string',
    'lob_identifier' => 'resource',
    'length' => 'int',
  ),
  'cubrid_lob2_seek' => 
  array (
    0 => 'bool',
    'lob_identifier' => 'resource',
    'offset' => 'int',
    'origin=' => 'int',
  ),
  'cubrid_lob2_seek64' => 
  array (
    0 => 'bool',
    'lob_identifier' => 'resource',
    'offset' => 'string',
    'origin=' => 'int',
  ),
  'cubrid_lob2_size' => 
  array (
    0 => 'int',
    'lob_identifier' => 'resource',
  ),
  'cubrid_lob2_size64' => 
  array (
    0 => 'string',
    'lob_identifier' => 'resource',
  ),
  'cubrid_lob2_tell' => 
  array (
    0 => 'int',
    'lob_identifier' => 'resource',
  ),
  'cubrid_lob2_tell64' => 
  array (
    0 => 'string',
    'lob_identifier' => 'resource',
  ),
  'cubrid_lob2_write' => 
  array (
    0 => 'bool',
    'lob_identifier' => 'resource',
    'buf' => 'string',
  ),
  'cubrid_lob_close' => 
  array (
    0 => 'bool',
    'lob_identifier_array' => 'array<array-key, mixed>',
  ),
  'cubrid_lob_export' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
    'lob_identifier' => 'resource',
    'path_name' => 'string',
  ),
  'cubrid_lob_get' => 
  array (
    0 => 'array<array-key, mixed>',
    'conn_identifier' => 'resource',
    'sql' => 'string',
  ),
  'cubrid_lob_send' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
    'lob_identifier' => 'resource',
  ),
  'cubrid_lob_size' => 
  array (
    0 => 'string',
    'lob_identifier' => 'resource',
  ),
  'cubrid_lock_read' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
    'oid' => 'string',
  ),
  'cubrid_lock_write' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
    'oid' => 'string',
  ),
  'cubrid_move_cursor' => 
  array (
    0 => 'int',
    'req_identifier' => 'resource',
    'offset' => 'int',
    'origin=' => 'int',
  ),
  'cubrid_new_glo' => 
  array (
    0 => 'string',
    'conn_identifier' => 'mixed',
    'class_name' => 'string',
    'file_name' => 'string',
  ),
  'cubrid_next_result' => 
  array (
    0 => 'bool',
    'result' => 'resource',
  ),
  'cubrid_num_cols' => 
  array (
    0 => 'int',
    'req_identifier' => 'resource',
  ),
  'cubrid_num_fields' => 
  array (
    0 => 'int',
    'result' => 'resource',
  ),
  'cubrid_num_rows' => 
  array (
    0 => 'int',
    'req_identifier' => 'resource',
  ),
  'cubrid_pconnect' => 
  array (
    0 => 'resource',
    'host' => 'string',
    'port' => 'int',
    'dbname' => 'string',
    'userid=' => 'string',
    'passwd=' => 'string',
  ),
  'cubrid_pconnect_with_url' => 
  array (
    0 => 'resource',
    'conn_url' => 'string',
    'userid=' => 'string',
    'passwd=' => 'string',
  ),
  'cubrid_ping' => 
  array (
    0 => 'bool',
    'conn_identifier=' => 'mixed',
  ),
  'cubrid_prepare' => 
  array (
    0 => 'resource',
    'conn_identifier' => 'resource',
    'prepare_stmt' => 'string',
    'option=' => 'int',
  ),
  'cubrid_put' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
    'oid' => 'string',
    'attr=' => 'string',
    'value=' => 'mixed',
  ),
  'cubrid_query' => 
  array (
    0 => 'resource',
    'query' => 'string',
    'conn_identifier=' => 'mixed',
  ),
  'cubrid_real_escape_string' => 
  array (
    0 => 'string',
    'unescaped_string' => 'string',
    'conn_identifier=' => 'mixed',
  ),
  'cubrid_result' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'row' => 'int',
    'field=' => 'mixed',
  ),
  'cubrid_rollback' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
  ),
  'cubrid_save_to_glo' => 
  array (
    0 => 'int',
    'conn_identifier' => 'mixed',
    'oid' => 'string',
    'file_name' => 'string',
  ),
  'cubrid_schema' => 
  array (
    0 => 'array<array-key, mixed>',
    'conn_identifier' => 'resource',
    'schema_type' => 'int',
    'class_name=' => 'string',
    'attr_name=' => 'string',
  ),
  'cubrid_send_glo' => 
  array (
    0 => 'int',
    'conn_identifier' => 'mixed',
    'oid' => 'string',
  ),
  'cubrid_seq_add' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
    'oid' => 'string',
    'attr_name' => 'string',
    'seq_element' => 'string',
  ),
  'cubrid_seq_drop' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
    'oid' => 'string',
    'attr_name' => 'string',
    'index' => 'int',
  ),
  'cubrid_seq_insert' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
    'oid' => 'string',
    'attr_name' => 'string',
    'index' => 'int',
    'seq_element' => 'string',
  ),
  'cubrid_seq_put' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
    'oid' => 'string',
    'attr_name' => 'string',
    'index' => 'int',
    'seq_element' => 'string',
  ),
  'cubrid_set_add' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
    'oid' => 'string',
    'attr_name' => 'string',
    'set_element' => 'string',
  ),
  'cubrid_set_autocommit' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
    'mode' => 'bool',
  ),
  'cubrid_set_db_parameter' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
    'param_type' => 'int',
    'param_value' => 'int',
  ),
  'cubrid_set_drop' => 
  array (
    0 => 'bool',
    'conn_identifier' => 'resource',
    'oid' => 'string',
    'attr_name' => 'string',
    'set_element' => 'string',
  ),
  'cubrid_set_query_timeout' => 
  array (
    0 => 'bool',
    'req_identifier' => 'resource',
    'timeout' => 'int',
  ),
  'cubrid_unbuffered_query' => 
  array (
    0 => 'resource',
    'query' => 'string',
    'conn_identifier=' => 'mixed',
  ),
  'cubrid_version' => 
  array (
    0 => 'string',
  ),
  'curl_close' => 
  array (
    0 => 'void',
    'handle' => 'CurlHandle',
  ),
  'curl_copy_handle' => 
  array (
    0 => 'CurlHandle|false',
    'handle' => 'CurlHandle',
  ),
  'curl_errno' => 
  array (
    0 => 'int',
    'handle' => 'CurlHandle',
  ),
  'curl_error' => 
  array (
    0 => 'string',
    'handle' => 'CurlHandle',
  ),
  'curl_escape' => 
  array (
    0 => 'false|string',
    'handle' => 'CurlHandle',
    'string' => 'string',
  ),
  'curl_exec' => 
  array (
    0 => 'bool|string',
    'handle' => 'CurlHandle',
  ),
  'curl_file_create' => 
  array (
    0 => 'CURLFile',
    'filename' => 'string',
    'mime_type=' => 'null|string',
    'posted_filename=' => 'null|string',
  ),
  'curl_getinfo' => 
  array (
    0 => 'mixed',
    'handle' => 'CurlHandle',
    'option=' => 'int|null',
  ),
  'curl_init' => 
  array (
    0 => 'CurlHandle|false',
    'url=' => 'null|string',
  ),
  'curl_multi_add_handle' => 
  array (
    0 => 'int',
    'multi_handle' => 'CurlMultiHandle',
    'handle' => 'CurlHandle',
  ),
  'curl_multi_close' => 
  array (
    0 => 'void',
    'multi_handle' => 'CurlMultiHandle',
  ),
  'curl_multi_errno' => 
  array (
    0 => 'int',
    'multi_handle' => 'CurlMultiHandle',
  ),
  'curl_multi_exec' => 
  array (
    0 => 'int',
    'multi_handle' => 'CurlMultiHandle',
    '&w_still_running' => 'int',
  ),
  'curl_multi_getcontent' => 
  array (
    0 => 'null|string',
    'handle' => 'CurlHandle',
  ),
  'curl_multi_info_read' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'multi_handle' => 'CurlMultiHandle',
    '&w_queued_messages=' => 'int',
  ),
  'curl_multi_init' => 
  array (
    0 => 'CurlMultiHandle',
  ),
  'curl_multi_remove_handle' => 
  array (
    0 => 'int',
    'multi_handle' => 'CurlMultiHandle',
    'handle' => 'CurlHandle',
  ),
  'curl_multi_select' => 
  array (
    0 => 'int',
    'multi_handle' => 'CurlMultiHandle',
    'timeout=' => 'float',
  ),
  'curl_multi_setopt' => 
  array (
    0 => 'bool',
    'multi_handle' => 'CurlMultiHandle',
    'option' => 'int',
    'value' => 'mixed',
  ),
  'curl_multi_strerror' => 
  array (
    0 => 'null|string',
    'error_code' => 'int',
  ),
  'curl_pause' => 
  array (
    0 => 'int',
    'handle' => 'CurlHandle',
    'flags' => 'int',
  ),
  'curl_reset' => 
  array (
    0 => 'void',
    'handle' => 'CurlHandle',
  ),
  'curl_setopt' => 
  array (
    0 => 'bool',
    'handle' => 'CurlHandle',
    'option' => 'int',
    'value' => 'callable|mixed',
  ),
  'curl_setopt_array' => 
  array (
    0 => 'bool',
    'handle' => 'CurlHandle',
    'options' => 'array<array-key, mixed>',
  ),
  'curl_share_close' => 
  array (
    0 => 'void',
    'share_handle' => 'CurlShareHandle',
  ),
  'curl_share_errno' => 
  array (
    0 => 'int',
    'share_handle' => 'CurlShareHandle',
  ),
  'curl_share_init' => 
  array (
    0 => 'CurlShareHandle',
  ),
  'curl_share_setopt' => 
  array (
    0 => 'bool',
    'share_handle' => 'CurlShareHandle',
    'option' => 'int',
    'value' => 'mixed',
  ),
  'curl_share_strerror' => 
  array (
    0 => 'null|string',
    'error_code' => 'int',
  ),
  'curl_strerror' => 
  array (
    0 => 'null|string',
    'error_code' => 'int',
  ),
  'curl_unescape' => 
  array (
    0 => 'false|string',
    'handle' => 'CurlHandle',
    'string' => 'string',
  ),
  'curl_version' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'curlfile::__construct' => 
  array (
    0 => 'void',
    'filename' => 'string',
    'mime_type=' => 'null|string',
    'posted_filename=' => 'null|string',
  ),
  'curlfile::getfilename' => 
  array (
    0 => 'string',
  ),
  'curlfile::getmimetype' => 
  array (
    0 => 'string',
  ),
  'curlfile::getpostfilename' => 
  array (
    0 => 'string',
  ),
  'curlfile::setmimetype' => 
  array (
    0 => 'void',
    'mime_type' => 'string',
  ),
  'curlfile::setpostfilename' => 
  array (
    0 => 'void',
    'posted_filename' => 'string',
  ),
  'current' => 
  array (
    0 => 'false|mixed',
    'array' => 'array<array-key, mixed>|object',
  ),
  'cyrus_authenticate' => 
  array (
    0 => 'void',
    'connection' => 'resource',
    'mechlist=' => 'string',
    'service=' => 'string',
    'user=' => 'string',
    'minssf=' => 'int',
    'maxssf=' => 'int',
    'authname=' => 'string',
    'password=' => 'string',
  ),
  'cyrus_bind' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
    'callbacks' => 'array<array-key, mixed>',
  ),
  'cyrus_close' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
  ),
  'cyrus_connect' => 
  array (
    0 => 'resource',
    'host=' => 'string',
    'port=' => 'string',
    'flags=' => 'int',
  ),
  'cyrus_query' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'resource',
    'query' => 'string',
  ),
  'cyrus_unbind' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
    'trigger_name' => 'string',
  ),
  'date' => 
  array (
    0 => 'string',
    'format' => 'string',
    'timestamp=' => 'int|null',
  ),
  'date_add' => 
  array (
    0 => 'DateTime',
    'object' => 'DateTime',
    'interval' => 'DateInterval',
  ),
  'date_create' => 
  array (
    0 => 'DateTime|false',
    'datetime=' => 'string',
    'timezone=' => 'DateTimeZone|null',
  ),
  'date_create_from_format' => 
  array (
    0 => 'DateTime|false',
    'format' => 'string',
    'datetime' => 'string',
    'timezone=' => 'DateTimeZone|null',
  ),
  'date_create_immutable' => 
  array (
    0 => 'DateTimeImmutable|false',
    'datetime=' => 'string',
    'timezone=' => 'DateTimeZone|null',
  ),
  'date_create_immutable_from_format' => 
  array (
    0 => 'DateTimeImmutable|false',
    'format' => 'string',
    'datetime' => 'string',
    'timezone=' => 'DateTimeZone|null',
  ),
  'date_date_set' => 
  array (
    0 => 'DateTime',
    'object' => 'DateTime',
    'year' => 'int',
    'month' => 'int',
    'day' => 'int',
  ),
  'date_default_timezone_get' => 
  array (
    0 => 'non-empty-string',
  ),
  'date_default_timezone_set' => 
  array (
    0 => 'bool',
    'timezoneId' => 'non-empty-string',
  ),
  'date_diff' => 
  array (
    0 => 'DateInterval',
    'baseObject' => 'DateTimeInterface',
    'targetObject' => 'DateTimeInterface',
    'absolute=' => 'bool',
  ),
  'date_format' => 
  array (
    0 => 'string',
    'object' => 'DateTimeInterface',
    'format' => 'string',
  ),
  'date_get_last_errors' => 
  array (
    0 => 'array{error_count: int, errors: array<int, string>, warning_count: int, warnings: array<int, string>}|false',
  ),
  'date_interval_create_from_date_string' => 
  array (
    0 => 'DateInterval',
    'datetime' => 'string',
  ),
  'date_interval_format' => 
  array (
    0 => 'string',
    'object' => 'DateInterval',
    'format' => 'string',
  ),
  'date_isodate_set' => 
  array (
    0 => 'DateTime',
    'object' => 'DateTime',
    'year' => 'int',
    'week' => 'int',
    'dayOfWeek=' => 'int',
  ),
  'date_modify' => 
  array (
    0 => 'DateTime|false',
    'object' => 'DateTime',
    'modifier' => 'string',
  ),
  'date_offset_get' => 
  array (
    0 => 'int',
    'object' => 'DateTimeInterface',
  ),
  'date_parse' => 
  array (
    0 => 'array<array-key, mixed>',
    'datetime' => 'string',
  ),
  'date_parse_from_format' => 
  array (
    0 => 'array<array-key, mixed>',
    'format' => 'string',
    'datetime' => 'string',
  ),
  'date_sub' => 
  array (
    0 => 'DateTime',
    'object' => 'DateTime',
    'interval' => 'DateInterval',
  ),
  'date_sun_info' => 
  array (
    0 => 'array<array-key, mixed>',
    'timestamp' => 'int',
    'latitude' => 'float',
    'longitude' => 'float',
  ),
  'date_sunrise' => 
  array (
    0 => 'false|float|int|string',
    'timestamp' => 'int',
    'returnFormat=' => 'int',
    'latitude=' => 'float|null',
    'longitude=' => 'float|null',
    'zenith=' => 'float|null',
    'utcOffset=' => 'float|null',
  ),
  'date_sunset' => 
  array (
    0 => 'false|float|int|string',
    'timestamp' => 'int',
    'returnFormat=' => 'int',
    'latitude=' => 'float|null',
    'longitude=' => 'float|null',
    'zenith=' => 'float|null',
    'utcOffset=' => 'float|null',
  ),
  'date_time_set' => 
  array (
    0 => 'DateTime',
    'object' => 'DateTime',
    'hour' => 'int',
    'minute' => 'int',
    'second=' => 'int',
    'microsecond=' => 'int',
  ),
  'date_timestamp_get' => 
  array (
    0 => 'int',
    'object' => 'DateTimeInterface',
  ),
  'date_timestamp_set' => 
  array (
    0 => 'DateTime',
    'object' => 'DateTime',
    'timestamp' => 'int',
  ),
  'date_timezone_get' => 
  array (
    0 => 'DateTimeZone|false',
    'object' => 'DateTimeInterface',
  ),
  'date_timezone_set' => 
  array (
    0 => 'DateTime',
    'object' => 'DateTime',
    'timezone' => 'DateTimeZone',
  ),
  'datefmt_create' => 
  array (
    0 => 'IntlDateFormatter|null',
    'locale' => 'null|string',
    'dateType' => 'int',
    'timeType' => 'int',
    'timezone=' => 'DateTimeZone|IntlTimeZone|null|string',
    'calendar=' => 'IntlCalendar|int|null',
    'pattern=' => 'null|string',
  ),
  'datefmt_format' => 
  array (
    0 => 'false|string',
    'formatter' => 'IntlDateFormatter',
    'datetime' => 'DateTime|IntlCalendar|array<array-key, mixed>|int',
  ),
  'datefmt_format_object' => 
  array (
    0 => 'false|string',
    'datetime' => 'object',
    'format=' => 'mixed',
    'locale=' => 'null|string',
  ),
  'datefmt_get_calendar' => 
  array (
    0 => 'int',
    'formatter' => 'IntlDateFormatter',
  ),
  'datefmt_get_calendar_object' => 
  array (
    0 => 'IntlCalendar|false|null',
    'formatter' => 'IntlDateFormatter',
  ),
  'datefmt_get_datetype' => 
  array (
    0 => 'int',
    'formatter' => 'IntlDateFormatter',
  ),
  'datefmt_get_error_code' => 
  array (
    0 => 'int',
    'formatter' => 'IntlDateFormatter',
  ),
  'datefmt_get_error_message' => 
  array (
    0 => 'string',
    'formatter' => 'IntlDateFormatter',
  ),
  'datefmt_get_locale' => 
  array (
    0 => 'false|string',
    'formatter' => 'IntlDateFormatter',
    'type=' => 'int',
  ),
  'datefmt_get_pattern' => 
  array (
    0 => 'string',
    'formatter' => 'IntlDateFormatter',
  ),
  'datefmt_get_timetype' => 
  array (
    0 => 'int',
    'formatter' => 'IntlDateFormatter',
  ),
  'datefmt_get_timezone' => 
  array (
    0 => 'IntlTimeZone|false',
    'formatter' => 'IntlDateFormatter',
  ),
  'datefmt_get_timezone_id' => 
  array (
    0 => 'false|string',
    'formatter' => 'IntlDateFormatter',
  ),
  'datefmt_is_lenient' => 
  array (
    0 => 'bool',
    'formatter' => 'IntlDateFormatter',
  ),
  'datefmt_localtime' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'formatter' => 'IntlDateFormatter',
    'string' => 'string',
    '&offset=' => 'int',
  ),
  'datefmt_parse' => 
  array (
    0 => 'false|float|int',
    'formatter' => 'IntlDateFormatter',
    'string' => 'string',
    '&offset=' => 'int',
  ),
  'datefmt_set_calendar' => 
  array (
    0 => 'bool',
    'formatter' => 'IntlDateFormatter',
    'calendar' => 'IntlCalendar|int|null',
  ),
  'datefmt_set_lenient' => 
  array (
    0 => 'void',
    'formatter' => 'IntlDateFormatter',
    'lenient' => 'bool',
  ),
  'datefmt_set_pattern' => 
  array (
    0 => 'bool',
    'formatter' => 'IntlDateFormatter',
    'pattern' => 'string',
  ),
  'datefmt_set_timezone' => 
  array (
    0 => 'false|null',
    'formatter' => 'IntlDateFormatter',
    'timezone' => 'DateTimeZone|IntlTimeZone|null|string',
  ),
  'dateinterval::__construct' => 
  array (
    0 => 'void',
    'duration' => 'string',
  ),
  'dateinterval::__set_state' => 
  array (
    0 => 'DateInterval',
    'array' => 'array<array-key, mixed>',
  ),
  'dateinterval::__wakeup' => 
  array (
    0 => 'void',
  ),
  'dateinterval::createfromdatestring' => 
  array (
    0 => 'DateInterval|false',
    'datetime' => 'string',
  ),
  'dateinterval::format' => 
  array (
    0 => 'string',
    'format' => 'string',
  ),
  'dateperiod::__construct' => 
  array (
    0 => 'void',
    'start' => 'DateTimeInterface',
    'interval=' => 'DateInterval',
    'end=' => 'int',
    'options=' => 'int',
  ),
  'dateperiod::__construct\'1' => 
  array (
    0 => 'void',
    'start' => 'DateTimeInterface',
    'interval' => 'DateInterval',
    'end' => 'DateTimeInterface',
    'options=' => 'int',
  ),
  'dateperiod::__construct\'2' => 
  array (
    0 => 'void',
    'iso' => 'string',
    'options=' => 'int',
  ),
  'dateperiod::__set_state' => 
  array (
    0 => 'mixed',
    'array' => 'array<array-key, mixed>',
  ),
  'dateperiod::__wakeup' => 
  array (
    0 => 'void',
  ),
  'dateperiod::getdateinterval' => 
  array (
    0 => 'DateInterval',
  ),
  'dateperiod::getenddate' => 
  array (
    0 => 'DateTimeInterface|null',
  ),
  'dateperiod::getiterator' => 
  array (
    0 => 'Iterator',
  ),
  'dateperiod::getrecurrences' => 
  array (
    0 => 'mixed',
  ),
  'dateperiod::getstartdate' => 
  array (
    0 => 'DateTimeInterface',
  ),
  'datetime::__construct' => 
  array (
    0 => 'void',
    'datetime=' => 'string',
    'timezone=' => 'DateTimeZone|null',
  ),
  'datetime::__construct\'1' => 
  array (
    0 => 'void',
    'time' => 'null|string',
    'timezone' => 'DateTimeZone|null',
  ),
  'datetime::__set_state' => 
  array (
    0 => 'mixed',
    'array' => 'array<array-key, mixed>',
  ),
  'datetime::__wakeup' => 
  array (
    0 => 'void',
  ),
  'datetime::add' => 
  array (
    0 => 'static',
    'interval' => 'DateInterval',
  ),
  'datetime::createfromformat' => 
  array (
    0 => 'false|static',
    'format' => 'string',
    'datetime' => 'string',
    'timezone=' => 'DateTimeZone|null',
  ),
  'datetime::createfromimmutable' => 
  array (
    0 => 'static',
    'object' => 'DateTimeImmutable',
  ),
  'datetime::createfrominterface' => 
  array (
    0 => 'static',
    'object' => 'DateTimeInterface',
  ),
  'datetime::diff' => 
  array (
    0 => 'DateInterval',
    'targetObject' => 'DateTimeInterface',
    'absolute=' => 'bool',
  ),
  'datetime::format' => 
  array (
    0 => 'string',
    'format' => 'string',
  ),
  'datetime::getlasterrors' => 
  array (
    0 => 'array{error_count: int, errors: array<int, string>, warning_count: int, warnings: array<int, string>}|false',
  ),
  'datetime::getoffset' => 
  array (
    0 => 'int',
  ),
  'datetime::gettimestamp' => 
  array (
    0 => 'int',
  ),
  'datetime::gettimezone' => 
  array (
    0 => 'DateTimeZone|false',
  ),
  'datetime::modify' => 
  array (
    0 => 'false|static',
    'modifier' => 'string',
  ),
  'datetime::setdate' => 
  array (
    0 => 'static',
    'year' => 'int',
    'month' => 'int',
    'day' => 'int',
  ),
  'datetime::setisodate' => 
  array (
    0 => 'static',
    'year' => 'int',
    'week' => 'int',
    'dayOfWeek=' => 'int',
  ),
  'datetime::settime' => 
  array (
    0 => 'static',
    'hour' => 'int',
    'minute' => 'int',
    'second=' => 'int',
    'microsecond=' => 'int',
  ),
  'datetime::settimestamp' => 
  array (
    0 => 'static',
    'timestamp' => 'int',
  ),
  'datetime::settimezone' => 
  array (
    0 => 'static',
    'timezone' => 'DateTimeZone',
  ),
  'datetime::sub' => 
  array (
    0 => 'static',
    'interval' => 'DateInterval',
  ),
  'datetimeimmutable::__construct' => 
  array (
    0 => 'void',
    'datetime=' => 'string',
    'timezone=' => 'DateTimeZone|null',
  ),
  'datetimeimmutable::__set_state' => 
  array (
    0 => 'mixed',
    'array' => 'array<array-key, mixed>',
  ),
  'datetimeimmutable::__wakeup' => 
  array (
    0 => 'void',
  ),
  'datetimeimmutable::add' => 
  array (
    0 => 'mixed',
    'interval' => 'DateInterval',
  ),
  'datetimeimmutable::createfromformat' => 
  array (
    0 => 'mixed',
    'format' => 'string',
    'datetime' => 'string',
    'timezone=' => 'DateTimeZone|null',
  ),
  'datetimeimmutable::createfrominterface' => 
  array (
    0 => 'static',
    'object' => 'DateTimeInterface',
  ),
  'datetimeimmutable::createfrommutable' => 
  array (
    0 => 'mixed',
    'object' => 'DateTime',
  ),
  'datetimeimmutable::diff' => 
  array (
    0 => 'mixed',
    'targetObject' => 'DateTimeInterface',
    'absolute=' => 'bool',
  ),
  'datetimeimmutable::format' => 
  array (
    0 => 'mixed',
    'format' => 'string',
  ),
  'datetimeimmutable::getlasterrors' => 
  array (
    0 => 'array{error_count: int, errors: array<int, string>, warning_count: int, warnings: array<int, string>}|false',
  ),
  'datetimeimmutable::getoffset' => 
  array (
    0 => 'mixed',
  ),
  'datetimeimmutable::gettimestamp' => 
  array (
    0 => 'mixed',
  ),
  'datetimeimmutable::gettimezone' => 
  array (
    0 => 'mixed',
  ),
  'datetimeimmutable::modify' => 
  array (
    0 => 'mixed',
    'modifier' => 'string',
  ),
  'datetimeimmutable::setdate' => 
  array (
    0 => 'mixed',
    'year' => 'int',
    'month' => 'int',
    'day' => 'int',
  ),
  'datetimeimmutable::setisodate' => 
  array (
    0 => 'mixed',
    'year' => 'int',
    'week' => 'int',
    'dayOfWeek=' => 'int',
  ),
  'datetimeimmutable::settime' => 
  array (
    0 => 'mixed',
    'hour' => 'int',
    'minute' => 'int',
    'second=' => 'int',
    'microsecond=' => 'int',
  ),
  'datetimeimmutable::settimestamp' => 
  array (
    0 => 'mixed',
    'timestamp' => 'int',
  ),
  'datetimeimmutable::settimezone' => 
  array (
    0 => 'mixed',
    'timezone' => 'DateTimeZone',
  ),
  'datetimeimmutable::sub' => 
  array (
    0 => 'mixed',
    'interval' => 'DateInterval',
  ),
  'datetimeinterface::diff' => 
  array (
    0 => 'DateInterval',
    'datetime2' => 'DateTimeInterface',
    'absolute=' => 'bool',
  ),
  'datetimeinterface::format' => 
  array (
    0 => 'string',
    'format' => 'string',
  ),
  'datetimeinterface::getoffset' => 
  array (
    0 => 'int',
  ),
  'datetimeinterface::gettimestamp' => 
  array (
    0 => 'int',
  ),
  'datetimeinterface::gettimezone' => 
  array (
    0 => 'DateTimeZone|false',
  ),
  'datetimezone::__construct' => 
  array (
    0 => 'void',
    'timezone' => 'non-empty-string',
  ),
  'datetimezone::__set_state' => 
  array (
    0 => 'DateTimeZone',
    'array' => 'array<array-key, mixed>',
  ),
  'datetimezone::__wakeup' => 
  array (
    0 => 'void',
  ),
  'datetimezone::getlocation' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'datetimezone::getname' => 
  array (
    0 => 'non-empty-string',
  ),
  'datetimezone::getoffset' => 
  array (
    0 => 'int',
    'datetime' => 'DateTimeInterface',
  ),
  'datetimezone::gettransitions' => 
  array (
    0 => 'false|list<array{abbr: string, isdst: bool, offset: int, time: string, ts: int}>',
    'timestampBegin=' => 'int',
    'timestampEnd=' => 'int',
  ),
  'datetimezone::listabbreviations' => 
  array (
    0 => 'array<string, list<array{dst: bool, offset: int, timezone_id: null|string}>>',
  ),
  'datetimezone::listidentifiers' => 
  array (
    0 => 'list<string>',
    'timezoneGroup=' => 'int',
    'countryCode=' => 'null|string',
  ),
  'db2_autocommit' => 
  array (
    0 => '0|1|bool',
    'connection' => 'resource',
    'value=' => '0|1|null',
  ),
  'db2_bind_param' => 
  array (
    0 => 'bool',
    'stmt' => 'resource',
    'parameter_number' => 'int',
    'variable_name' => 'string',
    'parameter_type=' => 'int',
    'data_type=' => 'int',
    'precision=' => 'int',
    'scale=' => 'int',
  ),
  'db2_client_info' => 
  array (
    0 => 'false|stdClass',
    'connection' => 'resource',
  ),
  'db2_close' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
  ),
  'db2_column_privileges' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'qualifier=' => 'null|string',
    'schema=' => 'null|string',
    'table_name=' => 'null|string',
    'column_name=' => 'null|string',
  ),
  'db2_columnprivileges' => 
  array (
    0 => 'mixed',
  ),
  'db2_columns' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'qualifier=' => 'null|string',
    'schema=' => 'null|string',
    'table_name=' => 'null|string',
    'column_name=' => 'null|string',
  ),
  'db2_commit' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
  ),
  'db2_conn_error' => 
  array (
    0 => 'string',
    'connection=' => 'resource',
  ),
  'db2_conn_errormsg' => 
  array (
    0 => 'string',
    'connection=' => 'resource',
  ),
  'db2_connect' => 
  array (
    0 => 'false|resource',
    'database' => 'string',
    'username' => 'null|string',
    'password' => 'null|string',
    'options=' => 'array<array-key, mixed>',
  ),
  'db2_cursor_type' => 
  array (
    0 => 'int',
    'stmt' => 'resource',
  ),
  'db2_escape_string' => 
  array (
    0 => 'string',
    'string_literal' => 'string',
  ),
  'db2_exec' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'statement' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'db2_execute' => 
  array (
    0 => 'bool',
    'stmt' => 'resource',
    'parameters=' => 'array<array-key, mixed>',
  ),
  'db2_fetch_array' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'stmt' => 'resource',
    'row_number=' => 'int|null',
  ),
  'db2_fetch_assoc' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'stmt' => 'resource',
    'row_number=' => 'int|null',
  ),
  'db2_fetch_both' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'stmt' => 'resource',
    'row_number=' => 'int|null',
  ),
  'db2_fetch_object' => 
  array (
    0 => 'false|stdClass',
    'stmt' => 'resource',
    'row_number=' => 'int|null',
  ),
  'db2_fetch_row' => 
  array (
    0 => 'bool',
    'stmt' => 'resource',
    'row_number=' => 'int|null',
  ),
  'db2_field_display_size' => 
  array (
    0 => 'false|int',
    'stmt' => 'resource',
    'column' => 'int|string',
  ),
  'db2_field_name' => 
  array (
    0 => 'false|string',
    'stmt' => 'resource',
    'column' => 'int|string',
  ),
  'db2_field_num' => 
  array (
    0 => 'false|int',
    'stmt' => 'resource',
    'column' => 'int|string',
  ),
  'db2_field_precision' => 
  array (
    0 => 'false|int',
    'stmt' => 'resource',
    'column' => 'int|string',
  ),
  'db2_field_scale' => 
  array (
    0 => 'false|int',
    'stmt' => 'resource',
    'column' => 'int|string',
  ),
  'db2_field_type' => 
  array (
    0 => 'false|string',
    'stmt' => 'resource',
    'column' => 'int|string',
  ),
  'db2_field_width' => 
  array (
    0 => 'false|int',
    'stmt' => 'resource',
    'column' => 'int|string',
  ),
  'db2_foreign_keys' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'qualifier' => 'null|string',
    'schema' => 'null|string',
    'table_name' => 'string',
  ),
  'db2_foreignkeys' => 
  array (
    0 => 'mixed',
  ),
  'db2_free_result' => 
  array (
    0 => 'bool',
    'stmt' => 'resource',
  ),
  'db2_free_stmt' => 
  array (
    0 => 'bool',
    'stmt' => 'resource',
  ),
  'db2_get_option' => 
  array (
    0 => 'false|string',
    'resource' => 'resource',
    'option' => 'string',
  ),
  'db2_last_insert_id' => 
  array (
    0 => 'null|string',
    'resource' => 'resource',
  ),
  'db2_lob_read' => 
  array (
    0 => 'false|string',
    'stmt' => 'resource',
    'colnum' => 'int',
    'length' => 'int',
  ),
  'db2_next_result' => 
  array (
    0 => 'false|resource',
    'stmt' => 'resource',
  ),
  'db2_num_fields' => 
  array (
    0 => 'false|int',
    'stmt' => 'resource',
  ),
  'db2_num_rows' => 
  array (
    0 => 'false|int',
    'stmt' => 'resource',
  ),
  'db2_pclose' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
  ),
  'db2_pconnect' => 
  array (
    0 => 'false|resource',
    'database' => 'string',
    'username' => 'null|string',
    'password' => 'null|string',
    'options=' => 'array<array-key, mixed>',
  ),
  'db2_prepare' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'statement' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'db2_primary_keys' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'qualifier' => 'null|string',
    'schema' => 'null|string',
    'table_name' => 'string',
  ),
  'db2_primarykeys' => 
  array (
    0 => 'mixed',
  ),
  'db2_procedure_columns' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'qualifier' => 'null|string',
    'schema' => 'string',
    'procedure' => 'string',
    'parameter' => 'null|string',
  ),
  'db2_procedurecolumns' => 
  array (
    0 => 'mixed',
  ),
  'db2_procedures' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'qualifier' => 'null|string',
    'schema' => 'string',
    'procedure' => 'string',
  ),
  'db2_result' => 
  array (
    0 => 'mixed',
    'stmt' => 'resource',
    'column' => 'int|string',
  ),
  'db2_rollback' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
  ),
  'db2_server_info' => 
  array (
    0 => 'false|stdClass',
    'connection' => 'resource',
  ),
  'db2_set_option' => 
  array (
    0 => 'bool',
    'resource' => 'resource',
    'options' => 'array<array-key, mixed>',
    'type' => 'int',
  ),
  'db2_setoption' => 
  array (
    0 => 'bool',
  ),
  'db2_special_columns' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'qualifier' => 'null|string',
    'schema' => 'string',
    'table_name' => 'string',
    'scope' => 'int',
  ),
  'db2_specialcolumns' => 
  array (
    0 => 'mixed',
  ),
  'db2_statistics' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'qualifier' => 'null|string',
    'schema' => 'null|string',
    'table_name' => 'string',
    'unique' => 'bool',
  ),
  'db2_stmt_error' => 
  array (
    0 => 'string',
    'stmt=' => 'resource',
  ),
  'db2_stmt_errormsg' => 
  array (
    0 => 'string',
    'stmt=' => 'resource',
  ),
  'db2_table_privileges' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'qualifier=' => 'null|string',
    'schema=' => 'null|string',
    'table_name=' => 'null|string',
  ),
  'db2_tableprivileges' => 
  array (
    0 => 'mixed',
  ),
  'db2_tables' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'qualifier=' => 'null|string',
    'schema=' => 'null|string',
    'table_name=' => 'null|string',
    'table_type=' => 'null|string',
  ),
  'dba_close' => 
  array (
    0 => 'void',
    'dba' => 'resource',
  ),
  'dba_delete' => 
  array (
    0 => 'bool',
    'key' => 'array<array-key, mixed>|string',
    'dba' => 'resource',
  ),
  'dba_exists' => 
  array (
    0 => 'bool',
    'key' => 'array<array-key, mixed>|string',
    'dba' => 'resource',
  ),
  'dba_fetch' => 
  array (
    0 => 'false|string',
    'key' => 'array<array-key, mixed>|string',
    'skip' => 'int',
    'dba' => 'resource',
  ),
  'dba_fetch\'1' => 
  array (
    0 => 'false|string',
    'key' => 'array<array-key, mixed>|string',
    'skip' => 'resource',
  ),
  'dba_firstkey' => 
  array (
    0 => 'string',
    'dba' => 'resource',
  ),
  'dba_handlers' => 
  array (
    0 => 'array<array-key, mixed>',
    'full_info=' => 'bool',
  ),
  'dba_insert' => 
  array (
    0 => 'bool',
    'key' => 'array<array-key, mixed>|string',
    'value' => 'string',
    'dba' => 'resource',
  ),
  'dba_key_split' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'key' => 'false|null|string',
  ),
  'dba_list' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'dba_nextkey' => 
  array (
    0 => 'string',
    'dba' => 'resource',
  ),
  'dba_open' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'mode' => 'string',
    'handler=' => 'string',
    '...handler_params=' => 'string',
  ),
  'dba_optimize' => 
  array (
    0 => 'bool',
    'dba' => 'resource',
  ),
  'dba_popen' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'mode' => 'string',
    'handler=' => 'string',
    '...handler_params=' => 'string',
  ),
  'dba_replace' => 
  array (
    0 => 'bool',
    'key' => 'array<array-key, mixed>|string',
    'value' => 'string',
    'dba' => 'resource',
  ),
  'dba_sync' => 
  array (
    0 => 'bool',
    'dba' => 'resource',
  ),
  'dbase_add_record' => 
  array (
    0 => 'bool',
    'dbase_identifier' => 'resource',
    'record' => 'array<array-key, mixed>',
  ),
  'dbase_close' => 
  array (
    0 => 'bool',
    'dbase_identifier' => 'resource',
  ),
  'dbase_create' => 
  array (
    0 => 'false|resource',
    'filename' => 'string',
    'fields' => 'array<array-key, mixed>',
  ),
  'dbase_delete_record' => 
  array (
    0 => 'bool',
    'dbase_identifier' => 'resource',
    'record_number' => 'int',
  ),
  'dbase_get_header_info' => 
  array (
    0 => 'array<array-key, mixed>',
    'dbase_identifier' => 'resource',
  ),
  'dbase_get_record' => 
  array (
    0 => 'array<array-key, mixed>',
    'dbase_identifier' => 'resource',
    'record_number' => 'int',
  ),
  'dbase_get_record_with_names' => 
  array (
    0 => 'array<array-key, mixed>',
    'dbase_identifier' => 'resource',
    'record_number' => 'int',
  ),
  'dbase_numfields' => 
  array (
    0 => 'int',
    'dbase_identifier' => 'resource',
  ),
  'dbase_numrecords' => 
  array (
    0 => 'int',
    'dbase_identifier' => 'resource',
  ),
  'dbase_open' => 
  array (
    0 => 'false|resource',
    'filename' => 'string',
    'mode' => 'int',
  ),
  'dbase_pack' => 
  array (
    0 => 'bool',
    'dbase_identifier' => 'resource',
  ),
  'dbase_replace_record' => 
  array (
    0 => 'bool',
    'dbase_identifier' => 'resource',
    'record' => 'array<array-key, mixed>',
    'record_number' => 'int',
  ),
  'dbplus_add' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'tuple' => 'array<array-key, mixed>',
  ),
  'dbplus_aql' => 
  array (
    0 => 'resource',
    'query' => 'string',
    'server=' => 'string',
    'dbpath=' => 'string',
  ),
  'dbplus_chdir' => 
  array (
    0 => 'string',
    'newdir=' => 'string',
  ),
  'dbplus_close' => 
  array (
    0 => 'mixed',
    'relation' => 'resource',
  ),
  'dbplus_curr' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'tuple' => 'array<array-key, mixed>',
  ),
  'dbplus_errcode' => 
  array (
    0 => 'string',
    'errno=' => 'int',
  ),
  'dbplus_errno' => 
  array (
    0 => 'int',
  ),
  'dbplus_find' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'constraints' => 'array<array-key, mixed>',
    'tuple' => 'mixed',
  ),
  'dbplus_first' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'tuple' => 'array<array-key, mixed>',
  ),
  'dbplus_flush' => 
  array (
    0 => 'int',
    'relation' => 'resource',
  ),
  'dbplus_freealllocks' => 
  array (
    0 => 'int',
  ),
  'dbplus_freelock' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'tuple' => 'string',
  ),
  'dbplus_freerlocks' => 
  array (
    0 => 'int',
    'relation' => 'resource',
  ),
  'dbplus_getlock' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'tuple' => 'string',
  ),
  'dbplus_getunique' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'uniqueid' => 'int',
  ),
  'dbplus_info' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'key' => 'string',
    'result' => 'array<array-key, mixed>',
  ),
  'dbplus_last' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'tuple' => 'array<array-key, mixed>',
  ),
  'dbplus_lockrel' => 
  array (
    0 => 'int',
    'relation' => 'resource',
  ),
  'dbplus_next' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'tuple' => 'array<array-key, mixed>',
  ),
  'dbplus_open' => 
  array (
    0 => 'resource',
    'name' => 'string',
  ),
  'dbplus_prev' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'tuple' => 'array<array-key, mixed>',
  ),
  'dbplus_rchperm' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'mask' => 'int',
    'user' => 'string',
    'group' => 'string',
  ),
  'dbplus_rcreate' => 
  array (
    0 => 'resource',
    'name' => 'string',
    'domlist' => 'mixed',
    'overwrite=' => 'bool',
  ),
  'dbplus_rcrtexact' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'relation' => 'resource',
    'overwrite=' => 'bool',
  ),
  'dbplus_rcrtlike' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'relation' => 'resource',
    'overwrite=' => 'int',
  ),
  'dbplus_resolve' => 
  array (
    0 => 'array<array-key, mixed>',
    'relation_name' => 'string',
  ),
  'dbplus_restorepos' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'tuple' => 'array<array-key, mixed>',
  ),
  'dbplus_rkeys' => 
  array (
    0 => 'mixed',
    'relation' => 'resource',
    'domlist' => 'mixed',
  ),
  'dbplus_ropen' => 
  array (
    0 => 'resource',
    'name' => 'string',
  ),
  'dbplus_rquery' => 
  array (
    0 => 'resource',
    'query' => 'string',
    'dbpath=' => 'string',
  ),
  'dbplus_rrename' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'name' => 'string',
  ),
  'dbplus_rsecindex' => 
  array (
    0 => 'mixed',
    'relation' => 'resource',
    'domlist' => 'mixed',
    'type' => 'int',
  ),
  'dbplus_runlink' => 
  array (
    0 => 'int',
    'relation' => 'resource',
  ),
  'dbplus_rzap' => 
  array (
    0 => 'int',
    'relation' => 'resource',
  ),
  'dbplus_savepos' => 
  array (
    0 => 'int',
    'relation' => 'resource',
  ),
  'dbplus_setindex' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'idx_name' => 'string',
  ),
  'dbplus_setindexbynumber' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'idx_number' => 'int',
  ),
  'dbplus_sql' => 
  array (
    0 => 'resource',
    'query' => 'string',
    'server=' => 'string',
    'dbpath=' => 'string',
  ),
  'dbplus_tcl' => 
  array (
    0 => 'string',
    'sid' => 'int',
    'script' => 'string',
  ),
  'dbplus_tremove' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'tuple' => 'array<array-key, mixed>',
    'current=' => 'array<array-key, mixed>',
  ),
  'dbplus_undo' => 
  array (
    0 => 'int',
    'relation' => 'resource',
  ),
  'dbplus_undoprepare' => 
  array (
    0 => 'int',
    'relation' => 'resource',
  ),
  'dbplus_unlockrel' => 
  array (
    0 => 'int',
    'relation' => 'resource',
  ),
  'dbplus_unselect' => 
  array (
    0 => 'int',
    'relation' => 'resource',
  ),
  'dbplus_update' => 
  array (
    0 => 'int',
    'relation' => 'resource',
    'old' => 'array<array-key, mixed>',
    'new' => 'array<array-key, mixed>',
  ),
  'dbplus_xlockrel' => 
  array (
    0 => 'int',
    'relation' => 'resource',
  ),
  'dbplus_xunlockrel' => 
  array (
    0 => 'int',
    'relation' => 'resource',
  ),
  'dbx_close' => 
  array (
    0 => 'int',
    'link_identifier' => 'object',
  ),
  'dbx_compare' => 
  array (
    0 => 'int',
    'row_a' => 'array<array-key, mixed>',
    'row_b' => 'array<array-key, mixed>',
    'column_key' => 'string',
    'flags=' => 'int',
  ),
  'dbx_connect' => 
  array (
    0 => 'object',
    'module' => 'mixed',
    'host' => 'string',
    'database' => 'string',
    'username' => 'string',
    'password' => 'string',
    'persistent=' => 'int',
  ),
  'dbx_error' => 
  array (
    0 => 'string',
    'link_identifier' => 'object',
  ),
  'dbx_escape_string' => 
  array (
    0 => 'string',
    'link_identifier' => 'object',
    'text' => 'string',
  ),
  'dbx_fetch_row' => 
  array (
    0 => 'mixed',
    'result_identifier' => 'object',
  ),
  'dbx_query' => 
  array (
    0 => 'mixed',
    'link_identifier' => 'object',
    'sql_statement' => 'string',
    'flags=' => 'int',
  ),
  'dbx_sort' => 
  array (
    0 => 'bool',
    'result' => 'object',
    'user_compare_function' => 'string',
  ),
  'dcgettext' => 
  array (
    0 => 'string',
    'domain' => 'string',
    'message' => 'string',
    'category' => 'int',
  ),
  'dcngettext' => 
  array (
    0 => 'string',
    'domain' => 'string',
    'singular' => 'string',
    'plural' => 'string',
    'count' => 'int',
    'category' => 'int',
  ),
  'deaggregate' => 
  array (
    0 => 'mixed',
    'object' => 'object',
    'class_name=' => 'string',
  ),
  'debug_backtrace' => 
  array (
    0 => 'list<array{args?: list<mixed>, class?: class-string, file?: string, function: string, line?: int, object?: object, type?: string}>',
    'options=' => 'int',
    'limit=' => 'int',
  ),
  'debug_print_backtrace' => 
  array (
    0 => 'void',
    'options=' => 'int',
    'limit=' => 'int',
  ),
  'debug_zval_dump' => 
  array (
    0 => 'void',
    'value' => 'mixed',
    '...values=' => 'mixed',
  ),
  'debugger_connect' => 
  array (
    0 => 'mixed',
  ),
  'debugger_connector_pid' => 
  array (
    0 => 'mixed',
  ),
  'debugger_get_server_start_time' => 
  array (
    0 => 'mixed',
  ),
  'debugger_print' => 
  array (
    0 => 'mixed',
  ),
  'debugger_start_debug' => 
  array (
    0 => 'mixed',
  ),
  'decbin' => 
  array (
    0 => 'string',
    'num' => 'int',
  ),
  'dechex' => 
  array (
    0 => 'string',
    'num' => 'int',
  ),
  'decoct' => 
  array (
    0 => 'string',
    'num' => 'int',
  ),
  'defer' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'define' => 
  array (
    0 => 'bool',
    'constant_name' => 'string',
    'value' => 'array<array-key, mixed>|null|scalar',
    'case_insensitive=' => 'false',
  ),
  'define_syslog_variables' => 
  array (
    0 => 'void',
  ),
  'defined' => 
  array (
    0 => 'bool',
    'constant_name' => 'string',
  ),
  'deflate_add' => 
  array (
    0 => 'false|string',
    'context' => 'DeflateContext',
    'data' => 'string',
    'flush_mode=' => 'int',
  ),
  'deflate_init' => 
  array (
    0 => 'DeflateContext|false',
    'encoding' => 'int',
    'options=' => 'array<array-key, mixed>',
  ),
  'deg2rad' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'dgettext' => 
  array (
    0 => 'string',
    'domain' => 'string',
    'message' => 'string',
  ),
  'dio_close' => 
  array (
    0 => 'void',
    'fd' => 'resource',
  ),
  'dio_fcntl' => 
  array (
    0 => 'mixed',
    'fd' => 'resource',
    'cmd' => 'int',
    'args=' => 'mixed',
  ),
  'dio_open' => 
  array (
    0 => 'false|resource',
    'filename' => 'string',
    'flags' => 'int',
    'mode=' => 'int',
  ),
  'dio_read' => 
  array (
    0 => 'string',
    'fd' => 'resource',
    'length=' => 'int',
  ),
  'dio_seek' => 
  array (
    0 => 'int',
    'fd' => 'resource',
    'pos' => 'int',
    'whence=' => 'int',
  ),
  'dio_stat' => 
  array (
    0 => 'array<array-key, mixed>|null',
    'fd' => 'resource',
  ),
  'dio_tcsetattr' => 
  array (
    0 => 'bool',
    'fd' => 'resource',
    'options' => 'array<array-key, mixed>',
  ),
  'dio_truncate' => 
  array (
    0 => 'bool',
    'fd' => 'resource',
    'offset' => 'int',
  ),
  'dio_write' => 
  array (
    0 => 'int',
    'fd' => 'resource',
    'data' => 'string',
    'length=' => 'int',
  ),
  'dir' => 
  array (
    0 => 'Directory|false',
    'directory' => 'string',
    'context=' => 'resource',
  ),
  'directory::close' => 
  array (
    0 => 'void',
  ),
  'directory::read' => 
  array (
    0 => 'false|string',
  ),
  'directory::rewind' => 
  array (
    0 => 'void',
  ),
  'directoryiterator::__construct' => 
  array (
    0 => 'void',
    'directory' => 'string',
  ),
  'directoryiterator::__debuginfo' => 
  array (
    0 => 'mixed',
  ),
  'directoryiterator::__tostring' => 
  array (
    0 => 'string',
  ),
  'directoryiterator::_bad_state_ex' => 
  array (
    0 => 'mixed',
  ),
  'directoryiterator::current' => 
  array (
    0 => 'DirectoryIterator',
  ),
  'directoryiterator::getatime' => 
  array (
    0 => 'int',
  ),
  'directoryiterator::getbasename' => 
  array (
    0 => 'string',
    'suffix=' => 'string',
  ),
  'directoryiterator::getctime' => 
  array (
    0 => 'int',
  ),
  'directoryiterator::getextension' => 
  array (
    0 => 'string',
  ),
  'directoryiterator::getfileinfo' => 
  array (
    0 => 'SplFileInfo',
    'class=' => 'class-string|null',
  ),
  'directoryiterator::getfilename' => 
  array (
    0 => 'string',
  ),
  'directoryiterator::getgroup' => 
  array (
    0 => 'int',
  ),
  'directoryiterator::getinode' => 
  array (
    0 => 'int',
  ),
  'directoryiterator::getlinktarget' => 
  array (
    0 => 'string',
  ),
  'directoryiterator::getmtime' => 
  array (
    0 => 'int',
  ),
  'directoryiterator::getowner' => 
  array (
    0 => 'int',
  ),
  'directoryiterator::getpath' => 
  array (
    0 => 'string',
  ),
  'directoryiterator::getpathinfo' => 
  array (
    0 => 'SplFileInfo|null',
    'class=' => 'class-string|null',
  ),
  'directoryiterator::getpathname' => 
  array (
    0 => 'string',
  ),
  'directoryiterator::getperms' => 
  array (
    0 => 'int',
  ),
  'directoryiterator::getrealpath' => 
  array (
    0 => 'non-falsy-string',
  ),
  'directoryiterator::getsize' => 
  array (
    0 => 'int',
  ),
  'directoryiterator::gettype' => 
  array (
    0 => 'string',
  ),
  'directoryiterator::isdir' => 
  array (
    0 => 'bool',
  ),
  'directoryiterator::isdot' => 
  array (
    0 => 'bool',
  ),
  'directoryiterator::isexecutable' => 
  array (
    0 => 'bool',
  ),
  'directoryiterator::isfile' => 
  array (
    0 => 'bool',
  ),
  'directoryiterator::islink' => 
  array (
    0 => 'bool',
  ),
  'directoryiterator::isreadable' => 
  array (
    0 => 'bool',
  ),
  'directoryiterator::iswritable' => 
  array (
    0 => 'bool',
  ),
  'directoryiterator::key' => 
  array (
    0 => 'string',
  ),
  'directoryiterator::next' => 
  array (
    0 => 'void',
  ),
  'directoryiterator::openfile' => 
  array (
    0 => 'SplFileObject',
    'mode=' => 'string',
    'useIncludePath=' => 'bool',
    'context=' => 'null|resource',
  ),
  'directoryiterator::rewind' => 
  array (
    0 => 'void',
  ),
  'directoryiterator::seek' => 
  array (
    0 => 'void',
    'offset' => 'int',
  ),
  'directoryiterator::setfileclass' => 
  array (
    0 => 'void',
    'class=' => 'class-string',
  ),
  'directoryiterator::setinfoclass' => 
  array (
    0 => 'void',
    'class=' => 'class-string',
  ),
  'directoryiterator::valid' => 
  array (
    0 => 'bool',
  ),
  'dirname' => 
  array (
    0 => 'string',
    'path' => 'string',
    'levels=' => 'int<1, max>',
  ),
  'disk_free_space' => 
  array (
    0 => 'false|float',
    'directory' => 'string',
  ),
  'disk_total_space' => 
  array (
    0 => 'false|float',
    'directory' => 'string',
  ),
  'diskfreespace' => 
  array (
    0 => 'false|float',
    'directory' => 'string',
  ),
  'display_disabled_function' => 
  array (
    0 => 'mixed',
  ),
  'divisionbyzeroerror::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'divisionbyzeroerror::__tostring' => 
  array (
    0 => 'string',
  ),
  'divisionbyzeroerror::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'divisionbyzeroerror::getcode' => 
  array (
    0 => 'mixed',
  ),
  'divisionbyzeroerror::getfile' => 
  array (
    0 => 'string',
  ),
  'divisionbyzeroerror::getline' => 
  array (
    0 => 'int',
  ),
  'divisionbyzeroerror::getmessage' => 
  array (
    0 => 'string',
  ),
  'divisionbyzeroerror::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'divisionbyzeroerror::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'divisionbyzeroerror::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'dl' => 
  array (
    0 => 'bool',
    'extension_filename' => 'string',
  ),
  'dngettext' => 
  array (
    0 => 'string',
    'domain' => 'string',
    'singular' => 'string',
    'plural' => 'string',
    'count' => 'int',
  ),
  'dns_check_record' => 
  array (
    0 => 'bool',
    'hostname' => 'string',
    'type=' => 'string',
  ),
  'dns_get_mx' => 
  array (
    0 => 'bool',
    'hostname' => 'string',
    '&w_hosts' => 'array<array-key, mixed>',
    '&w_weights=' => 'array<array-key, mixed>',
  ),
  'dns_get_record' => 
  array (
    0 => 'false|list<array<array-key, mixed>>',
    'hostname' => 'string',
    'type=' => 'int',
    '&w_authoritative_name_servers=' => 'array<array-key, mixed>',
    '&w_additional_records=' => 'array<array-key, mixed>',
    'raw=' => 'bool',
  ),
  'dom_document_relaxng_validate_file' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'dom_document_relaxng_validate_xml' => 
  array (
    0 => 'bool',
    'source' => 'string',
  ),
  'dom_document_schema_validate' => 
  array (
    0 => 'bool',
    'source' => 'string',
    'flags' => 'int',
  ),
  'dom_document_schema_validate_file' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'flags' => 'int',
  ),
  'dom_document_xinclude' => 
  array (
    0 => 'int',
    'options' => 'int',
  ),
  'dom_import_simplexml' => 
  array (
    0 => 'DOMElement',
    'node' => 'SimpleXMLElement',
  ),
  'dom_xpath_evaluate' => 
  array (
    0 => 'mixed',
    'expr' => 'string',
    'context' => 'DOMNode',
    'registernodens' => 'bool',
  ),
  'dom_xpath_query' => 
  array (
    0 => 'DOMNodeList',
    'expr' => 'string',
    'context' => 'DOMNode',
    'registernodens' => 'bool',
  ),
  'dom_xpath_register_ns' => 
  array (
    0 => 'bool',
    'prefix' => 'string',
    'uri' => 'string',
  ),
  'dom_xpath_register_php_functions' => 
  array (
    0 => 'mixed',
  ),
  'domainexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'domainexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'domainexception::__wakeup' => 
  array (
    0 => 'void',
  ),
  'domainexception::getcode' => 
  array (
    0 => 'int',
  ),
  'domainexception::getfile' => 
  array (
    0 => 'string',
  ),
  'domainexception::getline' => 
  array (
    0 => 'int',
  ),
  'domainexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'domainexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'domainexception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'domainexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'domattr::__construct' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value=' => 'string',
  ),
  'domattr::appendchild' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
  ),
  'domattr::c14n' => 
  array (
    0 => 'mixed',
    'exclusive=' => 'bool',
    'withComments=' => 'bool',
    'xpath=' => 'array<array-key, mixed>|null',
    'nsPrefixes=' => 'array<array-key, mixed>|null',
  ),
  'domattr::c14nfile' => 
  array (
    0 => 'mixed',
    'uri' => 'string',
    'exclusive=' => 'bool',
    'withComments=' => 'bool',
    'xpath=' => 'array<array-key, mixed>|null',
    'nsPrefixes=' => 'array<array-key, mixed>|null',
  ),
  'domattr::clonenode' => 
  array (
    0 => 'mixed',
    'deep=' => 'bool',
  ),
  'domattr::getlineno' => 
  array (
    0 => 'int',
  ),
  'domattr::getnodepath' => 
  array (
    0 => 'null|string',
  ),
  'domattr::hasattributes' => 
  array (
    0 => 'bool',
  ),
  'domattr::haschildnodes' => 
  array (
    0 => 'bool',
  ),
  'domattr::insertbefore' => 
  array (
    0 => 'DOMNode|false',
    'node' => 'DOMNode',
    'child=' => 'DOMNode|null',
  ),
  'domattr::isdefaultnamespace' => 
  array (
    0 => 'bool',
    'namespace' => 'string',
  ),
  'domattr::isid' => 
  array (
    0 => 'bool',
  ),
  'domattr::issamenode' => 
  array (
    0 => 'bool',
    'otherNode' => 'DOMNode',
  ),
  'domattr::issupported' => 
  array (
    0 => 'bool',
    'feature' => 'string',
    'version' => 'string',
  ),
  'domattr::lookupnamespaceuri' => 
  array (
    0 => 'null|string',
    'prefix' => 'null|string',
  ),
  'domattr::lookupprefix' => 
  array (
    0 => 'null|string',
    'namespace' => 'string',
  ),
  'domattr::normalize' => 
  array (
    0 => 'void',
  ),
  'domattr::removechild' => 
  array (
    0 => 'DOMNode|false',
    'child' => 'DOMNode',
  ),
  'domattr::replacechild' => 
  array (
    0 => 'DOMNode|false',
    'node' => 'DOMNode',
    'child' => 'DOMNode',
  ),
  'domattribute::name' => 
  array (
    0 => 'string',
  ),
  'domattribute::set_value' => 
  array (
    0 => 'bool',
    'content' => 'string',
  ),
  'domattribute::specified' => 
  array (
    0 => 'bool',
  ),
  'domattribute::value' => 
  array (
    0 => 'string',
  ),
  'domcdatasection::__construct' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'domcdatasection::after' => 
  array (
    0 => 'void',
    '...nodes=' => 'mixed',
  ),
  'domcdatasection::appendchild' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
  ),
  'domcdatasection::appenddata' => 
  array (
    0 => 'mixed',
    'data' => 'string',
  ),
  'domcdatasection::before' => 
  array (
    0 => 'void',
    '...nodes=' => 'mixed',
  ),
  'domcdatasection::c14n' => 
  array (
    0 => 'mixed',
    'exclusive=' => 'bool',
    'withComments=' => 'bool',
    'xpath=' => 'array<array-key, mixed>|null',
    'nsPrefixes=' => 'array<array-key, mixed>|null',
  ),
  'domcdatasection::c14nfile' => 
  array (
    0 => 'mixed',
    'uri' => 'string',
    'exclusive=' => 'bool',
    'withComments=' => 'bool',
    'xpath=' => 'array<array-key, mixed>|null',
    'nsPrefixes=' => 'array<array-key, mixed>|null',
  ),
  'domcdatasection::clonenode' => 
  array (
    0 => 'mixed',
    'deep=' => 'bool',
  ),
  'domcdatasection::deletedata' => 
  array (
    0 => 'mixed',
    'offset' => 'int',
    'count' => 'int',
  ),
  'domcdatasection::getlineno' => 
  array (
    0 => 'mixed',
  ),
  'domcdatasection::getnodepath' => 
  array (
    0 => 'mixed',
  ),
  'domcdatasection::hasattributes' => 
  array (
    0 => 'mixed',
  ),
  'domcdatasection::haschildnodes' => 
  array (
    0 => 'mixed',
  ),
  'domcdatasection::insertbefore' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
    'child=' => 'DOMNode|null',
  ),
  'domcdatasection::insertdata' => 
  array (
    0 => 'mixed',
    'offset' => 'int',
    'data' => 'string',
  ),
  'domcdatasection::isdefaultnamespace' => 
  array (
    0 => 'mixed',
    'namespace' => 'string',
  ),
  'domcdatasection::iselementcontentwhitespace' => 
  array (
    0 => 'mixed',
  ),
  'domcdatasection::issamenode' => 
  array (
    0 => 'mixed',
    'otherNode' => 'DOMNode',
  ),
  'domcdatasection::issupported' => 
  array (
    0 => 'mixed',
    'feature' => 'string',
    'version' => 'string',
  ),
  'domcdatasection::iswhitespaceinelementcontent' => 
  array (
    0 => 'mixed',
  ),
  'domcdatasection::lookupnamespaceuri' => 
  array (
    0 => 'mixed',
    'prefix' => 'null|string',
  ),
  'domcdatasection::lookupprefix' => 
  array (
    0 => 'mixed',
    'namespace' => 'string',
  ),
  'domcdatasection::normalize' => 
  array (
    0 => 'mixed',
  ),
  'domcdatasection::remove' => 
  array (
    0 => 'void',
  ),
  'domcdatasection::removechild' => 
  array (
    0 => 'mixed',
    'child' => 'DOMNode',
  ),
  'domcdatasection::replacechild' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
    'child' => 'DOMNode',
  ),
  'domcdatasection::replacedata' => 
  array (
    0 => 'mixed',
    'offset' => 'int',
    'count' => 'int',
    'data' => 'string',
  ),
  'domcdatasection::replacewith' => 
  array (
    0 => 'void',
    '...nodes=' => 'mixed',
  ),
  'domcdatasection::splittext' => 
  array (
    0 => 'mixed',
    'offset' => 'int',
  ),
  'domcdatasection::substringdata' => 
  array (
    0 => 'mixed',
    'offset' => 'int',
    'count' => 'int',
  ),
  'domcharacterdata::after' => 
  array (
    0 => 'void',
    '...nodes=' => 'mixed',
  ),
  'domcharacterdata::appendchild' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
  ),
  'domcharacterdata::appenddata' => 
  array (
    0 => 'true',
    'data' => 'string',
  ),
  'domcharacterdata::before' => 
  array (
    0 => 'void',
    '...nodes=' => 'mixed',
  ),
  'domcharacterdata::c14n' => 
  array (
    0 => 'mixed',
    'exclusive=' => 'bool',
    'withComments=' => 'bool',
    'xpath=' => 'array<array-key, mixed>|null',
    'nsPrefixes=' => 'array<array-key, mixed>|null',
  ),
  'domcharacterdata::c14nfile' => 
  array (
    0 => 'mixed',
    'uri' => 'string',
    'exclusive=' => 'bool',
    'withComments=' => 'bool',
    'xpath=' => 'array<array-key, mixed>|null',
    'nsPrefixes=' => 'array<array-key, mixed>|null',
  ),
  'domcharacterdata::clonenode' => 
  array (
    0 => 'mixed',
    'deep=' => 'bool',
  ),
  'domcharacterdata::deletedata' => 
  array (
    0 => 'bool',
    'offset' => 'int',
    'count' => 'int',
  ),
  'domcharacterdata::getlineno' => 
  array (
    0 => 'mixed',
  ),
  'domcharacterdata::getnodepath' => 
  array (
    0 => 'mixed',
  ),
  'domcharacterdata::hasattributes' => 
  array (
    0 => 'mixed',
  ),
  'domcharacterdata::haschildnodes' => 
  array (
    0 => 'mixed',
  ),
  'domcharacterdata::insertbefore' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
    'child=' => 'DOMNode|null',
  ),
  'domcharacterdata::insertdata' => 
  array (
    0 => 'bool',
    'offset' => 'int',
    'data' => 'string',
  ),
  'domcharacterdata::isdefaultnamespace' => 
  array (
    0 => 'mixed',
    'namespace' => 'string',
  ),
  'domcharacterdata::issamenode' => 
  array (
    0 => 'mixed',
    'otherNode' => 'DOMNode',
  ),
  'domcharacterdata::issupported' => 
  array (
    0 => 'mixed',
    'feature' => 'string',
    'version' => 'string',
  ),
  'domcharacterdata::lookupnamespaceuri' => 
  array (
    0 => 'mixed',
    'prefix' => 'null|string',
  ),
  'domcharacterdata::lookupprefix' => 
  array (
    0 => 'mixed',
    'namespace' => 'string',
  ),
  'domcharacterdata::normalize' => 
  array (
    0 => 'mixed',
  ),
  'domcharacterdata::remove' => 
  array (
    0 => 'void',
  ),
  'domcharacterdata::removechild' => 
  array (
    0 => 'mixed',
    'child' => 'DOMNode',
  ),
  'domcharacterdata::replacechild' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
    'child' => 'DOMNode',
  ),
  'domcharacterdata::replacedata' => 
  array (
    0 => 'bool',
    'offset' => 'int',
    'count' => 'int',
    'data' => 'string',
  ),
  'domcharacterdata::replacewith' => 
  array (
    0 => 'void',
    '...nodes=' => 'mixed',
  ),
  'domcharacterdata::substringdata' => 
  array (
    0 => 'string',
    'offset' => 'int',
    'count' => 'int',
  ),
  'domcomment::__construct' => 
  array (
    0 => 'void',
    'data=' => 'string',
  ),
  'domcomment::after' => 
  array (
    0 => 'void',
    '...nodes=' => 'mixed',
  ),
  'domcomment::appendchild' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
  ),
  'domcomment::appenddata' => 
  array (
    0 => 'mixed',
    'data' => 'string',
  ),
  'domcomment::before' => 
  array (
    0 => 'void',
    '...nodes=' => 'mixed',
  ),
  'domcomment::c14n' => 
  array (
    0 => 'mixed',
    'exclusive=' => 'bool',
    'withComments=' => 'bool',
    'xpath=' => 'array<array-key, mixed>|null',
    'nsPrefixes=' => 'array<array-key, mixed>|null',
  ),
  'domcomment::c14nfile' => 
  array (
    0 => 'mixed',
    'uri' => 'string',
    'exclusive=' => 'bool',
    'withComments=' => 'bool',
    'xpath=' => 'array<array-key, mixed>|null',
    'nsPrefixes=' => 'array<array-key, mixed>|null',
  ),
  'domcomment::clonenode' => 
  array (
    0 => 'mixed',
    'deep=' => 'bool',
  ),
  'domcomment::deletedata' => 
  array (
    0 => 'mixed',
    'offset' => 'int',
    'count' => 'int',
  ),
  'domcomment::getlineno' => 
  array (
    0 => 'mixed',
  ),
  'domcomment::getnodepath' => 
  array (
    0 => 'mixed',
  ),
  'domcomment::hasattributes' => 
  array (
    0 => 'mixed',
  ),
  'domcomment::haschildnodes' => 
  array (
    0 => 'mixed',
  ),
  'domcomment::insertbefore' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
    'child=' => 'DOMNode|null',
  ),
  'domcomment::insertdata' => 
  array (
    0 => 'mixed',
    'offset' => 'int',
    'data' => 'string',
  ),
  'domcomment::isdefaultnamespace' => 
  array (
    0 => 'mixed',
    'namespace' => 'string',
  ),
  'domcomment::issamenode' => 
  array (
    0 => 'mixed',
    'otherNode' => 'DOMNode',
  ),
  'domcomment::issupported' => 
  array (
    0 => 'mixed',
    'feature' => 'string',
    'version' => 'string',
  ),
  'domcomment::lookupnamespaceuri' => 
  array (
    0 => 'mixed',
    'prefix' => 'null|string',
  ),
  'domcomment::lookupprefix' => 
  array (
    0 => 'mixed',
    'namespace' => 'string',
  ),
  'domcomment::normalize' => 
  array (
    0 => 'mixed',
  ),
  'domcomment::remove' => 
  array (
    0 => 'void',
  ),
  'domcomment::removechild' => 
  array (
    0 => 'mixed',
    'child' => 'DOMNode',
  ),
  'domcomment::replacechild' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
    'child' => 'DOMNode',
  ),
  'domcomment::replacedata' => 
  array (
    0 => 'mixed',
    'offset' => 'int',
    'count' => 'int',
    'data' => 'string',
  ),
  'domcomment::replacewith' => 
  array (
    0 => 'void',
    '...nodes=' => 'mixed',
  ),
  'domcomment::substringdata' => 
  array (
    0 => 'mixed',
    'offset' => 'int',
    'count' => 'int',
  ),
  'domdocument::__construct' => 
  array (
    0 => 'void',
    'version=' => 'string',
    'encoding=' => 'string',
  ),
  'domdocument::adoptnode' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
  ),
  'domdocument::append' => 
  array (
    0 => 'void',
    '...nodes=' => 'mixed',
  ),
  'domdocument::appendchild' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
  ),
  'domdocument::c14n' => 
  array (
    0 => 'mixed',
    'exclusive=' => 'bool',
    'withComments=' => 'bool',
    'xpath=' => 'array<array-key, mixed>|null',
    'nsPrefixes=' => 'array<array-key, mixed>|null',
  ),
  'domdocument::c14nfile' => 
  array (
    0 => 'mixed',
    'uri' => 'string',
    'exclusive=' => 'bool',
    'withComments=' => 'bool',
    'xpath=' => 'array<array-key, mixed>|null',
    'nsPrefixes=' => 'array<array-key, mixed>|null',
  ),
  'domdocument::clonenode' => 
  array (
    0 => 'mixed',
    'deep=' => 'bool',
  ),
  'domdocument::createattribute' => 
  array (
    0 => 'DOMAttr|false',
    'localName' => 'string',
  ),
  'domdocument::createattributens' => 
  array (
    0 => 'DOMAttr|false',
    'namespace' => 'null|string',
    'qualifiedName' => 'string',
  ),
  'domdocument::createcdatasection' => 
  array (
    0 => 'DOMCDATASection|false',
    'data' => 'string',
  ),
  'domdocument::createcomment' => 
  array (
    0 => 'DOMComment|false',
    'data' => 'string',
  ),
  'domdocument::createdocumentfragment' => 
  array (
    0 => 'DOMDocumentFragment|false',
  ),
  'domdocument::createelement' => 
  array (
    0 => 'DOMElement|false',
    'localName' => 'string',
    'value=' => 'string',
  ),
  'domdocument::createelementns' => 
  array (
    0 => 'DOMElement|false',
    'namespace' => 'null|string',
    'qualifiedName' => 'string',
    'value=' => 'string',
  ),
  'domdocument::createentityreference' => 
  array (
    0 => 'DOMEntityReference|false',
    'name' => 'string',
  ),
  'domdocument::createprocessinginstruction' => 
  array (
    0 => 'DOMProcessingInstruction|false',
    'target' => 'string',
    'data=' => 'string',
  ),
  'domdocument::createtextnode' => 
  array (
    0 => 'DOMText|false',
    'data' => 'string',
  ),
  'domdocument::getelementbyid' => 
  array (
    0 => 'DOMElement|null',
    'elementId' => 'string',
  ),
  'domdocument::getelementsbytagname' => 
  array (
    0 => 'DOMNodeList',
    'qualifiedName' => 'string',
  ),
  'domdocument::getelementsbytagnamens' => 
  array (
    0 => 'DOMNodeList',
    'namespace' => 'null|string',
    'localName' => 'string',
  ),
  'domdocument::getlineno' => 
  array (
    0 => 'mixed',
  ),
  'domdocument::getnodepath' => 
  array (
    0 => 'mixed',
  ),
  'domdocument::hasattributes' => 
  array (
    0 => 'mixed',
  ),
  'domdocument::haschildnodes' => 
  array (
    0 => 'mixed',
  ),
  'domdocument::importnode' => 
  array (
    0 => 'DOMNode|false',
    'node' => 'DOMNode',
    'deep=' => 'bool',
  ),
  'domdocument::insertbefore' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
    'child=' => 'DOMNode|null',
  ),
  'domdocument::isdefaultnamespace' => 
  array (
    0 => 'mixed',
    'namespace' => 'string',
  ),
  'domdocument::issamenode' => 
  array (
    0 => 'mixed',
    'otherNode' => 'DOMNode',
  ),
  'domdocument::issupported' => 
  array (
    0 => 'mixed',
    'feature' => 'string',
    'version' => 'string',
  ),
  'domdocument::load' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'options=' => 'int',
  ),
  'domdocument::loadhtml' => 
  array (
    0 => 'bool',
    'source' => 'non-empty-string',
    'options=' => 'int',
  ),
  'domdocument::loadhtmlfile' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'options=' => 'int',
  ),
  'domdocument::loadxml' => 
  array (
    0 => 'bool',
    'source' => 'non-empty-string',
    'options=' => 'int',
  ),
  'domdocument::lookupnamespaceuri' => 
  array (
    0 => 'mixed',
    'prefix' => 'null|string',
  ),
  'domdocument::lookupprefix' => 
  array (
    0 => 'mixed',
    'namespace' => 'string',
  ),
  'domdocument::normalize' => 
  array (
    0 => 'mixed',
  ),
  'domdocument::normalizedocument' => 
  array (
    0 => 'void',
  ),
  'domdocument::prepend' => 
  array (
    0 => 'void',
    '...nodes=' => 'mixed',
  ),
  'domdocument::registernodeclass' => 
  array (
    0 => 'bool',
    'baseClass' => 'string',
    'extendedClass' => 'null|string',
  ),
  'domdocument::relaxngvalidate' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'domdocument::relaxngvalidatesource' => 
  array (
    0 => 'bool',
    'source' => 'string',
  ),
  'domdocument::removechild' => 
  array (
    0 => 'mixed',
    'child' => 'DOMNode',
  ),
  'domdocument::replacechild' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
    'child' => 'DOMNode',
  ),
  'domdocument::save' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
    'options=' => 'int',
  ),
  'domdocument::savehtml' => 
  array (
    0 => 'false|string',
    'node=' => 'DOMNode|null',
  ),
  'domdocument::savehtmlfile' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
  ),
  'domdocument::savexml' => 
  array (
    0 => 'false|string',
    'node=' => 'DOMNode|null',
    'options=' => 'int',
  ),
  'domdocument::schemavalidate' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'flags=' => 'int',
  ),
  'domdocument::schemavalidatesource' => 
  array (
    0 => 'bool',
    'source' => 'string',
    'flags=' => 'int',
  ),
  'domdocument::validate' => 
  array (
    0 => 'bool',
  ),
  'domdocument::xinclude' => 
  array (
    0 => 'int',
    'options=' => 'int',
  ),
  'domdocumentfragment::__construct' => 
  array (
    0 => 'void',
  ),
  'domdocumentfragment::append' => 
  array (
    0 => 'void',
    '...nodes=' => 'mixed',
  ),
  'domdocumentfragment::appendchild' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
  ),
  'domdocumentfragment::appendxml' => 
  array (
    0 => 'bool',
    'data' => 'string',
  ),
  'domdocumentfragment::c14n' => 
  array (
    0 => 'mixed',
    'exclusive=' => 'bool',
    'withComments=' => 'bool',
    'xpath=' => 'array<array-key, mixed>|null',
    'nsPrefixes=' => 'array<array-key, mixed>|null',
  ),
  'domdocumentfragment::c14nfile' => 
  array (
    0 => 'mixed',
    'uri' => 'string',
    'exclusive=' => 'bool',
    'withComments=' => 'bool',
    'xpath=' => 'array<array-key, mixed>|null',
    'nsPrefixes=' => 'array<array-key, mixed>|null',
  ),
  'domdocumentfragment::clonenode' => 
  array (
    0 => 'mixed',
    'deep=' => 'bool',
  ),
  'domdocumentfragment::getlineno' => 
  array (
    0 => 'mixed',
  ),
  'domdocumentfragment::getnodepath' => 
  array (
    0 => 'mixed',
  ),
  'domdocumentfragment::hasattributes' => 
  array (
    0 => 'mixed',
  ),
  'domdocumentfragment::haschildnodes' => 
  array (
    0 => 'mixed',
  ),
  'domdocumentfragment::insertbefore' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
    'child=' => 'DOMNode|null',
  ),
  'domdocumentfragment::isdefaultnamespace' => 
  array (
    0 => 'mixed',
    'namespace' => 'string',
  ),
  'domdocumentfragment::issamenode' => 
  array (
    0 => 'mixed',
    'otherNode' => 'DOMNode',
  ),
  'domdocumentfragment::issupported' => 
  array (
    0 => 'mixed',
    'feature' => 'string',
    'version' => 'string',
  ),
  'domdocumentfragment::lookupnamespaceuri' => 
  array (
    0 => 'mixed',
    'prefix' => 'null|string',
  ),
  'domdocumentfragment::lookupprefix' => 
  array (
    0 => 'mixed',
    'namespace' => 'string',
  ),
  'domdocumentfragment::normalize' => 
  array (
    0 => 'mixed',
  ),
  'domdocumentfragment::prepend' => 
  array (
    0 => 'void',
    '...nodes=' => 'mixed',
  ),
  'domdocumentfragment::removechild' => 
  array (
    0 => 'mixed',
    'child' => 'DOMNode',
  ),
  'domdocumentfragment::replacechild' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
    'child' => 'DOMNode',
  ),
  'domdocumenttype::appendchild' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
  ),
  'domdocumenttype::c14n' => 
  array (
    0 => 'mixed',
    'exclusive=' => 'bool',
    'withComments=' => 'bool',
    'xpath=' => 'array<array-key, mixed>|null',
    'nsPrefixes=' => 'array<array-key, mixed>|null',
  ),
  'domdocumenttype::c14nfile' => 
  array (
    0 => 'mixed',
    'uri' => 'string',
    'exclusive=' => 'bool',
    'withComments=' => 'bool',
    'xpath=' => 'array<array-key, mixed>|null',
    'nsPrefixes=' => 'array<array-key, mixed>|null',
  ),
  'domdocumenttype::clonenode' => 
  array (
    0 => 'mixed',
    'deep=' => 'bool',
  ),
  'domdocumenttype::getlineno' => 
  array (
    0 => 'mixed',
  ),
  'domdocumenttype::getnodepath' => 
  array (
    0 => 'mixed',
  ),
  'domdocumenttype::hasattributes' => 
  array (
    0 => 'mixed',
  ),
  'domdocumenttype::haschildnodes' => 
  array (
    0 => 'mixed',
  ),
  'domdocumenttype::insertbefore' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
    'child=' => 'DOMNode|null',
  ),
  'domdocumenttype::isdefaultnamespace' => 
  array (
    0 => 'mixed',
    'namespace' => 'string',
  ),
  'domdocumenttype::issamenode' => 
  array (
    0 => 'mixed',
    'otherNode' => 'DOMNode',
  ),
  'domdocumenttype::issupported' => 
  array (
    0 => 'mixed',
    'feature' => 'string',
    'version' => 'string',
  ),
  'domdocumenttype::lookupnamespaceuri' => 
  array (
    0 => 'mixed',
    'prefix' => 'null|string',
  ),
  'domdocumenttype::lookupprefix' => 
  array (
    0 => 'mixed',
    'namespace' => 'string',
  ),
  'domdocumenttype::normalize' => 
  array (
    0 => 'mixed',
  ),
  'domdocumenttype::removechild' => 
  array (
    0 => 'mixed',
    'child' => 'DOMNode',
  ),
  'domdocumenttype::replacechild' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
    'child' => 'DOMNode',
  ),
  'domelement::__construct' => 
  array (
    0 => 'void',
    'qualifiedName' => 'string',
    'value=' => 'null|string',
    'namespace=' => 'string',
  ),
  'domelement::after' => 
  array (
    0 => 'void',
    '...nodes=' => 'mixed',
  ),
  'domelement::append' => 
  array (
    0 => 'void',
    '...nodes=' => 'mixed',
  ),
  'domelement::appendchild' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
  ),
  'domelement::before' => 
  array (
    0 => 'void',
    '...nodes=' => 'mixed',
  ),
  'domelement::c14n' => 
  array (
    0 => 'mixed',
    'exclusive=' => 'bool',
    'withComments=' => 'bool',
    'xpath=' => 'array<array-key, mixed>|null',
    'nsPrefixes=' => 'array<array-key, mixed>|null',
  ),
  'domelement::c14nfile' => 
  array (
    0 => 'mixed',
    'uri' => 'string',
    'exclusive=' => 'bool',
    'withComments=' => 'bool',
    'xpath=' => 'array<array-key, mixed>|null',
    'nsPrefixes=' => 'array<array-key, mixed>|null',
  ),
  'domelement::clonenode' => 
  array (
    0 => 'mixed',
    'deep=' => 'bool',
  ),
  'domelement::getattribute' => 
  array (
    0 => 'string',
    'qualifiedName' => 'string',
  ),
  'domelement::getattributenode' => 
  array (
    0 => 'DOMAttr',
    'qualifiedName' => 'string',
  ),
  'domelement::getattributenodens' => 
  array (
    0 => 'DOMAttr',
    'namespace' => 'null|string',
    'localName' => 'string',
  ),
  'domelement::getattributens' => 
  array (
    0 => 'string',
    'namespace' => 'null|string',
    'localName' => 'string',
  ),
  'domelement::getelementsbytagname' => 
  array (
    0 => 'DOMNodeList',
    'qualifiedName' => 'string',
  ),
  'domelement::getelementsbytagnamens' => 
  array (
    0 => 'DOMNodeList',
    'namespace' => 'null|string',
    'localName' => 'string',
  ),
  'domelement::getlineno' => 
  array (
    0 => 'mixed',
  ),
  'domelement::getnodepath' => 
  array (
    0 => 'mixed',
  ),
  'domelement::hasattribute' => 
  array (
    0 => 'bool',
    'qualifiedName' => 'string',
  ),
  'domelement::hasattributens' => 
  array (
    0 => 'bool',
    'namespace' => 'null|string',
    'localName' => 'string',
  ),
  'domelement::hasattributes' => 
  array (
    0 => 'mixed',
  ),
  'domelement::haschildnodes' => 
  array (
    0 => 'mixed',
  ),
  'domelement::insertbefore' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
    'child=' => 'DOMNode|null',
  ),
  'domelement::isdefaultnamespace' => 
  array (
    0 => 'mixed',
    'namespace' => 'string',
  ),
  'domelement::issamenode' => 
  array (
    0 => 'mixed',
    'otherNode' => 'DOMNode',
  ),
  'domelement::issupported' => 
  array (
    0 => 'mixed',
    'feature' => 'string',
    'version' => 'string',
  ),
  'domelement::lookupnamespaceuri' => 
  array (
    0 => 'mixed',
    'prefix' => 'null|string',
  ),
  'domelement::lookupprefix' => 
  array (
    0 => 'mixed',
    'namespace' => 'string',
  ),
  'domelement::normalize' => 
  array (
    0 => 'mixed',
  ),
  'domelement::prepend' => 
  array (
    0 => 'void',
    '...nodes=' => 'mixed',
  ),
  'domelement::remove' => 
  array (
    0 => 'void',
  ),
  'domelement::removeattribute' => 
  array (
    0 => 'bool',
    'qualifiedName' => 'string',
  ),
  'domelement::removeattributenode' => 
  array (
    0 => 'DOMAttr|false',
    'attr' => 'DOMAttr',
  ),
  'domelement::removeattributens' => 
  array (
    0 => 'void',
    'namespace' => 'null|string',
    'localName' => 'string',
  ),
  'domelement::removechild' => 
  array (
    0 => 'mixed',
    'child' => 'DOMNode',
  ),
  'domelement::replacechild' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
    'child' => 'DOMNode',
  ),
  'domelement::replacewith' => 
  array (
    0 => 'void',
    '...nodes=' => 'mixed',
  ),
  'domelement::setattribute' => 
  array (
    0 => 'DOMAttr|false',
    'qualifiedName' => 'string',
    'value' => 'string',
  ),
  'domelement::setattributenode' => 
  array (
    0 => 'DOMAttr|null',
    'attr' => 'DOMAttr',
  ),
  'domelement::setattributenodens' => 
  array (
    0 => 'DOMAttr',
    'attr' => 'DOMAttr',
  ),
  'domelement::setattributens' => 
  array (
    0 => 'void',
    'namespace' => 'null|string',
    'qualifiedName' => 'string',
    'value' => 'string',
  ),
  'domelement::setidattribute' => 
  array (
    0 => 'void',
    'qualifiedName' => 'string',
    'isId' => 'bool',
  ),
  'domelement::setidattributenode' => 
  array (
    0 => 'void',
    'attr' => 'DOMAttr',
    'isId' => 'bool',
  ),
  'domelement::setidattributens' => 
  array (
    0 => 'void',
    'namespace' => 'string',
    'qualifiedName' => 'string',
    'isId' => 'bool',
  ),
  'domentity::appendchild' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
  ),
  'domentity::c14n' => 
  array (
    0 => 'mixed',
    'exclusive=' => 'bool',
    'withComments=' => 'bool',
    'xpath=' => 'array<array-key, mixed>|null',
    'nsPrefixes=' => 'array<array-key, mixed>|null',
  ),
  'domentity::c14nfile' => 
  array (
    0 => 'mixed',
    'uri' => 'string',
    'exclusive=' => 'bool',
    'withComments=' => 'bool',
    'xpath=' => 'array<array-key, mixed>|null',
    'nsPrefixes=' => 'array<array-key, mixed>|null',
  ),
  'domentity::clonenode' => 
  array (
    0 => 'mixed',
    'deep=' => 'bool',
  ),
  'domentity::getlineno' => 
  array (
    0 => 'mixed',
  ),
  'domentity::getnodepath' => 
  array (
    0 => 'mixed',
  ),
  'domentity::hasattributes' => 
  array (
    0 => 'mixed',
  ),
  'domentity::haschildnodes' => 
  array (
    0 => 'mixed',
  ),
  'domentity::insertbefore' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
    'child=' => 'DOMNode|null',
  ),
  'domentity::isdefaultnamespace' => 
  array (
    0 => 'mixed',
    'namespace' => 'string',
  ),
  'domentity::issamenode' => 
  array (
    0 => 'mixed',
    'otherNode' => 'DOMNode',
  ),
  'domentity::issupported' => 
  array (
    0 => 'mixed',
    'feature' => 'string',
    'version' => 'string',
  ),
  'domentity::lookupnamespaceuri' => 
  array (
    0 => 'mixed',
    'prefix' => 'null|string',
  ),
  'domentity::lookupprefix' => 
  array (
    0 => 'mixed',
    'namespace' => 'string',
  ),
  'domentity::normalize' => 
  array (
    0 => 'mixed',
  ),
  'domentity::removechild' => 
  array (
    0 => 'mixed',
    'child' => 'DOMNode',
  ),
  'domentity::replacechild' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
    'child' => 'DOMNode',
  ),
  'domentityreference::__construct' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'domentityreference::appendchild' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
  ),
  'domentityreference::c14n' => 
  array (
    0 => 'mixed',
    'exclusive=' => 'bool',
    'withComments=' => 'bool',
    'xpath=' => 'array<array-key, mixed>|null',
    'nsPrefixes=' => 'array<array-key, mixed>|null',
  ),
  'domentityreference::c14nfile' => 
  array (
    0 => 'mixed',
    'uri' => 'string',
    'exclusive=' => 'bool',
    'withComments=' => 'bool',
    'xpath=' => 'array<array-key, mixed>|null',
    'nsPrefixes=' => 'array<array-key, mixed>|null',
  ),
  'domentityreference::clonenode' => 
  array (
    0 => 'mixed',
    'deep=' => 'bool',
  ),
  'domentityreference::getlineno' => 
  array (
    0 => 'mixed',
  ),
  'domentityreference::getnodepath' => 
  array (
    0 => 'mixed',
  ),
  'domentityreference::hasattributes' => 
  array (
    0 => 'mixed',
  ),
  'domentityreference::haschildnodes' => 
  array (
    0 => 'mixed',
  ),
  'domentityreference::insertbefore' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
    'child=' => 'DOMNode|null',
  ),
  'domentityreference::isdefaultnamespace' => 
  array (
    0 => 'mixed',
    'namespace' => 'string',
  ),
  'domentityreference::issamenode' => 
  array (
    0 => 'mixed',
    'otherNode' => 'DOMNode',
  ),
  'domentityreference::issupported' => 
  array (
    0 => 'mixed',
    'feature' => 'string',
    'version' => 'string',
  ),
  'domentityreference::lookupnamespaceuri' => 
  array (
    0 => 'mixed',
    'prefix' => 'null|string',
  ),
  'domentityreference::lookupprefix' => 
  array (
    0 => 'mixed',
    'namespace' => 'string',
  ),
  'domentityreference::normalize' => 
  array (
    0 => 'mixed',
  ),
  'domentityreference::removechild' => 
  array (
    0 => 'mixed',
    'child' => 'DOMNode',
  ),
  'domentityreference::replacechild' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
    'child' => 'DOMNode',
  ),
  'domexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'domexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'domexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'domexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'domexception::getfile' => 
  array (
    0 => 'string',
  ),
  'domexception::getline' => 
  array (
    0 => 'int',
  ),
  'domexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'domexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'domexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'domexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'domimplementation::__construct' => 
  array (
    0 => 'void',
  ),
  'domimplementation::createdocument' => 
  array (
    0 => 'DOMDocument|false',
    'namespace=' => 'null|string',
    'qualifiedName=' => 'string',
    'doctype=' => 'DOMDocumentType|null',
  ),
  'domimplementation::createdocumenttype' => 
  array (
    0 => 'DOMDocumentType|false',
    'qualifiedName' => 'string',
    'publicId=' => 'string',
    'systemId=' => 'string',
  ),
  'domimplementation::getfeature' => 
  array (
    0 => 'mixed',
    'feature' => 'string',
    'version' => 'string',
  ),
  'domimplementation::hasfeature' => 
  array (
    0 => 'bool',
    'feature' => 'string',
    'version' => 'string',
  ),
  'domnamednodemap::count' => 
  array (
    0 => 'int',
  ),
  'domnamednodemap::getiterator' => 
  array (
    0 => 'Iterator',
  ),
  'domnamednodemap::getnameditem' => 
  array (
    0 => 'DOMNode|null',
    'qualifiedName' => 'string',
  ),
  'domnamednodemap::getnameditemns' => 
  array (
    0 => 'DOMNode|null',
    'namespace' => 'null|string',
    'localName' => 'string',
  ),
  'domnamednodemap::item' => 
  array (
    0 => 'DOMNode|null',
    'index' => 'int',
  ),
  'domnode::appendchild' => 
  array (
    0 => 'DOMNode|false',
    'node' => 'DOMNode',
  ),
  'domnode::c14n' => 
  array (
    0 => 'false|string',
    'exclusive=' => 'bool',
    'withComments=' => 'bool',
    'xpath=' => 'array<array-key, mixed>|null',
    'nsPrefixes=' => 'array<array-key, mixed>|null',
  ),
  'domnode::c14nfile' => 
  array (
    0 => 'false|int',
    'uri' => 'string',
    'exclusive=' => 'bool',
    'withComments=' => 'bool',
    'xpath=' => 'array<array-key, mixed>|null',
    'nsPrefixes=' => 'array<array-key, mixed>|null',
  ),
  'domnode::clonenode' => 
  array (
    0 => 'DOMNode',
    'deep=' => 'bool',
  ),
  'domnode::getlineno' => 
  array (
    0 => 'int',
  ),
  'domnode::getnodepath' => 
  array (
    0 => 'null|string',
  ),
  'domnode::hasattributes' => 
  array (
    0 => 'bool',
  ),
  'domnode::haschildnodes' => 
  array (
    0 => 'bool',
  ),
  'domnode::insertbefore' => 
  array (
    0 => 'DOMNode|false',
    'node' => 'DOMNode',
    'child=' => 'DOMNode|null',
  ),
  'domnode::isdefaultnamespace' => 
  array (
    0 => 'bool',
    'namespace' => 'string',
  ),
  'domnode::issamenode' => 
  array (
    0 => 'bool',
    'otherNode' => 'DOMNode',
  ),
  'domnode::issupported' => 
  array (
    0 => 'bool',
    'feature' => 'string',
    'version' => 'string',
  ),
  'domnode::lookupnamespaceuri' => 
  array (
    0 => 'null|string',
    'prefix' => 'null|string',
  ),
  'domnode::lookupprefix' => 
  array (
    0 => 'null|string',
    'namespace' => 'string',
  ),
  'domnode::normalize' => 
  array (
    0 => 'void',
  ),
  'domnode::removechild' => 
  array (
    0 => 'DOMNode|false',
    'child' => 'DOMNode',
  ),
  'domnode::replacechild' => 
  array (
    0 => 'DOMNode|false',
    'node' => 'DOMNode',
    'child' => 'DOMNode',
  ),
  'domnodelist::count' => 
  array (
    0 => 'int',
  ),
  'domnodelist::getiterator' => 
  array (
    0 => 'Iterator',
  ),
  'domnodelist::item' => 
  array (
    0 => 'DOMNode|null',
    'index' => 'int',
  ),
  'domnotation::appendchild' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
  ),
  'domnotation::c14n' => 
  array (
    0 => 'mixed',
    'exclusive=' => 'bool',
    'withComments=' => 'bool',
    'xpath=' => 'array<array-key, mixed>|null',
    'nsPrefixes=' => 'array<array-key, mixed>|null',
  ),
  'domnotation::c14nfile' => 
  array (
    0 => 'mixed',
    'uri' => 'string',
    'exclusive=' => 'bool',
    'withComments=' => 'bool',
    'xpath=' => 'array<array-key, mixed>|null',
    'nsPrefixes=' => 'array<array-key, mixed>|null',
  ),
  'domnotation::clonenode' => 
  array (
    0 => 'mixed',
    'deep=' => 'bool',
  ),
  'domnotation::getlineno' => 
  array (
    0 => 'mixed',
  ),
  'domnotation::getnodepath' => 
  array (
    0 => 'mixed',
  ),
  'domnotation::hasattributes' => 
  array (
    0 => 'mixed',
  ),
  'domnotation::haschildnodes' => 
  array (
    0 => 'mixed',
  ),
  'domnotation::insertbefore' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
    'child=' => 'DOMNode|null',
  ),
  'domnotation::isdefaultnamespace' => 
  array (
    0 => 'mixed',
    'namespace' => 'string',
  ),
  'domnotation::issamenode' => 
  array (
    0 => 'mixed',
    'otherNode' => 'DOMNode',
  ),
  'domnotation::issupported' => 
  array (
    0 => 'mixed',
    'feature' => 'string',
    'version' => 'string',
  ),
  'domnotation::lookupnamespaceuri' => 
  array (
    0 => 'mixed',
    'prefix' => 'null|string',
  ),
  'domnotation::lookupprefix' => 
  array (
    0 => 'mixed',
    'namespace' => 'string',
  ),
  'domnotation::normalize' => 
  array (
    0 => 'mixed',
  ),
  'domnotation::removechild' => 
  array (
    0 => 'mixed',
    'child' => 'DOMNode',
  ),
  'domnotation::replacechild' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
    'child' => 'DOMNode',
  ),
  'domprocessinginstruction::__construct' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value=' => 'string',
  ),
  'domprocessinginstruction::appendchild' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
  ),
  'domprocessinginstruction::c14n' => 
  array (
    0 => 'mixed',
    'exclusive=' => 'bool',
    'withComments=' => 'bool',
    'xpath=' => 'array<array-key, mixed>|null',
    'nsPrefixes=' => 'array<array-key, mixed>|null',
  ),
  'domprocessinginstruction::c14nfile' => 
  array (
    0 => 'mixed',
    'uri' => 'string',
    'exclusive=' => 'bool',
    'withComments=' => 'bool',
    'xpath=' => 'array<array-key, mixed>|null',
    'nsPrefixes=' => 'array<array-key, mixed>|null',
  ),
  'domprocessinginstruction::clonenode' => 
  array (
    0 => 'mixed',
    'deep=' => 'bool',
  ),
  'domprocessinginstruction::getlineno' => 
  array (
    0 => 'mixed',
  ),
  'domprocessinginstruction::getnodepath' => 
  array (
    0 => 'mixed',
  ),
  'domprocessinginstruction::hasattributes' => 
  array (
    0 => 'mixed',
  ),
  'domprocessinginstruction::haschildnodes' => 
  array (
    0 => 'mixed',
  ),
  'domprocessinginstruction::insertbefore' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
    'child=' => 'DOMNode|null',
  ),
  'domprocessinginstruction::isdefaultnamespace' => 
  array (
    0 => 'mixed',
    'namespace' => 'string',
  ),
  'domprocessinginstruction::issamenode' => 
  array (
    0 => 'mixed',
    'otherNode' => 'DOMNode',
  ),
  'domprocessinginstruction::issupported' => 
  array (
    0 => 'mixed',
    'feature' => 'string',
    'version' => 'string',
  ),
  'domprocessinginstruction::lookupnamespaceuri' => 
  array (
    0 => 'mixed',
    'prefix' => 'null|string',
  ),
  'domprocessinginstruction::lookupprefix' => 
  array (
    0 => 'mixed',
    'namespace' => 'string',
  ),
  'domprocessinginstruction::normalize' => 
  array (
    0 => 'mixed',
  ),
  'domprocessinginstruction::removechild' => 
  array (
    0 => 'mixed',
    'child' => 'DOMNode',
  ),
  'domprocessinginstruction::replacechild' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
    'child' => 'DOMNode',
  ),
  'domtext::__construct' => 
  array (
    0 => 'void',
    'data=' => 'string',
  ),
  'domtext::after' => 
  array (
    0 => 'void',
    '...nodes=' => 'mixed',
  ),
  'domtext::appendchild' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
  ),
  'domtext::appenddata' => 
  array (
    0 => 'mixed',
    'data' => 'string',
  ),
  'domtext::before' => 
  array (
    0 => 'void',
    '...nodes=' => 'mixed',
  ),
  'domtext::c14n' => 
  array (
    0 => 'mixed',
    'exclusive=' => 'bool',
    'withComments=' => 'bool',
    'xpath=' => 'array<array-key, mixed>|null',
    'nsPrefixes=' => 'array<array-key, mixed>|null',
  ),
  'domtext::c14nfile' => 
  array (
    0 => 'mixed',
    'uri' => 'string',
    'exclusive=' => 'bool',
    'withComments=' => 'bool',
    'xpath=' => 'array<array-key, mixed>|null',
    'nsPrefixes=' => 'array<array-key, mixed>|null',
  ),
  'domtext::clonenode' => 
  array (
    0 => 'mixed',
    'deep=' => 'bool',
  ),
  'domtext::deletedata' => 
  array (
    0 => 'mixed',
    'offset' => 'int',
    'count' => 'int',
  ),
  'domtext::getlineno' => 
  array (
    0 => 'mixed',
  ),
  'domtext::getnodepath' => 
  array (
    0 => 'mixed',
  ),
  'domtext::hasattributes' => 
  array (
    0 => 'mixed',
  ),
  'domtext::haschildnodes' => 
  array (
    0 => 'mixed',
  ),
  'domtext::insertbefore' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
    'child=' => 'DOMNode|null',
  ),
  'domtext::insertdata' => 
  array (
    0 => 'mixed',
    'offset' => 'int',
    'data' => 'string',
  ),
  'domtext::isdefaultnamespace' => 
  array (
    0 => 'mixed',
    'namespace' => 'string',
  ),
  'domtext::iselementcontentwhitespace' => 
  array (
    0 => 'bool',
  ),
  'domtext::issamenode' => 
  array (
    0 => 'mixed',
    'otherNode' => 'DOMNode',
  ),
  'domtext::issupported' => 
  array (
    0 => 'mixed',
    'feature' => 'string',
    'version' => 'string',
  ),
  'domtext::iswhitespaceinelementcontent' => 
  array (
    0 => 'bool',
  ),
  'domtext::lookupnamespaceuri' => 
  array (
    0 => 'mixed',
    'prefix' => 'null|string',
  ),
  'domtext::lookupprefix' => 
  array (
    0 => 'mixed',
    'namespace' => 'string',
  ),
  'domtext::normalize' => 
  array (
    0 => 'mixed',
  ),
  'domtext::remove' => 
  array (
    0 => 'void',
  ),
  'domtext::removechild' => 
  array (
    0 => 'mixed',
    'child' => 'DOMNode',
  ),
  'domtext::replacechild' => 
  array (
    0 => 'mixed',
    'node' => 'DOMNode',
    'child' => 'DOMNode',
  ),
  'domtext::replacedata' => 
  array (
    0 => 'mixed',
    'offset' => 'int',
    'count' => 'int',
    'data' => 'string',
  ),
  'domtext::replacewith' => 
  array (
    0 => 'void',
    '...nodes=' => 'mixed',
  ),
  'domtext::splittext' => 
  array (
    0 => 'DOMText',
    'offset' => 'int',
  ),
  'domtext::substringdata' => 
  array (
    0 => 'mixed',
    'offset' => 'int',
    'count' => 'int',
  ),
  'domxml_new_doc' => 
  array (
    0 => 'DomDocument',
    'version' => 'string',
  ),
  'domxml_open_file' => 
  array (
    0 => 'DomDocument',
    'filename' => 'string',
    'mode=' => 'int',
    'error=' => 'array<array-key, mixed>',
  ),
  'domxml_open_mem' => 
  array (
    0 => 'DomDocument',
    'string' => 'string',
    'mode=' => 'int',
    'error=' => 'array<array-key, mixed>',
  ),
  'domxml_version' => 
  array (
    0 => 'string',
  ),
  'domxml_xmltree' => 
  array (
    0 => 'DomDocument',
    'string' => 'string',
  ),
  'domxml_xslt_stylesheet' => 
  array (
    0 => 'DomXsltStylesheet',
    'xsl_buf' => 'string',
  ),
  'domxml_xslt_stylesheet_doc' => 
  array (
    0 => 'DomXsltStylesheet',
    'xsl_doc' => 'DOMDocument',
  ),
  'domxml_xslt_stylesheet_file' => 
  array (
    0 => 'DomXsltStylesheet',
    'xsl_file' => 'string',
  ),
  'domxml_xslt_version' => 
  array (
    0 => 'int',
  ),
  'domxpath::__construct' => 
  array (
    0 => 'void',
    'document' => 'DOMDocument',
    'registerNodeNS=' => 'bool',
  ),
  'domxpath::evaluate' => 
  array (
    0 => 'mixed',
    'expression' => 'string',
    'contextNode=' => 'DOMNode|null',
    'registerNodeNS=' => 'bool',
  ),
  'domxpath::query' => 
  array (
    0 => 'DOMNodeList|false',
    'expression' => 'string',
    'contextNode=' => 'DOMNode|null',
    'registerNodeNS=' => 'bool',
  ),
  'domxpath::registernamespace' => 
  array (
    0 => 'bool',
    'prefix' => 'string',
    'namespace' => 'string',
  ),
  'domxpath::registerphpfunctions' => 
  array (
    0 => 'void',
    'restrict=' => 'array<array-key, mixed>|null|string',
  ),
  'domxsltstylesheet::process' => 
  array (
    0 => 'DomDocument',
    'xml_doc' => 'DOMDocument',
    'xslt_params=' => 'array<array-key, mixed>',
    'is_xpath_param=' => 'bool',
    'profile_filename=' => 'string',
  ),
  'domxsltstylesheet::result_dump_file' => 
  array (
    0 => 'string',
    'xmldoc' => 'DOMDocument',
    'filename' => 'string',
  ),
  'domxsltstylesheet::result_dump_mem' => 
  array (
    0 => 'string',
    'xmldoc' => 'DOMDocument',
  ),
  'dotnet::__call' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'args' => 'mixed',
  ),
  'dotnet::__construct' => 
  array (
    0 => 'void',
    'assembly_name' => 'string',
    'datatype_name' => 'string',
    'codepage=' => 'int',
  ),
  'dotnet::__get' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'dotnet::__set' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'dotnet_load' => 
  array (
    0 => 'int',
    'assembly_name' => 'string',
    'datatype_name=' => 'string',
    'codepage=' => 'int',
  ),
  'doubleval' => 
  array (
    0 => 'float',
    'value' => 'mixed',
  ),
  'ds\\collection::clear' => 
  array (
    0 => 'void',
  ),
  'ds\\collection::copy' => 
  array (
    0 => 'Ds\\Collection',
  ),
  'ds\\collection::isempty' => 
  array (
    0 => 'bool',
  ),
  'ds\\collection::toarray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ds\\deque::__construct' => 
  array (
    0 => 'void',
    'values=' => 'mixed',
  ),
  'ds\\deque::allocate' => 
  array (
    0 => 'void',
    'capacity' => 'int',
  ),
  'ds\\deque::apply' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'ds\\deque::capacity' => 
  array (
    0 => 'int',
  ),
  'ds\\deque::clear' => 
  array (
    0 => 'void',
  ),
  'ds\\deque::contains' => 
  array (
    0 => 'bool',
    '...values=' => 'mixed',
  ),
  'ds\\deque::copy' => 
  array (
    0 => 'Ds\\Collection',
  ),
  'ds\\deque::count' => 
  array (
    0 => 'int',
  ),
  'ds\\deque::filter' => 
  array (
    0 => 'Ds\\Sequence',
    'callback=' => 'callable|null',
  ),
  'ds\\deque::find' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
  ),
  'ds\\deque::first' => 
  array (
    0 => 'mixed',
  ),
  'ds\\deque::get' => 
  array (
    0 => 'void',
    'index' => 'int',
  ),
  'ds\\deque::getiterator' => 
  array (
    0 => 'Traversable',
  ),
  'ds\\deque::insert' => 
  array (
    0 => 'void',
    'index' => 'int',
    '...values=' => 'mixed',
  ),
  'ds\\deque::isempty' => 
  array (
    0 => 'bool',
  ),
  'ds\\deque::join' => 
  array (
    0 => 'string',
    'glue=' => 'string',
  ),
  'ds\\deque::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ds\\deque::last' => 
  array (
    0 => 'mixed',
  ),
  'ds\\deque::map' => 
  array (
    0 => 'Ds\\Sequence',
    'callback' => 'callable',
  ),
  'ds\\deque::merge' => 
  array (
    0 => 'Ds\\Sequence',
    'values' => 'mixed',
  ),
  'ds\\deque::offsetexists' => 
  array (
    0 => 'bool',
    'offset' => 'mixed',
  ),
  'ds\\deque::offsetget' => 
  array (
    0 => 'mixed',
    'offset' => 'mixed',
  ),
  'ds\\deque::offsetset' => 
  array (
    0 => 'mixed',
    'offset' => 'mixed',
    'value' => 'mixed',
  ),
  'ds\\deque::offsetunset' => 
  array (
    0 => 'mixed',
    'offset' => 'mixed',
  ),
  'ds\\deque::pop' => 
  array (
    0 => 'mixed',
  ),
  'ds\\deque::push' => 
  array (
    0 => 'void',
    '...values=' => 'mixed',
  ),
  'ds\\deque::reduce' => 
  array (
    0 => 'mixed',
    'callback' => 'callable',
    'initial=' => 'mixed',
  ),
  'ds\\deque::remove' => 
  array (
    0 => 'mixed',
    'index' => 'int',
  ),
  'ds\\deque::reverse' => 
  array (
    0 => 'void',
  ),
  'ds\\deque::reversed' => 
  array (
    0 => 'Ds\\Sequence',
  ),
  'ds\\deque::rotate' => 
  array (
    0 => 'void',
    'rotations' => 'int',
  ),
  'ds\\deque::set' => 
  array (
    0 => 'void',
    'index' => 'int',
    'value' => 'mixed',
  ),
  'ds\\deque::shift' => 
  array (
    0 => 'mixed',
  ),
  'ds\\deque::slice' => 
  array (
    0 => 'Ds\\Sequence',
    'index' => 'int',
    'length=' => 'int|null',
  ),
  'ds\\deque::sort' => 
  array (
    0 => 'void',
    'comparator=' => 'callable|null',
  ),
  'ds\\deque::sorted' => 
  array (
    0 => 'Ds\\Sequence',
    'comparator=' => 'callable|null',
  ),
  'ds\\deque::sum' => 
  array (
    0 => 'float|int',
  ),
  'ds\\deque::toarray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ds\\deque::unshift' => 
  array (
    0 => 'void',
    '...values=' => 'mixed',
  ),
  'ds\\hashable::equals' => 
  array (
    0 => 'bool',
    'object' => 'mixed',
  ),
  'ds\\hashable::hash' => 
  array (
    0 => 'mixed',
  ),
  'ds\\map::__construct' => 
  array (
    0 => 'void',
    'values=' => 'mixed',
  ),
  'ds\\map::allocate' => 
  array (
    0 => 'void',
    'capacity' => 'int',
  ),
  'ds\\map::apply' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'ds\\map::capacity' => 
  array (
    0 => 'int',
  ),
  'ds\\map::clear' => 
  array (
    0 => 'void',
  ),
  'ds\\map::copy' => 
  array (
    0 => 'Ds\\Collection',
  ),
  'ds\\map::count' => 
  array (
    0 => 'int',
  ),
  'ds\\map::diff' => 
  array (
    0 => 'Ds\\Map',
    'map' => 'Ds\\Map',
  ),
  'ds\\map::filter' => 
  array (
    0 => 'Ds\\Map',
    'callback=' => 'callable|null',
  ),
  'ds\\map::first' => 
  array (
    0 => 'Ds\\Pair',
  ),
  'ds\\map::get' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'default=' => 'mixed',
  ),
  'ds\\map::getiterator' => 
  array (
    0 => 'Traversable',
  ),
  'ds\\map::haskey' => 
  array (
    0 => 'bool',
    'key' => 'mixed',
  ),
  'ds\\map::hasvalue' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'ds\\map::intersect' => 
  array (
    0 => 'Ds\\Map',
    'map' => 'Ds\\Map',
  ),
  'ds\\map::isempty' => 
  array (
    0 => 'bool',
  ),
  'ds\\map::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ds\\map::keys' => 
  array (
    0 => 'Ds\\Set',
  ),
  'ds\\map::ksort' => 
  array (
    0 => 'void',
    'comparator=' => 'callable|null',
  ),
  'ds\\map::ksorted' => 
  array (
    0 => 'Ds\\Map',
    'comparator=' => 'callable|null',
  ),
  'ds\\map::last' => 
  array (
    0 => 'Ds\\Pair',
  ),
  'ds\\map::map' => 
  array (
    0 => 'Ds\\Map',
    'callback' => 'callable',
  ),
  'ds\\map::merge' => 
  array (
    0 => 'Ds\\Map',
    'values' => 'mixed',
  ),
  'ds\\map::offsetexists' => 
  array (
    0 => 'bool',
    'offset' => 'mixed',
  ),
  'ds\\map::offsetget' => 
  array (
    0 => 'mixed',
    'offset' => 'mixed',
  ),
  'ds\\map::offsetset' => 
  array (
    0 => 'mixed',
    'offset' => 'mixed',
    'value' => 'mixed',
  ),
  'ds\\map::offsetunset' => 
  array (
    0 => 'mixed',
    'offset' => 'mixed',
  ),
  'ds\\map::pairs' => 
  array (
    0 => 'Ds\\Sequence',
  ),
  'ds\\map::put' => 
  array (
    0 => 'void',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'ds\\map::putall' => 
  array (
    0 => 'void',
    'values' => 'mixed',
  ),
  'ds\\map::reduce' => 
  array (
    0 => 'mixed',
    'callback' => 'callable',
    'initial=' => 'mixed',
  ),
  'ds\\map::remove' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'default=' => 'mixed',
  ),
  'ds\\map::reverse' => 
  array (
    0 => 'void',
  ),
  'ds\\map::reversed' => 
  array (
    0 => 'Ds\\Map',
  ),
  'ds\\map::skip' => 
  array (
    0 => 'Ds\\Pair',
    'position' => 'int',
  ),
  'ds\\map::slice' => 
  array (
    0 => 'Ds\\Map',
    'index' => 'int',
    'length=' => 'int|null',
  ),
  'ds\\map::sort' => 
  array (
    0 => 'void',
    'comparator=' => 'callable|null',
  ),
  'ds\\map::sorted' => 
  array (
    0 => 'Ds\\Map',
    'comparator=' => 'callable|null',
  ),
  'ds\\map::sum' => 
  array (
    0 => 'float|int',
  ),
  'ds\\map::toarray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ds\\map::union' => 
  array (
    0 => 'Ds\\Map',
    'map' => 'Ds\\Map',
  ),
  'ds\\map::values' => 
  array (
    0 => 'Ds\\Sequence',
  ),
  'ds\\map::xor' => 
  array (
    0 => 'Ds\\Map',
    'map' => 'Ds\\Map',
  ),
  'ds\\pair::__construct' => 
  array (
    0 => 'void',
    'key=' => 'mixed',
    'value=' => 'mixed',
  ),
  'ds\\pair::clear' => 
  array (
    0 => 'void',
  ),
  'ds\\pair::copy' => 
  array (
    0 => 'Ds\\Pair',
  ),
  'ds\\pair::isempty' => 
  array (
    0 => 'bool',
  ),
  'ds\\pair::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ds\\pair::toarray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ds\\priorityqueue::__construct' => 
  array (
    0 => 'void',
  ),
  'ds\\priorityqueue::allocate' => 
  array (
    0 => 'void',
    'capacity' => 'int',
  ),
  'ds\\priorityqueue::capacity' => 
  array (
    0 => 'int',
  ),
  'ds\\priorityqueue::clear' => 
  array (
    0 => 'void',
  ),
  'ds\\priorityqueue::copy' => 
  array (
    0 => 'Ds\\Collection',
  ),
  'ds\\priorityqueue::count' => 
  array (
    0 => 'int',
  ),
  'ds\\priorityqueue::getiterator' => 
  array (
    0 => 'Traversable',
  ),
  'ds\\priorityqueue::isempty' => 
  array (
    0 => 'bool',
  ),
  'ds\\priorityqueue::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ds\\priorityqueue::peek' => 
  array (
    0 => 'mixed',
  ),
  'ds\\priorityqueue::pop' => 
  array (
    0 => 'mixed',
  ),
  'ds\\priorityqueue::push' => 
  array (
    0 => 'void',
    'value' => 'mixed',
    'priority' => 'int',
  ),
  'ds\\priorityqueue::toarray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ds\\queue::__construct' => 
  array (
    0 => 'void',
    'values=' => 'mixed',
  ),
  'ds\\queue::allocate' => 
  array (
    0 => 'void',
    'capacity' => 'int',
  ),
  'ds\\queue::capacity' => 
  array (
    0 => 'int',
  ),
  'ds\\queue::clear' => 
  array (
    0 => 'void',
  ),
  'ds\\queue::copy' => 
  array (
    0 => 'Ds\\Collection',
  ),
  'ds\\queue::count' => 
  array (
    0 => 'int',
  ),
  'ds\\queue::getiterator' => 
  array (
    0 => 'Traversable',
  ),
  'ds\\queue::isempty' => 
  array (
    0 => 'bool',
  ),
  'ds\\queue::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ds\\queue::offsetexists' => 
  array (
    0 => 'bool',
    'offset' => 'mixed',
  ),
  'ds\\queue::offsetget' => 
  array (
    0 => 'mixed',
    'offset' => 'mixed',
  ),
  'ds\\queue::offsetset' => 
  array (
    0 => 'mixed',
    'offset' => 'mixed',
    'value' => 'mixed',
  ),
  'ds\\queue::offsetunset' => 
  array (
    0 => 'mixed',
    'offset' => 'mixed',
  ),
  'ds\\queue::peek' => 
  array (
    0 => 'mixed',
  ),
  'ds\\queue::pop' => 
  array (
    0 => 'mixed',
  ),
  'ds\\queue::push' => 
  array (
    0 => 'void',
    '...values=' => 'mixed',
  ),
  'ds\\queue::toarray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ds\\sequence::allocate' => 
  array (
    0 => 'void',
    'capacity' => 'int',
  ),
  'ds\\sequence::apply' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'ds\\sequence::capacity' => 
  array (
    0 => 'int',
  ),
  'ds\\sequence::contains' => 
  array (
    0 => 'bool',
    '...values=' => 'mixed',
  ),
  'ds\\sequence::filter' => 
  array (
    0 => 'Ds\\Sequence',
    'callback=' => 'callable',
  ),
  'ds\\sequence::find' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
  ),
  'ds\\sequence::first' => 
  array (
    0 => 'mixed',
  ),
  'ds\\sequence::get' => 
  array (
    0 => 'mixed',
    'index' => 'int',
  ),
  'ds\\sequence::insert' => 
  array (
    0 => 'void',
    'index' => 'int',
    '...values=' => 'mixed',
  ),
  'ds\\sequence::join' => 
  array (
    0 => 'string',
    'glue=' => 'string',
  ),
  'ds\\sequence::last' => 
  array (
    0 => 'void',
  ),
  'ds\\sequence::map' => 
  array (
    0 => 'Ds\\Sequence',
    'callback' => 'callable',
  ),
  'ds\\sequence::merge' => 
  array (
    0 => 'Ds\\Sequence',
    'values' => 'mixed',
  ),
  'ds\\sequence::pop' => 
  array (
    0 => 'mixed',
  ),
  'ds\\sequence::push' => 
  array (
    0 => 'void',
    '...values=' => 'mixed',
  ),
  'ds\\sequence::reduce' => 
  array (
    0 => 'mixed',
    'callback' => 'callable',
    'initial=' => 'mixed',
  ),
  'ds\\sequence::remove' => 
  array (
    0 => 'mixed',
    'index' => 'int',
  ),
  'ds\\sequence::reverse' => 
  array (
    0 => 'void',
  ),
  'ds\\sequence::reversed' => 
  array (
    0 => 'Ds\\Sequence',
  ),
  'ds\\sequence::rotate' => 
  array (
    0 => 'void',
    'rotations' => 'int',
  ),
  'ds\\sequence::set' => 
  array (
    0 => 'void',
    'index' => 'int',
    'value' => 'mixed',
  ),
  'ds\\sequence::shift' => 
  array (
    0 => 'mixed',
  ),
  'ds\\sequence::slice' => 
  array (
    0 => 'Ds\\Sequence',
    'index' => 'int',
    'length=' => 'int|null',
  ),
  'ds\\sequence::sort' => 
  array (
    0 => 'void',
    'comparator=' => 'callable',
  ),
  'ds\\sequence::sorted' => 
  array (
    0 => 'Ds\\Sequence',
    'comparator=' => 'callable',
  ),
  'ds\\sequence::sum' => 
  array (
    0 => 'float|int',
  ),
  'ds\\sequence::unshift' => 
  array (
    0 => 'void',
    '...values=' => 'mixed',
  ),
  'ds\\set::__construct' => 
  array (
    0 => 'void',
    'values=' => 'mixed',
  ),
  'ds\\set::add' => 
  array (
    0 => 'void',
    '...values=' => 'mixed',
  ),
  'ds\\set::allocate' => 
  array (
    0 => 'void',
    'capacity' => 'int',
  ),
  'ds\\set::capacity' => 
  array (
    0 => 'int',
  ),
  'ds\\set::clear' => 
  array (
    0 => 'void',
  ),
  'ds\\set::contains' => 
  array (
    0 => 'bool',
    '...values=' => 'mixed',
  ),
  'ds\\set::copy' => 
  array (
    0 => 'Ds\\Collection',
  ),
  'ds\\set::count' => 
  array (
    0 => 'int',
  ),
  'ds\\set::diff' => 
  array (
    0 => 'Ds\\Set',
    'set' => 'Ds\\Set',
  ),
  'ds\\set::filter' => 
  array (
    0 => 'Ds\\Set',
    'predicate=' => 'callable|null',
  ),
  'ds\\set::first' => 
  array (
    0 => 'mixed',
  ),
  'ds\\set::get' => 
  array (
    0 => 'mixed',
    'index' => 'int',
  ),
  'ds\\set::getiterator' => 
  array (
    0 => 'Traversable',
  ),
  'ds\\set::intersect' => 
  array (
    0 => 'Ds\\Set',
    'set' => 'Ds\\Set',
  ),
  'ds\\set::isempty' => 
  array (
    0 => 'bool',
  ),
  'ds\\set::join' => 
  array (
    0 => 'string',
    'glue=' => 'string',
  ),
  'ds\\set::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ds\\set::last' => 
  array (
    0 => 'mixed',
  ),
  'ds\\set::map' => 
  array (
    0 => 'Ds\\Set',
    'callback' => 'callable',
  ),
  'ds\\set::merge' => 
  array (
    0 => 'Ds\\Set',
    'values' => 'mixed',
  ),
  'ds\\set::offsetexists' => 
  array (
    0 => 'bool',
    'offset' => 'mixed',
  ),
  'ds\\set::offsetget' => 
  array (
    0 => 'mixed',
    'offset' => 'mixed',
  ),
  'ds\\set::offsetset' => 
  array (
    0 => 'mixed',
    'offset' => 'mixed',
    'value' => 'mixed',
  ),
  'ds\\set::offsetunset' => 
  array (
    0 => 'mixed',
    'offset' => 'mixed',
  ),
  'ds\\set::reduce' => 
  array (
    0 => 'mixed',
    'callback' => 'callable',
    'initial=' => 'mixed',
  ),
  'ds\\set::remove' => 
  array (
    0 => 'void',
    '...values=' => 'mixed',
  ),
  'ds\\set::reverse' => 
  array (
    0 => 'void',
  ),
  'ds\\set::reversed' => 
  array (
    0 => 'Ds\\Set',
  ),
  'ds\\set::slice' => 
  array (
    0 => 'Ds\\Set',
    'index' => 'int',
    'length=' => 'int|null',
  ),
  'ds\\set::sort' => 
  array (
    0 => 'void',
    'comparator=' => 'callable|null',
  ),
  'ds\\set::sorted' => 
  array (
    0 => 'Ds\\Set',
    'comparator=' => 'callable|null',
  ),
  'ds\\set::sum' => 
  array (
    0 => 'float|int',
  ),
  'ds\\set::toarray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ds\\set::union' => 
  array (
    0 => 'Ds\\Set',
    'set' => 'Ds\\Set',
  ),
  'ds\\set::xor' => 
  array (
    0 => 'Ds\\Set',
    'set' => 'Ds\\Set',
  ),
  'ds\\stack::__construct' => 
  array (
    0 => 'void',
    'values=' => 'mixed',
  ),
  'ds\\stack::allocate' => 
  array (
    0 => 'void',
    'capacity' => 'int',
  ),
  'ds\\stack::capacity' => 
  array (
    0 => 'int',
  ),
  'ds\\stack::clear' => 
  array (
    0 => 'void',
  ),
  'ds\\stack::copy' => 
  array (
    0 => 'Ds\\Collection',
  ),
  'ds\\stack::count' => 
  array (
    0 => 'int',
  ),
  'ds\\stack::getiterator' => 
  array (
    0 => 'Traversable',
  ),
  'ds\\stack::isempty' => 
  array (
    0 => 'bool',
  ),
  'ds\\stack::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ds\\stack::offsetexists' => 
  array (
    0 => 'bool',
    'offset' => 'mixed',
  ),
  'ds\\stack::offsetget' => 
  array (
    0 => 'mixed',
    'offset' => 'mixed',
  ),
  'ds\\stack::offsetset' => 
  array (
    0 => 'mixed',
    'offset' => 'mixed',
    'value' => 'mixed',
  ),
  'ds\\stack::offsetunset' => 
  array (
    0 => 'mixed',
    'offset' => 'mixed',
  ),
  'ds\\stack::peek' => 
  array (
    0 => 'mixed',
  ),
  'ds\\stack::pop' => 
  array (
    0 => 'mixed',
  ),
  'ds\\stack::push' => 
  array (
    0 => 'void',
    '...values=' => 'mixed',
  ),
  'ds\\stack::toarray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ds\\vector::__construct' => 
  array (
    0 => 'void',
    'values=' => 'mixed',
  ),
  'ds\\vector::allocate' => 
  array (
    0 => 'void',
    'capacity' => 'int',
  ),
  'ds\\vector::apply' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'ds\\vector::capacity' => 
  array (
    0 => 'int',
  ),
  'ds\\vector::clear' => 
  array (
    0 => 'void',
  ),
  'ds\\vector::contains' => 
  array (
    0 => 'bool',
    '...values=' => 'mixed',
  ),
  'ds\\vector::copy' => 
  array (
    0 => 'Ds\\Collection',
  ),
  'ds\\vector::count' => 
  array (
    0 => 'int',
  ),
  'ds\\vector::filter' => 
  array (
    0 => 'Ds\\Sequence',
    'callback=' => 'callable|null',
  ),
  'ds\\vector::find' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
  ),
  'ds\\vector::first' => 
  array (
    0 => 'mixed',
  ),
  'ds\\vector::get' => 
  array (
    0 => 'mixed',
    'index' => 'int',
  ),
  'ds\\vector::getiterator' => 
  array (
    0 => 'Traversable',
  ),
  'ds\\vector::insert' => 
  array (
    0 => 'void',
    'index' => 'int',
    '...values=' => 'mixed',
  ),
  'ds\\vector::isempty' => 
  array (
    0 => 'bool',
  ),
  'ds\\vector::join' => 
  array (
    0 => 'string',
    'glue=' => 'string',
  ),
  'ds\\vector::jsonserialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ds\\vector::last' => 
  array (
    0 => 'mixed',
  ),
  'ds\\vector::map' => 
  array (
    0 => 'Ds\\Sequence',
    'callback' => 'callable',
  ),
  'ds\\vector::merge' => 
  array (
    0 => 'Ds\\Sequence',
    'values' => 'mixed',
  ),
  'ds\\vector::offsetexists' => 
  array (
    0 => 'bool',
    'offset' => 'mixed',
  ),
  'ds\\vector::offsetget' => 
  array (
    0 => 'mixed',
    'offset' => 'mixed',
  ),
  'ds\\vector::offsetset' => 
  array (
    0 => 'mixed',
    'offset' => 'mixed',
    'value' => 'mixed',
  ),
  'ds\\vector::offsetunset' => 
  array (
    0 => 'mixed',
    'offset' => 'mixed',
  ),
  'ds\\vector::pop' => 
  array (
    0 => 'mixed',
  ),
  'ds\\vector::push' => 
  array (
    0 => 'void',
    '...values=' => 'mixed',
  ),
  'ds\\vector::reduce' => 
  array (
    0 => 'mixed',
    'callback' => 'callable',
    'initial=' => 'mixed',
  ),
  'ds\\vector::remove' => 
  array (
    0 => 'mixed',
    'index' => 'int',
  ),
  'ds\\vector::reverse' => 
  array (
    0 => 'void',
  ),
  'ds\\vector::reversed' => 
  array (
    0 => 'Ds\\Sequence',
  ),
  'ds\\vector::rotate' => 
  array (
    0 => 'void',
    'rotations' => 'int',
  ),
  'ds\\vector::set' => 
  array (
    0 => 'void',
    'index' => 'int',
    'value' => 'mixed',
  ),
  'ds\\vector::shift' => 
  array (
    0 => 'mixed',
  ),
  'ds\\vector::slice' => 
  array (
    0 => 'Ds\\Sequence',
    'index' => 'int',
    'length=' => 'int|null',
  ),
  'ds\\vector::sort' => 
  array (
    0 => 'void',
    'comparator=' => 'callable|null',
  ),
  'ds\\vector::sorted' => 
  array (
    0 => 'Ds\\Sequence',
    'comparator=' => 'callable|null',
  ),
  'ds\\vector::sum' => 
  array (
    0 => 'float|int',
  ),
  'ds\\vector::toarray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ds\\vector::unshift' => 
  array (
    0 => 'void',
    '...values=' => 'mixed',
  ),
  'easter_date' => 
  array (
    0 => 'int',
    'year=' => 'int|null',
    'mode=' => 'int',
  ),
  'easter_days' => 
  array (
    0 => 'int',
    'year=' => 'int|null',
    'mode=' => 'int',
  ),
  'echo' => 
  array (
    0 => 'void',
    'arg1' => 'string',
    '...args=' => 'string',
  ),
  'eio_busy' => 
  array (
    0 => 'resource',
    'delay' => 'int',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_cancel' => 
  array (
    0 => 'void',
    'req' => 'resource',
  ),
  'eio_chmod' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'mode' => 'int',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_chown' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'uid' => 'int',
    'gid=' => 'int',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_close' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_custom' => 
  array (
    0 => 'resource',
    'execute' => 'callable',
    'pri' => 'int',
    'callback' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_dup2' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'fd2' => 'mixed',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_event_loop' => 
  array (
    0 => 'bool',
  ),
  'eio_fallocate' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'mode' => 'int',
    'offset' => 'int',
    'length' => 'int',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_fchmod' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'mode' => 'int',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_fchown' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'uid' => 'int',
    'gid=' => 'int',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_fdatasync' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_fstat' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'pri' => 'int',
    'callback' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_fstatvfs' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'pri' => 'int',
    'callback' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_fsync' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_ftruncate' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'offset=' => 'int',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_futime' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'atime' => 'float',
    'mtime' => 'float',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_get_event_stream' => 
  array (
    0 => 'mixed',
  ),
  'eio_get_last_error' => 
  array (
    0 => 'string',
    'req' => 'resource',
  ),
  'eio_grp' => 
  array (
    0 => 'resource',
    'callback' => 'callable',
    'data=' => 'string',
  ),
  'eio_grp_add' => 
  array (
    0 => 'void',
    'grp' => 'resource',
    'req' => 'resource',
  ),
  'eio_grp_cancel' => 
  array (
    0 => 'void',
    'grp' => 'resource',
  ),
  'eio_grp_limit' => 
  array (
    0 => 'void',
    'grp' => 'resource',
    'limit' => 'int',
  ),
  'eio_init' => 
  array (
    0 => 'void',
  ),
  'eio_link' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'new_path' => 'string',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_lstat' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'pri' => 'int',
    'callback' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_mkdir' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'mode' => 'int',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_mknod' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'mode' => 'int',
    'dev' => 'int',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_nop' => 
  array (
    0 => 'resource',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_npending' => 
  array (
    0 => 'int',
  ),
  'eio_nready' => 
  array (
    0 => 'int',
  ),
  'eio_nreqs' => 
  array (
    0 => 'int',
  ),
  'eio_nthreads' => 
  array (
    0 => 'int',
  ),
  'eio_open' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'flags' => 'int',
    'mode' => 'int',
    'pri' => 'int',
    'callback' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_poll' => 
  array (
    0 => 'int',
  ),
  'eio_read' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'length' => 'int',
    'offset' => 'int',
    'pri' => 'int',
    'callback' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_readahead' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'offset' => 'int',
    'length' => 'int',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_readdir' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'flags' => 'int',
    'pri' => 'int',
    'callback' => 'callable',
    'data=' => 'string',
  ),
  'eio_readlink' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'pri' => 'int',
    'callback' => 'callable',
    'data=' => 'string',
  ),
  'eio_realpath' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'pri' => 'int',
    'callback' => 'callable',
    'data=' => 'string',
  ),
  'eio_rename' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'new_path' => 'string',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_rmdir' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_seek' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'offset' => 'int',
    'whence' => 'int',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_sendfile' => 
  array (
    0 => 'resource',
    'out_fd' => 'mixed',
    'in_fd' => 'mixed',
    'offset' => 'int',
    'length' => 'int',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'string',
  ),
  'eio_set_max_idle' => 
  array (
    0 => 'void',
    'nthreads' => 'int',
  ),
  'eio_set_max_parallel' => 
  array (
    0 => 'void',
    'nthreads' => 'int',
  ),
  'eio_set_max_poll_reqs' => 
  array (
    0 => 'void',
    'nreqs' => 'int',
  ),
  'eio_set_max_poll_time' => 
  array (
    0 => 'void',
    'nseconds' => 'float',
  ),
  'eio_set_min_parallel' => 
  array (
    0 => 'void',
    'nthreads' => 'string',
  ),
  'eio_stat' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'pri' => 'int',
    'callback' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_statvfs' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'pri' => 'int',
    'callback' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_symlink' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'new_path' => 'string',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_sync' => 
  array (
    0 => 'resource',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_sync_file_range' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'offset' => 'int',
    'nbytes' => 'int',
    'flags' => 'int',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_syncfs' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_truncate' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'offset=' => 'int',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_unlink' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_utime' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'atime' => 'float',
    'mtime' => 'float',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'eio_write' => 
  array (
    0 => 'resource',
    'fd' => 'mixed',
    'string' => 'string',
    'length=' => 'int',
    'offset=' => 'int',
    'pri=' => 'int',
    'callback=' => 'callable',
    'data=' => 'mixed',
  ),
  'empty' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'emptyiterator::current' => 
  array (
    0 => 'never',
  ),
  'emptyiterator::key' => 
  array (
    0 => 'never',
  ),
  'emptyiterator::next' => 
  array (
    0 => 'void',
  ),
  'emptyiterator::rewind' => 
  array (
    0 => 'void',
  ),
  'emptyiterator::valid' => 
  array (
    0 => 'false',
  ),
  'enchant_broker_describe' => 
  array (
    0 => 'array<array-key, mixed>',
    'broker' => 'EnchantBroker',
  ),
  'enchant_broker_dict_exists' => 
  array (
    0 => 'bool',
    'broker' => 'EnchantBroker',
    'tag' => 'string',
  ),
  'enchant_broker_free' => 
  array (
    0 => 'bool',
    'broker' => 'EnchantBroker',
  ),
  'enchant_broker_free_dict' => 
  array (
    0 => 'bool',
    'dictionary' => 'EnchantBroker',
  ),
  'enchant_broker_get_dict_path' => 
  array (
    0 => 'string',
    'broker' => 'EnchantBroker',
    'type' => 'int',
  ),
  'enchant_broker_get_error' => 
  array (
    0 => 'false|string',
    'broker' => 'EnchantBroker',
  ),
  'enchant_broker_init' => 
  array (
    0 => 'EnchantBroker|false',
  ),
  'enchant_broker_list_dicts' => 
  array (
    0 => 'array<int, array{lang_tag: string, provider_desc: string, provider_file: string, provider_name: string}>',
    'broker' => 'EnchantBroker',
  ),
  'enchant_broker_request_dict' => 
  array (
    0 => 'EnchantDictionary|false',
    'broker' => 'EnchantBroker',
    'tag' => 'string',
  ),
  'enchant_broker_request_pwl_dict' => 
  array (
    0 => 'EnchantDictionary|false',
    'broker' => 'EnchantBroker',
    'filename' => 'string',
  ),
  'enchant_broker_set_dict_path' => 
  array (
    0 => 'bool',
    'broker' => 'EnchantBroker',
    'type' => 'int',
    'path' => 'string',
  ),
  'enchant_broker_set_ordering' => 
  array (
    0 => 'bool',
    'broker' => 'EnchantBroker',
    'tag' => 'string',
    'ordering' => 'string',
  ),
  'enchant_dict_add_to_personal' => 
  array (
    0 => 'void',
    'dictionary' => 'EnchantDictionary',
    'word' => 'string',
  ),
  'enchant_dict_add_to_session' => 
  array (
    0 => 'void',
    'dictionary' => 'EnchantDictionary',
    'word' => 'string',
  ),
  'enchant_dict_check' => 
  array (
    0 => 'bool',
    'dictionary' => 'EnchantDictionary',
    'word' => 'string',
  ),
  'enchant_dict_describe' => 
  array (
    0 => 'array<array-key, mixed>',
    'dictionary' => 'EnchantDictionary',
  ),
  'enchant_dict_get_error' => 
  array (
    0 => 'string',
    'dictionary' => 'EnchantDictionary',
  ),
  'enchant_dict_is_in_session' => 
  array (
    0 => 'bool',
    'dictionary' => 'EnchantDictionary',
    'word' => 'string',
  ),
  'enchant_dict_quick_check' => 
  array (
    0 => 'bool',
    'dictionary' => 'EnchantDictionary',
    'word' => 'string',
    '&w_suggestions=' => 'array<int, string>',
  ),
  'enchant_dict_store_replacement' => 
  array (
    0 => 'void',
    'dictionary' => 'EnchantDictionary',
    'misspelled' => 'string',
    'correct' => 'string',
  ),
  'enchant_dict_suggest' => 
  array (
    0 => 'array<array-key, mixed>',
    'dictionary' => 'EnchantDictionary',
    'word' => 'string',
  ),
  'end' => 
  array (
    0 => 'false|mixed',
    '&r_array' => 'array<array-key, mixed>|object',
  ),
  'error::__clone' => 
  array (
    0 => 'void',
  ),
  'error::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'error::__tostring' => 
  array (
    0 => 'string',
  ),
  'error::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'error::getcode' => 
  array (
    0 => 'int',
  ),
  'error::getfile' => 
  array (
    0 => 'string',
  ),
  'error::getline' => 
  array (
    0 => 'int',
  ),
  'error::getmessage' => 
  array (
    0 => 'string',
  ),
  'error::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'error::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'error::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'error_clear_last' => 
  array (
    0 => 'void',
  ),
  'error_get_last' => 
  array (
    0 => 'array{file: string, line: int, message: string, type: int}|null',
  ),
  'error_log' => 
  array (
    0 => 'bool',
    'message' => 'string',
    'message_type=' => 'int',
    'destination=' => 'null|string',
    'additional_headers=' => 'null|string',
  ),
  'error_reporting' => 
  array (
    0 => 'int',
    'error_level=' => 'int|null',
  ),
  'errorexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'severity=' => 'int',
    'filename=' => 'null|string',
    'line=' => 'int|null',
    'previous=' => 'Throwable|null',
  ),
  'errorexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'errorexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'errorexception::getcode' => 
  array (
    0 => 'int',
  ),
  'errorexception::getfile' => 
  array (
    0 => 'string',
  ),
  'errorexception::getline' => 
  array (
    0 => 'int',
  ),
  'errorexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'errorexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'errorexception::getseverity' => 
  array (
    0 => 'int',
  ),
  'errorexception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'errorexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'escapeshellarg' => 
  array (
    0 => 'string',
    'arg' => 'string',
  ),
  'escapeshellcmd' => 
  array (
    0 => 'string',
    'command' => 'string',
  ),
  'ev::backend' => 
  array (
    0 => 'int',
  ),
  'ev::depth' => 
  array (
    0 => 'int',
  ),
  'ev::embeddablebackends' => 
  array (
    0 => 'int',
  ),
  'ev::feedsignal' => 
  array (
    0 => 'void',
    'signum' => 'int',
  ),
  'ev::feedsignalevent' => 
  array (
    0 => 'void',
    'signum' => 'int',
  ),
  'ev::iteration' => 
  array (
    0 => 'int',
  ),
  'ev::now' => 
  array (
    0 => 'float',
  ),
  'ev::nowupdate' => 
  array (
    0 => 'void',
  ),
  'ev::recommendedbackends' => 
  array (
    0 => 'int',
  ),
  'ev::resume' => 
  array (
    0 => 'void',
  ),
  'ev::run' => 
  array (
    0 => 'void',
    'flags=' => 'int',
  ),
  'ev::sleep' => 
  array (
    0 => 'void',
    'seconds' => 'float',
  ),
  'ev::stop' => 
  array (
    0 => 'void',
    'how=' => 'int',
  ),
  'ev::supportedbackends' => 
  array (
    0 => 'int',
  ),
  'ev::suspend' => 
  array (
    0 => 'void',
  ),
  'ev::time' => 
  array (
    0 => 'float',
  ),
  'ev::verify' => 
  array (
    0 => 'void',
  ),
  'eval' => 
  array (
    0 => 'mixed',
    'code_str' => 'string',
  ),
  'evcheck::__construct' => 
  array (
    0 => 'void',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'evcheck::clear' => 
  array (
    0 => 'int',
  ),
  'evcheck::createstopped' => 
  array (
    0 => 'EvCheck',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'evcheck::feed' => 
  array (
    0 => 'void',
    'revents' => 'int',
  ),
  'evcheck::getloop' => 
  array (
    0 => 'EvLoop|null',
  ),
  'evcheck::invoke' => 
  array (
    0 => 'void',
    'revents' => 'int',
  ),
  'evcheck::keepalive' => 
  array (
    0 => 'bool',
    'value=' => 'bool',
  ),
  'evcheck::setcallback' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'evcheck::start' => 
  array (
    0 => 'void',
  ),
  'evcheck::stop' => 
  array (
    0 => 'void',
  ),
  'evchild::__construct' => 
  array (
    0 => 'void',
    'pid' => 'int',
    'trace' => 'bool',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'evchild::clear' => 
  array (
    0 => 'int',
  ),
  'evchild::createstopped' => 
  array (
    0 => 'EvChild',
    'pid' => 'int',
    'trace' => 'bool',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'evchild::feed' => 
  array (
    0 => 'void',
    'revents' => 'int',
  ),
  'evchild::getloop' => 
  array (
    0 => 'EvLoop|null',
  ),
  'evchild::invoke' => 
  array (
    0 => 'void',
    'revents' => 'int',
  ),
  'evchild::keepalive' => 
  array (
    0 => 'bool',
    'value=' => 'bool',
  ),
  'evchild::set' => 
  array (
    0 => 'void',
    'pid' => 'int',
    'trace' => 'bool',
  ),
  'evchild::setcallback' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'evchild::start' => 
  array (
    0 => 'void',
  ),
  'evchild::stop' => 
  array (
    0 => 'void',
  ),
  'evembed::__construct' => 
  array (
    0 => 'void',
    'other' => 'EvLoop',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'evembed::clear' => 
  array (
    0 => 'int',
  ),
  'evembed::createstopped' => 
  array (
    0 => 'EvEmbed',
    'other' => 'EvLoop',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'evembed::feed' => 
  array (
    0 => 'void',
    'revents' => 'int',
  ),
  'evembed::getloop' => 
  array (
    0 => 'EvLoop|null',
  ),
  'evembed::invoke' => 
  array (
    0 => 'void',
    'revents' => 'int',
  ),
  'evembed::keepalive' => 
  array (
    0 => 'bool',
    'value=' => 'bool',
  ),
  'evembed::set' => 
  array (
    0 => 'void',
    'other' => 'EvLoop',
  ),
  'evembed::setcallback' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'evembed::start' => 
  array (
    0 => 'void',
  ),
  'evembed::stop' => 
  array (
    0 => 'void',
  ),
  'evembed::sweep' => 
  array (
    0 => 'void',
  ),
  'event::__construct' => 
  array (
    0 => 'void',
    'base' => 'EventBase',
    'fd' => 'mixed',
    'what' => 'int',
    'cb' => 'callable',
    'arg=' => 'mixed',
  ),
  'event::add' => 
  array (
    0 => 'bool',
    'timeout=' => 'float',
  ),
  'event::addsignal' => 
  array (
    0 => 'bool',
    'timeout=' => 'float',
  ),
  'event::addtimer' => 
  array (
    0 => 'bool',
    'timeout=' => 'float',
  ),
  'event::del' => 
  array (
    0 => 'bool',
  ),
  'event::delsignal' => 
  array (
    0 => 'bool',
  ),
  'event::deltimer' => 
  array (
    0 => 'bool',
  ),
  'event::free' => 
  array (
    0 => 'void',
  ),
  'event::getsupportedmethods' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'event::pending' => 
  array (
    0 => 'bool',
    'flags' => 'int',
  ),
  'event::removetimer' => 
  array (
    0 => 'bool',
  ),
  'event::set' => 
  array (
    0 => 'bool',
    'base' => 'EventBase',
    'fd' => 'mixed',
    'what=' => 'int',
    'cb=' => 'callable|null',
    'arg=' => 'mixed',
  ),
  'event::setpriority' => 
  array (
    0 => 'bool',
    'priority' => 'int',
  ),
  'event::settimer' => 
  array (
    0 => 'bool',
    'base' => 'EventBase',
    'cb' => 'callable',
    'arg=' => 'mixed',
  ),
  'event::signal' => 
  array (
    0 => 'Event',
    'base' => 'EventBase',
    'signum' => 'int',
    'cb' => 'callable',
    'arg=' => 'mixed',
  ),
  'event::timer' => 
  array (
    0 => 'Event',
    'base' => 'EventBase',
    'cb' => 'callable',
    'arg=' => 'mixed',
  ),
  'event_add' => 
  array (
    0 => 'bool',
    'event' => 'resource',
    'timeout=' => 'int',
  ),
  'event_base_free' => 
  array (
    0 => 'void',
    'event_base' => 'resource',
  ),
  'event_base_loop' => 
  array (
    0 => 'int',
    'event_base' => 'resource',
    'flags=' => 'int',
  ),
  'event_base_loopbreak' => 
  array (
    0 => 'bool',
    'event_base' => 'resource',
  ),
  'event_base_loopexit' => 
  array (
    0 => 'bool',
    'event_base' => 'resource',
    'timeout=' => 'int',
  ),
  'event_base_new' => 
  array (
    0 => 'false|resource',
  ),
  'event_base_priority_init' => 
  array (
    0 => 'bool',
    'event_base' => 'resource',
    'npriorities' => 'int',
  ),
  'event_base_reinit' => 
  array (
    0 => 'bool',
    'event_base' => 'resource',
  ),
  'event_base_set' => 
  array (
    0 => 'bool',
    'event' => 'resource',
    'event_base' => 'resource',
  ),
  'event_buffer_base_set' => 
  array (
    0 => 'bool',
    'bevent' => 'resource',
    'event_base' => 'resource',
  ),
  'event_buffer_disable' => 
  array (
    0 => 'bool',
    'bevent' => 'resource',
    'events' => 'int',
  ),
  'event_buffer_enable' => 
  array (
    0 => 'bool',
    'bevent' => 'resource',
    'events' => 'int',
  ),
  'event_buffer_fd_set' => 
  array (
    0 => 'void',
    'bevent' => 'resource',
    'fd' => 'resource',
  ),
  'event_buffer_free' => 
  array (
    0 => 'void',
    'bevent' => 'resource',
  ),
  'event_buffer_new' => 
  array (
    0 => 'false|resource',
    'stream' => 'resource',
    'readcb' => 'callable|null',
    'writecb' => 'callable|null',
    'errorcb' => 'callable',
    'arg=' => 'mixed',
  ),
  'event_buffer_priority_set' => 
  array (
    0 => 'bool',
    'bevent' => 'resource',
    'priority' => 'int',
  ),
  'event_buffer_read' => 
  array (
    0 => 'string',
    'bevent' => 'resource',
    'data_size' => 'int',
  ),
  'event_buffer_set_callback' => 
  array (
    0 => 'bool',
    'event' => 'resource',
    'readcb' => 'mixed',
    'writecb' => 'mixed',
    'errorcb' => 'mixed',
    'arg=' => 'mixed',
  ),
  'event_buffer_timeout_set' => 
  array (
    0 => 'void',
    'bevent' => 'resource',
    'read_timeout' => 'int',
    'write_timeout' => 'int',
  ),
  'event_buffer_watermark_set' => 
  array (
    0 => 'void',
    'bevent' => 'resource',
    'events' => 'int',
    'lowmark' => 'int',
    'highmark' => 'int',
  ),
  'event_buffer_write' => 
  array (
    0 => 'bool',
    'bevent' => 'resource',
    'data' => 'string',
    'data_size=' => 'int',
  ),
  'event_del' => 
  array (
    0 => 'bool',
    'event' => 'resource',
  ),
  'event_free' => 
  array (
    0 => 'void',
    'event' => 'resource',
  ),
  'event_new' => 
  array (
    0 => 'false|resource',
  ),
  'event_priority_set' => 
  array (
    0 => 'bool',
    'event' => 'resource',
    'priority' => 'int',
  ),
  'event_set' => 
  array (
    0 => 'bool',
    'event' => 'resource',
    'fd' => 'int|resource',
    'events' => 'int',
    'callback' => 'callable',
    'arg=' => 'mixed',
  ),
  'event_timer_add' => 
  array (
    0 => 'bool',
    'event' => 'resource',
    'timeout=' => 'int',
  ),
  'event_timer_del' => 
  array (
    0 => 'bool',
    'event' => 'resource',
  ),
  'event_timer_new' => 
  array (
    0 => 'false|resource',
  ),
  'event_timer_pending' => 
  array (
    0 => 'bool',
    'event' => 'resource',
    'timeout=' => 'int',
  ),
  'event_timer_set' => 
  array (
    0 => 'bool',
    'event' => 'resource',
    'callback' => 'callable',
    'arg=' => 'mixed',
  ),
  'eventbase::__construct' => 
  array (
    0 => 'void',
    'cfg=' => 'EventConfig|null',
  ),
  'eventbase::__sleep' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'eventbase::__wakeup' => 
  array (
    0 => 'void',
  ),
  'eventbase::dispatch' => 
  array (
    0 => 'bool',
  ),
  'eventbase::exit' => 
  array (
    0 => 'bool',
    'timeout=' => 'float',
  ),
  'eventbase::free' => 
  array (
    0 => 'void',
  ),
  'eventbase::getfeatures' => 
  array (
    0 => 'int',
  ),
  'eventbase::getmethod' => 
  array (
    0 => 'string',
  ),
  'eventbase::gettimeofdaycached' => 
  array (
    0 => 'float',
  ),
  'eventbase::gotexit' => 
  array (
    0 => 'bool',
  ),
  'eventbase::gotstop' => 
  array (
    0 => 'bool',
  ),
  'eventbase::loop' => 
  array (
    0 => 'bool',
    'flags=' => 'int',
  ),
  'eventbase::priorityinit' => 
  array (
    0 => 'bool',
    'n_priorities' => 'int',
  ),
  'eventbase::reinit' => 
  array (
    0 => 'bool',
  ),
  'eventbase::resume' => 
  array (
    0 => 'bool',
  ),
  'eventbase::set' => 
  array (
    0 => 'bool',
    'event' => 'Event',
  ),
  'eventbase::stop' => 
  array (
    0 => 'bool',
  ),
  'eventbase::updatecachetime' => 
  array (
    0 => 'bool',
  ),
  'eventbuffer::__construct' => 
  array (
    0 => 'void',
  ),
  'eventbuffer::add' => 
  array (
    0 => 'bool',
    'data' => 'string',
  ),
  'eventbuffer::addbuffer' => 
  array (
    0 => 'bool',
    'buf' => 'EventBuffer',
  ),
  'eventbuffer::appendfrom' => 
  array (
    0 => 'int',
    'buf' => 'EventBuffer',
    'len' => 'int',
  ),
  'eventbuffer::copyout' => 
  array (
    0 => 'int',
    '&w_data' => 'string',
    'max_bytes' => 'int',
  ),
  'eventbuffer::drain' => 
  array (
    0 => 'bool',
    'len' => 'int',
  ),
  'eventbuffer::enablelocking' => 
  array (
    0 => 'void',
  ),
  'eventbuffer::expand' => 
  array (
    0 => 'bool',
    'len' => 'int',
  ),
  'eventbuffer::freeze' => 
  array (
    0 => 'bool',
    'at_front' => 'bool',
  ),
  'eventbuffer::lock' => 
  array (
    0 => 'void',
    'at_front' => 'bool',
  ),
  'eventbuffer::prepend' => 
  array (
    0 => 'bool',
    'data' => 'string',
  ),
  'eventbuffer::prependbuffer' => 
  array (
    0 => 'bool',
    'buf' => 'EventBuffer',
  ),
  'eventbuffer::pullup' => 
  array (
    0 => 'null|string',
    'size' => 'int',
  ),
  'eventbuffer::read' => 
  array (
    0 => 'string',
    'max_bytes' => 'int',
  ),
  'eventbuffer::readfrom' => 
  array (
    0 => 'int',
    'fd' => 'mixed',
    'howmuch=' => 'int',
  ),
  'eventbuffer::readline' => 
  array (
    0 => 'null|string',
    'eol_style' => 'int',
  ),
  'eventbuffer::search' => 
  array (
    0 => 'false|int',
    'what' => 'string',
    'start=' => 'int',
    'end=' => 'int',
  ),
  'eventbuffer::searcheol' => 
  array (
    0 => 'false|int',
    'start=' => 'int',
    'eol_style=' => 'int',
  ),
  'eventbuffer::substr' => 
  array (
    0 => 'string',
    'start' => 'int',
    'length=' => 'int',
  ),
  'eventbuffer::unfreeze' => 
  array (
    0 => 'bool',
    'at_front' => 'bool',
  ),
  'eventbuffer::unlock' => 
  array (
    0 => 'void',
    'at_front' => 'bool',
  ),
  'eventbuffer::write' => 
  array (
    0 => 'int',
    'fd' => 'mixed',
    'howmuch=' => 'int',
  ),
  'eventbufferevent::__construct' => 
  array (
    0 => 'void',
    'base' => 'EventBase',
    'socket=' => 'mixed',
    'options=' => 'int',
    'readcb=' => 'callable|null',
    'writecb=' => 'callable|null',
    'eventcb=' => 'callable|null',
    'arg=' => 'mixed',
  ),
  'eventbufferevent::close' => 
  array (
    0 => 'void',
  ),
  'eventbufferevent::connect' => 
  array (
    0 => 'bool',
    'addr' => 'string',
  ),
  'eventbufferevent::connecthost' => 
  array (
    0 => 'bool',
    'dns_base' => 'EventDnsBase|null',
    'hostname' => 'string',
    'port' => 'int',
    'family=' => 'int',
  ),
  'eventbufferevent::createpair' => 
  array (
    0 => 'array<array-key, mixed>',
    'base' => 'EventBase',
    'options=' => 'int',
  ),
  'eventbufferevent::createsslfilter' => 
  array (
    0 => 'EventBufferEvent',
    'unnderlying' => 'EventBufferEvent',
    'ctx' => 'EventSslContext',
    'state' => 'int',
    'options=' => 'int',
  ),
  'eventbufferevent::disable' => 
  array (
    0 => 'bool',
    'events' => 'int',
  ),
  'eventbufferevent::enable' => 
  array (
    0 => 'bool',
    'events' => 'int',
  ),
  'eventbufferevent::free' => 
  array (
    0 => 'void',
  ),
  'eventbufferevent::getdnserrorstring' => 
  array (
    0 => 'string',
  ),
  'eventbufferevent::getenabled' => 
  array (
    0 => 'int',
  ),
  'eventbufferevent::getinput' => 
  array (
    0 => 'EventBuffer',
  ),
  'eventbufferevent::getoutput' => 
  array (
    0 => 'EventBuffer',
  ),
  'eventbufferevent::read' => 
  array (
    0 => 'null|string',
    'size' => 'int',
  ),
  'eventbufferevent::readbuffer' => 
  array (
    0 => 'bool',
    'buf' => 'EventBuffer',
  ),
  'eventbufferevent::setcallbacks' => 
  array (
    0 => 'void',
    'readcb' => 'callable|null',
    'writecb' => 'callable|null',
    'eventcb' => 'callable|null',
    'arg=' => 'string',
  ),
  'eventbufferevent::setpriority' => 
  array (
    0 => 'bool',
    'priority' => 'int',
  ),
  'eventbufferevent::settimeouts' => 
  array (
    0 => 'bool',
    'timeout_read' => 'float',
    'timeout_write' => 'float',
  ),
  'eventbufferevent::setwatermark' => 
  array (
    0 => 'void',
    'events' => 'int',
    'lowmark' => 'int',
    'highmark' => 'int',
  ),
  'eventbufferevent::sslerror' => 
  array (
    0 => 'string',
  ),
  'eventbufferevent::sslgetcipherinfo' => 
  array (
    0 => 'string',
  ),
  'eventbufferevent::sslgetciphername' => 
  array (
    0 => 'string',
  ),
  'eventbufferevent::sslgetcipherversion' => 
  array (
    0 => 'string',
  ),
  'eventbufferevent::sslgetprotocol' => 
  array (
    0 => 'string',
  ),
  'eventbufferevent::sslrenegotiate' => 
  array (
    0 => 'void',
  ),
  'eventbufferevent::sslsocket' => 
  array (
    0 => 'EventBufferEvent',
    'base' => 'EventBase',
    'socket' => 'mixed',
    'ctx' => 'EventSslContext',
    'state' => 'int',
    'options=' => 'int',
  ),
  'eventbufferevent::write' => 
  array (
    0 => 'bool',
    'data' => 'string',
  ),
  'eventbufferevent::writebuffer' => 
  array (
    0 => 'bool',
    'buf' => 'EventBuffer',
  ),
  'eventconfig::__construct' => 
  array (
    0 => 'void',
  ),
  'eventconfig::__sleep' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'eventconfig::__wakeup' => 
  array (
    0 => 'void',
  ),
  'eventconfig::avoidmethod' => 
  array (
    0 => 'bool',
    'method' => 'string',
  ),
  'eventconfig::requirefeatures' => 
  array (
    0 => 'bool',
    'feature' => 'int',
  ),
  'eventconfig::setflags' => 
  array (
    0 => 'bool',
    'flags' => 'int',
  ),
  'eventconfig::setmaxdispatchinterval' => 
  array (
    0 => 'void',
    'max_interval' => 'int',
    'max_callbacks' => 'int',
    'min_priority' => 'int',
  ),
  'eventdnsbase::__construct' => 
  array (
    0 => 'void',
    'base' => 'EventBase',
    'initialize' => 'bool',
  ),
  'eventdnsbase::addnameserverip' => 
  array (
    0 => 'bool',
    'ip' => 'string',
  ),
  'eventdnsbase::addsearch' => 
  array (
    0 => 'void',
    'domain' => 'string',
  ),
  'eventdnsbase::clearsearch' => 
  array (
    0 => 'void',
  ),
  'eventdnsbase::countnameservers' => 
  array (
    0 => 'int',
  ),
  'eventdnsbase::loadhosts' => 
  array (
    0 => 'bool',
    'hosts' => 'string',
  ),
  'eventdnsbase::parseresolvconf' => 
  array (
    0 => 'bool',
    'flags' => 'int',
    'filename' => 'string',
  ),
  'eventdnsbase::setoption' => 
  array (
    0 => 'bool',
    'option' => 'string',
    'value' => 'string',
  ),
  'eventdnsbase::setsearchndots' => 
  array (
    0 => 'void',
    'ndots' => 'int',
  ),
  'eventexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'eventexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'eventexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'eventexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'eventexception::getfile' => 
  array (
    0 => 'string',
  ),
  'eventexception::getline' => 
  array (
    0 => 'int',
  ),
  'eventexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'eventexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'eventexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'eventexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'eventhttp::__construct' => 
  array (
    0 => 'void',
    'base' => 'EventBase',
    'ctx=' => 'EventSslContext|null',
  ),
  'eventhttp::__sleep' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'eventhttp::__wakeup' => 
  array (
    0 => 'void',
  ),
  'eventhttp::accept' => 
  array (
    0 => 'bool',
    'socket' => 'mixed',
  ),
  'eventhttp::addserveralias' => 
  array (
    0 => 'bool',
    'alias' => 'string',
  ),
  'eventhttp::bind' => 
  array (
    0 => 'bool',
    'address' => 'string',
    'port' => 'int',
  ),
  'eventhttp::removeserveralias' => 
  array (
    0 => 'bool',
    'alias' => 'string',
  ),
  'eventhttp::setallowedmethods' => 
  array (
    0 => 'void',
    'methods' => 'int',
  ),
  'eventhttp::setcallback' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'cb' => 'callable',
    'arg=' => 'string',
  ),
  'eventhttp::setdefaultcallback' => 
  array (
    0 => 'void',
    'cb' => 'callable',
    'arg=' => 'string',
  ),
  'eventhttp::setmaxbodysize' => 
  array (
    0 => 'void',
    'value' => 'int',
  ),
  'eventhttp::setmaxheaderssize' => 
  array (
    0 => 'void',
    'value' => 'int',
  ),
  'eventhttp::settimeout' => 
  array (
    0 => 'void',
    'value' => 'int',
  ),
  'eventhttpconnection::__construct' => 
  array (
    0 => 'void',
    'base' => 'EventBase',
    'dns_base' => 'EventDnsBase|null',
    'address' => 'string',
    'port' => 'int',
    'ctx=' => 'EventSslContext|null',
  ),
  'eventhttpconnection::__sleep' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'eventhttpconnection::__wakeup' => 
  array (
    0 => 'void',
  ),
  'eventhttpconnection::getbase' => 
  array (
    0 => 'EventBase',
  ),
  'eventhttpconnection::getpeer' => 
  array (
    0 => 'void',
    '&w_address' => 'string',
    '&w_port' => 'int',
  ),
  'eventhttpconnection::makerequest' => 
  array (
    0 => 'bool|null',
    'req' => 'EventHttpRequest',
    'type' => 'int',
    'uri' => 'string',
  ),
  'eventhttpconnection::setclosecallback' => 
  array (
    0 => 'void',
    'callback' => 'callable',
    'data=' => 'mixed',
  ),
  'eventhttpconnection::setlocaladdress' => 
  array (
    0 => 'void',
    'address' => 'string',
  ),
  'eventhttpconnection::setlocalport' => 
  array (
    0 => 'void',
    'port' => 'int',
  ),
  'eventhttpconnection::setmaxbodysize' => 
  array (
    0 => 'void',
    'max_size' => 'int',
  ),
  'eventhttpconnection::setmaxheaderssize' => 
  array (
    0 => 'void',
    'max_size' => 'int',
  ),
  'eventhttpconnection::setretries' => 
  array (
    0 => 'void',
    'retries' => 'int',
  ),
  'eventhttpconnection::settimeout' => 
  array (
    0 => 'void',
    'timeout' => 'int',
  ),
  'eventhttprequest::__construct' => 
  array (
    0 => 'void',
    'callback' => 'callable',
    'data=' => 'mixed',
  ),
  'eventhttprequest::__sleep' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'eventhttprequest::__wakeup' => 
  array (
    0 => 'void',
  ),
  'eventhttprequest::addheader' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'string',
    'type' => 'int',
  ),
  'eventhttprequest::cancel' => 
  array (
    0 => 'void',
  ),
  'eventhttprequest::clearheaders' => 
  array (
    0 => 'void',
  ),
  'eventhttprequest::closeconnection' => 
  array (
    0 => 'void',
  ),
  'eventhttprequest::findheader' => 
  array (
    0 => 'null|string',
    'key' => 'string',
    'type' => 'int',
  ),
  'eventhttprequest::free' => 
  array (
    0 => 'void',
  ),
  'eventhttprequest::getbufferevent' => 
  array (
    0 => 'EventBufferEvent|null',
  ),
  'eventhttprequest::getcommand' => 
  array (
    0 => 'int',
  ),
  'eventhttprequest::getconnection' => 
  array (
    0 => 'EventHttpConnection|null',
  ),
  'eventhttprequest::gethost' => 
  array (
    0 => 'string',
  ),
  'eventhttprequest::getinputbuffer' => 
  array (
    0 => 'EventBuffer',
  ),
  'eventhttprequest::getinputheaders' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'eventhttprequest::getoutputbuffer' => 
  array (
    0 => 'EventBuffer',
  ),
  'eventhttprequest::getoutputheaders' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'eventhttprequest::getresponsecode' => 
  array (
    0 => 'int',
  ),
  'eventhttprequest::geturi' => 
  array (
    0 => 'string',
  ),
  'eventhttprequest::removeheader' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'type' => 'int',
  ),
  'eventhttprequest::senderror' => 
  array (
    0 => 'void',
    'error' => 'int',
    'reason=' => 'null|string',
  ),
  'eventhttprequest::sendreply' => 
  array (
    0 => 'void',
    'code' => 'int',
    'reason' => 'string',
    'buf=' => 'EventBuffer|null',
  ),
  'eventhttprequest::sendreplychunk' => 
  array (
    0 => 'void',
    'buf' => 'EventBuffer',
  ),
  'eventhttprequest::sendreplyend' => 
  array (
    0 => 'void',
  ),
  'eventhttprequest::sendreplystart' => 
  array (
    0 => 'void',
    'code' => 'int',
    'reason' => 'string',
  ),
  'eventlistener::__construct' => 
  array (
    0 => 'void',
    'base' => 'EventBase',
    'cb' => 'callable',
    'data' => 'mixed',
    'flags' => 'int',
    'backlog' => 'int',
    'target' => 'mixed',
  ),
  'eventlistener::__sleep' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'eventlistener::__wakeup' => 
  array (
    0 => 'void',
  ),
  'eventlistener::disable' => 
  array (
    0 => 'bool',
  ),
  'eventlistener::enable' => 
  array (
    0 => 'bool',
  ),
  'eventlistener::free' => 
  array (
    0 => 'void',
  ),
  'eventlistener::getbase' => 
  array (
    0 => 'EventBase',
  ),
  'eventlistener::getsocketname' => 
  array (
    0 => 'bool',
    '&w_address' => 'string',
    '&w_port' => 'mixed',
  ),
  'eventlistener::setcallback' => 
  array (
    0 => 'void',
    'cb' => 'callable',
    'arg=' => 'mixed',
  ),
  'eventlistener::seterrorcallback' => 
  array (
    0 => 'void',
    'cb' => 'callable',
  ),
  'eventsslcontext::__construct' => 
  array (
    0 => 'void',
    'method' => 'int',
    'options' => 'array<array-key, mixed>',
  ),
  'eventsslcontext::setmaxprotoversion' => 
  array (
    0 => 'bool',
    'proto' => 'int',
  ),
  'eventsslcontext::setminprotoversion' => 
  array (
    0 => 'bool',
    'proto' => 'int',
  ),
  'eventutil::__construct' => 
  array (
    0 => 'void',
  ),
  'eventutil::getlastsocketerrno' => 
  array (
    0 => 'int',
    'socket=' => 'Socket|null',
  ),
  'eventutil::getlastsocketerror' => 
  array (
    0 => 'string',
    'socket=' => 'mixed',
  ),
  'eventutil::getsocketfd' => 
  array (
    0 => 'int',
    'socket' => 'mixed',
  ),
  'eventutil::getsocketname' => 
  array (
    0 => 'bool',
    'socket' => 'mixed',
    '&w_address' => 'string',
    '&w_port=' => 'mixed',
  ),
  'eventutil::setsocketoption' => 
  array (
    0 => 'bool',
    'socket' => 'mixed',
    'level' => 'int',
    'optname' => 'int',
    'optval' => 'mixed',
  ),
  'eventutil::sslrandpoll' => 
  array (
    0 => 'bool',
  ),
  'evfork::__construct' => 
  array (
    0 => 'void',
    'loop' => 'EvLoop',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'evfork::clear' => 
  array (
    0 => 'int',
  ),
  'evfork::createstopped' => 
  array (
    0 => 'EvFork',
    'loop' => 'EvLoop',
    'callback' => 'callable',
    'data=' => 'string',
    'priority=' => 'int',
  ),
  'evfork::feed' => 
  array (
    0 => 'void',
    'revents' => 'int',
  ),
  'evfork::getloop' => 
  array (
    0 => 'EvLoop|null',
  ),
  'evfork::invoke' => 
  array (
    0 => 'void',
    'revents' => 'int',
  ),
  'evfork::keepalive' => 
  array (
    0 => 'bool',
    'value=' => 'bool',
  ),
  'evfork::setcallback' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'evfork::start' => 
  array (
    0 => 'void',
  ),
  'evfork::stop' => 
  array (
    0 => 'void',
  ),
  'evidle::__construct' => 
  array (
    0 => 'void',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'evidle::clear' => 
  array (
    0 => 'int',
  ),
  'evidle::createstopped' => 
  array (
    0 => 'EvIdle',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'evidle::feed' => 
  array (
    0 => 'void',
    'revents' => 'int',
  ),
  'evidle::getloop' => 
  array (
    0 => 'EvLoop|null',
  ),
  'evidle::invoke' => 
  array (
    0 => 'void',
    'revents' => 'int',
  ),
  'evidle::keepalive' => 
  array (
    0 => 'bool',
    'value=' => 'bool',
  ),
  'evidle::setcallback' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'evidle::start' => 
  array (
    0 => 'void',
  ),
  'evidle::stop' => 
  array (
    0 => 'void',
  ),
  'evio::__construct' => 
  array (
    0 => 'void',
    'fd' => 'mixed',
    'events' => 'int',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'evio::clear' => 
  array (
    0 => 'int',
  ),
  'evio::createstopped' => 
  array (
    0 => 'EvIo',
    'fd' => 'resource',
    'events' => 'int',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'evio::feed' => 
  array (
    0 => 'void',
    'revents' => 'int',
  ),
  'evio::getloop' => 
  array (
    0 => 'EvLoop|null',
  ),
  'evio::invoke' => 
  array (
    0 => 'void',
    'revents' => 'int',
  ),
  'evio::keepalive' => 
  array (
    0 => 'bool',
    'value=' => 'bool',
  ),
  'evio::set' => 
  array (
    0 => 'void',
    'fd' => 'resource',
    'events' => 'int',
  ),
  'evio::setcallback' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'evio::start' => 
  array (
    0 => 'void',
  ),
  'evio::stop' => 
  array (
    0 => 'void',
  ),
  'evloop::__construct' => 
  array (
    0 => 'void',
    'flags=' => 'int',
    'data=' => 'mixed',
    'io_interval=' => 'float',
    'timeout_interval=' => 'float',
  ),
  'evloop::backend' => 
  array (
    0 => 'int',
  ),
  'evloop::check' => 
  array (
    0 => 'EvCheck',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'evloop::child' => 
  array (
    0 => 'EvChild',
    'pid' => 'int',
    'trace' => 'bool',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'evloop::defaultloop' => 
  array (
    0 => 'EvLoop',
    'flags=' => 'int',
    'data=' => 'mixed',
    'io_interval=' => 'float',
    'timeout_interval=' => 'float',
  ),
  'evloop::embed' => 
  array (
    0 => 'EvEmbed',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'evloop::fork' => 
  array (
    0 => 'EvFork',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'evloop::idle' => 
  array (
    0 => 'EvIdle',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'evloop::invokepending' => 
  array (
    0 => 'void',
  ),
  'evloop::io' => 
  array (
    0 => 'EvIo',
    'fd' => 'resource',
    'events' => 'int',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'evloop::loopfork' => 
  array (
    0 => 'void',
  ),
  'evloop::now' => 
  array (
    0 => 'float',
  ),
  'evloop::nowupdate' => 
  array (
    0 => 'void',
  ),
  'evloop::periodic' => 
  array (
    0 => 'EvPeriodic',
    'offset' => 'float',
    'interval' => 'float',
    'reschedule_cb' => 'callable',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'evloop::prepare' => 
  array (
    0 => 'EvPrepare',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'evloop::resume' => 
  array (
    0 => 'void',
  ),
  'evloop::run' => 
  array (
    0 => 'void',
    'flags=' => 'int',
  ),
  'evloop::signal' => 
  array (
    0 => 'EvSignal',
    'signum' => 'int',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'evloop::stat' => 
  array (
    0 => 'EvStat',
    'path' => 'string',
    'interval' => 'float',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'evloop::stop' => 
  array (
    0 => 'void',
    'how=' => 'int',
  ),
  'evloop::suspend' => 
  array (
    0 => 'void',
  ),
  'evloop::timer' => 
  array (
    0 => 'EvTimer',
    'after' => 'float',
    'repeat' => 'float',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'evloop::verify' => 
  array (
    0 => 'void',
  ),
  'evperiodic::__construct' => 
  array (
    0 => 'void',
    'offset' => 'float',
    'interval' => 'float',
    'reschedule_cb' => 'callable',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'evperiodic::again' => 
  array (
    0 => 'void',
  ),
  'evperiodic::at' => 
  array (
    0 => 'float',
  ),
  'evperiodic::clear' => 
  array (
    0 => 'int',
  ),
  'evperiodic::createstopped' => 
  array (
    0 => 'EvPeriodic',
    'offset' => 'float',
    'interval' => 'float',
    'reschedule_cb' => 'callable',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'evperiodic::feed' => 
  array (
    0 => 'void',
    'revents' => 'int',
  ),
  'evperiodic::getloop' => 
  array (
    0 => 'EvLoop|null',
  ),
  'evperiodic::invoke' => 
  array (
    0 => 'void',
    'revents' => 'int',
  ),
  'evperiodic::keepalive' => 
  array (
    0 => 'bool',
    'value=' => 'bool',
  ),
  'evperiodic::set' => 
  array (
    0 => 'void',
    'offset' => 'float',
    'interval' => 'float',
    'reschedule_cb=' => 'mixed',
  ),
  'evperiodic::setcallback' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'evperiodic::start' => 
  array (
    0 => 'void',
  ),
  'evperiodic::stop' => 
  array (
    0 => 'void',
  ),
  'evprepare::__construct' => 
  array (
    0 => 'void',
    'callback' => 'string',
    'data=' => 'string',
    'priority=' => 'int',
  ),
  'evprepare::clear' => 
  array (
    0 => 'int',
  ),
  'evprepare::createstopped' => 
  array (
    0 => 'EvPrepare',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'evprepare::feed' => 
  array (
    0 => 'void',
    'revents' => 'int',
  ),
  'evprepare::getloop' => 
  array (
    0 => 'EvLoop|null',
  ),
  'evprepare::invoke' => 
  array (
    0 => 'void',
    'revents' => 'int',
  ),
  'evprepare::keepalive' => 
  array (
    0 => 'bool',
    'value=' => 'bool',
  ),
  'evprepare::setcallback' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'evprepare::start' => 
  array (
    0 => 'void',
  ),
  'evprepare::stop' => 
  array (
    0 => 'void',
  ),
  'evsignal::__construct' => 
  array (
    0 => 'void',
    'signum' => 'int',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'evsignal::clear' => 
  array (
    0 => 'int',
  ),
  'evsignal::createstopped' => 
  array (
    0 => 'EvSignal',
    'signum' => 'int',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'evsignal::feed' => 
  array (
    0 => 'void',
    'revents' => 'int',
  ),
  'evsignal::getloop' => 
  array (
    0 => 'EvLoop|null',
  ),
  'evsignal::invoke' => 
  array (
    0 => 'void',
    'revents' => 'int',
  ),
  'evsignal::keepalive' => 
  array (
    0 => 'bool',
    'value=' => 'bool',
  ),
  'evsignal::set' => 
  array (
    0 => 'void',
    'signum' => 'int',
  ),
  'evsignal::setcallback' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'evsignal::start' => 
  array (
    0 => 'void',
  ),
  'evsignal::stop' => 
  array (
    0 => 'void',
  ),
  'evstat::__construct' => 
  array (
    0 => 'void',
    'path' => 'string',
    'interval' => 'float',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'evstat::attr' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'evstat::clear' => 
  array (
    0 => 'int',
  ),
  'evstat::createstopped' => 
  array (
    0 => 'EvStat',
    'path' => 'string',
    'interval' => 'float',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'evstat::feed' => 
  array (
    0 => 'void',
    'revents' => 'int',
  ),
  'evstat::getloop' => 
  array (
    0 => 'EvLoop|null',
  ),
  'evstat::invoke' => 
  array (
    0 => 'void',
    'revents' => 'int',
  ),
  'evstat::keepalive' => 
  array (
    0 => 'bool',
    'value=' => 'bool',
  ),
  'evstat::prev' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'evstat::set' => 
  array (
    0 => 'void',
    'path' => 'string',
    'interval' => 'float',
  ),
  'evstat::setcallback' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'evstat::start' => 
  array (
    0 => 'void',
  ),
  'evstat::stat' => 
  array (
    0 => 'bool',
  ),
  'evstat::stop' => 
  array (
    0 => 'void',
  ),
  'evtimer::__construct' => 
  array (
    0 => 'void',
    'after' => 'float',
    'repeat' => 'float',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'evtimer::again' => 
  array (
    0 => 'void',
  ),
  'evtimer::clear' => 
  array (
    0 => 'int',
  ),
  'evtimer::createstopped' => 
  array (
    0 => 'EvTimer',
    'after' => 'float',
    'repeat' => 'float',
    'callback' => 'callable',
    'data=' => 'mixed',
    'priority=' => 'int',
  ),
  'evtimer::feed' => 
  array (
    0 => 'void',
    'revents' => 'int',
  ),
  'evtimer::getloop' => 
  array (
    0 => 'EvLoop|null',
  ),
  'evtimer::invoke' => 
  array (
    0 => 'void',
    'revents' => 'int',
  ),
  'evtimer::keepalive' => 
  array (
    0 => 'bool',
    'value=' => 'bool',
  ),
  'evtimer::set' => 
  array (
    0 => 'void',
    'after' => 'float',
    'repeat' => 'float',
  ),
  'evtimer::setcallback' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'evtimer::start' => 
  array (
    0 => 'void',
  ),
  'evtimer::stop' => 
  array (
    0 => 'void',
  ),
  'evwatcher::clear' => 
  array (
    0 => 'int',
  ),
  'evwatcher::feed' => 
  array (
    0 => 'void',
    'revents' => 'int',
  ),
  'evwatcher::getloop' => 
  array (
    0 => 'EvLoop|null',
  ),
  'evwatcher::invoke' => 
  array (
    0 => 'void',
    'revents' => 'int',
  ),
  'evwatcher::keepalive' => 
  array (
    0 => 'bool',
    'value=' => 'bool',
  ),
  'evwatcher::setcallback' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'evwatcher::start' => 
  array (
    0 => 'void',
  ),
  'evwatcher::stop' => 
  array (
    0 => 'void',
  ),
  'exception::__clone' => 
  array (
    0 => 'void',
  ),
  'exception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'exception::__tostring' => 
  array (
    0 => 'string',
  ),
  'exception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'exception::getcode' => 
  array (
    0 => 'int|string',
  ),
  'exception::getfile' => 
  array (
    0 => 'string',
  ),
  'exception::getline' => 
  array (
    0 => 'int',
  ),
  'exception::getmessage' => 
  array (
    0 => 'string',
  ),
  'exception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'exception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'exception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'exec' => 
  array (
    0 => 'false|string',
    'command' => 'string',
    '&w_output=' => 'array<array-key, mixed>',
    '&w_result_code=' => 'int',
  ),
  'exif_imagetype' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
  ),
  'exif_read_data' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'file' => 'resource|string',
    'required_sections=' => 'null|string',
    'as_arrays=' => 'bool',
    'read_thumbnail=' => 'bool',
  ),
  'exif_tagname' => 
  array (
    0 => 'false|string',
    'index' => 'int',
  ),
  'exif_thumbnail' => 
  array (
    0 => 'false|string',
    'file' => 'string',
    '&w_width=' => 'int',
    '&w_height=' => 'int',
    '&w_image_type=' => 'int',
  ),
  'exp' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'expect_expectl' => 
  array (
    0 => 'int',
    'expect' => 'resource',
    'cases' => 'array<array-key, mixed>',
    'match=' => 'array<array-key, mixed>',
  ),
  'expect_popen' => 
  array (
    0 => 'false|resource',
    'command' => 'string',
  ),
  'explode' => 
  array (
    0 => 'list<string>',
    'separator' => 'string',
    'string' => 'string',
    'limit=' => 'int',
  ),
  'expm1' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'extension_loaded' => 
  array (
    0 => 'bool',
    'extension' => 'string',
  ),
  'extract' => 
  array (
    0 => 'int',
    '&array' => 'array<array-key, mixed>',
    'flags=' => 'int',
    'prefix=' => 'string',
  ),
  'fam_cancel_monitor' => 
  array (
    0 => 'bool',
    'fam' => 'resource',
    'fam_monitor' => 'resource',
  ),
  'fam_close' => 
  array (
    0 => 'void',
    'fam' => 'resource',
  ),
  'fam_monitor_collection' => 
  array (
    0 => 'resource',
    'fam' => 'resource',
    'dirname' => 'string',
    'depth' => 'int',
    'mask' => 'string',
  ),
  'fam_monitor_directory' => 
  array (
    0 => 'resource',
    'fam' => 'resource',
    'dirname' => 'string',
  ),
  'fam_monitor_file' => 
  array (
    0 => 'resource',
    'fam' => 'resource',
    'filename' => 'string',
  ),
  'fam_next_event' => 
  array (
    0 => 'array<array-key, mixed>',
    'fam' => 'resource',
  ),
  'fam_open' => 
  array (
    0 => 'false|resource',
    'appname=' => 'string',
  ),
  'fam_pending' => 
  array (
    0 => 'int',
    'fam' => 'resource',
  ),
  'fam_resume_monitor' => 
  array (
    0 => 'bool',
    'fam' => 'resource',
    'fam_monitor' => 'resource',
  ),
  'fam_suspend_monitor' => 
  array (
    0 => 'bool',
    'fam' => 'resource',
    'fam_monitor' => 'resource',
  ),
  'fann_cascadetrain_on_data' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'data' => 'resource',
    'max_neurons' => 'int',
    'neurons_between_reports' => 'int',
    'desired_error' => 'float',
  ),
  'fann_cascadetrain_on_file' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'filename' => 'string',
    'max_neurons' => 'int',
    'neurons_between_reports' => 'int',
    'desired_error' => 'float',
  ),
  'fann_clear_scaling_params' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
  ),
  'fann_copy' => 
  array (
    0 => 'false|resource',
    'ann' => 'resource',
  ),
  'fann_create_from_file' => 
  array (
    0 => 'resource',
    'configuration_file' => 'string',
  ),
  'fann_create_shortcut' => 
  array (
    0 => 'false|resource',
    'num_layers' => 'int',
    'num_neurons1' => 'int',
    'num_neurons2' => 'int',
    '...args=' => 'int',
  ),
  'fann_create_shortcut_array' => 
  array (
    0 => 'false|resource',
    'num_layers' => 'int',
    'layers' => 'array<array-key, mixed>',
  ),
  'fann_create_sparse' => 
  array (
    0 => 'false|resource',
    'connection_rate' => 'float',
    'num_layers' => 'int',
    'num_neurons1' => 'int',
    'num_neurons2' => 'int',
    '...args=' => 'int',
  ),
  'fann_create_sparse_array' => 
  array (
    0 => 'false|resource',
    'connection_rate' => 'float',
    'num_layers' => 'int',
    'layers' => 'array<array-key, mixed>',
  ),
  'fann_create_standard' => 
  array (
    0 => 'false|resource',
    'num_layers' => 'int',
    'num_neurons1' => 'int',
    'num_neurons2' => 'int',
    '...args=' => 'int',
  ),
  'fann_create_standard_array' => 
  array (
    0 => 'false|resource',
    'num_layers' => 'int',
    'layers' => 'array<array-key, mixed>',
  ),
  'fann_create_train' => 
  array (
    0 => 'resource',
    'num_data' => 'int',
    'num_input' => 'int',
    'num_output' => 'int',
  ),
  'fann_create_train_from_callback' => 
  array (
    0 => 'resource',
    'num_data' => 'int',
    'num_input' => 'int',
    'num_output' => 'int',
    'user_function' => 'callable',
  ),
  'fann_descale_input' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'input_vector' => 'array<array-key, mixed>',
  ),
  'fann_descale_output' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'output_vector' => 'array<array-key, mixed>',
  ),
  'fann_descale_train' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'train_data' => 'resource',
  ),
  'fann_destroy' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
  ),
  'fann_destroy_train' => 
  array (
    0 => 'bool',
    'train_data' => 'resource',
  ),
  'fann_duplicate_train_data' => 
  array (
    0 => 'resource',
    'data' => 'resource',
  ),
  'fann_get_activation_function' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
    'layer' => 'int',
    'neuron' => 'int',
  ),
  'fann_get_activation_steepness' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
    'layer' => 'int',
    'neuron' => 'int',
  ),
  'fann_get_bias_array' => 
  array (
    0 => 'array<array-key, mixed>',
    'ann' => 'resource',
  ),
  'fann_get_bit_fail' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_bit_fail_limit' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_cascade_activation_functions' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'ann' => 'resource',
  ),
  'fann_get_cascade_activation_functions_count' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_cascade_activation_steepnesses' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'ann' => 'resource',
  ),
  'fann_get_cascade_activation_steepnesses_count' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_cascade_candidate_change_fraction' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_cascade_candidate_limit' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_cascade_candidate_stagnation_epochs' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_cascade_max_cand_epochs' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_cascade_max_out_epochs' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_cascade_min_cand_epochs' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_cascade_min_out_epochs' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_cascade_num_candidate_groups' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_cascade_num_candidates' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_cascade_output_change_fraction' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_cascade_output_stagnation_epochs' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_cascade_weight_multiplier' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_connection_array' => 
  array (
    0 => 'array<array-key, mixed>',
    'ann' => 'resource',
  ),
  'fann_get_connection_rate' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_errno' => 
  array (
    0 => 'false|int',
    'errdat' => 'resource',
  ),
  'fann_get_errstr' => 
  array (
    0 => 'false|string',
    'errdat' => 'resource',
  ),
  'fann_get_layer_array' => 
  array (
    0 => 'array<array-key, mixed>',
    'ann' => 'resource',
  ),
  'fann_get_learning_momentum' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_learning_rate' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_mse' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_network_type' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_num_input' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_num_layers' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_num_output' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_quickprop_decay' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_quickprop_mu' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_rprop_decrease_factor' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_rprop_delta_max' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_rprop_delta_min' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_rprop_delta_zero' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_rprop_increase_factor' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_sarprop_step_error_shift' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_sarprop_step_error_threshold_factor' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_sarprop_temperature' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_sarprop_weight_decay_shift' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
  ),
  'fann_get_total_connections' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_total_neurons' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_train_error_function' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_train_stop_function' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_get_training_algorithm' => 
  array (
    0 => 'false|int',
    'ann' => 'resource',
  ),
  'fann_init_weights' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'train_data' => 'resource',
  ),
  'fann_length_train_data' => 
  array (
    0 => 'false|int',
    'data' => 'resource',
  ),
  'fann_merge_train_data' => 
  array (
    0 => 'false|resource',
    'data1' => 'resource',
    'data2' => 'resource',
  ),
  'fann_num_input_train_data' => 
  array (
    0 => 'false|int',
    'data' => 'resource',
  ),
  'fann_num_output_train_data' => 
  array (
    0 => 'false|int',
    'data' => 'resource',
  ),
  'fann_print_error' => 
  array (
    0 => 'void',
    'errdat' => 'string',
  ),
  'fann_randomize_weights' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'min_weight' => 'float',
    'max_weight' => 'float',
  ),
  'fann_read_train_from_file' => 
  array (
    0 => 'resource',
    'filename' => 'string',
  ),
  'fann_reset_errno' => 
  array (
    0 => 'void',
    'errdat' => 'resource',
  ),
  'fann_reset_errstr' => 
  array (
    0 => 'void',
    'errdat' => 'resource',
  ),
  'fann_reset_mse' => 
  array (
    0 => 'bool',
    'ann' => 'string',
  ),
  'fann_run' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'ann' => 'resource',
    'input' => 'array<array-key, mixed>',
  ),
  'fann_save' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'configuration_file' => 'string',
  ),
  'fann_save_train' => 
  array (
    0 => 'bool',
    'data' => 'resource',
    'file_name' => 'string',
  ),
  'fann_scale_input' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'input_vector' => 'array<array-key, mixed>',
  ),
  'fann_scale_input_train_data' => 
  array (
    0 => 'bool',
    'train_data' => 'resource',
    'new_min' => 'float',
    'new_max' => 'float',
  ),
  'fann_scale_output' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'output_vector' => 'array<array-key, mixed>',
  ),
  'fann_scale_output_train_data' => 
  array (
    0 => 'bool',
    'train_data' => 'resource',
    'new_min' => 'float',
    'new_max' => 'float',
  ),
  'fann_scale_train' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'train_data' => 'resource',
  ),
  'fann_scale_train_data' => 
  array (
    0 => 'bool',
    'train_data' => 'resource',
    'new_min' => 'float',
    'new_max' => 'float',
  ),
  'fann_set_activation_function' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'activation_function' => 'int',
    'layer' => 'int',
    'neuron' => 'int',
  ),
  'fann_set_activation_function_hidden' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'activation_function' => 'int',
  ),
  'fann_set_activation_function_layer' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'activation_function' => 'int',
    'layer' => 'int',
  ),
  'fann_set_activation_function_output' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'activation_function' => 'int',
  ),
  'fann_set_activation_steepness' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'activation_steepness' => 'float',
    'layer' => 'int',
    'neuron' => 'int',
  ),
  'fann_set_activation_steepness_hidden' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'activation_steepness' => 'float',
  ),
  'fann_set_activation_steepness_layer' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'activation_steepness' => 'float',
    'layer' => 'int',
  ),
  'fann_set_activation_steepness_output' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'activation_steepness' => 'float',
  ),
  'fann_set_bit_fail_limit' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'bit_fail_limit' => 'float',
  ),
  'fann_set_callback' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'callback' => 'callable',
  ),
  'fann_set_cascade_activation_functions' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'cascade_activation_functions' => 'array<array-key, mixed>',
  ),
  'fann_set_cascade_activation_steepnesses' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'cascade_activation_steepnesses_count' => 'array<array-key, mixed>',
  ),
  'fann_set_cascade_candidate_change_fraction' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'cascade_candidate_change_fraction' => 'float',
  ),
  'fann_set_cascade_candidate_limit' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'cascade_candidate_limit' => 'float',
  ),
  'fann_set_cascade_candidate_stagnation_epochs' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'cascade_candidate_stagnation_epochs' => 'int',
  ),
  'fann_set_cascade_max_cand_epochs' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'cascade_max_cand_epochs' => 'int',
  ),
  'fann_set_cascade_max_out_epochs' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'cascade_max_out_epochs' => 'int',
  ),
  'fann_set_cascade_min_cand_epochs' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'cascade_min_cand_epochs' => 'int',
  ),
  'fann_set_cascade_min_out_epochs' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'cascade_min_out_epochs' => 'int',
  ),
  'fann_set_cascade_num_candidate_groups' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'cascade_num_candidate_groups' => 'int',
  ),
  'fann_set_cascade_output_change_fraction' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'cascade_output_change_fraction' => 'float',
  ),
  'fann_set_cascade_output_stagnation_epochs' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'cascade_output_stagnation_epochs' => 'int',
  ),
  'fann_set_cascade_weight_multiplier' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'cascade_weight_multiplier' => 'float',
  ),
  'fann_set_error_log' => 
  array (
    0 => 'void',
    'errdat' => 'resource',
    'log_file' => 'string',
  ),
  'fann_set_input_scaling_params' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'train_data' => 'resource',
    'new_input_min' => 'float',
    'new_input_max' => 'float',
  ),
  'fann_set_learning_momentum' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'learning_momentum' => 'float',
  ),
  'fann_set_learning_rate' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'learning_rate' => 'float',
  ),
  'fann_set_output_scaling_params' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'train_data' => 'resource',
    'new_output_min' => 'float',
    'new_output_max' => 'float',
  ),
  'fann_set_quickprop_decay' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'quickprop_decay' => 'float',
  ),
  'fann_set_quickprop_mu' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'quickprop_mu' => 'float',
  ),
  'fann_set_rprop_decrease_factor' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'rprop_decrease_factor' => 'float',
  ),
  'fann_set_rprop_delta_max' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'rprop_delta_max' => 'float',
  ),
  'fann_set_rprop_delta_min' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'rprop_delta_min' => 'float',
  ),
  'fann_set_rprop_delta_zero' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'rprop_delta_zero' => 'float',
  ),
  'fann_set_rprop_increase_factor' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'rprop_increase_factor' => 'float',
  ),
  'fann_set_sarprop_step_error_shift' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'sarprop_step_error_shift' => 'float',
  ),
  'fann_set_sarprop_step_error_threshold_factor' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'sarprop_step_error_threshold_factor' => 'float',
  ),
  'fann_set_sarprop_temperature' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'sarprop_temperature' => 'float',
  ),
  'fann_set_sarprop_weight_decay_shift' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'sarprop_weight_decay_shift' => 'float',
  ),
  'fann_set_scaling_params' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'train_data' => 'resource',
    'new_input_min' => 'float',
    'new_input_max' => 'float',
    'new_output_min' => 'float',
    'new_output_max' => 'float',
  ),
  'fann_set_train_error_function' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'error_function' => 'int',
  ),
  'fann_set_train_stop_function' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'stop_function' => 'int',
  ),
  'fann_set_training_algorithm' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'training_algorithm' => 'int',
  ),
  'fann_set_weight' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'from_neuron' => 'int',
    'to_neuron' => 'int',
    'weight' => 'float',
  ),
  'fann_set_weight_array' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'connections' => 'array<array-key, mixed>',
  ),
  'fann_shuffle_train_data' => 
  array (
    0 => 'bool',
    'train_data' => 'resource',
  ),
  'fann_subset_train_data' => 
  array (
    0 => 'resource',
    'data' => 'resource',
    'pos' => 'int',
    'length' => 'int',
  ),
  'fann_test' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'input' => 'array<array-key, mixed>',
    'desired_output' => 'array<array-key, mixed>',
  ),
  'fann_test_data' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
    'data' => 'resource',
  ),
  'fann_train' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'input' => 'array<array-key, mixed>',
    'desired_output' => 'array<array-key, mixed>',
  ),
  'fann_train_epoch' => 
  array (
    0 => 'false|float',
    'ann' => 'resource',
    'data' => 'resource',
  ),
  'fann_train_on_data' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'data' => 'resource',
    'max_epochs' => 'int',
    'epochs_between_reports' => 'int',
    'desired_error' => 'float',
  ),
  'fann_train_on_file' => 
  array (
    0 => 'bool',
    'ann' => 'resource',
    'filename' => 'string',
    'max_epochs' => 'int',
    'epochs_between_reports' => 'int',
    'desired_error' => 'float',
  ),
  'fannconnection::__construct' => 
  array (
    0 => 'void',
    'from_neuron' => 'int',
    'to_neuron' => 'int',
    'weight' => 'float',
  ),
  'fannconnection::getfromneuron' => 
  array (
    0 => 'int',
  ),
  'fannconnection::gettoneuron' => 
  array (
    0 => 'int',
  ),
  'fannconnection::getweight' => 
  array (
    0 => 'void',
  ),
  'fannconnection::setweight' => 
  array (
    0 => 'bool',
    'weight' => 'float',
  ),
  'fastcgi_finish_request' => 
  array (
    0 => 'bool',
  ),
  'fbsql_affected_rows' => 
  array (
    0 => 'int',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_autocommit' => 
  array (
    0 => 'bool',
    'link_identifier' => 'resource',
    'onoff=' => 'bool',
  ),
  'fbsql_blob_size' => 
  array (
    0 => 'int',
    'blob_handle' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_change_user' => 
  array (
    0 => 'bool',
    'user' => 'string',
    'password' => 'string',
    'database=' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_clob_size' => 
  array (
    0 => 'int',
    'clob_handle' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_close' => 
  array (
    0 => 'bool',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_commit' => 
  array (
    0 => 'bool',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_connect' => 
  array (
    0 => 'resource',
    'hostname=' => 'string',
    'username=' => 'string',
    'password=' => 'string',
  ),
  'fbsql_create_blob' => 
  array (
    0 => 'string',
    'blob_data' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_create_clob' => 
  array (
    0 => 'string',
    'clob_data' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_create_db' => 
  array (
    0 => 'bool',
    'database_name' => 'string',
    'link_identifier=' => 'null|resource',
    'database_options=' => 'string',
  ),
  'fbsql_data_seek' => 
  array (
    0 => 'bool',
    'result' => 'resource',
    'row_number' => 'int',
  ),
  'fbsql_database' => 
  array (
    0 => 'string',
    'link_identifier' => 'resource',
    'database=' => 'string',
  ),
  'fbsql_database_password' => 
  array (
    0 => 'string',
    'link_identifier' => 'resource',
    'database_password=' => 'string',
  ),
  'fbsql_db_query' => 
  array (
    0 => 'resource',
    'database' => 'string',
    'query' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_db_status' => 
  array (
    0 => 'int',
    'database_name' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_drop_db' => 
  array (
    0 => 'bool',
    'database_name' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_errno' => 
  array (
    0 => 'int',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_error' => 
  array (
    0 => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_fetch_array' => 
  array (
    0 => 'array<array-key, mixed>',
    'result' => 'resource',
    'result_type=' => 'int',
  ),
  'fbsql_fetch_assoc' => 
  array (
    0 => 'array<array-key, mixed>',
    'result' => 'resource',
  ),
  'fbsql_fetch_field' => 
  array (
    0 => 'object',
    'result' => 'resource',
    'field_offset=' => 'int',
  ),
  'fbsql_fetch_lengths' => 
  array (
    0 => 'array<array-key, mixed>',
    'result' => 'resource',
  ),
  'fbsql_fetch_object' => 
  array (
    0 => 'object',
    'result' => 'resource',
  ),
  'fbsql_fetch_row' => 
  array (
    0 => 'array<array-key, mixed>',
    'result' => 'resource',
  ),
  'fbsql_field_flags' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'field_offset=' => 'int',
  ),
  'fbsql_field_len' => 
  array (
    0 => 'int',
    'result' => 'resource',
    'field_offset=' => 'int',
  ),
  'fbsql_field_name' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'field_index=' => 'int',
  ),
  'fbsql_field_seek' => 
  array (
    0 => 'bool',
    'result' => 'resource',
    'field_offset=' => 'int',
  ),
  'fbsql_field_table' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'field_offset=' => 'int',
  ),
  'fbsql_field_type' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'field_offset=' => 'int',
  ),
  'fbsql_free_result' => 
  array (
    0 => 'bool',
    'result' => 'resource',
  ),
  'fbsql_get_autostart_info' => 
  array (
    0 => 'array<array-key, mixed>',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_hostname' => 
  array (
    0 => 'string',
    'link_identifier' => 'resource',
    'host_name=' => 'string',
  ),
  'fbsql_insert_id' => 
  array (
    0 => 'int',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_list_dbs' => 
  array (
    0 => 'resource',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_list_fields' => 
  array (
    0 => 'resource',
    'database_name' => 'string',
    'table_name' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_list_tables' => 
  array (
    0 => 'resource',
    'database' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_next_result' => 
  array (
    0 => 'bool',
    'result' => 'resource',
  ),
  'fbsql_num_fields' => 
  array (
    0 => 'int',
    'result' => 'resource',
  ),
  'fbsql_num_rows' => 
  array (
    0 => 'int',
    'result' => 'resource',
  ),
  'fbsql_password' => 
  array (
    0 => 'string',
    'link_identifier' => 'resource',
    'password=' => 'string',
  ),
  'fbsql_pconnect' => 
  array (
    0 => 'resource',
    'hostname=' => 'string',
    'username=' => 'string',
    'password=' => 'string',
  ),
  'fbsql_query' => 
  array (
    0 => 'resource',
    'query' => 'string',
    'link_identifier=' => 'null|resource',
    'batch_size=' => 'int',
  ),
  'fbsql_read_blob' => 
  array (
    0 => 'string',
    'blob_handle' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_read_clob' => 
  array (
    0 => 'string',
    'clob_handle' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_result' => 
  array (
    0 => 'mixed',
    'result' => 'resource',
    'row=' => 'int',
    'field=' => 'mixed',
  ),
  'fbsql_rollback' => 
  array (
    0 => 'bool',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_rows_fetched' => 
  array (
    0 => 'int',
    'result' => 'resource',
  ),
  'fbsql_select_db' => 
  array (
    0 => 'bool',
    'database_name=' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_set_characterset' => 
  array (
    0 => 'void',
    'link_identifier' => 'resource',
    'characterset' => 'int',
    'in_out_both=' => 'int',
  ),
  'fbsql_set_lob_mode' => 
  array (
    0 => 'bool',
    'result' => 'resource',
    'lob_mode' => 'int',
  ),
  'fbsql_set_password' => 
  array (
    0 => 'bool',
    'link_identifier' => 'resource',
    'user' => 'string',
    'password' => 'string',
    'old_password' => 'string',
  ),
  'fbsql_set_transaction' => 
  array (
    0 => 'void',
    'link_identifier' => 'resource',
    'locking' => 'int',
    'isolation' => 'int',
  ),
  'fbsql_start_db' => 
  array (
    0 => 'bool',
    'database_name' => 'string',
    'link_identifier=' => 'null|resource',
    'database_options=' => 'string',
  ),
  'fbsql_stop_db' => 
  array (
    0 => 'bool',
    'database_name' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'fbsql_table_name' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'index' => 'int',
  ),
  'fbsql_username' => 
  array (
    0 => 'string',
    'link_identifier' => 'resource',
    'username=' => 'string',
  ),
  'fbsql_warnings' => 
  array (
    0 => 'bool',
    'onoff=' => 'bool',
  ),
  'fclose' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
  ),
  'fdf_add_doc_javascript' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'script_name' => 'string',
    'script_code' => 'string',
  ),
  'fdf_add_template' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'newpage' => 'int',
    'filename' => 'string',
    'template' => 'string',
    'rename' => 'int',
  ),
  'fdf_close' => 
  array (
    0 => 'void',
    'fdf_document' => 'resource',
  ),
  'fdf_create' => 
  array (
    0 => 'resource',
  ),
  'fdf_enum_values' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'function' => 'callable',
    'userdata=' => 'mixed',
  ),
  'fdf_errno' => 
  array (
    0 => 'int',
  ),
  'fdf_error' => 
  array (
    0 => 'string',
    'error_code=' => 'int',
  ),
  'fdf_get_ap' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'field' => 'string',
    'face' => 'int',
    'filename' => 'string',
  ),
  'fdf_get_attachment' => 
  array (
    0 => 'array<array-key, mixed>',
    'fdf_document' => 'resource',
    'fieldname' => 'string',
    'savepath' => 'string',
  ),
  'fdf_get_encoding' => 
  array (
    0 => 'string',
    'fdf_document' => 'resource',
  ),
  'fdf_get_file' => 
  array (
    0 => 'string',
    'fdf_document' => 'resource',
  ),
  'fdf_get_flags' => 
  array (
    0 => 'int',
    'fdf_document' => 'resource',
    'fieldname' => 'string',
    'whichflags' => 'int',
  ),
  'fdf_get_opt' => 
  array (
    0 => 'mixed',
    'fdf_document' => 'resource',
    'fieldname' => 'string',
    'element=' => 'int',
  ),
  'fdf_get_status' => 
  array (
    0 => 'string',
    'fdf_document' => 'resource',
  ),
  'fdf_get_value' => 
  array (
    0 => 'mixed',
    'fdf_document' => 'resource',
    'fieldname' => 'string',
    'which=' => 'int',
  ),
  'fdf_get_version' => 
  array (
    0 => 'string',
    'fdf_document=' => 'resource',
  ),
  'fdf_header' => 
  array (
    0 => 'void',
  ),
  'fdf_next_field_name' => 
  array (
    0 => 'string',
    'fdf_document' => 'resource',
    'fieldname=' => 'string',
  ),
  'fdf_open' => 
  array (
    0 => 'false|resource',
    'filename' => 'string',
  ),
  'fdf_open_string' => 
  array (
    0 => 'resource',
    'fdf_data' => 'string',
  ),
  'fdf_remove_item' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'fieldname' => 'string',
    'item' => 'int',
  ),
  'fdf_save' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'filename=' => 'string',
  ),
  'fdf_save_string' => 
  array (
    0 => 'string',
    'fdf_document' => 'resource',
  ),
  'fdf_set_ap' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'field_name' => 'string',
    'face' => 'int',
    'filename' => 'string',
    'page_number' => 'int',
  ),
  'fdf_set_encoding' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'encoding' => 'string',
  ),
  'fdf_set_file' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'url' => 'string',
    'target_frame=' => 'string',
  ),
  'fdf_set_flags' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'fieldname' => 'string',
    'whichflags' => 'int',
    'newflags' => 'int',
  ),
  'fdf_set_javascript_action' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'fieldname' => 'string',
    'trigger' => 'int',
    'script' => 'string',
  ),
  'fdf_set_on_import_javascript' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'script' => 'string',
    'before_data_import' => 'bool',
  ),
  'fdf_set_opt' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'fieldname' => 'string',
    'element' => 'int',
    'string1' => 'string',
    'string2' => 'string',
  ),
  'fdf_set_status' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'status' => 'string',
  ),
  'fdf_set_submit_form_action' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'fieldname' => 'string',
    'trigger' => 'int',
    'script' => 'string',
    'flags' => 'int',
  ),
  'fdf_set_target_frame' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'frame_name' => 'string',
  ),
  'fdf_set_value' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'fieldname' => 'string',
    'value' => 'mixed',
    'isname=' => 'int',
  ),
  'fdf_set_version' => 
  array (
    0 => 'bool',
    'fdf_document' => 'resource',
    'version' => 'string',
  ),
  'fdiv' => 
  array (
    0 => 'float',
    'num1' => 'float',
    'num2' => 'float',
  ),
  'feof' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
  ),
  'ffi::addr' => 
  array (
    0 => 'FFI\\CData',
    '&ptr' => 'FFI\\CData',
  ),
  'ffi::alignof' => 
  array (
    0 => 'int',
    '&ptr' => 'FFI\\CData|FFI\\CType',
  ),
  'ffi::arraytype' => 
  array (
    0 => 'FFI\\CType',
    'type' => 'FFI\\CType',
    'dimensions' => 'array<array-key, mixed>',
  ),
  'ffi::cast' => 
  array (
    0 => 'FFI\\CData|null',
    'type' => 'FFI\\CType|string',
    '&ptr' => 'mixed',
  ),
  'ffi::cdef' => 
  array (
    0 => 'FFI',
    'code=' => 'string',
    'lib=' => 'null|string',
  ),
  'ffi::free' => 
  array (
    0 => 'void',
    '&ptr' => 'FFI\\CData',
  ),
  'ffi::isnull' => 
  array (
    0 => 'bool',
    '&ptr' => 'FFI\\CData',
  ),
  'ffi::load' => 
  array (
    0 => 'FFI|null',
    'filename' => 'string',
  ),
  'ffi::memcmp' => 
  array (
    0 => 'int',
    '&ptr1' => 'mixed',
    '&ptr2' => 'mixed',
    'size' => 'int',
  ),
  'ffi::memcpy' => 
  array (
    0 => 'void',
    '&to' => 'FFI\\CData',
    '&from' => 'mixed',
    'size' => 'int',
  ),
  'ffi::memset' => 
  array (
    0 => 'void',
    '&ptr' => 'FFI\\CData',
    'value' => 'int',
    'size' => 'int',
  ),
  'ffi::new' => 
  array (
    0 => 'FFI\\CData|null',
    'type' => 'FFI\\CType|string',
    'owned=' => 'bool',
    'persistent=' => 'bool',
  ),
  'ffi::scope' => 
  array (
    0 => 'FFI',
    'name' => 'string',
  ),
  'ffi::sizeof' => 
  array (
    0 => 'int',
    '&ptr' => 'FFI\\CData|FFI\\CType',
  ),
  'ffi::string' => 
  array (
    0 => 'string',
    '&ptr' => 'FFI\\CData',
    'size=' => 'int|null',
  ),
  'ffi::type' => 
  array (
    0 => 'FFI\\CType|null',
    'type' => 'string',
  ),
  'ffi::typeof' => 
  array (
    0 => 'FFI\\CType',
    '&ptr' => 'FFI\\CData',
  ),
  'ffi\\ctype::getname' => 
  array (
    0 => 'string',
  ),
  'ffi\\exception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'ffi\\exception::__tostring' => 
  array (
    0 => 'string',
  ),
  'ffi\\exception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'ffi\\exception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'ffi\\exception::getfile' => 
  array (
    0 => 'string',
  ),
  'ffi\\exception::getline' => 
  array (
    0 => 'int',
  ),
  'ffi\\exception::getmessage' => 
  array (
    0 => 'string',
  ),
  'ffi\\exception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'ffi\\exception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ffi\\exception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'ffi\\parserexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'ffi\\parserexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'ffi\\parserexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'ffi\\parserexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'ffi\\parserexception::getfile' => 
  array (
    0 => 'string',
  ),
  'ffi\\parserexception::getline' => 
  array (
    0 => 'int',
  ),
  'ffi\\parserexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'ffi\\parserexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'ffi\\parserexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ffi\\parserexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'fflush' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
  ),
  'ffmpeg_animated_gif::__construct' => 
  array (
    0 => 'void',
    'output_file_path' => 'string',
    'width' => 'int',
    'height' => 'int',
    'frame_rate' => 'int',
    'loop_count=' => 'int',
  ),
  'ffmpeg_animated_gif::addframe' => 
  array (
    0 => 'mixed',
    'frame_to_add' => 'ffmpeg_frame',
  ),
  'ffmpeg_frame::__construct' => 
  array (
    0 => 'void',
    'gd_image' => 'resource',
  ),
  'ffmpeg_frame::crop' => 
  array (
    0 => 'mixed',
    'crop_top' => 'int',
    'crop_bottom=' => 'int',
    'crop_left=' => 'int',
    'crop_right=' => 'int',
  ),
  'ffmpeg_frame::getheight' => 
  array (
    0 => 'int',
  ),
  'ffmpeg_frame::getpresentationtimestamp' => 
  array (
    0 => 'int',
  ),
  'ffmpeg_frame::getpts' => 
  array (
    0 => 'int',
  ),
  'ffmpeg_frame::getwidth' => 
  array (
    0 => 'int',
  ),
  'ffmpeg_frame::resize' => 
  array (
    0 => 'mixed',
    'width' => 'int',
    'height' => 'int',
    'crop_top=' => 'int',
    'crop_bottom=' => 'int',
    'crop_left=' => 'int',
    'crop_right=' => 'int',
  ),
  'ffmpeg_frame::togdimage' => 
  array (
    0 => 'resource',
  ),
  'ffmpeg_movie::__construct' => 
  array (
    0 => 'void',
    'path_to_media' => 'string',
    'persistent' => 'bool',
  ),
  'ffmpeg_movie::getartist' => 
  array (
    0 => 'string',
  ),
  'ffmpeg_movie::getaudiobitrate' => 
  array (
    0 => 'int',
  ),
  'ffmpeg_movie::getaudiochannels' => 
  array (
    0 => 'int',
  ),
  'ffmpeg_movie::getaudiocodec' => 
  array (
    0 => 'string',
  ),
  'ffmpeg_movie::getaudiosamplerate' => 
  array (
    0 => 'int',
  ),
  'ffmpeg_movie::getauthor' => 
  array (
    0 => 'string',
  ),
  'ffmpeg_movie::getbitrate' => 
  array (
    0 => 'int',
  ),
  'ffmpeg_movie::getcomment' => 
  array (
    0 => 'string',
  ),
  'ffmpeg_movie::getcopyright' => 
  array (
    0 => 'string',
  ),
  'ffmpeg_movie::getduration' => 
  array (
    0 => 'int',
  ),
  'ffmpeg_movie::getfilename' => 
  array (
    0 => 'string',
  ),
  'ffmpeg_movie::getframe' => 
  array (
    0 => 'false|ffmpeg_frame',
    'framenumber' => 'int',
  ),
  'ffmpeg_movie::getframecount' => 
  array (
    0 => 'int',
  ),
  'ffmpeg_movie::getframeheight' => 
  array (
    0 => 'int',
  ),
  'ffmpeg_movie::getframenumber' => 
  array (
    0 => 'int',
  ),
  'ffmpeg_movie::getframerate' => 
  array (
    0 => 'int',
  ),
  'ffmpeg_movie::getframewidth' => 
  array (
    0 => 'int',
  ),
  'ffmpeg_movie::getgenre' => 
  array (
    0 => 'string',
  ),
  'ffmpeg_movie::getnextkeyframe' => 
  array (
    0 => 'false|ffmpeg_frame',
  ),
  'ffmpeg_movie::getpixelformat' => 
  array (
    0 => 'mixed',
  ),
  'ffmpeg_movie::gettitle' => 
  array (
    0 => 'string',
  ),
  'ffmpeg_movie::gettracknumber' => 
  array (
    0 => 'int|string',
  ),
  'ffmpeg_movie::getvideobitrate' => 
  array (
    0 => 'int',
  ),
  'ffmpeg_movie::getvideocodec' => 
  array (
    0 => 'string',
  ),
  'ffmpeg_movie::getyear' => 
  array (
    0 => 'int|string',
  ),
  'ffmpeg_movie::hasaudio' => 
  array (
    0 => 'bool',
  ),
  'ffmpeg_movie::hasvideo' => 
  array (
    0 => 'bool',
  ),
  'fgetc' => 
  array (
    0 => 'false|string',
    'stream' => 'resource',
  ),
  'fgetcsv' => 
  array (
    0 => 'array{0?: null|string, ...<int<0, max>, string>}|false',
    'stream' => 'resource',
    'length=' => 'int|null',
    'separator=' => 'string',
    'enclosure=' => 'string',
    'escape=' => 'string',
  ),
  'fgets' => 
  array (
    0 => 'false|string',
    'stream' => 'resource',
    'length=' => 'int|null',
  ),
  'file' => 
  array (
    0 => 'false|list<string>',
    'filename' => 'string',
    'flags=' => 'int',
    'context=' => 'resource',
  ),
  'file_exists' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'file_get_contents' => 
  array (
    0 => 'false|string',
    'filename' => 'string',
    'use_include_path=' => 'bool',
    'context=' => 'null|resource',
    'offset=' => 'int',
    'length=' => 'int|null',
  ),
  'file_put_contents' => 
  array (
    0 => 'false|int<0, max>',
    'filename' => 'string',
    'data' => 'array<array-key, string>|resource|string',
    'flags=' => 'int',
    'context=' => 'resource',
  ),
  'fileatime' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
  ),
  'filectime' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
  ),
  'filegroup' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
  ),
  'fileinode' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
  ),
  'filemtime' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
  ),
  'fileowner' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
  ),
  'fileperms' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
  ),
  'filepro' => 
  array (
    0 => 'bool',
    'directory' => 'string',
  ),
  'filepro_fieldcount' => 
  array (
    0 => 'int',
  ),
  'filepro_fieldname' => 
  array (
    0 => 'string',
    'field_number' => 'int',
  ),
  'filepro_fieldtype' => 
  array (
    0 => 'string',
    'field_number' => 'int',
  ),
  'filepro_fieldwidth' => 
  array (
    0 => 'int',
    'field_number' => 'int',
  ),
  'filepro_retrieve' => 
  array (
    0 => 'string',
    'row_number' => 'int',
    'field_number' => 'int',
  ),
  'filepro_rowcount' => 
  array (
    0 => 'int',
  ),
  'filesize' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
  ),
  'filesystemiterator::__construct' => 
  array (
    0 => 'void',
    'directory' => 'string',
    'flags=' => 'int',
  ),
  'filesystemiterator::__debuginfo' => 
  array (
    0 => 'mixed',
  ),
  'filesystemiterator::__tostring' => 
  array (
    0 => 'string',
  ),
  'filesystemiterator::_bad_state_ex' => 
  array (
    0 => 'mixed',
  ),
  'filesystemiterator::current' => 
  array (
    0 => 'FilesystemIterator|SplFileInfo|string',
  ),
  'filesystemiterator::getatime' => 
  array (
    0 => 'int',
  ),
  'filesystemiterator::getbasename' => 
  array (
    0 => 'string',
    'suffix=' => 'string',
  ),
  'filesystemiterator::getctime' => 
  array (
    0 => 'int',
  ),
  'filesystemiterator::getextension' => 
  array (
    0 => 'string',
  ),
  'filesystemiterator::getfileinfo' => 
  array (
    0 => 'SplFileInfo',
    'class=' => 'class-string|null',
  ),
  'filesystemiterator::getfilename' => 
  array (
    0 => 'string',
  ),
  'filesystemiterator::getflags' => 
  array (
    0 => 'int',
  ),
  'filesystemiterator::getgroup' => 
  array (
    0 => 'int',
  ),
  'filesystemiterator::getinode' => 
  array (
    0 => 'int',
  ),
  'filesystemiterator::getlinktarget' => 
  array (
    0 => 'string',
  ),
  'filesystemiterator::getmtime' => 
  array (
    0 => 'int',
  ),
  'filesystemiterator::getowner' => 
  array (
    0 => 'int',
  ),
  'filesystemiterator::getpath' => 
  array (
    0 => 'string',
  ),
  'filesystemiterator::getpathinfo' => 
  array (
    0 => 'SplFileInfo|null',
    'class=' => 'class-string|null',
  ),
  'filesystemiterator::getpathname' => 
  array (
    0 => 'string',
  ),
  'filesystemiterator::getperms' => 
  array (
    0 => 'int',
  ),
  'filesystemiterator::getrealpath' => 
  array (
    0 => 'non-falsy-string',
  ),
  'filesystemiterator::getsize' => 
  array (
    0 => 'int',
  ),
  'filesystemiterator::gettype' => 
  array (
    0 => 'string',
  ),
  'filesystemiterator::isdir' => 
  array (
    0 => 'bool',
  ),
  'filesystemiterator::isdot' => 
  array (
    0 => 'bool',
  ),
  'filesystemiterator::isexecutable' => 
  array (
    0 => 'bool',
  ),
  'filesystemiterator::isfile' => 
  array (
    0 => 'bool',
  ),
  'filesystemiterator::islink' => 
  array (
    0 => 'bool',
  ),
  'filesystemiterator::isreadable' => 
  array (
    0 => 'bool',
  ),
  'filesystemiterator::iswritable' => 
  array (
    0 => 'bool',
  ),
  'filesystemiterator::key' => 
  array (
    0 => 'string',
  ),
  'filesystemiterator::next' => 
  array (
    0 => 'void',
  ),
  'filesystemiterator::openfile' => 
  array (
    0 => 'SplFileObject',
    'mode=' => 'string',
    'useIncludePath=' => 'bool',
    'context=' => 'null|resource',
  ),
  'filesystemiterator::rewind' => 
  array (
    0 => 'void',
  ),
  'filesystemiterator::seek' => 
  array (
    0 => 'void',
    'offset' => 'int',
  ),
  'filesystemiterator::setfileclass' => 
  array (
    0 => 'void',
    'class=' => 'class-string',
  ),
  'filesystemiterator::setflags' => 
  array (
    0 => 'void',
    'flags' => 'int',
  ),
  'filesystemiterator::setinfoclass' => 
  array (
    0 => 'void',
    'class=' => 'class-string',
  ),
  'filesystemiterator::valid' => 
  array (
    0 => 'bool',
  ),
  'filetype' => 
  array (
    0 => 'false|string',
    'filename' => 'string',
  ),
  'filter_has_var' => 
  array (
    0 => 'bool',
    'input_type' => '0|1|2|4|5',
    'var_name' => 'string',
  ),
  'filter_id' => 
  array (
    0 => 'false|int',
    'name' => 'string',
  ),
  'filter_input' => 
  array (
    0 => 'false|mixed|null',
    'type' => '0|1|2|4|5',
    'var_name' => 'string',
    'filter=' => 'int',
    'options=' => 'array<array-key, mixed>|int',
  ),
  'filter_input_array' => 
  array (
    0 => 'array<array-key, mixed>|false|null',
    'type' => '0|1|2|4|5',
    'options=' => 'array<array-key, mixed>|int',
    'add_empty=' => 'bool',
  ),
  'filter_list' => 
  array (
    0 => 'non-empty-list<non-falsy-string>',
  ),
  'filter_var' => 
  array (
    0 => 'false|mixed',
    'value' => 'mixed',
    'filter=' => 'int',
    'options=' => 'array<array-key, mixed>|int',
  ),
  'filter_var_array' => 
  array (
    0 => 'array<array-key, mixed>|false|null',
    'array' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>|int',
    'add_empty=' => 'bool',
  ),
  'filteriterator::__construct' => 
  array (
    0 => 'void',
    'iterator' => 'Iterator',
  ),
  'filteriterator::accept' => 
  array (
    0 => 'bool',
  ),
  'filteriterator::current' => 
  array (
    0 => 'mixed',
  ),
  'filteriterator::getinneriterator' => 
  array (
    0 => 'Iterator',
  ),
  'filteriterator::key' => 
  array (
    0 => 'mixed',
  ),
  'filteriterator::next' => 
  array (
    0 => 'void',
  ),
  'filteriterator::rewind' => 
  array (
    0 => 'void',
  ),
  'filteriterator::valid' => 
  array (
    0 => 'bool',
  ),
  'finfo::__construct' => 
  array (
    0 => 'void',
    'flags=' => 'int',
    'magic_database=' => 'null|string',
  ),
  'finfo::buffer' => 
  array (
    0 => 'false|string',
    'string' => 'string',
    'flags=' => 'int',
    'context=' => 'null|resource',
  ),
  'finfo::file' => 
  array (
    0 => 'false|string',
    'filename' => 'string',
    'flags=' => 'int',
    'context=' => 'null|resource',
  ),
  'finfo::set_flags' => 
  array (
    0 => 'bool',
    'flags' => 'int',
  ),
  'finfo_buffer' => 
  array (
    0 => 'false|string',
    'finfo' => 'resource',
    'string' => 'string',
    'flags=' => 'int',
    'context=' => 'resource',
  ),
  'finfo_close' => 
  array (
    0 => 'bool',
    'finfo' => 'resource',
  ),
  'finfo_file' => 
  array (
    0 => 'false|string',
    'finfo' => 'resource',
    'filename' => 'string',
    'flags=' => 'int',
    'context=' => 'resource',
  ),
  'finfo_open' => 
  array (
    0 => 'false|resource',
    'flags=' => 'int',
    'magic_database=' => 'null|string',
  ),
  'finfo_set_flags' => 
  array (
    0 => 'bool',
    'finfo' => 'resource',
    'flags' => 'int',
  ),
  'floatval' => 
  array (
    0 => 'float',
    'value' => 'mixed',
  ),
  'flock' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
    'operation' => 'int',
    '&w_would_block=' => 'int',
  ),
  'floor' => 
  array (
    0 => 'float',
    'num' => 'float|int',
  ),
  'flush' => 
  array (
    0 => 'void',
  ),
  'fmod' => 
  array (
    0 => 'float',
    'num1' => 'float',
    'num2' => 'float',
  ),
  'fnmatch' => 
  array (
    0 => 'bool',
    'pattern' => 'string',
    'filename' => 'string',
    'flags=' => 'int',
  ),
  'fopen' => 
  array (
    0 => 'false|resource',
    'filename' => 'string',
    'mode' => 'string',
    'use_include_path=' => 'bool',
    'context=' => 'null|resource',
  ),
  'forward_static_call' => 
  array (
    0 => 'false|mixed',
    'callback' => 'callable',
    '...args=' => 'mixed',
  ),
  'forward_static_call_array' => 
  array (
    0 => 'false|mixed',
    'callback' => 'callable',
    'args' => 'list<mixed>',
  ),
  'fpassthru' => 
  array (
    0 => 'int',
    'stream' => 'resource',
  ),
  'fpm_get_status' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'fprintf' => 
  array (
    0 => 'int',
    'stream' => 'resource',
    'format' => 'string',
    '...values=' => 'float|int|string',
  ),
  'fputcsv' => 
  array (
    0 => 'false|int',
    'stream' => 'resource',
    'fields' => 'array<array-key, Stringable|null|scalar>',
    'separator=' => 'string',
    'enclosure=' => 'string',
    'escape=' => 'string',
  ),
  'fputs' => 
  array (
    0 => 'false|int',
    'stream' => 'resource',
    'data' => 'string',
    'length=' => 'int|null',
  ),
  'fread' => 
  array (
    0 => 'false|string',
    'stream' => 'resource',
    'length' => 'int',
  ),
  'frenchtojd' => 
  array (
    0 => 'int',
    'month' => 'int',
    'day' => 'int',
    'year' => 'int',
  ),
  'fribidi_log2vis' => 
  array (
    0 => 'string',
    'string' => 'string',
    'direction' => 'string',
    'charset' => 'int',
  ),
  'fscanf' => 
  array (
    0 => 'list<mixed>|null',
    'stream' => 'resource',
    'format' => 'string',
    '&...vars=' => 'mixed',
  ),
  'fscanf\'1' => 
  array (
    0 => 'int',
    'stream' => 'resource',
    'format' => 'string',
    '&...w_vars=' => 'float|int|string',
  ),
  'fseek' => 
  array (
    0 => 'int',
    'stream' => 'resource',
    'offset' => 'int',
    'whence=' => 'int',
  ),
  'fsockopen' => 
  array (
    0 => 'false|resource',
    'hostname' => 'string',
    'port=' => 'int',
    '&w_error_code=' => 'int',
    '&w_error_message=' => 'string',
    'timeout=' => 'float|null',
  ),
  'fstat' => 
  array (
    0 => 'array{0: int, 10: int, 11: int, 12: int, 1: int, 2: int, 3: int, 4: int, 5: int, 6: int, 7: int, 8: int, 9: int, atime: int, blksize: int, blocks: int, ctime: int, dev: int, gid: int, ino: int, mode: int, mtime: int, nlink: int, rdev: int, size: int, uid: int}|false',
    'stream' => 'resource',
  ),
  'ftell' => 
  array (
    0 => 'false|int',
    'stream' => 'resource',
  ),
  'ftok' => 
  array (
    0 => 'int',
    'filename' => 'string',
    'project_id' => 'string',
  ),
  'ftp_alloc' => 
  array (
    0 => 'bool',
    'ftp' => 'resource',
    'size' => 'int',
    '&w_response=' => 'string',
  ),
  'ftp_append' => 
  array (
    0 => 'bool',
    'ftp' => 'resource',
    'remote_filename' => 'string',
    'local_filename' => 'string',
    'mode=' => 'int',
  ),
  'ftp_cdup' => 
  array (
    0 => 'bool',
    'ftp' => 'resource',
  ),
  'ftp_chdir' => 
  array (
    0 => 'bool',
    'ftp' => 'resource',
    'directory' => 'string',
  ),
  'ftp_chmod' => 
  array (
    0 => 'false|int',
    'ftp' => 'resource',
    'permissions' => 'int',
    'filename' => 'string',
  ),
  'ftp_close' => 
  array (
    0 => 'bool',
    'ftp' => 'resource',
  ),
  'ftp_connect' => 
  array (
    0 => 'false|resource',
    'hostname' => 'string',
    'port=' => 'int',
    'timeout=' => 'int',
  ),
  'ftp_delete' => 
  array (
    0 => 'bool',
    'ftp' => 'resource',
    'filename' => 'string',
  ),
  'ftp_exec' => 
  array (
    0 => 'bool',
    'ftp' => 'resource',
    'command' => 'string',
  ),
  'ftp_fget' => 
  array (
    0 => 'bool',
    'ftp' => 'resource',
    'stream' => 'resource',
    'remote_filename' => 'string',
    'mode=' => 'int',
    'offset=' => 'int',
  ),
  'ftp_fput' => 
  array (
    0 => 'bool',
    'ftp' => 'resource',
    'remote_filename' => 'string',
    'stream' => 'resource',
    'mode=' => 'int',
    'offset=' => 'int',
  ),
  'ftp_get' => 
  array (
    0 => 'bool',
    'ftp' => 'resource',
    'local_filename' => 'string',
    'remote_filename' => 'string',
    'mode=' => 'int',
    'offset=' => 'int',
  ),
  'ftp_get_option' => 
  array (
    0 => 'false|int',
    'ftp' => 'resource',
    'option' => 'int',
  ),
  'ftp_login' => 
  array (
    0 => 'bool',
    'ftp' => 'resource',
    'username' => 'string',
    'password' => 'string',
  ),
  'ftp_mdtm' => 
  array (
    0 => 'int',
    'ftp' => 'resource',
    'filename' => 'string',
  ),
  'ftp_mkdir' => 
  array (
    0 => 'false|string',
    'ftp' => 'resource',
    'directory' => 'string',
  ),
  'ftp_mlsd' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'ftp' => 'resource',
    'directory' => 'string',
  ),
  'ftp_nb_continue' => 
  array (
    0 => 'int',
    'ftp' => 'resource',
  ),
  'ftp_nb_fget' => 
  array (
    0 => 'int',
    'ftp' => 'resource',
    'stream' => 'resource',
    'remote_filename' => 'string',
    'mode=' => 'int',
    'offset=' => 'int',
  ),
  'ftp_nb_fput' => 
  array (
    0 => 'int',
    'ftp' => 'resource',
    'remote_filename' => 'string',
    'stream' => 'resource',
    'mode=' => 'int',
    'offset=' => 'int',
  ),
  'ftp_nb_get' => 
  array (
    0 => 'int',
    'ftp' => 'resource',
    'local_filename' => 'string',
    'remote_filename' => 'string',
    'mode=' => 'int',
    'offset=' => 'int',
  ),
  'ftp_nb_put' => 
  array (
    0 => 'int',
    'ftp' => 'resource',
    'remote_filename' => 'string',
    'local_filename' => 'string',
    'mode=' => 'int',
    'offset=' => 'int',
  ),
  'ftp_nlist' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'ftp' => 'resource',
    'directory' => 'string',
  ),
  'ftp_pasv' => 
  array (
    0 => 'bool',
    'ftp' => 'resource',
    'enable' => 'bool',
  ),
  'ftp_put' => 
  array (
    0 => 'bool',
    'ftp' => 'resource',
    'remote_filename' => 'string',
    'local_filename' => 'string',
    'mode=' => 'int',
    'offset=' => 'int',
  ),
  'ftp_pwd' => 
  array (
    0 => 'false|string',
    'ftp' => 'resource',
  ),
  'ftp_quit' => 
  array (
    0 => 'bool',
    'ftp' => 'resource',
  ),
  'ftp_raw' => 
  array (
    0 => 'array<array-key, mixed>|null',
    'ftp' => 'resource',
    'command' => 'string',
  ),
  'ftp_rawlist' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'ftp' => 'resource',
    'directory' => 'string',
    'recursive=' => 'bool',
  ),
  'ftp_rename' => 
  array (
    0 => 'bool',
    'ftp' => 'resource',
    'from' => 'string',
    'to' => 'string',
  ),
  'ftp_rmdir' => 
  array (
    0 => 'bool',
    'ftp' => 'resource',
    'directory' => 'string',
  ),
  'ftp_set_option' => 
  array (
    0 => 'bool',
    'ftp' => 'resource',
    'option' => 'int',
    'value' => 'mixed',
  ),
  'ftp_site' => 
  array (
    0 => 'bool',
    'ftp' => 'resource',
    'command' => 'string',
  ),
  'ftp_size' => 
  array (
    0 => 'int',
    'ftp' => 'resource',
    'filename' => 'string',
  ),
  'ftp_ssl_connect' => 
  array (
    0 => 'false|resource',
    'hostname' => 'string',
    'port=' => 'int',
    'timeout=' => 'int',
  ),
  'ftp_systype' => 
  array (
    0 => 'false|string',
    'ftp' => 'resource',
  ),
  'ftruncate' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
    'size' => 'int',
  ),
  'func_get_arg' => 
  array (
    0 => 'false|mixed',
    'position' => 'int',
  ),
  'func_get_args' => 
  array (
    0 => 'list<mixed>',
  ),
  'func_num_args' => 
  array (
    0 => 'int',
  ),
  'function_exists' => 
  array (
    0 => 'bool',
    'function' => 'string',
  ),
  'fwrite' => 
  array (
    0 => 'false|int',
    'stream' => 'resource',
    'data' => 'string',
    'length=' => 'int|null',
  ),
  'gc_collect_cycles' => 
  array (
    0 => 'int',
  ),
  'gc_disable' => 
  array (
    0 => 'void',
  ),
  'gc_enable' => 
  array (
    0 => 'void',
  ),
  'gc_enabled' => 
  array (
    0 => 'bool',
  ),
  'gc_mem_caches' => 
  array (
    0 => 'int',
  ),
  'gc_status' => 
  array (
    0 => 'array{collected: int, roots: int, runs: int, threshold: int}',
  ),
  'gd_info' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'gearman_bugreport' => 
  array (
    0 => 'mixed',
  ),
  'gearman_client_add_options' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'option' => 'mixed',
  ),
  'gearman_client_add_server' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'host' => 'mixed',
    'port' => 'mixed',
  ),
  'gearman_client_add_servers' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'servers' => 'mixed',
  ),
  'gearman_client_add_task' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'function_name' => 'mixed',
    'workload' => 'mixed',
    'context' => 'mixed',
    'unique' => 'mixed',
  ),
  'gearman_client_add_task_background' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'function_name' => 'mixed',
    'workload' => 'mixed',
    'context' => 'mixed',
    'unique' => 'mixed',
  ),
  'gearman_client_add_task_high' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'function_name' => 'mixed',
    'workload' => 'mixed',
    'context' => 'mixed',
    'unique' => 'mixed',
  ),
  'gearman_client_add_task_high_background' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'function_name' => 'mixed',
    'workload' => 'mixed',
    'context' => 'mixed',
    'unique' => 'mixed',
  ),
  'gearman_client_add_task_low' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'function_name' => 'mixed',
    'workload' => 'mixed',
    'context' => 'mixed',
    'unique' => 'mixed',
  ),
  'gearman_client_add_task_low_background' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'function_name' => 'mixed',
    'workload' => 'mixed',
    'context' => 'mixed',
    'unique' => 'mixed',
  ),
  'gearman_client_add_task_status' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'job_handle' => 'mixed',
    'context' => 'mixed',
  ),
  'gearman_client_clear_fn' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
  ),
  'gearman_client_clone' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
  ),
  'gearman_client_context' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
  ),
  'gearman_client_create' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
  ),
  'gearman_client_do' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'function_name' => 'mixed',
    'workload' => 'mixed',
    'unique' => 'mixed',
  ),
  'gearman_client_do_background' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'function_name' => 'mixed',
    'workload' => 'mixed',
    'unique' => 'mixed',
  ),
  'gearman_client_do_high' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'function_name' => 'mixed',
    'workload' => 'mixed',
    'unique' => 'mixed',
  ),
  'gearman_client_do_high_background' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'function_name' => 'mixed',
    'workload' => 'mixed',
    'unique' => 'mixed',
  ),
  'gearman_client_do_job_handle' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
  ),
  'gearman_client_do_low' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'function_name' => 'mixed',
    'workload' => 'mixed',
    'unique' => 'mixed',
  ),
  'gearman_client_do_low_background' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'function_name' => 'mixed',
    'workload' => 'mixed',
    'unique' => 'mixed',
  ),
  'gearman_client_do_normal' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'function_name' => 'string',
    'workload' => 'string',
    'unique' => 'string',
  ),
  'gearman_client_do_status' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
  ),
  'gearman_client_echo' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'workload' => 'mixed',
  ),
  'gearman_client_errno' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
  ),
  'gearman_client_error' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
  ),
  'gearman_client_job_status' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'job_handle' => 'mixed',
  ),
  'gearman_client_options' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
  ),
  'gearman_client_remove_options' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'option' => 'mixed',
  ),
  'gearman_client_return_code' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
  ),
  'gearman_client_run_tasks' => 
  array (
    0 => 'mixed',
    'data' => 'mixed',
  ),
  'gearman_client_set_complete_fn' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'callback' => 'mixed',
  ),
  'gearman_client_set_context' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'context' => 'mixed',
  ),
  'gearman_client_set_created_fn' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'callback' => 'mixed',
  ),
  'gearman_client_set_data_fn' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'callback' => 'mixed',
  ),
  'gearman_client_set_exception_fn' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'callback' => 'mixed',
  ),
  'gearman_client_set_fail_fn' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'callback' => 'mixed',
  ),
  'gearman_client_set_options' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'option' => 'mixed',
  ),
  'gearman_client_set_status_fn' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'callback' => 'mixed',
  ),
  'gearman_client_set_timeout' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'timeout' => 'mixed',
  ),
  'gearman_client_set_warning_fn' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'callback' => 'mixed',
  ),
  'gearman_client_set_workload_fn' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
    'callback' => 'mixed',
  ),
  'gearman_client_timeout' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
  ),
  'gearman_client_wait' => 
  array (
    0 => 'mixed',
    'client_object' => 'mixed',
  ),
  'gearman_job_function_name' => 
  array (
    0 => 'mixed',
    'job_object' => 'mixed',
  ),
  'gearman_job_handle' => 
  array (
    0 => 'string',
  ),
  'gearman_job_return_code' => 
  array (
    0 => 'mixed',
    'job_object' => 'mixed',
  ),
  'gearman_job_send_complete' => 
  array (
    0 => 'mixed',
    'job_object' => 'mixed',
    'result' => 'mixed',
  ),
  'gearman_job_send_data' => 
  array (
    0 => 'mixed',
    'job_object' => 'mixed',
    'data' => 'mixed',
  ),
  'gearman_job_send_exception' => 
  array (
    0 => 'mixed',
    'job_object' => 'mixed',
    'exception' => 'mixed',
  ),
  'gearman_job_send_fail' => 
  array (
    0 => 'mixed',
    'job_object' => 'mixed',
  ),
  'gearman_job_send_status' => 
  array (
    0 => 'mixed',
    'job_object' => 'mixed',
    'numerator' => 'mixed',
    'denominator' => 'mixed',
  ),
  'gearman_job_send_warning' => 
  array (
    0 => 'mixed',
    'job_object' => 'mixed',
    'warning' => 'mixed',
  ),
  'gearman_job_status' => 
  array (
    0 => 'array<array-key, mixed>',
    'job_handle' => 'string',
  ),
  'gearman_job_unique' => 
  array (
    0 => 'mixed',
    'job_object' => 'mixed',
  ),
  'gearman_job_workload' => 
  array (
    0 => 'mixed',
    'job_object' => 'mixed',
  ),
  'gearman_job_workload_size' => 
  array (
    0 => 'mixed',
    'job_object' => 'mixed',
  ),
  'gearman_task_data' => 
  array (
    0 => 'mixed',
    'task_object' => 'mixed',
  ),
  'gearman_task_data_size' => 
  array (
    0 => 'mixed',
    'task_object' => 'mixed',
  ),
  'gearman_task_denominator' => 
  array (
    0 => 'mixed',
    'task_object' => 'mixed',
  ),
  'gearman_task_function_name' => 
  array (
    0 => 'mixed',
    'task_object' => 'mixed',
  ),
  'gearman_task_is_known' => 
  array (
    0 => 'mixed',
    'task_object' => 'mixed',
  ),
  'gearman_task_is_running' => 
  array (
    0 => 'mixed',
    'task_object' => 'mixed',
  ),
  'gearman_task_job_handle' => 
  array (
    0 => 'mixed',
    'task_object' => 'mixed',
  ),
  'gearman_task_numerator' => 
  array (
    0 => 'mixed',
    'task_object' => 'mixed',
  ),
  'gearman_task_recv_data' => 
  array (
    0 => 'mixed',
    'task_object' => 'mixed',
    'data_len' => 'mixed',
  ),
  'gearman_task_return_code' => 
  array (
    0 => 'mixed',
    'task_object' => 'mixed',
  ),
  'gearman_task_send_workload' => 
  array (
    0 => 'mixed',
    'task_object' => 'mixed',
    'data' => 'mixed',
  ),
  'gearman_task_unique' => 
  array (
    0 => 'mixed',
    'task_object' => 'mixed',
  ),
  'gearman_verbose_name' => 
  array (
    0 => 'mixed',
    'verbose' => 'mixed',
  ),
  'gearman_version' => 
  array (
    0 => 'mixed',
  ),
  'gearman_worker_add_function' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
    'function_name' => 'mixed',
    'function' => 'mixed',
    'data' => 'mixed',
    'timeout' => 'mixed',
  ),
  'gearman_worker_add_options' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
    'option' => 'mixed',
  ),
  'gearman_worker_add_server' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
    'host' => 'mixed',
    'port' => 'mixed',
  ),
  'gearman_worker_add_servers' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
    'servers' => 'mixed',
  ),
  'gearman_worker_clone' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
  ),
  'gearman_worker_create' => 
  array (
    0 => 'mixed',
  ),
  'gearman_worker_echo' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
    'workload' => 'mixed',
  ),
  'gearman_worker_errno' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
  ),
  'gearman_worker_error' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
  ),
  'gearman_worker_grab_job' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
  ),
  'gearman_worker_options' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
  ),
  'gearman_worker_register' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
    'function_name' => 'mixed',
    'timeout' => 'mixed',
  ),
  'gearman_worker_remove_options' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
    'option' => 'mixed',
  ),
  'gearman_worker_return_code' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
  ),
  'gearman_worker_set_options' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
    'option' => 'mixed',
  ),
  'gearman_worker_set_timeout' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
    'timeout' => 'mixed',
  ),
  'gearman_worker_timeout' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
  ),
  'gearman_worker_unregister' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
    'function_name' => 'mixed',
  ),
  'gearman_worker_unregister_all' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
  ),
  'gearman_worker_wait' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
  ),
  'gearman_worker_work' => 
  array (
    0 => 'mixed',
    'worker_object' => 'mixed',
  ),
  'gearmanclient::__construct' => 
  array (
    0 => 'void',
  ),
  'gearmanclient::addoptions' => 
  array (
    0 => 'bool',
    'options' => 'int',
  ),
  'gearmanclient::addserver' => 
  array (
    0 => 'bool',
    'host=' => 'string',
    'port=' => 'int',
  ),
  'gearmanclient::addservers' => 
  array (
    0 => 'bool',
    'servers=' => 'string',
  ),
  'gearmanclient::addtask' => 
  array (
    0 => 'GearmanTask|false',
    'function_name' => 'string',
    'workload' => 'string',
    'context=' => 'mixed',
    'unique=' => 'string',
  ),
  'gearmanclient::addtaskbackground' => 
  array (
    0 => 'GearmanTask|false',
    'function_name' => 'string',
    'workload' => 'string',
    'context=' => 'mixed',
    'unique=' => 'string',
  ),
  'gearmanclient::addtaskhigh' => 
  array (
    0 => 'GearmanTask|false',
    'function_name' => 'string',
    'workload' => 'string',
    'context=' => 'mixed',
    'unique=' => 'string',
  ),
  'gearmanclient::addtaskhighbackground' => 
  array (
    0 => 'GearmanTask|false',
    'function_name' => 'string',
    'workload' => 'string',
    'context=' => 'mixed',
    'unique=' => 'string',
  ),
  'gearmanclient::addtasklow' => 
  array (
    0 => 'GearmanTask|false',
    'function_name' => 'string',
    'workload' => 'string',
    'context=' => 'mixed',
    'unique=' => 'string',
  ),
  'gearmanclient::addtasklowbackground' => 
  array (
    0 => 'GearmanTask|false',
    'function_name' => 'string',
    'workload' => 'string',
    'context=' => 'mixed',
    'unique=' => 'string',
  ),
  'gearmanclient::addtaskstatus' => 
  array (
    0 => 'GearmanTask',
    'job_handle' => 'string',
    'context=' => 'string',
  ),
  'gearmanclient::clearcallbacks' => 
  array (
    0 => 'bool',
  ),
  'gearmanclient::clone' => 
  array (
    0 => 'GearmanClient',
  ),
  'gearmanclient::context' => 
  array (
    0 => 'string',
  ),
  'gearmanclient::data' => 
  array (
    0 => 'string',
  ),
  'gearmanclient::do' => 
  array (
    0 => 'string',
    'function_name' => 'string',
    'workload' => 'string',
    'unique=' => 'string',
  ),
  'gearmanclient::dobackground' => 
  array (
    0 => 'string',
    'function_name' => 'string',
    'workload' => 'string',
    'unique=' => 'string',
  ),
  'gearmanclient::dohigh' => 
  array (
    0 => 'string',
    'function_name' => 'string',
    'workload' => 'string',
    'unique=' => 'string',
  ),
  'gearmanclient::dohighbackground' => 
  array (
    0 => 'string',
    'function_name' => 'string',
    'workload' => 'string',
    'unique=' => 'string',
  ),
  'gearmanclient::dojobhandle' => 
  array (
    0 => 'string',
  ),
  'gearmanclient::dolow' => 
  array (
    0 => 'string',
    'function_name' => 'string',
    'workload' => 'string',
    'unique=' => 'string',
  ),
  'gearmanclient::dolowbackground' => 
  array (
    0 => 'string',
    'function_name' => 'string',
    'workload' => 'string',
    'unique=' => 'string',
  ),
  'gearmanclient::donormal' => 
  array (
    0 => 'string',
    'function_name' => 'string',
    'workload' => 'string',
    'unique=' => 'string',
  ),
  'gearmanclient::dostatus' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'gearmanclient::echo' => 
  array (
    0 => 'bool',
    'workload' => 'string',
  ),
  'gearmanclient::error' => 
  array (
    0 => 'string',
  ),
  'gearmanclient::geterrno' => 
  array (
    0 => 'int',
  ),
  'gearmanclient::jobstatus' => 
  array (
    0 => 'array<array-key, mixed>',
    'job_handle' => 'string',
  ),
  'gearmanclient::options' => 
  array (
    0 => 'mixed',
  ),
  'gearmanclient::ping' => 
  array (
    0 => 'bool',
    'workload' => 'string',
  ),
  'gearmanclient::removeoptions' => 
  array (
    0 => 'bool',
    'options' => 'int',
  ),
  'gearmanclient::returncode' => 
  array (
    0 => 'int',
  ),
  'gearmanclient::runtasks' => 
  array (
    0 => 'bool',
  ),
  'gearmanclient::setclientcallback' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'gearmanclient::setcompletecallback' => 
  array (
    0 => 'bool',
    'callback' => 'callable',
  ),
  'gearmanclient::setcontext' => 
  array (
    0 => 'bool',
    'context' => 'string',
  ),
  'gearmanclient::setcreatedcallback' => 
  array (
    0 => 'bool',
    'callback' => 'string',
  ),
  'gearmanclient::setdata' => 
  array (
    0 => 'bool',
    'data' => 'string',
  ),
  'gearmanclient::setdatacallback' => 
  array (
    0 => 'bool',
    'callback' => 'callable',
  ),
  'gearmanclient::setexceptioncallback' => 
  array (
    0 => 'bool',
    'callback' => 'callable',
  ),
  'gearmanclient::setfailcallback' => 
  array (
    0 => 'bool',
    'callback' => 'callable',
  ),
  'gearmanclient::setoptions' => 
  array (
    0 => 'bool',
    'options' => 'int',
  ),
  'gearmanclient::setstatuscallback' => 
  array (
    0 => 'bool',
    'callback' => 'callable',
  ),
  'gearmanclient::settimeout' => 
  array (
    0 => 'bool',
    'timeout' => 'int',
  ),
  'gearmanclient::setwarningcallback' => 
  array (
    0 => 'bool',
    'callback' => 'callable',
  ),
  'gearmanclient::setworkloadcallback' => 
  array (
    0 => 'bool',
    'callback' => 'callable',
  ),
  'gearmanclient::timeout' => 
  array (
    0 => 'int',
  ),
  'gearmanclient::wait' => 
  array (
    0 => 'mixed',
  ),
  'gearmanjob::__construct' => 
  array (
    0 => 'void',
  ),
  'gearmanjob::complete' => 
  array (
    0 => 'bool',
    'result' => 'string',
  ),
  'gearmanjob::data' => 
  array (
    0 => 'bool',
    'data' => 'string',
  ),
  'gearmanjob::exception' => 
  array (
    0 => 'bool',
    'exception' => 'string',
  ),
  'gearmanjob::fail' => 
  array (
    0 => 'bool',
  ),
  'gearmanjob::functionname' => 
  array (
    0 => 'string',
  ),
  'gearmanjob::handle' => 
  array (
    0 => 'string',
  ),
  'gearmanjob::returncode' => 
  array (
    0 => 'int',
  ),
  'gearmanjob::sendcomplete' => 
  array (
    0 => 'bool',
    'result' => 'string',
  ),
  'gearmanjob::senddata' => 
  array (
    0 => 'bool',
    'data' => 'string',
  ),
  'gearmanjob::sendexception' => 
  array (
    0 => 'bool',
    'exception' => 'string',
  ),
  'gearmanjob::sendfail' => 
  array (
    0 => 'bool',
  ),
  'gearmanjob::sendstatus' => 
  array (
    0 => 'bool',
    'numerator' => 'int',
    'denominator' => 'int',
  ),
  'gearmanjob::sendwarning' => 
  array (
    0 => 'bool',
    'warning' => 'string',
  ),
  'gearmanjob::setreturn' => 
  array (
    0 => 'bool',
    'gearman_return_t' => 'string',
  ),
  'gearmanjob::status' => 
  array (
    0 => 'bool',
    'numerator' => 'int',
    'denominator' => 'int',
  ),
  'gearmanjob::unique' => 
  array (
    0 => 'string',
  ),
  'gearmanjob::warning' => 
  array (
    0 => 'bool',
    'warning' => 'string',
  ),
  'gearmanjob::workload' => 
  array (
    0 => 'string',
  ),
  'gearmanjob::workloadsize' => 
  array (
    0 => 'int',
  ),
  'gearmantask::__construct' => 
  array (
    0 => 'void',
  ),
  'gearmantask::create' => 
  array (
    0 => 'GearmanTask',
  ),
  'gearmantask::data' => 
  array (
    0 => 'false|string',
  ),
  'gearmantask::datasize' => 
  array (
    0 => 'false|int',
  ),
  'gearmantask::function' => 
  array (
    0 => 'string',
  ),
  'gearmantask::functionname' => 
  array (
    0 => 'string',
  ),
  'gearmantask::isknown' => 
  array (
    0 => 'bool',
  ),
  'gearmantask::isrunning' => 
  array (
    0 => 'bool',
  ),
  'gearmantask::jobhandle' => 
  array (
    0 => 'string',
  ),
  'gearmantask::recvdata' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'data_len' => 'int',
  ),
  'gearmantask::returncode' => 
  array (
    0 => 'int',
  ),
  'gearmantask::senddata' => 
  array (
    0 => 'int',
    'data' => 'string',
  ),
  'gearmantask::sendworkload' => 
  array (
    0 => 'false|int',
    'data' => 'string',
  ),
  'gearmantask::taskdenominator' => 
  array (
    0 => 'false|int',
  ),
  'gearmantask::tasknumerator' => 
  array (
    0 => 'false|int',
  ),
  'gearmantask::unique' => 
  array (
    0 => 'false|string',
  ),
  'gearmantask::uuid' => 
  array (
    0 => 'string',
  ),
  'gearmanworker::__construct' => 
  array (
    0 => 'void',
  ),
  'gearmanworker::addfunction' => 
  array (
    0 => 'bool',
    'function_name' => 'string',
    'function' => 'callable',
    'context=' => 'mixed',
    'timeout=' => 'int',
  ),
  'gearmanworker::addoptions' => 
  array (
    0 => 'bool',
    'option' => 'int',
  ),
  'gearmanworker::addserver' => 
  array (
    0 => 'bool',
    'host=' => 'string',
    'port=' => 'int',
  ),
  'gearmanworker::addservers' => 
  array (
    0 => 'bool',
    'servers' => 'string',
  ),
  'gearmanworker::clone' => 
  array (
    0 => 'void',
  ),
  'gearmanworker::echo' => 
  array (
    0 => 'bool',
    'workload' => 'string',
  ),
  'gearmanworker::error' => 
  array (
    0 => 'string',
  ),
  'gearmanworker::geterrno' => 
  array (
    0 => 'int',
  ),
  'gearmanworker::grabjob' => 
  array (
    0 => 'mixed',
  ),
  'gearmanworker::options' => 
  array (
    0 => 'int',
  ),
  'gearmanworker::register' => 
  array (
    0 => 'bool',
    'function_name' => 'string',
    'timeout=' => 'int',
  ),
  'gearmanworker::removeoptions' => 
  array (
    0 => 'bool',
    'option' => 'int',
  ),
  'gearmanworker::returncode' => 
  array (
    0 => 'int',
  ),
  'gearmanworker::setid' => 
  array (
    0 => 'bool',
    'id' => 'string',
  ),
  'gearmanworker::setoptions' => 
  array (
    0 => 'bool',
    'option' => 'int',
  ),
  'gearmanworker::settimeout' => 
  array (
    0 => 'bool',
    'timeout' => 'int',
  ),
  'gearmanworker::timeout' => 
  array (
    0 => 'int',
  ),
  'gearmanworker::unregister' => 
  array (
    0 => 'bool',
    'function_name' => 'string',
  ),
  'gearmanworker::unregisterall' => 
  array (
    0 => 'bool',
  ),
  'gearmanworker::wait' => 
  array (
    0 => 'bool',
  ),
  'gearmanworker::work' => 
  array (
    0 => 'bool',
  ),
  'gender\\gender::__construct' => 
  array (
    0 => 'void',
    'dsn=' => 'string',
  ),
  'gender\\gender::connect' => 
  array (
    0 => 'bool',
    'dsn' => 'string',
  ),
  'gender\\gender::country' => 
  array (
    0 => 'array<array-key, mixed>',
    'country' => 'int',
  ),
  'gender\\gender::get' => 
  array (
    0 => 'int',
    'name' => 'string',
    'country=' => 'int',
  ),
  'gender\\gender::isnick' => 
  array (
    0 => 'array<array-key, mixed>',
    'name0' => 'string',
    'name1' => 'string',
    'country=' => 'int',
  ),
  'gender\\gender::similarnames' => 
  array (
    0 => 'array<array-key, mixed>',
    'name' => 'string',
    'country=' => 'int',
  ),
  'generator::current' => 
  array (
    0 => 'mixed',
  ),
  'generator::getreturn' => 
  array (
    0 => 'mixed',
  ),
  'generator::key' => 
  array (
    0 => 'mixed',
  ),
  'generator::next' => 
  array (
    0 => 'void',
  ),
  'generator::rewind' => 
  array (
    0 => 'void',
  ),
  'generator::send' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
  ),
  'generator::throw' => 
  array (
    0 => 'mixed',
    'exception' => 'Throwable',
  ),
  'generator::valid' => 
  array (
    0 => 'bool',
  ),
  'geoip_asnum_by_name' => 
  array (
    0 => 'false|string',
    'hostname' => 'string',
  ),
  'geoip_continent_code_by_name' => 
  array (
    0 => 'false|string',
    'hostname' => 'string',
  ),
  'geoip_country_code3_by_name' => 
  array (
    0 => 'false|string',
    'hostname' => 'string',
  ),
  'geoip_country_code_by_name' => 
  array (
    0 => 'false|string',
    'hostname' => 'string',
  ),
  'geoip_country_name_by_name' => 
  array (
    0 => 'false|string',
    'hostname' => 'string',
  ),
  'geoip_database_info' => 
  array (
    0 => 'string',
    'database=' => 'int',
  ),
  'geoip_db_avail' => 
  array (
    0 => 'bool',
    'database' => 'int',
  ),
  'geoip_db_filename' => 
  array (
    0 => 'string',
    'database' => 'int',
  ),
  'geoip_db_get_all_info' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'geoip_domain_by_name' => 
  array (
    0 => 'string',
    'hostname' => 'string',
  ),
  'geoip_id_by_name' => 
  array (
    0 => 'int',
    'hostname' => 'string',
  ),
  'geoip_isp_by_name' => 
  array (
    0 => 'false|string',
    'hostname' => 'string',
  ),
  'geoip_netspeedcell_by_name' => 
  array (
    0 => 'false|string',
    'hostname' => 'string',
  ),
  'geoip_org_by_name' => 
  array (
    0 => 'false|string',
    'hostname' => 'string',
  ),
  'geoip_record_by_name' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'hostname' => 'string',
  ),
  'geoip_region_by_name' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'hostname' => 'string',
  ),
  'geoip_region_name_by_code' => 
  array (
    0 => 'false|string',
    'country_code' => 'string',
    'region_code' => 'string',
  ),
  'geoip_setup_custom_directory' => 
  array (
    0 => 'void',
    'path' => 'string',
  ),
  'geoip_time_zone_by_country_and_region' => 
  array (
    0 => 'false|string',
    'country_code' => 'string',
    'region_code=' => 'string',
  ),
  'geosgeometry::__tostring' => 
  array (
    0 => 'string',
  ),
  'geosgeometry::area' => 
  array (
    0 => 'float',
  ),
  'geosgeometry::boundary' => 
  array (
    0 => 'GEOSGeometry',
  ),
  'geosgeometry::buffer' => 
  array (
    0 => 'GEOSGeometry',
    'dist' => 'float',
    'styleArray=' => 'array<array-key, mixed>',
  ),
  'geosgeometry::centroid' => 
  array (
    0 => 'GEOSGeometry',
  ),
  'geosgeometry::checkvalidity' => 
  array (
    0 => 'array{location?: GEOSGeometry, reason?: string, valid: bool}',
  ),
  'geosgeometry::contains' => 
  array (
    0 => 'bool',
    'geom' => 'GEOSGeometry',
  ),
  'geosgeometry::convexhull' => 
  array (
    0 => 'GEOSGeometry',
  ),
  'geosgeometry::coordinatedimension' => 
  array (
    0 => 'int',
  ),
  'geosgeometry::coveredby' => 
  array (
    0 => 'bool',
    'geom' => 'GEOSGeometry',
  ),
  'geosgeometry::covers' => 
  array (
    0 => 'bool',
    'geom' => 'GEOSGeometry',
  ),
  'geosgeometry::crosses' => 
  array (
    0 => 'bool',
    'geom' => 'GEOSGeometry',
  ),
  'geosgeometry::delaunaytriangulation' => 
  array (
    0 => 'GEOSGeometry',
    'tolerance' => 'float',
    'onlyEdges' => 'bool',
  ),
  'geosgeometry::difference' => 
  array (
    0 => 'GEOSGeometry',
    'geom' => 'GEOSGeometry',
  ),
  'geosgeometry::dimension' => 
  array (
    0 => 'int',
  ),
  'geosgeometry::disjoint' => 
  array (
    0 => 'bool',
    'geom' => 'GEOSGeometry',
  ),
  'geosgeometry::distance' => 
  array (
    0 => 'float',
    'geom' => 'GEOSGeometry',
  ),
  'geosgeometry::endpoint' => 
  array (
    0 => 'GEOSGeometry',
  ),
  'geosgeometry::envelope' => 
  array (
    0 => 'GEOSGeometry',
  ),
  'geosgeometry::equals' => 
  array (
    0 => 'bool',
    'geom' => 'GEOSGeometry',
  ),
  'geosgeometry::equalsexact' => 
  array (
    0 => 'bool',
    'geom' => 'GEOSGeometry',
    'tolerance' => 'float',
  ),
  'geosgeometry::exteriorring' => 
  array (
    0 => 'GEOSGeometry',
  ),
  'geosgeometry::extractuniquepoints' => 
  array (
    0 => 'GEOSGeometry',
  ),
  'geosgeometry::geometryn' => 
  array (
    0 => 'GEOSGeometry',
    'num' => 'int',
  ),
  'geosgeometry::getsrid' => 
  array (
    0 => 'int',
  ),
  'geosgeometry::getx' => 
  array (
    0 => 'float',
  ),
  'geosgeometry::gety' => 
  array (
    0 => 'float',
  ),
  'geosgeometry::hasz' => 
  array (
    0 => 'bool',
  ),
  'geosgeometry::hausdorffdistance' => 
  array (
    0 => 'float',
    'geom' => 'GEOSGeometry',
  ),
  'geosgeometry::interiorringn' => 
  array (
    0 => 'GEOSGeometry',
    'num' => 'int',
  ),
  'geosgeometry::interpolate' => 
  array (
    0 => 'GEOSGeometry',
    'dist' => 'float',
    'normalized' => 'bool',
  ),
  'geosgeometry::intersection' => 
  array (
    0 => 'GEOSGeometry',
    'geom' => 'GEOSGeometry',
  ),
  'geosgeometry::intersects' => 
  array (
    0 => 'bool',
    'geom' => 'GEOSGeometry',
  ),
  'geosgeometry::isclosed' => 
  array (
    0 => 'bool',
  ),
  'geosgeometry::isempty' => 
  array (
    0 => 'bool',
  ),
  'geosgeometry::isring' => 
  array (
    0 => 'bool',
  ),
  'geosgeometry::issimple' => 
  array (
    0 => 'bool',
  ),
  'geosgeometry::length' => 
  array (
    0 => 'float',
  ),
  'geosgeometry::node' => 
  array (
    0 => 'GEOSGeometry',
  ),
  'geosgeometry::normalize' => 
  array (
    0 => 'GEOSGeometry',
  ),
  'geosgeometry::numcoordinates' => 
  array (
    0 => 'int',
  ),
  'geosgeometry::numgeometries' => 
  array (
    0 => 'int',
  ),
  'geosgeometry::numinteriorrings' => 
  array (
    0 => 'int',
  ),
  'geosgeometry::numpoints' => 
  array (
    0 => 'int',
  ),
  'geosgeometry::offsetcurve' => 
  array (
    0 => 'GEOSGeometry',
    'dist' => 'float',
    'styleArray' => 'array<array-key, mixed>',
  ),
  'geosgeometry::overlaps' => 
  array (
    0 => 'bool',
    'geom' => 'GEOSGeometry',
  ),
  'geosgeometry::pointn' => 
  array (
    0 => 'GEOSGeometry',
    'num' => 'int',
  ),
  'geosgeometry::pointonsurface' => 
  array (
    0 => 'GEOSGeometry',
  ),
  'geosgeometry::project' => 
  array (
    0 => 'float',
    'other' => 'GEOSGeometry',
    'normalized' => 'bool',
  ),
  'geosgeometry::relate' => 
  array (
    0 => 'bool|string',
    'otherGeom' => 'GEOSGeometry',
    'pattern' => 'string',
  ),
  'geosgeometry::relateboundarynoderule' => 
  array (
    0 => 'string',
    'otherGeom' => 'GEOSGeometry',
    'rule' => 'int',
  ),
  'geosgeometry::setsrid' => 
  array (
    0 => 'void',
    'srid' => 'int',
  ),
  'geosgeometry::simplify' => 
  array (
    0 => 'GEOSGeometry',
    'tolerance' => 'float',
    'preserveTopology=' => 'bool',
  ),
  'geosgeometry::snapto' => 
  array (
    0 => 'GEOSGeometry',
    'geom' => 'GEOSGeometry',
    'tolerance' => 'float',
  ),
  'geosgeometry::startpoint' => 
  array (
    0 => 'GEOSGeometry',
  ),
  'geosgeometry::symdifference' => 
  array (
    0 => 'GEOSGeometry',
    'geom' => 'GEOSGeometry',
  ),
  'geosgeometry::touches' => 
  array (
    0 => 'bool',
    'geom' => 'GEOSGeometry',
  ),
  'geosgeometry::typeid' => 
  array (
    0 => 'int',
  ),
  'geosgeometry::typename' => 
  array (
    0 => 'string',
  ),
  'geosgeometry::union' => 
  array (
    0 => 'GEOSGeometry',
    'otherGeom=' => 'GEOSGeometry',
  ),
  'geosgeometry::voronoidiagram' => 
  array (
    0 => 'GEOSGeometry',
    'tolerance' => 'float',
    'onlyEdges' => 'bool',
    'extent' => 'GEOSGeometry|null',
  ),
  'geosgeometry::within' => 
  array (
    0 => 'bool',
    'geom' => 'GEOSGeometry',
  ),
  'geoslinemerge' => 
  array (
    0 => 'array<array-key, mixed>',
    'geom' => 'GEOSGeometry',
  ),
  'geospolygonize' => 
  array (
    0 => 'array{cut_edges?: array<array-key, GEOSGeometry>, dangles: array<array-key, GEOSGeometry>, invalid_rings: array<array-key, GEOSGeometry>, rings: array<array-key, GEOSGeometry>}',
    'geom' => 'GEOSGeometry',
  ),
  'geosrelatematch' => 
  array (
    0 => 'bool',
    'matrix' => 'string',
    'pattern' => 'string',
  ),
  'geossharedpaths' => 
  array (
    0 => 'GEOSGeometry',
    'geom1' => 'GEOSGeometry',
    'geom2' => 'GEOSGeometry',
  ),
  'geosversion' => 
  array (
    0 => 'string',
  ),
  'geoswkbreader::__construct' => 
  array (
    0 => 'void',
  ),
  'geoswkbreader::read' => 
  array (
    0 => 'GEOSGeometry',
    'wkb' => 'string',
  ),
  'geoswkbreader::readhex' => 
  array (
    0 => 'GEOSGeometry',
    'wkb' => 'string',
  ),
  'geoswkbwriter::__construct' => 
  array (
    0 => 'void',
  ),
  'geoswkbwriter::getbyteorder' => 
  array (
    0 => 'int',
  ),
  'geoswkbwriter::getincludesrid' => 
  array (
    0 => 'bool',
  ),
  'geoswkbwriter::getoutputdimension' => 
  array (
    0 => 'int',
  ),
  'geoswkbwriter::setbyteorder' => 
  array (
    0 => 'void',
    'byteOrder' => 'int',
  ),
  'geoswkbwriter::setincludesrid' => 
  array (
    0 => 'void',
    'inc' => 'bool',
  ),
  'geoswkbwriter::setoutputdimension' => 
  array (
    0 => 'void',
    'dim' => 'int',
  ),
  'geoswkbwriter::write' => 
  array (
    0 => 'string',
    'geom' => 'GEOSGeometry',
  ),
  'geoswkbwriter::writehex' => 
  array (
    0 => 'string',
    'geom' => 'GEOSGeometry',
  ),
  'geoswktreader::__construct' => 
  array (
    0 => 'void',
  ),
  'geoswktreader::read' => 
  array (
    0 => 'GEOSGeometry',
    'wkt' => 'string',
  ),
  'geoswktwriter::__construct' => 
  array (
    0 => 'void',
  ),
  'geoswktwriter::getoutputdimension' => 
  array (
    0 => 'int',
  ),
  'geoswktwriter::setold3d' => 
  array (
    0 => 'void',
    'val' => 'bool',
  ),
  'geoswktwriter::setoutputdimension' => 
  array (
    0 => 'void',
    'dim' => 'int',
  ),
  'geoswktwriter::setroundingprecision' => 
  array (
    0 => 'void',
    'prec' => 'int',
  ),
  'geoswktwriter::settrim' => 
  array (
    0 => 'void',
    'trim' => 'bool',
  ),
  'geoswktwriter::write' => 
  array (
    0 => 'string',
    'geom' => 'GEOSGeometry',
  ),
  'get_browser' => 
  array (
    0 => 'array<array-key, mixed>|false|object',
    'user_agent=' => 'null|string',
    'return_array=' => 'bool',
  ),
  'get_call_stack' => 
  array (
    0 => 'mixed',
  ),
  'get_called_class' => 
  array (
    0 => 'class-string',
  ),
  'get_cfg_var' => 
  array (
    0 => 'array<array-key, mixed>|false|string',
    'option' => 'string',
  ),
  'get_class' => 
  array (
    0 => 'class-string',
    'object=' => 'object',
  ),
  'get_class_methods' => 
  array (
    0 => 'list<non-falsy-string>',
    'object_or_class' => 'class-string|object',
  ),
  'get_class_vars' => 
  array (
    0 => 'array<non-falsy-string, mixed>',
    'class' => 'string',
  ),
  'get_current_user' => 
  array (
    0 => 'string',
  ),
  'get_debug_type' => 
  array (
    0 => 'string',
    'value' => 'mixed',
  ),
  'get_declared_classes' => 
  array (
    0 => 'list<class-string>',
  ),
  'get_declared_interfaces' => 
  array (
    0 => 'list<class-string>',
  ),
  'get_declared_traits' => 
  array (
    0 => 'list<class-string>',
  ),
  'get_defined_constants' => 
  array (
    0 => 'array<string, array<array-key, mixed>|null|resource|scalar>',
    'categorize=' => 'bool',
  ),
  'get_defined_functions' => 
  array (
    0 => 'array{internal: list<callable-string>, user: list<callable-string>}',
    'exclude_disabled=' => 'bool',
  ),
  'get_defined_vars' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'get_extension_funcs' => 
  array (
    0 => 'false|list<callable-string>',
    'extension' => 'string',
  ),
  'get_headers' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'url' => 'string',
    'associative=' => 'bool',
    'context=' => 'null|resource',
  ),
  'get_html_translation_table' => 
  array (
    0 => 'array<array-key, mixed>',
    'table=' => 'int',
    'flags=' => 'int',
    'encoding=' => 'string',
  ),
  'get_include_path' => 
  array (
    0 => 'string',
  ),
  'get_included_files' => 
  array (
    0 => 'list<string>',
  ),
  'get_loaded_extensions' => 
  array (
    0 => 'list<string>',
    'zend_extensions=' => 'bool',
  ),
  'get_mangled_object_vars' => 
  array (
    0 => 'array<array-key, mixed>',
    'object' => 'object',
  ),
  'get_meta_tags' => 
  array (
    0 => 'array<array-key, mixed>',
    'filename' => 'string',
    'use_include_path=' => 'bool',
  ),
  'get_object_vars' => 
  array (
    0 => 'array<string, mixed>',
    'object' => 'object',
  ),
  'get_parent_class' => 
  array (
    0 => 'class-string|false',
    'object_or_class=' => 'class-string|object',
  ),
  'get_required_files' => 
  array (
    0 => 'list<string>',
  ),
  'get_resource_id' => 
  array (
    0 => 'int',
    'resource' => 'resource',
  ),
  'get_resource_type' => 
  array (
    0 => 'string',
    'resource' => 'resource',
  ),
  'get_resources' => 
  array (
    0 => 'array<int, resource>',
    'type=' => 'null|string',
  ),
  'getallheaders' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'getcwd' => 
  array (
    0 => 'false|non-falsy-string',
  ),
  'getdate' => 
  array (
    0 => 'array{0: int, hours: int<0, 23>, mday: int<1, 31>, minutes: int<0, 59>, mon: int<1, 12>, month: \'April\'|\'August\'|\'December\'|\'February\'|\'January\'|\'July\'|\'June\'|\'March\'|\'May\'|\'November\'|\'October\'|\'September\', seconds: int<0, 59>, wday: int<0, 6>, weekday: \'Friday\'|\'Monday\'|\'Saturday\'|\'Sunday\'|\'Thursday\'|\'Tuesday\'|\'Wednesday\', yday: int<0, 365>, year: int}',
    'timestamp=' => 'int|null',
  ),
  'getenv' => 
  array (
    0 => 'false|string',
    'name=' => 'null|string',
    'local_only=' => 'bool',
  ),
  'getenv\'1' => 
  array (
    0 => 'array<string, string>',
  ),
  'gethostbyaddr' => 
  array (
    0 => 'false|string',
    'ip' => 'string',
  ),
  'gethostbyname' => 
  array (
    0 => 'string',
    'hostname' => 'string',
  ),
  'gethostbynamel' => 
  array (
    0 => 'false|list<string>',
    'hostname' => 'string',
  ),
  'gethostname' => 
  array (
    0 => 'false|string',
  ),
  'getimagesize' => 
  array (
    0 => 'array{0: int, 1: int, 2: int, 3: string, bits?: int, channels?: 3|4, mime: string}|false',
    'filename' => 'string',
    '&w_image_info=' => 'array<array-key, mixed>',
  ),
  'getimagesizefromstring' => 
  array (
    0 => 'array{0: int, 1: int, 2: int, 3: string, bits?: int, channels?: 3|4, mime: string}|false',
    'string' => 'string',
    '&w_image_info=' => 'array<array-key, mixed>',
  ),
  'getlastmod' => 
  array (
    0 => 'false|int',
  ),
  'getmxrr' => 
  array (
    0 => 'bool',
    'hostname' => 'string',
    '&w_hosts' => 'array<int, string>',
    '&w_weights=' => 'array<int, int>',
  ),
  'getmygid' => 
  array (
    0 => 'false|int',
  ),
  'getmyinode' => 
  array (
    0 => 'false|int',
  ),
  'getmypid' => 
  array (
    0 => 'false|int',
  ),
  'getmyuid' => 
  array (
    0 => 'false|int',
  ),
  'getopt' => 
  array (
    0 => 'array<string, false|list<false|string>|string>|false',
    'short_options' => 'string',
    'long_options=' => 'array<array-key, mixed>',
    '&w_rest_index=' => 'int',
  ),
  'getprotobyname' => 
  array (
    0 => 'false|int',
    'protocol' => 'string',
  ),
  'getprotobynumber' => 
  array (
    0 => 'string',
    'protocol' => 'int',
  ),
  'getrandmax' => 
  array (
    0 => 'int<1, max>',
  ),
  'getrusage' => 
  array (
    0 => 'array<array-key, mixed>',
    'mode=' => 'int',
  ),
  'getservbyname' => 
  array (
    0 => 'false|int',
    'service' => 'string',
    'protocol' => 'string',
  ),
  'getservbyport' => 
  array (
    0 => 'false|string',
    'port' => 'int',
    'protocol' => 'string',
  ),
  'gettext' => 
  array (
    0 => 'string',
    'message' => 'string',
  ),
  'gettimeofday' => 
  array (
    0 => 'array<string, int>',
    'as_float=' => 'bool',
  ),
  'gettimeofday\'1' => 
  array (
    0 => 'float',
    'as_float=' => 'true',
  ),
  'gettype' => 
  array (
    0 => 'string',
    'value' => 'mixed',
  ),
  'glob' => 
  array (
    0 => 'false|list{0?: string, ...<non-empty-string>}',
    'pattern' => 'string',
    'flags=' => 'int<0, max>',
  ),
  'globiterator::__construct' => 
  array (
    0 => 'void',
    'pattern' => 'string',
    'flags=' => 'int',
  ),
  'globiterator::__debuginfo' => 
  array (
    0 => 'mixed',
  ),
  'globiterator::__tostring' => 
  array (
    0 => 'string',
  ),
  'globiterator::_bad_state_ex' => 
  array (
    0 => 'mixed',
  ),
  'globiterator::count' => 
  array (
    0 => 'int',
  ),
  'globiterator::current' => 
  array (
    0 => 'FilesystemIterator|SplFileInfo|string',
  ),
  'globiterator::getatime' => 
  array (
    0 => 'int',
  ),
  'globiterator::getbasename' => 
  array (
    0 => 'string',
    'suffix=' => 'string',
  ),
  'globiterator::getctime' => 
  array (
    0 => 'int',
  ),
  'globiterator::getextension' => 
  array (
    0 => 'string',
  ),
  'globiterator::getfileinfo' => 
  array (
    0 => 'SplFileInfo',
    'class=' => 'class-string|null',
  ),
  'globiterator::getfilename' => 
  array (
    0 => 'string',
  ),
  'globiterator::getflags' => 
  array (
    0 => 'int',
  ),
  'globiterator::getgroup' => 
  array (
    0 => 'int',
  ),
  'globiterator::getinode' => 
  array (
    0 => 'int',
  ),
  'globiterator::getlinktarget' => 
  array (
    0 => 'false|string',
  ),
  'globiterator::getmtime' => 
  array (
    0 => 'int',
  ),
  'globiterator::getowner' => 
  array (
    0 => 'int',
  ),
  'globiterator::getpath' => 
  array (
    0 => 'string',
  ),
  'globiterator::getpathinfo' => 
  array (
    0 => 'SplFileInfo|null',
    'class=' => 'class-string|null',
  ),
  'globiterator::getpathname' => 
  array (
    0 => 'string',
  ),
  'globiterator::getperms' => 
  array (
    0 => 'int',
  ),
  'globiterator::getrealpath' => 
  array (
    0 => 'false|non-falsy-string',
  ),
  'globiterator::getsize' => 
  array (
    0 => 'int',
  ),
  'globiterator::gettype' => 
  array (
    0 => 'false|string',
  ),
  'globiterator::isdir' => 
  array (
    0 => 'bool',
  ),
  'globiterator::isdot' => 
  array (
    0 => 'bool',
  ),
  'globiterator::isexecutable' => 
  array (
    0 => 'bool',
  ),
  'globiterator::isfile' => 
  array (
    0 => 'bool',
  ),
  'globiterator::islink' => 
  array (
    0 => 'bool',
  ),
  'globiterator::isreadable' => 
  array (
    0 => 'bool',
  ),
  'globiterator::iswritable' => 
  array (
    0 => 'bool',
  ),
  'globiterator::key' => 
  array (
    0 => 'string',
  ),
  'globiterator::next' => 
  array (
    0 => 'void',
  ),
  'globiterator::openfile' => 
  array (
    0 => 'SplFileObject',
    'mode=' => 'string',
    'useIncludePath=' => 'bool',
    'context=' => 'null|resource',
  ),
  'globiterator::rewind' => 
  array (
    0 => 'void',
  ),
  'globiterator::seek' => 
  array (
    0 => 'void',
    'offset' => 'int',
  ),
  'globiterator::setfileclass' => 
  array (
    0 => 'void',
    'class=' => 'class-string',
  ),
  'globiterator::setflags' => 
  array (
    0 => 'void',
    'flags' => 'int',
  ),
  'globiterator::setinfoclass' => 
  array (
    0 => 'void',
    'class=' => 'class-string',
  ),
  'globiterator::valid' => 
  array (
    0 => 'bool',
  ),
  'gmagick::__construct' => 
  array (
    0 => 'void',
    'filename=' => 'string',
  ),
  'gmagick::addimage' => 
  array (
    0 => 'Gmagick',
    'gmagick' => 'gmagick',
  ),
  'gmagick::addnoiseimage' => 
  array (
    0 => 'Gmagick',
    'noise' => 'int',
  ),
  'gmagick::annotateimage' => 
  array (
    0 => 'Gmagick',
    'gmagickdraw' => 'gmagickdraw',
    'x' => 'float',
    'y' => 'float',
    'angle' => 'float',
    'text' => 'string',
  ),
  'gmagick::blurimage' => 
  array (
    0 => 'Gmagick',
    'radius' => 'float',
    'sigma' => 'float',
    'channel=' => 'int',
  ),
  'gmagick::borderimage' => 
  array (
    0 => 'Gmagick',
    'color' => 'gmagickpixel',
    'width' => 'int',
    'height' => 'int',
  ),
  'gmagick::charcoalimage' => 
  array (
    0 => 'Gmagick',
    'radius' => 'float',
    'sigma' => 'float',
  ),
  'gmagick::chopimage' => 
  array (
    0 => 'Gmagick',
    'width' => 'int',
    'height' => 'int',
    'x' => 'int',
    'y' => 'int',
  ),
  'gmagick::clear' => 
  array (
    0 => 'Gmagick',
  ),
  'gmagick::commentimage' => 
  array (
    0 => 'Gmagick',
    'comment' => 'string',
  ),
  'gmagick::compositeimage' => 
  array (
    0 => 'Gmagick',
    'source' => 'gmagick',
    'compose' => 'int',
    'x' => 'int',
    'y' => 'int',
  ),
  'gmagick::cropimage' => 
  array (
    0 => 'Gmagick',
    'width' => 'int',
    'height' => 'int',
    'x' => 'int',
    'y' => 'int',
  ),
  'gmagick::cropthumbnailimage' => 
  array (
    0 => 'Gmagick',
    'width' => 'int',
    'height' => 'int',
  ),
  'gmagick::current' => 
  array (
    0 => 'Gmagick',
  ),
  'gmagick::cyclecolormapimage' => 
  array (
    0 => 'Gmagick',
    'displace' => 'int',
  ),
  'gmagick::deconstructimages' => 
  array (
    0 => 'Gmagick',
  ),
  'gmagick::despeckleimage' => 
  array (
    0 => 'Gmagick',
  ),
  'gmagick::destroy' => 
  array (
    0 => 'bool',
  ),
  'gmagick::drawimage' => 
  array (
    0 => 'Gmagick',
    'gmagickdraw' => 'gmagickdraw',
  ),
  'gmagick::edgeimage' => 
  array (
    0 => 'Gmagick',
    'radius' => 'float',
  ),
  'gmagick::embossimage' => 
  array (
    0 => 'Gmagick',
    'radius' => 'float',
    'sigma' => 'float',
  ),
  'gmagick::enhanceimage' => 
  array (
    0 => 'Gmagick',
  ),
  'gmagick::equalizeimage' => 
  array (
    0 => 'Gmagick',
  ),
  'gmagick::flipimage' => 
  array (
    0 => 'Gmagick',
  ),
  'gmagick::flopimage' => 
  array (
    0 => 'Gmagick',
  ),
  'gmagick::frameimage' => 
  array (
    0 => 'Gmagick',
    'color' => 'gmagickpixel',
    'width' => 'int',
    'height' => 'int',
    'inner_bevel' => 'int',
    'outer_bevel' => 'int',
  ),
  'gmagick::gammaimage' => 
  array (
    0 => 'Gmagick',
    'gamma' => 'float',
  ),
  'gmagick::getcopyright' => 
  array (
    0 => 'string',
  ),
  'gmagick::getfilename' => 
  array (
    0 => 'string',
  ),
  'gmagick::getimagebackgroundcolor' => 
  array (
    0 => 'GmagickPixel',
  ),
  'gmagick::getimageblueprimary' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'gmagick::getimagebordercolor' => 
  array (
    0 => 'GmagickPixel',
  ),
  'gmagick::getimagechanneldepth' => 
  array (
    0 => 'int',
    'channel_type' => 'int',
  ),
  'gmagick::getimagecolors' => 
  array (
    0 => 'int',
  ),
  'gmagick::getimagecolorspace' => 
  array (
    0 => 'int',
  ),
  'gmagick::getimagecompose' => 
  array (
    0 => 'int',
  ),
  'gmagick::getimagedelay' => 
  array (
    0 => 'int',
  ),
  'gmagick::getimagedepth' => 
  array (
    0 => 'int',
  ),
  'gmagick::getimagedispose' => 
  array (
    0 => 'int',
  ),
  'gmagick::getimageextrema' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'gmagick::getimagefilename' => 
  array (
    0 => 'string',
  ),
  'gmagick::getimageformat' => 
  array (
    0 => 'string',
  ),
  'gmagick::getimagegamma' => 
  array (
    0 => 'float',
  ),
  'gmagick::getimagegreenprimary' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'gmagick::getimageheight' => 
  array (
    0 => 'int',
  ),
  'gmagick::getimagehistogram' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'gmagick::getimageindex' => 
  array (
    0 => 'int',
  ),
  'gmagick::getimageinterlacescheme' => 
  array (
    0 => 'int',
  ),
  'gmagick::getimageiterations' => 
  array (
    0 => 'int',
  ),
  'gmagick::getimagematte' => 
  array (
    0 => 'int',
  ),
  'gmagick::getimagemattecolor' => 
  array (
    0 => 'GmagickPixel',
  ),
  'gmagick::getimageprofile' => 
  array (
    0 => 'string',
    'name' => 'string',
  ),
  'gmagick::getimageredprimary' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'gmagick::getimagerenderingintent' => 
  array (
    0 => 'int',
  ),
  'gmagick::getimageresolution' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'gmagick::getimagescene' => 
  array (
    0 => 'int',
  ),
  'gmagick::getimagesignature' => 
  array (
    0 => 'string',
  ),
  'gmagick::getimagetype' => 
  array (
    0 => 'int',
  ),
  'gmagick::getimageunits' => 
  array (
    0 => 'int',
  ),
  'gmagick::getimagewhitepoint' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'gmagick::getimagewidth' => 
  array (
    0 => 'int',
  ),
  'gmagick::getpackagename' => 
  array (
    0 => 'string',
  ),
  'gmagick::getquantumdepth' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'gmagick::getreleasedate' => 
  array (
    0 => 'string',
  ),
  'gmagick::getsamplingfactors' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'gmagick::getsize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'gmagick::getversion' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'gmagick::hasnextimage' => 
  array (
    0 => 'bool',
  ),
  'gmagick::haspreviousimage' => 
  array (
    0 => 'bool',
  ),
  'gmagick::implodeimage' => 
  array (
    0 => 'mixed',
    'radius' => 'float',
  ),
  'gmagick::labelimage' => 
  array (
    0 => 'mixed',
    'label' => 'string',
  ),
  'gmagick::levelimage' => 
  array (
    0 => 'mixed',
    'blackpoint' => 'float',
    'gamma' => 'float',
    'whitepoint' => 'float',
    'channel=' => 'int',
  ),
  'gmagick::magnifyimage' => 
  array (
    0 => 'mixed',
  ),
  'gmagick::mapimage' => 
  array (
    0 => 'Gmagick',
    'gmagick' => 'gmagick',
    'dither' => 'bool',
  ),
  'gmagick::medianfilterimage' => 
  array (
    0 => 'void',
    'radius' => 'float',
  ),
  'gmagick::minifyimage' => 
  array (
    0 => 'Gmagick',
  ),
  'gmagick::modulateimage' => 
  array (
    0 => 'Gmagick',
    'brightness' => 'float',
    'saturation' => 'float',
    'hue' => 'float',
  ),
  'gmagick::motionblurimage' => 
  array (
    0 => 'Gmagick',
    'radius' => 'float',
    'sigma' => 'float',
    'angle' => 'float',
  ),
  'gmagick::newimage' => 
  array (
    0 => 'Gmagick',
    'width' => 'int',
    'height' => 'int',
    'background' => 'string',
    'format=' => 'string',
  ),
  'gmagick::nextimage' => 
  array (
    0 => 'bool',
  ),
  'gmagick::normalizeimage' => 
  array (
    0 => 'Gmagick',
    'channel=' => 'int',
  ),
  'gmagick::oilpaintimage' => 
  array (
    0 => 'Gmagick',
    'radius' => 'float',
  ),
  'gmagick::previousimage' => 
  array (
    0 => 'bool',
  ),
  'gmagick::profileimage' => 
  array (
    0 => 'Gmagick',
    'name' => 'string',
    'profile' => 'string',
  ),
  'gmagick::quantizeimage' => 
  array (
    0 => 'Gmagick',
    'numcolors' => 'int',
    'colorspace' => 'int',
    'treedepth' => 'int',
    'dither' => 'bool',
    'measureerror' => 'bool',
  ),
  'gmagick::quantizeimages' => 
  array (
    0 => 'Gmagick',
    'numcolors' => 'int',
    'colorspace' => 'int',
    'treedepth' => 'int',
    'dither' => 'bool',
    'measureerror' => 'bool',
  ),
  'gmagick::queryfontmetrics' => 
  array (
    0 => 'array<array-key, mixed>',
    'draw' => 'gmagickdraw',
    'text' => 'string',
  ),
  'gmagick::queryfonts' => 
  array (
    0 => 'array<array-key, mixed>',
    'pattern=' => 'string',
  ),
  'gmagick::queryformats' => 
  array (
    0 => 'array<array-key, mixed>',
    'pattern=' => 'string',
  ),
  'gmagick::radialblurimage' => 
  array (
    0 => 'Gmagick',
    'angle' => 'float',
    'channel=' => 'int',
  ),
  'gmagick::raiseimage' => 
  array (
    0 => 'Gmagick',
    'width' => 'int',
    'height' => 'int',
    'x' => 'int',
    'y' => 'int',
    'raise' => 'bool',
  ),
  'gmagick::read' => 
  array (
    0 => 'Gmagick',
    'filename' => 'string',
  ),
  'gmagick::readimage' => 
  array (
    0 => 'Gmagick',
    'filename' => 'string',
  ),
  'gmagick::readimageblob' => 
  array (
    0 => 'Gmagick',
    'imagecontents' => 'string',
    'filename=' => 'string',
  ),
  'gmagick::readimagefile' => 
  array (
    0 => 'Gmagick',
    'fp' => 'resource',
    'filename=' => 'string',
  ),
  'gmagick::reducenoiseimage' => 
  array (
    0 => 'Gmagick',
    'radius' => 'float',
  ),
  'gmagick::removeimage' => 
  array (
    0 => 'Gmagick',
  ),
  'gmagick::removeimageprofile' => 
  array (
    0 => 'string',
    'name' => 'string',
  ),
  'gmagick::resampleimage' => 
  array (
    0 => 'Gmagick',
    'xresolution' => 'float',
    'yresolution' => 'float',
    'filter' => 'int',
    'blur' => 'float',
  ),
  'gmagick::resizeimage' => 
  array (
    0 => 'Gmagick',
    'width' => 'int',
    'height' => 'int',
    'filter' => 'int',
    'blur' => 'float',
    'fit=' => 'bool',
  ),
  'gmagick::rollimage' => 
  array (
    0 => 'Gmagick',
    'x' => 'int',
    'y' => 'int',
  ),
  'gmagick::rotateimage' => 
  array (
    0 => 'Gmagick',
    'color' => 'mixed',
    'degrees' => 'float',
  ),
  'gmagick::scaleimage' => 
  array (
    0 => 'Gmagick',
    'width' => 'int',
    'height' => 'int',
    'fit=' => 'bool',
  ),
  'gmagick::separateimagechannel' => 
  array (
    0 => 'Gmagick',
    'channel' => 'int',
  ),
  'gmagick::setcompressionquality' => 
  array (
    0 => 'Gmagick',
    'quality' => 'int',
  ),
  'gmagick::setfilename' => 
  array (
    0 => 'Gmagick',
    'filename' => 'string',
  ),
  'gmagick::setimagebackgroundcolor' => 
  array (
    0 => 'Gmagick',
    'color' => 'gmagickpixel',
  ),
  'gmagick::setimageblueprimary' => 
  array (
    0 => 'Gmagick',
    'x' => 'float',
    'y' => 'float',
  ),
  'gmagick::setimagebordercolor' => 
  array (
    0 => 'Gmagick',
    'color' => 'gmagickpixel',
  ),
  'gmagick::setimagechanneldepth' => 
  array (
    0 => 'Gmagick',
    'channel' => 'int',
    'depth' => 'int',
  ),
  'gmagick::setimagecolorspace' => 
  array (
    0 => 'Gmagick',
    'colorspace' => 'int',
  ),
  'gmagick::setimagecompose' => 
  array (
    0 => 'Gmagick',
    'composite' => 'int',
  ),
  'gmagick::setimagedelay' => 
  array (
    0 => 'Gmagick',
    'delay' => 'int',
  ),
  'gmagick::setimagedepth' => 
  array (
    0 => 'Gmagick',
    'depth' => 'int',
  ),
  'gmagick::setimagedispose' => 
  array (
    0 => 'Gmagick',
    'disposetype' => 'int',
  ),
  'gmagick::setimagefilename' => 
  array (
    0 => 'Gmagick',
    'filename' => 'string',
  ),
  'gmagick::setimageformat' => 
  array (
    0 => 'Gmagick',
    'imageformat' => 'string',
  ),
  'gmagick::setimagegamma' => 
  array (
    0 => 'Gmagick',
    'gamma' => 'float',
  ),
  'gmagick::setimagegreenprimary' => 
  array (
    0 => 'Gmagick',
    'x' => 'float',
    'y' => 'float',
  ),
  'gmagick::setimageindex' => 
  array (
    0 => 'Gmagick',
    'index' => 'int',
  ),
  'gmagick::setimageinterlacescheme' => 
  array (
    0 => 'Gmagick',
    'interlace' => 'int',
  ),
  'gmagick::setimageiterations' => 
  array (
    0 => 'Gmagick',
    'iterations' => 'int',
  ),
  'gmagick::setimageprofile' => 
  array (
    0 => 'Gmagick',
    'name' => 'string',
    'profile' => 'string',
  ),
  'gmagick::setimageredprimary' => 
  array (
    0 => 'Gmagick',
    'x' => 'float',
    'y' => 'float',
  ),
  'gmagick::setimagerenderingintent' => 
  array (
    0 => 'Gmagick',
    'rendering_intent' => 'int',
  ),
  'gmagick::setimageresolution' => 
  array (
    0 => 'Gmagick',
    'xresolution' => 'float',
    'yresolution' => 'float',
  ),
  'gmagick::setimagescene' => 
  array (
    0 => 'Gmagick',
    'scene' => 'int',
  ),
  'gmagick::setimagetype' => 
  array (
    0 => 'Gmagick',
    'imgtype' => 'int',
  ),
  'gmagick::setimageunits' => 
  array (
    0 => 'Gmagick',
    'resolution' => 'int',
  ),
  'gmagick::setimagewhitepoint' => 
  array (
    0 => 'Gmagick',
    'x' => 'float',
    'y' => 'float',
  ),
  'gmagick::setsamplingfactors' => 
  array (
    0 => 'Gmagick',
    'factors' => 'array<array-key, mixed>',
  ),
  'gmagick::setsize' => 
  array (
    0 => 'Gmagick',
    'columns' => 'int',
    'rows' => 'int',
  ),
  'gmagick::shearimage' => 
  array (
    0 => 'Gmagick',
    'color' => 'mixed',
    'xshear' => 'float',
    'yshear' => 'float',
  ),
  'gmagick::solarizeimage' => 
  array (
    0 => 'Gmagick',
    'threshold' => 'int',
  ),
  'gmagick::spreadimage' => 
  array (
    0 => 'Gmagick',
    'radius' => 'float',
  ),
  'gmagick::stripimage' => 
  array (
    0 => 'Gmagick',
  ),
  'gmagick::swirlimage' => 
  array (
    0 => 'Gmagick',
    'degrees' => 'float',
  ),
  'gmagick::thumbnailimage' => 
  array (
    0 => 'Gmagick',
    'width' => 'int',
    'height' => 'int',
    'fit=' => 'bool',
  ),
  'gmagick::trimimage' => 
  array (
    0 => 'Gmagick',
    'fuzz' => 'float',
  ),
  'gmagick::write' => 
  array (
    0 => 'Gmagick',
    'filename' => 'string',
  ),
  'gmagick::writeimage' => 
  array (
    0 => 'Gmagick',
    'filename' => 'string',
    'all_frames=' => 'bool',
  ),
  'gmagickdraw::annotate' => 
  array (
    0 => 'GmagickDraw',
    'x' => 'float',
    'y' => 'float',
    'text' => 'string',
  ),
  'gmagickdraw::arc' => 
  array (
    0 => 'GmagickDraw',
    'sx' => 'float',
    'sy' => 'float',
    'ex' => 'float',
    'ey' => 'float',
    'sd' => 'float',
    'ed' => 'float',
  ),
  'gmagickdraw::bezier' => 
  array (
    0 => 'GmagickDraw',
    'coordinate_array' => 'array<array-key, mixed>',
  ),
  'gmagickdraw::ellipse' => 
  array (
    0 => 'GmagickDraw',
    'ox' => 'float',
    'oy' => 'float',
    'rx' => 'float',
    'ry' => 'float',
    'start' => 'float',
    'end' => 'float',
  ),
  'gmagickdraw::getfillcolor' => 
  array (
    0 => 'GmagickPixel',
  ),
  'gmagickdraw::getfillopacity' => 
  array (
    0 => 'float',
  ),
  'gmagickdraw::getfont' => 
  array (
    0 => 'false|string',
  ),
  'gmagickdraw::getfontsize' => 
  array (
    0 => 'float',
  ),
  'gmagickdraw::getfontstyle' => 
  array (
    0 => 'int',
  ),
  'gmagickdraw::getfontweight' => 
  array (
    0 => 'int',
  ),
  'gmagickdraw::getstrokecolor' => 
  array (
    0 => 'GmagickPixel',
  ),
  'gmagickdraw::getstrokeopacity' => 
  array (
    0 => 'float',
  ),
  'gmagickdraw::getstrokewidth' => 
  array (
    0 => 'float',
  ),
  'gmagickdraw::gettextdecoration' => 
  array (
    0 => 'int',
  ),
  'gmagickdraw::gettextencoding' => 
  array (
    0 => 'false|string',
  ),
  'gmagickdraw::line' => 
  array (
    0 => 'GmagickDraw',
    'sx' => 'float',
    'sy' => 'float',
    'ex' => 'float',
    'ey' => 'float',
  ),
  'gmagickdraw::point' => 
  array (
    0 => 'GmagickDraw',
    'x' => 'float',
    'y' => 'float',
  ),
  'gmagickdraw::polygon' => 
  array (
    0 => 'GmagickDraw',
    'coordinates' => 'array<array-key, mixed>',
  ),
  'gmagickdraw::polyline' => 
  array (
    0 => 'GmagickDraw',
    'coordinate_array' => 'array<array-key, mixed>',
  ),
  'gmagickdraw::rectangle' => 
  array (
    0 => 'GmagickDraw',
    'x1' => 'float',
    'y1' => 'float',
    'x2' => 'float',
    'y2' => 'float',
  ),
  'gmagickdraw::rotate' => 
  array (
    0 => 'GmagickDraw',
    'degrees' => 'float',
  ),
  'gmagickdraw::roundrectangle' => 
  array (
    0 => 'GmagickDraw',
    'x1' => 'float',
    'y1' => 'float',
    'x2' => 'float',
    'y2' => 'float',
    'rx' => 'float',
    'ry' => 'float',
  ),
  'gmagickdraw::scale' => 
  array (
    0 => 'GmagickDraw',
    'x' => 'float',
    'y' => 'float',
  ),
  'gmagickdraw::setfillcolor' => 
  array (
    0 => 'GmagickDraw',
    'color' => 'string',
  ),
  'gmagickdraw::setfillopacity' => 
  array (
    0 => 'GmagickDraw',
    'fill_opacity' => 'float',
  ),
  'gmagickdraw::setfont' => 
  array (
    0 => 'GmagickDraw',
    'font' => 'string',
  ),
  'gmagickdraw::setfontsize' => 
  array (
    0 => 'GmagickDraw',
    'pointsize' => 'float',
  ),
  'gmagickdraw::setfontstyle' => 
  array (
    0 => 'GmagickDraw',
    'style' => 'int',
  ),
  'gmagickdraw::setfontweight' => 
  array (
    0 => 'GmagickDraw',
    'weight' => 'int',
  ),
  'gmagickdraw::setstrokecolor' => 
  array (
    0 => 'GmagickDraw',
    'color' => 'gmagickpixel',
  ),
  'gmagickdraw::setstrokeopacity' => 
  array (
    0 => 'GmagickDraw',
    'stroke_opacity' => 'float',
  ),
  'gmagickdraw::setstrokewidth' => 
  array (
    0 => 'GmagickDraw',
    'width' => 'float',
  ),
  'gmagickdraw::settextdecoration' => 
  array (
    0 => 'GmagickDraw',
    'decoration' => 'int',
  ),
  'gmagickdraw::settextencoding' => 
  array (
    0 => 'GmagickDraw',
    'encoding' => 'string',
  ),
  'gmagickpixel::__construct' => 
  array (
    0 => 'void',
    'color=' => 'string',
  ),
  'gmagickpixel::getcolor' => 
  array (
    0 => 'mixed',
    'as_array=' => 'bool',
    'normalize_array=' => 'bool',
  ),
  'gmagickpixel::getcolorcount' => 
  array (
    0 => 'int',
  ),
  'gmagickpixel::getcolorvalue' => 
  array (
    0 => 'float',
    'color' => 'int',
  ),
  'gmagickpixel::setcolor' => 
  array (
    0 => 'GmagickPixel',
    'color' => 'string',
  ),
  'gmagickpixel::setcolorvalue' => 
  array (
    0 => 'GmagickPixel',
    'color' => 'int',
    'value' => 'float',
  ),
  'gmdate' => 
  array (
    0 => 'string',
    'format' => 'string',
    'timestamp=' => 'int|null',
  ),
  'gmmktime' => 
  array (
    0 => 'false|int',
    'hour' => 'int',
    'minute=' => 'int|null',
    'second=' => 'int|null',
    'month=' => 'int|null',
    'day=' => 'int|null',
    'year=' => 'int|null',
  ),
  'gmp_abs' => 
  array (
    0 => 'GMP',
    'num' => 'GMP|int|string',
  ),
  'gmp_add' => 
  array (
    0 => 'GMP',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_and' => 
  array (
    0 => 'GMP',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_binomial' => 
  array (
    0 => 'GMP',
    'n' => 'GMP|int|string',
    'k' => 'int',
  ),
  'gmp_clrbit' => 
  array (
    0 => 'void',
    'num' => 'GMP',
    'index' => 'int',
  ),
  'gmp_cmp' => 
  array (
    0 => 'int',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_com' => 
  array (
    0 => 'GMP',
    'num' => 'GMP|int|string',
  ),
  'gmp_div' => 
  array (
    0 => 'GMP',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
    'rounding_mode=' => 'int',
  ),
  'gmp_div_q' => 
  array (
    0 => 'GMP',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
    'rounding_mode=' => 'int',
  ),
  'gmp_div_qr' => 
  array (
    0 => 'array{0: GMP, 1: GMP}',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
    'rounding_mode=' => 'int',
  ),
  'gmp_div_r' => 
  array (
    0 => 'GMP',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
    'rounding_mode=' => 'int',
  ),
  'gmp_divexact' => 
  array (
    0 => 'GMP',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_export' => 
  array (
    0 => 'string',
    'num' => 'GMP|int|string',
    'word_size=' => 'int',
    'flags=' => 'int',
  ),
  'gmp_fact' => 
  array (
    0 => 'GMP',
    'num' => 'int',
  ),
  'gmp_gcd' => 
  array (
    0 => 'GMP',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_gcdext' => 
  array (
    0 => 'array<string, GMP>',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_hamdist' => 
  array (
    0 => 'int',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_import' => 
  array (
    0 => 'GMP',
    'data' => 'string',
    'word_size=' => 'int',
    'flags=' => 'int',
  ),
  'gmp_init' => 
  array (
    0 => 'GMP',
    'num' => 'int|string',
    'base=' => 'int',
  ),
  'gmp_intval' => 
  array (
    0 => 'int',
    'num' => 'GMP|int|string',
  ),
  'gmp_invert' => 
  array (
    0 => 'GMP|false',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_jacobi' => 
  array (
    0 => 'int',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_kronecker' => 
  array (
    0 => 'int',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_lcm' => 
  array (
    0 => 'GMP',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_legendre' => 
  array (
    0 => 'int',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_mod' => 
  array (
    0 => 'GMP',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_mul' => 
  array (
    0 => 'GMP',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_neg' => 
  array (
    0 => 'GMP',
    'num' => 'GMP|int|string',
  ),
  'gmp_nextprime' => 
  array (
    0 => 'GMP',
    'num' => 'GMP|int|string',
  ),
  'gmp_or' => 
  array (
    0 => 'GMP',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_perfect_power' => 
  array (
    0 => 'bool',
    'num' => 'GMP|int|string',
  ),
  'gmp_perfect_square' => 
  array (
    0 => 'bool',
    'num' => 'GMP|int|string',
  ),
  'gmp_popcount' => 
  array (
    0 => 'int',
    'num' => 'GMP|int|string',
  ),
  'gmp_pow' => 
  array (
    0 => 'GMP',
    'num' => 'GMP|int|string',
    'exponent' => 'int',
  ),
  'gmp_powm' => 
  array (
    0 => 'GMP',
    'num' => 'GMP|int|string',
    'exponent' => 'GMP|int|string',
    'modulus' => 'GMP|int|string',
  ),
  'gmp_prob_prime' => 
  array (
    0 => 'int',
    'num' => 'GMP|int|string',
    'repetitions=' => 'int',
  ),
  'gmp_random_bits' => 
  array (
    0 => 'GMP',
    'bits' => 'int',
  ),
  'gmp_random_range' => 
  array (
    0 => 'GMP',
    'min' => 'GMP|int|string',
    'max' => 'GMP|int|string',
  ),
  'gmp_random_seed' => 
  array (
    0 => 'void',
    'seed' => 'GMP|int|string',
  ),
  'gmp_root' => 
  array (
    0 => 'GMP',
    'num' => 'GMP|int|string',
    'nth' => 'int',
  ),
  'gmp_rootrem' => 
  array (
    0 => 'array{0: GMP, 1: GMP}',
    'num' => 'GMP|int|string',
    'nth' => 'int',
  ),
  'gmp_scan0' => 
  array (
    0 => 'int',
    'num1' => 'GMP|int|string',
    'start' => 'int',
  ),
  'gmp_scan1' => 
  array (
    0 => 'int',
    'num1' => 'GMP|int|string',
    'start' => 'int',
  ),
  'gmp_setbit' => 
  array (
    0 => 'void',
    'num' => 'GMP',
    'index' => 'int',
    'value=' => 'bool',
  ),
  'gmp_sign' => 
  array (
    0 => 'int',
    'num' => 'GMP|int|string',
  ),
  'gmp_sqrt' => 
  array (
    0 => 'GMP',
    'num' => 'GMP|int|string',
  ),
  'gmp_sqrtrem' => 
  array (
    0 => 'array{0: GMP, 1: GMP}',
    'num' => 'GMP|int|string',
  ),
  'gmp_strval' => 
  array (
    0 => 'numeric-string',
    'num' => 'GMP|int|string',
    'base=' => 'int',
  ),
  'gmp_sub' => 
  array (
    0 => 'GMP',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmp_testbit' => 
  array (
    0 => 'bool',
    'num' => 'GMP|int|string',
    'index' => 'int',
  ),
  'gmp_xor' => 
  array (
    0 => 'GMP',
    'num1' => 'GMP|int|string',
    'num2' => 'GMP|int|string',
  ),
  'gmstrftime' => 
  array (
    0 => 'false|string',
    'format' => 'string',
    'timestamp=' => 'int|null',
  ),
  'gnupg::adddecryptkey' => 
  array (
    0 => 'bool',
    'fingerprint' => 'string',
    'passphrase' => 'string',
  ),
  'gnupg::addencryptkey' => 
  array (
    0 => 'bool',
    'fingerprint' => 'string',
  ),
  'gnupg::addsignkey' => 
  array (
    0 => 'bool',
    'fingerprint' => 'string',
    'passphrase=' => 'string',
  ),
  'gnupg::cleardecryptkeys' => 
  array (
    0 => 'bool',
  ),
  'gnupg::clearencryptkeys' => 
  array (
    0 => 'bool',
  ),
  'gnupg::clearsignkeys' => 
  array (
    0 => 'bool',
  ),
  'gnupg::decrypt' => 
  array (
    0 => 'false|string',
    'text' => 'string',
  ),
  'gnupg::decryptverify' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'text' => 'string',
    '&plaintext' => 'string',
  ),
  'gnupg::encrypt' => 
  array (
    0 => 'false|string',
    'plaintext' => 'string',
  ),
  'gnupg::encryptsign' => 
  array (
    0 => 'false|string',
    'plaintext' => 'string',
  ),
  'gnupg::export' => 
  array (
    0 => 'false|string',
    'fingerprint' => 'string',
  ),
  'gnupg::geterror' => 
  array (
    0 => 'false|string',
  ),
  'gnupg::getprotocol' => 
  array (
    0 => 'int',
  ),
  'gnupg::import' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'keydata' => 'string',
  ),
  'gnupg::keyinfo' => 
  array (
    0 => 'array<array-key, mixed>',
    'pattern' => 'string',
  ),
  'gnupg::setarmor' => 
  array (
    0 => 'bool',
    'armor' => 'int',
  ),
  'gnupg::seterrormode' => 
  array (
    0 => 'void',
    'errormode' => 'int',
  ),
  'gnupg::setsignmode' => 
  array (
    0 => 'bool',
    'signmode' => 'int',
  ),
  'gnupg::sign' => 
  array (
    0 => 'false|string',
    'plaintext' => 'string',
  ),
  'gnupg::verify' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'signed_text' => 'string',
    'signature' => 'string',
    '&plaintext=' => 'string',
  ),
  'gnupg_adddecryptkey' => 
  array (
    0 => 'bool',
    'identifier' => 'resource',
    'fingerprint' => 'string',
    'passphrase' => 'string',
  ),
  'gnupg_addencryptkey' => 
  array (
    0 => 'bool',
    'identifier' => 'resource',
    'fingerprint' => 'string',
  ),
  'gnupg_addsignkey' => 
  array (
    0 => 'bool',
    'identifier' => 'resource',
    'fingerprint' => 'string',
    'passphrase=' => 'string',
  ),
  'gnupg_cleardecryptkeys' => 
  array (
    0 => 'bool',
    'identifier' => 'resource',
  ),
  'gnupg_clearencryptkeys' => 
  array (
    0 => 'bool',
    'identifier' => 'resource',
  ),
  'gnupg_clearsignkeys' => 
  array (
    0 => 'bool',
    'identifier' => 'resource',
  ),
  'gnupg_decrypt' => 
  array (
    0 => 'string',
    'identifier' => 'resource',
    'text' => 'string',
  ),
  'gnupg_decryptverify' => 
  array (
    0 => 'array<array-key, mixed>',
    'identifier' => 'resource',
    'text' => 'string',
    'plaintext' => 'string',
  ),
  'gnupg_encrypt' => 
  array (
    0 => 'string',
    'identifier' => 'resource',
    'plaintext' => 'string',
  ),
  'gnupg_encryptsign' => 
  array (
    0 => 'string',
    'identifier' => 'resource',
    'plaintext' => 'string',
  ),
  'gnupg_export' => 
  array (
    0 => 'string',
    'identifier' => 'resource',
    'fingerprint' => 'string',
  ),
  'gnupg_geterror' => 
  array (
    0 => 'string',
    'identifier' => 'resource',
  ),
  'gnupg_getprotocol' => 
  array (
    0 => 'int',
    'identifier' => 'resource',
  ),
  'gnupg_import' => 
  array (
    0 => 'array<array-key, mixed>',
    'identifier' => 'resource',
    'keydata' => 'string',
  ),
  'gnupg_init' => 
  array (
    0 => 'resource',
  ),
  'gnupg_keyinfo' => 
  array (
    0 => 'array<array-key, mixed>',
    'identifier' => 'resource',
    'pattern' => 'string',
  ),
  'gnupg_setarmor' => 
  array (
    0 => 'bool',
    'identifier' => 'resource',
    'armor' => 'int',
  ),
  'gnupg_seterrormode' => 
  array (
    0 => 'void',
    'identifier' => 'resource',
    'errormode' => 'int',
  ),
  'gnupg_setsignmode' => 
  array (
    0 => 'bool',
    'identifier' => 'resource',
    'signmode' => 'int',
  ),
  'gnupg_sign' => 
  array (
    0 => 'string',
    'identifier' => 'resource',
    'plaintext' => 'string',
  ),
  'gnupg_verify' => 
  array (
    0 => 'array<array-key, mixed>',
    'identifier' => 'resource',
    'signed_text' => 'string',
    'signature' => 'string',
    'plaintext=' => 'string',
  ),
  'go' => 
  array (
    0 => 'false|int',
    'func' => 'callable',
  ),
  'gopher_parsedir' => 
  array (
    0 => 'array<array-key, mixed>',
    'dirent' => 'string',
  ),
  'grapheme_extract' => 
  array (
    0 => 'false|string',
    'haystack' => 'string',
    'size' => 'int',
    'type=' => 'int',
    'offset=' => 'int',
    '&w_next=' => 'int',
  ),
  'grapheme_stripos' => 
  array (
    0 => 'false|int',
    'haystack' => 'string',
    'needle' => 'string',
    'offset=' => 'int',
  ),
  'grapheme_stristr' => 
  array (
    0 => 'false|string',
    'haystack' => 'string',
    'needle' => 'string',
    'beforeNeedle=' => 'bool',
  ),
  'grapheme_strlen' => 
  array (
    0 => 'false|int<0, max>|null',
    'string' => 'string',
  ),
  'grapheme_strpos' => 
  array (
    0 => 'false|int',
    'haystack' => 'string',
    'needle' => 'string',
    'offset=' => 'int',
  ),
  'grapheme_strripos' => 
  array (
    0 => 'false|int',
    'haystack' => 'string',
    'needle' => 'string',
    'offset=' => 'int',
  ),
  'grapheme_strrpos' => 
  array (
    0 => 'false|int',
    'haystack' => 'string',
    'needle' => 'string',
    'offset=' => 'int',
  ),
  'grapheme_strstr' => 
  array (
    0 => 'false|string',
    'haystack' => 'string',
    'needle' => 'string',
    'beforeNeedle=' => 'bool',
  ),
  'grapheme_substr' => 
  array (
    0 => 'false|string',
    'string' => 'string',
    'offset' => 'int',
    'length=' => 'int|null',
  ),
  'gregoriantojd' => 
  array (
    0 => 'int',
    'month' => 'int',
    'day' => 'int',
    'year' => 'int',
  ),
  'gridobj::set' => 
  array (
    0 => 'int',
    'property_name' => 'string',
    'new_value' => 'mixed',
  ),
  'grpc\\call::__construct' => 
  array (
    0 => 'void',
    'channel' => 'Grpc\\Channel',
    'method' => 'string',
    'deadline' => 'Grpc\\Timeval',
    'host_override=' => 'mixed',
  ),
  'grpc\\call::cancel' => 
  array (
    0 => 'mixed',
  ),
  'grpc\\call::getpeer' => 
  array (
    0 => 'string',
  ),
  'grpc\\call::setcredentials' => 
  array (
    0 => 'int',
    'credentials' => 'Grpc\\CallCredentials',
  ),
  'grpc\\call::startbatch' => 
  array (
    0 => 'object',
    'ops' => 'array<array-key, mixed>',
  ),
  'grpc\\callcredentials::createcomposite' => 
  array (
    0 => 'Grpc\\CallCredentials',
    'creds1' => 'Grpc\\CallCredentials',
    'creds2' => 'Grpc\\CallCredentials',
  ),
  'grpc\\callcredentials::createfromplugin' => 
  array (
    0 => 'Grpc\\CallCredentials',
    'callback' => 'Closure',
  ),
  'grpc\\channel::__construct' => 
  array (
    0 => 'void',
    'target' => 'string',
    'args' => 'array<array-key, mixed>',
  ),
  'grpc\\channel::close' => 
  array (
    0 => 'mixed',
  ),
  'grpc\\channel::getconnectivitystate' => 
  array (
    0 => 'int',
    'try_to_connect=' => 'bool',
  ),
  'grpc\\channel::gettarget' => 
  array (
    0 => 'string',
  ),
  'grpc\\channel::watchconnectivitystate' => 
  array (
    0 => 'bool',
    'last_state' => 'int',
    'deadline' => 'Grpc\\Timeval',
  ),
  'grpc\\channelcredentials::createcomposite' => 
  array (
    0 => 'Grpc\\ChannelCredentials',
    'channel_creds' => 'Grpc\\ChannelCredentials',
    'call_creds' => 'Grpc\\CallCredentials',
  ),
  'grpc\\channelcredentials::createdefault' => 
  array (
    0 => 'Grpc\\ChannelCredentials',
  ),
  'grpc\\channelcredentials::createinsecure' => 
  array (
    0 => 'null',
  ),
  'grpc\\channelcredentials::createssl' => 
  array (
    0 => 'Grpc\\ChannelCredentials',
    'pem_root_certs=' => 'string',
    'pem_private_key=' => 'string',
    'pem_cert_chain=' => 'string',
  ),
  'grpc\\channelcredentials::createxds' => 
  array (
    0 => 'mixed',
    'fallback_creds' => 'Grpc\\ChannelCredentials|null',
  ),
  'grpc\\channelcredentials::invalidatedefaultrootspem' => 
  array (
    0 => 'mixed',
  ),
  'grpc\\channelcredentials::isdefaultrootspemset' => 
  array (
    0 => 'mixed',
  ),
  'grpc\\channelcredentials::setdefaultrootspem' => 
  array (
    0 => 'mixed',
    'pem_roots' => 'string',
  ),
  'grpc\\server::__construct' => 
  array (
    0 => 'void',
    'args=' => 'array<array-key, mixed>',
  ),
  'grpc\\server::addhttp2port' => 
  array (
    0 => 'bool',
    'addr' => 'string',
  ),
  'grpc\\server::addsecurehttp2port' => 
  array (
    0 => 'bool',
    'addr' => 'string',
    'server_creds' => 'Grpc\\ServerCredentials',
  ),
  'grpc\\server::requestcall' => 
  array (
    0 => 'mixed',
  ),
  'grpc\\server::start' => 
  array (
    0 => 'mixed',
  ),
  'grpc\\servercredentials::createssl' => 
  array (
    0 => 'object',
    'pem_root_certs' => 'string',
    'pem_private_key' => 'string',
    'pem_cert_chain' => 'string',
  ),
  'grpc\\timeval::__construct' => 
  array (
    0 => 'void',
    'microseconds' => 'int',
  ),
  'grpc\\timeval::add' => 
  array (
    0 => 'Grpc\\Timeval',
    'timeval' => 'Grpc\\Timeval',
  ),
  'grpc\\timeval::compare' => 
  array (
    0 => 'int',
    'a_timeval' => 'Grpc\\Timeval',
    'b_timeval' => 'Grpc\\Timeval',
  ),
  'grpc\\timeval::inffuture' => 
  array (
    0 => 'Grpc\\Timeval',
  ),
  'grpc\\timeval::infpast' => 
  array (
    0 => 'Grpc\\Timeval',
  ),
  'grpc\\timeval::now' => 
  array (
    0 => 'Grpc\\Timeval',
  ),
  'grpc\\timeval::similar' => 
  array (
    0 => 'bool',
    'a_timeval' => 'Grpc\\Timeval',
    'b_timeval' => 'Grpc\\Timeval',
    'threshold_timeval' => 'Grpc\\Timeval',
  ),
  'grpc\\timeval::sleepuntil' => 
  array (
    0 => 'mixed',
  ),
  'grpc\\timeval::subtract' => 
  array (
    0 => 'Grpc\\Timeval',
    'timeval' => 'Grpc\\Timeval',
  ),
  'grpc\\timeval::zero' => 
  array (
    0 => 'Grpc\\Timeval',
  ),
  'gupnp_context_get_host_ip' => 
  array (
    0 => 'string',
    'context' => 'resource',
  ),
  'gupnp_context_get_port' => 
  array (
    0 => 'int',
    'context' => 'resource',
  ),
  'gupnp_context_get_subscription_timeout' => 
  array (
    0 => 'int',
    'context' => 'resource',
  ),
  'gupnp_context_host_path' => 
  array (
    0 => 'bool',
    'context' => 'resource',
    'local_path' => 'string',
    'server_path' => 'string',
  ),
  'gupnp_context_new' => 
  array (
    0 => 'resource',
    'host_ip=' => 'string',
    'port=' => 'int',
  ),
  'gupnp_context_set_subscription_timeout' => 
  array (
    0 => 'void',
    'context' => 'resource',
    'timeout' => 'int',
  ),
  'gupnp_context_timeout_add' => 
  array (
    0 => 'bool',
    'context' => 'resource',
    'timeout' => 'int',
    'callback' => 'mixed',
    'arg=' => 'mixed',
  ),
  'gupnp_context_unhost_path' => 
  array (
    0 => 'bool',
    'context' => 'resource',
    'server_path' => 'string',
  ),
  'gupnp_control_point_browse_start' => 
  array (
    0 => 'bool',
    'cpoint' => 'resource',
  ),
  'gupnp_control_point_browse_stop' => 
  array (
    0 => 'bool',
    'cpoint' => 'resource',
  ),
  'gupnp_control_point_callback_set' => 
  array (
    0 => 'bool',
    'cpoint' => 'resource',
    'signal' => 'int',
    'callback' => 'mixed',
    'arg=' => 'mixed',
  ),
  'gupnp_control_point_new' => 
  array (
    0 => 'resource',
    'context' => 'resource',
    'target' => 'string',
  ),
  'gupnp_device_action_callback_set' => 
  array (
    0 => 'bool',
    'root_device' => 'resource',
    'signal' => 'int',
    'action_name' => 'string',
    'callback' => 'mixed',
    'arg=' => 'mixed',
  ),
  'gupnp_device_info_get' => 
  array (
    0 => 'array<array-key, mixed>',
    'root_device' => 'resource',
  ),
  'gupnp_device_info_get_service' => 
  array (
    0 => 'resource',
    'root_device' => 'resource',
    'type' => 'string',
  ),
  'gupnp_root_device_get_available' => 
  array (
    0 => 'bool',
    'root_device' => 'resource',
  ),
  'gupnp_root_device_get_relative_location' => 
  array (
    0 => 'string',
    'root_device' => 'resource',
  ),
  'gupnp_root_device_new' => 
  array (
    0 => 'resource',
    'context' => 'resource',
    'location' => 'string',
    'description_dir' => 'string',
  ),
  'gupnp_root_device_set_available' => 
  array (
    0 => 'bool',
    'root_device' => 'resource',
    'available' => 'bool',
  ),
  'gupnp_root_device_start' => 
  array (
    0 => 'bool',
    'root_device' => 'resource',
  ),
  'gupnp_root_device_stop' => 
  array (
    0 => 'bool',
    'root_device' => 'resource',
  ),
  'gupnp_service_action_get' => 
  array (
    0 => 'mixed',
    'action' => 'resource',
    'name' => 'string',
    'type' => 'int',
  ),
  'gupnp_service_action_return' => 
  array (
    0 => 'bool',
    'action' => 'resource',
  ),
  'gupnp_service_action_return_error' => 
  array (
    0 => 'bool',
    'action' => 'resource',
    'error_code' => 'int',
    'error_description=' => 'string',
  ),
  'gupnp_service_action_set' => 
  array (
    0 => 'bool',
    'action' => 'resource',
    'name' => 'string',
    'type' => 'int',
    'value' => 'mixed',
  ),
  'gupnp_service_freeze_notify' => 
  array (
    0 => 'bool',
    'service' => 'resource',
  ),
  'gupnp_service_info_get' => 
  array (
    0 => 'array<array-key, mixed>',
    'proxy' => 'resource',
  ),
  'gupnp_service_info_get_introspection' => 
  array (
    0 => 'mixed',
    'proxy' => 'resource',
    'callback=' => 'mixed',
    'arg=' => 'mixed',
  ),
  'gupnp_service_introspection_get_state_variable' => 
  array (
    0 => 'array<array-key, mixed>',
    'introspection' => 'resource',
    'variable_name' => 'string',
  ),
  'gupnp_service_notify' => 
  array (
    0 => 'bool',
    'service' => 'resource',
    'name' => 'string',
    'type' => 'int',
    'value' => 'mixed',
  ),
  'gupnp_service_proxy_action_get' => 
  array (
    0 => 'mixed',
    'proxy' => 'resource',
    'action' => 'string',
    'name' => 'string',
    'type' => 'int',
  ),
  'gupnp_service_proxy_action_set' => 
  array (
    0 => 'bool',
    'proxy' => 'resource',
    'action' => 'string',
    'name' => 'string',
    'value' => 'mixed',
    'type' => 'int',
  ),
  'gupnp_service_proxy_add_notify' => 
  array (
    0 => 'bool',
    'proxy' => 'resource',
    'value' => 'string',
    'type' => 'int',
    'callback' => 'mixed',
    'arg=' => 'mixed',
  ),
  'gupnp_service_proxy_callback_set' => 
  array (
    0 => 'bool',
    'proxy' => 'resource',
    'signal' => 'int',
    'callback' => 'mixed',
    'arg=' => 'mixed',
  ),
  'gupnp_service_proxy_get_subscribed' => 
  array (
    0 => 'bool',
    'proxy' => 'resource',
  ),
  'gupnp_service_proxy_remove_notify' => 
  array (
    0 => 'bool',
    'proxy' => 'resource',
    'value' => 'string',
  ),
  'gupnp_service_proxy_send_action' => 
  array (
    0 => 'array<array-key, mixed>',
    'proxy' => 'resource',
    'action' => 'string',
    'in_params' => 'array<array-key, mixed>',
    'out_params' => 'array<array-key, mixed>',
  ),
  'gupnp_service_proxy_set_subscribed' => 
  array (
    0 => 'bool',
    'proxy' => 'resource',
    'subscribed' => 'bool',
  ),
  'gupnp_service_thaw_notify' => 
  array (
    0 => 'bool',
    'service' => 'resource',
  ),
  'gzclose' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
  ),
  'gzcompress' => 
  array (
    0 => 'false|string',
    'data' => 'string',
    'level=' => 'int',
    'encoding=' => 'int',
  ),
  'gzdecode' => 
  array (
    0 => 'false|string',
    'data' => 'string',
    'max_length=' => 'int',
  ),
  'gzdeflate' => 
  array (
    0 => 'false|string',
    'data' => 'string',
    'level=' => 'int',
    'encoding=' => 'int',
  ),
  'gzencode' => 
  array (
    0 => 'false|string',
    'data' => 'string',
    'level=' => 'int',
    'encoding=' => 'int',
  ),
  'gzeof' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
  ),
  'gzfile' => 
  array (
    0 => 'false|list<string>',
    'filename' => 'string',
    'use_include_path=' => 'int',
  ),
  'gzgetc' => 
  array (
    0 => 'false|string',
    'stream' => 'resource',
  ),
  'gzgets' => 
  array (
    0 => 'false|string',
    'stream' => 'resource',
    'length=' => 'int|null',
  ),
  'gzinflate' => 
  array (
    0 => 'false|string',
    'data' => 'string',
    'max_length=' => 'int',
  ),
  'gzopen' => 
  array (
    0 => 'false|resource',
    'filename' => 'string',
    'mode' => 'string',
    'use_include_path=' => 'int',
  ),
  'gzpassthru' => 
  array (
    0 => 'int',
    'stream' => 'resource',
  ),
  'gzputs' => 
  array (
    0 => 'false|int',
    'stream' => 'resource',
    'data' => 'string',
    'length=' => 'int|null',
  ),
  'gzread' => 
  array (
    0 => 'false|string',
    'stream' => 'resource',
    'length' => 'int',
  ),
  'gzrewind' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
  ),
  'gzseek' => 
  array (
    0 => 'int',
    'stream' => 'resource',
    'offset' => 'int',
    'whence=' => 'int',
  ),
  'gztell' => 
  array (
    0 => 'false|int',
    'stream' => 'resource',
  ),
  'gzuncompress' => 
  array (
    0 => 'false|string',
    'data' => 'string',
    'max_length=' => 'int',
  ),
  'gzwrite' => 
  array (
    0 => 'false|int',
    'stream' => 'resource',
    'data' => 'string',
    'length=' => 'int|null',
  ),
  'haruannotation::setborderstyle' => 
  array (
    0 => 'bool',
    'width' => 'float',
    'dash_on' => 'int',
    'dash_off' => 'int',
  ),
  'haruannotation::sethighlightmode' => 
  array (
    0 => 'bool',
    'mode' => 'int',
  ),
  'haruannotation::seticon' => 
  array (
    0 => 'bool',
    'icon' => 'int',
  ),
  'haruannotation::setopened' => 
  array (
    0 => 'bool',
    'opened' => 'bool',
  ),
  'harudestination::setfit' => 
  array (
    0 => 'bool',
  ),
  'harudestination::setfitb' => 
  array (
    0 => 'bool',
  ),
  'harudestination::setfitbh' => 
  array (
    0 => 'bool',
    'top' => 'float',
  ),
  'harudestination::setfitbv' => 
  array (
    0 => 'bool',
    'left' => 'float',
  ),
  'harudestination::setfith' => 
  array (
    0 => 'bool',
    'top' => 'float',
  ),
  'harudestination::setfitr' => 
  array (
    0 => 'bool',
    'left' => 'float',
    'bottom' => 'float',
    'right' => 'float',
    'top' => 'float',
  ),
  'harudestination::setfitv' => 
  array (
    0 => 'bool',
    'left' => 'float',
  ),
  'harudestination::setxyz' => 
  array (
    0 => 'bool',
    'left' => 'float',
    'top' => 'float',
    'zoom' => 'float',
  ),
  'harudoc::__construct' => 
  array (
    0 => 'void',
  ),
  'harudoc::addpage' => 
  array (
    0 => 'object',
  ),
  'harudoc::addpagelabel' => 
  array (
    0 => 'bool',
    'first_page' => 'int',
    'style' => 'int',
    'first_num' => 'int',
    'prefix=' => 'string',
  ),
  'harudoc::createoutline' => 
  array (
    0 => 'object',
    'title' => 'string',
    'parent_outline=' => 'object',
    'encoder=' => 'object',
  ),
  'harudoc::getcurrentencoder' => 
  array (
    0 => 'object',
  ),
  'harudoc::getcurrentpage' => 
  array (
    0 => 'object',
  ),
  'harudoc::getencoder' => 
  array (
    0 => 'object',
    'encoding' => 'string',
  ),
  'harudoc::getfont' => 
  array (
    0 => 'object',
    'fontname' => 'string',
    'encoding=' => 'string',
  ),
  'harudoc::getinfoattr' => 
  array (
    0 => 'string',
    'type' => 'int',
  ),
  'harudoc::getpagelayout' => 
  array (
    0 => 'int',
  ),
  'harudoc::getpagemode' => 
  array (
    0 => 'int',
  ),
  'harudoc::getstreamsize' => 
  array (
    0 => 'int',
  ),
  'harudoc::insertpage' => 
  array (
    0 => 'object',
    'page' => 'object',
  ),
  'harudoc::loadjpeg' => 
  array (
    0 => 'object',
    'filename' => 'string',
  ),
  'harudoc::loadpng' => 
  array (
    0 => 'object',
    'filename' => 'string',
    'deferred=' => 'bool',
  ),
  'harudoc::loadraw' => 
  array (
    0 => 'object',
    'filename' => 'string',
    'width' => 'int',
    'height' => 'int',
    'color_space' => 'int',
  ),
  'harudoc::loadttc' => 
  array (
    0 => 'string',
    'fontfile' => 'string',
    'index' => 'int',
    'embed=' => 'bool',
  ),
  'harudoc::loadttf' => 
  array (
    0 => 'string',
    'fontfile' => 'string',
    'embed=' => 'bool',
  ),
  'harudoc::loadtype1' => 
  array (
    0 => 'string',
    'afmfile' => 'string',
    'pfmfile=' => 'string',
  ),
  'harudoc::output' => 
  array (
    0 => 'bool',
  ),
  'harudoc::readfromstream' => 
  array (
    0 => 'string',
    'bytes' => 'int',
  ),
  'harudoc::reseterror' => 
  array (
    0 => 'bool',
  ),
  'harudoc::resetstream' => 
  array (
    0 => 'bool',
  ),
  'harudoc::save' => 
  array (
    0 => 'bool',
    'file' => 'string',
  ),
  'harudoc::savetostream' => 
  array (
    0 => 'bool',
  ),
  'harudoc::setcompressionmode' => 
  array (
    0 => 'bool',
    'mode' => 'int',
  ),
  'harudoc::setcurrentencoder' => 
  array (
    0 => 'bool',
    'encoding' => 'string',
  ),
  'harudoc::setencryptionmode' => 
  array (
    0 => 'bool',
    'mode' => 'int',
    'key_len=' => 'int',
  ),
  'harudoc::setinfoattr' => 
  array (
    0 => 'bool',
    'type' => 'int',
    'info' => 'string',
  ),
  'harudoc::setinfodateattr' => 
  array (
    0 => 'bool',
    'type' => 'int',
    'year' => 'int',
    'month' => 'int',
    'day' => 'int',
    'hour' => 'int',
    'min' => 'int',
    'sec' => 'int',
    'ind' => 'string',
    'off_hour' => 'int',
    'off_min' => 'int',
  ),
  'harudoc::setopenaction' => 
  array (
    0 => 'bool',
    'destination' => 'object',
  ),
  'harudoc::setpagelayout' => 
  array (
    0 => 'bool',
    'layout' => 'int',
  ),
  'harudoc::setpagemode' => 
  array (
    0 => 'bool',
    'mode' => 'int',
  ),
  'harudoc::setpagesconfiguration' => 
  array (
    0 => 'bool',
    'page_per_pages' => 'int',
  ),
  'harudoc::setpassword' => 
  array (
    0 => 'bool',
    'owner_password' => 'string',
    'user_password' => 'string',
  ),
  'harudoc::setpermission' => 
  array (
    0 => 'bool',
    'permission' => 'int',
  ),
  'harudoc::usecnsencodings' => 
  array (
    0 => 'bool',
  ),
  'harudoc::usecnsfonts' => 
  array (
    0 => 'bool',
  ),
  'harudoc::usecntencodings' => 
  array (
    0 => 'bool',
  ),
  'harudoc::usecntfonts' => 
  array (
    0 => 'bool',
  ),
  'harudoc::usejpencodings' => 
  array (
    0 => 'bool',
  ),
  'harudoc::usejpfonts' => 
  array (
    0 => 'bool',
  ),
  'harudoc::usekrencodings' => 
  array (
    0 => 'bool',
  ),
  'harudoc::usekrfonts' => 
  array (
    0 => 'bool',
  ),
  'haruencoder::getbytetype' => 
  array (
    0 => 'int',
    'text' => 'string',
    'index' => 'int',
  ),
  'haruencoder::gettype' => 
  array (
    0 => 'int',
  ),
  'haruencoder::getunicode' => 
  array (
    0 => 'int',
    'character' => 'int',
  ),
  'haruencoder::getwritingmode' => 
  array (
    0 => 'int',
  ),
  'harufont::getascent' => 
  array (
    0 => 'int',
  ),
  'harufont::getcapheight' => 
  array (
    0 => 'int',
  ),
  'harufont::getdescent' => 
  array (
    0 => 'int',
  ),
  'harufont::getencodingname' => 
  array (
    0 => 'string',
  ),
  'harufont::getfontname' => 
  array (
    0 => 'string',
  ),
  'harufont::gettextwidth' => 
  array (
    0 => 'array<array-key, mixed>',
    'text' => 'string',
  ),
  'harufont::getunicodewidth' => 
  array (
    0 => 'int',
    'character' => 'int',
  ),
  'harufont::getxheight' => 
  array (
    0 => 'int',
  ),
  'harufont::measuretext' => 
  array (
    0 => 'int',
    'text' => 'string',
    'width' => 'float',
    'font_size' => 'float',
    'char_space' => 'float',
    'word_space' => 'float',
    'word_wrap=' => 'bool',
  ),
  'haruimage::getbitspercomponent' => 
  array (
    0 => 'int',
  ),
  'haruimage::getcolorspace' => 
  array (
    0 => 'string',
  ),
  'haruimage::getheight' => 
  array (
    0 => 'int',
  ),
  'haruimage::getsize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'haruimage::getwidth' => 
  array (
    0 => 'int',
  ),
  'haruimage::setcolormask' => 
  array (
    0 => 'bool',
    'rmin' => 'int',
    'rmax' => 'int',
    'gmin' => 'int',
    'gmax' => 'int',
    'bmin' => 'int',
    'bmax' => 'int',
  ),
  'haruimage::setmaskimage' => 
  array (
    0 => 'bool',
    'mask_image' => 'object',
  ),
  'haruoutline::setdestination' => 
  array (
    0 => 'bool',
    'destination' => 'object',
  ),
  'haruoutline::setopened' => 
  array (
    0 => 'bool',
    'opened' => 'bool',
  ),
  'harupage::arc' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
    'ray' => 'float',
    'ang1' => 'float',
    'ang2' => 'float',
  ),
  'harupage::begintext' => 
  array (
    0 => 'bool',
  ),
  'harupage::circle' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
    'ray' => 'float',
  ),
  'harupage::closepath' => 
  array (
    0 => 'bool',
  ),
  'harupage::concat' => 
  array (
    0 => 'bool',
    'a' => 'float',
    'b' => 'float',
    'c' => 'float',
    'd' => 'float',
    'x' => 'float',
    'y' => 'float',
  ),
  'harupage::createdestination' => 
  array (
    0 => 'object',
  ),
  'harupage::createlinkannotation' => 
  array (
    0 => 'object',
    'rectangle' => 'array<array-key, mixed>',
    'destination' => 'object',
  ),
  'harupage::createtextannotation' => 
  array (
    0 => 'object',
    'rectangle' => 'array<array-key, mixed>',
    'text' => 'string',
    'encoder=' => 'object',
  ),
  'harupage::createurlannotation' => 
  array (
    0 => 'object',
    'rectangle' => 'array<array-key, mixed>',
    'url' => 'string',
  ),
  'harupage::curveto' => 
  array (
    0 => 'bool',
    'x1' => 'float',
    'y1' => 'float',
    'x2' => 'float',
    'y2' => 'float',
    'x3' => 'float',
    'y3' => 'float',
  ),
  'harupage::curveto2' => 
  array (
    0 => 'bool',
    'x2' => 'float',
    'y2' => 'float',
    'x3' => 'float',
    'y3' => 'float',
  ),
  'harupage::curveto3' => 
  array (
    0 => 'bool',
    'x1' => 'float',
    'y1' => 'float',
    'x3' => 'float',
    'y3' => 'float',
  ),
  'harupage::drawimage' => 
  array (
    0 => 'bool',
    'image' => 'object',
    'x' => 'float',
    'y' => 'float',
    'width' => 'float',
    'height' => 'float',
  ),
  'harupage::ellipse' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
    'xray' => 'float',
    'yray' => 'float',
  ),
  'harupage::endpath' => 
  array (
    0 => 'bool',
  ),
  'harupage::endtext' => 
  array (
    0 => 'bool',
  ),
  'harupage::eofill' => 
  array (
    0 => 'bool',
  ),
  'harupage::eofillstroke' => 
  array (
    0 => 'bool',
    'close_path=' => 'bool',
  ),
  'harupage::fill' => 
  array (
    0 => 'bool',
  ),
  'harupage::fillstroke' => 
  array (
    0 => 'bool',
    'close_path=' => 'bool',
  ),
  'harupage::getcharspace' => 
  array (
    0 => 'float',
  ),
  'harupage::getcmykfill' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'harupage::getcmykstroke' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'harupage::getcurrentfont' => 
  array (
    0 => 'object',
  ),
  'harupage::getcurrentfontsize' => 
  array (
    0 => 'float',
  ),
  'harupage::getcurrentpos' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'harupage::getcurrenttextpos' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'harupage::getdash' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'harupage::getfillingcolorspace' => 
  array (
    0 => 'int',
  ),
  'harupage::getflatness' => 
  array (
    0 => 'float',
  ),
  'harupage::getgmode' => 
  array (
    0 => 'int',
  ),
  'harupage::getgrayfill' => 
  array (
    0 => 'float',
  ),
  'harupage::getgraystroke' => 
  array (
    0 => 'float',
  ),
  'harupage::getheight' => 
  array (
    0 => 'float',
  ),
  'harupage::gethorizontalscaling' => 
  array (
    0 => 'float',
  ),
  'harupage::getlinecap' => 
  array (
    0 => 'int',
  ),
  'harupage::getlinejoin' => 
  array (
    0 => 'int',
  ),
  'harupage::getlinewidth' => 
  array (
    0 => 'float',
  ),
  'harupage::getmiterlimit' => 
  array (
    0 => 'float',
  ),
  'harupage::getrgbfill' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'harupage::getrgbstroke' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'harupage::getstrokingcolorspace' => 
  array (
    0 => 'int',
  ),
  'harupage::gettextleading' => 
  array (
    0 => 'float',
  ),
  'harupage::gettextmatrix' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'harupage::gettextrenderingmode' => 
  array (
    0 => 'int',
  ),
  'harupage::gettextrise' => 
  array (
    0 => 'float',
  ),
  'harupage::gettextwidth' => 
  array (
    0 => 'float',
    'text' => 'string',
  ),
  'harupage::gettransmatrix' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'harupage::getwidth' => 
  array (
    0 => 'float',
  ),
  'harupage::getwordspace' => 
  array (
    0 => 'float',
  ),
  'harupage::lineto' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'harupage::measuretext' => 
  array (
    0 => 'int',
    'text' => 'string',
    'width' => 'float',
    'wordwrap=' => 'bool',
  ),
  'harupage::movetextpos' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
    'set_leading=' => 'bool',
  ),
  'harupage::moveto' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'harupage::movetonextline' => 
  array (
    0 => 'bool',
  ),
  'harupage::rectangle' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
    'width' => 'float',
    'height' => 'float',
  ),
  'harupage::setcharspace' => 
  array (
    0 => 'bool',
    'char_space' => 'float',
  ),
  'harupage::setcmykfill' => 
  array (
    0 => 'bool',
    'c' => 'float',
    'm' => 'float',
    'y' => 'float',
    'k' => 'float',
  ),
  'harupage::setcmykstroke' => 
  array (
    0 => 'bool',
    'c' => 'float',
    'm' => 'float',
    'y' => 'float',
    'k' => 'float',
  ),
  'harupage::setdash' => 
  array (
    0 => 'bool',
    'pattern' => 'array<array-key, mixed>',
    'phase' => 'int',
  ),
  'harupage::setflatness' => 
  array (
    0 => 'bool',
    'flatness' => 'float',
  ),
  'harupage::setfontandsize' => 
  array (
    0 => 'bool',
    'font' => 'object',
    'size' => 'float',
  ),
  'harupage::setgrayfill' => 
  array (
    0 => 'bool',
    'value' => 'float',
  ),
  'harupage::setgraystroke' => 
  array (
    0 => 'bool',
    'value' => 'float',
  ),
  'harupage::setheight' => 
  array (
    0 => 'bool',
    'height' => 'float',
  ),
  'harupage::sethorizontalscaling' => 
  array (
    0 => 'bool',
    'scaling' => 'float',
  ),
  'harupage::setlinecap' => 
  array (
    0 => 'bool',
    'cap' => 'int',
  ),
  'harupage::setlinejoin' => 
  array (
    0 => 'bool',
    'join' => 'int',
  ),
  'harupage::setlinewidth' => 
  array (
    0 => 'bool',
    'width' => 'float',
  ),
  'harupage::setmiterlimit' => 
  array (
    0 => 'bool',
    'limit' => 'float',
  ),
  'harupage::setrgbfill' => 
  array (
    0 => 'bool',
    'r' => 'float',
    'g' => 'float',
    'b' => 'float',
  ),
  'harupage::setrgbstroke' => 
  array (
    0 => 'bool',
    'r' => 'float',
    'g' => 'float',
    'b' => 'float',
  ),
  'harupage::setrotate' => 
  array (
    0 => 'bool',
    'angle' => 'int',
  ),
  'harupage::setsize' => 
  array (
    0 => 'bool',
    'size' => 'int',
    'direction' => 'int',
  ),
  'harupage::setslideshow' => 
  array (
    0 => 'bool',
    'type' => 'int',
    'disp_time' => 'float',
    'trans_time' => 'float',
  ),
  'harupage::settextleading' => 
  array (
    0 => 'bool',
    'text_leading' => 'float',
  ),
  'harupage::settextmatrix' => 
  array (
    0 => 'bool',
    'a' => 'float',
    'b' => 'float',
    'c' => 'float',
    'd' => 'float',
    'x' => 'float',
    'y' => 'float',
  ),
  'harupage::settextrenderingmode' => 
  array (
    0 => 'bool',
    'mode' => 'int',
  ),
  'harupage::settextrise' => 
  array (
    0 => 'bool',
    'rise' => 'float',
  ),
  'harupage::setwidth' => 
  array (
    0 => 'bool',
    'width' => 'float',
  ),
  'harupage::setwordspace' => 
  array (
    0 => 'bool',
    'word_space' => 'float',
  ),
  'harupage::showtext' => 
  array (
    0 => 'bool',
    'text' => 'string',
  ),
  'harupage::showtextnextline' => 
  array (
    0 => 'bool',
    'text' => 'string',
    'word_space=' => 'float',
    'char_space=' => 'float',
  ),
  'harupage::stroke' => 
  array (
    0 => 'bool',
    'close_path=' => 'bool',
  ),
  'harupage::textout' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
    'text' => 'string',
  ),
  'harupage::textrect' => 
  array (
    0 => 'bool',
    'left' => 'float',
    'top' => 'float',
    'right' => 'float',
    'bottom' => 'float',
    'text' => 'string',
    'align=' => 'int',
  ),
  'hash' => 
  array (
    0 => 'non-empty-string',
    'algo' => 'string',
    'data' => 'string',
    'binary=' => 'bool',
  ),
  'hash_algos' => 
  array (
    0 => 'list<string>',
  ),
  'hash_copy' => 
  array (
    0 => 'HashContext',
    'context' => 'HashContext',
  ),
  'hash_equals' => 
  array (
    0 => 'bool',
    'known_string' => 'string',
    'user_string' => 'string',
  ),
  'hash_file' => 
  array (
    0 => 'false|non-empty-string',
    'algo' => 'string',
    'filename' => 'string',
    'binary=' => 'bool',
  ),
  'hash_final' => 
  array (
    0 => 'non-empty-string',
    'context' => 'HashContext',
    'binary=' => 'bool',
  ),
  'hash_hkdf' => 
  array (
    0 => 'non-empty-string',
    'algo' => 'string',
    'key' => 'string',
    'length=' => 'int',
    'info=' => 'string',
    'salt=' => 'string',
  ),
  'hash_hmac' => 
  array (
    0 => 'non-empty-string',
    'algo' => 'string',
    'data' => 'string',
    'key' => 'string',
    'binary=' => 'bool',
  ),
  'hash_hmac_algos' => 
  array (
    0 => 'list<string>',
  ),
  'hash_hmac_file' => 
  array (
    0 => 'non-empty-string',
    'algo' => 'string',
    'filename' => 'string',
    'key' => 'string',
    'binary=' => 'bool',
  ),
  'hash_init' => 
  array (
    0 => 'HashContext',
    'algo' => 'string',
    'flags=' => 'int',
    'key=' => 'string',
  ),
  'hash_pbkdf2' => 
  array (
    0 => 'non-empty-string',
    'algo' => 'string',
    'password' => 'string',
    'salt' => 'string',
    'iterations' => 'int',
    'length=' => 'int',
    'binary=' => 'bool',
  ),
  'hash_update' => 
  array (
    0 => 'bool',
    'context' => 'HashContext',
    'data' => 'string',
  ),
  'hash_update_file' => 
  array (
    0 => 'bool',
    'context' => 'HashContext',
    'filename' => 'string',
    'stream_context=' => 'null|resource',
  ),
  'hash_update_stream' => 
  array (
    0 => 'int',
    'context' => 'HashContext',
    'stream' => 'resource',
    'length=' => 'int',
  ),
  'hashcontext::__construct' => 
  array (
    0 => 'void',
  ),
  'hashcontext::__serialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'hashcontext::__unserialize' => 
  array (
    0 => 'void',
    'data' => 'array<array-key, mixed>',
  ),
  'hashtableobj::clear' => 
  array (
    0 => 'void',
  ),
  'hashtableobj::get' => 
  array (
    0 => 'string',
    'key' => 'string',
  ),
  'hashtableobj::nextkey' => 
  array (
    0 => 'string',
    'previousKey' => 'string',
  ),
  'hashtableobj::remove' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'hashtableobj::set' => 
  array (
    0 => 'int',
    'key' => 'string',
    'value' => 'string',
  ),
  'header' => 
  array (
    0 => 'void',
    'header' => 'string',
    'replace=' => 'bool',
    'response_code=' => 'int',
  ),
  'header_register_callback' => 
  array (
    0 => 'bool',
    'callback' => 'callable():void',
  ),
  'header_remove' => 
  array (
    0 => 'void',
    'name=' => 'null|string',
  ),
  'headers_list' => 
  array (
    0 => 'list<string>',
  ),
  'headers_sent' => 
  array (
    0 => 'bool',
    '&w_filename=' => 'string',
    '&w_line=' => 'int',
  ),
  'hebrev' => 
  array (
    0 => 'string',
    'string' => 'string',
    'max_chars_per_line=' => 'int',
  ),
  'hex2bin' => 
  array (
    0 => 'false|string',
    'string' => 'string',
  ),
  'hexdec' => 
  array (
    0 => 'float|int',
    'hex_string' => 'string',
  ),
  'highlight_file' => 
  array (
    0 => 'bool|string',
    'filename' => 'string',
    'return=' => 'bool',
  ),
  'highlight_string' => 
  array (
    0 => 'bool|string',
    'string' => 'string',
    'return=' => 'bool',
  ),
  'hrtime' => 
  array (
    0 => 'array{0: int, 1: int}|false',
    'as_number=' => 'false',
  ),
  'hrtime\'1' => 
  array (
    0 => 'false|float|int',
    'as_number=' => 'true',
  ),
  'hrtime\\performancecounter::getelapsedticks' => 
  array (
    0 => 'int',
  ),
  'hrtime\\performancecounter::getfrequency' => 
  array (
    0 => 'int',
  ),
  'hrtime\\performancecounter::getlastelapsedticks' => 
  array (
    0 => 'int',
  ),
  'hrtime\\performancecounter::getticks' => 
  array (
    0 => 'int',
  ),
  'hrtime\\performancecounter::gettickssince' => 
  array (
    0 => 'int',
    'start' => 'int',
  ),
  'hrtime\\performancecounter::isrunning' => 
  array (
    0 => 'bool',
  ),
  'hrtime\\performancecounter::start' => 
  array (
    0 => 'void',
  ),
  'hrtime\\performancecounter::stop' => 
  array (
    0 => 'void',
  ),
  'hrtime\\stopwatch::getelapsedticks' => 
  array (
    0 => 'int',
  ),
  'hrtime\\stopwatch::getelapsedtime' => 
  array (
    0 => 'float',
    'unit=' => 'int',
  ),
  'hrtime\\stopwatch::getlastelapsedticks' => 
  array (
    0 => 'int',
  ),
  'hrtime\\stopwatch::getlastelapsedtime' => 
  array (
    0 => 'float',
    'unit=' => 'int',
  ),
  'hrtime\\stopwatch::isrunning' => 
  array (
    0 => 'bool',
  ),
  'hrtime\\stopwatch::start' => 
  array (
    0 => 'void',
  ),
  'hrtime\\stopwatch::stop' => 
  array (
    0 => 'void',
  ),
  'html_entity_decode' => 
  array (
    0 => 'string',
    'string' => 'string',
    'flags=' => 'int',
    'encoding=' => 'null|string',
  ),
  'htmlentities' => 
  array (
    0 => 'string',
    'string' => 'string',
    'flags=' => 'int',
    'encoding=' => 'null|string',
    'double_encode=' => 'bool',
  ),
  'htmlspecialchars' => 
  array (
    0 => 'string',
    'string' => 'string',
    'flags=' => 'int',
    'encoding=' => 'null|string',
    'double_encode=' => 'bool',
  ),
  'htmlspecialchars_decode' => 
  array (
    0 => 'string',
    'string' => 'string',
    'flags=' => 'int',
  ),
  'http\\client::__construct' => 
  array (
    0 => 'void',
    'driver=' => 'string',
    'persistent_handle_id=' => 'string',
  ),
  'http\\client::addcookies' => 
  array (
    0 => 'http\\Client',
    'cookies=' => 'array<array-key, mixed>|null',
  ),
  'http\\client::addssloptions' => 
  array (
    0 => 'http\\Client',
    'ssl_options=' => 'array<array-key, mixed>|null',
  ),
  'http\\client::attach' => 
  array (
    0 => 'void',
    'observer' => 'SplObserver',
  ),
  'http\\client::configure' => 
  array (
    0 => 'http\\Client',
    'settings' => 'array<array-key, mixed>',
  ),
  'http\\client::count' => 
  array (
    0 => 'int',
  ),
  'http\\client::dequeue' => 
  array (
    0 => 'http\\Client',
    'request' => 'http\\Client\\Request',
  ),
  'http\\client::detach' => 
  array (
    0 => 'void',
    'observer' => 'SplObserver',
  ),
  'http\\client::enableevents' => 
  array (
    0 => 'http\\Client',
    'enable=' => 'mixed',
  ),
  'http\\client::enablepipelining' => 
  array (
    0 => 'http\\Client',
    'enable=' => 'mixed',
  ),
  'http\\client::enqueue' => 
  array (
    0 => 'http\\Client',
    'request' => 'http\\Client\\Request',
    'callable=' => 'mixed',
  ),
  'http\\client::getavailableconfiguration' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\client::getavailabledrivers' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\client::getavailableoptions' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\client::getcookies' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\client::gethistory' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\client::getobservers' => 
  array (
    0 => 'SplObjectStorage',
  ),
  'http\\client::getoptions' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\client::getprogressinfo' => 
  array (
    0 => 'null|object',
    'request' => 'http\\Client\\Request',
  ),
  'http\\client::getresponse' => 
  array (
    0 => 'http\\Client\\Response|null',
    'request=' => 'http\\Client\\Request|null',
  ),
  'http\\client::getssloptions' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\client::gettransferinfo' => 
  array (
    0 => 'object',
    'request' => 'http\\Client\\Request',
  ),
  'http\\client::notify' => 
  array (
    0 => 'void',
    'request=' => 'http\\Client\\Request|null',
  ),
  'http\\client::once' => 
  array (
    0 => 'bool',
  ),
  'http\\client::requeue' => 
  array (
    0 => 'http\\Client',
    'request' => 'http\\Client\\Request',
    'callable=' => 'mixed',
  ),
  'http\\client::reset' => 
  array (
    0 => 'http\\Client',
  ),
  'http\\client::send' => 
  array (
    0 => 'http\\Client',
  ),
  'http\\client::setcookies' => 
  array (
    0 => 'http\\Client',
    'cookies=' => 'array<array-key, mixed>|null',
  ),
  'http\\client::setdebug' => 
  array (
    0 => 'http\\Client',
    'callback' => 'callable',
  ),
  'http\\client::setoptions' => 
  array (
    0 => 'http\\Client',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'http\\client::setssloptions' => 
  array (
    0 => 'http\\Client',
    'ssl_option=' => 'array<array-key, mixed>|null',
  ),
  'http\\client::wait' => 
  array (
    0 => 'bool',
    'timeout=' => 'mixed',
  ),
  'http\\client\\curl\\user::init' => 
  array (
    0 => 'mixed',
    'run' => 'callable',
  ),
  'http\\client\\curl\\user::once' => 
  array (
    0 => 'mixed',
  ),
  'http\\client\\curl\\user::send' => 
  array (
    0 => 'mixed',
  ),
  'http\\client\\curl\\user::socket' => 
  array (
    0 => 'mixed',
    'socket' => 'resource',
    'action' => 'int',
  ),
  'http\\client\\curl\\user::timer' => 
  array (
    0 => 'mixed',
    'timeout_ms' => 'int',
  ),
  'http\\client\\curl\\user::wait' => 
  array (
    0 => 'mixed',
    'timeout_ms=' => 'mixed',
  ),
  'http\\client\\request::__construct' => 
  array (
    0 => 'void',
    'method=' => 'mixed',
    'url=' => 'mixed',
    'headers=' => 'array<array-key, mixed>|null',
    'body=' => 'http\\Message\\Body|null',
  ),
  'http\\client\\request::__tostring' => 
  array (
    0 => 'string',
  ),
  'http\\client\\request::addbody' => 
  array (
    0 => 'http\\Message',
    'body' => 'http\\Message\\Body',
  ),
  'http\\client\\request::addheader' => 
  array (
    0 => 'http\\Message',
    'header' => 'string',
    'value' => 'mixed',
  ),
  'http\\client\\request::addheaders' => 
  array (
    0 => 'http\\Message',
    'headers' => 'array<array-key, mixed>',
    'append=' => 'mixed',
  ),
  'http\\client\\request::addquery' => 
  array (
    0 => 'http\\Client\\Request',
    'query_data' => 'mixed',
  ),
  'http\\client\\request::addssloptions' => 
  array (
    0 => 'http\\Client\\Request',
    'ssl_options=' => 'array<array-key, mixed>|null',
  ),
  'http\\client\\request::count' => 
  array (
    0 => 'int',
  ),
  'http\\client\\request::current' => 
  array (
    0 => 'mixed',
  ),
  'http\\client\\request::detach' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\client\\request::getbody' => 
  array (
    0 => 'http\\Message\\Body',
  ),
  'http\\client\\request::getcontenttype' => 
  array (
    0 => 'null|string',
  ),
  'http\\client\\request::getheader' => 
  array (
    0 => 'http\\Header|mixed',
    'header' => 'string',
    'into_class=' => 'mixed',
  ),
  'http\\client\\request::getheaders' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\client\\request::gethttpversion' => 
  array (
    0 => 'string',
  ),
  'http\\client\\request::getinfo' => 
  array (
    0 => 'null|string',
  ),
  'http\\client\\request::getoptions' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\client\\request::getparentmessage' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\client\\request::getquery' => 
  array (
    0 => 'null|string',
  ),
  'http\\client\\request::getrequestmethod' => 
  array (
    0 => 'false|string',
  ),
  'http\\client\\request::getrequesturl' => 
  array (
    0 => 'false|string',
  ),
  'http\\client\\request::getresponsecode' => 
  array (
    0 => 'false|int',
  ),
  'http\\client\\request::getresponsestatus' => 
  array (
    0 => 'false|string',
  ),
  'http\\client\\request::getssloptions' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\client\\request::gettype' => 
  array (
    0 => 'int',
  ),
  'http\\client\\request::ismultipart' => 
  array (
    0 => 'bool',
    '&boundary=' => 'mixed',
  ),
  'http\\client\\request::key' => 
  array (
    0 => 'int|string',
  ),
  'http\\client\\request::next' => 
  array (
    0 => 'void',
  ),
  'http\\client\\request::prepend' => 
  array (
    0 => 'http\\Message',
    'message' => 'http\\Message',
    'top=' => 'mixed',
  ),
  'http\\client\\request::reverse' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\client\\request::rewind' => 
  array (
    0 => 'void',
  ),
  'http\\client\\request::serialize' => 
  array (
    0 => 'string',
  ),
  'http\\client\\request::setbody' => 
  array (
    0 => 'http\\Message',
    'body' => 'http\\Message\\Body',
  ),
  'http\\client\\request::setcontenttype' => 
  array (
    0 => 'http\\Client\\Request',
    'content_type' => 'string',
  ),
  'http\\client\\request::setheader' => 
  array (
    0 => 'http\\Message',
    'header' => 'string',
    'value=' => 'mixed',
  ),
  'http\\client\\request::setheaders' => 
  array (
    0 => 'http\\Message',
    'headers' => 'array<array-key, mixed>',
  ),
  'http\\client\\request::sethttpversion' => 
  array (
    0 => 'http\\Message',
    'http_version' => 'string',
  ),
  'http\\client\\request::setinfo' => 
  array (
    0 => 'http\\Message',
    'http_info' => 'string',
  ),
  'http\\client\\request::setoptions' => 
  array (
    0 => 'http\\Client\\Request',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'http\\client\\request::setquery' => 
  array (
    0 => 'http\\Client\\Request',
    'query_data=' => 'mixed',
  ),
  'http\\client\\request::setrequestmethod' => 
  array (
    0 => 'http\\Message',
    'request_method' => 'string',
  ),
  'http\\client\\request::setrequesturl' => 
  array (
    0 => 'http\\Message',
    'url' => 'string',
  ),
  'http\\client\\request::setresponsecode' => 
  array (
    0 => 'http\\Message',
    'response_code' => 'int',
    'strict=' => 'mixed',
  ),
  'http\\client\\request::setresponsestatus' => 
  array (
    0 => 'http\\Message',
    'response_status' => 'string',
  ),
  'http\\client\\request::setssloptions' => 
  array (
    0 => 'http\\Client\\Request',
    'ssl_options=' => 'array<array-key, mixed>|null',
  ),
  'http\\client\\request::settype' => 
  array (
    0 => 'http\\Message',
    'type' => 'int',
  ),
  'http\\client\\request::splitmultipartbody' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\client\\request::tocallback' => 
  array (
    0 => 'http\\Message',
    'callback' => 'callable',
  ),
  'http\\client\\request::tostream' => 
  array (
    0 => 'http\\Message',
    'stream' => 'resource',
  ),
  'http\\client\\request::tostring' => 
  array (
    0 => 'string',
    'include_parent=' => 'mixed',
  ),
  'http\\client\\request::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'http\\client\\request::valid' => 
  array (
    0 => 'bool',
  ),
  'http\\client\\response::__construct' => 
  array (
    0 => 'Iterator',
  ),
  'http\\client\\response::__tostring' => 
  array (
    0 => 'string',
  ),
  'http\\client\\response::addbody' => 
  array (
    0 => 'http\\Message',
    'body' => 'http\\Message\\Body',
  ),
  'http\\client\\response::addheader' => 
  array (
    0 => 'http\\Message',
    'header' => 'string',
    'value' => 'mixed',
  ),
  'http\\client\\response::addheaders' => 
  array (
    0 => 'http\\Message',
    'headers' => 'array<array-key, mixed>',
    'append=' => 'mixed',
  ),
  'http\\client\\response::count' => 
  array (
    0 => 'int',
  ),
  'http\\client\\response::current' => 
  array (
    0 => 'mixed',
  ),
  'http\\client\\response::detach' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\client\\response::getbody' => 
  array (
    0 => 'http\\Message\\Body',
  ),
  'http\\client\\response::getcookies' => 
  array (
    0 => 'array<array-key, mixed>',
    'flags=' => 'mixed',
    'allowed_extras=' => 'mixed',
  ),
  'http\\client\\response::getheader' => 
  array (
    0 => 'http\\Header|mixed',
    'header' => 'string',
    'into_class=' => 'mixed',
  ),
  'http\\client\\response::getheaders' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\client\\response::gethttpversion' => 
  array (
    0 => 'string',
  ),
  'http\\client\\response::getinfo' => 
  array (
    0 => 'null|string',
  ),
  'http\\client\\response::getparentmessage' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\client\\response::getrequestmethod' => 
  array (
    0 => 'false|string',
  ),
  'http\\client\\response::getrequesturl' => 
  array (
    0 => 'false|string',
  ),
  'http\\client\\response::getresponsecode' => 
  array (
    0 => 'false|int',
  ),
  'http\\client\\response::getresponsestatus' => 
  array (
    0 => 'false|string',
  ),
  'http\\client\\response::gettransferinfo' => 
  array (
    0 => 'mixed|object',
    'element=' => 'mixed',
  ),
  'http\\client\\response::gettype' => 
  array (
    0 => 'int',
  ),
  'http\\client\\response::ismultipart' => 
  array (
    0 => 'bool',
    '&boundary=' => 'mixed',
  ),
  'http\\client\\response::key' => 
  array (
    0 => 'int|string',
  ),
  'http\\client\\response::next' => 
  array (
    0 => 'void',
  ),
  'http\\client\\response::prepend' => 
  array (
    0 => 'http\\Message',
    'message' => 'http\\Message',
    'top=' => 'mixed',
  ),
  'http\\client\\response::reverse' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\client\\response::rewind' => 
  array (
    0 => 'void',
  ),
  'http\\client\\response::serialize' => 
  array (
    0 => 'string',
  ),
  'http\\client\\response::setbody' => 
  array (
    0 => 'http\\Message',
    'body' => 'http\\Message\\Body',
  ),
  'http\\client\\response::setheader' => 
  array (
    0 => 'http\\Message',
    'header' => 'string',
    'value=' => 'mixed',
  ),
  'http\\client\\response::setheaders' => 
  array (
    0 => 'http\\Message',
    'headers' => 'array<array-key, mixed>',
  ),
  'http\\client\\response::sethttpversion' => 
  array (
    0 => 'http\\Message',
    'http_version' => 'string',
  ),
  'http\\client\\response::setinfo' => 
  array (
    0 => 'http\\Message',
    'http_info' => 'string',
  ),
  'http\\client\\response::setrequestmethod' => 
  array (
    0 => 'http\\Message',
    'request_method' => 'string',
  ),
  'http\\client\\response::setrequesturl' => 
  array (
    0 => 'http\\Message',
    'url' => 'string',
  ),
  'http\\client\\response::setresponsecode' => 
  array (
    0 => 'http\\Message',
    'response_code' => 'int',
    'strict=' => 'mixed',
  ),
  'http\\client\\response::setresponsestatus' => 
  array (
    0 => 'http\\Message',
    'response_status' => 'string',
  ),
  'http\\client\\response::settype' => 
  array (
    0 => 'http\\Message',
    'type' => 'int',
  ),
  'http\\client\\response::splitmultipartbody' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\client\\response::tocallback' => 
  array (
    0 => 'http\\Message',
    'callback' => 'callable',
  ),
  'http\\client\\response::tostream' => 
  array (
    0 => 'http\\Message',
    'stream' => 'resource',
  ),
  'http\\client\\response::tostring' => 
  array (
    0 => 'string',
    'include_parent=' => 'mixed',
  ),
  'http\\client\\response::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'http\\client\\response::valid' => 
  array (
    0 => 'bool',
  ),
  'http\\cookie::__construct' => 
  array (
    0 => 'void',
    'cookie_string=' => 'mixed',
    'parser_flags=' => 'int',
    'allowed_extras=' => 'array<array-key, mixed>',
  ),
  'http\\cookie::__tostring' => 
  array (
    0 => 'string',
  ),
  'http\\cookie::addcookie' => 
  array (
    0 => 'http\\Cookie',
    'cookie_name' => 'string',
    'cookie_value' => 'string',
  ),
  'http\\cookie::addcookies' => 
  array (
    0 => 'http\\Cookie',
    'cookies' => 'array<array-key, mixed>',
  ),
  'http\\cookie::addextra' => 
  array (
    0 => 'http\\Cookie',
    'extra_name' => 'string',
    'extra_value' => 'string',
  ),
  'http\\cookie::addextras' => 
  array (
    0 => 'http\\Cookie',
    'extras' => 'array<array-key, mixed>',
  ),
  'http\\cookie::getcookie' => 
  array (
    0 => 'null|string',
    'name' => 'string',
  ),
  'http\\cookie::getcookies' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\cookie::getdomain' => 
  array (
    0 => 'string',
  ),
  'http\\cookie::getexpires' => 
  array (
    0 => 'int',
  ),
  'http\\cookie::getextra' => 
  array (
    0 => 'string',
    'name' => 'string',
  ),
  'http\\cookie::getextras' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\cookie::getflags' => 
  array (
    0 => 'int',
  ),
  'http\\cookie::getmaxage' => 
  array (
    0 => 'int',
  ),
  'http\\cookie::getpath' => 
  array (
    0 => 'string',
  ),
  'http\\cookie::setcookie' => 
  array (
    0 => 'http\\Cookie',
    'cookie_name' => 'string',
    'cookie_value=' => 'mixed',
  ),
  'http\\cookie::setcookies' => 
  array (
    0 => 'http\\Cookie',
    'cookies=' => 'mixed',
  ),
  'http\\cookie::setdomain' => 
  array (
    0 => 'http\\Cookie',
    'value=' => 'mixed',
  ),
  'http\\cookie::setexpires' => 
  array (
    0 => 'http\\Cookie',
    'value=' => 'mixed',
  ),
  'http\\cookie::setextra' => 
  array (
    0 => 'http\\Cookie',
    'extra_name' => 'string',
    'extra_value=' => 'mixed',
  ),
  'http\\cookie::setextras' => 
  array (
    0 => 'http\\Cookie',
    'extras=' => 'mixed',
  ),
  'http\\cookie::setflags' => 
  array (
    0 => 'http\\Cookie',
    'value=' => 'mixed',
  ),
  'http\\cookie::setmaxage' => 
  array (
    0 => 'http\\Cookie',
    'value=' => 'mixed',
  ),
  'http\\cookie::setpath' => 
  array (
    0 => 'http\\Cookie',
    'value=' => 'mixed',
  ),
  'http\\cookie::toarray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\cookie::tostring' => 
  array (
    0 => 'string',
  ),
  'http\\encoding\\stream::__construct' => 
  array (
    0 => 'void',
    'flags=' => 'mixed',
  ),
  'http\\encoding\\stream::done' => 
  array (
    0 => 'bool',
  ),
  'http\\encoding\\stream::finish' => 
  array (
    0 => 'string',
  ),
  'http\\encoding\\stream::flush' => 
  array (
    0 => 'string',
  ),
  'http\\encoding\\stream::update' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'http\\encoding\\stream\\debrotli::__construct' => 
  array (
    0 => 'void',
    'flags=' => 'int',
  ),
  'http\\encoding\\stream\\debrotli::decode' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'http\\encoding\\stream\\debrotli::done' => 
  array (
    0 => 'bool',
  ),
  'http\\encoding\\stream\\debrotli::finish' => 
  array (
    0 => 'string',
  ),
  'http\\encoding\\stream\\debrotli::flush' => 
  array (
    0 => 'string',
  ),
  'http\\encoding\\stream\\debrotli::update' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'http\\encoding\\stream\\dechunk::__construct' => 
  array (
    0 => 'void',
    'flags=' => 'mixed',
  ),
  'http\\encoding\\stream\\dechunk::decode' => 
  array (
    0 => 'false|string',
    'data' => 'string',
    '&decoded_len=' => 'mixed',
  ),
  'http\\encoding\\stream\\dechunk::done' => 
  array (
    0 => 'bool',
  ),
  'http\\encoding\\stream\\dechunk::finish' => 
  array (
    0 => 'string',
  ),
  'http\\encoding\\stream\\dechunk::flush' => 
  array (
    0 => 'string',
  ),
  'http\\encoding\\stream\\dechunk::update' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'http\\encoding\\stream\\deflate::__construct' => 
  array (
    0 => 'void',
    'flags=' => 'mixed',
  ),
  'http\\encoding\\stream\\deflate::done' => 
  array (
    0 => 'bool',
  ),
  'http\\encoding\\stream\\deflate::encode' => 
  array (
    0 => 'string',
    'data' => 'string',
    'flags=' => 'mixed',
  ),
  'http\\encoding\\stream\\deflate::finish' => 
  array (
    0 => 'string',
  ),
  'http\\encoding\\stream\\deflate::flush' => 
  array (
    0 => 'string',
  ),
  'http\\encoding\\stream\\deflate::update' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'http\\encoding\\stream\\enbrotli::__construct' => 
  array (
    0 => 'void',
    'flags=' => 'int',
  ),
  'http\\encoding\\stream\\enbrotli::done' => 
  array (
    0 => 'bool',
  ),
  'http\\encoding\\stream\\enbrotli::encode' => 
  array (
    0 => 'string',
    'data' => 'string',
    'flags=' => 'int',
  ),
  'http\\encoding\\stream\\enbrotli::finish' => 
  array (
    0 => 'string',
  ),
  'http\\encoding\\stream\\enbrotli::flush' => 
  array (
    0 => 'string',
  ),
  'http\\encoding\\stream\\enbrotli::update' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'http\\encoding\\stream\\inflate::__construct' => 
  array (
    0 => 'void',
    'flags=' => 'mixed',
  ),
  'http\\encoding\\stream\\inflate::decode' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'http\\encoding\\stream\\inflate::done' => 
  array (
    0 => 'bool',
  ),
  'http\\encoding\\stream\\inflate::finish' => 
  array (
    0 => 'string',
  ),
  'http\\encoding\\stream\\inflate::flush' => 
  array (
    0 => 'string',
  ),
  'http\\encoding\\stream\\inflate::update' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'http\\env::getrequestbody' => 
  array (
    0 => 'http\\Message\\Body',
    'body_class_name=' => 'mixed',
  ),
  'http\\env::getrequestheader' => 
  array (
    0 => 'array<array-key, mixed>|null|string',
    'header_name=' => 'mixed',
  ),
  'http\\env::getresponsecode' => 
  array (
    0 => 'int',
  ),
  'http\\env::getresponseheader' => 
  array (
    0 => 'array<array-key, mixed>|null|string',
    'header_name=' => 'mixed',
  ),
  'http\\env::getresponsestatusforallcodes' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\env::getresponsestatusforcode' => 
  array (
    0 => 'string',
    'code' => 'int',
  ),
  'http\\env::negotiate' => 
  array (
    0 => 'null|string',
    'params' => 'string',
    'supported' => 'array<array-key, mixed>',
    'primary_type_separator=' => 'mixed',
    '&result_array=' => 'mixed',
  ),
  'http\\env::negotiatecharset' => 
  array (
    0 => 'null|string',
    'supported' => 'array<array-key, mixed>',
    '&result_array=' => 'mixed',
  ),
  'http\\env::negotiatecontenttype' => 
  array (
    0 => 'null|string',
    'supported' => 'array<array-key, mixed>',
    '&result_array=' => 'mixed',
  ),
  'http\\env::negotiateencoding' => 
  array (
    0 => 'null|string',
    'supported' => 'array<array-key, mixed>',
    '&result_array=' => 'mixed',
  ),
  'http\\env::negotiatelanguage' => 
  array (
    0 => 'null|string',
    'supported' => 'array<array-key, mixed>',
    '&result_array=' => 'mixed',
  ),
  'http\\env::setresponsecode' => 
  array (
    0 => 'bool',
    'code' => 'int',
  ),
  'http\\env::setresponseheader' => 
  array (
    0 => 'bool',
    'header_name' => 'string',
    'header_value=' => 'mixed',
    'response_code=' => 'mixed',
    'replace_header=' => 'mixed',
  ),
  'http\\env\\request::__construct' => 
  array (
    0 => 'void',
  ),
  'http\\env\\request::__tostring' => 
  array (
    0 => 'string',
  ),
  'http\\env\\request::addbody' => 
  array (
    0 => 'http\\Message',
    'body' => 'http\\Message\\Body',
  ),
  'http\\env\\request::addheader' => 
  array (
    0 => 'http\\Message',
    'header' => 'string',
    'value' => 'mixed',
  ),
  'http\\env\\request::addheaders' => 
  array (
    0 => 'http\\Message',
    'headers' => 'array<array-key, mixed>',
    'append=' => 'mixed',
  ),
  'http\\env\\request::count' => 
  array (
    0 => 'int',
  ),
  'http\\env\\request::current' => 
  array (
    0 => 'mixed',
  ),
  'http\\env\\request::detach' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\env\\request::getbody' => 
  array (
    0 => 'http\\Message\\Body',
  ),
  'http\\env\\request::getcookie' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'type=' => 'mixed',
    'defval=' => 'mixed',
    'delete=' => 'bool',
  ),
  'http\\env\\request::getfiles' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\env\\request::getform' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'type=' => 'mixed',
    'defval=' => 'mixed',
    'delete=' => 'bool',
  ),
  'http\\env\\request::getheader' => 
  array (
    0 => 'http\\Header|mixed',
    'header' => 'string',
    'into_class=' => 'mixed',
  ),
  'http\\env\\request::getheaders' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\env\\request::gethttpversion' => 
  array (
    0 => 'string',
  ),
  'http\\env\\request::getinfo' => 
  array (
    0 => 'null|string',
  ),
  'http\\env\\request::getparentmessage' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\env\\request::getquery' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'type=' => 'mixed',
    'defval=' => 'mixed',
    'delete=' => 'bool',
  ),
  'http\\env\\request::getrequestmethod' => 
  array (
    0 => 'false|string',
  ),
  'http\\env\\request::getrequesturl' => 
  array (
    0 => 'false|string',
  ),
  'http\\env\\request::getresponsecode' => 
  array (
    0 => 'false|int',
  ),
  'http\\env\\request::getresponsestatus' => 
  array (
    0 => 'false|string',
  ),
  'http\\env\\request::gettype' => 
  array (
    0 => 'int',
  ),
  'http\\env\\request::ismultipart' => 
  array (
    0 => 'bool',
    '&boundary=' => 'mixed',
  ),
  'http\\env\\request::key' => 
  array (
    0 => 'int|string',
  ),
  'http\\env\\request::next' => 
  array (
    0 => 'void',
  ),
  'http\\env\\request::prepend' => 
  array (
    0 => 'http\\Message',
    'message' => 'http\\Message',
    'top=' => 'mixed',
  ),
  'http\\env\\request::reverse' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\env\\request::rewind' => 
  array (
    0 => 'void',
  ),
  'http\\env\\request::serialize' => 
  array (
    0 => 'string',
  ),
  'http\\env\\request::setbody' => 
  array (
    0 => 'http\\Message',
    'body' => 'http\\Message\\Body',
  ),
  'http\\env\\request::setheader' => 
  array (
    0 => 'http\\Message',
    'header' => 'string',
    'value=' => 'mixed',
  ),
  'http\\env\\request::setheaders' => 
  array (
    0 => 'http\\Message',
    'headers' => 'array<array-key, mixed>',
  ),
  'http\\env\\request::sethttpversion' => 
  array (
    0 => 'http\\Message',
    'http_version' => 'string',
  ),
  'http\\env\\request::setinfo' => 
  array (
    0 => 'http\\Message',
    'http_info' => 'string',
  ),
  'http\\env\\request::setrequestmethod' => 
  array (
    0 => 'http\\Message',
    'request_method' => 'string',
  ),
  'http\\env\\request::setrequesturl' => 
  array (
    0 => 'http\\Message',
    'url' => 'string',
  ),
  'http\\env\\request::setresponsecode' => 
  array (
    0 => 'http\\Message',
    'response_code' => 'int',
    'strict=' => 'mixed',
  ),
  'http\\env\\request::setresponsestatus' => 
  array (
    0 => 'http\\Message',
    'response_status' => 'string',
  ),
  'http\\env\\request::settype' => 
  array (
    0 => 'http\\Message',
    'type' => 'int',
  ),
  'http\\env\\request::splitmultipartbody' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\env\\request::tocallback' => 
  array (
    0 => 'http\\Message',
    'callback' => 'callable',
  ),
  'http\\env\\request::tostream' => 
  array (
    0 => 'http\\Message',
    'stream' => 'resource',
  ),
  'http\\env\\request::tostring' => 
  array (
    0 => 'string',
    'include_parent=' => 'mixed',
  ),
  'http\\env\\request::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'http\\env\\request::valid' => 
  array (
    0 => 'bool',
  ),
  'http\\env\\response::__construct' => 
  array (
    0 => 'void',
  ),
  'http\\env\\response::__invoke' => 
  array (
    0 => 'bool',
    'data' => 'string',
    'ob_flags=' => 'int',
  ),
  'http\\env\\response::__tostring' => 
  array (
    0 => 'string',
  ),
  'http\\env\\response::addbody' => 
  array (
    0 => 'http\\Message',
    'body' => 'http\\Message\\Body',
  ),
  'http\\env\\response::addheader' => 
  array (
    0 => 'http\\Message',
    'header' => 'string',
    'value' => 'mixed',
  ),
  'http\\env\\response::addheaders' => 
  array (
    0 => 'http\\Message',
    'headers' => 'array<array-key, mixed>',
    'append=' => 'mixed',
  ),
  'http\\env\\response::count' => 
  array (
    0 => 'int',
  ),
  'http\\env\\response::current' => 
  array (
    0 => 'mixed',
  ),
  'http\\env\\response::detach' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\env\\response::getbody' => 
  array (
    0 => 'http\\Message\\Body',
  ),
  'http\\env\\response::getheader' => 
  array (
    0 => 'http\\Header|mixed',
    'header' => 'string',
    'into_class=' => 'mixed',
  ),
  'http\\env\\response::getheaders' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\env\\response::gethttpversion' => 
  array (
    0 => 'string',
  ),
  'http\\env\\response::getinfo' => 
  array (
    0 => 'null|string',
  ),
  'http\\env\\response::getparentmessage' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\env\\response::getrequestmethod' => 
  array (
    0 => 'false|string',
  ),
  'http\\env\\response::getrequesturl' => 
  array (
    0 => 'false|string',
  ),
  'http\\env\\response::getresponsecode' => 
  array (
    0 => 'false|int',
  ),
  'http\\env\\response::getresponsestatus' => 
  array (
    0 => 'false|string',
  ),
  'http\\env\\response::gettype' => 
  array (
    0 => 'int',
  ),
  'http\\env\\response::iscachedbyetag' => 
  array (
    0 => 'int',
    'header_name=' => 'string',
  ),
  'http\\env\\response::iscachedbylastmodified' => 
  array (
    0 => 'int',
    'header_name=' => 'string',
  ),
  'http\\env\\response::ismultipart' => 
  array (
    0 => 'bool',
    '&boundary=' => 'mixed',
  ),
  'http\\env\\response::key' => 
  array (
    0 => 'int|string',
  ),
  'http\\env\\response::next' => 
  array (
    0 => 'void',
  ),
  'http\\env\\response::prepend' => 
  array (
    0 => 'http\\Message',
    'message' => 'http\\Message',
    'top=' => 'mixed',
  ),
  'http\\env\\response::reverse' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\env\\response::rewind' => 
  array (
    0 => 'void',
  ),
  'http\\env\\response::send' => 
  array (
    0 => 'bool',
    'stream=' => 'resource',
  ),
  'http\\env\\response::serialize' => 
  array (
    0 => 'string',
  ),
  'http\\env\\response::setbody' => 
  array (
    0 => 'http\\Message',
    'body' => 'http\\Message\\Body',
  ),
  'http\\env\\response::setcachecontrol' => 
  array (
    0 => 'http\\Env\\Response',
    'cache_control' => 'string',
  ),
  'http\\env\\response::setcontentdisposition' => 
  array (
    0 => 'http\\Env\\Response',
    'disposition_params' => 'array<array-key, mixed>',
  ),
  'http\\env\\response::setcontentencoding' => 
  array (
    0 => 'http\\Env\\Response',
    'content_encoding' => 'int',
  ),
  'http\\env\\response::setcontenttype' => 
  array (
    0 => 'http\\Env\\Response',
    'content_type' => 'string',
  ),
  'http\\env\\response::setcookie' => 
  array (
    0 => 'http\\Env\\Response',
    'cookie' => 'mixed',
  ),
  'http\\env\\response::setenvrequest' => 
  array (
    0 => 'http\\Env\\Response',
    'env_request' => 'http\\Message',
  ),
  'http\\env\\response::setetag' => 
  array (
    0 => 'http\\Env\\Response',
    'etag' => 'string',
  ),
  'http\\env\\response::setheader' => 
  array (
    0 => 'http\\Message',
    'header' => 'string',
    'value=' => 'mixed',
  ),
  'http\\env\\response::setheaders' => 
  array (
    0 => 'http\\Message',
    'headers' => 'array<array-key, mixed>',
  ),
  'http\\env\\response::sethttpversion' => 
  array (
    0 => 'http\\Message',
    'http_version' => 'string',
  ),
  'http\\env\\response::setinfo' => 
  array (
    0 => 'http\\Message',
    'http_info' => 'string',
  ),
  'http\\env\\response::setlastmodified' => 
  array (
    0 => 'http\\Env\\Response',
    'last_modified' => 'int',
  ),
  'http\\env\\response::setrequestmethod' => 
  array (
    0 => 'http\\Message',
    'request_method' => 'string',
  ),
  'http\\env\\response::setrequesturl' => 
  array (
    0 => 'http\\Message',
    'url' => 'string',
  ),
  'http\\env\\response::setresponsecode' => 
  array (
    0 => 'http\\Message',
    'response_code' => 'int',
    'strict=' => 'mixed',
  ),
  'http\\env\\response::setresponsestatus' => 
  array (
    0 => 'http\\Message',
    'response_status' => 'string',
  ),
  'http\\env\\response::setthrottlerate' => 
  array (
    0 => 'http\\Env\\Response',
    'chunk_size' => 'int',
    'delay=' => 'float|int',
  ),
  'http\\env\\response::settype' => 
  array (
    0 => 'http\\Message',
    'type' => 'int',
  ),
  'http\\env\\response::splitmultipartbody' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\env\\response::tocallback' => 
  array (
    0 => 'http\\Message',
    'callback' => 'callable',
  ),
  'http\\env\\response::tostream' => 
  array (
    0 => 'http\\Message',
    'stream' => 'resource',
  ),
  'http\\env\\response::tostring' => 
  array (
    0 => 'string',
    'include_parent=' => 'mixed',
  ),
  'http\\env\\response::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'http\\env\\response::valid' => 
  array (
    0 => 'bool',
  ),
  'http\\header::__construct' => 
  array (
    0 => 'void',
    'name=' => 'mixed',
    'value=' => 'mixed',
  ),
  'http\\header::__tostring' => 
  array (
    0 => 'string',
  ),
  'http\\header::getparams' => 
  array (
    0 => 'http\\Params',
    'param_sep=' => 'mixed',
    'arg_sep=' => 'mixed',
    'val_sep=' => 'mixed',
    'flags=' => 'mixed',
  ),
  'http\\header::match' => 
  array (
    0 => 'bool',
    'value' => 'string',
    'flags=' => 'mixed',
  ),
  'http\\header::negotiate' => 
  array (
    0 => 'null|string',
    'supported' => 'array<array-key, mixed>',
    '&result=' => 'mixed',
  ),
  'http\\header::parse' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'string' => 'string',
    'header_class=' => 'mixed',
  ),
  'http\\header::serialize' => 
  array (
    0 => 'string',
  ),
  'http\\header::tostring' => 
  array (
    0 => 'string',
  ),
  'http\\header::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'http\\header\\parser::getstate' => 
  array (
    0 => 'int',
  ),
  'http\\header\\parser::parse' => 
  array (
    0 => 'int',
    'data' => 'string',
    'flags' => 'int',
    '&headers' => 'array<array-key, mixed>',
  ),
  'http\\header\\parser::stream' => 
  array (
    0 => 'int',
    'stream' => 'resource',
    'flags' => 'int',
    '&headers' => 'array<array-key, mixed>',
  ),
  'http\\message::__construct' => 
  array (
    0 => 'void',
    'message=' => 'mixed',
    'greedy=' => 'bool',
  ),
  'http\\message::__tostring' => 
  array (
    0 => 'string',
  ),
  'http\\message::addbody' => 
  array (
    0 => 'http\\Message',
    'body' => 'http\\Message\\Body',
  ),
  'http\\message::addheader' => 
  array (
    0 => 'http\\Message',
    'header' => 'string',
    'value' => 'mixed',
  ),
  'http\\message::addheaders' => 
  array (
    0 => 'http\\Message',
    'headers' => 'array<array-key, mixed>',
    'append=' => 'mixed',
  ),
  'http\\message::count' => 
  array (
    0 => 'int',
  ),
  'http\\message::current' => 
  array (
    0 => 'mixed',
  ),
  'http\\message::detach' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\message::getbody' => 
  array (
    0 => 'http\\Message\\Body',
  ),
  'http\\message::getheader' => 
  array (
    0 => 'http\\Header|mixed',
    'header' => 'string',
    'into_class=' => 'mixed',
  ),
  'http\\message::getheaders' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\message::gethttpversion' => 
  array (
    0 => 'string',
  ),
  'http\\message::getinfo' => 
  array (
    0 => 'null|string',
  ),
  'http\\message::getparentmessage' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\message::getrequestmethod' => 
  array (
    0 => 'false|string',
  ),
  'http\\message::getrequesturl' => 
  array (
    0 => 'false|string',
  ),
  'http\\message::getresponsecode' => 
  array (
    0 => 'false|int',
  ),
  'http\\message::getresponsestatus' => 
  array (
    0 => 'false|string',
  ),
  'http\\message::gettype' => 
  array (
    0 => 'int',
  ),
  'http\\message::ismultipart' => 
  array (
    0 => 'bool',
    '&boundary=' => 'mixed',
  ),
  'http\\message::key' => 
  array (
    0 => 'int|string',
  ),
  'http\\message::next' => 
  array (
    0 => 'void',
  ),
  'http\\message::prepend' => 
  array (
    0 => 'http\\Message',
    'message' => 'http\\Message',
    'top=' => 'mixed',
  ),
  'http\\message::reverse' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\message::rewind' => 
  array (
    0 => 'void',
  ),
  'http\\message::serialize' => 
  array (
    0 => 'string',
  ),
  'http\\message::setbody' => 
  array (
    0 => 'http\\Message',
    'body' => 'http\\Message\\Body',
  ),
  'http\\message::setheader' => 
  array (
    0 => 'http\\Message',
    'header' => 'string',
    'value=' => 'mixed',
  ),
  'http\\message::setheaders' => 
  array (
    0 => 'http\\Message',
    'headers' => 'array<array-key, mixed>',
  ),
  'http\\message::sethttpversion' => 
  array (
    0 => 'http\\Message',
    'http_version' => 'string',
  ),
  'http\\message::setinfo' => 
  array (
    0 => 'http\\Message',
    'http_info' => 'string',
  ),
  'http\\message::setrequestmethod' => 
  array (
    0 => 'http\\Message',
    'request_method' => 'string',
  ),
  'http\\message::setrequesturl' => 
  array (
    0 => 'http\\Message',
    'url' => 'string',
  ),
  'http\\message::setresponsecode' => 
  array (
    0 => 'http\\Message',
    'response_code' => 'int',
    'strict=' => 'mixed',
  ),
  'http\\message::setresponsestatus' => 
  array (
    0 => 'http\\Message',
    'response_status' => 'string',
  ),
  'http\\message::settype' => 
  array (
    0 => 'http\\Message',
    'type' => 'int',
  ),
  'http\\message::splitmultipartbody' => 
  array (
    0 => 'http\\Message',
  ),
  'http\\message::tocallback' => 
  array (
    0 => 'http\\Message',
    'callback' => 'callable',
  ),
  'http\\message::tostream' => 
  array (
    0 => 'http\\Message',
    'stream' => 'resource',
  ),
  'http\\message::tostring' => 
  array (
    0 => 'string',
    'include_parent=' => 'mixed',
  ),
  'http\\message::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'http\\message::valid' => 
  array (
    0 => 'bool',
  ),
  'http\\message\\body::__construct' => 
  array (
    0 => 'void',
    'stream=' => 'resource',
  ),
  'http\\message\\body::__tostring' => 
  array (
    0 => 'string',
  ),
  'http\\message\\body::addform' => 
  array (
    0 => 'http\\Message\\Body',
    'fields=' => 'array<array-key, mixed>|null',
    'files=' => 'array<array-key, mixed>|null',
  ),
  'http\\message\\body::addpart' => 
  array (
    0 => 'http\\Message\\Body',
    'message' => 'http\\Message',
  ),
  'http\\message\\body::append' => 
  array (
    0 => 'http\\Message\\Body',
    'string' => 'string',
  ),
  'http\\message\\body::etag' => 
  array (
    0 => 'false|string',
  ),
  'http\\message\\body::getboundary' => 
  array (
    0 => 'null|string',
  ),
  'http\\message\\body::getresource' => 
  array (
    0 => 'resource',
  ),
  'http\\message\\body::serialize' => 
  array (
    0 => 'string',
  ),
  'http\\message\\body::stat' => 
  array (
    0 => 'int|object',
    'field=' => 'mixed',
  ),
  'http\\message\\body::tocallback' => 
  array (
    0 => 'http\\Message\\Body',
    'callback' => 'callable',
    'offset=' => 'mixed',
    'maxlen=' => 'mixed',
  ),
  'http\\message\\body::tostream' => 
  array (
    0 => 'http\\Message\\Body',
    'stream' => 'resource',
    'offset=' => 'mixed',
    'maxlen=' => 'mixed',
  ),
  'http\\message\\body::tostring' => 
  array (
    0 => 'string',
  ),
  'http\\message\\body::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'http\\message\\parser::getstate' => 
  array (
    0 => 'int',
  ),
  'http\\message\\parser::parse' => 
  array (
    0 => 'int',
    'data' => 'string',
    'flags' => 'int',
    '&message' => 'http\\Message',
  ),
  'http\\message\\parser::stream' => 
  array (
    0 => 'int',
    'stream' => 'resource',
    'flags' => 'int',
    '&message' => 'http\\Message',
  ),
  'http\\params::__construct' => 
  array (
    0 => 'void',
    'params=' => 'mixed',
    'param_sep=' => 'mixed',
    'arg_sep=' => 'mixed',
    'val_sep=' => 'mixed',
    'flags=' => 'mixed',
  ),
  'http\\params::__tostring' => 
  array (
    0 => 'string',
  ),
  'http\\params::offsetexists' => 
  array (
    0 => 'bool',
    'name' => 'int|string',
  ),
  'http\\params::offsetget' => 
  array (
    0 => 'mixed',
    'name' => 'int|string',
  ),
  'http\\params::offsetset' => 
  array (
    0 => 'void',
    'name' => 'int|null|string',
    'value' => 'mixed',
  ),
  'http\\params::offsetunset' => 
  array (
    0 => 'void',
    'name' => 'int|string',
  ),
  'http\\params::toarray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\params::tostring' => 
  array (
    0 => 'string',
  ),
  'http\\querystring::__construct' => 
  array (
    0 => 'void',
    'querystring' => 'string',
  ),
  'http\\querystring::__tostring' => 
  array (
    0 => 'string',
  ),
  'http\\querystring::get' => 
  array (
    0 => 'http\\QueryString|mixed|string',
    'name=' => 'string',
    'type=' => 'mixed',
    'defval=' => 'mixed',
    'delete=' => 'bool',
  ),
  'http\\querystring::getarray' => 
  array (
    0 => 'array<array-key, mixed>|mixed',
    'name' => 'string',
    'defval=' => 'mixed',
    'delete=' => 'bool',
  ),
  'http\\querystring::getbool' => 
  array (
    0 => 'bool|mixed',
    'name' => 'string',
    'defval=' => 'mixed',
    'delete=' => 'bool',
  ),
  'http\\querystring::getfloat' => 
  array (
    0 => 'float|mixed',
    'name' => 'string',
    'defval=' => 'mixed',
    'delete=' => 'bool',
  ),
  'http\\querystring::getglobalinstance' => 
  array (
    0 => 'http\\QueryString',
  ),
  'http\\querystring::getint' => 
  array (
    0 => 'int|mixed',
    'name' => 'string',
    'defval=' => 'mixed',
    'delete=' => 'bool',
  ),
  'http\\querystring::getiterator' => 
  array (
    0 => 'IteratorAggregate',
  ),
  'http\\querystring::getobject' => 
  array (
    0 => 'mixed|object',
    'name' => 'string',
    'defval=' => 'mixed',
    'delete=' => 'bool',
  ),
  'http\\querystring::getstring' => 
  array (
    0 => 'mixed|string',
    'name' => 'string',
    'defval=' => 'mixed',
    'delete=' => 'bool',
  ),
  'http\\querystring::mod' => 
  array (
    0 => 'http\\QueryString',
    'params=' => 'mixed',
  ),
  'http\\querystring::offsetexists' => 
  array (
    0 => 'bool',
    'offset' => 'int|string',
  ),
  'http\\querystring::offsetget' => 
  array (
    0 => 'mixed|null',
    'offset' => 'int|string',
  ),
  'http\\querystring::offsetset' => 
  array (
    0 => 'void',
    'offset' => 'int|null|string',
    'value' => 'mixed',
  ),
  'http\\querystring::offsetunset' => 
  array (
    0 => 'void',
    'offset' => 'int|string',
  ),
  'http\\querystring::serialize' => 
  array (
    0 => 'string',
  ),
  'http\\querystring::set' => 
  array (
    0 => 'http\\QueryString',
    'params' => 'mixed',
  ),
  'http\\querystring::toarray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http\\querystring::tostring' => 
  array (
    0 => 'string',
  ),
  'http\\querystring::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'http\\querystring::xlate' => 
  array (
    0 => 'http\\QueryString',
  ),
  'http\\url::__construct' => 
  array (
    0 => 'void',
    'old_url=' => 'mixed',
    'new_url=' => 'mixed',
    'flags=' => 'int',
  ),
  'http\\url::__tostring' => 
  array (
    0 => 'string',
  ),
  'http\\url::mod' => 
  array (
    0 => 'http\\Url',
    'parts' => 'mixed',
    'flags=' => 'float|int|mixed',
  ),
  'http\\url::toarray' => 
  array (
    0 => 'array<array-key, string>',
  ),
  'http\\url::tostring' => 
  array (
    0 => 'string',
  ),
  'http_build_cookie' => 
  array (
    0 => 'string',
    'cookie' => 'array<array-key, mixed>',
  ),
  'http_build_query' => 
  array (
    0 => 'string',
    'data' => 'array<array-key, mixed>|object',
    'numeric_prefix=' => 'string',
    'arg_separator=' => 'null|string',
    'encoding_type=' => 'int',
  ),
  'http_build_str' => 
  array (
    0 => 'string',
    'query' => 'array<array-key, mixed>',
    'prefix=' => 'null|string',
    'arg_separator=' => 'string',
  ),
  'http_build_url' => 
  array (
    0 => 'string',
    'url=' => 'array<array-key, mixed>|string',
    'parts=' => 'array<array-key, mixed>|string',
    'flags=' => 'int',
    'new_url=' => 'array<array-key, mixed>',
  ),
  'http_cache_etag' => 
  array (
    0 => 'bool',
    'etag=' => 'string',
  ),
  'http_cache_last_modified' => 
  array (
    0 => 'bool',
    'timestamp_or_expires=' => 'int',
  ),
  'http_chunked_decode' => 
  array (
    0 => 'false|string',
    'encoded' => 'string',
  ),
  'http_date' => 
  array (
    0 => 'string',
    'timestamp=' => 'int',
  ),
  'http_deflate' => 
  array (
    0 => 'null|string',
    'data' => 'string',
    'flags=' => 'int',
  ),
  'http_get' => 
  array (
    0 => 'string',
    'url' => 'string',
    'options=' => 'array<array-key, mixed>',
    'info=' => 'array<array-key, mixed>',
  ),
  'http_get_request_body' => 
  array (
    0 => 'null|string',
  ),
  'http_get_request_body_stream' => 
  array (
    0 => 'null|resource',
  ),
  'http_get_request_headers' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'http_head' => 
  array (
    0 => 'string',
    'url' => 'string',
    'options=' => 'array<array-key, mixed>',
    'info=' => 'array<array-key, mixed>',
  ),
  'http_inflate' => 
  array (
    0 => 'null|string',
    'data' => 'string',
  ),
  'http_match_etag' => 
  array (
    0 => 'bool',
    'etag' => 'string',
    'for_range=' => 'bool',
  ),
  'http_match_modified' => 
  array (
    0 => 'bool',
    'timestamp=' => 'int',
    'for_range=' => 'bool',
  ),
  'http_match_request_header' => 
  array (
    0 => 'bool',
    'header' => 'string',
    'value' => 'string',
    'match_case=' => 'bool',
  ),
  'http_negotiate_charset' => 
  array (
    0 => 'string',
    'supported' => 'array<array-key, mixed>',
    'result=' => 'array<array-key, mixed>',
  ),
  'http_negotiate_content_type' => 
  array (
    0 => 'string',
    'supported' => 'array<array-key, mixed>',
    'result=' => 'array<array-key, mixed>',
  ),
  'http_negotiate_language' => 
  array (
    0 => 'string',
    'supported' => 'array<array-key, mixed>',
    'result=' => 'array<array-key, mixed>',
  ),
  'http_parse_cookie' => 
  array (
    0 => 'false|stdClass',
    'cookie' => 'string',
    'flags=' => 'int',
    'allowed_extras=' => 'array<array-key, mixed>',
  ),
  'http_parse_headers' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'header' => 'string',
  ),
  'http_parse_message' => 
  array (
    0 => 'object',
    'message' => 'string',
  ),
  'http_parse_params' => 
  array (
    0 => 'stdClass',
    'param' => 'string',
    'flags=' => 'int',
  ),
  'http_persistent_handles_clean' => 
  array (
    0 => 'string',
    'ident=' => 'string',
  ),
  'http_persistent_handles_count' => 
  array (
    0 => 'false|stdClass',
  ),
  'http_persistent_handles_ident' => 
  array (
    0 => 'false|string',
    'ident=' => 'string',
  ),
  'http_post_data' => 
  array (
    0 => 'string',
    'url' => 'string',
    'data' => 'string',
    'options=' => 'array<array-key, mixed>',
    'info=' => 'array<array-key, mixed>',
  ),
  'http_post_fields' => 
  array (
    0 => 'string',
    'url' => 'string',
    'data' => 'array<array-key, mixed>',
    'files=' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
    'info=' => 'array<array-key, mixed>',
  ),
  'http_put_data' => 
  array (
    0 => 'string',
    'url' => 'string',
    'data' => 'string',
    'options=' => 'array<array-key, mixed>',
    'info=' => 'array<array-key, mixed>',
  ),
  'http_put_file' => 
  array (
    0 => 'string',
    'url' => 'string',
    'file' => 'string',
    'options=' => 'array<array-key, mixed>',
    'info=' => 'array<array-key, mixed>',
  ),
  'http_put_stream' => 
  array (
    0 => 'string',
    'url' => 'string',
    'stream' => 'resource',
    'options=' => 'array<array-key, mixed>',
    'info=' => 'array<array-key, mixed>',
  ),
  'http_redirect' => 
  array (
    0 => 'false|int',
    'url=' => 'string',
    'params=' => 'array<array-key, mixed>',
    'session=' => 'bool',
    'status=' => 'int',
  ),
  'http_request' => 
  array (
    0 => 'string',
    'method' => 'int',
    'url' => 'string',
    'body=' => 'string',
    'options=' => 'array<array-key, mixed>',
    'info=' => 'array<array-key, mixed>',
  ),
  'http_request_body_encode' => 
  array (
    0 => 'false|string',
    'fields' => 'array<array-key, mixed>',
    'files' => 'array<array-key, mixed>',
  ),
  'http_request_method_exists' => 
  array (
    0 => 'bool',
    'method' => 'mixed',
  ),
  'http_request_method_name' => 
  array (
    0 => 'false|string',
    'method' => 'int',
  ),
  'http_request_method_register' => 
  array (
    0 => 'false|int',
    'method' => 'string',
  ),
  'http_request_method_unregister' => 
  array (
    0 => 'bool',
    'method' => 'mixed',
  ),
  'http_response_code' => 
  array (
    0 => 'bool|int',
    'response_code=' => 'int',
  ),
  'http_send_content_disposition' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'inline=' => 'bool',
  ),
  'http_send_content_type' => 
  array (
    0 => 'bool',
    'content_type=' => 'string',
  ),
  'http_send_data' => 
  array (
    0 => 'bool',
    'data' => 'string',
  ),
  'http_send_file' => 
  array (
    0 => 'bool',
    'file' => 'string',
  ),
  'http_send_last_modified' => 
  array (
    0 => 'bool',
    'timestamp=' => 'int',
  ),
  'http_send_status' => 
  array (
    0 => 'bool',
    'status' => 'int',
  ),
  'http_send_stream' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
  ),
  'http_support' => 
  array (
    0 => 'int',
    'feature=' => 'int',
  ),
  'http_throttle' => 
  array (
    0 => 'void',
    'sec' => 'float',
    'bytes=' => 'int',
  ),
  'httpdeflatestream::__construct' => 
  array (
    0 => 'void',
    'flags=' => 'int',
  ),
  'httpdeflatestream::factory' => 
  array (
    0 => 'HttpDeflateStream',
    'flags=' => 'int',
    'class_name=' => 'string',
  ),
  'httpdeflatestream::finish' => 
  array (
    0 => 'string',
    'data=' => 'string',
  ),
  'httpdeflatestream::flush' => 
  array (
    0 => 'false|string',
    'data=' => 'string',
  ),
  'httpdeflatestream::update' => 
  array (
    0 => 'false|string',
    'data' => 'string',
  ),
  'httpinflatestream::__construct' => 
  array (
    0 => 'void',
    'flags=' => 'int',
  ),
  'httpinflatestream::factory' => 
  array (
    0 => 'HttpInflateStream',
    'flags=' => 'int',
    'class_name=' => 'string',
  ),
  'httpinflatestream::finish' => 
  array (
    0 => 'string',
    'data=' => 'string',
  ),
  'httpinflatestream::flush' => 
  array (
    0 => 'false|string',
    'data=' => 'string',
  ),
  'httpinflatestream::update' => 
  array (
    0 => 'false|string',
    'data' => 'string',
  ),
  'httpmessage::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
  ),
  'httpmessage::__tostring' => 
  array (
    0 => 'string',
  ),
  'httpmessage::addheaders' => 
  array (
    0 => 'void',
    'headers' => 'array<array-key, mixed>',
    'append=' => 'bool',
  ),
  'httpmessage::count' => 
  array (
    0 => 'int',
  ),
  'httpmessage::current' => 
  array (
    0 => 'mixed',
  ),
  'httpmessage::detach' => 
  array (
    0 => 'HttpMessage',
  ),
  'httpmessage::factory' => 
  array (
    0 => 'HttpMessage|null',
    'raw_message=' => 'string',
    'class_name=' => 'string',
  ),
  'httpmessage::fromenv' => 
  array (
    0 => 'HttpMessage|null',
    'message_type' => 'int',
    'class_name=' => 'string',
  ),
  'httpmessage::fromstring' => 
  array (
    0 => 'HttpMessage|null',
    'raw_message=' => 'string',
    'class_name=' => 'string',
  ),
  'httpmessage::getbody' => 
  array (
    0 => 'string',
  ),
  'httpmessage::getheader' => 
  array (
    0 => 'null|string',
    'header' => 'string',
  ),
  'httpmessage::getheaders' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'httpmessage::gethttpversion' => 
  array (
    0 => 'string',
  ),
  'httpmessage::getinfo' => 
  array (
    0 => 'mixed',
  ),
  'httpmessage::getparentmessage' => 
  array (
    0 => 'HttpMessage',
  ),
  'httpmessage::getrequestmethod' => 
  array (
    0 => 'false|string',
  ),
  'httpmessage::getrequesturl' => 
  array (
    0 => 'false|string',
  ),
  'httpmessage::getresponsecode' => 
  array (
    0 => 'int',
  ),
  'httpmessage::getresponsestatus' => 
  array (
    0 => 'string',
  ),
  'httpmessage::gettype' => 
  array (
    0 => 'int',
  ),
  'httpmessage::guesscontenttype' => 
  array (
    0 => 'false|string',
    'magic_file' => 'string',
    'magic_mode=' => 'int',
  ),
  'httpmessage::key' => 
  array (
    0 => 'int|string',
  ),
  'httpmessage::next' => 
  array (
    0 => 'void',
  ),
  'httpmessage::prepend' => 
  array (
    0 => 'void',
    'message' => 'HttpMessage',
    'top=' => 'bool',
  ),
  'httpmessage::reverse' => 
  array (
    0 => 'HttpMessage',
  ),
  'httpmessage::rewind' => 
  array (
    0 => 'void',
  ),
  'httpmessage::send' => 
  array (
    0 => 'bool',
  ),
  'httpmessage::serialize' => 
  array (
    0 => 'string',
  ),
  'httpmessage::setbody' => 
  array (
    0 => 'void',
    'body' => 'string',
  ),
  'httpmessage::setheaders' => 
  array (
    0 => 'void',
    'headers' => 'array<array-key, mixed>',
  ),
  'httpmessage::sethttpversion' => 
  array (
    0 => 'bool',
    'version' => 'string',
  ),
  'httpmessage::setinfo' => 
  array (
    0 => 'mixed',
    'http_info' => 'mixed',
  ),
  'httpmessage::setrequestmethod' => 
  array (
    0 => 'bool',
    'method' => 'string',
  ),
  'httpmessage::setrequesturl' => 
  array (
    0 => 'bool',
    'url' => 'string',
  ),
  'httpmessage::setresponsecode' => 
  array (
    0 => 'bool',
    'code' => 'int',
  ),
  'httpmessage::setresponsestatus' => 
  array (
    0 => 'bool',
    'status' => 'string',
  ),
  'httpmessage::settype' => 
  array (
    0 => 'void',
    'type' => 'int',
  ),
  'httpmessage::tomessagetypeobject' => 
  array (
    0 => 'HttpRequest|HttpResponse|null',
  ),
  'httpmessage::tostring' => 
  array (
    0 => 'string',
    'include_parent=' => 'bool',
  ),
  'httpmessage::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'httpmessage::valid' => 
  array (
    0 => 'bool',
  ),
  'httpquerystring::__construct' => 
  array (
    0 => 'void',
    'global=' => 'bool',
    'add=' => 'mixed',
  ),
  'httpquerystring::__tostring' => 
  array (
    0 => 'string',
  ),
  'httpquerystring::factory' => 
  array (
    0 => 'mixed',
    'global' => 'mixed',
    'params' => 'mixed',
    'class_name' => 'mixed',
  ),
  'httpquerystring::get' => 
  array (
    0 => 'mixed',
    'key=' => 'string',
    'type=' => 'mixed',
    'defval=' => 'mixed',
    'delete=' => 'bool',
  ),
  'httpquerystring::getarray' => 
  array (
    0 => 'mixed',
    'name' => 'mixed',
    'defval' => 'mixed',
    'delete' => 'mixed',
  ),
  'httpquerystring::getbool' => 
  array (
    0 => 'mixed',
    'name' => 'mixed',
    'defval' => 'mixed',
    'delete' => 'mixed',
  ),
  'httpquerystring::getfloat' => 
  array (
    0 => 'mixed',
    'name' => 'mixed',
    'defval' => 'mixed',
    'delete' => 'mixed',
  ),
  'httpquerystring::getint' => 
  array (
    0 => 'mixed',
    'name' => 'mixed',
    'defval' => 'mixed',
    'delete' => 'mixed',
  ),
  'httpquerystring::getobject' => 
  array (
    0 => 'mixed',
    'name' => 'mixed',
    'defval' => 'mixed',
    'delete' => 'mixed',
  ),
  'httpquerystring::getstring' => 
  array (
    0 => 'mixed',
    'name' => 'mixed',
    'defval' => 'mixed',
    'delete' => 'mixed',
  ),
  'httpquerystring::mod' => 
  array (
    0 => 'HttpQueryString',
    'params' => 'mixed',
  ),
  'httpquerystring::offsetexists' => 
  array (
    0 => 'bool',
    'offset' => 'int|string',
  ),
  'httpquerystring::offsetget' => 
  array (
    0 => 'mixed',
    'offset' => 'int|string',
  ),
  'httpquerystring::offsetset' => 
  array (
    0 => 'void',
    'offset' => 'int|null|string',
    'value' => 'mixed',
  ),
  'httpquerystring::offsetunset' => 
  array (
    0 => 'void',
    'offset' => 'int|string',
  ),
  'httpquerystring::serialize' => 
  array (
    0 => 'string',
  ),
  'httpquerystring::set' => 
  array (
    0 => 'string',
    'params' => 'mixed',
  ),
  'httpquerystring::singleton' => 
  array (
    0 => 'HttpQueryString',
    'global=' => 'bool',
  ),
  'httpquerystring::toarray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'httpquerystring::tostring' => 
  array (
    0 => 'string',
  ),
  'httpquerystring::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'httpquerystring::xlate' => 
  array (
    0 => 'bool',
    'ie' => 'string',
    'oe' => 'string',
  ),
  'httprequest::__construct' => 
  array (
    0 => 'void',
    'url=' => 'string',
    'request_method=' => 'int',
    'options=' => 'array<array-key, mixed>',
  ),
  'httprequest::addbody' => 
  array (
    0 => 'mixed',
    'request_body_data' => 'mixed',
  ),
  'httprequest::addcookies' => 
  array (
    0 => 'bool',
    'cookies' => 'array<array-key, mixed>',
  ),
  'httprequest::addheaders' => 
  array (
    0 => 'bool',
    'headers' => 'array<array-key, mixed>',
  ),
  'httprequest::addpostfields' => 
  array (
    0 => 'bool',
    'post_data' => 'array<array-key, mixed>',
  ),
  'httprequest::addpostfile' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'file' => 'string',
    'content_type=' => 'string',
  ),
  'httprequest::addputdata' => 
  array (
    0 => 'bool',
    'put_data' => 'string',
  ),
  'httprequest::addquerydata' => 
  array (
    0 => 'bool',
    'query_params' => 'array<array-key, mixed>',
  ),
  'httprequest::addrawpostdata' => 
  array (
    0 => 'bool',
    'raw_post_data' => 'string',
  ),
  'httprequest::addssloptions' => 
  array (
    0 => 'bool',
    'options' => 'array<array-key, mixed>',
  ),
  'httprequest::clearhistory' => 
  array (
    0 => 'void',
  ),
  'httprequest::enablecookies' => 
  array (
    0 => 'bool',
  ),
  'httprequest::encodebody' => 
  array (
    0 => 'mixed',
    'fields' => 'mixed',
    'files' => 'mixed',
  ),
  'httprequest::factory' => 
  array (
    0 => 'mixed',
    'url' => 'mixed',
    'method' => 'mixed',
    'options' => 'mixed',
    'class_name' => 'mixed',
  ),
  'httprequest::flushcookies' => 
  array (
    0 => 'mixed',
  ),
  'httprequest::get' => 
  array (
    0 => 'mixed',
    'url' => 'mixed',
    'options' => 'mixed',
    '&info' => 'mixed',
  ),
  'httprequest::getbody' => 
  array (
    0 => 'mixed',
  ),
  'httprequest::getcontenttype' => 
  array (
    0 => 'string',
  ),
  'httprequest::getcookies' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'httprequest::getheaders' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'httprequest::gethistory' => 
  array (
    0 => 'HttpMessage',
  ),
  'httprequest::getmethod' => 
  array (
    0 => 'int',
  ),
  'httprequest::getoptions' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'httprequest::getpostfields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'httprequest::getpostfiles' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'httprequest::getputdata' => 
  array (
    0 => 'string',
  ),
  'httprequest::getputfile' => 
  array (
    0 => 'string',
  ),
  'httprequest::getquerydata' => 
  array (
    0 => 'string',
  ),
  'httprequest::getrawpostdata' => 
  array (
    0 => 'string',
  ),
  'httprequest::getrawrequestmessage' => 
  array (
    0 => 'string',
  ),
  'httprequest::getrawresponsemessage' => 
  array (
    0 => 'string',
  ),
  'httprequest::getrequestmessage' => 
  array (
    0 => 'HttpMessage',
  ),
  'httprequest::getresponsebody' => 
  array (
    0 => 'string',
  ),
  'httprequest::getresponsecode' => 
  array (
    0 => 'int',
  ),
  'httprequest::getresponsecookies' => 
  array (
    0 => 'array<array-key, stdClass>',
    'flags=' => 'int',
    'allowed_extras=' => 'array<array-key, mixed>',
  ),
  'httprequest::getresponsedata' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'httprequest::getresponseheader' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
  ),
  'httprequest::getresponseinfo' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
  ),
  'httprequest::getresponsemessage' => 
  array (
    0 => 'HttpMessage',
  ),
  'httprequest::getresponsestatus' => 
  array (
    0 => 'string',
  ),
  'httprequest::getssloptions' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'httprequest::geturl' => 
  array (
    0 => 'string',
  ),
  'httprequest::head' => 
  array (
    0 => 'mixed',
    'url' => 'mixed',
    'options' => 'mixed',
    '&info' => 'mixed',
  ),
  'httprequest::methodexists' => 
  array (
    0 => 'mixed',
    'method' => 'mixed',
  ),
  'httprequest::methodname' => 
  array (
    0 => 'mixed',
    'method_id' => 'mixed',
  ),
  'httprequest::methodregister' => 
  array (
    0 => 'mixed',
    'method_name' => 'mixed',
  ),
  'httprequest::methodunregister' => 
  array (
    0 => 'mixed',
    'method' => 'mixed',
  ),
  'httprequest::postdata' => 
  array (
    0 => 'mixed',
    'url' => 'mixed',
    'data' => 'mixed',
    'options' => 'mixed',
    '&info' => 'mixed',
  ),
  'httprequest::postfields' => 
  array (
    0 => 'mixed',
    'url' => 'mixed',
    'data' => 'mixed',
    'options' => 'mixed',
    '&info' => 'mixed',
  ),
  'httprequest::putdata' => 
  array (
    0 => 'mixed',
    'url' => 'mixed',
    'data' => 'mixed',
    'options' => 'mixed',
    '&info' => 'mixed',
  ),
  'httprequest::putfile' => 
  array (
    0 => 'mixed',
    'url' => 'mixed',
    'file' => 'mixed',
    'options' => 'mixed',
    '&info' => 'mixed',
  ),
  'httprequest::putstream' => 
  array (
    0 => 'mixed',
    'url' => 'mixed',
    'stream' => 'mixed',
    'options' => 'mixed',
    '&info' => 'mixed',
  ),
  'httprequest::resetcookies' => 
  array (
    0 => 'bool',
    'session_only=' => 'bool',
  ),
  'httprequest::send' => 
  array (
    0 => 'HttpMessage',
  ),
  'httprequest::setbody' => 
  array (
    0 => 'bool',
    'request_body_data=' => 'string',
  ),
  'httprequest::setcontenttype' => 
  array (
    0 => 'bool',
    'content_type' => 'string',
  ),
  'httprequest::setcookies' => 
  array (
    0 => 'bool',
    'cookies=' => 'array<array-key, mixed>',
  ),
  'httprequest::setheaders' => 
  array (
    0 => 'bool',
    'headers=' => 'array<array-key, mixed>',
  ),
  'httprequest::setmethod' => 
  array (
    0 => 'bool',
    'request_method' => 'int',
  ),
  'httprequest::setoptions' => 
  array (
    0 => 'bool',
    'options=' => 'array<array-key, mixed>',
  ),
  'httprequest::setpostfields' => 
  array (
    0 => 'bool',
    'post_data' => 'array<array-key, mixed>',
  ),
  'httprequest::setpostfiles' => 
  array (
    0 => 'bool',
    'post_files' => 'array<array-key, mixed>',
  ),
  'httprequest::setputdata' => 
  array (
    0 => 'bool',
    'put_data=' => 'string',
  ),
  'httprequest::setputfile' => 
  array (
    0 => 'bool',
    'file=' => 'string',
  ),
  'httprequest::setquerydata' => 
  array (
    0 => 'bool',
    'query_data' => 'mixed',
  ),
  'httprequest::setrawpostdata' => 
  array (
    0 => 'bool',
    'raw_post_data=' => 'string',
  ),
  'httprequest::setssloptions' => 
  array (
    0 => 'bool',
    'options=' => 'array<array-key, mixed>',
  ),
  'httprequest::seturl' => 
  array (
    0 => 'bool',
    'url' => 'string',
  ),
  'httprequestdatashare::__construct' => 
  array (
    0 => 'void',
  ),
  'httprequestdatashare::__destruct' => 
  array (
    0 => 'void',
  ),
  'httprequestdatashare::attach' => 
  array (
    0 => 'mixed',
    'request' => 'HttpRequest',
  ),
  'httprequestdatashare::count' => 
  array (
    0 => 'int',
  ),
  'httprequestdatashare::detach' => 
  array (
    0 => 'mixed',
    'request' => 'HttpRequest',
  ),
  'httprequestdatashare::factory' => 
  array (
    0 => 'mixed',
    'global' => 'mixed',
    'class_name' => 'mixed',
  ),
  'httprequestdatashare::reset' => 
  array (
    0 => 'mixed',
  ),
  'httprequestdatashare::singleton' => 
  array (
    0 => 'mixed',
    'global' => 'mixed',
  ),
  'httprequestpool::__construct' => 
  array (
    0 => 'void',
    'request=' => 'HttpRequest',
  ),
  'httprequestpool::__destruct' => 
  array (
    0 => 'void',
  ),
  'httprequestpool::attach' => 
  array (
    0 => 'bool',
    'request' => 'HttpRequest',
  ),
  'httprequestpool::count' => 
  array (
    0 => 'int',
  ),
  'httprequestpool::current' => 
  array (
    0 => 'mixed',
  ),
  'httprequestpool::detach' => 
  array (
    0 => 'bool',
    'request' => 'HttpRequest',
  ),
  'httprequestpool::enableevents' => 
  array (
    0 => 'mixed',
    'enable' => 'mixed',
  ),
  'httprequestpool::enablepipelining' => 
  array (
    0 => 'mixed',
    'enable' => 'mixed',
  ),
  'httprequestpool::getattachedrequests' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'httprequestpool::getfinishedrequests' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'httprequestpool::key' => 
  array (
    0 => 'int|string',
  ),
  'httprequestpool::next' => 
  array (
    0 => 'void',
  ),
  'httprequestpool::reset' => 
  array (
    0 => 'void',
  ),
  'httprequestpool::rewind' => 
  array (
    0 => 'void',
  ),
  'httprequestpool::send' => 
  array (
    0 => 'bool',
  ),
  'httprequestpool::socketperform' => 
  array (
    0 => 'bool',
  ),
  'httprequestpool::socketselect' => 
  array (
    0 => 'bool',
    'timeout=' => 'float',
  ),
  'httprequestpool::valid' => 
  array (
    0 => 'bool',
  ),
  'httpresponse::capture' => 
  array (
    0 => 'void',
  ),
  'httpresponse::getbuffersize' => 
  array (
    0 => 'int',
  ),
  'httpresponse::getcache' => 
  array (
    0 => 'bool',
  ),
  'httpresponse::getcachecontrol' => 
  array (
    0 => 'string',
  ),
  'httpresponse::getcontentdisposition' => 
  array (
    0 => 'string',
  ),
  'httpresponse::getcontenttype' => 
  array (
    0 => 'string',
  ),
  'httpresponse::getdata' => 
  array (
    0 => 'string',
  ),
  'httpresponse::getetag' => 
  array (
    0 => 'string',
  ),
  'httpresponse::getfile' => 
  array (
    0 => 'string',
  ),
  'httpresponse::getgzip' => 
  array (
    0 => 'bool',
  ),
  'httpresponse::getheader' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
  ),
  'httpresponse::getlastmodified' => 
  array (
    0 => 'int',
  ),
  'httpresponse::getrequestbody' => 
  array (
    0 => 'string',
  ),
  'httpresponse::getrequestbodystream' => 
  array (
    0 => 'resource',
  ),
  'httpresponse::getrequestheaders' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'httpresponse::getstream' => 
  array (
    0 => 'resource',
  ),
  'httpresponse::getthrottledelay' => 
  array (
    0 => 'float',
  ),
  'httpresponse::guesscontenttype' => 
  array (
    0 => 'false|string',
    'magic_file' => 'string',
    'magic_mode=' => 'int',
  ),
  'httpresponse::redirect' => 
  array (
    0 => 'void',
    'url=' => 'string',
    'params=' => 'array<array-key, mixed>',
    'session=' => 'bool',
    'status=' => 'int',
  ),
  'httpresponse::send' => 
  array (
    0 => 'bool',
    'clean_ob=' => 'bool',
  ),
  'httpresponse::setbuffersize' => 
  array (
    0 => 'bool',
    'bytes' => 'int',
  ),
  'httpresponse::setcache' => 
  array (
    0 => 'bool',
    'cache' => 'bool',
  ),
  'httpresponse::setcachecontrol' => 
  array (
    0 => 'bool',
    'control' => 'string',
    'max_age=' => 'int',
    'must_revalidate=' => 'bool',
  ),
  'httpresponse::setcontentdisposition' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'inline=' => 'bool',
  ),
  'httpresponse::setcontenttype' => 
  array (
    0 => 'bool',
    'content_type' => 'string',
  ),
  'httpresponse::setdata' => 
  array (
    0 => 'bool',
    'data' => 'mixed',
  ),
  'httpresponse::setetag' => 
  array (
    0 => 'bool',
    'etag' => 'string',
  ),
  'httpresponse::setfile' => 
  array (
    0 => 'bool',
    'file' => 'string',
  ),
  'httpresponse::setgzip' => 
  array (
    0 => 'bool',
    'gzip' => 'bool',
  ),
  'httpresponse::setheader' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value=' => 'mixed',
    'replace=' => 'bool',
  ),
  'httpresponse::setlastmodified' => 
  array (
    0 => 'bool',
    'timestamp' => 'int',
  ),
  'httpresponse::setstream' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
  ),
  'httpresponse::setthrottledelay' => 
  array (
    0 => 'bool',
    'seconds' => 'float',
  ),
  'httpresponse::status' => 
  array (
    0 => 'bool',
    'status' => 'int',
  ),
  'httputil::buildcookie' => 
  array (
    0 => 'mixed',
    'cookie_array' => 'mixed',
  ),
  'httputil::buildstr' => 
  array (
    0 => 'mixed',
    'query' => 'mixed',
    'prefix' => 'mixed',
    'arg_sep' => 'mixed',
  ),
  'httputil::buildurl' => 
  array (
    0 => 'mixed',
    'url' => 'mixed',
    'parts' => 'mixed',
    'flags' => 'mixed',
    '&composed' => 'mixed',
  ),
  'httputil::chunkeddecode' => 
  array (
    0 => 'mixed',
    'encoded_string' => 'mixed',
  ),
  'httputil::date' => 
  array (
    0 => 'mixed',
    'timestamp' => 'mixed',
  ),
  'httputil::deflate' => 
  array (
    0 => 'mixed',
    'plain' => 'mixed',
    'flags' => 'mixed',
  ),
  'httputil::inflate' => 
  array (
    0 => 'mixed',
    'encoded' => 'mixed',
  ),
  'httputil::matchetag' => 
  array (
    0 => 'mixed',
    'plain_etag' => 'mixed',
    'for_range' => 'mixed',
  ),
  'httputil::matchmodified' => 
  array (
    0 => 'mixed',
    'last_modified' => 'mixed',
    'for_range' => 'mixed',
  ),
  'httputil::matchrequestheader' => 
  array (
    0 => 'mixed',
    'header_name' => 'mixed',
    'header_value' => 'mixed',
    'case_sensitive' => 'mixed',
  ),
  'httputil::negotiatecharset' => 
  array (
    0 => 'mixed',
    'supported' => 'mixed',
    '&result' => 'mixed',
  ),
  'httputil::negotiatecontenttype' => 
  array (
    0 => 'mixed',
    'supported' => 'mixed',
    '&result' => 'mixed',
  ),
  'httputil::negotiatelanguage' => 
  array (
    0 => 'mixed',
    'supported' => 'mixed',
    '&result' => 'mixed',
  ),
  'httputil::parsecookie' => 
  array (
    0 => 'mixed',
    'cookie_string' => 'mixed',
  ),
  'httputil::parseheaders' => 
  array (
    0 => 'mixed',
    'headers_string' => 'mixed',
  ),
  'httputil::parsemessage' => 
  array (
    0 => 'mixed',
    'message_string' => 'mixed',
  ),
  'httputil::parseparams' => 
  array (
    0 => 'mixed',
    'param_string' => 'mixed',
    'flags' => 'mixed',
  ),
  'httputil::support' => 
  array (
    0 => 'mixed',
    'feature' => 'mixed',
  ),
  'hw_api::checkin' => 
  array (
    0 => 'bool',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::checkout' => 
  array (
    0 => 'bool',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::children' => 
  array (
    0 => 'array<array-key, mixed>',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::content' => 
  array (
    0 => 'HW_API_Content',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::copy' => 
  array (
    0 => 'hw_api_content',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::dbstat' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::dcstat' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::dstanchors' => 
  array (
    0 => 'array<array-key, mixed>',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::dstofsrcanchor' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::find' => 
  array (
    0 => 'array<array-key, mixed>',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::ftstat' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::hwstat' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::identify' => 
  array (
    0 => 'bool',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::info' => 
  array (
    0 => 'array<array-key, mixed>',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::insert' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::insertanchor' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::insertcollection' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::insertdocument' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::link' => 
  array (
    0 => 'bool',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::lock' => 
  array (
    0 => 'bool',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::move' => 
  array (
    0 => 'bool',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::object' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::objectbyanchor' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::parents' => 
  array (
    0 => 'array<array-key, mixed>',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::remove' => 
  array (
    0 => 'bool',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::replace' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::setcommittedversion' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::srcanchors' => 
  array (
    0 => 'array<array-key, mixed>',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::srcsofdst' => 
  array (
    0 => 'array<array-key, mixed>',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::unlock' => 
  array (
    0 => 'bool',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::user' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api::userlist' => 
  array (
    0 => 'array<array-key, mixed>',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api_attribute' => 
  array (
    0 => 'HW_API_Attribute',
    'name=' => 'string',
    'value=' => 'string',
  ),
  'hw_api_attribute::key' => 
  array (
    0 => 'string',
  ),
  'hw_api_attribute::langdepvalue' => 
  array (
    0 => 'string',
    'language' => 'string',
  ),
  'hw_api_attribute::value' => 
  array (
    0 => 'string',
  ),
  'hw_api_attribute::values' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'hw_api_content' => 
  array (
    0 => 'HW_API_Content',
    'content' => 'string',
    'mimetype' => 'string',
  ),
  'hw_api_content::mimetype' => 
  array (
    0 => 'string',
  ),
  'hw_api_content::read' => 
  array (
    0 => 'string',
    'buffer' => 'string',
    'length' => 'int',
  ),
  'hw_api_error::count' => 
  array (
    0 => 'int',
  ),
  'hw_api_error::reason' => 
  array (
    0 => 'HW_API_Reason',
  ),
  'hw_api_object' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api_object::assign' => 
  array (
    0 => 'bool',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api_object::attreditable' => 
  array (
    0 => 'bool',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api_object::count' => 
  array (
    0 => 'int',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api_object::insert' => 
  array (
    0 => 'bool',
    'attribute' => 'hw_api_attribute',
  ),
  'hw_api_object::remove' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'hw_api_object::title' => 
  array (
    0 => 'string',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hw_api_object::value' => 
  array (
    0 => 'string',
    'name' => 'string',
  ),
  'hw_api_reason::description' => 
  array (
    0 => 'string',
  ),
  'hw_api_reason::type' => 
  array (
    0 => 'HW_API_Reason',
  ),
  'hw_array2objrec' => 
  array (
    0 => 'string',
    'object_array' => 'array<array-key, mixed>',
  ),
  'hw_changeobject' => 
  array (
    0 => 'bool',
    'link' => 'int',
    'objid' => 'int',
    'attributes' => 'array<array-key, mixed>',
  ),
  'hw_children' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'objectid' => 'int',
  ),
  'hw_childrenobj' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'objectid' => 'int',
  ),
  'hw_close' => 
  array (
    0 => 'bool',
    'connection' => 'int',
  ),
  'hw_connect' => 
  array (
    0 => 'int',
    'host' => 'string',
    'port' => 'int',
    'username=' => 'string',
    'password=' => 'string',
  ),
  'hw_connection_info' => 
  array (
    0 => 'mixed',
    'link' => 'int',
  ),
  'hw_cp' => 
  array (
    0 => 'int',
    'connection' => 'int',
    'object_id_array' => 'array<array-key, mixed>',
    'destination_id' => 'int',
  ),
  'hw_deleteobject' => 
  array (
    0 => 'bool',
    'connection' => 'int',
    'object_to_delete' => 'int',
  ),
  'hw_docbyanchor' => 
  array (
    0 => 'int',
    'connection' => 'int',
    'anchorid' => 'int',
  ),
  'hw_docbyanchorobj' => 
  array (
    0 => 'string',
    'connection' => 'int',
    'anchorid' => 'int',
  ),
  'hw_document_attributes' => 
  array (
    0 => 'string',
    'hw_document' => 'int',
  ),
  'hw_document_bodytag' => 
  array (
    0 => 'string',
    'hw_document' => 'int',
    'prefix=' => 'string',
  ),
  'hw_document_content' => 
  array (
    0 => 'string',
    'hw_document' => 'int',
  ),
  'hw_document_setcontent' => 
  array (
    0 => 'bool',
    'hw_document' => 'int',
    'content' => 'string',
  ),
  'hw_document_size' => 
  array (
    0 => 'int',
    'hw_document' => 'int',
  ),
  'hw_dummy' => 
  array (
    0 => 'string',
    'link' => 'int',
    'id' => 'int',
    'msgid' => 'int',
  ),
  'hw_edittext' => 
  array (
    0 => 'bool',
    'connection' => 'int',
    'hw_document' => 'int',
  ),
  'hw_error' => 
  array (
    0 => 'int',
    'connection' => 'int',
  ),
  'hw_errormsg' => 
  array (
    0 => 'string',
    'connection' => 'int',
  ),
  'hw_free_document' => 
  array (
    0 => 'bool',
    'hw_document' => 'int',
  ),
  'hw_getanchors' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'objectid' => 'int',
  ),
  'hw_getanchorsobj' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'objectid' => 'int',
  ),
  'hw_getandlock' => 
  array (
    0 => 'string',
    'connection' => 'int',
    'objectid' => 'int',
  ),
  'hw_getchildcoll' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'objectid' => 'int',
  ),
  'hw_getchildcollobj' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'objectid' => 'int',
  ),
  'hw_getchilddoccoll' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'objectid' => 'int',
  ),
  'hw_getchilddoccollobj' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'objectid' => 'int',
  ),
  'hw_getobject' => 
  array (
    0 => 'mixed',
    'connection' => 'int',
    'objectid' => 'mixed',
    'query=' => 'string',
  ),
  'hw_getobjectbyquery' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'query' => 'string',
    'max_hits' => 'int',
  ),
  'hw_getobjectbyquerycoll' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'objectid' => 'int',
    'query' => 'string',
    'max_hits' => 'int',
  ),
  'hw_getobjectbyquerycollobj' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'objectid' => 'int',
    'query' => 'string',
    'max_hits' => 'int',
  ),
  'hw_getobjectbyqueryobj' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'query' => 'string',
    'max_hits' => 'int',
  ),
  'hw_getparents' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'objectid' => 'int',
  ),
  'hw_getparentsobj' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'objectid' => 'int',
  ),
  'hw_getrellink' => 
  array (
    0 => 'string',
    'link' => 'int',
    'rootid' => 'int',
    'sourceid' => 'int',
    'destid' => 'int',
  ),
  'hw_getremote' => 
  array (
    0 => 'int',
    'connection' => 'int',
    'objectid' => 'int',
  ),
  'hw_getremotechildren' => 
  array (
    0 => 'mixed',
    'connection' => 'int',
    'object_record' => 'string',
  ),
  'hw_getsrcbydestobj' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'objectid' => 'int',
  ),
  'hw_gettext' => 
  array (
    0 => 'int',
    'connection' => 'int',
    'objectid' => 'int',
    'prefix=' => 'mixed',
  ),
  'hw_getusername' => 
  array (
    0 => 'string',
    'connection' => 'int',
  ),
  'hw_identify' => 
  array (
    0 => 'string',
    'link' => 'int',
    'username' => 'string',
    'password' => 'string',
  ),
  'hw_incollections' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
    'object_id_array' => 'array<array-key, mixed>',
    'collection_id_array' => 'array<array-key, mixed>',
    'return_collections' => 'int',
  ),
  'hw_info' => 
  array (
    0 => 'string',
    'connection' => 'int',
  ),
  'hw_inscoll' => 
  array (
    0 => 'int',
    'connection' => 'int',
    'objectid' => 'int',
    'object_array' => 'array<array-key, mixed>',
  ),
  'hw_insdoc' => 
  array (
    0 => 'int',
    'connection' => 'mixed',
    'parentid' => 'int',
    'object_record' => 'string',
    'text=' => 'string',
  ),
  'hw_insertanchors' => 
  array (
    0 => 'bool',
    'hwdoc' => 'int',
    'anchorecs' => 'array<array-key, mixed>',
    'dest' => 'array<array-key, mixed>',
    'urlprefixes=' => 'array<array-key, mixed>',
  ),
  'hw_insertdocument' => 
  array (
    0 => 'int',
    'connection' => 'int',
    'parent_id' => 'int',
    'hw_document' => 'int',
  ),
  'hw_insertobject' => 
  array (
    0 => 'int',
    'connection' => 'int',
    'object_rec' => 'string',
    'parameter' => 'string',
  ),
  'hw_mapid' => 
  array (
    0 => 'int',
    'connection' => 'int',
    'server_id' => 'int',
    'object_id' => 'int',
  ),
  'hw_modifyobject' => 
  array (
    0 => 'bool',
    'connection' => 'int',
    'object_to_change' => 'int',
    'remove' => 'array<array-key, mixed>',
    'add' => 'array<array-key, mixed>',
    'mode=' => 'int',
  ),
  'hw_mv' => 
  array (
    0 => 'int',
    'connection' => 'int',
    'object_id_array' => 'array<array-key, mixed>',
    'source_id' => 'int',
    'destination_id' => 'int',
  ),
  'hw_new_document' => 
  array (
    0 => 'int',
    'object_record' => 'string',
    'document_data' => 'string',
    'document_size' => 'int',
  ),
  'hw_objrec2array' => 
  array (
    0 => 'array<array-key, mixed>',
    'object_record' => 'string',
    'format=' => 'array<array-key, mixed>',
  ),
  'hw_output_document' => 
  array (
    0 => 'bool',
    'hw_document' => 'int',
  ),
  'hw_pconnect' => 
  array (
    0 => 'int',
    'host' => 'string',
    'port' => 'int',
    'username=' => 'string',
    'password=' => 'string',
  ),
  'hw_pipedocument' => 
  array (
    0 => 'int',
    'connection' => 'int',
    'objectid' => 'int',
    'url_prefixes=' => 'array<array-key, mixed>',
  ),
  'hw_root' => 
  array (
    0 => 'int',
  ),
  'hw_setlinkroot' => 
  array (
    0 => 'int',
    'link' => 'int',
    'rootid' => 'int',
  ),
  'hw_stat' => 
  array (
    0 => 'string',
    'link' => 'int',
  ),
  'hw_unlock' => 
  array (
    0 => 'bool',
    'connection' => 'int',
    'objectid' => 'int',
  ),
  'hw_who' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'int',
  ),
  'hwapi_attribute_new' => 
  array (
    0 => 'HW_API_Attribute',
    'name=' => 'string',
    'value=' => 'string',
  ),
  'hwapi_content_new' => 
  array (
    0 => 'HW_API_Content',
    'content' => 'string',
    'mimetype' => 'string',
  ),
  'hwapi_hgcsp' => 
  array (
    0 => 'HW_API',
    'hostname' => 'string',
    'port=' => 'int',
  ),
  'hwapi_object_new' => 
  array (
    0 => 'hw_api_object',
    'parameter' => 'array<array-key, mixed>',
  ),
  'hypot' => 
  array (
    0 => 'float',
    'x' => 'float',
    'y' => 'float',
  ),
  'ibase_add_user' => 
  array (
    0 => 'bool',
    'service_handle' => 'resource',
    'user_name' => 'string',
    'password' => 'string',
    'first_name=' => 'string',
    'middle_name=' => 'string',
    'last_name=' => 'string',
  ),
  'ibase_affected_rows' => 
  array (
    0 => 'int',
    'link_identifier=' => 'resource',
  ),
  'ibase_backup' => 
  array (
    0 => 'mixed',
    'service_handle' => 'resource',
    'source_db' => 'string',
    'dest_file' => 'string',
    'options=' => 'int',
    'verbose=' => 'bool',
  ),
  'ibase_blob_add' => 
  array (
    0 => 'void',
    'blob_handle' => 'resource',
    'data' => 'string',
  ),
  'ibase_blob_cancel' => 
  array (
    0 => 'bool',
    'blob_handle' => 'resource',
  ),
  'ibase_blob_close' => 
  array (
    0 => 'bool|string',
    'blob_handle' => 'resource',
  ),
  'ibase_blob_create' => 
  array (
    0 => 'resource',
    'link_identifier=' => 'resource',
  ),
  'ibase_blob_echo' => 
  array (
    0 => 'bool',
    'link_identifier' => 'mixed',
    'blob_id' => 'string',
  ),
  'ibase_blob_echo\'1' => 
  array (
    0 => 'bool',
    'blob_id' => 'string',
  ),
  'ibase_blob_get' => 
  array (
    0 => 'false|string',
    'blob_handle' => 'resource',
    'length' => 'int',
  ),
  'ibase_blob_import' => 
  array (
    0 => 'false|string',
    'link_identifier' => 'resource',
    'file_handle' => 'resource',
  ),
  'ibase_blob_info' => 
  array (
    0 => 'array<array-key, mixed>',
    'link_identifier' => 'resource',
    'blob_id' => 'string',
  ),
  'ibase_blob_info\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'blob_id' => 'string',
  ),
  'ibase_blob_open' => 
  array (
    0 => 'false|resource',
    'link_identifier' => 'mixed',
    'blob_id' => 'string',
  ),
  'ibase_blob_open\'1' => 
  array (
    0 => 'resource',
    'blob_id' => 'string',
  ),
  'ibase_close' => 
  array (
    0 => 'bool',
    'link_identifier=' => 'resource',
  ),
  'ibase_commit' => 
  array (
    0 => 'bool',
    'link_identifier=' => 'resource',
  ),
  'ibase_commit_ret' => 
  array (
    0 => 'bool',
    'link_identifier=' => 'resource',
  ),
  'ibase_connect' => 
  array (
    0 => 'false|resource',
    'database=' => 'string',
    'username=' => 'string',
    'password=' => 'string',
    'charset=' => 'string',
    'buffers=' => 'int',
    'dialect=' => 'int',
    'role=' => 'string',
  ),
  'ibase_db_info' => 
  array (
    0 => 'string',
    'service_handle' => 'resource',
    'db' => 'string',
    'action' => 'int',
    'argument=' => 'int',
  ),
  'ibase_delete_user' => 
  array (
    0 => 'bool',
    'service_handle' => 'resource',
    'user_name' => 'string',
    'password=' => 'string',
    'first_name=' => 'string',
    'middle_name=' => 'string',
    'last_name=' => 'string',
  ),
  'ibase_drop_db' => 
  array (
    0 => 'bool',
    'link_identifier=' => 'resource',
  ),
  'ibase_errcode' => 
  array (
    0 => 'false|int',
  ),
  'ibase_errmsg' => 
  array (
    0 => 'false|string',
  ),
  'ibase_execute' => 
  array (
    0 => 'false|resource',
    'query' => 'resource',
    'bind_arg=' => 'mixed',
    '...args=' => 'mixed',
  ),
  'ibase_fetch_assoc' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'result' => 'resource',
    'fetch_flags=' => 'int',
  ),
  'ibase_fetch_object' => 
  array (
    0 => 'false|object',
    'result' => 'resource',
    'fetch_flags=' => 'int',
  ),
  'ibase_fetch_row' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'result' => 'resource',
    'fetch_flags=' => 'int',
  ),
  'ibase_field_info' => 
  array (
    0 => 'array<array-key, mixed>',
    'query_result' => 'resource',
    'field_number' => 'int',
  ),
  'ibase_free_event_handler' => 
  array (
    0 => 'bool',
    'event' => 'resource',
  ),
  'ibase_free_query' => 
  array (
    0 => 'bool',
    'query' => 'resource',
  ),
  'ibase_free_result' => 
  array (
    0 => 'bool',
    'result' => 'resource',
  ),
  'ibase_gen_id' => 
  array (
    0 => 'int|string',
    'generator' => 'string',
    'increment=' => 'int',
    'link_identifier=' => 'resource',
  ),
  'ibase_maintain_db' => 
  array (
    0 => 'bool',
    'service_handle' => 'resource',
    'db' => 'string',
    'action' => 'int',
    'argument=' => 'int',
  ),
  'ibase_modify_user' => 
  array (
    0 => 'bool',
    'service_handle' => 'resource',
    'user_name' => 'string',
    'password' => 'string',
    'first_name=' => 'string',
    'middle_name=' => 'string',
    'last_name=' => 'string',
  ),
  'ibase_name_result' => 
  array (
    0 => 'bool',
    'result' => 'resource',
    'name' => 'string',
  ),
  'ibase_num_fields' => 
  array (
    0 => 'int',
    'query_result' => 'resource',
  ),
  'ibase_num_params' => 
  array (
    0 => 'int',
    'query' => 'resource',
  ),
  'ibase_num_rows' => 
  array (
    0 => 'int',
    'result_identifier' => 'mixed',
  ),
  'ibase_param_info' => 
  array (
    0 => 'array<array-key, mixed>',
    'query' => 'resource',
    'field_number' => 'int',
  ),
  'ibase_pconnect' => 
  array (
    0 => 'false|resource',
    'database=' => 'string',
    'username=' => 'string',
    'password=' => 'string',
    'charset=' => 'string',
    'buffers=' => 'int',
    'dialect=' => 'int',
    'role=' => 'string',
  ),
  'ibase_prepare' => 
  array (
    0 => 'false|resource',
    'link_identifier' => 'mixed',
    'query' => 'string',
    'trans_identifier' => 'mixed',
  ),
  'ibase_query' => 
  array (
    0 => 'false|resource',
    'link_identifier=' => 'resource',
    'string=' => 'string',
    'bind_arg=' => 'int',
    '...args=' => 'mixed',
  ),
  'ibase_restore' => 
  array (
    0 => 'mixed',
    'service_handle' => 'resource',
    'source_file' => 'string',
    'dest_db' => 'string',
    'options=' => 'int',
    'verbose=' => 'bool',
  ),
  'ibase_rollback' => 
  array (
    0 => 'bool',
    'link_identifier=' => 'resource',
  ),
  'ibase_rollback_ret' => 
  array (
    0 => 'bool',
    'link_identifier=' => 'resource',
  ),
  'ibase_server_info' => 
  array (
    0 => 'string',
    'service_handle' => 'resource',
    'action' => 'int',
  ),
  'ibase_service_attach' => 
  array (
    0 => 'resource',
    'host' => 'string',
    'dba_username' => 'string',
    'dba_password' => 'string',
  ),
  'ibase_service_detach' => 
  array (
    0 => 'bool',
    'service_handle' => 'resource',
  ),
  'ibase_set_event_handler' => 
  array (
    0 => 'resource',
    'link_identifier' => 'mixed',
    'callback' => 'callable',
    'event=' => 'string',
    '...args=' => 'mixed',
  ),
  'ibase_set_event_handler\'1' => 
  array (
    0 => 'resource',
    'callback' => 'callable',
    'event' => 'string',
    '...args' => 'mixed',
  ),
  'ibase_timefmt' => 
  array (
    0 => 'bool',
    'format' => 'string',
    'columntype=' => 'int',
  ),
  'ibase_trans' => 
  array (
    0 => 'false|resource',
    'trans_args=' => 'int',
    'link_identifier=' => 'mixed',
    '...args=' => 'mixed',
  ),
  'ibase_wait_event' => 
  array (
    0 => 'string',
    'link_identifier' => 'mixed',
    'event=' => 'string',
    '...args=' => 'mixed',
  ),
  'ibase_wait_event\'1' => 
  array (
    0 => 'string',
    'event' => 'string',
    '...args' => 'mixed',
  ),
  'iconv' => 
  array (
    0 => 'false|string',
    'from_encoding' => 'string',
    'to_encoding' => 'string',
    'string' => 'string',
  ),
  'iconv_get_encoding' => 
  array (
    0 => 'array<array-key, mixed>|false|string',
    'type=' => 'string',
  ),
  'iconv_mime_decode' => 
  array (
    0 => 'false|string',
    'string' => 'string',
    'mode=' => 'int',
    'encoding=' => 'null|string',
  ),
  'iconv_mime_decode_headers' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'headers' => 'string',
    'mode=' => 'int',
    'encoding=' => 'null|string',
  ),
  'iconv_mime_encode' => 
  array (
    0 => 'false|string',
    'field_name' => 'string',
    'field_value' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'iconv_set_encoding' => 
  array (
    0 => 'bool',
    'type' => 'string',
    'encoding' => 'string',
  ),
  'iconv_strlen' => 
  array (
    0 => 'false|int<0, max>',
    'string' => 'string',
    'encoding=' => 'null|string',
  ),
  'iconv_strpos' => 
  array (
    0 => 'false|int',
    'haystack' => 'string',
    'needle' => 'string',
    'offset=' => 'int',
    'encoding=' => 'null|string',
  ),
  'iconv_strrpos' => 
  array (
    0 => 'false|int',
    'haystack' => 'string',
    'needle' => 'string',
    'encoding=' => 'null|string',
  ),
  'iconv_substr' => 
  array (
    0 => 'false|string',
    'string' => 'string',
    'offset' => 'int',
    'length=' => 'int|null',
    'encoding=' => 'null|string',
  ),
  'id3_get_frame_long_name' => 
  array (
    0 => 'string',
    'frameid' => 'string',
  ),
  'id3_get_frame_short_name' => 
  array (
    0 => 'string',
    'frameid' => 'string',
  ),
  'id3_get_genre_id' => 
  array (
    0 => 'int',
    'genre' => 'string',
  ),
  'id3_get_genre_list' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'id3_get_genre_name' => 
  array (
    0 => 'string',
    'genre_id' => 'int',
  ),
  'id3_get_tag' => 
  array (
    0 => 'array<array-key, mixed>',
    'filename' => 'string',
    'version=' => 'int',
  ),
  'id3_get_version' => 
  array (
    0 => 'int',
    'filename' => 'string',
  ),
  'id3_remove_tag' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'version=' => 'int',
  ),
  'id3_set_tag' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'tag' => 'array<array-key, mixed>',
    'version=' => 'int',
  ),
  'idate' => 
  array (
    0 => 'int',
    'format' => 'string',
    'timestamp=' => 'int|null',
  ),
  'idn_strerror' => 
  array (
    0 => 'string',
    'errorcode' => 'int',
  ),
  'idn_to_ascii' => 
  array (
    0 => 'false|string',
    'domain' => 'string',
    'flags=' => 'int',
    'variant=' => 'int',
    '&w_idna_info=' => 'array<array-key, mixed>',
  ),
  'idn_to_utf8' => 
  array (
    0 => 'false|string',
    'domain' => 'string',
    'flags=' => 'int',
    'variant=' => 'int',
    '&w_idna_info=' => 'array<array-key, mixed>',
  ),
  'ifx_affected_rows' => 
  array (
    0 => 'int',
    'result_id' => 'resource',
  ),
  'ifx_blobinfile_mode' => 
  array (
    0 => 'bool',
    'mode' => 'int',
  ),
  'ifx_byteasvarchar' => 
  array (
    0 => 'bool',
    'mode' => 'int',
  ),
  'ifx_close' => 
  array (
    0 => 'bool',
    'link_identifier=' => 'resource',
  ),
  'ifx_connect' => 
  array (
    0 => 'resource',
    'database=' => 'string',
    'userid=' => 'string',
    'password=' => 'string',
  ),
  'ifx_copy_blob' => 
  array (
    0 => 'int',
    'bid' => 'int',
  ),
  'ifx_create_blob' => 
  array (
    0 => 'int',
    'type' => 'int',
    'mode' => 'int',
    'param' => 'string',
  ),
  'ifx_create_char' => 
  array (
    0 => 'int',
    'param' => 'string',
  ),
  'ifx_do' => 
  array (
    0 => 'bool',
    'result_id' => 'resource',
  ),
  'ifx_error' => 
  array (
    0 => 'string',
    'link_identifier=' => 'resource',
  ),
  'ifx_errormsg' => 
  array (
    0 => 'string',
    'errorcode=' => 'int',
  ),
  'ifx_fetch_row' => 
  array (
    0 => 'array<array-key, mixed>',
    'result_id' => 'resource',
    'position=' => 'mixed',
  ),
  'ifx_fieldproperties' => 
  array (
    0 => 'array<array-key, mixed>',
    'result_id' => 'resource',
  ),
  'ifx_fieldtypes' => 
  array (
    0 => 'array<array-key, mixed>',
    'result_id' => 'resource',
  ),
  'ifx_free_blob' => 
  array (
    0 => 'bool',
    'bid' => 'int',
  ),
  'ifx_free_char' => 
  array (
    0 => 'bool',
    'bid' => 'int',
  ),
  'ifx_free_result' => 
  array (
    0 => 'bool',
    'result_id' => 'resource',
  ),
  'ifx_get_blob' => 
  array (
    0 => 'string',
    'bid' => 'int',
  ),
  'ifx_get_char' => 
  array (
    0 => 'string',
    'bid' => 'int',
  ),
  'ifx_getsqlca' => 
  array (
    0 => 'array<array-key, mixed>',
    'result_id' => 'resource',
  ),
  'ifx_htmltbl_result' => 
  array (
    0 => 'int',
    'result_id' => 'resource',
    'html_table_options=' => 'string',
  ),
  'ifx_nullformat' => 
  array (
    0 => 'bool',
    'mode' => 'int',
  ),
  'ifx_num_fields' => 
  array (
    0 => 'int',
    'result_id' => 'resource',
  ),
  'ifx_num_rows' => 
  array (
    0 => 'int',
    'result_id' => 'resource',
  ),
  'ifx_pconnect' => 
  array (
    0 => 'resource',
    'database=' => 'string',
    'userid=' => 'string',
    'password=' => 'string',
  ),
  'ifx_prepare' => 
  array (
    0 => 'resource',
    'query' => 'string',
    'link_identifier' => 'resource',
    'cursor_def=' => 'int',
    'blobidarray=' => 'mixed',
  ),
  'ifx_query' => 
  array (
    0 => 'resource',
    'query' => 'string',
    'link_identifier' => 'resource',
    'cursor_type=' => 'int',
    'blobidarray=' => 'mixed',
  ),
  'ifx_textasvarchar' => 
  array (
    0 => 'bool',
    'mode' => 'int',
  ),
  'ifx_update_blob' => 
  array (
    0 => 'bool',
    'bid' => 'int',
    'content' => 'string',
  ),
  'ifx_update_char' => 
  array (
    0 => 'bool',
    'bid' => 'int',
    'content' => 'string',
  ),
  'ifxus_close_slob' => 
  array (
    0 => 'bool',
    'bid' => 'int',
  ),
  'ifxus_create_slob' => 
  array (
    0 => 'int',
    'mode' => 'int',
  ),
  'ifxus_free_slob' => 
  array (
    0 => 'bool',
    'bid' => 'int',
  ),
  'ifxus_open_slob' => 
  array (
    0 => 'int',
    'bid' => 'int',
    'mode' => 'int',
  ),
  'ifxus_read_slob' => 
  array (
    0 => 'string',
    'bid' => 'int',
    'nbytes' => 'int',
  ),
  'ifxus_seek_slob' => 
  array (
    0 => 'int',
    'bid' => 'int',
    'mode' => 'int',
    'offset' => 'int',
  ),
  'ifxus_tell_slob' => 
  array (
    0 => 'int',
    'bid' => 'int',
  ),
  'ifxus_write_slob' => 
  array (
    0 => 'int',
    'bid' => 'int',
    'content' => 'string',
  ),
  'igbinary_serialize' => 
  array (
    0 => 'false|string',
    'value' => 'mixed',
  ),
  'igbinary_unserialize' => 
  array (
    0 => 'mixed',
    'str' => 'string',
  ),
  'ignore_user_abort' => 
  array (
    0 => 'int',
    'enable=' => 'bool|null',
  ),
  'iis_add_server' => 
  array (
    0 => 'int',
    'path' => 'string',
    'comment' => 'string',
    'server_ip' => 'string',
    'port' => 'int',
    'host_name' => 'string',
    'rights' => 'int',
    'start_server' => 'int',
  ),
  'iis_get_dir_security' => 
  array (
    0 => 'int',
    'server_instance' => 'int',
    'virtual_path' => 'string',
  ),
  'iis_get_script_map' => 
  array (
    0 => 'string',
    'server_instance' => 'int',
    'virtual_path' => 'string',
    'script_extension' => 'string',
  ),
  'iis_get_server_by_comment' => 
  array (
    0 => 'int',
    'comment' => 'string',
  ),
  'iis_get_server_by_path' => 
  array (
    0 => 'int',
    'path' => 'string',
  ),
  'iis_get_server_rights' => 
  array (
    0 => 'int',
    'server_instance' => 'int',
    'virtual_path' => 'string',
  ),
  'iis_get_service_state' => 
  array (
    0 => 'int',
    'service_id' => 'string',
  ),
  'iis_remove_server' => 
  array (
    0 => 'int',
    'server_instance' => 'int',
  ),
  'iis_set_app_settings' => 
  array (
    0 => 'int',
    'server_instance' => 'int',
    'virtual_path' => 'string',
    'application_scope' => 'string',
  ),
  'iis_set_dir_security' => 
  array (
    0 => 'int',
    'server_instance' => 'int',
    'virtual_path' => 'string',
    'directory_flags' => 'int',
  ),
  'iis_set_script_map' => 
  array (
    0 => 'int',
    'server_instance' => 'int',
    'virtual_path' => 'string',
    'script_extension' => 'string',
    'engine_path' => 'string',
    'allow_scripting' => 'int',
  ),
  'iis_set_server_rights' => 
  array (
    0 => 'int',
    'server_instance' => 'int',
    'virtual_path' => 'string',
    'directory_flags' => 'int',
  ),
  'iis_start_server' => 
  array (
    0 => 'int',
    'server_instance' => 'int',
  ),
  'iis_start_service' => 
  array (
    0 => 'int',
    'service_id' => 'string',
  ),
  'iis_stop_server' => 
  array (
    0 => 'int',
    'server_instance' => 'int',
  ),
  'iis_stop_service' => 
  array (
    0 => 'int',
    'service_id' => 'string',
  ),
  'image_type_to_extension' => 
  array (
    0 => 'string',
    'image_type' => 'int',
    'include_dot=' => 'bool',
  ),
  'image_type_to_mime_type' => 
  array (
    0 => 'string',
    'image_type' => 'int',
  ),
  'imageaffine' => 
  array (
    0 => 'GdImage|false',
    'image' => 'GdImage',
    'affine' => 'array<array-key, mixed>',
    'clip=' => 'array<array-key, mixed>|null',
  ),
  'imageaffinematrixconcat' => 
  array (
    0 => 'array{0: float, 1: float, 2: float, 3: float, 4: float, 5: float}|false',
    'matrix1' => 'array<array-key, mixed>',
    'matrix2' => 'array<array-key, mixed>',
  ),
  'imageaffinematrixget' => 
  array (
    0 => 'array{0: float, 1: float, 2: float, 3: float, 4: float, 5: float}|false',
    'type' => 'int',
    'options' => 'array<array-key, mixed>|float',
  ),
  'imagealphablending' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'enable' => 'bool',
  ),
  'imageantialias' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'enable' => 'bool',
  ),
  'imagearc' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'center_x' => 'int',
    'center_y' => 'int',
    'width' => 'int',
    'height' => 'int',
    'start_angle' => 'int',
    'end_angle' => 'int',
    'color' => 'int',
  ),
  'imagebmp' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'file=' => 'null|resource|string',
    'compressed=' => 'bool',
  ),
  'imagechar' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'font' => 'int',
    'x' => 'int',
    'y' => 'int',
    'char' => 'string',
    'color' => 'int',
  ),
  'imagecharup' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'font' => 'int',
    'x' => 'int',
    'y' => 'int',
    'char' => 'string',
    'color' => 'int',
  ),
  'imagecolorallocate' => 
  array (
    0 => 'false|int',
    'image' => 'GdImage',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
  ),
  'imagecolorallocatealpha' => 
  array (
    0 => 'false|int',
    'image' => 'GdImage',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'alpha' => 'int',
  ),
  'imagecolorat' => 
  array (
    0 => 'false|int',
    'image' => 'GdImage',
    'x' => 'int',
    'y' => 'int',
  ),
  'imagecolorclosest' => 
  array (
    0 => 'int',
    'image' => 'GdImage',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
  ),
  'imagecolorclosestalpha' => 
  array (
    0 => 'int',
    'image' => 'GdImage',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'alpha' => 'int',
  ),
  'imagecolorclosesthwb' => 
  array (
    0 => 'int',
    'image' => 'GdImage',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
  ),
  'imagecolordeallocate' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'color' => 'int',
  ),
  'imagecolorexact' => 
  array (
    0 => 'int',
    'image' => 'GdImage',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
  ),
  'imagecolorexactalpha' => 
  array (
    0 => 'int',
    'image' => 'GdImage',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'alpha' => 'int',
  ),
  'imagecolormatch' => 
  array (
    0 => 'bool',
    'image1' => 'GdImage',
    'image2' => 'GdImage',
  ),
  'imagecolorresolve' => 
  array (
    0 => 'int',
    'image' => 'GdImage',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
  ),
  'imagecolorresolvealpha' => 
  array (
    0 => 'int',
    'image' => 'GdImage',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'alpha' => 'int',
  ),
  'imagecolorset' => 
  array (
    0 => 'false|null',
    'image' => 'GdImage',
    'color' => 'int',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'alpha=' => 'int',
  ),
  'imagecolorsforindex' => 
  array (
    0 => 'array<array-key, mixed>',
    'image' => 'GdImage',
    'color' => 'int',
  ),
  'imagecolorstotal' => 
  array (
    0 => 'int',
    'image' => 'GdImage',
  ),
  'imagecolortransparent' => 
  array (
    0 => 'int',
    'image' => 'GdImage',
    'color=' => 'int|null',
  ),
  'imageconvolution' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'matrix' => 'array<array-key, mixed>',
    'divisor' => 'float',
    'offset' => 'float',
  ),
  'imagecopy' => 
  array (
    0 => 'bool',
    'dst_image' => 'GdImage',
    'src_image' => 'GdImage',
    'dst_x' => 'int',
    'dst_y' => 'int',
    'src_x' => 'int',
    'src_y' => 'int',
    'src_width' => 'int',
    'src_height' => 'int',
  ),
  'imagecopymerge' => 
  array (
    0 => 'bool',
    'dst_image' => 'GdImage',
    'src_image' => 'GdImage',
    'dst_x' => 'int',
    'dst_y' => 'int',
    'src_x' => 'int',
    'src_y' => 'int',
    'src_width' => 'int',
    'src_height' => 'int',
    'pct' => 'int',
  ),
  'imagecopymergegray' => 
  array (
    0 => 'bool',
    'dst_image' => 'GdImage',
    'src_image' => 'GdImage',
    'dst_x' => 'int',
    'dst_y' => 'int',
    'src_x' => 'int',
    'src_y' => 'int',
    'src_width' => 'int',
    'src_height' => 'int',
    'pct' => 'int',
  ),
  'imagecopyresampled' => 
  array (
    0 => 'bool',
    'dst_image' => 'GdImage',
    'src_image' => 'GdImage',
    'dst_x' => 'int',
    'dst_y' => 'int',
    'src_x' => 'int',
    'src_y' => 'int',
    'dst_width' => 'int',
    'dst_height' => 'int',
    'src_width' => 'int',
    'src_height' => 'int',
  ),
  'imagecopyresized' => 
  array (
    0 => 'bool',
    'dst_image' => 'GdImage',
    'src_image' => 'GdImage',
    'dst_x' => 'int',
    'dst_y' => 'int',
    'src_x' => 'int',
    'src_y' => 'int',
    'dst_width' => 'int',
    'dst_height' => 'int',
    'src_width' => 'int',
    'src_height' => 'int',
  ),
  'imagecreate' => 
  array (
    0 => 'GdImage|false',
    'width' => 'int',
    'height' => 'int',
  ),
  'imagecreatefrombmp' => 
  array (
    0 => 'GdImage|false',
    'filename' => 'string',
  ),
  'imagecreatefromgd' => 
  array (
    0 => 'GdImage|false',
    'filename' => 'string',
  ),
  'imagecreatefromgd2' => 
  array (
    0 => 'GdImage|false',
    'filename' => 'string',
  ),
  'imagecreatefromgd2part' => 
  array (
    0 => 'GdImage|false',
    'filename' => 'string',
    'x' => 'int',
    'y' => 'int',
    'width' => 'int',
    'height' => 'int',
  ),
  'imagecreatefromgif' => 
  array (
    0 => 'GdImage|false',
    'filename' => 'string',
  ),
  'imagecreatefromjpeg' => 
  array (
    0 => 'GdImage|false',
    'filename' => 'string',
  ),
  'imagecreatefrompng' => 
  array (
    0 => 'GdImage|false',
    'filename' => 'string',
  ),
  'imagecreatefromstring' => 
  array (
    0 => 'GdImage|false',
    'data' => 'string',
  ),
  'imagecreatefromtga' => 
  array (
    0 => 'GdImage|false',
    'filename' => 'string',
  ),
  'imagecreatefromwbmp' => 
  array (
    0 => 'GdImage|false',
    'filename' => 'string',
  ),
  'imagecreatefromwebp' => 
  array (
    0 => 'GdImage|false',
    'filename' => 'string',
  ),
  'imagecreatefromxbm' => 
  array (
    0 => 'GdImage|false',
    'filename' => 'string',
  ),
  'imagecreatefromxpm' => 
  array (
    0 => 'GdImage|false',
    'filename' => 'string',
  ),
  'imagecreatetruecolor' => 
  array (
    0 => 'GdImage|false',
    'width' => 'int',
    'height' => 'int',
  ),
  'imagecrop' => 
  array (
    0 => 'GdImage|false',
    'image' => 'GdImage',
    'rectangle' => 'array<array-key, mixed>',
  ),
  'imagecropauto' => 
  array (
    0 => 'GdImage|false',
    'image' => 'GdImage',
    'mode=' => 'int',
    'threshold=' => 'float',
    'color=' => 'int',
  ),
  'imagedashedline' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'x1' => 'int',
    'y1' => 'int',
    'x2' => 'int',
    'y2' => 'int',
    'color' => 'int',
  ),
  'imagedestroy' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
  ),
  'imageellipse' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'center_x' => 'int',
    'center_y' => 'int',
    'width' => 'int',
    'height' => 'int',
    'color' => 'int',
  ),
  'imagefill' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'x' => 'int',
    'y' => 'int',
    'color' => 'int',
  ),
  'imagefilledarc' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'center_x' => 'int',
    'center_y' => 'int',
    'width' => 'int',
    'height' => 'int',
    'start_angle' => 'int',
    'end_angle' => 'int',
    'color' => 'int',
    'style' => 'int',
  ),
  'imagefilledellipse' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'center_x' => 'int',
    'center_y' => 'int',
    'width' => 'int',
    'height' => 'int',
    'color' => 'int',
  ),
  'imagefilledpolygon' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'points' => 'array<array-key, mixed>',
    'num_points_or_color' => 'int',
    'color=' => 'int|null',
  ),
  'imagefilledrectangle' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'x1' => 'int',
    'y1' => 'int',
    'x2' => 'int',
    'y2' => 'int',
    'color' => 'int',
  ),
  'imagefilltoborder' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'x' => 'int',
    'y' => 'int',
    'border_color' => 'int',
    'color' => 'int',
  ),
  'imagefilter' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'filter' => 'int',
    '...args=' => 'array<array-key, mixed>|bool|float|int',
  ),
  'imageflip' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'mode' => 'int',
  ),
  'imagefontheight' => 
  array (
    0 => 'int',
    'font' => 'int',
  ),
  'imagefontwidth' => 
  array (
    0 => 'int',
    'font' => 'int',
  ),
  'imageftbbox' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'size' => 'float',
    'angle' => 'float',
    'font_filename' => 'string',
    'string' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'imagefttext' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'image' => 'GdImage',
    'size' => 'float',
    'angle' => 'float',
    'x' => 'int',
    'y' => 'int',
    'color' => 'int',
    'font_filename' => 'string',
    'text' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'imagegammacorrect' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'input_gamma' => 'float',
    'output_gamma' => 'float',
  ),
  'imagegd' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'file=' => 'null|string',
  ),
  'imagegd2' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'file=' => 'null|string',
    'chunk_size=' => 'int',
    'mode=' => 'int',
  ),
  'imagegetclip' => 
  array (
    0 => 'array<int, int>',
    'image' => 'GdImage',
  ),
  'imagegetinterpolation' => 
  array (
    0 => 'int',
    'image' => 'GdImage',
  ),
  'imagegif' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'file=' => 'null|resource|string',
  ),
  'imagegrabscreen' => 
  array (
    0 => 'GdImage|false',
  ),
  'imagegrabwindow' => 
  array (
    0 => 'GdImage|false',
    'handle' => 'int',
    'client_area=' => 'int',
  ),
  'imageinterlace' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'enable=' => 'bool|null',
  ),
  'imageistruecolor' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
  ),
  'imagejpeg' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'file=' => 'null|resource|string',
    'quality=' => 'int',
  ),
  'imagelayereffect' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'effect' => 'int',
  ),
  'imageline' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'x1' => 'int',
    'y1' => 'int',
    'x2' => 'int',
    'y2' => 'int',
    'color' => 'int',
  ),
  'imageloadfont' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
  ),
  'imageobj::pasteimage' => 
  array (
    0 => 'void',
    'srcImg' => 'imageObj',
    'transparentColorHex' => 'int',
    'dstX' => 'int',
    'dstY' => 'int',
    'angle' => 'int',
  ),
  'imageobj::saveimage' => 
  array (
    0 => 'int',
    'filename' => 'string',
    'oMap' => 'mapObj',
  ),
  'imageobj::savewebimage' => 
  array (
    0 => 'string',
  ),
  'imageopenpolygon' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'points' => 'array<array-key, mixed>',
    'num_points_or_color' => 'int',
    'color=' => 'int|null',
  ),
  'imagepalettecopy' => 
  array (
    0 => 'void',
    'dst' => 'GdImage',
    'src' => 'GdImage',
  ),
  'imagepalettetotruecolor' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
  ),
  'imagepng' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'file=' => 'null|resource|string',
    'quality=' => 'int',
    'filters=' => 'int',
  ),
  'imagepolygon' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'points' => 'array<array-key, mixed>',
    'num_points_or_color' => 'int',
    'color=' => 'int|null',
  ),
  'imagerectangle' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'x1' => 'int',
    'y1' => 'int',
    'x2' => 'int',
    'y2' => 'int',
    'color' => 'int',
  ),
  'imageresolution' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'image' => 'GdImage',
    'resolution_x=' => 'int|null',
    'resolution_y=' => 'int|null',
  ),
  'imagerotate' => 
  array (
    0 => 'GdImage|false',
    'image' => 'GdImage',
    'angle' => 'float',
    'background_color' => 'int',
    'ignore_transparent=' => 'bool',
  ),
  'imagesavealpha' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'enable' => 'bool',
  ),
  'imagescale' => 
  array (
    0 => 'GdImage|false',
    'image' => 'GdImage',
    'width' => 'int',
    'height=' => 'int',
    'mode=' => 'int',
  ),
  'imagesetbrush' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'brush' => 'GdImage',
  ),
  'imagesetclip' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'x1' => 'int',
    'y1' => 'int',
    'x2' => 'int',
    'y2' => 'int',
  ),
  'imagesetinterpolation' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'method=' => 'int',
  ),
  'imagesetpixel' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'x' => 'int',
    'y' => 'int',
    'color' => 'int',
  ),
  'imagesetstyle' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'style' => 'non-empty-array<array-key, mixed>',
  ),
  'imagesetthickness' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'thickness' => 'int',
  ),
  'imagesettile' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'tile' => 'GdImage',
  ),
  'imagestring' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'font' => 'int',
    'x' => 'int',
    'y' => 'int',
    'string' => 'string',
    'color' => 'int',
  ),
  'imagestringup' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'font' => 'int',
    'x' => 'int',
    'y' => 'int',
    'string' => 'string',
    'color' => 'int',
  ),
  'imagesx' => 
  array (
    0 => 'int',
    'image' => 'GdImage',
  ),
  'imagesy' => 
  array (
    0 => 'int',
    'image' => 'GdImage',
  ),
  'imagetruecolortopalette' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'dither' => 'bool',
    'num_colors' => 'int',
  ),
  'imagettfbbox' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'size' => 'float',
    'angle' => 'float',
    'font_filename' => 'string',
    'string' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'imagettftext' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'image' => 'GdImage',
    'size' => 'float',
    'angle' => 'float',
    'x' => 'int',
    'y' => 'int',
    'color' => 'int',
    'font_filename' => 'string',
    'text' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'imagetypes' => 
  array (
    0 => 'int',
  ),
  'imagewbmp' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'file=' => 'null|resource|string',
    'foreground_color=' => 'int|null',
  ),
  'imagewebp' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'file=' => 'null|resource|string',
    'quality=' => 'int',
  ),
  'imagexbm' => 
  array (
    0 => 'bool',
    'image' => 'GdImage',
    'filename' => 'null|string',
    'foreground_color=' => 'int|null',
  ),
  'imagick::__construct' => 
  array (
    0 => 'void',
    'files=' => 'array<array-key, string>|null|string',
  ),
  'imagick::__tostring' => 
  array (
    0 => 'string',
  ),
  'imagick::adaptiveblurimage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
    'sigma' => 'float',
    'channel=' => 'int',
  ),
  'imagick::adaptiveresizeimage' => 
  array (
    0 => 'bool',
    'columns' => 'int',
    'rows' => 'int',
    'bestfit=' => 'bool',
    'legacy=' => 'bool',
  ),
  'imagick::adaptivesharpenimage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
    'sigma' => 'float',
    'channel=' => 'int',
  ),
  'imagick::adaptivethresholdimage' => 
  array (
    0 => 'bool',
    'width' => 'int',
    'height' => 'int',
    'offset' => 'int',
  ),
  'imagick::addimage' => 
  array (
    0 => 'bool',
    'image' => 'Imagick',
  ),
  'imagick::addnoiseimage' => 
  array (
    0 => 'bool',
    'noise' => 'int',
    'channel=' => 'int',
  ),
  'imagick::addnoiseimagewithattenuate' => 
  array (
    0 => 'bool',
    'noise' => 'int',
    'attenuate' => 'float',
    'channel=' => 'int',
  ),
  'imagick::affinetransformimage' => 
  array (
    0 => 'bool',
    'settings' => 'ImagickDraw',
  ),
  'imagick::animateimages' => 
  array (
    0 => 'bool',
    'x_server' => 'string',
  ),
  'imagick::annotateimage' => 
  array (
    0 => 'bool',
    'settings' => 'ImagickDraw',
    'x' => 'float',
    'y' => 'float',
    'angle' => 'float',
    'text' => 'string',
  ),
  'imagick::appendimages' => 
  array (
    0 => 'Imagick',
    'stack' => 'bool',
  ),
  'imagick::autogammaimage' => 
  array (
    0 => 'void',
    'channel=' => 'int|null',
  ),
  'imagick::autolevelimage' => 
  array (
    0 => 'bool',
    'channel=' => 'int',
  ),
  'imagick::autoorient' => 
  array (
    0 => 'void',
  ),
  'imagick::autoorientate' => 
  array (
    0 => 'void',
  ),
  'imagick::autothresholdimage' => 
  array (
    0 => 'bool',
    'auto_threshold_method' => 'int',
  ),
  'imagick::averageimages' => 
  array (
    0 => 'Imagick',
  ),
  'imagick::bilateralblurimage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
    'sigma' => 'float',
    'intensity_sigma' => 'float',
    'spatial_sigma' => 'float',
  ),
  'imagick::blackthresholdimage' => 
  array (
    0 => 'bool',
    'threshold_color' => 'ImagickPixel|string',
  ),
  'imagick::blueshiftimage' => 
  array (
    0 => 'bool',
    'factor=' => 'float',
  ),
  'imagick::blurimage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
    'sigma' => 'float',
    'channel=' => 'int',
  ),
  'imagick::borderimage' => 
  array (
    0 => 'bool',
    'border_color' => 'ImagickPixel|string',
    'width' => 'int',
    'height' => 'int',
  ),
  'imagick::borderimagewithcomposite' => 
  array (
    0 => 'bool',
    'border_color' => 'ImagickPixel|string',
    'width' => 'int',
    'height' => 'int',
    'composite' => 'int',
  ),
  'imagick::brightnesscontrastimage' => 
  array (
    0 => 'bool',
    'brightness' => 'float',
    'contrast' => 'float',
    'channel=' => 'int',
  ),
  'imagick::calculatecrop' => 
  array (
    0 => 'array<array-key, mixed>',
    'original_width' => 'int',
    'original_height' => 'int',
    'desired_width' => 'int',
    'desired_height' => 'int',
    'legacy=' => 'bool',
  ),
  'imagick::cannyedgeimage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
    'sigma' => 'float',
    'lower_percent' => 'float',
    'upper_percent' => 'float',
  ),
  'imagick::channelfximage' => 
  array (
    0 => 'Imagick',
    'expression' => 'string',
  ),
  'imagick::charcoalimage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
    'sigma' => 'float',
  ),
  'imagick::chopimage' => 
  array (
    0 => 'bool',
    'width' => 'int',
    'height' => 'int',
    'x' => 'int',
    'y' => 'int',
  ),
  'imagick::claheimage' => 
  array (
    0 => 'bool',
    'width' => 'int',
    'height' => 'int',
    'number_bins' => 'int',
    'clip_limit' => 'float',
  ),
  'imagick::clampimage' => 
  array (
    0 => 'bool',
    'channel=' => 'int',
  ),
  'imagick::clear' => 
  array (
    0 => 'bool',
  ),
  'imagick::clipimage' => 
  array (
    0 => 'bool',
  ),
  'imagick::clipimagepath' => 
  array (
    0 => 'void',
    'pathname' => 'string',
    'inside' => 'bool',
  ),
  'imagick::clippathimage' => 
  array (
    0 => 'bool',
    'pathname' => 'string',
    'inside' => 'bool',
  ),
  'imagick::clone' => 
  array (
    0 => 'Imagick',
  ),
  'imagick::clutimage' => 
  array (
    0 => 'bool',
    'lookup_table' => 'Imagick',
    'channel=' => 'int',
  ),
  'imagick::coalesceimages' => 
  array (
    0 => 'Imagick',
  ),
  'imagick::colordecisionlistimage' => 
  array (
    0 => 'bool',
    'color_correction_collection' => 'string',
  ),
  'imagick::colorfloodfillimage' => 
  array (
    0 => 'bool',
    'fill' => 'mixed',
    'fuzz' => 'float',
    'bordercolor' => 'mixed',
    'x' => 'int',
    'y' => 'int',
  ),
  'imagick::colorizeimage' => 
  array (
    0 => 'bool',
    'colorize_color' => 'ImagickPixel|string',
    'opacity_color' => 'ImagickPixel|false|string',
    'legacy=' => 'bool|null',
  ),
  'imagick::colormatriximage' => 
  array (
    0 => 'bool',
    'color_matrix' => 'array<array-key, mixed>',
  ),
  'imagick::colorthresholdimage' => 
  array (
    0 => 'bool',
    'start_color' => 'ImagickPixel|string',
    'stop_color' => 'ImagickPixel|string',
  ),
  'imagick::combineimages' => 
  array (
    0 => 'Imagick',
    'colorspace' => 'int',
  ),
  'imagick::commentimage' => 
  array (
    0 => 'bool',
    'comment' => 'string',
  ),
  'imagick::compareimagechannels' => 
  array (
    0 => 'list{Imagick, float}',
    'reference' => 'Imagick',
    'channel' => 'int',
    'metric' => 'int',
  ),
  'imagick::compareimagelayers' => 
  array (
    0 => 'Imagick',
    'metric' => 'int',
  ),
  'imagick::compareimages' => 
  array (
    0 => 'list{Imagick, float}',
    'reference' => 'Imagick',
    'metric' => 'int',
  ),
  'imagick::compleximages' => 
  array (
    0 => 'Imagick',
    'complex_operator' => 'int',
  ),
  'imagick::compositeimage' => 
  array (
    0 => 'bool',
    'composite_image' => 'Imagick',
    'composite' => 'int',
    'x' => 'int',
    'y' => 'int',
    'channel=' => 'int',
  ),
  'imagick::compositeimagegravity' => 
  array (
    0 => 'bool',
    'image' => 'Imagick',
    'composite_constant' => 'int',
    'gravity' => 'int',
  ),
  'imagick::contrastimage' => 
  array (
    0 => 'bool',
    'sharpen' => 'bool',
  ),
  'imagick::contraststretchimage' => 
  array (
    0 => 'bool',
    'black_point' => 'float',
    'white_point' => 'float',
    'channel=' => 'int',
  ),
  'imagick::convolveimage' => 
  array (
    0 => 'bool',
    'kernel' => 'array<array-key, mixed>',
    'channel=' => 'int',
  ),
  'imagick::count' => 
  array (
    0 => 'int',
    'mode=' => 'int',
  ),
  'imagick::cropimage' => 
  array (
    0 => 'bool',
    'width' => 'int',
    'height' => 'int',
    'x' => 'int',
    'y' => 'int',
  ),
  'imagick::cropthumbnailimage' => 
  array (
    0 => 'bool',
    'width' => 'int',
    'height' => 'int',
    'legacy=' => 'bool',
  ),
  'imagick::current' => 
  array (
    0 => 'Imagick',
  ),
  'imagick::cyclecolormapimage' => 
  array (
    0 => 'bool',
    'displace' => 'int',
  ),
  'imagick::decipherimage' => 
  array (
    0 => 'bool',
    'passphrase' => 'string',
  ),
  'imagick::deconstructimages' => 
  array (
    0 => 'Imagick',
  ),
  'imagick::deleteimageartifact' => 
  array (
    0 => 'bool',
    'artifact' => 'string',
  ),
  'imagick::deleteimageproperty' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'imagick::deleteoption' => 
  array (
    0 => 'bool',
    'option' => 'string',
  ),
  'imagick::deskewimage' => 
  array (
    0 => 'bool',
    'threshold' => 'float',
  ),
  'imagick::despeckleimage' => 
  array (
    0 => 'bool',
  ),
  'imagick::destroy' => 
  array (
    0 => 'bool',
  ),
  'imagick::displayimage' => 
  array (
    0 => 'bool',
    'servername' => 'string',
  ),
  'imagick::displayimages' => 
  array (
    0 => 'bool',
    'servername' => 'string',
  ),
  'imagick::distortimage' => 
  array (
    0 => 'bool',
    'distortion' => 'int',
    'arguments' => 'array<array-key, mixed>',
    'bestfit' => 'bool',
  ),
  'imagick::drawimage' => 
  array (
    0 => 'bool',
    'drawing' => 'ImagickDraw',
  ),
  'imagick::edgeimage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
  ),
  'imagick::embossimage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
    'sigma' => 'float',
  ),
  'imagick::encipherimage' => 
  array (
    0 => 'bool',
    'passphrase' => 'string',
  ),
  'imagick::enhanceimage' => 
  array (
    0 => 'bool',
  ),
  'imagick::equalizeimage' => 
  array (
    0 => 'bool',
  ),
  'imagick::evaluateimage' => 
  array (
    0 => 'bool',
    'evaluate' => 'int',
    'constant' => 'float',
    'channel=' => 'int',
  ),
  'imagick::evaluateimages' => 
  array (
    0 => 'bool',
    'evaluate' => 'int',
  ),
  'imagick::exportimagepixels' => 
  array (
    0 => 'list<int>',
    'x' => 'int',
    'y' => 'int',
    'width' => 'int',
    'height' => 'int',
    'map' => 'string',
    'pixelstorage' => 'int',
  ),
  'imagick::extentimage' => 
  array (
    0 => 'bool',
    'width' => 'int',
    'height' => 'int',
    'x' => 'int',
    'y' => 'int',
  ),
  'imagick::filter' => 
  array (
    0 => 'void',
    'ImagickKernel' => 'ImagickKernel',
    'CHANNEL=' => 'int',
  ),
  'imagick::flattenimages' => 
  array (
    0 => 'Imagick',
  ),
  'imagick::flipimage' => 
  array (
    0 => 'bool',
  ),
  'imagick::floodfillpaintimage' => 
  array (
    0 => 'bool',
    'fill_color' => 'ImagickPixel|string',
    'fuzz' => 'float',
    'border_color' => 'ImagickPixel|string',
    'x' => 'int',
    'y' => 'int',
    'invert' => 'bool',
    'channel=' => 'int|null',
  ),
  'imagick::flopimage' => 
  array (
    0 => 'bool',
  ),
  'imagick::forwardfouriertransformimage' => 
  array (
    0 => 'bool',
    'magnitude' => 'bool',
  ),
  'imagick::frameimage' => 
  array (
    0 => 'bool',
    'matte_color' => 'ImagickPixel|string',
    'width' => 'int',
    'height' => 'int',
    'inner_bevel' => 'int',
    'outer_bevel' => 'int',
  ),
  'imagick::frameimagewithcomposite' => 
  array (
    0 => 'bool',
    'matte_color' => 'ImagickPixel|string',
    'width' => 'int',
    'height' => 'int',
    'inner_bevel' => 'int',
    'outer_bevel' => 'int',
    'composite' => 'int',
  ),
  'imagick::functionimage' => 
  array (
    0 => 'bool',
    'function' => 'int',
    'parameters' => 'array<array-key, mixed>',
    'channel=' => 'int',
  ),
  'imagick::fximage' => 
  array (
    0 => 'Imagick',
    'expression' => 'string',
    'channel=' => 'int',
  ),
  'imagick::gammaimage' => 
  array (
    0 => 'bool',
    'gamma' => 'float',
    'channel=' => 'int',
  ),
  'imagick::gaussianblurimage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
    'sigma' => 'float',
    'channel=' => 'int',
  ),
  'imagick::getantialias' => 
  array (
    0 => 'bool',
  ),
  'imagick::getbackgroundcolor' => 
  array (
    0 => 'ImagickPixel',
  ),
  'imagick::getcolorspace' => 
  array (
    0 => 'int',
  ),
  'imagick::getcompression' => 
  array (
    0 => 'int',
  ),
  'imagick::getcompressionquality' => 
  array (
    0 => 'int',
  ),
  'imagick::getconfigureoptions' => 
  array (
    0 => 'array<array-key, mixed>',
    'pattern=' => 'string',
  ),
  'imagick::getcopyright' => 
  array (
    0 => 'string',
  ),
  'imagick::getfeatures' => 
  array (
    0 => 'string',
  ),
  'imagick::getfilename' => 
  array (
    0 => 'string',
  ),
  'imagick::getfont' => 
  array (
    0 => 'string',
  ),
  'imagick::getformat' => 
  array (
    0 => 'string',
  ),
  'imagick::getgravity' => 
  array (
    0 => 'int',
  ),
  'imagick::gethdrienabled' => 
  array (
    0 => 'bool',
  ),
  'imagick::gethomeurl' => 
  array (
    0 => 'string',
  ),
  'imagick::getimage' => 
  array (
    0 => 'Imagick',
  ),
  'imagick::getimagealphachannel' => 
  array (
    0 => 'bool',
  ),
  'imagick::getimageartifact' => 
  array (
    0 => 'null|string',
    'artifact' => 'string',
  ),
  'imagick::getimageartifacts' => 
  array (
    0 => 'array<array-key, mixed>',
    'pattern=' => 'string',
  ),
  'imagick::getimageattribute' => 
  array (
    0 => 'string',
    'key' => 'string',
  ),
  'imagick::getimagebackgroundcolor' => 
  array (
    0 => 'ImagickPixel',
  ),
  'imagick::getimageblob' => 
  array (
    0 => 'string',
  ),
  'imagick::getimageblueprimary' => 
  array (
    0 => 'array{x: float, y: float}',
  ),
  'imagick::getimagebordercolor' => 
  array (
    0 => 'ImagickPixel',
  ),
  'imagick::getimagechanneldepth' => 
  array (
    0 => 'int',
    'channel' => 'int',
  ),
  'imagick::getimagechanneldistortion' => 
  array (
    0 => 'float',
    'reference' => 'Imagick',
    'channel' => 'int',
    'metric' => 'int',
  ),
  'imagick::getimagechanneldistortions' => 
  array (
    0 => 'float',
    'reference_image' => 'Imagick',
    'metric' => 'int',
    'channel=' => 'int',
  ),
  'imagick::getimagechannelextrema' => 
  array (
    0 => 'array{maxima: int, minima: int}',
    'channel' => 'int',
  ),
  'imagick::getimagechannelkurtosis' => 
  array (
    0 => 'array{kurtosis: float, skewness: float}',
    'channel=' => 'int',
  ),
  'imagick::getimagechannelmean' => 
  array (
    0 => 'array{mean: float, standardDeviation: float}',
    'channel' => 'int',
  ),
  'imagick::getimagechannelrange' => 
  array (
    0 => 'array{maxima: float, minima: float}',
    'channel' => 'int',
  ),
  'imagick::getimagechannelstatistics' => 
  array (
    0 => 'array<int, array{depth: int, maxima: float, mean: float, minima: float, standardDeviation: float}>',
  ),
  'imagick::getimageclipmask' => 
  array (
    0 => 'Imagick',
  ),
  'imagick::getimagecolormapcolor' => 
  array (
    0 => 'ImagickPixel',
    'index' => 'int',
  ),
  'imagick::getimagecolors' => 
  array (
    0 => 'int',
  ),
  'imagick::getimagecolorspace' => 
  array (
    0 => 'int',
  ),
  'imagick::getimagecompose' => 
  array (
    0 => 'int',
  ),
  'imagick::getimagecompression' => 
  array (
    0 => 'int',
  ),
  'imagick::getimagecompressionquality' => 
  array (
    0 => 'int',
  ),
  'imagick::getimagedelay' => 
  array (
    0 => 'int',
  ),
  'imagick::getimagedepth' => 
  array (
    0 => 'int',
  ),
  'imagick::getimagedispose' => 
  array (
    0 => 'int',
  ),
  'imagick::getimagedistortion' => 
  array (
    0 => 'float',
    'reference' => 'Imagick',
    'metric' => 'int',
  ),
  'imagick::getimageextrema' => 
  array (
    0 => 'array{max: int, min: int}',
  ),
  'imagick::getimagefilename' => 
  array (
    0 => 'string',
  ),
  'imagick::getimageformat' => 
  array (
    0 => 'string',
  ),
  'imagick::getimagegamma' => 
  array (
    0 => 'float',
  ),
  'imagick::getimagegeometry' => 
  array (
    0 => 'array{height: int, width: int}',
  ),
  'imagick::getimagegravity' => 
  array (
    0 => 'int',
  ),
  'imagick::getimagegreenprimary' => 
  array (
    0 => 'array{x: float, y: float}',
  ),
  'imagick::getimageheight' => 
  array (
    0 => 'int',
  ),
  'imagick::getimagehistogram' => 
  array (
    0 => 'list<ImagickPixel>',
  ),
  'imagick::getimageindex' => 
  array (
    0 => 'int',
  ),
  'imagick::getimageinterlacescheme' => 
  array (
    0 => 'int',
  ),
  'imagick::getimageinterpolatemethod' => 
  array (
    0 => 'int',
  ),
  'imagick::getimageiterations' => 
  array (
    0 => 'int',
  ),
  'imagick::getimagekurtosis' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'imagick::getimagelength' => 
  array (
    0 => 'int',
  ),
  'imagick::getimagemagicklicense' => 
  array (
    0 => 'string',
  ),
  'imagick::getimagemask' => 
  array (
    0 => 'Imagick|null',
    'pixelmask' => 'int',
  ),
  'imagick::getimagematte' => 
  array (
    0 => 'bool',
  ),
  'imagick::getimagemattecolor' => 
  array (
    0 => 'ImagickPixel',
  ),
  'imagick::getimagemean' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'imagick::getimagemimetype' => 
  array (
    0 => 'string',
  ),
  'imagick::getimageorientation' => 
  array (
    0 => 'int',
  ),
  'imagick::getimagepage' => 
  array (
    0 => 'array{height: int, width: int, x: int, y: int}',
  ),
  'imagick::getimagepixelcolor' => 
  array (
    0 => 'ImagickPixel',
    'x' => 'int',
    'y' => 'int',
  ),
  'imagick::getimageprofile' => 
  array (
    0 => 'string',
    'name' => 'string',
  ),
  'imagick::getimageprofiles' => 
  array (
    0 => 'array<array-key, mixed>',
    'pattern=' => 'string',
    'include_values=' => 'bool',
  ),
  'imagick::getimageproperties' => 
  array (
    0 => 'array<int|string, string>',
    'pattern=' => 'string',
    'include_values=' => 'bool',
  ),
  'imagick::getimageproperty' => 
  array (
    0 => 'string',
    'name' => 'string',
  ),
  'imagick::getimagerange' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'imagick::getimageredprimary' => 
  array (
    0 => 'array{x: float, y: float}',
  ),
  'imagick::getimageregion' => 
  array (
    0 => 'Imagick',
    'width' => 'int',
    'height' => 'int',
    'x' => 'int',
    'y' => 'int',
  ),
  'imagick::getimagerenderingintent' => 
  array (
    0 => 'int',
  ),
  'imagick::getimageresolution' => 
  array (
    0 => 'array{x: float, y: float}',
  ),
  'imagick::getimagesblob' => 
  array (
    0 => 'string',
  ),
  'imagick::getimagescene' => 
  array (
    0 => 'int',
  ),
  'imagick::getimagesignature' => 
  array (
    0 => 'string',
  ),
  'imagick::getimagesize' => 
  array (
    0 => 'int',
  ),
  'imagick::getimagetickspersecond' => 
  array (
    0 => 'int',
  ),
  'imagick::getimagetotalinkdensity' => 
  array (
    0 => 'float',
  ),
  'imagick::getimagetype' => 
  array (
    0 => 'int',
  ),
  'imagick::getimageunits' => 
  array (
    0 => 'int',
  ),
  'imagick::getimagevirtualpixelmethod' => 
  array (
    0 => 'int',
  ),
  'imagick::getimagewhitepoint' => 
  array (
    0 => 'array{x: float, y: float}',
  ),
  'imagick::getimagewidth' => 
  array (
    0 => 'int',
  ),
  'imagick::getinterlacescheme' => 
  array (
    0 => 'int',
  ),
  'imagick::getinterpolatemethod' => 
  array (
    0 => 'int',
  ),
  'imagick::getiteratorindex' => 
  array (
    0 => 'int',
  ),
  'imagick::getnumberimages' => 
  array (
    0 => 'int',
  ),
  'imagick::getoption' => 
  array (
    0 => 'string',
    'key' => 'string',
  ),
  'imagick::getoptions' => 
  array (
    0 => 'array<array-key, mixed>',
    'pattern=' => 'string',
  ),
  'imagick::getorientation' => 
  array (
    0 => 'int',
  ),
  'imagick::getpackagename' => 
  array (
    0 => 'string',
  ),
  'imagick::getpage' => 
  array (
    0 => 'array{height: int, width: int, x: int, y: int}',
  ),
  'imagick::getpixeliterator' => 
  array (
    0 => 'ImagickPixelIterator',
  ),
  'imagick::getpixelregioniterator' => 
  array (
    0 => 'ImagickPixelIterator',
    'x' => 'int',
    'y' => 'int',
    'columns' => 'int',
    'rows' => 'int',
  ),
  'imagick::getpointsize' => 
  array (
    0 => 'float',
  ),
  'imagick::getquantum' => 
  array (
    0 => 'int',
  ),
  'imagick::getquantumdepth' => 
  array (
    0 => 'array{quantumDepthLong: int, quantumDepthString: string}',
  ),
  'imagick::getquantumrange' => 
  array (
    0 => 'array{quantumRangeLong: int, quantumRangeString: string}',
  ),
  'imagick::getregistry' => 
  array (
    0 => 'string',
    'key' => 'string',
  ),
  'imagick::getreleasedate' => 
  array (
    0 => 'string',
  ),
  'imagick::getresolution' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'imagick::getresource' => 
  array (
    0 => 'int',
    'type' => 'int',
  ),
  'imagick::getresourcelimit' => 
  array (
    0 => 'int',
    'type' => 'int',
  ),
  'imagick::getsamplingfactors' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'imagick::getsize' => 
  array (
    0 => 'array{columns: int, rows: int}',
  ),
  'imagick::getsizeoffset' => 
  array (
    0 => 'int',
  ),
  'imagick::gettype' => 
  array (
    0 => 'int',
  ),
  'imagick::getversion' => 
  array (
    0 => 'array{versionNumber: int, versionString: string}',
  ),
  'imagick::haldclutimage' => 
  array (
    0 => 'bool',
    'clut' => 'Imagick',
    'channel=' => 'int',
  ),
  'imagick::hasnextimage' => 
  array (
    0 => 'bool',
  ),
  'imagick::haspreviousimage' => 
  array (
    0 => 'bool',
  ),
  'imagick::houghlineimage' => 
  array (
    0 => 'bool',
    'width' => 'int',
    'height' => 'int',
    'threshold' => 'float',
  ),
  'imagick::identifyformat' => 
  array (
    0 => 'string',
    'format' => 'string',
  ),
  'imagick::identifyimage' => 
  array (
    0 => 'array<string, mixed>',
    'append_raw_output=' => 'bool',
  ),
  'imagick::identifyimagetype' => 
  array (
    0 => 'int',
  ),
  'imagick::implodeimage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
  ),
  'imagick::implodeimagewithmethod' => 
  array (
    0 => 'bool',
    'radius' => 'float',
    'pixel_interpolate_method' => 'int',
  ),
  'imagick::importimagepixels' => 
  array (
    0 => 'bool',
    'x' => 'int',
    'y' => 'int',
    'width' => 'int',
    'height' => 'int',
    'map' => 'string',
    'pixelstorage' => 'int',
    'pixels' => 'list<int>',
  ),
  'imagick::interpolativeresizeimage' => 
  array (
    0 => 'bool',
    'columns' => 'int',
    'rows' => 'int',
    'interpolate' => 'int',
  ),
  'imagick::inversefouriertransformimage' => 
  array (
    0 => 'bool',
    'complement' => 'Imagick',
    'magnitude' => 'bool',
  ),
  'imagick::key' => 
  array (
    0 => 'int',
  ),
  'imagick::kmeansimage' => 
  array (
    0 => 'bool',
    'number_colors' => 'int',
    'max_iterations' => 'int',
    'tolerance' => 'float',
  ),
  'imagick::labelimage' => 
  array (
    0 => 'bool',
    'label' => 'string',
  ),
  'imagick::levelimage' => 
  array (
    0 => 'bool',
    'black_point' => 'float',
    'gamma' => 'float',
    'white_point' => 'float',
    'channel=' => 'int',
  ),
  'imagick::levelimagecolors' => 
  array (
    0 => 'bool',
    'black_color' => 'ImagickPixel|string',
    'white_color' => 'ImagickPixel|string',
    'invert' => 'bool',
  ),
  'imagick::levelizeimage' => 
  array (
    0 => 'bool',
    'black_point' => 'float',
    'gamma' => 'float',
    'white_point' => 'float',
  ),
  'imagick::linearstretchimage' => 
  array (
    0 => 'bool',
    'black_point' => 'float',
    'white_point' => 'float',
  ),
  'imagick::liquidrescaleimage' => 
  array (
    0 => 'bool',
    'width' => 'int',
    'height' => 'int',
    'delta_x' => 'float',
    'rigidity' => 'float',
  ),
  'imagick::listregistry' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'imagick::localcontrastimage' => 
  array (
    0 => 'void',
    'radius' => 'float',
    'strength' => 'float',
  ),
  'imagick::magnifyimage' => 
  array (
    0 => 'bool',
  ),
  'imagick::mapimage' => 
  array (
    0 => 'bool',
    'map' => 'Imagick',
    'dither' => 'bool',
  ),
  'imagick::mattefloodfillimage' => 
  array (
    0 => 'bool',
    'alpha' => 'float',
    'fuzz' => 'float',
    'bordercolor' => 'mixed',
    'x' => 'int',
    'y' => 'int',
  ),
  'imagick::meanshiftimage' => 
  array (
    0 => 'bool',
    'width' => 'int',
    'height' => 'int',
    'color_distance' => 'float',
  ),
  'imagick::medianfilterimage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
  ),
  'imagick::mergeimagelayers' => 
  array (
    0 => 'Imagick',
    'layermethod' => 'int',
  ),
  'imagick::minifyimage' => 
  array (
    0 => 'bool',
  ),
  'imagick::modulateimage' => 
  array (
    0 => 'bool',
    'brightness' => 'float',
    'saturation' => 'float',
    'hue' => 'float',
  ),
  'imagick::montageimage' => 
  array (
    0 => 'Imagick',
    'settings' => 'ImagickDraw',
    'tile_geometry' => 'string',
    'thumbnail_geometry' => 'string',
    'monatgemode' => 'int',
    'frame' => 'string',
  ),
  'imagick::morphimages' => 
  array (
    0 => 'Imagick',
    'number_frames' => 'int',
  ),
  'imagick::morphology' => 
  array (
    0 => 'bool',
    'morphology' => 'int',
    'iterations' => 'int',
    'kernel' => 'ImagickKernel',
    'channel=' => 'int',
  ),
  'imagick::mosaicimages' => 
  array (
    0 => 'Imagick',
  ),
  'imagick::motionblurimage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
    'sigma' => 'float',
    'angle' => 'float',
    'channel=' => 'int',
  ),
  'imagick::negateimage' => 
  array (
    0 => 'bool',
    'gray' => 'bool',
    'channel=' => 'int',
  ),
  'imagick::newimage' => 
  array (
    0 => 'bool',
    'columns' => 'int',
    'rows' => 'int',
    'background_color' => 'ImagickPixel|string',
    'format=' => 'string',
  ),
  'imagick::newpseudoimage' => 
  array (
    0 => 'bool',
    'columns' => 'int',
    'rows' => 'int',
    'pseudo_format' => 'string',
  ),
  'imagick::next' => 
  array (
    0 => 'void',
  ),
  'imagick::nextimage' => 
  array (
    0 => 'bool',
  ),
  'imagick::normalizeimage' => 
  array (
    0 => 'bool',
    'channel=' => 'int',
  ),
  'imagick::oilpaintimage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
  ),
  'imagick::oilpaintimagewithsigma' => 
  array (
    0 => 'bool',
    'radius' => 'float',
    'sigma' => 'float',
  ),
  'imagick::opaquepaintimage' => 
  array (
    0 => 'bool',
    'target_color' => 'ImagickPixel|string',
    'fill_color' => 'ImagickPixel|string',
    'fuzz' => 'float',
    'invert' => 'bool',
    'channel=' => 'int',
  ),
  'imagick::optimizeimagelayers' => 
  array (
    0 => 'bool',
  ),
  'imagick::optimizeimagetransparency' => 
  array (
    0 => 'void',
  ),
  'imagick::orderedditherimage' => 
  array (
    0 => 'bool',
    'dither_format' => 'string',
  ),
  'imagick::orderedposterizeimage' => 
  array (
    0 => 'bool',
    'threshold_map' => 'string',
    'channel=' => 'int',
  ),
  'imagick::paintfloodfillimage' => 
  array (
    0 => 'bool',
    'fill' => 'mixed',
    'fuzz' => 'float',
    'bordercolor' => 'mixed',
    'x' => 'int',
    'y' => 'int',
    'channel=' => 'int',
  ),
  'imagick::paintopaqueimage' => 
  array (
    0 => 'bool',
    'target' => 'mixed',
    'fill' => 'mixed',
    'fuzz' => 'float',
    'channel=' => 'int',
  ),
  'imagick::painttransparentimage' => 
  array (
    0 => 'bool',
    'target' => 'mixed',
    'alpha' => 'float',
    'fuzz' => 'float',
  ),
  'imagick::pingimage' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'imagick::pingimageblob' => 
  array (
    0 => 'bool',
    'image' => 'string',
  ),
  'imagick::pingimagefile' => 
  array (
    0 => 'bool',
    'filehandle' => 'resource',
    'filename=' => 'null|string',
  ),
  'imagick::polaroidimage' => 
  array (
    0 => 'bool',
    'settings' => 'ImagickDraw',
    'angle' => 'float',
  ),
  'imagick::polaroidwithtextandmethod' => 
  array (
    0 => 'bool',
    'settings' => 'ImagickDraw',
    'angle' => 'float',
    'caption' => 'string',
    'method' => 'int',
  ),
  'imagick::polynomialimage' => 
  array (
    0 => 'bool',
    'terms' => 'array<array-key, mixed>',
  ),
  'imagick::posterizeimage' => 
  array (
    0 => 'bool',
    'levels' => 'int',
    'dither' => 'bool',
  ),
  'imagick::previewimages' => 
  array (
    0 => 'bool',
    'preview' => 'int',
  ),
  'imagick::previousimage' => 
  array (
    0 => 'bool',
  ),
  'imagick::profileimage' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'profile' => 'null|string',
  ),
  'imagick::quantizeimage' => 
  array (
    0 => 'bool',
    'number_colors' => 'int',
    'colorspace' => 'int',
    'tree_depth' => 'int',
    'dither' => 'bool',
    'measure_error' => 'bool',
  ),
  'imagick::quantizeimages' => 
  array (
    0 => 'bool',
    'number_colors' => 'int',
    'colorspace' => 'int',
    'tree_depth' => 'int',
    'dither' => 'bool',
    'measure_error' => 'bool',
  ),
  'imagick::queryfontmetrics' => 
  array (
    0 => 'array<array-key, mixed>',
    'settings' => 'ImagickDraw',
    'text' => 'string',
    'multiline=' => 'bool|null',
  ),
  'imagick::queryfonts' => 
  array (
    0 => 'array<array-key, mixed>',
    'pattern=' => 'string',
  ),
  'imagick::queryformats' => 
  array (
    0 => 'list<string>',
    'pattern=' => 'string',
  ),
  'imagick::radialblurimage' => 
  array (
    0 => 'bool',
    'angle' => 'float',
    'channel=' => 'int',
  ),
  'imagick::raiseimage' => 
  array (
    0 => 'bool',
    'width' => 'int',
    'height' => 'int',
    'x' => 'int',
    'y' => 'int',
    'raise' => 'bool',
  ),
  'imagick::randomthresholdimage' => 
  array (
    0 => 'bool',
    'low' => 'float',
    'high' => 'float',
    'channel=' => 'int',
  ),
  'imagick::rangethresholdimage' => 
  array (
    0 => 'bool',
    'low_black' => 'float',
    'low_white' => 'float',
    'high_white' => 'float',
    'high_black' => 'float',
  ),
  'imagick::readimage' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'imagick::readimageblob' => 
  array (
    0 => 'bool',
    'image' => 'string',
    'filename=' => 'null|string',
  ),
  'imagick::readimagefile' => 
  array (
    0 => 'bool',
    'filehandle' => 'resource',
    'filename=' => 'null|string',
  ),
  'imagick::readimages' => 
  array (
    0 => 'bool',
    'filenames' => 'array<array-key, mixed>',
  ),
  'imagick::recolorimage' => 
  array (
    0 => 'bool',
    'matrix' => 'list<float>',
  ),
  'imagick::reducenoiseimage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
  ),
  'imagick::remapimage' => 
  array (
    0 => 'bool',
    'replacement' => 'Imagick',
    'dither_method' => 'int',
  ),
  'imagick::removeimage' => 
  array (
    0 => 'bool',
  ),
  'imagick::removeimageprofile' => 
  array (
    0 => 'string',
    'name' => 'string',
  ),
  'imagick::render' => 
  array (
    0 => 'bool',
  ),
  'imagick::resampleimage' => 
  array (
    0 => 'bool',
    'x_resolution' => 'float',
    'y_resolution' => 'float',
    'filter' => 'int',
    'blur' => 'float',
  ),
  'imagick::resetimagepage' => 
  array (
    0 => 'bool',
    'page' => 'string',
  ),
  'imagick::resetiterator' => 
  array (
    0 => 'void',
  ),
  'imagick::resizeimage' => 
  array (
    0 => 'bool',
    'columns' => 'int',
    'rows' => 'int',
    'filter' => 'int',
    'blur' => 'float',
    'bestfit=' => 'bool',
    'legacy=' => 'bool',
  ),
  'imagick::rewind' => 
  array (
    0 => 'void',
  ),
  'imagick::rollimage' => 
  array (
    0 => 'bool',
    'x' => 'int',
    'y' => 'int',
  ),
  'imagick::rotateimage' => 
  array (
    0 => 'bool',
    'background_color' => 'ImagickPixel|string',
    'degrees' => 'float',
  ),
  'imagick::rotationalblurimage' => 
  array (
    0 => 'bool',
    'angle' => 'float',
    'channel=' => 'int',
  ),
  'imagick::roundcorners' => 
  array (
    0 => 'bool',
    'x_rounding' => 'float',
    'y_rounding' => 'float',
    'stroke_width=' => 'float',
    'displace=' => 'float',
    'size_correction=' => 'float',
  ),
  'imagick::roundcornersimage' => 
  array (
    0 => 'bool',
    'x_rounding' => 'float',
    'y_rounding' => 'float',
    'stroke_width=' => 'float',
    'displace=' => 'float',
    'size_correction=' => 'float',
  ),
  'imagick::sampleimage' => 
  array (
    0 => 'bool',
    'columns' => 'int',
    'rows' => 'int',
  ),
  'imagick::scaleimage' => 
  array (
    0 => 'bool',
    'columns' => 'int',
    'rows' => 'int',
    'bestfit=' => 'bool',
    'legacy=' => 'bool',
  ),
  'imagick::segmentimage' => 
  array (
    0 => 'bool',
    'colorspace' => 'int',
    'cluster_threshold' => 'float',
    'smooth_threshold' => 'float',
    'verbose=' => 'bool',
  ),
  'imagick::selectiveblurimage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
    'sigma' => 'float',
    'threshold' => 'float',
    'channel=' => 'int',
  ),
  'imagick::separateimagechannel' => 
  array (
    0 => 'bool',
    'channel' => 'int',
  ),
  'imagick::sepiatoneimage' => 
  array (
    0 => 'bool',
    'threshold' => 'float',
  ),
  'imagick::setantialias' => 
  array (
    0 => 'void',
    'antialias' => 'bool',
  ),
  'imagick::setbackgroundcolor' => 
  array (
    0 => 'bool',
    'background_color' => 'ImagickPixel|string',
  ),
  'imagick::setcolorspace' => 
  array (
    0 => 'bool',
    'colorspace' => 'int',
  ),
  'imagick::setcompression' => 
  array (
    0 => 'bool',
    'compression' => 'int',
  ),
  'imagick::setcompressionquality' => 
  array (
    0 => 'bool',
    'quality' => 'int',
  ),
  'imagick::setdepth' => 
  array (
    0 => 'bool',
    'depth' => 'int',
  ),
  'imagick::setextract' => 
  array (
    0 => 'bool',
    'geometry' => 'string',
  ),
  'imagick::setfilename' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'imagick::setfirstiterator' => 
  array (
    0 => 'bool',
  ),
  'imagick::setfont' => 
  array (
    0 => 'bool',
    'font' => 'string',
  ),
  'imagick::setformat' => 
  array (
    0 => 'bool',
    'format' => 'string',
  ),
  'imagick::setgravity' => 
  array (
    0 => 'bool',
    'gravity' => 'int',
  ),
  'imagick::setimage' => 
  array (
    0 => 'bool',
    'image' => 'Imagick',
  ),
  'imagick::setimagealpha' => 
  array (
    0 => 'bool',
    'alpha' => 'float',
  ),
  'imagick::setimagealphachannel' => 
  array (
    0 => 'bool',
    'alphachannel' => 'int',
  ),
  'imagick::setimageartifact' => 
  array (
    0 => 'bool',
    'artifact' => 'string',
    'value' => 'null|string',
  ),
  'imagick::setimageattribute' => 
  array (
    0 => 'void',
    'key' => 'string',
    'value' => 'string',
  ),
  'imagick::setimagebackgroundcolor' => 
  array (
    0 => 'bool',
    'background_color' => 'ImagickPixel|string',
  ),
  'imagick::setimagebias' => 
  array (
    0 => 'bool',
    'bias' => 'float',
  ),
  'imagick::setimagebiasquantum' => 
  array (
    0 => 'void',
    'bias' => 'string',
  ),
  'imagick::setimageblueprimary' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'imagick::setimagebordercolor' => 
  array (
    0 => 'bool',
    'border_color' => 'ImagickPixel|string',
  ),
  'imagick::setimagechanneldepth' => 
  array (
    0 => 'bool',
    'channel' => 'int',
    'depth' => 'int',
  ),
  'imagick::setimagechannelmask' => 
  array (
    0 => 'int',
    'channel' => 'int',
  ),
  'imagick::setimageclipmask' => 
  array (
    0 => 'bool',
    'clip_mask' => 'Imagick',
  ),
  'imagick::setimagecolormapcolor' => 
  array (
    0 => 'bool',
    'index' => 'int',
    'color' => 'ImagickPixel',
  ),
  'imagick::setimagecolorspace' => 
  array (
    0 => 'bool',
    'colorspace' => 'int',
  ),
  'imagick::setimagecompose' => 
  array (
    0 => 'bool',
    'compose' => 'int',
  ),
  'imagick::setimagecompression' => 
  array (
    0 => 'bool',
    'compression' => 'int',
  ),
  'imagick::setimagecompressionquality' => 
  array (
    0 => 'bool',
    'quality' => 'int',
  ),
  'imagick::setimagedelay' => 
  array (
    0 => 'bool',
    'delay' => 'int',
  ),
  'imagick::setimagedepth' => 
  array (
    0 => 'bool',
    'depth' => 'int',
  ),
  'imagick::setimagedispose' => 
  array (
    0 => 'bool',
    'dispose' => 'int',
  ),
  'imagick::setimageextent' => 
  array (
    0 => 'bool',
    'columns' => 'int',
    'rows' => 'int',
  ),
  'imagick::setimagefilename' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'imagick::setimageformat' => 
  array (
    0 => 'bool',
    'format' => 'string',
  ),
  'imagick::setimagegamma' => 
  array (
    0 => 'bool',
    'gamma' => 'float',
  ),
  'imagick::setimagegravity' => 
  array (
    0 => 'bool',
    'gravity' => 'int',
  ),
  'imagick::setimagegreenprimary' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'imagick::setimageindex' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'imagick::setimageinterlacescheme' => 
  array (
    0 => 'bool',
    'interlace' => 'int',
  ),
  'imagick::setimageinterpolatemethod' => 
  array (
    0 => 'bool',
    'method' => 'int',
  ),
  'imagick::setimageiterations' => 
  array (
    0 => 'bool',
    'iterations' => 'int',
  ),
  'imagick::setimagemask' => 
  array (
    0 => 'void',
    'clip_mask' => 'Imagick',
    'pixelmask' => 'int',
  ),
  'imagick::setimagematte' => 
  array (
    0 => 'bool',
    'matte' => 'bool',
  ),
  'imagick::setimagemattecolor' => 
  array (
    0 => 'bool',
    'matte_color' => 'ImagickPixel|string',
  ),
  'imagick::setimageopacity' => 
  array (
    0 => 'bool',
    'opacity' => 'float',
  ),
  'imagick::setimageorientation' => 
  array (
    0 => 'bool',
    'orientation' => 'int',
  ),
  'imagick::setimagepage' => 
  array (
    0 => 'bool',
    'width' => 'int',
    'height' => 'int',
    'x' => 'int',
    'y' => 'int',
  ),
  'imagick::setimagepixelcolor' => 
  array (
    0 => 'ImagickPixel',
    'x' => 'int',
    'y' => 'int',
    'color' => 'ImagickPixel|string',
  ),
  'imagick::setimageprofile' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'profile' => 'string',
  ),
  'imagick::setimageprogressmonitor' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'imagick::setimageproperty' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value' => 'string',
  ),
  'imagick::setimageredprimary' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'imagick::setimagerenderingintent' => 
  array (
    0 => 'bool',
    'rendering_intent' => 'int',
  ),
  'imagick::setimageresolution' => 
  array (
    0 => 'bool',
    'x_resolution' => 'float',
    'y_resolution' => 'float',
  ),
  'imagick::setimagescene' => 
  array (
    0 => 'bool',
    'scene' => 'int',
  ),
  'imagick::setimagetickspersecond' => 
  array (
    0 => 'bool',
    'ticks_per_second' => 'int',
  ),
  'imagick::setimagetype' => 
  array (
    0 => 'bool',
    'image_type' => 'int',
  ),
  'imagick::setimageunits' => 
  array (
    0 => 'bool',
    'units' => 'int',
  ),
  'imagick::setimagevirtualpixelmethod' => 
  array (
    0 => 'bool',
    'method' => 'int',
  ),
  'imagick::setimagewhitepoint' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'imagick::setinterlacescheme' => 
  array (
    0 => 'bool',
    'interlace' => 'int',
  ),
  'imagick::setinterpolatemethod' => 
  array (
    0 => 'bool',
    'method' => 'int',
  ),
  'imagick::setiteratorindex' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'imagick::setlastiterator' => 
  array (
    0 => 'bool',
  ),
  'imagick::setoption' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'string',
  ),
  'imagick::setorientation' => 
  array (
    0 => 'bool',
    'orientation' => 'int',
  ),
  'imagick::setpage' => 
  array (
    0 => 'bool',
    'width' => 'int',
    'height' => 'int',
    'x' => 'int',
    'y' => 'int',
  ),
  'imagick::setpointsize' => 
  array (
    0 => 'bool',
    'point_size' => 'float',
  ),
  'imagick::setprogressmonitor' => 
  array (
    0 => 'bool',
    'callback' => 'callable',
  ),
  'imagick::setregistry' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'string',
  ),
  'imagick::setresolution' => 
  array (
    0 => 'bool',
    'x_resolution' => 'float',
    'y_resolution' => 'float',
  ),
  'imagick::setresourcelimit' => 
  array (
    0 => 'bool',
    'type' => 'int',
    'limit' => 'int',
  ),
  'imagick::setsamplingfactors' => 
  array (
    0 => 'bool',
    'factors' => 'list<string>',
  ),
  'imagick::setseed' => 
  array (
    0 => 'void',
    'seed' => 'int',
  ),
  'imagick::setsize' => 
  array (
    0 => 'bool',
    'columns' => 'int',
    'rows' => 'int',
  ),
  'imagick::setsizeoffset' => 
  array (
    0 => 'bool',
    'columns' => 'int',
    'rows' => 'int',
    'offset' => 'int',
  ),
  'imagick::settype' => 
  array (
    0 => 'bool',
    'imgtype' => 'int',
  ),
  'imagick::shadeimage' => 
  array (
    0 => 'bool',
    'gray' => 'bool',
    'azimuth' => 'float',
    'elevation' => 'float',
  ),
  'imagick::shadowimage' => 
  array (
    0 => 'bool',
    'opacity' => 'float',
    'sigma' => 'float',
    'x' => 'int',
    'y' => 'int',
  ),
  'imagick::sharpenimage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
    'sigma' => 'float',
    'channel=' => 'int',
  ),
  'imagick::shaveimage' => 
  array (
    0 => 'bool',
    'columns' => 'int',
    'rows' => 'int',
  ),
  'imagick::shearimage' => 
  array (
    0 => 'bool',
    'background_color' => 'ImagickPixel|string',
    'x_shear' => 'float',
    'y_shear' => 'float',
  ),
  'imagick::sigmoidalcontrastimage' => 
  array (
    0 => 'bool',
    'sharpen' => 'bool',
    'alpha' => 'float',
    'beta' => 'float',
    'channel=' => 'int',
  ),
  'imagick::similarityimage' => 
  array (
    0 => 'Imagick',
    'image' => 'Imagick',
    '&offset=' => 'array<array-key, mixed>|null',
    '&similarity=' => 'float|null',
    'threshold=' => 'float',
    'metric=' => 'int',
  ),
  'imagick::sketchimage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
    'sigma' => 'float',
    'angle' => 'float',
  ),
  'imagick::smushimages' => 
  array (
    0 => 'Imagick',
    'stack' => 'bool',
    'offset' => 'int',
  ),
  'imagick::solarizeimage' => 
  array (
    0 => 'bool',
    'threshold' => 'int',
  ),
  'imagick::sparsecolorimage' => 
  array (
    0 => 'bool',
    'sparsecolormethod' => 'int',
    'arguments' => 'array<array-key, mixed>',
    'channel=' => 'int',
  ),
  'imagick::spliceimage' => 
  array (
    0 => 'bool',
    'width' => 'int',
    'height' => 'int',
    'x' => 'int',
    'y' => 'int',
  ),
  'imagick::spreadimage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
  ),
  'imagick::spreadimagewithmethod' => 
  array (
    0 => 'bool',
    'radius' => 'float',
    'interpolate_method' => 'int',
  ),
  'imagick::statisticimage' => 
  array (
    0 => 'bool',
    'type' => 'int',
    'width' => 'int',
    'height' => 'int',
    'channel=' => 'int',
  ),
  'imagick::steganoimage' => 
  array (
    0 => 'Imagick',
    'watermark' => 'Imagick',
    'offset' => 'int',
  ),
  'imagick::stereoimage' => 
  array (
    0 => 'bool',
    'offset_image' => 'Imagick',
  ),
  'imagick::stripimage' => 
  array (
    0 => 'bool',
  ),
  'imagick::subimagematch' => 
  array (
    0 => 'Imagick',
    'image' => 'Imagick',
    '&w_offset=' => 'array<array-key, mixed>|null',
    '&w_similarity=' => 'float|null',
    'threshold=' => 'float',
    'metric=' => 'int',
  ),
  'imagick::swirlimage' => 
  array (
    0 => 'bool',
    'degrees' => 'float',
  ),
  'imagick::swirlimagewithmethod' => 
  array (
    0 => 'bool',
    'degrees' => 'float',
    'interpolate_method' => 'int',
  ),
  'imagick::textureimage' => 
  array (
    0 => 'Imagick',
    'texture' => 'Imagick',
  ),
  'imagick::thresholdimage' => 
  array (
    0 => 'bool',
    'threshold' => 'float',
    'channel=' => 'int',
  ),
  'imagick::thumbnailimage' => 
  array (
    0 => 'bool',
    'columns' => 'int|null',
    'rows' => 'int|null',
    'bestfit=' => 'bool',
    'fill=' => 'bool',
    'legacy=' => 'bool',
  ),
  'imagick::tintimage' => 
  array (
    0 => 'bool',
    'tint_color' => 'ImagickPixel|string',
    'opacity_color' => 'ImagickPixel|string',
    'legacy=' => 'bool',
  ),
  'imagick::transformimage' => 
  array (
    0 => 'Imagick',
    'crop' => 'string',
    'geometry' => 'string',
  ),
  'imagick::transformimagecolorspace' => 
  array (
    0 => 'bool',
    'colorspace' => 'int',
  ),
  'imagick::transparentpaintimage' => 
  array (
    0 => 'bool',
    'target_color' => 'ImagickPixel|string',
    'alpha' => 'float',
    'fuzz' => 'float',
    'invert' => 'bool',
  ),
  'imagick::transposeimage' => 
  array (
    0 => 'bool',
  ),
  'imagick::transverseimage' => 
  array (
    0 => 'bool',
  ),
  'imagick::trimimage' => 
  array (
    0 => 'bool',
    'fuzz' => 'float',
  ),
  'imagick::uniqueimagecolors' => 
  array (
    0 => 'bool',
  ),
  'imagick::unsharpmaskimage' => 
  array (
    0 => 'bool',
    'radius' => 'float',
    'sigma' => 'float',
    'amount' => 'float',
    'threshold' => 'float',
    'channel=' => 'int',
  ),
  'imagick::valid' => 
  array (
    0 => 'bool',
  ),
  'imagick::vignetteimage' => 
  array (
    0 => 'bool',
    'black_point' => 'float',
    'white_point' => 'float',
    'x' => 'int',
    'y' => 'int',
  ),
  'imagick::waveimage' => 
  array (
    0 => 'bool',
    'amplitude' => 'float',
    'length' => 'float',
  ),
  'imagick::waveimagewithmethod' => 
  array (
    0 => 'bool',
    'amplitude' => 'float',
    'length' => 'float',
    'interpolate_method' => 'int',
  ),
  'imagick::waveletdenoiseimage' => 
  array (
    0 => 'bool',
    'threshold' => 'float',
    'softness' => 'float',
  ),
  'imagick::whitebalanceimage' => 
  array (
    0 => 'bool',
  ),
  'imagick::whitethresholdimage' => 
  array (
    0 => 'bool',
    'threshold_color' => 'ImagickPixel|string',
  ),
  'imagick::writeimage' => 
  array (
    0 => 'bool',
    'filename=' => 'null|string',
  ),
  'imagick::writeimagefile' => 
  array (
    0 => 'bool',
    'filehandle' => 'resource',
    'format=' => 'null|string',
  ),
  'imagick::writeimages' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'adjoin' => 'bool',
  ),
  'imagick::writeimagesfile' => 
  array (
    0 => 'bool',
    'filehandle' => 'resource',
    'format=' => 'null|string',
  ),
  'imagickdraw::__construct' => 
  array (
    0 => 'void',
  ),
  'imagickdraw::affine' => 
  array (
    0 => 'bool',
    'affine' => 'array<string, float>',
  ),
  'imagickdraw::alpha' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
    'paint' => 'int',
  ),
  'imagickdraw::annotation' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
    'text' => 'string',
  ),
  'imagickdraw::arc' => 
  array (
    0 => 'bool',
    'start_x' => 'float',
    'start_y' => 'float',
    'end_x' => 'float',
    'end_y' => 'float',
    'start_angle' => 'float',
    'end_angle' => 'float',
  ),
  'imagickdraw::bezier' => 
  array (
    0 => 'bool',
    'coordinates' => 'list<array{x: float, y: float}>',
  ),
  'imagickdraw::circle' => 
  array (
    0 => 'bool',
    'origin_x' => 'float',
    'origin_y' => 'float',
    'perimeter_x' => 'float',
    'perimeter_y' => 'float',
  ),
  'imagickdraw::clear' => 
  array (
    0 => 'bool',
  ),
  'imagickdraw::clone' => 
  array (
    0 => 'ImagickDraw',
  ),
  'imagickdraw::color' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
    'paint' => 'int',
  ),
  'imagickdraw::comment' => 
  array (
    0 => 'bool',
    'comment' => 'string',
  ),
  'imagickdraw::composite' => 
  array (
    0 => 'bool',
    'composite' => 'int',
    'x' => 'float',
    'y' => 'float',
    'width' => 'float',
    'height' => 'float',
    'image' => 'Imagick',
  ),
  'imagickdraw::destroy' => 
  array (
    0 => 'bool',
  ),
  'imagickdraw::ellipse' => 
  array (
    0 => 'bool',
    'origin_x' => 'float',
    'origin_y' => 'float',
    'radius_x' => 'float',
    'radius_y' => 'float',
    'angle_start' => 'float',
    'angle_end' => 'float',
  ),
  'imagickdraw::getbordercolor' => 
  array (
    0 => 'ImagickPixel',
  ),
  'imagickdraw::getclippath' => 
  array (
    0 => 'string',
  ),
  'imagickdraw::getcliprule' => 
  array (
    0 => 'int',
  ),
  'imagickdraw::getclipunits' => 
  array (
    0 => 'int',
  ),
  'imagickdraw::getdensity' => 
  array (
    0 => 'null|string',
  ),
  'imagickdraw::getfillcolor' => 
  array (
    0 => 'ImagickPixel',
  ),
  'imagickdraw::getfillopacity' => 
  array (
    0 => 'float',
  ),
  'imagickdraw::getfillrule' => 
  array (
    0 => 'int',
  ),
  'imagickdraw::getfont' => 
  array (
    0 => 'string',
  ),
  'imagickdraw::getfontfamily' => 
  array (
    0 => 'string',
  ),
  'imagickdraw::getfontresolution' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'imagickdraw::getfontsize' => 
  array (
    0 => 'float',
  ),
  'imagickdraw::getfontstretch' => 
  array (
    0 => 'int',
  ),
  'imagickdraw::getfontstyle' => 
  array (
    0 => 'int',
  ),
  'imagickdraw::getfontweight' => 
  array (
    0 => 'int',
  ),
  'imagickdraw::getgravity' => 
  array (
    0 => 'int',
  ),
  'imagickdraw::getopacity' => 
  array (
    0 => 'float',
  ),
  'imagickdraw::getstrokeantialias' => 
  array (
    0 => 'bool',
  ),
  'imagickdraw::getstrokecolor' => 
  array (
    0 => 'ImagickPixel',
  ),
  'imagickdraw::getstrokedasharray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'imagickdraw::getstrokedashoffset' => 
  array (
    0 => 'float',
  ),
  'imagickdraw::getstrokelinecap' => 
  array (
    0 => 'int',
  ),
  'imagickdraw::getstrokelinejoin' => 
  array (
    0 => 'int',
  ),
  'imagickdraw::getstrokemiterlimit' => 
  array (
    0 => 'int',
  ),
  'imagickdraw::getstrokeopacity' => 
  array (
    0 => 'float',
  ),
  'imagickdraw::getstrokewidth' => 
  array (
    0 => 'float',
  ),
  'imagickdraw::gettextalignment' => 
  array (
    0 => 'int',
  ),
  'imagickdraw::gettextantialias' => 
  array (
    0 => 'bool',
  ),
  'imagickdraw::gettextdecoration' => 
  array (
    0 => 'int',
  ),
  'imagickdraw::gettextdirection' => 
  array (
    0 => 'int',
  ),
  'imagickdraw::gettextencoding' => 
  array (
    0 => 'string',
  ),
  'imagickdraw::gettextinterlinespacing' => 
  array (
    0 => 'float',
  ),
  'imagickdraw::gettextinterwordspacing' => 
  array (
    0 => 'float',
  ),
  'imagickdraw::gettextkerning' => 
  array (
    0 => 'float',
  ),
  'imagickdraw::gettextundercolor' => 
  array (
    0 => 'ImagickPixel',
  ),
  'imagickdraw::getvectorgraphics' => 
  array (
    0 => 'string',
  ),
  'imagickdraw::line' => 
  array (
    0 => 'bool',
    'start_x' => 'float',
    'start_y' => 'float',
    'end_x' => 'float',
    'end_y' => 'float',
  ),
  'imagickdraw::matte' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
    'paintmethod' => 'int',
  ),
  'imagickdraw::pathclose' => 
  array (
    0 => 'bool',
  ),
  'imagickdraw::pathcurvetoabsolute' => 
  array (
    0 => 'bool',
    'x1' => 'float',
    'y1' => 'float',
    'x2' => 'float',
    'y2' => 'float',
    'x' => 'float',
    'y' => 'float',
  ),
  'imagickdraw::pathcurvetoquadraticbezierabsolute' => 
  array (
    0 => 'bool',
    'x1' => 'float',
    'y1' => 'float',
    'x_end' => 'float',
    'y' => 'float',
  ),
  'imagickdraw::pathcurvetoquadraticbezierrelative' => 
  array (
    0 => 'bool',
    'x1' => 'float',
    'y1' => 'float',
    'x_end' => 'float',
    'y' => 'float',
  ),
  'imagickdraw::pathcurvetoquadraticbeziersmoothabsolute' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'imagickdraw::pathcurvetoquadraticbeziersmoothrelative' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'imagickdraw::pathcurvetorelative' => 
  array (
    0 => 'bool',
    'x1' => 'float',
    'y1' => 'float',
    'x2' => 'float',
    'y2' => 'float',
    'x' => 'float',
    'y' => 'float',
  ),
  'imagickdraw::pathcurvetosmoothabsolute' => 
  array (
    0 => 'bool',
    'x2' => 'float',
    'y2' => 'float',
    'x' => 'float',
    'y' => 'float',
  ),
  'imagickdraw::pathcurvetosmoothrelative' => 
  array (
    0 => 'bool',
    'x2' => 'float',
    'y2' => 'float',
    'x' => 'float',
    'y' => 'float',
  ),
  'imagickdraw::pathellipticarcabsolute' => 
  array (
    0 => 'bool',
    'rx' => 'float',
    'ry' => 'float',
    'x_axis_rotation' => 'float',
    'large_arc' => 'bool',
    'sweep' => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'imagickdraw::pathellipticarcrelative' => 
  array (
    0 => 'bool',
    'rx' => 'float',
    'ry' => 'float',
    'x_axis_rotation' => 'float',
    'large_arc' => 'bool',
    'sweep' => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'imagickdraw::pathfinish' => 
  array (
    0 => 'bool',
  ),
  'imagickdraw::pathlinetoabsolute' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'imagickdraw::pathlinetohorizontalabsolute' => 
  array (
    0 => 'bool',
    'x' => 'float',
  ),
  'imagickdraw::pathlinetohorizontalrelative' => 
  array (
    0 => 'bool',
    'x' => 'float',
  ),
  'imagickdraw::pathlinetorelative' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'imagickdraw::pathlinetoverticalabsolute' => 
  array (
    0 => 'bool',
    'y' => 'float',
  ),
  'imagickdraw::pathlinetoverticalrelative' => 
  array (
    0 => 'bool',
    'y' => 'float',
  ),
  'imagickdraw::pathmovetoabsolute' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'imagickdraw::pathmovetorelative' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'imagickdraw::pathstart' => 
  array (
    0 => 'bool',
  ),
  'imagickdraw::point' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'imagickdraw::polygon' => 
  array (
    0 => 'bool',
    'coordinates' => 'list<array{x: float, y: float}>',
  ),
  'imagickdraw::polyline' => 
  array (
    0 => 'bool',
    'coordinates' => 'list<array{x: float, y: float}>',
  ),
  'imagickdraw::pop' => 
  array (
    0 => 'bool',
  ),
  'imagickdraw::popclippath' => 
  array (
    0 => 'bool',
  ),
  'imagickdraw::popdefs' => 
  array (
    0 => 'bool',
  ),
  'imagickdraw::poppattern' => 
  array (
    0 => 'bool',
  ),
  'imagickdraw::push' => 
  array (
    0 => 'bool',
  ),
  'imagickdraw::pushclippath' => 
  array (
    0 => 'bool',
    'clip_mask_id' => 'string',
  ),
  'imagickdraw::pushdefs' => 
  array (
    0 => 'bool',
  ),
  'imagickdraw::pushpattern' => 
  array (
    0 => 'bool',
    'pattern_id' => 'string',
    'x' => 'float',
    'y' => 'float',
    'width' => 'float',
    'height' => 'float',
  ),
  'imagickdraw::rectangle' => 
  array (
    0 => 'bool',
    'top_left_x' => 'float',
    'top_left_y' => 'float',
    'bottom_right_x' => 'float',
    'bottom_right_y' => 'float',
  ),
  'imagickdraw::render' => 
  array (
    0 => 'bool',
  ),
  'imagickdraw::resetvectorgraphics' => 
  array (
    0 => 'bool',
  ),
  'imagickdraw::rotate' => 
  array (
    0 => 'bool',
    'degrees' => 'float',
  ),
  'imagickdraw::roundrectangle' => 
  array (
    0 => 'bool',
    'top_left_x' => 'float',
    'top_left_y' => 'float',
    'bottom_right_x' => 'float',
    'bottom_right_y' => 'float',
    'rounding_x' => 'float',
    'rounding_y' => 'float',
  ),
  'imagickdraw::scale' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'imagickdraw::setbordercolor' => 
  array (
    0 => 'bool',
    'color' => 'ImagickPixel|string',
  ),
  'imagickdraw::setclippath' => 
  array (
    0 => 'bool',
    'clip_mask' => 'string',
  ),
  'imagickdraw::setcliprule' => 
  array (
    0 => 'bool',
    'fillrule' => 'int',
  ),
  'imagickdraw::setclipunits' => 
  array (
    0 => 'bool',
    'pathunits' => 'int',
  ),
  'imagickdraw::setdensity' => 
  array (
    0 => 'bool',
    'density' => 'string',
  ),
  'imagickdraw::setfillalpha' => 
  array (
    0 => 'bool',
    'alpha' => 'float',
  ),
  'imagickdraw::setfillcolor' => 
  array (
    0 => 'bool',
    'fill_color' => 'ImagickPixel|string',
  ),
  'imagickdraw::setfillopacity' => 
  array (
    0 => 'bool',
    'opacity' => 'float',
  ),
  'imagickdraw::setfillpatternurl' => 
  array (
    0 => 'bool',
    'fill_url' => 'string',
  ),
  'imagickdraw::setfillrule' => 
  array (
    0 => 'bool',
    'fillrule' => 'int',
  ),
  'imagickdraw::setfont' => 
  array (
    0 => 'bool',
    'font_name' => 'string',
  ),
  'imagickdraw::setfontfamily' => 
  array (
    0 => 'bool',
    'font_family' => 'string',
  ),
  'imagickdraw::setfontresolution' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'imagickdraw::setfontsize' => 
  array (
    0 => 'bool',
    'point_size' => 'float',
  ),
  'imagickdraw::setfontstretch' => 
  array (
    0 => 'bool',
    'stretch' => 'int',
  ),
  'imagickdraw::setfontstyle' => 
  array (
    0 => 'bool',
    'style' => 'int',
  ),
  'imagickdraw::setfontweight' => 
  array (
    0 => 'bool',
    'weight' => 'int',
  ),
  'imagickdraw::setgravity' => 
  array (
    0 => 'bool',
    'gravity' => 'int',
  ),
  'imagickdraw::setopacity' => 
  array (
    0 => 'bool',
    'opacity' => 'float',
  ),
  'imagickdraw::setresolution' => 
  array (
    0 => 'bool',
    'resolution_x' => 'float',
    'resolution_y' => 'float',
  ),
  'imagickdraw::setstrokealpha' => 
  array (
    0 => 'bool',
    'alpha' => 'float',
  ),
  'imagickdraw::setstrokeantialias' => 
  array (
    0 => 'bool',
    'enabled' => 'bool',
  ),
  'imagickdraw::setstrokecolor' => 
  array (
    0 => 'bool',
    'color' => 'ImagickPixel|string',
  ),
  'imagickdraw::setstrokedasharray' => 
  array (
    0 => 'bool',
    'dashes' => 'list<float|int>',
  ),
  'imagickdraw::setstrokedashoffset' => 
  array (
    0 => 'bool',
    'dash_offset' => 'float',
  ),
  'imagickdraw::setstrokelinecap' => 
  array (
    0 => 'bool',
    'linecap' => 'int',
  ),
  'imagickdraw::setstrokelinejoin' => 
  array (
    0 => 'bool',
    'linejoin' => 'int',
  ),
  'imagickdraw::setstrokemiterlimit' => 
  array (
    0 => 'bool',
    'miterlimit' => 'int',
  ),
  'imagickdraw::setstrokeopacity' => 
  array (
    0 => 'bool',
    'opacity' => 'float',
  ),
  'imagickdraw::setstrokepatternurl' => 
  array (
    0 => 'bool',
    'stroke_url' => 'string',
  ),
  'imagickdraw::setstrokewidth' => 
  array (
    0 => 'bool',
    'width' => 'float',
  ),
  'imagickdraw::settextalignment' => 
  array (
    0 => 'bool',
    'align' => 'int',
  ),
  'imagickdraw::settextantialias' => 
  array (
    0 => 'bool',
    'antialias' => 'bool',
  ),
  'imagickdraw::settextdecoration' => 
  array (
    0 => 'bool',
    'decoration' => 'int',
  ),
  'imagickdraw::settextdirection' => 
  array (
    0 => 'bool',
    'direction' => 'int',
  ),
  'imagickdraw::settextencoding' => 
  array (
    0 => 'bool',
    'encoding' => 'string',
  ),
  'imagickdraw::settextinterlinespacing' => 
  array (
    0 => 'bool',
    'spacing' => 'float',
  ),
  'imagickdraw::settextinterwordspacing' => 
  array (
    0 => 'bool',
    'spacing' => 'float',
  ),
  'imagickdraw::settextkerning' => 
  array (
    0 => 'bool',
    'kerning' => 'float',
  ),
  'imagickdraw::settextundercolor' => 
  array (
    0 => 'bool',
    'under_color' => 'ImagickPixel|string',
  ),
  'imagickdraw::setvectorgraphics' => 
  array (
    0 => 'bool',
    'xml' => 'string',
  ),
  'imagickdraw::setviewbox' => 
  array (
    0 => 'bool',
    'left_x' => 'int',
    'top_y' => 'int',
    'right_x' => 'int',
    'bottom_y' => 'int',
  ),
  'imagickdraw::skewx' => 
  array (
    0 => 'bool',
    'degrees' => 'float',
  ),
  'imagickdraw::skewy' => 
  array (
    0 => 'bool',
    'degrees' => 'float',
  ),
  'imagickdraw::translate' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'imagickdrawexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'imagickdrawexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'imagickdrawexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'imagickdrawexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'imagickdrawexception::getfile' => 
  array (
    0 => 'string',
  ),
  'imagickdrawexception::getline' => 
  array (
    0 => 'int',
  ),
  'imagickdrawexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'imagickdrawexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'imagickdrawexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'imagickdrawexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'imagickexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'imagickexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'imagickexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'imagickexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'imagickexception::getfile' => 
  array (
    0 => 'string',
  ),
  'imagickexception::getline' => 
  array (
    0 => 'int',
  ),
  'imagickexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'imagickexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'imagickexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'imagickexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'imagickkernel::addkernel' => 
  array (
    0 => 'void',
    'kernel' => 'ImagickKernel',
  ),
  'imagickkernel::addunitykernel' => 
  array (
    0 => 'void',
    'scale' => 'float',
  ),
  'imagickkernel::frombuiltin' => 
  array (
    0 => 'ImagickKernel',
    'kernel' => 'int',
    'shape' => 'string',
  ),
  'imagickkernel::frommatrix' => 
  array (
    0 => 'ImagickKernel',
    'matrix' => 'list<list<float>>',
    'origin' => 'array<array-key, mixed>|null',
  ),
  'imagickkernel::getmatrix' => 
  array (
    0 => 'list<list<false|float>>',
  ),
  'imagickkernel::scale' => 
  array (
    0 => 'void',
    'scale' => 'float',
    'normalize_kernel=' => 'int|null',
  ),
  'imagickkernel::separate' => 
  array (
    0 => 'array<array-key, ImagickKernel>',
  ),
  'imagickkernel::seperate' => 
  array (
    0 => 'void',
  ),
  'imagickkernelexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'imagickkernelexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'imagickkernelexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'imagickkernelexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'imagickkernelexception::getfile' => 
  array (
    0 => 'string',
  ),
  'imagickkernelexception::getline' => 
  array (
    0 => 'int',
  ),
  'imagickkernelexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'imagickkernelexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'imagickkernelexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'imagickkernelexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'imagickpixel::__construct' => 
  array (
    0 => 'void',
    'color=' => 'null|string',
  ),
  'imagickpixel::clear' => 
  array (
    0 => 'bool',
  ),
  'imagickpixel::clone' => 
  array (
    0 => 'void',
  ),
  'imagickpixel::destroy' => 
  array (
    0 => 'bool',
  ),
  'imagickpixel::getcolor' => 
  array (
    0 => 'array{a: float|int, b: float|int, g: float|int, r: float|int}',
    'normalized=' => '0|1|2',
  ),
  'imagickpixel::getcolorasstring' => 
  array (
    0 => 'string',
  ),
  'imagickpixel::getcolorcount' => 
  array (
    0 => 'int',
  ),
  'imagickpixel::getcolorquantum' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'imagickpixel::getcolorvalue' => 
  array (
    0 => 'float',
    'color' => 'int',
  ),
  'imagickpixel::getcolorvaluequantum' => 
  array (
    0 => 'float',
    'color' => 'int',
  ),
  'imagickpixel::gethsl' => 
  array (
    0 => 'array{hue: float, luminosity: float, saturation: float}',
  ),
  'imagickpixel::getindex' => 
  array (
    0 => 'int',
  ),
  'imagickpixel::ispixelsimilar' => 
  array (
    0 => 'bool',
    'color' => 'ImagickPixel',
    'fuzz' => 'float',
  ),
  'imagickpixel::ispixelsimilarquantum' => 
  array (
    0 => 'bool',
    'color' => 'string',
    'fuzz_quantum_range_scaled_by_square_root_of_three' => 'float',
  ),
  'imagickpixel::issimilar' => 
  array (
    0 => 'bool',
    'color' => 'ImagickPixel',
    'fuzz_quantum_range_scaled_by_square_root_of_three' => 'float',
  ),
  'imagickpixel::setcolor' => 
  array (
    0 => 'bool',
    'color' => 'string',
  ),
  'imagickpixel::setcolorcount' => 
  array (
    0 => 'bool',
    'color_count' => 'int',
  ),
  'imagickpixel::setcolorfrompixel' => 
  array (
    0 => 'bool',
    'pixel' => 'ImagickPixel',
  ),
  'imagickpixel::setcolorvalue' => 
  array (
    0 => 'bool',
    'color' => 'int',
    'value' => 'float',
  ),
  'imagickpixel::setcolorvaluequantum' => 
  array (
    0 => 'bool',
    'color' => 'int',
    'value' => 'float',
  ),
  'imagickpixel::sethsl' => 
  array (
    0 => 'bool',
    'hue' => 'float',
    'saturation' => 'float',
    'luminosity' => 'float',
  ),
  'imagickpixel::setindex' => 
  array (
    0 => 'bool',
    'index' => 'float',
  ),
  'imagickpixelexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'imagickpixelexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'imagickpixelexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'imagickpixelexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'imagickpixelexception::getfile' => 
  array (
    0 => 'string',
  ),
  'imagickpixelexception::getline' => 
  array (
    0 => 'int',
  ),
  'imagickpixelexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'imagickpixelexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'imagickpixelexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'imagickpixelexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'imagickpixeliterator::__construct' => 
  array (
    0 => 'void',
    'imagick' => 'Imagick',
  ),
  'imagickpixeliterator::clear' => 
  array (
    0 => 'bool',
  ),
  'imagickpixeliterator::current' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'imagickpixeliterator::destroy' => 
  array (
    0 => 'bool',
  ),
  'imagickpixeliterator::getcurrentiteratorrow' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'imagickpixeliterator::getiteratorrow' => 
  array (
    0 => 'int',
  ),
  'imagickpixeliterator::getnextiteratorrow' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'imagickpixeliterator::getpixeliterator' => 
  array (
    0 => 'ImagickPixelIterator',
    'imagick' => 'Imagick',
  ),
  'imagickpixeliterator::getpixelregioniterator' => 
  array (
    0 => 'ImagickPixelIterator',
    'imagick' => 'Imagick',
    'x' => 'int',
    'y' => 'int',
    'columns' => 'int',
    'rows' => 'int',
  ),
  'imagickpixeliterator::getpreviousiteratorrow' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'imagickpixeliterator::key' => 
  array (
    0 => 'int',
  ),
  'imagickpixeliterator::newpixeliterator' => 
  array (
    0 => 'bool',
    'imagick' => 'Imagick',
  ),
  'imagickpixeliterator::newpixelregioniterator' => 
  array (
    0 => 'bool',
    'imagick' => 'Imagick',
    'x' => 'int',
    'y' => 'int',
    'columns' => 'int',
    'rows' => 'int',
  ),
  'imagickpixeliterator::next' => 
  array (
    0 => 'void',
  ),
  'imagickpixeliterator::resetiterator' => 
  array (
    0 => 'bool',
  ),
  'imagickpixeliterator::rewind' => 
  array (
    0 => 'void',
  ),
  'imagickpixeliterator::setiteratorfirstrow' => 
  array (
    0 => 'bool',
  ),
  'imagickpixeliterator::setiteratorlastrow' => 
  array (
    0 => 'bool',
  ),
  'imagickpixeliterator::setiteratorrow' => 
  array (
    0 => 'bool',
    'row' => 'int',
  ),
  'imagickpixeliterator::synciterator' => 
  array (
    0 => 'bool',
  ),
  'imagickpixeliterator::valid' => 
  array (
    0 => 'bool',
  ),
  'imagickpixeliteratorexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'imagickpixeliteratorexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'imagickpixeliteratorexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'imagickpixeliteratorexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'imagickpixeliteratorexception::getfile' => 
  array (
    0 => 'string',
  ),
  'imagickpixeliteratorexception::getline' => 
  array (
    0 => 'int',
  ),
  'imagickpixeliteratorexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'imagickpixeliteratorexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'imagickpixeliteratorexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'imagickpixeliteratorexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'imap_8bit' => 
  array (
    0 => 'false|string',
    'string' => 'string',
  ),
  'imap_alerts' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'imap_append' => 
  array (
    0 => 'bool',
    'imap' => 'resource',
    'folder' => 'string',
    'message' => 'string',
    'options=' => 'null|string',
    'internal_date=' => 'null|string',
  ),
  'imap_base64' => 
  array (
    0 => 'false|string',
    'string' => 'string',
  ),
  'imap_binary' => 
  array (
    0 => 'false|string',
    'string' => 'string',
  ),
  'imap_body' => 
  array (
    0 => 'false|string',
    'imap' => 'resource',
    'message_num' => 'int',
    'flags=' => 'int',
  ),
  'imap_bodystruct' => 
  array (
    0 => 'false|stdClass',
    'imap' => 'resource',
    'message_num' => 'int',
    'section' => 'string',
  ),
  'imap_check' => 
  array (
    0 => 'false|stdClass',
    'imap' => 'resource',
  ),
  'imap_clearflag_full' => 
  array (
    0 => 'bool',
    'imap' => 'resource',
    'sequence' => 'string',
    'flag' => 'string',
    'options=' => 'int',
  ),
  'imap_close' => 
  array (
    0 => 'bool',
    'imap' => 'resource',
    'flags=' => 'int',
  ),
  'imap_create' => 
  array (
    0 => 'bool',
    'imap' => 'resource',
    'mailbox' => 'string',
  ),
  'imap_createmailbox' => 
  array (
    0 => 'bool',
    'imap' => 'resource',
    'mailbox' => 'string',
  ),
  'imap_delete' => 
  array (
    0 => 'bool',
    'imap' => 'resource',
    'message_nums' => 'string',
    'flags=' => 'int',
  ),
  'imap_deletemailbox' => 
  array (
    0 => 'bool',
    'imap' => 'resource',
    'mailbox' => 'string',
  ),
  'imap_errors' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'imap_expunge' => 
  array (
    0 => 'bool',
    'imap' => 'resource',
  ),
  'imap_fetch_overview' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'resource',
    'sequence' => 'string',
    'flags=' => 'int',
  ),
  'imap_fetchbody' => 
  array (
    0 => 'false|string',
    'imap' => 'resource',
    'message_num' => 'int',
    'section' => 'string',
    'flags=' => 'int',
  ),
  'imap_fetchheader' => 
  array (
    0 => 'false|string',
    'imap' => 'resource',
    'message_num' => 'int',
    'flags=' => 'int',
  ),
  'imap_fetchmime' => 
  array (
    0 => 'false|string',
    'imap' => 'resource',
    'message_num' => 'int',
    'section' => 'string',
    'flags=' => 'int',
  ),
  'imap_fetchstructure' => 
  array (
    0 => 'false|stdClass',
    'imap' => 'resource',
    'message_num' => 'int',
    'flags=' => 'int',
  ),
  'imap_fetchtext' => 
  array (
    0 => 'false|string',
    'imap' => 'resource',
    'message_num' => 'int',
    'flags=' => 'int',
  ),
  'imap_gc' => 
  array (
    0 => 'bool',
    'imap' => 'resource',
    'flags' => 'int',
  ),
  'imap_get_quota' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'resource',
    'quota_root' => 'string',
  ),
  'imap_get_quotaroot' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'resource',
    'mailbox' => 'string',
  ),
  'imap_getacl' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'resource',
    'mailbox' => 'string',
  ),
  'imap_getmailboxes' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'resource',
    'reference' => 'string',
    'pattern' => 'string',
  ),
  'imap_getsubscribed' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'resource',
    'reference' => 'string',
    'pattern' => 'string',
  ),
  'imap_header' => 
  array (
    0 => 'false|stdClass',
    'stream_id' => 'resource',
    'msg_no' => 'int',
    'from_length=' => 'int',
    'subject_length=' => 'int',
    'default_host=' => 'string',
  ),
  'imap_headerinfo' => 
  array (
    0 => 'false|stdClass',
    'imap' => 'resource',
    'message_num' => 'int',
    'from_length=' => 'int',
    'subject_length=' => 'int',
  ),
  'imap_headers' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'resource',
  ),
  'imap_last_error' => 
  array (
    0 => 'false|string',
  ),
  'imap_list' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'resource',
    'reference' => 'string',
    'pattern' => 'string',
  ),
  'imap_listmailbox' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'resource',
    'reference' => 'string',
    'pattern' => 'string',
  ),
  'imap_listscan' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'resource',
    'reference' => 'string',
    'pattern' => 'string',
    'content' => 'string',
  ),
  'imap_listsubscribed' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'resource',
    'reference' => 'string',
    'pattern' => 'string',
  ),
  'imap_lsub' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'resource',
    'reference' => 'string',
    'pattern' => 'string',
  ),
  'imap_mail' => 
  array (
    0 => 'bool',
    'to' => 'string',
    'subject' => 'string',
    'message' => 'string',
    'additional_headers=' => 'null|string',
    'cc=' => 'null|string',
    'bcc=' => 'null|string',
    'return_path=' => 'null|string',
  ),
  'imap_mail_compose' => 
  array (
    0 => 'false|string',
    'envelope' => 'array<array-key, mixed>',
    'bodies' => 'array<array-key, mixed>',
  ),
  'imap_mail_copy' => 
  array (
    0 => 'bool',
    'imap' => 'resource',
    'message_nums' => 'string',
    'mailbox' => 'string',
    'flags=' => 'int',
  ),
  'imap_mail_move' => 
  array (
    0 => 'bool',
    'imap' => 'resource',
    'message_nums' => 'string',
    'mailbox' => 'string',
    'flags=' => 'int',
  ),
  'imap_mailboxmsginfo' => 
  array (
    0 => 'stdClass',
    'imap' => 'resource',
  ),
  'imap_mime_header_decode' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'string' => 'string',
  ),
  'imap_msgno' => 
  array (
    0 => 'int',
    'imap' => 'resource',
    'message_uid' => 'int',
  ),
  'imap_mutf7_to_utf8' => 
  array (
    0 => 'false|string',
    'string' => 'string',
  ),
  'imap_num_msg' => 
  array (
    0 => 'false|int',
    'imap' => 'resource',
  ),
  'imap_num_recent' => 
  array (
    0 => 'int',
    'imap' => 'resource',
  ),
  'imap_open' => 
  array (
    0 => 'false|resource',
    'mailbox' => 'string',
    'user' => 'string',
    'password' => 'string',
    'flags=' => 'int',
    'retries=' => 'int',
    'options=' => 'array<array-key, mixed>',
  ),
  'imap_ping' => 
  array (
    0 => 'bool',
    'imap' => 'resource',
  ),
  'imap_qprint' => 
  array (
    0 => 'false|string',
    'string' => 'string',
  ),
  'imap_rename' => 
  array (
    0 => 'bool',
    'imap' => 'resource',
    'from' => 'string',
    'to' => 'string',
  ),
  'imap_renamemailbox' => 
  array (
    0 => 'bool',
    'imap' => 'resource',
    'from' => 'string',
    'to' => 'string',
  ),
  'imap_reopen' => 
  array (
    0 => 'bool',
    'imap' => 'resource',
    'mailbox' => 'string',
    'flags=' => 'int',
    'retries=' => 'int',
  ),
  'imap_rfc822_parse_adrlist' => 
  array (
    0 => 'array<array-key, mixed>',
    'string' => 'string',
    'default_hostname' => 'string',
  ),
  'imap_rfc822_parse_headers' => 
  array (
    0 => 'stdClass',
    'headers' => 'string',
    'default_hostname=' => 'string',
  ),
  'imap_rfc822_write_address' => 
  array (
    0 => 'false|string',
    'mailbox' => 'string',
    'hostname' => 'string',
    'personal' => 'string',
  ),
  'imap_savebody' => 
  array (
    0 => 'bool',
    'imap' => 'resource',
    'file' => 'resource|string',
    'message_num' => 'int',
    'section=' => 'string',
    'flags=' => 'int',
  ),
  'imap_scan' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'resource',
    'reference' => 'string',
    'pattern' => 'string',
    'content' => 'string',
  ),
  'imap_scanmailbox' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'resource',
    'reference' => 'string',
    'pattern' => 'string',
    'content' => 'string',
  ),
  'imap_search' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'resource',
    'criteria' => 'string',
    'flags=' => 'int',
    'charset=' => 'string',
  ),
  'imap_set_quota' => 
  array (
    0 => 'bool',
    'imap' => 'resource',
    'quota_root' => 'string',
    'mailbox_size' => 'int',
  ),
  'imap_setacl' => 
  array (
    0 => 'bool',
    'imap' => 'resource',
    'mailbox' => 'string',
    'user_id' => 'string',
    'rights' => 'string',
  ),
  'imap_setflag_full' => 
  array (
    0 => 'bool',
    'imap' => 'resource',
    'sequence' => 'string',
    'flag' => 'string',
    'options=' => 'int',
  ),
  'imap_sort' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'resource',
    'criteria' => 'int',
    'reverse' => 'bool',
    'flags=' => 'int',
    'search_criteria=' => 'null|string',
    'charset=' => 'null|string',
  ),
  'imap_status' => 
  array (
    0 => 'false|stdClass',
    'imap' => 'resource',
    'mailbox' => 'string',
    'flags' => 'int',
  ),
  'imap_subscribe' => 
  array (
    0 => 'bool',
    'imap' => 'resource',
    'mailbox' => 'string',
  ),
  'imap_thread' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'imap' => 'resource',
    'flags=' => 'int',
  ),
  'imap_timeout' => 
  array (
    0 => 'bool|int',
    'timeout_type' => 'int',
    'timeout=' => 'int',
  ),
  'imap_uid' => 
  array (
    0 => 'false|int',
    'imap' => 'resource',
    'message_num' => 'int',
  ),
  'imap_undelete' => 
  array (
    0 => 'bool',
    'imap' => 'resource',
    'message_nums' => 'string',
    'flags=' => 'int',
  ),
  'imap_unsubscribe' => 
  array (
    0 => 'bool',
    'imap' => 'resource',
    'mailbox' => 'string',
  ),
  'imap_utf7_decode' => 
  array (
    0 => 'false|string',
    'string' => 'string',
  ),
  'imap_utf7_encode' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'imap_utf8' => 
  array (
    0 => 'string',
    'mime_encoded_text' => 'string',
  ),
  'imap_utf8_to_mutf7' => 
  array (
    0 => 'false|string',
    'string' => 'string',
  ),
  'implode' => 
  array (
    0 => 'string',
    'separator' => 'string',
    'array=' => 'array<array-key, mixed>|null',
  ),
  'implode\'1' => 
  array (
    0 => 'string',
    'separator' => 'array<array-key, mixed>',
  ),
  'import_request_variables' => 
  array (
    0 => 'bool',
    'types' => 'string',
    'prefix=' => 'string',
  ),
  'in_array' => 
  array (
    0 => 'bool',
    'needle' => 'mixed',
    'haystack' => 'array<array-key, mixed>',
    'strict=' => 'bool',
  ),
  'inclued_get_data' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'inet_ntop' => 
  array (
    0 => 'false|string',
    'ip' => 'string',
  ),
  'inet_pton' => 
  array (
    0 => 'false|string',
    'ip' => 'string',
  ),
  'infiniteiterator::__construct' => 
  array (
    0 => 'void',
    'iterator' => 'Iterator',
  ),
  'infiniteiterator::current' => 
  array (
    0 => 'mixed',
  ),
  'infiniteiterator::getinneriterator' => 
  array (
    0 => 'Iterator',
  ),
  'infiniteiterator::key' => 
  array (
    0 => 'scalar',
  ),
  'infiniteiterator::next' => 
  array (
    0 => 'void',
  ),
  'infiniteiterator::rewind' => 
  array (
    0 => 'void',
  ),
  'infiniteiterator::valid' => 
  array (
    0 => 'bool',
  ),
  'inflate_add' => 
  array (
    0 => 'false|string',
    'context' => 'InflateContext',
    'data' => 'string',
    'flush_mode=' => 'int',
  ),
  'inflate_get_read_len' => 
  array (
    0 => 'int',
    'context' => 'InflateContext',
  ),
  'inflate_get_status' => 
  array (
    0 => 'int',
    'context' => 'InflateContext',
  ),
  'inflate_init' => 
  array (
    0 => 'InflateContext|false',
    'encoding' => 'int',
    'options=' => 'array<array-key, mixed>',
  ),
  'ingres_autocommit' => 
  array (
    0 => 'bool',
    'link' => 'resource',
  ),
  'ingres_autocommit_state' => 
  array (
    0 => 'bool',
    'link' => 'resource',
  ),
  'ingres_charset' => 
  array (
    0 => 'string',
    'link' => 'resource',
  ),
  'ingres_close' => 
  array (
    0 => 'bool',
    'link' => 'resource',
  ),
  'ingres_commit' => 
  array (
    0 => 'bool',
    'link' => 'resource',
  ),
  'ingres_connect' => 
  array (
    0 => 'resource',
    'database=' => 'string',
    'username=' => 'string',
    'password=' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'ingres_cursor' => 
  array (
    0 => 'string',
    'result' => 'resource',
  ),
  'ingres_errno' => 
  array (
    0 => 'int',
    'link=' => 'resource',
  ),
  'ingres_error' => 
  array (
    0 => 'string',
    'link=' => 'resource',
  ),
  'ingres_errsqlstate' => 
  array (
    0 => 'string',
    'link=' => 'resource',
  ),
  'ingres_escape_string' => 
  array (
    0 => 'string',
    'link' => 'resource',
    'source_string' => 'string',
  ),
  'ingres_execute' => 
  array (
    0 => 'bool',
    'result' => 'resource',
    'params=' => 'array<array-key, mixed>',
    'types=' => 'string',
  ),
  'ingres_fetch_array' => 
  array (
    0 => 'array<array-key, mixed>',
    'result' => 'resource',
    'result_type=' => 'int',
  ),
  'ingres_fetch_assoc' => 
  array (
    0 => 'array<array-key, mixed>',
    'result' => 'resource',
  ),
  'ingres_fetch_object' => 
  array (
    0 => 'object',
    'result' => 'resource',
    'result_type=' => 'int',
  ),
  'ingres_fetch_proc_return' => 
  array (
    0 => 'int',
    'result' => 'resource',
  ),
  'ingres_fetch_row' => 
  array (
    0 => 'array<array-key, mixed>',
    'result' => 'resource',
  ),
  'ingres_field_length' => 
  array (
    0 => 'int',
    'result' => 'resource',
    'index' => 'int',
  ),
  'ingres_field_name' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'index' => 'int',
  ),
  'ingres_field_nullable' => 
  array (
    0 => 'bool',
    'result' => 'resource',
    'index' => 'int',
  ),
  'ingres_field_precision' => 
  array (
    0 => 'int',
    'result' => 'resource',
    'index' => 'int',
  ),
  'ingres_field_scale' => 
  array (
    0 => 'int',
    'result' => 'resource',
    'index' => 'int',
  ),
  'ingres_field_type' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'index' => 'int',
  ),
  'ingres_free_result' => 
  array (
    0 => 'bool',
    'result' => 'resource',
  ),
  'ingres_next_error' => 
  array (
    0 => 'bool',
    'link=' => 'resource',
  ),
  'ingres_num_fields' => 
  array (
    0 => 'int',
    'result' => 'resource',
  ),
  'ingres_num_rows' => 
  array (
    0 => 'int',
    'result' => 'resource',
  ),
  'ingres_pconnect' => 
  array (
    0 => 'resource',
    'database=' => 'string',
    'username=' => 'string',
    'password=' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'ingres_prepare' => 
  array (
    0 => 'mixed',
    'link' => 'resource',
    'query' => 'string',
  ),
  'ingres_query' => 
  array (
    0 => 'mixed',
    'link' => 'resource',
    'query' => 'string',
    'params=' => 'array<array-key, mixed>',
    'types=' => 'string',
  ),
  'ingres_result_seek' => 
  array (
    0 => 'bool',
    'result' => 'resource',
    'position' => 'int',
  ),
  'ingres_rollback' => 
  array (
    0 => 'bool',
    'link' => 'resource',
  ),
  'ingres_set_environment' => 
  array (
    0 => 'bool',
    'link' => 'resource',
    'options' => 'array<array-key, mixed>',
  ),
  'ingres_unbuffered_query' => 
  array (
    0 => 'mixed',
    'link' => 'resource',
    'query' => 'string',
    'params=' => 'array<array-key, mixed>',
    'types=' => 'string',
  ),
  'ini_alter' => 
  array (
    0 => 'false|string',
    'option' => 'string',
    'value' => 'string',
  ),
  'ini_get' => 
  array (
    0 => 'false|string',
    'option' => 'string',
  ),
  'ini_get_all' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'extension=' => 'null|string',
    'details=' => 'bool',
  ),
  'ini_restore' => 
  array (
    0 => 'void',
    'option' => 'string',
  ),
  'ini_set' => 
  array (
    0 => 'false|string',
    'option' => 'string',
    'value' => 'string',
  ),
  'inotify_add_watch' => 
  array (
    0 => 'false|int',
    'inotify_instance' => 'resource',
    'pathname' => 'string',
    'mask' => 'int',
  ),
  'inotify_init' => 
  array (
    0 => 'false|resource',
  ),
  'inotify_queue_len' => 
  array (
    0 => 'int',
    'inotify_instance' => 'resource',
  ),
  'inotify_read' => 
  array (
    0 => 'array<array-key, array{cookie: int, mask: int, name: string, wd: int}>|false',
    'inotify_instance' => 'resource',
  ),
  'inotify_rm_watch' => 
  array (
    0 => 'bool',
    'inotify_instance' => 'resource',
    'watch_descriptor' => 'int',
  ),
  'intdiv' => 
  array (
    0 => 'int',
    'num1' => 'int',
    'num2' => 'int',
  ),
  'interface_exists' => 
  array (
    0 => 'bool',
    'interface' => 'string',
    'autoload=' => 'bool',
  ),
  'internaliterator::__construct' => 
  array (
    0 => 'void',
  ),
  'internaliterator::current' => 
  array (
    0 => 'mixed',
  ),
  'internaliterator::key' => 
  array (
    0 => 'mixed',
  ),
  'internaliterator::next' => 
  array (
    0 => 'void',
  ),
  'internaliterator::rewind' => 
  array (
    0 => 'void',
  ),
  'internaliterator::valid' => 
  array (
    0 => 'bool',
  ),
  'intl_error_name' => 
  array (
    0 => 'string',
    'errorCode' => 'int',
  ),
  'intl_get_error_code' => 
  array (
    0 => 'int',
  ),
  'intl_get_error_message' => 
  array (
    0 => 'string',
  ),
  'intl_is_failure' => 
  array (
    0 => 'bool',
    'errorCode' => 'int',
  ),
  'intlbreakiterator::__construct' => 
  array (
    0 => 'void',
  ),
  'intlbreakiterator::createcharacterinstance' => 
  array (
    0 => 'IntlRuleBasedBreakIterator|null',
    'locale=' => 'null|string',
  ),
  'intlbreakiterator::createcodepointinstance' => 
  array (
    0 => 'IntlCodePointBreakIterator',
  ),
  'intlbreakiterator::createlineinstance' => 
  array (
    0 => 'IntlRuleBasedBreakIterator|null',
    'locale=' => 'null|string',
  ),
  'intlbreakiterator::createsentenceinstance' => 
  array (
    0 => 'IntlRuleBasedBreakIterator|null',
    'locale=' => 'null|string',
  ),
  'intlbreakiterator::createtitleinstance' => 
  array (
    0 => 'IntlRuleBasedBreakIterator|null',
    'locale=' => 'null|string',
  ),
  'intlbreakiterator::createwordinstance' => 
  array (
    0 => 'IntlRuleBasedBreakIterator|null',
    'locale=' => 'null|string',
  ),
  'intlbreakiterator::current' => 
  array (
    0 => 'int',
  ),
  'intlbreakiterator::first' => 
  array (
    0 => 'int',
  ),
  'intlbreakiterator::following' => 
  array (
    0 => 'int',
    'offset' => 'int',
  ),
  'intlbreakiterator::geterrorcode' => 
  array (
    0 => 'int',
  ),
  'intlbreakiterator::geterrormessage' => 
  array (
    0 => 'string',
  ),
  'intlbreakiterator::getiterator' => 
  array (
    0 => 'Iterator',
  ),
  'intlbreakiterator::getlocale' => 
  array (
    0 => 'false|string',
    'type' => 'int',
  ),
  'intlbreakiterator::getpartsiterator' => 
  array (
    0 => 'IntlPartsIterator',
    'type=' => 'string',
  ),
  'intlbreakiterator::gettext' => 
  array (
    0 => 'null|string',
  ),
  'intlbreakiterator::isboundary' => 
  array (
    0 => 'bool',
    'offset' => 'int',
  ),
  'intlbreakiterator::last' => 
  array (
    0 => 'int',
  ),
  'intlbreakiterator::next' => 
  array (
    0 => 'int',
    'offset=' => 'int|null',
  ),
  'intlbreakiterator::preceding' => 
  array (
    0 => 'int',
    'offset' => 'int',
  ),
  'intlbreakiterator::previous' => 
  array (
    0 => 'int',
  ),
  'intlbreakiterator::settext' => 
  array (
    0 => 'bool|null',
    'text' => 'string',
  ),
  'intlcal_add' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
    'field' => 'int',
    'value' => 'int',
  ),
  'intlcal_after' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
    'other' => 'IntlCalendar',
  ),
  'intlcal_before' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
    'other' => 'IntlCalendar',
  ),
  'intlcal_clear' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
    'field=' => 'int|null',
  ),
  'intlcal_create_instance' => 
  array (
    0 => 'IntlCalendar|null',
    'timezone=' => 'mixed',
    'locale=' => 'null|string',
  ),
  'intlcal_equals' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
    'other' => 'IntlCalendar',
  ),
  'intlcal_field_difference' => 
  array (
    0 => 'false|int',
    'calendar' => 'IntlCalendar',
    'timestamp' => 'float',
    'field' => 'int',
  ),
  'intlcal_from_date_time' => 
  array (
    0 => 'IntlCalendar|null',
    'datetime' => 'DateTime|string',
    'locale=' => 'null|string',
  ),
  'intlcal_get' => 
  array (
    0 => 'false|int',
    'calendar' => 'IntlCalendar',
    'field' => 'int',
  ),
  'intlcal_get_actual_maximum' => 
  array (
    0 => 'int',
    'calendar' => 'IntlCalendar',
    'field' => 'int',
  ),
  'intlcal_get_actual_minimum' => 
  array (
    0 => 'int',
    'calendar' => 'IntlCalendar',
    'field' => 'int',
  ),
  'intlcal_get_available_locales' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'intlcal_get_day_of_week_type' => 
  array (
    0 => 'int',
    'calendar' => 'IntlCalendar',
    'dayOfWeek' => 'int',
  ),
  'intlcal_get_error_code' => 
  array (
    0 => 'false|int',
    'calendar' => 'IntlCalendar',
  ),
  'intlcal_get_error_message' => 
  array (
    0 => 'false|string',
    'calendar' => 'IntlCalendar',
  ),
  'intlcal_get_first_day_of_week' => 
  array (
    0 => 'int',
    'calendar' => 'IntlCalendar',
  ),
  'intlcal_get_greatest_minimum' => 
  array (
    0 => 'int',
    'calendar' => 'IntlCalendar',
    'field' => 'int',
  ),
  'intlcal_get_keyword_values_for_locale' => 
  array (
    0 => 'IntlIterator|false',
    'keyword' => 'string',
    'locale' => 'string',
    'onlyCommon' => 'bool',
  ),
  'intlcal_get_least_maximum' => 
  array (
    0 => 'int',
    'calendar' => 'IntlCalendar',
    'field' => 'int',
  ),
  'intlcal_get_locale' => 
  array (
    0 => 'string',
    'calendar' => 'IntlCalendar',
    'type' => 'int',
  ),
  'intlcal_get_maximum' => 
  array (
    0 => 'false|int',
    'calendar' => 'IntlCalendar',
    'field' => 'int',
  ),
  'intlcal_get_minimal_days_in_first_week' => 
  array (
    0 => 'int',
    'calendar' => 'IntlCalendar',
  ),
  'intlcal_get_minimum' => 
  array (
    0 => 'int',
    'calendar' => 'IntlCalendar',
    'field' => 'int',
  ),
  'intlcal_get_now' => 
  array (
    0 => 'float',
  ),
  'intlcal_get_repeated_wall_time_option' => 
  array (
    0 => 'int',
    'calendar' => 'IntlCalendar',
  ),
  'intlcal_get_skipped_wall_time_option' => 
  array (
    0 => 'int',
    'calendar' => 'IntlCalendar',
  ),
  'intlcal_get_time' => 
  array (
    0 => 'float',
    'calendar' => 'IntlCalendar',
  ),
  'intlcal_get_time_zone' => 
  array (
    0 => 'IntlTimeZone',
    'calendar' => 'IntlCalendar',
  ),
  'intlcal_get_type' => 
  array (
    0 => 'string',
    'calendar' => 'IntlCalendar',
  ),
  'intlcal_get_weekend_transition' => 
  array (
    0 => 'false|int',
    'calendar' => 'IntlCalendar',
    'dayOfWeek' => 'int',
  ),
  'intlcal_in_daylight_time' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
  ),
  'intlcal_is_equivalent_to' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
    'other' => 'IntlCalendar',
  ),
  'intlcal_is_lenient' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
  ),
  'intlcal_is_set' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
    'field' => 'int',
  ),
  'intlcal_is_weekend' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
    'timestamp=' => 'float|null',
  ),
  'intlcal_roll' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
    'field' => 'int',
    'value' => 'mixed',
  ),
  'intlcal_set' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
    'year' => 'int',
    'month' => 'int',
    'dayOfMonth=' => 'int',
    'hour=' => 'int',
    'minute=' => 'int',
    'second=' => 'int',
  ),
  'intlcal_set\'1' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
    'year' => 'int',
    'month' => 'int',
    'dayOfMonth=' => 'int',
    'hour=' => 'int',
    'minute=' => 'int',
    'second=' => 'int',
  ),
  'intlcal_set_first_day_of_week' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
    'dayOfWeek' => 'int',
  ),
  'intlcal_set_lenient' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
    'lenient' => 'bool',
  ),
  'intlcal_set_minimal_days_in_first_week' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
    'days' => 'int',
  ),
  'intlcal_set_repeated_wall_time_option' => 
  array (
    0 => 'true',
    'calendar' => 'IntlCalendar',
    'option' => 'int',
  ),
  'intlcal_set_skipped_wall_time_option' => 
  array (
    0 => 'true',
    'calendar' => 'IntlCalendar',
    'option' => 'int',
  ),
  'intlcal_set_time' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
    'timestamp' => 'float',
  ),
  'intlcal_set_time_zone' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar',
    'timezone' => 'mixed',
  ),
  'intlcal_to_date_time' => 
  array (
    0 => 'DateTime|false',
    'calendar' => 'IntlCalendar',
  ),
  'intlcalendar::__construct' => 
  array (
    0 => 'void',
  ),
  'intlcalendar::add' => 
  array (
    0 => 'bool',
    'field' => 'int',
    'value' => 'int',
  ),
  'intlcalendar::after' => 
  array (
    0 => 'bool',
    'other' => 'IntlCalendar',
  ),
  'intlcalendar::before' => 
  array (
    0 => 'bool',
    'other' => 'IntlCalendar',
  ),
  'intlcalendar::clear' => 
  array (
    0 => 'bool',
    'field=' => 'int|null',
  ),
  'intlcalendar::createinstance' => 
  array (
    0 => 'IntlCalendar|null',
    'timezone=' => 'DateTimeZone|IntlTimeZone|null|string',
    'locale=' => 'null|string',
  ),
  'intlcalendar::equals' => 
  array (
    0 => 'bool',
    'other' => 'IntlCalendar',
  ),
  'intlcalendar::fielddifference' => 
  array (
    0 => 'false|int',
    'timestamp' => 'float',
    'field' => 'int',
  ),
  'intlcalendar::fromdatetime' => 
  array (
    0 => 'IntlCalendar|null',
    'datetime' => 'DateTime|string',
    'locale=' => 'null|string',
  ),
  'intlcalendar::get' => 
  array (
    0 => 'int',
    'field' => 'int',
  ),
  'intlcalendar::getactualmaximum' => 
  array (
    0 => 'int',
    'field' => 'int',
  ),
  'intlcalendar::getactualminimum' => 
  array (
    0 => 'int',
    'field' => 'int',
  ),
  'intlcalendar::getavailablelocales' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'intlcalendar::getdayofweektype' => 
  array (
    0 => 'int',
    'dayOfWeek' => 'int',
  ),
  'intlcalendar::geterrorcode' => 
  array (
    0 => 'int',
  ),
  'intlcalendar::geterrormessage' => 
  array (
    0 => 'string',
  ),
  'intlcalendar::getfirstdayofweek' => 
  array (
    0 => 'int',
  ),
  'intlcalendar::getgreatestminimum' => 
  array (
    0 => 'int',
    'field' => 'int',
  ),
  'intlcalendar::getkeywordvaluesforlocale' => 
  array (
    0 => 'IntlIterator|false',
    'keyword' => 'string',
    'locale' => 'string',
    'onlyCommon' => 'bool',
  ),
  'intlcalendar::getleastmaximum' => 
  array (
    0 => 'int',
    'field' => 'int',
  ),
  'intlcalendar::getlocale' => 
  array (
    0 => 'false|string',
    'type' => 'int',
  ),
  'intlcalendar::getmaximum' => 
  array (
    0 => 'false|int',
    'field' => 'int',
  ),
  'intlcalendar::getminimaldaysinfirstweek' => 
  array (
    0 => 'int',
  ),
  'intlcalendar::getminimum' => 
  array (
    0 => 'int',
    'field' => 'int',
  ),
  'intlcalendar::getnow' => 
  array (
    0 => 'float',
  ),
  'intlcalendar::getrepeatedwalltimeoption' => 
  array (
    0 => 'int',
  ),
  'intlcalendar::getskippedwalltimeoption' => 
  array (
    0 => 'int',
  ),
  'intlcalendar::gettime' => 
  array (
    0 => 'float',
  ),
  'intlcalendar::gettimezone' => 
  array (
    0 => 'IntlTimeZone',
  ),
  'intlcalendar::gettype' => 
  array (
    0 => 'string',
  ),
  'intlcalendar::getweekendtransition' => 
  array (
    0 => 'false|int',
    'dayOfWeek' => 'int',
  ),
  'intlcalendar::indaylighttime' => 
  array (
    0 => 'bool',
  ),
  'intlcalendar::isequivalentto' => 
  array (
    0 => 'bool',
    'other' => 'IntlCalendar',
  ),
  'intlcalendar::islenient' => 
  array (
    0 => 'bool',
  ),
  'intlcalendar::isset' => 
  array (
    0 => 'bool',
    'field' => 'int',
  ),
  'intlcalendar::isweekend' => 
  array (
    0 => 'bool',
    'timestamp=' => 'float|null',
  ),
  'intlcalendar::roll' => 
  array (
    0 => 'bool',
    'field' => 'int',
    'value' => 'bool|int',
  ),
  'intlcalendar::set' => 
  array (
    0 => 'bool',
    'year' => 'int',
    'month' => 'int',
    'dayOfMonth=' => 'int',
    'hour=' => 'int',
    'minute=' => 'int',
    'second=' => 'int',
  ),
  'intlcalendar::set\'1' => 
  array (
    0 => 'bool',
    'year' => 'int',
    'month' => 'int',
    'dayOfMonth=' => 'int',
    'hour=' => 'int',
    'minute=' => 'int',
    'second=' => 'int',
  ),
  'intlcalendar::setfirstdayofweek' => 
  array (
    0 => 'bool',
    'dayOfWeek' => 'int',
  ),
  'intlcalendar::setlenient' => 
  array (
    0 => 'true',
    'lenient' => 'bool',
  ),
  'intlcalendar::setminimaldaysinfirstweek' => 
  array (
    0 => 'bool',
    'days' => 'int',
  ),
  'intlcalendar::setrepeatedwalltimeoption' => 
  array (
    0 => 'true',
    'option' => 'int',
  ),
  'intlcalendar::setskippedwalltimeoption' => 
  array (
    0 => 'true',
    'option' => 'int',
  ),
  'intlcalendar::settime' => 
  array (
    0 => 'bool',
    'timestamp' => 'float',
  ),
  'intlcalendar::settimezone' => 
  array (
    0 => 'bool',
    'timezone' => 'DateTimeZone|IntlTimeZone|null|string',
  ),
  'intlcalendar::todatetime' => 
  array (
    0 => 'DateTime|false',
  ),
  'intlchar::charage' => 
  array (
    0 => 'array<array-key, mixed>|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::chardigitvalue' => 
  array (
    0 => 'int|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::chardirection' => 
  array (
    0 => 'int|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::charfromname' => 
  array (
    0 => 'int|null',
    'name' => 'string',
    'type=' => 'int',
  ),
  'intlchar::charmirror' => 
  array (
    0 => 'int|null|string',
    'codepoint' => 'int|string',
  ),
  'intlchar::charname' => 
  array (
    0 => 'null|string',
    'codepoint' => 'int|string',
    'type=' => 'int',
  ),
  'intlchar::chartype' => 
  array (
    0 => 'int|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::chr' => 
  array (
    0 => 'null|string',
    'codepoint' => 'int|string',
  ),
  'intlchar::digit' => 
  array (
    0 => 'false|int|null',
    'codepoint' => 'int|string',
    'base=' => 'int',
  ),
  'intlchar::enumcharnames' => 
  array (
    0 => 'bool|null',
    'start' => 'int|string',
    'end' => 'int|string',
    'callback' => 'callable(int, int, int):void',
    'type=' => 'int',
  ),
  'intlchar::enumchartypes' => 
  array (
    0 => 'void',
    'callback' => 'callable(int, int, int):void',
  ),
  'intlchar::foldcase' => 
  array (
    0 => 'int|null|string',
    'codepoint' => 'int|string',
    'options=' => 'int',
  ),
  'intlchar::fordigit' => 
  array (
    0 => 'int',
    'digit' => 'int',
    'base=' => 'int',
  ),
  'intlchar::getbidipairedbracket' => 
  array (
    0 => 'int|null|string',
    'codepoint' => 'int|string',
  ),
  'intlchar::getblockcode' => 
  array (
    0 => 'int|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::getcombiningclass' => 
  array (
    0 => 'int|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::getfc_nfkc_closure' => 
  array (
    0 => 'null|string',
    'codepoint' => 'int|string',
  ),
  'intlchar::getintpropertymaxvalue' => 
  array (
    0 => 'int',
    'property' => 'int',
  ),
  'intlchar::getintpropertyminvalue' => 
  array (
    0 => 'int',
    'property' => 'int',
  ),
  'intlchar::getintpropertyvalue' => 
  array (
    0 => 'int|null',
    'codepoint' => 'int|string',
    'property' => 'int',
  ),
  'intlchar::getnumericvalue' => 
  array (
    0 => 'float|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::getpropertyenum' => 
  array (
    0 => 'int',
    'alias' => 'string',
  ),
  'intlchar::getpropertyname' => 
  array (
    0 => 'false|string',
    'property' => 'int',
    'type=' => 'int',
  ),
  'intlchar::getpropertyvalueenum' => 
  array (
    0 => 'int',
    'property' => 'int',
    'name' => 'string',
  ),
  'intlchar::getpropertyvaluename' => 
  array (
    0 => 'false|string',
    'property' => 'int',
    'value' => 'int',
    'type=' => 'int',
  ),
  'intlchar::getunicodeversion' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'intlchar::hasbinaryproperty' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
    'property' => 'int',
  ),
  'intlchar::isalnum' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::isalpha' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::isbase' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::isblank' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::iscntrl' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::isdefined' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::isdigit' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::isgraph' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::isidignorable' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::isidpart' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::isidstart' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::isisocontrol' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::isjavaidpart' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::isjavaidstart' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::isjavaspacechar' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::islower' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::ismirrored' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::isprint' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::ispunct' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::isspace' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::istitle' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::isualphabetic' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::isulowercase' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::isupper' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::isuuppercase' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::isuwhitespace' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::iswhitespace' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::isxdigit' => 
  array (
    0 => 'bool|null',
    'codepoint' => 'int|string',
  ),
  'intlchar::ord' => 
  array (
    0 => 'int|null',
    'character' => 'int|string',
  ),
  'intlchar::tolower' => 
  array (
    0 => 'int|null|string',
    'codepoint' => 'int|string',
  ),
  'intlchar::totitle' => 
  array (
    0 => 'int|null|string',
    'codepoint' => 'int|string',
  ),
  'intlchar::toupper' => 
  array (
    0 => 'int|null|string',
    'codepoint' => 'int|string',
  ),
  'intlcodepointbreakiterator::createcharacterinstance' => 
  array (
    0 => 'IntlRuleBasedBreakIterator|null',
    'locale=' => 'null|string',
  ),
  'intlcodepointbreakiterator::createcodepointinstance' => 
  array (
    0 => 'IntlCodePointBreakIterator',
  ),
  'intlcodepointbreakiterator::createlineinstance' => 
  array (
    0 => 'IntlRuleBasedBreakIterator|null',
    'locale=' => 'null|string',
  ),
  'intlcodepointbreakiterator::createsentenceinstance' => 
  array (
    0 => 'IntlRuleBasedBreakIterator|null',
    'locale=' => 'null|string',
  ),
  'intlcodepointbreakiterator::createtitleinstance' => 
  array (
    0 => 'IntlRuleBasedBreakIterator|null',
    'locale=' => 'null|string',
  ),
  'intlcodepointbreakiterator::createwordinstance' => 
  array (
    0 => 'IntlRuleBasedBreakIterator|null',
    'locale=' => 'null|string',
  ),
  'intlcodepointbreakiterator::current' => 
  array (
    0 => 'int',
  ),
  'intlcodepointbreakiterator::first' => 
  array (
    0 => 'int',
  ),
  'intlcodepointbreakiterator::following' => 
  array (
    0 => 'int',
    'offset' => 'int',
  ),
  'intlcodepointbreakiterator::geterrorcode' => 
  array (
    0 => 'int',
  ),
  'intlcodepointbreakiterator::geterrormessage' => 
  array (
    0 => 'string',
  ),
  'intlcodepointbreakiterator::getiterator' => 
  array (
    0 => 'Iterator',
  ),
  'intlcodepointbreakiterator::getlastcodepoint' => 
  array (
    0 => 'int',
  ),
  'intlcodepointbreakiterator::getlocale' => 
  array (
    0 => 'false|string',
    'type' => 'int',
  ),
  'intlcodepointbreakiterator::getpartsiterator' => 
  array (
    0 => 'IntlPartsIterator',
    'type=' => 'string',
  ),
  'intlcodepointbreakiterator::gettext' => 
  array (
    0 => 'null|string',
  ),
  'intlcodepointbreakiterator::isboundary' => 
  array (
    0 => 'bool',
    'offset' => 'int',
  ),
  'intlcodepointbreakiterator::last' => 
  array (
    0 => 'int',
  ),
  'intlcodepointbreakiterator::next' => 
  array (
    0 => 'int',
    'offset=' => 'int|null',
  ),
  'intlcodepointbreakiterator::preceding' => 
  array (
    0 => 'int',
    'offset' => 'int',
  ),
  'intlcodepointbreakiterator::previous' => 
  array (
    0 => 'int',
  ),
  'intlcodepointbreakiterator::settext' => 
  array (
    0 => 'bool|null',
    'text' => 'string',
  ),
  'intldateformatter::__construct' => 
  array (
    0 => 'void',
    'locale' => 'null|string',
    'dateType' => 'int',
    'timeType' => 'int',
    'timezone=' => 'DateTimeZone|IntlTimeZone|null|string',
    'calendar=' => 'IntlCalendar|int|null',
    'pattern=' => 'null|string',
  ),
  'intldateformatter::create' => 
  array (
    0 => 'IntlDateFormatter|null',
    'locale' => 'null|string',
    'dateType' => 'int',
    'timeType' => 'int',
    'timezone=' => 'DateTimeZone|IntlTimeZone|null|string',
    'calendar=' => 'IntlCalendar|int|null',
    'pattern=' => 'null|string',
  ),
  'intldateformatter::format' => 
  array (
    0 => 'false|string',
    'datetime' => 'DateTimeInterface|IntlCalendar|array{0?: int, 1?: int, 2?: int, 3?: int, 4?: int, 5?: int, 6?: int, 7?: int, 8?: int, tm_hour?: int, tm_isdst?: int, tm_mday?: int, tm_min?: int, tm_mon?: int, tm_sec?: int, tm_wday?: int, tm_yday?: int, tm_year?: int}|float|int|string',
  ),
  'intldateformatter::formatobject' => 
  array (
    0 => 'false|string',
    'datetime' => 'DateTimeInterface|IntlCalendar',
    'format=' => 'array{0: int, 1: int}|int|null|string',
    'locale=' => 'null|string',
  ),
  'intldateformatter::getcalendar' => 
  array (
    0 => 'false|int',
  ),
  'intldateformatter::getcalendarobject' => 
  array (
    0 => 'IntlCalendar|false|null',
  ),
  'intldateformatter::getdatetype' => 
  array (
    0 => 'false|int',
  ),
  'intldateformatter::geterrorcode' => 
  array (
    0 => 'int',
  ),
  'intldateformatter::geterrormessage' => 
  array (
    0 => 'string',
  ),
  'intldateformatter::getlocale' => 
  array (
    0 => 'false|string',
    'type=' => 'int',
  ),
  'intldateformatter::getpattern' => 
  array (
    0 => 'false|string',
  ),
  'intldateformatter::gettimetype' => 
  array (
    0 => 'false|int',
  ),
  'intldateformatter::gettimezone' => 
  array (
    0 => 'IntlTimeZone|false',
  ),
  'intldateformatter::gettimezoneid' => 
  array (
    0 => 'false|string',
  ),
  'intldateformatter::islenient' => 
  array (
    0 => 'bool',
  ),
  'intldateformatter::localtime' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'string' => 'string',
    '&offset=' => 'int',
  ),
  'intldateformatter::parse' => 
  array (
    0 => 'false|float|int',
    'string' => 'string',
    '&offset=' => 'int',
  ),
  'intldateformatter::setcalendar' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlCalendar|int|null',
  ),
  'intldateformatter::setlenient' => 
  array (
    0 => 'void',
    'lenient' => 'bool',
  ),
  'intldateformatter::setpattern' => 
  array (
    0 => 'bool',
    'pattern' => 'string',
  ),
  'intldateformatter::settimezone' => 
  array (
    0 => 'false|null',
    'timezone' => 'DateTimeZone|IntlTimeZone|null|string',
  ),
  'intlexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'intlexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'intlexception::__wakeup' => 
  array (
    0 => 'void',
  ),
  'intlexception::getcode' => 
  array (
    0 => 'int',
  ),
  'intlexception::getfile' => 
  array (
    0 => 'string',
  ),
  'intlexception::getline' => 
  array (
    0 => 'int',
  ),
  'intlexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'intlexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'intlexception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'intlexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'intlgregcal_create_instance' => 
  array (
    0 => 'IntlGregorianCalendar|null',
    'timezoneOrYear=' => 'DateTimeZone|IntlTimeZone|null|string',
    'localeOrMonth=' => 'int|null|string',
    'day=' => 'int',
    'hour=' => 'int',
    'minute=' => 'int',
    'second=' => 'int',
  ),
  'intlgregcal_get_gregorian_change' => 
  array (
    0 => 'float',
    'calendar' => 'IntlGregorianCalendar',
  ),
  'intlgregcal_is_leap_year' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlGregorianCalendar',
    'year' => 'int',
  ),
  'intlgregcal_set_gregorian_change' => 
  array (
    0 => 'bool',
    'calendar' => 'IntlGregorianCalendar',
    'timestamp' => 'float',
  ),
  'intlgregoriancalendar::__construct' => 
  array (
    0 => 'void',
    'timezoneOrYear=' => 'mixed',
    'localeOrMonth=' => 'mixed',
    'day=' => 'mixed',
    'hour=' => 'mixed',
    'minute=' => 'mixed',
    'second=' => 'mixed',
  ),
  'intlgregoriancalendar::add' => 
  array (
    0 => 'bool',
    'field' => 'int',
    'value' => 'int',
  ),
  'intlgregoriancalendar::after' => 
  array (
    0 => 'bool',
    'other' => 'IntlCalendar',
  ),
  'intlgregoriancalendar::before' => 
  array (
    0 => 'bool',
    'other' => 'IntlCalendar',
  ),
  'intlgregoriancalendar::clear' => 
  array (
    0 => 'bool',
    'field=' => 'int|null',
  ),
  'intlgregoriancalendar::createinstance' => 
  array (
    0 => 'IntlGregorianCalendar|null',
    'timezone=' => 'DateTimeZone|IntlTimeZone|null|string',
    'locale=' => 'null|string',
  ),
  'intlgregoriancalendar::equals' => 
  array (
    0 => 'bool',
    'other' => 'IntlCalendar',
  ),
  'intlgregoriancalendar::fielddifference' => 
  array (
    0 => 'false|int',
    'timestamp' => 'float',
    'field' => 'int',
  ),
  'intlgregoriancalendar::fromdatetime' => 
  array (
    0 => 'IntlCalendar|null',
    'datetime' => 'DateTime|string',
    'locale=' => 'null|string',
  ),
  'intlgregoriancalendar::get' => 
  array (
    0 => 'int',
    'field' => 'int',
  ),
  'intlgregoriancalendar::getactualmaximum' => 
  array (
    0 => 'int',
    'field' => 'int',
  ),
  'intlgregoriancalendar::getactualminimum' => 
  array (
    0 => 'int',
    'field' => 'int',
  ),
  'intlgregoriancalendar::getavailablelocales' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'intlgregoriancalendar::getdayofweektype' => 
  array (
    0 => 'int',
    'dayOfWeek' => 'int',
  ),
  'intlgregoriancalendar::geterrorcode' => 
  array (
    0 => 'int',
  ),
  'intlgregoriancalendar::geterrormessage' => 
  array (
    0 => 'string',
  ),
  'intlgregoriancalendar::getfirstdayofweek' => 
  array (
    0 => 'int',
  ),
  'intlgregoriancalendar::getgreatestminimum' => 
  array (
    0 => 'int',
    'field' => 'int',
  ),
  'intlgregoriancalendar::getgregorianchange' => 
  array (
    0 => 'float',
  ),
  'intlgregoriancalendar::getkeywordvaluesforlocale' => 
  array (
    0 => 'IntlIterator|false',
    'keyword' => 'string',
    'locale' => 'string',
    'onlyCommon' => 'bool',
  ),
  'intlgregoriancalendar::getleastmaximum' => 
  array (
    0 => 'int',
    'field' => 'int',
  ),
  'intlgregoriancalendar::getlocale' => 
  array (
    0 => 'false|string',
    'type' => 'int',
  ),
  'intlgregoriancalendar::getmaximum' => 
  array (
    0 => 'int',
    'field' => 'int',
  ),
  'intlgregoriancalendar::getminimaldaysinfirstweek' => 
  array (
    0 => 'int',
  ),
  'intlgregoriancalendar::getminimum' => 
  array (
    0 => 'int',
    'field' => 'int',
  ),
  'intlgregoriancalendar::getnow' => 
  array (
    0 => 'float',
  ),
  'intlgregoriancalendar::getrepeatedwalltimeoption' => 
  array (
    0 => 'int',
  ),
  'intlgregoriancalendar::getskippedwalltimeoption' => 
  array (
    0 => 'int',
  ),
  'intlgregoriancalendar::gettime' => 
  array (
    0 => 'float',
  ),
  'intlgregoriancalendar::gettimezone' => 
  array (
    0 => 'IntlTimeZone',
  ),
  'intlgregoriancalendar::gettype' => 
  array (
    0 => 'string',
  ),
  'intlgregoriancalendar::getweekendtransition' => 
  array (
    0 => 'false|int',
    'dayOfWeek' => 'int',
  ),
  'intlgregoriancalendar::indaylighttime' => 
  array (
    0 => 'bool',
  ),
  'intlgregoriancalendar::isequivalentto' => 
  array (
    0 => 'bool',
    'other' => 'IntlCalendar',
  ),
  'intlgregoriancalendar::isleapyear' => 
  array (
    0 => 'bool',
    'year' => 'int',
  ),
  'intlgregoriancalendar::islenient' => 
  array (
    0 => 'bool',
  ),
  'intlgregoriancalendar::isset' => 
  array (
    0 => 'bool',
    'field' => 'int',
  ),
  'intlgregoriancalendar::isweekend' => 
  array (
    0 => 'bool',
    'timestamp=' => 'float|null',
  ),
  'intlgregoriancalendar::roll' => 
  array (
    0 => 'bool',
    'field' => 'int',
    'value' => 'bool|int',
  ),
  'intlgregoriancalendar::set' => 
  array (
    0 => 'bool',
    'year' => 'int',
    'month' => 'int',
    'dayOfMonth=' => 'int',
    'hour=' => 'int',
    'minute=' => 'int',
    'second=' => 'int',
  ),
  'intlgregoriancalendar::set\'1' => 
  array (
    0 => 'bool',
    'year' => 'int',
    'month' => 'int',
    'dayOfMonth=' => 'int',
    'hour=' => 'int',
    'minute=' => 'int',
    'second=' => 'int',
  ),
  'intlgregoriancalendar::setfirstdayofweek' => 
  array (
    0 => 'bool',
    'dayOfWeek' => 'int',
  ),
  'intlgregoriancalendar::setgregorianchange' => 
  array (
    0 => 'bool',
    'timestamp' => 'float',
  ),
  'intlgregoriancalendar::setlenient' => 
  array (
    0 => 'true',
    'lenient' => 'bool',
  ),
  'intlgregoriancalendar::setminimaldaysinfirstweek' => 
  array (
    0 => 'bool',
    'days' => 'int',
  ),
  'intlgregoriancalendar::setrepeatedwalltimeoption' => 
  array (
    0 => 'true',
    'option' => 'int',
  ),
  'intlgregoriancalendar::setskippedwalltimeoption' => 
  array (
    0 => 'true',
    'option' => 'int',
  ),
  'intlgregoriancalendar::settime' => 
  array (
    0 => 'bool',
    'timestamp' => 'float',
  ),
  'intlgregoriancalendar::settimezone' => 
  array (
    0 => 'bool',
    'timezone' => 'DateTimeZone|IntlTimeZone|null|string',
  ),
  'intlgregoriancalendar::todatetime' => 
  array (
    0 => 'DateTime',
  ),
  'intliterator::__construct' => 
  array (
    0 => 'void',
  ),
  'intliterator::current' => 
  array (
    0 => 'mixed',
  ),
  'intliterator::key' => 
  array (
    0 => 'string',
  ),
  'intliterator::next' => 
  array (
    0 => 'void',
  ),
  'intliterator::rewind' => 
  array (
    0 => 'void',
  ),
  'intliterator::valid' => 
  array (
    0 => 'bool',
  ),
  'intlpartsiterator::current' => 
  array (
    0 => 'mixed',
  ),
  'intlpartsiterator::getbreakiterator' => 
  array (
    0 => 'IntlBreakIterator',
  ),
  'intlpartsiterator::key' => 
  array (
    0 => 'mixed',
  ),
  'intlpartsiterator::next' => 
  array (
    0 => 'mixed',
  ),
  'intlpartsiterator::rewind' => 
  array (
    0 => 'mixed',
  ),
  'intlpartsiterator::valid' => 
  array (
    0 => 'mixed',
  ),
  'intlrulebasedbreakiterator::__construct' => 
  array (
    0 => 'void',
    'rules' => 'string',
    'compiled=' => 'bool',
  ),
  'intlrulebasedbreakiterator::createcharacterinstance' => 
  array (
    0 => 'IntlRuleBasedBreakIterator|null',
    'locale=' => 'null|string',
  ),
  'intlrulebasedbreakiterator::createcodepointinstance' => 
  array (
    0 => 'IntlCodePointBreakIterator',
  ),
  'intlrulebasedbreakiterator::createlineinstance' => 
  array (
    0 => 'IntlRuleBasedBreakIterator|null',
    'locale=' => 'null|string',
  ),
  'intlrulebasedbreakiterator::createsentenceinstance' => 
  array (
    0 => 'IntlRuleBasedBreakIterator|null',
    'locale=' => 'null|string',
  ),
  'intlrulebasedbreakiterator::createtitleinstance' => 
  array (
    0 => 'IntlRuleBasedBreakIterator|null',
    'locale=' => 'null|string',
  ),
  'intlrulebasedbreakiterator::createwordinstance' => 
  array (
    0 => 'IntlRuleBasedBreakIterator|null',
    'locale=' => 'null|string',
  ),
  'intlrulebasedbreakiterator::current' => 
  array (
    0 => 'int',
  ),
  'intlrulebasedbreakiterator::first' => 
  array (
    0 => 'int',
  ),
  'intlrulebasedbreakiterator::following' => 
  array (
    0 => 'int',
    'offset' => 'int',
  ),
  'intlrulebasedbreakiterator::getbinaryrules' => 
  array (
    0 => 'string',
  ),
  'intlrulebasedbreakiterator::geterrorcode' => 
  array (
    0 => 'int',
  ),
  'intlrulebasedbreakiterator::geterrormessage' => 
  array (
    0 => 'string',
  ),
  'intlrulebasedbreakiterator::getiterator' => 
  array (
    0 => 'Iterator',
  ),
  'intlrulebasedbreakiterator::getlocale' => 
  array (
    0 => 'false|string',
    'type' => 'int',
  ),
  'intlrulebasedbreakiterator::getpartsiterator' => 
  array (
    0 => 'IntlPartsIterator',
    'type=' => 'string',
  ),
  'intlrulebasedbreakiterator::getrules' => 
  array (
    0 => 'string',
  ),
  'intlrulebasedbreakiterator::getrulestatus' => 
  array (
    0 => 'int',
  ),
  'intlrulebasedbreakiterator::getrulestatusvec' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'intlrulebasedbreakiterator::gettext' => 
  array (
    0 => 'null|string',
  ),
  'intlrulebasedbreakiterator::isboundary' => 
  array (
    0 => 'bool',
    'offset' => 'int',
  ),
  'intlrulebasedbreakiterator::last' => 
  array (
    0 => 'int',
  ),
  'intlrulebasedbreakiterator::next' => 
  array (
    0 => 'int',
    'offset=' => 'int|null',
  ),
  'intlrulebasedbreakiterator::preceding' => 
  array (
    0 => 'int',
    'offset' => 'int',
  ),
  'intlrulebasedbreakiterator::previous' => 
  array (
    0 => 'int',
  ),
  'intlrulebasedbreakiterator::settext' => 
  array (
    0 => 'bool|null',
    'text' => 'string',
  ),
  'intltimezone::__construct' => 
  array (
    0 => 'void',
  ),
  'intltimezone::countequivalentids' => 
  array (
    0 => 'false|int',
    'timezoneId' => 'string',
  ),
  'intltimezone::createdefault' => 
  array (
    0 => 'IntlTimeZone',
  ),
  'intltimezone::createenumeration' => 
  array (
    0 => 'IntlIterator|false',
    'countryOrRawOffset=' => 'IntlTimeZone|float|int|null|string',
  ),
  'intltimezone::createtimezone' => 
  array (
    0 => 'IntlTimeZone|null',
    'timezoneId' => 'string',
  ),
  'intltimezone::createtimezoneidenumeration' => 
  array (
    0 => 'IntlIterator|false',
    'type' => 'int',
    'region=' => 'null|string',
    'rawOffset=' => 'int|null',
  ),
  'intltimezone::fromdatetimezone' => 
  array (
    0 => 'IntlTimeZone|null',
    'timezone' => 'DateTimeZone',
  ),
  'intltimezone::getcanonicalid' => 
  array (
    0 => 'false|string',
    'timezoneId' => 'string',
    '&w_isSystemId=' => 'bool',
  ),
  'intltimezone::getdisplayname' => 
  array (
    0 => 'false|string',
    'dst=' => 'bool',
    'style=' => 'int',
    'locale=' => 'null|string',
  ),
  'intltimezone::getdstsavings' => 
  array (
    0 => 'int',
  ),
  'intltimezone::getequivalentid' => 
  array (
    0 => 'false|string',
    'timezoneId' => 'string',
    'offset' => 'int',
  ),
  'intltimezone::geterrorcode' => 
  array (
    0 => 'int',
  ),
  'intltimezone::geterrormessage' => 
  array (
    0 => 'string',
  ),
  'intltimezone::getgmt' => 
  array (
    0 => 'IntlTimeZone',
  ),
  'intltimezone::getid' => 
  array (
    0 => 'string',
  ),
  'intltimezone::getidforwindowsid' => 
  array (
    0 => 'false|string',
    'timezoneId' => 'string',
    'region=' => 'null|string',
  ),
  'intltimezone::getoffset' => 
  array (
    0 => 'bool',
    'timestamp' => 'float',
    'local' => 'bool',
    '&w_rawOffset' => 'int',
    '&w_dstOffset' => 'int',
  ),
  'intltimezone::getrawoffset' => 
  array (
    0 => 'int',
  ),
  'intltimezone::getregion' => 
  array (
    0 => 'false|string',
    'timezoneId' => 'string',
  ),
  'intltimezone::gettzdataversion' => 
  array (
    0 => 'string',
  ),
  'intltimezone::getunknown' => 
  array (
    0 => 'IntlTimeZone',
  ),
  'intltimezone::getwindowsid' => 
  array (
    0 => 'false|string',
    'timezoneId' => 'string',
  ),
  'intltimezone::hassamerules' => 
  array (
    0 => 'bool',
    'other' => 'IntlTimeZone',
  ),
  'intltimezone::todatetimezone' => 
  array (
    0 => 'DateTimeZone|false',
  ),
  'intltimezone::usedaylighttime' => 
  array (
    0 => 'bool',
  ),
  'intltz_count_equivalent_ids' => 
  array (
    0 => 'int',
    'timezoneId' => 'string',
  ),
  'intltz_create_default' => 
  array (
    0 => 'IntlTimeZone',
  ),
  'intltz_create_enumeration' => 
  array (
    0 => 'IntlIterator|false',
    'countryOrRawOffset=' => 'IntlTimeZone|float|int|null|string',
  ),
  'intltz_create_time_zone' => 
  array (
    0 => 'IntlTimeZone|null',
    'timezoneId' => 'string',
  ),
  'intltz_create_time_zone_id_enumeration' => 
  array (
    0 => 'IntlIterator|false',
    'type' => 'int',
    'region=' => 'null|string',
    'rawOffset=' => 'int|null',
  ),
  'intltz_from_date_time_zone' => 
  array (
    0 => 'IntlTimeZone|null',
    'timezone' => 'DateTimeZone',
  ),
  'intltz_get_canonical_id' => 
  array (
    0 => 'false|string',
    'timezoneId' => 'string',
    '&isSystemId=' => 'bool',
  ),
  'intltz_get_display_name' => 
  array (
    0 => 'false|string',
    'timezone' => 'IntlTimeZone',
    'dst=' => 'bool',
    'style=' => 'int',
    'locale=' => 'null|string',
  ),
  'intltz_get_dst_savings' => 
  array (
    0 => 'int',
    'timezone' => 'IntlTimeZone',
  ),
  'intltz_get_equivalent_id' => 
  array (
    0 => 'string',
    'timezoneId' => 'string',
    'offset' => 'int',
  ),
  'intltz_get_error_code' => 
  array (
    0 => 'int',
    'timezone' => 'IntlTimeZone',
  ),
  'intltz_get_error_message' => 
  array (
    0 => 'string',
    'timezone' => 'IntlTimeZone',
  ),
  'intltz_get_gmt' => 
  array (
    0 => 'IntlTimeZone',
  ),
  'intltz_get_id' => 
  array (
    0 => 'string',
    'timezone' => 'IntlTimeZone',
  ),
  'intltz_get_id_for_windows_id' => 
  array (
    0 => 'false|string',
    'timezoneId' => 'string',
    'region=' => 'null|string',
  ),
  'intltz_get_offset' => 
  array (
    0 => 'bool',
    'timezone' => 'IntlTimeZone',
    'timestamp' => 'float',
    'local' => 'bool',
    '&rawOffset' => 'int',
    '&dstOffset' => 'int',
  ),
  'intltz_get_raw_offset' => 
  array (
    0 => 'int',
    'timezone' => 'IntlTimeZone',
  ),
  'intltz_get_region' => 
  array (
    0 => 'false|string',
    'timezoneId' => 'string',
  ),
  'intltz_get_tz_data_version' => 
  array (
    0 => 'string',
  ),
  'intltz_get_unknown' => 
  array (
    0 => 'IntlTimeZone',
  ),
  'intltz_get_windows_id' => 
  array (
    0 => 'false|string',
    'timezoneId' => 'string',
  ),
  'intltz_getgmt' => 
  array (
    0 => 'IntlTimeZone',
  ),
  'intltz_has_same_rules' => 
  array (
    0 => 'bool',
    'timezone' => 'IntlTimeZone',
    'other' => 'IntlTimeZone',
  ),
  'intltz_to_date_time_zone' => 
  array (
    0 => 'DateTimeZone',
    'timezone' => 'IntlTimeZone',
  ),
  'intltz_use_daylight_time' => 
  array (
    0 => 'bool',
    'timezone' => 'IntlTimeZone',
  ),
  'intlz_create_default' => 
  array (
    0 => 'IntlTimeZone',
  ),
  'intval' => 
  array (
    0 => 'int',
    'value' => 'mixed',
    'base=' => 'int',
  ),
  'invalidargumentexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'invalidargumentexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'invalidargumentexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'invalidargumentexception::getcode' => 
  array (
    0 => 'int',
  ),
  'invalidargumentexception::getfile' => 
  array (
    0 => 'string',
  ),
  'invalidargumentexception::getline' => 
  array (
    0 => 'int',
  ),
  'invalidargumentexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'invalidargumentexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'invalidargumentexception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'invalidargumentexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'ip2long' => 
  array (
    0 => 'false|int',
    'ip' => 'string',
  ),
  'iptcembed' => 
  array (
    0 => 'bool|string',
    'iptc_data' => 'string',
    'filename' => 'string',
    'spool=' => 'int',
  ),
  'iptcparse' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'iptc_block' => 'string',
  ),
  'is_a' => 
  array (
    0 => 'bool',
    'object_or_class' => 'mixed',
    'class' => 'string',
    'allow_string=' => 'bool',
  ),
  'is_array' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'is_bool' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'is_callable' => 
  array (
    0 => 'bool',
    'value' => 'callable|mixed',
    'syntax_only=' => 'bool',
    '&w_callable_name=' => 'string',
  ),
  'is_countable' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'is_dir' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'is_double' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'is_executable' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'is_file' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'is_finite' => 
  array (
    0 => 'bool',
    'num' => 'float',
  ),
  'is_float' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'is_infinite' => 
  array (
    0 => 'bool',
    'num' => 'float',
  ),
  'is_int' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'is_integer' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'is_iterable' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'is_link' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'is_long' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'is_nan' => 
  array (
    0 => 'bool',
    'num' => 'float',
  ),
  'is_null' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'is_numeric' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'is_object' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'is_readable' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'is_resource' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'is_scalar' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'is_soap_fault' => 
  array (
    0 => 'bool',
    'object' => 'mixed',
  ),
  'is_string' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'is_subclass_of' => 
  array (
    0 => 'bool',
    'object_or_class' => 'object|string',
    'class' => 'class-string',
    'allow_string=' => 'bool',
  ),
  'is_tainted' => 
  array (
    0 => 'bool',
    'string' => 'string',
  ),
  'is_uploaded_file' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'is_writable' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'is_writeable' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'isset' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
    '...rest=' => 'mixed',
  ),
  'iterator::current' => 
  array (
    0 => 'mixed',
  ),
  'iterator::key' => 
  array (
    0 => 'mixed',
  ),
  'iterator::next' => 
  array (
    0 => 'void',
  ),
  'iterator::rewind' => 
  array (
    0 => 'void',
  ),
  'iterator::valid' => 
  array (
    0 => 'bool',
  ),
  'iterator_apply' => 
  array (
    0 => 'int<0, max>',
    'iterator' => 'Traversable',
    'callback' => 'callable(mixed):bool',
    'args=' => 'array<array-key, mixed>|null',
  ),
  'iterator_count' => 
  array (
    0 => 'int<0, max>',
    'iterator' => 'Traversable',
  ),
  'iterator_to_array' => 
  array (
    0 => 'array<array-key, mixed>',
    'iterator' => 'Traversable',
    'preserve_keys=' => 'bool',
  ),
  'iteratoraggregate::getiterator' => 
  array (
    0 => 'Traversable',
  ),
  'iteratoriterator::__construct' => 
  array (
    0 => 'void',
    'iterator' => 'Traversable',
    'class=' => 'null|string',
  ),
  'iteratoriterator::current' => 
  array (
    0 => 'mixed',
  ),
  'iteratoriterator::getinneriterator' => 
  array (
    0 => 'Iterator',
  ),
  'iteratoriterator::key' => 
  array (
    0 => 'mixed',
  ),
  'iteratoriterator::next' => 
  array (
    0 => 'void',
  ),
  'iteratoriterator::rewind' => 
  array (
    0 => 'void',
  ),
  'iteratoriterator::valid' => 
  array (
    0 => 'bool',
  ),
  'java_last_exception_clear' => 
  array (
    0 => 'void',
  ),
  'java_last_exception_get' => 
  array (
    0 => 'object',
  ),
  'java_reload' => 
  array (
    0 => 'array<array-key, mixed>',
    'new_jarpath' => 'string',
  ),
  'java_require' => 
  array (
    0 => 'array<array-key, mixed>',
    'new_classpath' => 'string',
  ),
  'java_set_encoding' => 
  array (
    0 => 'array<array-key, mixed>',
    'encoding' => 'string',
  ),
  'java_set_ignore_case' => 
  array (
    0 => 'void',
    'ignore' => 'bool',
  ),
  'java_throw_exceptions' => 
  array (
    0 => 'void',
    'throw' => 'bool',
  ),
  'javaexception::getcause' => 
  array (
    0 => 'object',
  ),
  'jddayofweek' => 
  array (
    0 => 'int|string',
    'julian_day' => 'int',
    'mode=' => 'int',
  ),
  'jdmonthname' => 
  array (
    0 => 'string',
    'julian_day' => 'int',
    'mode' => 'int',
  ),
  'jdtofrench' => 
  array (
    0 => 'string',
    'julian_day' => 'int',
  ),
  'jdtogregorian' => 
  array (
    0 => 'string',
    'julian_day' => 'int',
  ),
  'jdtojewish' => 
  array (
    0 => 'string',
    'julian_day' => 'int',
    'hebrew=' => 'bool',
    'flags=' => 'int',
  ),
  'jdtojulian' => 
  array (
    0 => 'string',
    'julian_day' => 'int',
  ),
  'jdtounix' => 
  array (
    0 => 'int',
    'julian_day' => 'int',
  ),
  'jewishtojd' => 
  array (
    0 => 'int',
    'month' => 'int',
    'day' => 'int',
    'year' => 'int',
  ),
  'jobqueue_license_info' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'join' => 
  array (
    0 => 'string',
    'separator' => 'string',
    'array=' => 'array<array-key, mixed>|null',
  ),
  'join\'1' => 
  array (
    0 => 'string',
    'separator' => 'array<array-key, mixed>',
  ),
  'json_decode' => 
  array (
    0 => 'mixed',
    'json' => 'string',
    'associative=' => 'bool|null',
    'depth=' => 'int',
    'flags=' => 'int',
  ),
  'json_encode' => 
  array (
    0 => 'false|non-empty-string',
    'value' => 'mixed',
    'flags=' => 'int',
    'depth=' => 'int',
  ),
  'json_last_error' => 
  array (
    0 => 'int',
  ),
  'json_last_error_msg' => 
  array (
    0 => 'string',
  ),
  'jsonexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'jsonexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'jsonexception::__wakeup' => 
  array (
    0 => 'void',
  ),
  'jsonexception::getcode' => 
  array (
    0 => 'int',
  ),
  'jsonexception::getfile' => 
  array (
    0 => 'string',
  ),
  'jsonexception::getline' => 
  array (
    0 => 'int',
  ),
  'jsonexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'jsonexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'jsonexception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'jsonexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'jsonincrementalparser::__construct' => 
  array (
    0 => 'void',
    'depth' => 'mixed',
    'options' => 'mixed',
  ),
  'jsonincrementalparser::get' => 
  array (
    0 => 'mixed',
    'options' => 'mixed',
  ),
  'jsonincrementalparser::geterror' => 
  array (
    0 => 'mixed',
  ),
  'jsonincrementalparser::parse' => 
  array (
    0 => 'mixed',
    'json' => 'mixed',
  ),
  'jsonincrementalparser::parsefile' => 
  array (
    0 => 'mixed',
    'filename' => 'mixed',
  ),
  'jsonincrementalparser::reset' => 
  array (
    0 => 'mixed',
  ),
  'jsonserializable::jsonserialize' => 
  array (
    0 => 'mixed',
  ),
  'judy::__construct' => 
  array (
    0 => 'void',
    'judy_type' => 'int',
  ),
  'judy::__destruct' => 
  array (
    0 => 'void',
  ),
  'judy::bycount' => 
  array (
    0 => 'int',
    'nth_index' => 'int',
  ),
  'judy::count' => 
  array (
    0 => 'int',
    'index_start=' => 'int',
    'index_end=' => 'int',
  ),
  'judy::first' => 
  array (
    0 => 'mixed',
    'index=' => 'mixed',
  ),
  'judy::firstempty' => 
  array (
    0 => 'mixed',
    'index=' => 'mixed',
  ),
  'judy::free' => 
  array (
    0 => 'int',
  ),
  'judy::gettype' => 
  array (
    0 => 'int',
  ),
  'judy::last' => 
  array (
    0 => 'mixed',
    'index=' => 'string',
  ),
  'judy::lastempty' => 
  array (
    0 => 'mixed',
    'index=' => 'int',
  ),
  'judy::memoryusage' => 
  array (
    0 => 'int',
  ),
  'judy::next' => 
  array (
    0 => 'mixed',
    'index' => 'mixed',
  ),
  'judy::nextempty' => 
  array (
    0 => 'mixed',
    'index' => 'mixed',
  ),
  'judy::offsetexists' => 
  array (
    0 => 'bool',
    'offset' => 'int|string',
  ),
  'judy::offsetget' => 
  array (
    0 => 'mixed',
    'offset' => 'int|string',
  ),
  'judy::offsetset' => 
  array (
    0 => 'bool',
    'offset' => 'int|null|string',
    'value' => 'mixed',
  ),
  'judy::offsetunset' => 
  array (
    0 => 'bool',
    'offset' => 'int|string',
  ),
  'judy::prev' => 
  array (
    0 => 'mixed',
    'index' => 'mixed',
  ),
  'judy::prevempty' => 
  array (
    0 => 'mixed',
    'index' => 'mixed',
  ),
  'judy::size' => 
  array (
    0 => 'int',
  ),
  'judy_type' => 
  array (
    0 => 'int',
    'array' => 'judy',
  ),
  'judy_version' => 
  array (
    0 => 'string',
  ),
  'juliantojd' => 
  array (
    0 => 'int',
    'month' => 'int',
    'day' => 'int',
    'year' => 'int',
  ),
  'kadm5_chpass_principal' => 
  array (
    0 => 'bool',
    'handle' => 'resource',
    'principal' => 'string',
    'password' => 'string',
  ),
  'kadm5_create_principal' => 
  array (
    0 => 'bool',
    'handle' => 'resource',
    'principal' => 'string',
    'password=' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'kadm5_delete_principal' => 
  array (
    0 => 'bool',
    'handle' => 'resource',
    'principal' => 'string',
  ),
  'kadm5_destroy' => 
  array (
    0 => 'bool',
    'handle' => 'resource',
  ),
  'kadm5_flush' => 
  array (
    0 => 'bool',
    'handle' => 'resource',
  ),
  'kadm5_get_policies' => 
  array (
    0 => 'array<array-key, mixed>',
    'handle' => 'resource',
  ),
  'kadm5_get_principal' => 
  array (
    0 => 'array<array-key, mixed>',
    'handle' => 'resource',
    'principal' => 'string',
  ),
  'kadm5_get_principals' => 
  array (
    0 => 'array<array-key, mixed>',
    'handle' => 'resource',
  ),
  'kadm5_init_with_password' => 
  array (
    0 => 'resource',
    'admin_server' => 'string',
    'realm' => 'string',
    'principal' => 'string',
    'password' => 'string',
  ),
  'kadm5_modify_principal' => 
  array (
    0 => 'bool',
    'handle' => 'resource',
    'principal' => 'string',
    'options' => 'array<array-key, mixed>',
  ),
  'key' => 
  array (
    0 => 'int|null|string',
    'array' => 'array<array-key, mixed>|object',
  ),
  'key_exists' => 
  array (
    0 => 'bool',
    'key' => 'int|string',
    'array' => 'array<array-key, mixed>',
  ),
  'krsort' => 
  array (
    0 => 'true',
    '&array' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'ksort' => 
  array (
    0 => 'true',
    '&array' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'ktaglib_id3v2_attachedpictureframe::getdescription' => 
  array (
    0 => 'string',
  ),
  'ktaglib_id3v2_attachedpictureframe::getmimetype' => 
  array (
    0 => 'string',
  ),
  'ktaglib_id3v2_attachedpictureframe::gettype' => 
  array (
    0 => 'int',
  ),
  'ktaglib_id3v2_attachedpictureframe::savepicture' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'ktaglib_id3v2_attachedpictureframe::setmimetype' => 
  array (
    0 => 'string',
    'type' => 'string',
  ),
  'ktaglib_id3v2_attachedpictureframe::setpicture' => 
  array (
    0 => 'mixed',
    'filename' => 'string',
  ),
  'ktaglib_id3v2_attachedpictureframe::settype' => 
  array (
    0 => 'mixed',
    'type' => 'int',
  ),
  'ktaglib_id3v2_frame::__tostring' => 
  array (
    0 => 'string',
  ),
  'ktaglib_id3v2_frame::getdescription' => 
  array (
    0 => 'string',
  ),
  'ktaglib_id3v2_frame::getmimetype' => 
  array (
    0 => 'string',
  ),
  'ktaglib_id3v2_frame::getsize' => 
  array (
    0 => 'int',
  ),
  'ktaglib_id3v2_frame::gettype' => 
  array (
    0 => 'int',
  ),
  'ktaglib_id3v2_frame::savepicture' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'ktaglib_id3v2_frame::setmimetype' => 
  array (
    0 => 'string',
    'type' => 'string',
  ),
  'ktaglib_id3v2_frame::setpicture' => 
  array (
    0 => 'void',
    'filename' => 'string',
  ),
  'ktaglib_id3v2_frame::settype' => 
  array (
    0 => 'void',
    'type' => 'int',
  ),
  'ktaglib_id3v2_tag::addframe' => 
  array (
    0 => 'bool',
    'frame' => 'KTaglib_ID3v2_Frame',
  ),
  'ktaglib_id3v2_tag::getframelist' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ktaglib_mpeg_audioproperties::getbitrate' => 
  array (
    0 => 'int',
  ),
  'ktaglib_mpeg_audioproperties::getchannels' => 
  array (
    0 => 'int',
  ),
  'ktaglib_mpeg_audioproperties::getlayer' => 
  array (
    0 => 'int',
  ),
  'ktaglib_mpeg_audioproperties::getlength' => 
  array (
    0 => 'int',
  ),
  'ktaglib_mpeg_audioproperties::getsamplebitrate' => 
  array (
    0 => 'int',
  ),
  'ktaglib_mpeg_audioproperties::getversion' => 
  array (
    0 => 'int',
  ),
  'ktaglib_mpeg_audioproperties::iscopyrighted' => 
  array (
    0 => 'bool',
  ),
  'ktaglib_mpeg_audioproperties::isoriginal' => 
  array (
    0 => 'bool',
  ),
  'ktaglib_mpeg_audioproperties::isprotectionenabled' => 
  array (
    0 => 'bool',
  ),
  'ktaglib_mpeg_file::getaudioproperties' => 
  array (
    0 => 'KTaglib_MPEG_File',
  ),
  'ktaglib_mpeg_file::getid3v1tag' => 
  array (
    0 => 'KTaglib_ID3v1_Tag',
    'create=' => 'bool',
  ),
  'ktaglib_mpeg_file::getid3v2tag' => 
  array (
    0 => 'KTaglib_ID3v2_Tag',
    'create=' => 'bool',
  ),
  'ktaglib_tag::getalbum' => 
  array (
    0 => 'string',
  ),
  'ktaglib_tag::getartist' => 
  array (
    0 => 'string',
  ),
  'ktaglib_tag::getcomment' => 
  array (
    0 => 'string',
  ),
  'ktaglib_tag::getgenre' => 
  array (
    0 => 'string',
  ),
  'ktaglib_tag::gettitle' => 
  array (
    0 => 'string',
  ),
  'ktaglib_tag::gettrack' => 
  array (
    0 => 'int',
  ),
  'ktaglib_tag::getyear' => 
  array (
    0 => 'int',
  ),
  'ktaglib_tag::isempty' => 
  array (
    0 => 'bool',
  ),
  'labelcacheobj::freecache' => 
  array (
    0 => 'bool',
  ),
  'labelobj::__construct' => 
  array (
    0 => 'void',
  ),
  'labelobj::converttostring' => 
  array (
    0 => 'string',
  ),
  'labelobj::deletestyle' => 
  array (
    0 => 'int',
    'index' => 'int',
  ),
  'labelobj::free' => 
  array (
    0 => 'void',
  ),
  'labelobj::getbinding' => 
  array (
    0 => 'string',
    'labelbinding' => 'mixed',
  ),
  'labelobj::getexpressionstring' => 
  array (
    0 => 'string',
  ),
  'labelobj::getstyle' => 
  array (
    0 => 'styleObj',
    'index' => 'int',
  ),
  'labelobj::gettextstring' => 
  array (
    0 => 'string',
  ),
  'labelobj::movestyledown' => 
  array (
    0 => 'int',
    'index' => 'int',
  ),
  'labelobj::movestyleup' => 
  array (
    0 => 'int',
    'index' => 'int',
  ),
  'labelobj::removebinding' => 
  array (
    0 => 'int',
    'labelbinding' => 'mixed',
  ),
  'labelobj::set' => 
  array (
    0 => 'int',
    'property_name' => 'string',
    'new_value' => 'mixed',
  ),
  'labelobj::setbinding' => 
  array (
    0 => 'int',
    'labelbinding' => 'mixed',
    'value' => 'string',
  ),
  'labelobj::setexpression' => 
  array (
    0 => 'int',
    'expression' => 'string',
  ),
  'labelobj::settext' => 
  array (
    0 => 'int',
    'text' => 'string',
  ),
  'labelobj::updatefromstring' => 
  array (
    0 => 'int',
    'snippet' => 'string',
  ),
  'lapack::eigenvalues' => 
  array (
    0 => 'array<array-key, mixed>',
    'a' => 'array<array-key, mixed>',
    'left=' => 'array<array-key, mixed>',
    'right=' => 'array<array-key, mixed>',
  ),
  'lapack::identity' => 
  array (
    0 => 'array<array-key, mixed>',
    'n' => 'int',
  ),
  'lapack::leastsquaresbyfactorisation' => 
  array (
    0 => 'array<array-key, mixed>',
    'a' => 'array<array-key, mixed>',
    'b' => 'array<array-key, mixed>',
  ),
  'lapack::leastsquaresbysvd' => 
  array (
    0 => 'array<array-key, mixed>',
    'a' => 'array<array-key, mixed>',
    'b' => 'array<array-key, mixed>',
  ),
  'lapack::pseudoinverse' => 
  array (
    0 => 'array<array-key, mixed>',
    'a' => 'array<array-key, mixed>',
  ),
  'lapack::singularvalues' => 
  array (
    0 => 'array<array-key, mixed>',
    'a' => 'array<array-key, mixed>',
  ),
  'lapack::solvelinearequation' => 
  array (
    0 => 'array<array-key, mixed>',
    'a' => 'array<array-key, mixed>',
    'b' => 'array<array-key, mixed>',
  ),
  'layerobj::addfeature' => 
  array (
    0 => 'int',
    'shape' => 'shapeObj',
  ),
  'layerobj::applysld' => 
  array (
    0 => 'int',
    'sldxml' => 'string',
    'namedlayer' => 'string',
  ),
  'layerobj::applysldurl' => 
  array (
    0 => 'int',
    'sldurl' => 'string',
    'namedlayer' => 'string',
  ),
  'layerobj::clearprocessing' => 
  array (
    0 => 'void',
  ),
  'layerobj::close' => 
  array (
    0 => 'void',
  ),
  'layerobj::converttostring' => 
  array (
    0 => 'string',
  ),
  'layerobj::draw' => 
  array (
    0 => 'int',
    'image' => 'imageObj',
  ),
  'layerobj::drawquery' => 
  array (
    0 => 'int',
    'image' => 'imageObj',
  ),
  'layerobj::free' => 
  array (
    0 => 'void',
  ),
  'layerobj::generatesld' => 
  array (
    0 => 'string',
  ),
  'layerobj::getclass' => 
  array (
    0 => 'classObj',
    'classIndex' => 'int',
  ),
  'layerobj::getclassindex' => 
  array (
    0 => 'int',
    'shape' => 'mixed',
    'classgroup' => 'mixed',
    'numclasses' => 'mixed',
  ),
  'layerobj::getextent' => 
  array (
    0 => 'rectObj',
  ),
  'layerobj::getfilterstring' => 
  array (
    0 => 'null|string',
  ),
  'layerobj::getgridintersectioncoordinates' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'layerobj::getitems' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'layerobj::getmetadata' => 
  array (
    0 => 'int',
    'name' => 'string',
  ),
  'layerobj::getnumresults' => 
  array (
    0 => 'int',
  ),
  'layerobj::getprocessing' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'layerobj::getprojection' => 
  array (
    0 => 'string',
  ),
  'layerobj::getresult' => 
  array (
    0 => 'resultObj',
    'index' => 'int',
  ),
  'layerobj::getresultsbounds' => 
  array (
    0 => 'rectObj',
  ),
  'layerobj::getshape' => 
  array (
    0 => 'shapeObj',
    'result' => 'resultObj',
  ),
  'layerobj::getwmsfeatureinfourl' => 
  array (
    0 => 'string',
    'clickX' => 'int',
    'clickY' => 'int',
    'featureCount' => 'int',
    'infoFormat' => 'string',
  ),
  'layerobj::isvisible' => 
  array (
    0 => 'bool',
  ),
  'layerobj::moveclassdown' => 
  array (
    0 => 'int',
    'index' => 'int',
  ),
  'layerobj::moveclassup' => 
  array (
    0 => 'int',
    'index' => 'int',
  ),
  'layerobj::ms_newlayerobj' => 
  array (
    0 => 'layerObj',
    'map' => 'mapObj',
    'layer' => 'layerObj',
  ),
  'layerobj::nextshape' => 
  array (
    0 => 'shapeObj',
  ),
  'layerobj::open' => 
  array (
    0 => 'int',
  ),
  'layerobj::querybyattributes' => 
  array (
    0 => 'int',
    'qitem' => 'string',
    'qstring' => 'string',
    'mode' => 'int',
  ),
  'layerobj::querybyfeatures' => 
  array (
    0 => 'int',
    'slayer' => 'int',
  ),
  'layerobj::querybypoint' => 
  array (
    0 => 'int',
    'point' => 'pointObj',
    'mode' => 'int',
    'buffer' => 'float',
  ),
  'layerobj::querybyrect' => 
  array (
    0 => 'int',
    'rect' => 'rectObj',
  ),
  'layerobj::querybyshape' => 
  array (
    0 => 'int',
    'shape' => 'shapeObj',
  ),
  'layerobj::removeclass' => 
  array (
    0 => 'classObj|null',
    'index' => 'int',
  ),
  'layerobj::removemetadata' => 
  array (
    0 => 'int',
    'name' => 'string',
  ),
  'layerobj::set' => 
  array (
    0 => 'int',
    'property_name' => 'string',
    'new_value' => 'mixed',
  ),
  'layerobj::setconnectiontype' => 
  array (
    0 => 'int',
    'connectiontype' => 'int',
    'plugin_library' => 'string',
  ),
  'layerobj::setfilter' => 
  array (
    0 => 'int',
    'expression' => 'string',
  ),
  'layerobj::setmetadata' => 
  array (
    0 => 'int',
    'name' => 'string',
    'value' => 'string',
  ),
  'layerobj::setprojection' => 
  array (
    0 => 'int',
    'proj_params' => 'string',
  ),
  'layerobj::setwktprojection' => 
  array (
    0 => 'int',
    'proj_params' => 'string',
  ),
  'layerobj::updatefromstring' => 
  array (
    0 => 'int',
    'snippet' => 'string',
  ),
  'lcfirst' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'lcg_value' => 
  array (
    0 => 'float',
  ),
  'lchgrp' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'group' => 'int|string',
  ),
  'lchown' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'user' => 'int|string',
  ),
  'ldap_8859_to_t61' => 
  array (
    0 => 'string',
    'value' => 'string',
  ),
  'ldap_add' => 
  array (
    0 => 'bool',
    'ldap' => 'resource',
    'dn' => 'string',
    'entry' => 'array<array-key, mixed>',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_add_ext' => 
  array (
    0 => 'false|resource',
    'ldap' => 'resource',
    'dn' => 'string',
    'entry' => 'array<array-key, mixed>',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_bind' => 
  array (
    0 => 'bool',
    'ldap' => 'resource',
    'dn=' => 'null|string',
    'password=' => 'null|string',
  ),
  'ldap_bind_ext' => 
  array (
    0 => 'false|resource',
    'ldap' => 'resource',
    'dn=' => 'null|string',
    'password=' => 'null|string',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_close' => 
  array (
    0 => 'bool',
    'ldap' => 'resource',
  ),
  'ldap_compare' => 
  array (
    0 => 'bool|int',
    'ldap' => 'resource',
    'dn' => 'string',
    'attribute' => 'string',
    'value' => 'string',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_connect' => 
  array (
    0 => 'false|resource',
    'uri=' => 'null|string',
    'port=' => 'int',
    'wallet=' => 'string',
    'password=' => 'string',
    'auth_mode=' => 'int',
  ),
  'ldap_count_entries' => 
  array (
    0 => 'int',
    'ldap' => 'resource',
    'result' => 'resource',
  ),
  'ldap_delete' => 
  array (
    0 => 'bool',
    'ldap' => 'resource',
    'dn' => 'string',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_delete_ext' => 
  array (
    0 => 'false|resource',
    'ldap' => 'resource',
    'dn' => 'string',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_dn2ufn' => 
  array (
    0 => 'false|string',
    'dn' => 'string',
  ),
  'ldap_err2str' => 
  array (
    0 => 'string',
    'errno' => 'int',
  ),
  'ldap_errno' => 
  array (
    0 => 'int',
    'ldap' => 'resource',
  ),
  'ldap_error' => 
  array (
    0 => 'string',
    'ldap' => 'resource',
  ),
  'ldap_escape' => 
  array (
    0 => 'string',
    'value' => 'string',
    'ignore=' => 'string',
    'flags=' => 'int',
  ),
  'ldap_exop' => 
  array (
    0 => 'bool|resource',
    'ldap' => 'resource',
    'request_oid' => 'string',
    'request_data=' => 'null|string',
    'controls=' => 'array<array-key, mixed>|null',
    '&w_response_data=' => 'string',
    '&w_response_oid=' => 'string',
  ),
  'ldap_exop_passwd' => 
  array (
    0 => 'bool|string',
    'ldap' => 'resource',
    'user=' => 'string',
    'old_password=' => 'string',
    'new_password=' => 'string',
    '&w_controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_exop_refresh' => 
  array (
    0 => 'false|int',
    'ldap' => 'resource',
    'dn' => 'string',
    'ttl' => 'int',
  ),
  'ldap_exop_whoami' => 
  array (
    0 => 'false|string',
    'ldap' => 'resource',
  ),
  'ldap_explode_dn' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'dn' => 'string',
    'with_attrib' => 'int',
  ),
  'ldap_first_attribute' => 
  array (
    0 => 'false|string',
    'ldap' => 'resource',
    'entry' => 'resource',
  ),
  'ldap_first_entry' => 
  array (
    0 => 'false|resource',
    'ldap' => 'resource',
    'result' => 'resource',
  ),
  'ldap_first_reference' => 
  array (
    0 => 'false|resource',
    'ldap' => 'resource',
    'result' => 'resource',
  ),
  'ldap_free_result' => 
  array (
    0 => 'bool',
    'ldap' => 'resource',
  ),
  'ldap_get_attributes' => 
  array (
    0 => 'array<array-key, mixed>',
    'ldap' => 'resource',
    'entry' => 'resource',
  ),
  'ldap_get_dn' => 
  array (
    0 => 'false|string',
    'ldap' => 'resource',
    'entry' => 'resource',
  ),
  'ldap_get_entries' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'ldap' => 'resource',
    'result' => 'resource',
  ),
  'ldap_get_option' => 
  array (
    0 => 'bool',
    'ldap' => 'resource',
    'option' => 'int',
    '&w_value=' => 'array<array-key, mixed>|int|string',
  ),
  'ldap_get_values' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'ldap' => 'resource',
    'entry' => 'resource',
    'attribute' => 'string',
  ),
  'ldap_get_values_len' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'ldap' => 'resource',
    'entry' => 'resource',
    'attribute' => 'string',
  ),
  'ldap_list' => 
  array (
    0 => 'false|resource',
    'ldap' => 'array<array-key, mixed>|resource',
    'base' => 'array<array-key, mixed>|string',
    'filter' => 'array<array-key, mixed>|string',
    'attributes=' => 'array<array-key, mixed>',
    'attributes_only=' => 'int',
    'sizelimit=' => 'int',
    'timelimit=' => 'int',
    'deref=' => 'int',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_mod_add' => 
  array (
    0 => 'bool',
    'ldap' => 'resource',
    'dn' => 'string',
    'entry' => 'array<array-key, mixed>',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_mod_add_ext' => 
  array (
    0 => 'false|resource',
    'ldap' => 'resource',
    'dn' => 'string',
    'entry' => 'array<array-key, mixed>',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_mod_del' => 
  array (
    0 => 'bool',
    'ldap' => 'resource',
    'dn' => 'string',
    'entry' => 'array<array-key, mixed>',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_mod_del_ext' => 
  array (
    0 => 'false|resource',
    'ldap' => 'resource',
    'dn' => 'string',
    'entry' => 'array<array-key, mixed>',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_mod_replace' => 
  array (
    0 => 'bool',
    'ldap' => 'resource',
    'dn' => 'string',
    'entry' => 'array<array-key, mixed>',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_mod_replace_ext' => 
  array (
    0 => 'false|resource',
    'ldap' => 'resource',
    'dn' => 'string',
    'entry' => 'array<array-key, mixed>',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_modify' => 
  array (
    0 => 'bool',
    'ldap' => 'resource',
    'dn' => 'string',
    'entry' => 'array<array-key, mixed>',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_modify_batch' => 
  array (
    0 => 'bool',
    'ldap' => 'resource',
    'dn' => 'string',
    'modifications_info' => 'array<array-key, mixed>',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_next_attribute' => 
  array (
    0 => 'false|string',
    'ldap' => 'resource',
    'entry' => 'resource',
  ),
  'ldap_next_entry' => 
  array (
    0 => 'false|resource',
    'ldap' => 'resource',
    'entry' => 'resource',
  ),
  'ldap_next_reference' => 
  array (
    0 => 'false|resource',
    'ldap' => 'resource',
    'entry' => 'resource',
  ),
  'ldap_parse_exop' => 
  array (
    0 => 'bool',
    'ldap' => 'resource',
    'result' => 'resource',
    '&w_response_data=' => 'string',
    '&w_response_oid=' => 'string',
  ),
  'ldap_parse_reference' => 
  array (
    0 => 'bool',
    'ldap' => 'resource',
    'entry' => 'resource',
    '&w_referrals' => 'array<array-key, mixed>',
  ),
  'ldap_parse_result' => 
  array (
    0 => 'bool',
    'ldap' => 'resource',
    'result' => 'resource',
    '&w_error_code' => 'int',
    '&w_matched_dn=' => 'string',
    '&w_error_message=' => 'string',
    '&w_referrals=' => 'array<array-key, mixed>',
    '&w_controls=' => 'array<array-key, mixed>',
  ),
  'ldap_read' => 
  array (
    0 => 'false|resource',
    'ldap' => 'array<array-key, mixed>|resource',
    'base' => 'array<array-key, mixed>|string',
    'filter' => 'array<array-key, mixed>|string',
    'attributes=' => 'array<array-key, mixed>',
    'attributes_only=' => 'int',
    'sizelimit=' => 'int',
    'timelimit=' => 'int',
    'deref=' => 'int',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_rename' => 
  array (
    0 => 'bool',
    'ldap' => 'resource',
    'dn' => 'string',
    'new_rdn' => 'string',
    'new_parent' => 'string',
    'delete_old_rdn' => 'bool',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_rename_ext' => 
  array (
    0 => 'false|resource',
    'ldap' => 'resource',
    'dn' => 'string',
    'new_rdn' => 'string',
    'new_parent' => 'string',
    'delete_old_rdn' => 'bool',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_sasl_bind' => 
  array (
    0 => 'bool',
    'ldap' => 'resource',
    'dn=' => 'null|string',
    'password=' => 'null|string',
    'mech=' => 'null|string',
    'realm=' => 'null|string',
    'authc_id=' => 'null|string',
    'authz_id=' => 'null|string',
    'props=' => 'null|string',
  ),
  'ldap_search' => 
  array (
    0 => 'array<array-key, resource>|false|resource',
    'ldap' => 'array<array-key, resource>|resource',
    'base' => 'array<array-key, mixed>|string',
    'filter' => 'array<array-key, mixed>|string',
    'attributes=' => 'array<array-key, mixed>',
    'attributes_only=' => 'int',
    'sizelimit=' => 'int',
    'timelimit=' => 'int',
    'deref=' => 'int',
    'controls=' => 'array<array-key, mixed>|null',
  ),
  'ldap_set_option' => 
  array (
    0 => 'bool',
    'ldap' => 'null|resource',
    'option' => 'int',
    'value' => 'mixed',
  ),
  'ldap_set_rebind_proc' => 
  array (
    0 => 'bool',
    'ldap' => 'resource',
    'callback' => 'callable|null',
  ),
  'ldap_start_tls' => 
  array (
    0 => 'bool',
    'ldap' => 'resource',
  ),
  'ldap_t61_to_8859' => 
  array (
    0 => 'string',
    'value' => 'string',
  ),
  'ldap_unbind' => 
  array (
    0 => 'bool',
    'ldap' => 'resource',
  ),
  'leak' => 
  array (
    0 => 'mixed',
    'num_bytes' => 'int',
  ),
  'leak_variable' => 
  array (
    0 => 'mixed',
    'variable' => 'mixed',
    'leak_data' => 'bool',
  ),
  'legendobj::converttostring' => 
  array (
    0 => 'string',
  ),
  'legendobj::free' => 
  array (
    0 => 'void',
  ),
  'legendobj::set' => 
  array (
    0 => 'int',
    'property_name' => 'string',
    'new_value' => 'mixed',
  ),
  'legendobj::updatefromstring' => 
  array (
    0 => 'int',
    'snippet' => 'string',
  ),
  'lengthexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'lengthexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'lengthexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'lengthexception::getcode' => 
  array (
    0 => 'int',
  ),
  'lengthexception::getfile' => 
  array (
    0 => 'string',
  ),
  'lengthexception::getline' => 
  array (
    0 => 'int',
  ),
  'lengthexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'lengthexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'lengthexception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'lengthexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'leveldb::__construct' => 
  array (
    0 => 'void',
    'name' => 'string',
    'options=' => 'array<array-key, mixed>',
    'read_options=' => 'array<array-key, mixed>',
    'write_options=' => 'array<array-key, mixed>',
  ),
  'leveldb::close' => 
  array (
    0 => 'mixed',
  ),
  'leveldb::compactrange' => 
  array (
    0 => 'mixed',
    'start' => 'mixed',
    'limit' => 'mixed',
  ),
  'leveldb::delete' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'write_options=' => 'array<array-key, mixed>',
  ),
  'leveldb::destroy' => 
  array (
    0 => 'mixed',
    'name' => 'mixed',
    'options=' => 'array<array-key, mixed>',
  ),
  'leveldb::get' => 
  array (
    0 => 'bool|string',
    'key' => 'string',
    'read_options=' => 'array<array-key, mixed>',
  ),
  'leveldb::getapproximatesizes' => 
  array (
    0 => 'mixed',
    'start' => 'mixed',
    'limit' => 'mixed',
  ),
  'leveldb::getiterator' => 
  array (
    0 => 'LevelDBIterator',
    'options=' => 'array<array-key, mixed>',
  ),
  'leveldb::getproperty' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'leveldb::getsnapshot' => 
  array (
    0 => 'LevelDBSnapshot',
  ),
  'leveldb::put' => 
  array (
    0 => 'mixed',
    'key' => 'string',
    'value' => 'string',
    'write_options=' => 'array<array-key, mixed>',
  ),
  'leveldb::repair' => 
  array (
    0 => 'mixed',
    'name' => 'mixed',
    'options=' => 'array<array-key, mixed>',
  ),
  'leveldb::set' => 
  array (
    0 => 'mixed',
    'key' => 'string',
    'value' => 'string',
    'write_options=' => 'array<array-key, mixed>',
  ),
  'leveldb::write' => 
  array (
    0 => 'mixed',
    'batch' => 'LevelDBWriteBatch',
    'write_options=' => 'array<array-key, mixed>',
  ),
  'leveldbiterator::__construct' => 
  array (
    0 => 'void',
    'db' => 'LevelDB',
    'read_options=' => 'array<array-key, mixed>',
  ),
  'leveldbiterator::current' => 
  array (
    0 => 'mixed',
  ),
  'leveldbiterator::destroy' => 
  array (
    0 => 'mixed',
  ),
  'leveldbiterator::geterror' => 
  array (
    0 => 'mixed',
  ),
  'leveldbiterator::key' => 
  array (
    0 => 'int|string',
  ),
  'leveldbiterator::last' => 
  array (
    0 => 'mixed',
  ),
  'leveldbiterator::next' => 
  array (
    0 => 'void',
  ),
  'leveldbiterator::prev' => 
  array (
    0 => 'mixed',
  ),
  'leveldbiterator::rewind' => 
  array (
    0 => 'void',
  ),
  'leveldbiterator::seek' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'leveldbiterator::valid' => 
  array (
    0 => 'bool',
  ),
  'leveldbsnapshot::__construct' => 
  array (
    0 => 'void',
    'db' => 'LevelDB',
  ),
  'leveldbsnapshot::release' => 
  array (
    0 => 'mixed',
  ),
  'leveldbwritebatch::__construct' => 
  array (
    0 => 'void',
    'name' => 'mixed',
    'options=' => 'array<array-key, mixed>',
    'read_options=' => 'array<array-key, mixed>',
    'write_options=' => 'array<array-key, mixed>',
  ),
  'leveldbwritebatch::clear' => 
  array (
    0 => 'mixed',
  ),
  'leveldbwritebatch::delete' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'write_options=' => 'array<array-key, mixed>',
  ),
  'leveldbwritebatch::put' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
    'write_options=' => 'array<array-key, mixed>',
  ),
  'leveldbwritebatch::set' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
    'write_options=' => 'array<array-key, mixed>',
  ),
  'levenshtein' => 
  array (
    0 => 'int',
    'string1' => 'string',
    'string2' => 'string',
    'insertion_cost=' => 'int',
    'replacement_cost=' => 'int',
    'deletion_cost=' => 'int',
  ),
  'levenshtein\'1' => 
  array (
    0 => 'int',
    'string1' => 'string',
    'string2' => 'string',
    'insertion_cost' => 'int',
    'repetition_cost' => 'int',
    'deletion_cost' => 'int',
  ),
  'libxml_clear_errors' => 
  array (
    0 => 'void',
  ),
  'libxml_disable_entity_loader' => 
  array (
    0 => 'bool',
    'disable=' => 'bool',
  ),
  'libxml_get_errors' => 
  array (
    0 => 'list<LibXMLError>',
  ),
  'libxml_get_last_error' => 
  array (
    0 => 'LibXMLError|false',
  ),
  'libxml_set_external_entity_loader' => 
  array (
    0 => 'bool',
    'resolver_function' => 'callable(string, string, array{directory: null|string, extSubSystem: null|string, extSubURI: null|string, intSubName: null|string}):(null|resource|string)|null',
  ),
  'libxml_set_streams_context' => 
  array (
    0 => 'void',
    'context' => 'resource',
  ),
  'libxml_use_internal_errors' => 
  array (
    0 => 'bool',
    'use_errors=' => 'bool|null',
  ),
  'limititerator::__construct' => 
  array (
    0 => 'void',
    'iterator' => 'Iterator',
    'offset=' => 'int',
    'limit=' => 'int',
  ),
  'limititerator::current' => 
  array (
    0 => 'mixed',
  ),
  'limititerator::getinneriterator' => 
  array (
    0 => 'Iterator',
  ),
  'limititerator::getposition' => 
  array (
    0 => 'int',
  ),
  'limititerator::key' => 
  array (
    0 => 'mixed',
  ),
  'limititerator::next' => 
  array (
    0 => 'void',
  ),
  'limititerator::rewind' => 
  array (
    0 => 'void',
  ),
  'limititerator::seek' => 
  array (
    0 => 'int',
    'offset' => 'int',
  ),
  'limititerator::valid' => 
  array (
    0 => 'bool',
  ),
  'lineobj::__construct' => 
  array (
    0 => 'void',
  ),
  'lineobj::add' => 
  array (
    0 => 'int',
    'point' => 'pointObj',
  ),
  'lineobj::addxy' => 
  array (
    0 => 'int',
    'x' => 'float',
    'y' => 'float',
    'm' => 'float',
  ),
  'lineobj::addxyz' => 
  array (
    0 => 'int',
    'x' => 'float',
    'y' => 'float',
    'z' => 'float',
    'm' => 'float',
  ),
  'lineobj::ms_newlineobj' => 
  array (
    0 => 'lineObj',
  ),
  'lineobj::point' => 
  array (
    0 => 'pointObj',
    'i' => 'int',
  ),
  'lineobj::project' => 
  array (
    0 => 'int',
    'in' => 'projectionObj',
    'out' => 'projectionObj',
  ),
  'link' => 
  array (
    0 => 'bool',
    'target' => 'string',
    'link' => 'string',
  ),
  'linkinfo' => 
  array (
    0 => 'false|int',
    'path' => 'string',
  ),
  'litespeed_request_headers' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'litespeed_response_headers' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'locale::acceptfromhttp' => 
  array (
    0 => 'false|string',
    'header' => 'string',
  ),
  'locale::canonicalize' => 
  array (
    0 => 'null|string',
    'locale' => 'string',
  ),
  'locale::composelocale' => 
  array (
    0 => 'string',
    'subtags' => 'array<array-key, mixed>',
  ),
  'locale::filtermatches' => 
  array (
    0 => 'bool|null',
    'languageTag' => 'string',
    'locale' => 'string',
    'canonicalize=' => 'bool',
  ),
  'locale::getallvariants' => 
  array (
    0 => 'array<array-key, mixed>',
    'locale' => 'string',
  ),
  'locale::getdefault' => 
  array (
    0 => 'string',
  ),
  'locale::getdisplaylanguage' => 
  array (
    0 => 'string',
    'locale' => 'string',
    'displayLocale=' => 'null|string',
  ),
  'locale::getdisplayname' => 
  array (
    0 => 'string',
    'locale' => 'string',
    'displayLocale=' => 'null|string',
  ),
  'locale::getdisplayregion' => 
  array (
    0 => 'string',
    'locale' => 'string',
    'displayLocale=' => 'null|string',
  ),
  'locale::getdisplayscript' => 
  array (
    0 => 'string',
    'locale' => 'string',
    'displayLocale=' => 'null|string',
  ),
  'locale::getdisplayvariant' => 
  array (
    0 => 'string',
    'locale' => 'string',
    'displayLocale=' => 'null|string',
  ),
  'locale::getkeywords' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'locale' => 'string',
  ),
  'locale::getprimarylanguage' => 
  array (
    0 => 'string',
    'locale' => 'string',
  ),
  'locale::getregion' => 
  array (
    0 => 'string',
    'locale' => 'string',
  ),
  'locale::getscript' => 
  array (
    0 => 'string',
    'locale' => 'string',
  ),
  'locale::lookup' => 
  array (
    0 => 'null|string',
    'languageTag' => 'array<array-key, mixed>',
    'locale' => 'string',
    'canonicalize=' => 'bool',
    'defaultLocale=' => 'null|string',
  ),
  'locale::parselocale' => 
  array (
    0 => 'array<array-key, mixed>',
    'locale' => 'string',
  ),
  'locale::setdefault' => 
  array (
    0 => 'bool',
    'locale' => 'string',
  ),
  'locale_accept_from_http' => 
  array (
    0 => 'false|string',
    'header' => 'string',
  ),
  'locale_canonicalize' => 
  array (
    0 => 'null|string',
    'locale' => 'string',
  ),
  'locale_compose' => 
  array (
    0 => 'false|string',
    'subtags' => 'array<array-key, mixed>',
  ),
  'locale_filter_matches' => 
  array (
    0 => 'bool|null',
    'languageTag' => 'string',
    'locale' => 'string',
    'canonicalize=' => 'bool',
  ),
  'locale_get_all_variants' => 
  array (
    0 => 'array<array-key, mixed>|null',
    'locale' => 'string',
  ),
  'locale_get_default' => 
  array (
    0 => 'string',
  ),
  'locale_get_display_language' => 
  array (
    0 => 'string',
    'locale' => 'string',
    'displayLocale=' => 'null|string',
  ),
  'locale_get_display_name' => 
  array (
    0 => 'string',
    'locale' => 'string',
    'displayLocale=' => 'null|string',
  ),
  'locale_get_display_region' => 
  array (
    0 => 'string',
    'locale' => 'string',
    'displayLocale=' => 'null|string',
  ),
  'locale_get_display_script' => 
  array (
    0 => 'string',
    'locale' => 'string',
    'displayLocale=' => 'null|string',
  ),
  'locale_get_display_variant' => 
  array (
    0 => 'string',
    'locale' => 'string',
    'displayLocale=' => 'null|string',
  ),
  'locale_get_keywords' => 
  array (
    0 => 'array<array-key, mixed>|false|null',
    'locale' => 'string',
  ),
  'locale_get_primary_language' => 
  array (
    0 => 'null|string',
    'locale' => 'string',
  ),
  'locale_get_region' => 
  array (
    0 => 'null|string',
    'locale' => 'string',
  ),
  'locale_get_script' => 
  array (
    0 => 'null|string',
    'locale' => 'string',
  ),
  'locale_lookup' => 
  array (
    0 => 'null|string',
    'languageTag' => 'array<array-key, mixed>',
    'locale' => 'string',
    'canonicalize=' => 'bool',
    'defaultLocale=' => 'null|string',
  ),
  'locale_parse' => 
  array (
    0 => 'array<array-key, mixed>|null',
    'locale' => 'string',
  ),
  'locale_set_default' => 
  array (
    0 => 'bool',
    'locale' => 'string',
  ),
  'localeconv' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'localtime' => 
  array (
    0 => 'array<array-key, mixed>',
    'timestamp=' => 'int|null',
    'associative=' => 'bool',
  ),
  'log' => 
  array (
    0 => 'float',
    'num' => 'float',
    'base=' => 'float',
  ),
  'log10' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'log1p' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'logicexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'logicexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'logicexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'logicexception::getcode' => 
  array (
    0 => 'int',
  ),
  'logicexception::getfile' => 
  array (
    0 => 'string',
  ),
  'logicexception::getline' => 
  array (
    0 => 'int',
  ),
  'logicexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'logicexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'logicexception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'logicexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'long2ip' => 
  array (
    0 => 'string',
    'ip' => 'int',
  ),
  'lstat' => 
  array (
    0 => 'array{0: int, 10: int, 11: int, 12: int, 1: int, 2: int, 3: int, 4: int, 5: int, 6: int, 7: int, 8: int, 9: int, atime: int, blksize: int, blocks: int, ctime: int, dev: int, gid: int, ino: int, mode: int, mtime: int, nlink: int, rdev: int, size: int, uid: int}|false',
    'filename' => 'string',
  ),
  'ltrim' => 
  array (
    0 => 'string',
    'string' => 'string',
    'characters=' => 'string',
  ),
  'lua::__call' => 
  array (
    0 => 'mixed',
    'lua_func' => 'callable',
    'args=' => 'array<array-key, mixed>',
    'use_self=' => 'int',
  ),
  'lua::__construct' => 
  array (
    0 => 'void',
    'lua_script_file' => 'string',
  ),
  'lua::assign' => 
  array (
    0 => 'Lua|null',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'lua::call' => 
  array (
    0 => 'mixed',
    'lua_func' => 'callable',
    'args=' => 'array<array-key, mixed>',
    'use_self=' => 'int',
  ),
  'lua::eval' => 
  array (
    0 => 'mixed',
    'statements' => 'string',
  ),
  'lua::getversion' => 
  array (
    0 => 'string',
  ),
  'lua::include' => 
  array (
    0 => 'mixed',
    'file' => 'string',
  ),
  'lua::registercallback' => 
  array (
    0 => 'Lua|false|null',
    'name' => 'string',
    'function' => 'callable',
  ),
  'luaclosure::__invoke' => 
  array (
    0 => 'void',
    'arg' => 'mixed',
    '...args=' => 'mixed',
  ),
  'lzf_compress' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'lzf_decompress' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'lzf_optimized_for' => 
  array (
    0 => 'int',
  ),
  'magic_quotes_runtime' => 
  array (
    0 => 'bool',
    'new_setting' => 'bool',
  ),
  'mail' => 
  array (
    0 => 'bool',
    'to' => 'string',
    'subject' => 'string',
    'message' => 'string',
    'additional_headers=' => 'array<array-key, mixed>|string',
    'additional_params=' => 'string',
  ),
  'mailparse_determine_best_xfer_encoding' => 
  array (
    0 => 'string',
    'fp' => 'resource',
  ),
  'mailparse_msg_create' => 
  array (
    0 => 'resource',
  ),
  'mailparse_msg_extract_part' => 
  array (
    0 => 'void',
    'mimemail' => 'resource',
    'msgbody' => 'string',
    'callbackfunc=' => 'callable',
  ),
  'mailparse_msg_extract_part_file' => 
  array (
    0 => 'string',
    'mimemail' => 'resource',
    'filename' => 'mixed',
    'callbackfunc=' => 'callable',
  ),
  'mailparse_msg_extract_whole_part_file' => 
  array (
    0 => 'string',
    'mimemail' => 'resource',
    'filename' => 'string',
    'callbackfunc=' => 'callable',
  ),
  'mailparse_msg_free' => 
  array (
    0 => 'bool',
    'mimemail' => 'resource',
  ),
  'mailparse_msg_get_part' => 
  array (
    0 => 'resource',
    'mimemail' => 'resource',
    'mimesection' => 'string',
  ),
  'mailparse_msg_get_part_data' => 
  array (
    0 => 'array<array-key, mixed>',
    'mimemail' => 'resource',
  ),
  'mailparse_msg_get_structure' => 
  array (
    0 => 'array<array-key, mixed>',
    'mimemail' => 'resource',
  ),
  'mailparse_msg_parse' => 
  array (
    0 => 'bool',
    'mimemail' => 'resource',
    'data' => 'string',
  ),
  'mailparse_msg_parse_file' => 
  array (
    0 => 'false|resource',
    'filename' => 'string',
  ),
  'mailparse_rfc822_parse_addresses' => 
  array (
    0 => 'array<array-key, mixed>',
    'addresses' => 'string',
  ),
  'mailparse_stream_encode' => 
  array (
    0 => 'bool',
    'sourcefp' => 'resource',
    'destfp' => 'resource',
    'encoding' => 'string',
  ),
  'mailparse_uudecode_all' => 
  array (
    0 => 'array<array-key, mixed>',
    'fp' => 'resource',
  ),
  'mapobj::__construct' => 
  array (
    0 => 'void',
    'map_file_name' => 'string',
    'new_map_path' => 'string',
  ),
  'mapobj::appendoutputformat' => 
  array (
    0 => 'int',
    'outputFormat' => 'outputformatObj',
  ),
  'mapobj::applyconfigoptions' => 
  array (
    0 => 'int',
  ),
  'mapobj::applysld' => 
  array (
    0 => 'int',
    'sldxml' => 'string',
  ),
  'mapobj::applysldurl' => 
  array (
    0 => 'int',
    'sldurl' => 'string',
  ),
  'mapobj::converttostring' => 
  array (
    0 => 'string',
  ),
  'mapobj::draw' => 
  array (
    0 => 'imageObj|null',
  ),
  'mapobj::drawlabelcache' => 
  array (
    0 => 'int',
    'image' => 'imageObj',
  ),
  'mapobj::drawlegend' => 
  array (
    0 => 'imageObj',
  ),
  'mapobj::drawquery' => 
  array (
    0 => 'imageObj|null',
  ),
  'mapobj::drawreferencemap' => 
  array (
    0 => 'imageObj',
  ),
  'mapobj::drawscalebar' => 
  array (
    0 => 'imageObj',
  ),
  'mapobj::embedlegend' => 
  array (
    0 => 'int',
    'image' => 'imageObj',
  ),
  'mapobj::embedscalebar' => 
  array (
    0 => 'int',
    'image' => 'imageObj',
  ),
  'mapobj::free' => 
  array (
    0 => 'void',
  ),
  'mapobj::generatesld' => 
  array (
    0 => 'string',
  ),
  'mapobj::getallgroupnames' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mapobj::getalllayernames' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mapobj::getcolorbyindex' => 
  array (
    0 => 'colorObj',
    'iCloIndex' => 'int',
  ),
  'mapobj::getconfigoption' => 
  array (
    0 => 'string',
    'key' => 'string',
  ),
  'mapobj::getlabel' => 
  array (
    0 => 'labelcacheMemberObj',
    'index' => 'int',
  ),
  'mapobj::getlayer' => 
  array (
    0 => 'layerObj',
    'index' => 'int',
  ),
  'mapobj::getlayerbyname' => 
  array (
    0 => 'layerObj',
    'layer_name' => 'string',
  ),
  'mapobj::getlayersdrawingorder' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mapobj::getlayersindexbygroup' => 
  array (
    0 => 'array<array-key, mixed>',
    'groupname' => 'string',
  ),
  'mapobj::getmetadata' => 
  array (
    0 => 'int',
    'name' => 'string',
  ),
  'mapobj::getnumsymbols' => 
  array (
    0 => 'int',
  ),
  'mapobj::getoutputformat' => 
  array (
    0 => 'null|outputformatObj',
    'index' => 'int',
  ),
  'mapobj::getprojection' => 
  array (
    0 => 'string',
  ),
  'mapobj::getsymbolbyname' => 
  array (
    0 => 'int',
    'symbol_name' => 'string',
  ),
  'mapobj::getsymbolobjectbyid' => 
  array (
    0 => 'symbolObj',
    'symbolid' => 'int',
  ),
  'mapobj::loadmapcontext' => 
  array (
    0 => 'int',
    'filename' => 'string',
    'unique_layer_name' => 'bool',
  ),
  'mapobj::loadowsparameters' => 
  array (
    0 => 'int',
    'request' => 'OwsrequestObj',
    'version' => 'string',
  ),
  'mapobj::movelayerdown' => 
  array (
    0 => 'int',
    'layerindex' => 'int',
  ),
  'mapobj::movelayerup' => 
  array (
    0 => 'int',
    'layerindex' => 'int',
  ),
  'mapobj::ms_newmapobjfromstring' => 
  array (
    0 => 'mapObj',
    'map_file_string' => 'string',
    'new_map_path' => 'string',
  ),
  'mapobj::offsetextent' => 
  array (
    0 => 'int',
    'x' => 'float',
    'y' => 'float',
  ),
  'mapobj::owsdispatch' => 
  array (
    0 => 'int',
    'request' => 'OwsrequestObj',
  ),
  'mapobj::prepareimage' => 
  array (
    0 => 'imageObj',
  ),
  'mapobj::preparequery' => 
  array (
    0 => 'void',
  ),
  'mapobj::processlegendtemplate' => 
  array (
    0 => 'string',
    'params' => 'array<array-key, mixed>',
  ),
  'mapobj::processquerytemplate' => 
  array (
    0 => 'string',
    'params' => 'array<array-key, mixed>',
    'generateimages' => 'bool',
  ),
  'mapobj::processtemplate' => 
  array (
    0 => 'string',
    'params' => 'array<array-key, mixed>',
    'generateimages' => 'bool',
  ),
  'mapobj::querybyfeatures' => 
  array (
    0 => 'int',
    'slayer' => 'int',
  ),
  'mapobj::querybyindex' => 
  array (
    0 => 'int',
    'layerindex' => 'mixed',
    'tileindex' => 'mixed',
    'shapeindex' => 'mixed',
    'addtoquery' => 'mixed',
  ),
  'mapobj::querybypoint' => 
  array (
    0 => 'int',
    'point' => 'pointObj',
    'mode' => 'int',
    'buffer' => 'float',
  ),
  'mapobj::querybyrect' => 
  array (
    0 => 'int',
    'rect' => 'rectObj',
  ),
  'mapobj::querybyshape' => 
  array (
    0 => 'int',
    'shape' => 'shapeObj',
  ),
  'mapobj::removelayer' => 
  array (
    0 => 'layerObj',
    'nIndex' => 'int',
  ),
  'mapobj::removemetadata' => 
  array (
    0 => 'int',
    'name' => 'string',
  ),
  'mapobj::removeoutputformat' => 
  array (
    0 => 'int',
    'name' => 'string',
  ),
  'mapobj::save' => 
  array (
    0 => 'int',
    'filename' => 'string',
  ),
  'mapobj::savemapcontext' => 
  array (
    0 => 'int',
    'filename' => 'string',
  ),
  'mapobj::savequery' => 
  array (
    0 => 'int',
    'filename' => 'string',
    'results' => 'int',
  ),
  'mapobj::scaleextent' => 
  array (
    0 => 'int',
    'zoomfactor' => 'float',
    'minscaledenom' => 'float',
    'maxscaledenom' => 'float',
  ),
  'mapobj::selectoutputformat' => 
  array (
    0 => 'int',
    'type' => 'string',
  ),
  'mapobj::set' => 
  array (
    0 => 'int',
    'property_name' => 'string',
    'new_value' => 'mixed',
  ),
  'mapobj::setcenter' => 
  array (
    0 => 'int',
    'center' => 'pointObj',
  ),
  'mapobj::setconfigoption' => 
  array (
    0 => 'int',
    'key' => 'string',
    'value' => 'string',
  ),
  'mapobj::setextent' => 
  array (
    0 => 'void',
    'minx' => 'float',
    'miny' => 'float',
    'maxx' => 'float',
    'maxy' => 'float',
  ),
  'mapobj::setfontset' => 
  array (
    0 => 'int',
    'fileName' => 'string',
  ),
  'mapobj::setmetadata' => 
  array (
    0 => 'int',
    'name' => 'string',
    'value' => 'string',
  ),
  'mapobj::setprojection' => 
  array (
    0 => 'int',
    'proj_params' => 'string',
    'bSetUnitsAndExtents' => 'bool',
  ),
  'mapobj::setrotation' => 
  array (
    0 => 'int',
    'rotation_angle' => 'float',
  ),
  'mapobj::setsize' => 
  array (
    0 => 'int',
    'width' => 'int',
    'height' => 'int',
  ),
  'mapobj::setsymbolset' => 
  array (
    0 => 'int',
    'fileName' => 'string',
  ),
  'mapobj::setwktprojection' => 
  array (
    0 => 'int',
    'proj_params' => 'string',
    'bSetUnitsAndExtents' => 'bool',
  ),
  'mapobj::zoompoint' => 
  array (
    0 => 'int',
    'nZoomFactor' => 'int',
    'oPixelPos' => 'pointObj',
    'nImageWidth' => 'int',
    'nImageHeight' => 'int',
    'oGeorefExt' => 'rectObj',
  ),
  'mapobj::zoomrectangle' => 
  array (
    0 => 'int',
    'oPixelExt' => 'rectObj',
    'nImageWidth' => 'int',
    'nImageHeight' => 'int',
    'oGeorefExt' => 'rectObj',
  ),
  'mapobj::zoomscale' => 
  array (
    0 => 'int',
    'nScaleDenom' => 'float',
    'oPixelPos' => 'pointObj',
    'nImageWidth' => 'int',
    'nImageHeight' => 'int',
    'oGeorefExt' => 'rectObj',
    'oMaxGeorefExt' => 'rectObj',
  ),
  'max' => 
  array (
    0 => 'mixed',
    'value' => 'non-empty-array<array-key, mixed>',
  ),
  'max\'1' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
    'values' => 'mixed',
    '...args=' => 'mixed',
  ),
  'mb_check_encoding' => 
  array (
    0 => 'bool',
    'value=' => 'array<array-key, mixed>|null|string',
    'encoding=' => 'null|string',
  ),
  'mb_chr' => 
  array (
    0 => 'false|non-empty-string',
    'codepoint' => 'int',
    'encoding=' => 'null|string',
  ),
  'mb_convert_case' => 
  array (
    0 => 'string',
    'string' => 'string',
    'mode' => 'int',
    'encoding=' => 'null|string',
  ),
  'mb_convert_encoding' => 
  array (
    0 => 'false|string',
    'string' => 'string',
    'to_encoding' => 'string',
    'from_encoding=' => 'array<array-key, mixed>|null|string',
  ),
  'mb_convert_encoding\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'string' => 'array<array-key, mixed>',
    'to_encoding' => 'string',
    'from_encoding=' => 'array<array-key, mixed>|null|string',
  ),
  'mb_convert_kana' => 
  array (
    0 => 'string',
    'string' => 'string',
    'mode=' => 'string',
    'encoding=' => 'null|string',
  ),
  'mb_convert_variables' => 
  array (
    0 => 'false|string',
    'to_encoding' => 'string',
    'from_encoding' => 'array<array-key, mixed>|string',
    '&var' => 'array<array-key, mixed>|object|string',
    '...&vars=' => 'array<array-key, mixed>|object|string',
  ),
  'mb_decode_mimeheader' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'mb_decode_numericentity' => 
  array (
    0 => 'string',
    'string' => 'string',
    'map' => 'array<array-key, mixed>',
    'encoding=' => 'null|string',
  ),
  'mb_detect_encoding' => 
  array (
    0 => 'false|string',
    'string' => 'string',
    'encodings=' => 'array<array-key, mixed>|null|string',
    'strict=' => 'bool',
  ),
  'mb_detect_order' => 
  array (
    0 => 'bool|list<string>',
    'encoding=' => 'array<array-key, mixed>|null|string',
  ),
  'mb_encode_mimeheader' => 
  array (
    0 => 'string',
    'string' => 'string',
    'charset=' => 'null|string',
    'transfer_encoding=' => 'null|string',
    'newline=' => 'string',
    'indent=' => 'int',
  ),
  'mb_encode_numericentity' => 
  array (
    0 => 'string',
    'string' => 'string',
    'map' => 'array<array-key, mixed>',
    'encoding=' => 'null|string',
    'hex=' => 'bool',
  ),
  'mb_encoding_aliases' => 
  array (
    0 => 'list<string>',
    'encoding' => 'string',
  ),
  'mb_ereg' => 
  array (
    0 => 'bool',
    'pattern' => 'string',
    'string' => 'string',
    '&w_matches=' => 'array<array-key, mixed>|null',
  ),
  'mb_ereg_match' => 
  array (
    0 => 'bool',
    'pattern' => 'string',
    'string' => 'string',
    'options=' => 'null|string',
  ),
  'mb_ereg_replace' => 
  array (
    0 => 'false|null|string',
    'pattern' => 'string',
    'replacement' => 'string',
    'string' => 'string',
    'options=' => 'null|string',
  ),
  'mb_ereg_replace_callback' => 
  array (
    0 => 'false|null|string',
    'pattern' => 'string',
    'callback' => 'callable',
    'string' => 'string',
    'options=' => 'null|string',
  ),
  'mb_ereg_search' => 
  array (
    0 => 'bool',
    'pattern=' => 'null|string',
    'options=' => 'null|string',
  ),
  'mb_ereg_search_getpos' => 
  array (
    0 => 'int',
  ),
  'mb_ereg_search_getregs' => 
  array (
    0 => 'array<array-key, string>|false',
  ),
  'mb_ereg_search_init' => 
  array (
    0 => 'bool',
    'string' => 'string',
    'pattern=' => 'null|string',
    'options=' => 'null|string',
  ),
  'mb_ereg_search_pos' => 
  array (
    0 => 'array<array-key, int>|false',
    'pattern=' => 'null|string',
    'options=' => 'null|string',
  ),
  'mb_ereg_search_regs' => 
  array (
    0 => 'array<array-key, string>|false',
    'pattern=' => 'null|string',
    'options=' => 'null|string',
  ),
  'mb_ereg_search_setpos' => 
  array (
    0 => 'bool',
    'offset' => 'int',
  ),
  'mb_eregi' => 
  array (
    0 => 'bool',
    'pattern' => 'string',
    'string' => 'string',
    '&w_matches=' => 'array<array-key, mixed>|null',
  ),
  'mb_eregi_replace' => 
  array (
    0 => 'false|null|string',
    'pattern' => 'string',
    'replacement' => 'string',
    'string' => 'string',
    'options=' => 'null|string',
  ),
  'mb_get_info' => 
  array (
    0 => 'array<array-key, mixed>|false|int|string',
    'type=' => 'string',
  ),
  'mb_http_input' => 
  array (
    0 => 'array<array-key, mixed>|false|string',
    'type=' => 'null|string',
  ),
  'mb_http_output' => 
  array (
    0 => 'bool|string',
    'encoding=' => 'null|string',
  ),
  'mb_internal_encoding' => 
  array (
    0 => 'bool|string',
    'encoding=' => 'null|string',
  ),
  'mb_language' => 
  array (
    0 => 'bool|string',
    'language=' => 'null|string',
  ),
  'mb_list_encodings' => 
  array (
    0 => 'list<string>',
  ),
  'mb_ord' => 
  array (
    0 => 'false|int',
    'string' => 'string',
    'encoding=' => 'null|string',
  ),
  'mb_output_handler' => 
  array (
    0 => 'string',
    'string' => 'string',
    'status' => 'int',
  ),
  'mb_parse_str' => 
  array (
    0 => 'bool',
    'string' => 'string',
    '&w_result' => 'array<array-key, mixed>',
  ),
  'mb_preferred_mime_name' => 
  array (
    0 => 'false|string',
    'encoding' => 'string',
  ),
  'mb_regex_encoding' => 
  array (
    0 => 'bool|string',
    'encoding=' => 'null|string',
  ),
  'mb_regex_set_options' => 
  array (
    0 => 'string',
    'options=' => 'null|string',
  ),
  'mb_scrub' => 
  array (
    0 => 'string',
    'string' => 'string',
    'encoding=' => 'null|string',
  ),
  'mb_send_mail' => 
  array (
    0 => 'bool',
    'to' => 'string',
    'subject' => 'string',
    'message' => 'string',
    'additional_headers=' => 'array<array-key, mixed>|string',
    'additional_params=' => 'null|string',
  ),
  'mb_split' => 
  array (
    0 => 'false|list<string>',
    'pattern' => 'string',
    'string' => 'string',
    'limit=' => 'int',
  ),
  'mb_str_split' => 
  array (
    0 => 'list<string>',
    'string' => 'string',
    'length=' => 'int<1, max>',
    'encoding=' => 'null|string',
  ),
  'mb_strcut' => 
  array (
    0 => 'string',
    'string' => 'string',
    'start' => 'int',
    'length=' => 'int|null',
    'encoding=' => 'null|string',
  ),
  'mb_strimwidth' => 
  array (
    0 => 'string',
    'string' => 'string',
    'start' => 'int',
    'width' => 'int',
    'trim_marker=' => 'string',
    'encoding=' => 'null|string',
  ),
  'mb_stripos' => 
  array (
    0 => 'false|int',
    'haystack' => 'string',
    'needle' => 'string',
    'offset=' => 'int',
    'encoding=' => 'null|string',
  ),
  'mb_stristr' => 
  array (
    0 => 'false|string',
    'haystack' => 'string',
    'needle' => 'string',
    'before_needle=' => 'bool',
    'encoding=' => 'null|string',
  ),
  'mb_strlen' => 
  array (
    0 => 'int<0, max>',
    'string' => 'string',
    'encoding=' => 'null|string',
  ),
  'mb_strpos' => 
  array (
    0 => 'false|int',
    'haystack' => 'string',
    'needle' => 'string',
    'offset=' => 'int',
    'encoding=' => 'null|string',
  ),
  'mb_strrchr' => 
  array (
    0 => 'false|string',
    'haystack' => 'string',
    'needle' => 'string',
    'before_needle=' => 'bool',
    'encoding=' => 'null|string',
  ),
  'mb_strrichr' => 
  array (
    0 => 'false|string',
    'haystack' => 'string',
    'needle' => 'string',
    'before_needle=' => 'bool',
    'encoding=' => 'null|string',
  ),
  'mb_strripos' => 
  array (
    0 => 'false|int',
    'haystack' => 'string',
    'needle' => 'string',
    'offset=' => 'int',
    'encoding=' => 'null|string',
  ),
  'mb_strrpos' => 
  array (
    0 => 'false|int',
    'haystack' => 'string',
    'needle' => 'string',
    'offset=' => 'int',
    'encoding=' => 'null|string',
  ),
  'mb_strstr' => 
  array (
    0 => 'false|string',
    'haystack' => 'string',
    'needle' => 'string',
    'before_needle=' => 'bool',
    'encoding=' => 'null|string',
  ),
  'mb_strtolower' => 
  array (
    0 => 'lowercase-string',
    'string' => 'string',
    'encoding=' => 'null|string',
  ),
  'mb_strtoupper' => 
  array (
    0 => 'string',
    'string' => 'string',
    'encoding=' => 'null|string',
  ),
  'mb_strwidth' => 
  array (
    0 => 'int',
    'string' => 'string',
    'encoding=' => 'null|string',
  ),
  'mb_substitute_character' => 
  array (
    0 => 'bool|int|string',
    'substitute_character=' => 'int|null|string',
  ),
  'mb_substr' => 
  array (
    0 => 'string',
    'string' => 'string',
    'start' => 'int',
    'length=' => 'int|null',
    'encoding=' => 'null|string',
  ),
  'mb_substr_count' => 
  array (
    0 => 'int',
    'haystack' => 'string',
    'needle' => 'string',
    'encoding=' => 'null|string',
  ),
  'mcrypt_cbc' => 
  array (
    0 => 'string',
    'cipher' => 'int|string',
    'key' => 'string',
    'data' => 'string',
    'mode' => 'int',
    'iv=' => 'string',
  ),
  'mcrypt_cfb' => 
  array (
    0 => 'string',
    'cipher' => 'int|string',
    'key' => 'string',
    'data' => 'string',
    'mode' => 'int',
    'iv=' => 'string',
  ),
  'mcrypt_create_iv' => 
  array (
    0 => 'false|string',
    'size' => 'int',
    'source=' => 'int',
  ),
  'mcrypt_decrypt' => 
  array (
    0 => 'string',
    'cipher' => 'string',
    'key' => 'string',
    'data' => 'string',
    'mode' => 'string',
    'iv=' => 'string',
  ),
  'mcrypt_ecb' => 
  array (
    0 => 'string',
    'cipher' => 'int|string',
    'key' => 'string',
    'data' => 'string',
    'mode' => 'int',
    'iv=' => 'string',
  ),
  'mcrypt_enc_get_algorithms_name' => 
  array (
    0 => 'string',
    'td' => 'resource',
  ),
  'mcrypt_enc_get_block_size' => 
  array (
    0 => 'int',
    'td' => 'resource',
  ),
  'mcrypt_enc_get_iv_size' => 
  array (
    0 => 'int',
    'td' => 'resource',
  ),
  'mcrypt_enc_get_key_size' => 
  array (
    0 => 'int',
    'td' => 'resource',
  ),
  'mcrypt_enc_get_modes_name' => 
  array (
    0 => 'string',
    'td' => 'resource',
  ),
  'mcrypt_enc_get_supported_key_sizes' => 
  array (
    0 => 'array<array-key, mixed>',
    'td' => 'resource',
  ),
  'mcrypt_enc_is_block_algorithm' => 
  array (
    0 => 'bool',
    'td' => 'resource',
  ),
  'mcrypt_enc_is_block_algorithm_mode' => 
  array (
    0 => 'bool',
    'td' => 'resource',
  ),
  'mcrypt_enc_is_block_mode' => 
  array (
    0 => 'bool',
    'td' => 'resource',
  ),
  'mcrypt_enc_self_test' => 
  array (
    0 => 'false|int',
    'td' => 'resource',
  ),
  'mcrypt_encrypt' => 
  array (
    0 => 'string',
    'cipher' => 'string',
    'key' => 'string',
    'data' => 'string',
    'mode' => 'string',
    'iv=' => 'string',
  ),
  'mcrypt_generic' => 
  array (
    0 => 'string',
    'td' => 'resource',
    'data' => 'string',
  ),
  'mcrypt_generic_deinit' => 
  array (
    0 => 'bool',
    'td' => 'resource',
  ),
  'mcrypt_generic_end' => 
  array (
    0 => 'bool',
    'td' => 'resource',
  ),
  'mcrypt_generic_init' => 
  array (
    0 => 'false|int',
    'td' => 'resource',
    'key' => 'string',
    'iv' => 'string',
  ),
  'mcrypt_get_block_size' => 
  array (
    0 => 'int',
    'cipher' => 'int|string',
    'module' => 'string',
  ),
  'mcrypt_get_cipher_name' => 
  array (
    0 => 'false|string',
    'cipher' => 'int|string',
  ),
  'mcrypt_get_iv_size' => 
  array (
    0 => 'false|int',
    'cipher' => 'int|string',
    'module' => 'string',
  ),
  'mcrypt_get_key_size' => 
  array (
    0 => 'int',
    'cipher' => 'int|string',
    'module' => 'string',
  ),
  'mcrypt_list_algorithms' => 
  array (
    0 => 'array<array-key, mixed>',
    'lib_dir=' => 'string',
  ),
  'mcrypt_list_modes' => 
  array (
    0 => 'array<array-key, mixed>',
    'lib_dir=' => 'string',
  ),
  'mcrypt_module_close' => 
  array (
    0 => 'bool',
    'td' => 'resource',
  ),
  'mcrypt_module_get_algo_block_size' => 
  array (
    0 => 'int',
    'algorithm' => 'string',
    'lib_dir=' => 'string',
  ),
  'mcrypt_module_get_algo_key_size' => 
  array (
    0 => 'int',
    'algorithm' => 'string',
    'lib_dir=' => 'string',
  ),
  'mcrypt_module_get_supported_key_sizes' => 
  array (
    0 => 'array<array-key, mixed>',
    'algorithm' => 'string',
    'lib_dir=' => 'string',
  ),
  'mcrypt_module_is_block_algorithm' => 
  array (
    0 => 'bool',
    'algorithm' => 'string',
    'lib_dir=' => 'string',
  ),
  'mcrypt_module_is_block_algorithm_mode' => 
  array (
    0 => 'bool',
    'mode' => 'string',
    'lib_dir=' => 'string',
  ),
  'mcrypt_module_is_block_mode' => 
  array (
    0 => 'bool',
    'mode' => 'string',
    'lib_dir=' => 'string',
  ),
  'mcrypt_module_open' => 
  array (
    0 => 'false|resource',
    'cipher' => 'string',
    'cipher_directory' => 'string',
    'mode' => 'string',
    'mode_directory' => 'string',
  ),
  'mcrypt_module_self_test' => 
  array (
    0 => 'bool',
    'algorithm' => 'string',
    'lib_dir=' => 'string',
  ),
  'mcrypt_ofb' => 
  array (
    0 => 'string',
    'cipher' => 'int|string',
    'key' => 'string',
    'data' => 'string',
    'mode' => 'int',
    'iv=' => 'string',
  ),
  'md5' => 
  array (
    0 => 'non-falsy-string',
    'string' => 'string',
    'binary=' => 'bool',
  ),
  'md5_file' => 
  array (
    0 => 'false|non-falsy-string',
    'filename' => 'string',
    'binary=' => 'bool',
  ),
  'mdecrypt_generic' => 
  array (
    0 => 'string',
    'td' => 'resource',
    'data' => 'string',
  ),
  'memcache::add' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'var' => 'mixed',
    'flag=' => 'int',
    'expire=' => 'int',
  ),
  'memcache::addserver' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port=' => 'int',
    'persistent=' => 'bool',
    'weight=' => 'int',
    'timeout=' => 'int',
    'retry_interval=' => 'int',
    'status=' => 'bool',
    'failure_callback=' => 'callable',
    'timeoutms=' => 'int',
  ),
  'memcache::append' => 
  array (
    0 => 'mixed',
  ),
  'memcache::cas' => 
  array (
    0 => 'mixed',
  ),
  'memcache::close' => 
  array (
    0 => 'bool',
  ),
  'memcache::connect' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port=' => 'int',
    'timeout=' => 'int',
  ),
  'memcache::decrement' => 
  array (
    0 => 'int',
    'key' => 'string',
    'value=' => 'int',
  ),
  'memcache::delete' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'timeout=' => 'int',
  ),
  'memcache::findserver' => 
  array (
    0 => 'mixed',
  ),
  'memcache::flush' => 
  array (
    0 => 'bool',
  ),
  'memcache::get' => 
  array (
    0 => 'array<array-key, mixed>|false|string',
    'key' => 'string',
    'flags=' => 'array<array-key, mixed>',
    'keys=' => 'array<array-key, mixed>',
  ),
  'memcache::get\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'array<array-key, string>',
    'flags=' => 'array<array-key, int>',
  ),
  'memcache::getextendedstats' => 
  array (
    0 => 'array<string, array<string, int|string>|false>|false',
    'type=' => 'string',
    'slabid=' => 'int',
    'limit=' => 'int',
  ),
  'memcache::getserverstatus' => 
  array (
    0 => 'int',
    'host' => 'string',
    'port=' => 'int',
  ),
  'memcache::getstats' => 
  array (
    0 => 'array<array-key, mixed>',
    'type=' => 'string',
    'slabid=' => 'int',
    'limit=' => 'int',
  ),
  'memcache::getversion' => 
  array (
    0 => 'string',
  ),
  'memcache::increment' => 
  array (
    0 => 'int',
    'key' => 'string',
    'value=' => 'int',
  ),
  'memcache::pconnect' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port=' => 'int',
    'timeout=' => 'int',
  ),
  'memcache::prepend' => 
  array (
    0 => 'string',
  ),
  'memcache::replace' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'var' => 'mixed',
    'flag=' => 'int',
    'expire=' => 'int',
  ),
  'memcache::set' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'var' => 'mixed',
    'flag=' => 'int',
    'expire=' => 'int',
  ),
  'memcache::setcompressthreshold' => 
  array (
    0 => 'bool',
    'threshold' => 'int',
    'min_savings=' => 'float',
  ),
  'memcache::setfailurecallback' => 
  array (
    0 => 'mixed',
  ),
  'memcache::setserverparams' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port=' => 'int',
    'timeout=' => 'int',
    'retry_interval=' => 'int',
    'status=' => 'bool',
    'failure_callback=' => 'callable',
  ),
  'memcache_add' => 
  array (
    0 => 'bool',
    'memcache_obj' => 'Memcache',
    'key' => 'string',
    'var' => 'mixed',
    'flag=' => 'int',
    'expire=' => 'int',
  ),
  'memcache_add_server' => 
  array (
    0 => 'bool',
    'memcache_obj' => 'Memcache',
    'host' => 'string',
    'port=' => 'int',
    'persistent=' => 'bool',
    'weight=' => 'int',
    'timeout=' => 'int',
    'retry_interval=' => 'int',
    'status=' => 'bool',
    'failure_callback=' => 'callable',
    'timeoutms=' => 'int',
  ),
  'memcache_append' => 
  array (
    0 => 'mixed',
    'memcache_obj' => 'Memcache',
  ),
  'memcache_cas' => 
  array (
    0 => 'mixed',
    'memcache_obj' => 'Memcache',
  ),
  'memcache_close' => 
  array (
    0 => 'bool',
    'memcache_obj' => 'Memcache',
  ),
  'memcache_connect' => 
  array (
    0 => 'Memcache|false',
    'host' => 'string',
    'port=' => 'int',
    'timeout=' => 'int',
  ),
  'memcache_debug' => 
  array (
    0 => 'bool',
    'on_off' => 'bool',
  ),
  'memcache_decrement' => 
  array (
    0 => 'int',
    'memcache_obj' => 'Memcache',
    'key' => 'string',
    'value=' => 'int',
  ),
  'memcache_delete' => 
  array (
    0 => 'bool',
    'memcache_obj' => 'Memcache',
    'key' => 'string',
    'timeout=' => 'int',
  ),
  'memcache_flush' => 
  array (
    0 => 'bool',
    'memcache_obj' => 'Memcache',
  ),
  'memcache_get' => 
  array (
    0 => 'string',
    'memcache_obj' => 'Memcache',
    'key' => 'string',
    'flags=' => 'int',
  ),
  'memcache_get\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'memcache_obj' => 'Memcache',
    'key' => 'array<array-key, string>',
    'flags=' => 'array<array-key, int>',
  ),
  'memcache_get_extended_stats' => 
  array (
    0 => 'array<array-key, mixed>',
    'memcache_obj' => 'Memcache',
    'type=' => 'string',
    'slabid=' => 'int',
    'limit=' => 'int',
  ),
  'memcache_get_server_status' => 
  array (
    0 => 'int',
    'memcache_obj' => 'Memcache',
    'host' => 'string',
    'port=' => 'int',
  ),
  'memcache_get_stats' => 
  array (
    0 => 'array<array-key, mixed>',
    'memcache_obj' => 'Memcache',
    'type=' => 'string',
    'slabid=' => 'int',
    'limit=' => 'int',
  ),
  'memcache_get_version' => 
  array (
    0 => 'string',
    'memcache_obj' => 'Memcache',
  ),
  'memcache_increment' => 
  array (
    0 => 'int',
    'memcache_obj' => 'Memcache',
    'key' => 'string',
    'value=' => 'int',
  ),
  'memcache_pconnect' => 
  array (
    0 => 'Memcache|false',
    'host' => 'string',
    'port=' => 'int',
    'timeout=' => 'int',
  ),
  'memcache_prepend' => 
  array (
    0 => 'string',
    'memcache_obj' => 'Memcache',
  ),
  'memcache_replace' => 
  array (
    0 => 'bool',
    'memcache_obj' => 'Memcache',
    'key' => 'string',
    'var' => 'mixed',
    'flag=' => 'int',
    'expire=' => 'int',
  ),
  'memcache_set' => 
  array (
    0 => 'bool',
    'memcache_obj' => 'Memcache',
    'key' => 'string',
    'var' => 'mixed',
    'flag=' => 'int',
    'expire=' => 'int',
  ),
  'memcache_set_compress_threshold' => 
  array (
    0 => 'bool',
    'memcache_obj' => 'Memcache',
    'threshold' => 'int',
    'min_savings=' => 'float',
  ),
  'memcache_set_failure_callback' => 
  array (
    0 => 'mixed',
    'memcache_obj' => 'Memcache',
  ),
  'memcache_set_server_params' => 
  array (
    0 => 'bool',
    'memcache_obj' => 'Memcache',
    'host' => 'string',
    'port=' => 'int',
    'timeout=' => 'int',
    'retry_interval=' => 'int',
    'status=' => 'bool',
    'failure_callback=' => 'callable',
  ),
  'memcached::__construct' => 
  array (
    0 => 'void',
    'persistent_id=' => 'null|string',
    'callback=' => 'callable|null',
    'connection_str=' => 'null|string',
  ),
  'memcached::add' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'mixed',
    'expiration=' => 'int',
  ),
  'memcached::addbykey' => 
  array (
    0 => 'bool',
    'server_key' => 'string',
    'key' => 'string',
    'value' => 'mixed',
    'expiration=' => 'int',
  ),
  'memcached::addserver' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port' => 'int',
    'weight=' => 'int',
  ),
  'memcached::addservers' => 
  array (
    0 => 'bool',
    'servers' => 'array<array-key, mixed>',
  ),
  'memcached::append' => 
  array (
    0 => 'bool|null',
    'key' => 'string',
    'value' => 'string',
  ),
  'memcached::appendbykey' => 
  array (
    0 => 'bool|null',
    'server_key' => 'string',
    'key' => 'string',
    'value' => 'string',
  ),
  'memcached::cas' => 
  array (
    0 => 'bool',
    'cas_token' => 'float|int|string',
    'key' => 'string',
    'value' => 'mixed',
    'expiration=' => 'int',
  ),
  'memcached::casbykey' => 
  array (
    0 => 'bool',
    'cas_token' => 'float|int|string',
    'server_key' => 'string',
    'key' => 'string',
    'value' => 'mixed',
    'expiration=' => 'int',
  ),
  'memcached::checkkey' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'memcached::decrement' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'offset=' => 'int',
    'initial_value=' => 'int',
    'expiry=' => 'int',
  ),
  'memcached::decrementbykey' => 
  array (
    0 => 'false|int',
    'server_key' => 'string',
    'key' => 'string',
    'offset=' => 'int',
    'initial_value=' => 'int',
    'expiry=' => 'int',
  ),
  'memcached::delete' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'time=' => 'int',
  ),
  'memcached::deletebykey' => 
  array (
    0 => 'bool',
    'server_key' => 'string',
    'key' => 'string',
    'time=' => 'int',
  ),
  'memcached::deletemulti' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'array<array-key, mixed>',
    'time=' => 'int',
  ),
  'memcached::deletemultibykey' => 
  array (
    0 => 'array<array-key, mixed>',
    'server_key' => 'string',
    'keys' => 'array<array-key, mixed>',
    'time=' => 'int',
  ),
  'memcached::fetch' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'memcached::fetchall' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'memcached::flush' => 
  array (
    0 => 'bool',
    'delay=' => 'int',
  ),
  'memcached::flushbuffers' => 
  array (
    0 => 'bool',
  ),
  'memcached::get' => 
  array (
    0 => 'false|mixed',
    'key' => 'string',
    'cache_cb=' => 'callable|null',
    'get_flags=' => 'int',
  ),
  'memcached::getallkeys' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'memcached::getbykey' => 
  array (
    0 => 'false|mixed',
    'server_key' => 'string',
    'key' => 'string',
    'cache_cb=' => 'callable|null',
    'get_flags=' => 'int',
  ),
  'memcached::getdelayed' => 
  array (
    0 => 'bool',
    'keys' => 'array<array-key, mixed>',
    'with_cas=' => 'bool',
    'value_cb=' => 'callable|null',
  ),
  'memcached::getdelayedbykey' => 
  array (
    0 => 'bool',
    'server_key' => 'string',
    'keys' => 'array<array-key, mixed>',
    'with_cas=' => 'bool',
    'value_cb=' => 'callable|null',
  ),
  'memcached::getlastdisconnectedserver' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'memcached::getlasterrorcode' => 
  array (
    0 => 'int',
  ),
  'memcached::getlasterrorerrno' => 
  array (
    0 => 'int',
  ),
  'memcached::getlasterrormessage' => 
  array (
    0 => 'string',
  ),
  'memcached::getmulti' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'keys' => 'array<array-key, mixed>',
    'get_flags=' => 'int',
  ),
  'memcached::getmultibykey' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'server_key' => 'string',
    'keys' => 'array<array-key, mixed>',
    'get_flags=' => 'int',
  ),
  'memcached::getoption' => 
  array (
    0 => 'false|mixed',
    'option' => 'int',
  ),
  'memcached::getresultcode' => 
  array (
    0 => 'int',
  ),
  'memcached::getresultmessage' => 
  array (
    0 => 'string',
  ),
  'memcached::getserverbykey' => 
  array (
    0 => 'array<array-key, mixed>',
    'server_key' => 'string',
  ),
  'memcached::getserverlist' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'memcached::getstats' => 
  array (
    0 => 'array<string, array<string, int|string>|false>|false',
    'type=' => 'null|string',
  ),
  'memcached::getversion' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'memcached::increment' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'offset=' => 'int',
    'initial_value=' => 'int',
    'expiry=' => 'int',
  ),
  'memcached::incrementbykey' => 
  array (
    0 => 'false|int',
    'server_key' => 'string',
    'key' => 'string',
    'offset=' => 'int',
    'initial_value=' => 'int',
    'expiry=' => 'int',
  ),
  'memcached::ispersistent' => 
  array (
    0 => 'bool',
  ),
  'memcached::ispristine' => 
  array (
    0 => 'bool',
  ),
  'memcached::prepend' => 
  array (
    0 => 'bool|null',
    'key' => 'string',
    'value' => 'string',
  ),
  'memcached::prependbykey' => 
  array (
    0 => 'bool|null',
    'server_key' => 'string',
    'key' => 'string',
    'value' => 'string',
  ),
  'memcached::quit' => 
  array (
    0 => 'bool',
  ),
  'memcached::replace' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'mixed',
    'expiration=' => 'int',
  ),
  'memcached::replacebykey' => 
  array (
    0 => 'bool',
    'server_key' => 'string',
    'key' => 'string',
    'value' => 'mixed',
    'expiration=' => 'int',
  ),
  'memcached::resetserverlist' => 
  array (
    0 => 'bool',
  ),
  'memcached::set' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'mixed',
    'expiration=' => 'int',
  ),
  'memcached::setbucket' => 
  array (
    0 => 'bool',
    'host_map' => 'array<array-key, mixed>',
    'forward_map' => 'array<array-key, mixed>|null',
    'replicas' => 'int',
  ),
  'memcached::setbykey' => 
  array (
    0 => 'bool',
    'server_key' => 'string',
    'key' => 'string',
    'value' => 'mixed',
    'expiration=' => 'int',
  ),
  'memcached::setencodingkey' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'memcached::setmulti' => 
  array (
    0 => 'bool',
    'items' => 'array<array-key, mixed>',
    'expiration=' => 'int',
  ),
  'memcached::setmultibykey' => 
  array (
    0 => 'bool',
    'server_key' => 'string',
    'items' => 'array<array-key, mixed>',
    'expiration=' => 'int',
  ),
  'memcached::setoption' => 
  array (
    0 => 'bool',
    'option' => 'int',
    'value' => 'mixed',
  ),
  'memcached::setoptions' => 
  array (
    0 => 'bool',
    'options' => 'array<array-key, mixed>',
  ),
  'memcached::setsaslauthdata' => 
  array (
    0 => 'bool',
    'username' => 'string',
    'password' => 'string',
  ),
  'memcached::touch' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'expiration=' => 'int',
  ),
  'memcached::touchbykey' => 
  array (
    0 => 'bool',
    'server_key' => 'string',
    'key' => 'string',
    'expiration=' => 'int',
  ),
  'memcachedexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'memcachedexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'memcachedexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'memcachedexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'memcachedexception::getfile' => 
  array (
    0 => 'string',
  ),
  'memcachedexception::getline' => 
  array (
    0 => 'int',
  ),
  'memcachedexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'memcachedexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'memcachedexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'memcachedexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'memcachepool::add' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'var' => 'mixed',
    'flag=' => 'int',
    'expire=' => 'int',
  ),
  'memcachepool::addserver' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port=' => 'int',
    'persistent=' => 'bool',
    'weight=' => 'int',
    'timeout=' => 'int',
    'retry_interval=' => 'int',
    'status=' => 'bool',
    'failure_callback=' => 'callable|null',
    'timeoutms=' => 'int',
  ),
  'memcachepool::append' => 
  array (
    0 => 'mixed',
  ),
  'memcachepool::cas' => 
  array (
    0 => 'mixed',
  ),
  'memcachepool::close' => 
  array (
    0 => 'bool',
  ),
  'memcachepool::connect' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port' => 'int',
    'timeout=' => 'int',
  ),
  'memcachepool::decrement' => 
  array (
    0 => 'false|int',
    'key' => 'mixed',
    'value=' => 'int|mixed',
  ),
  'memcachepool::delete' => 
  array (
    0 => 'bool',
    'key' => 'mixed',
    'timeout=' => 'int|mixed',
  ),
  'memcachepool::findserver' => 
  array (
    0 => 'mixed',
  ),
  'memcachepool::flush' => 
  array (
    0 => 'bool',
  ),
  'memcachepool::get' => 
  array (
    0 => 'array<array-key, mixed>|false|string',
    'key' => 'array<array-key, mixed>|string',
    '&flags=' => 'array<array-key, mixed>|int',
  ),
  'memcachepool::getextendedstats' => 
  array (
    0 => 'array<string, array<string, int|string>|false>|false',
    'type=' => 'string',
    'slabid=' => 'int',
    'limit=' => 'int',
  ),
  'memcachepool::getserverstatus' => 
  array (
    0 => 'int',
    'host' => 'string',
    'port=' => 'int',
  ),
  'memcachepool::getstats' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'type=' => 'string',
    'slabid=' => 'int',
    'limit=' => 'int',
  ),
  'memcachepool::getversion' => 
  array (
    0 => 'false|string',
  ),
  'memcachepool::increment' => 
  array (
    0 => 'false|int',
    'key' => 'mixed',
    'value=' => 'int|mixed',
  ),
  'memcachepool::prepend' => 
  array (
    0 => 'string',
  ),
  'memcachepool::replace' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'var' => 'mixed',
    'flag=' => 'int',
    'expire=' => 'int',
  ),
  'memcachepool::set' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'var' => 'mixed',
    'flag=' => 'int',
    'expire=' => 'int',
  ),
  'memcachepool::setcompressthreshold' => 
  array (
    0 => 'bool',
    'thresold' => 'int',
    'min_saving=' => 'float',
  ),
  'memcachepool::setfailurecallback' => 
  array (
    0 => 'mixed',
  ),
  'memcachepool::setserverparams' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port=' => 'int',
    'timeout=' => 'int',
    'retry_interval=' => 'int',
    'status=' => 'bool',
    'failure_callback=' => 'callable|null',
  ),
  'memory_get_peak_usage' => 
  array (
    0 => 'int',
    'real_usage=' => 'bool',
  ),
  'memory_get_usage' => 
  array (
    0 => 'int',
    'real_usage=' => 'bool',
  ),
  'messageformatter::__construct' => 
  array (
    0 => 'void',
    'locale' => 'string',
    'pattern' => 'string',
  ),
  'messageformatter::create' => 
  array (
    0 => 'MessageFormatter',
    'locale' => 'string',
    'pattern' => 'string',
  ),
  'messageformatter::format' => 
  array (
    0 => 'false|string',
    'values' => 'array<array-key, mixed>',
  ),
  'messageformatter::formatmessage' => 
  array (
    0 => 'false|string',
    'locale' => 'string',
    'pattern' => 'string',
    'values' => 'array<array-key, mixed>',
  ),
  'messageformatter::geterrorcode' => 
  array (
    0 => 'int',
  ),
  'messageformatter::geterrormessage' => 
  array (
    0 => 'string',
  ),
  'messageformatter::getlocale' => 
  array (
    0 => 'string',
  ),
  'messageformatter::getpattern' => 
  array (
    0 => 'string',
  ),
  'messageformatter::parse' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'string' => 'string',
  ),
  'messageformatter::parsemessage' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'locale' => 'string',
    'pattern' => 'string',
    'message' => 'string',
  ),
  'messageformatter::setpattern' => 
  array (
    0 => 'bool',
    'pattern' => 'string',
  ),
  'metaphone' => 
  array (
    0 => 'string',
    'string' => 'string',
    'max_phonemes=' => 'int',
  ),
  'method_exists' => 
  array (
    0 => 'bool',
    'object_or_class' => 'class-string|object',
    'method' => 'string',
  ),
  'mhash' => 
  array (
    0 => 'string',
    'algo' => 'int',
    'data' => 'string',
    'key=' => 'null|string',
  ),
  'mhash_count' => 
  array (
    0 => 'int',
  ),
  'mhash_get_block_size' => 
  array (
    0 => 'false|int',
    'algo' => 'int',
  ),
  'mhash_get_hash_name' => 
  array (
    0 => 'false|string',
    'algo' => 'int',
  ),
  'mhash_keygen_s2k' => 
  array (
    0 => 'false|string',
    'algo' => 'int',
    'password' => 'string',
    'salt' => 'string',
    'length' => 'int',
  ),
  'microtime' => 
  array (
    0 => 'string',
    'as_float=' => 'false',
  ),
  'microtime\'1' => 
  array (
    0 => 'float',
    'as_float=' => 'true',
  ),
  'mime_content_type' => 
  array (
    0 => 'false|string',
    'filename' => 'resource|string',
  ),
  'min' => 
  array (
    0 => 'mixed',
    'value' => 'non-empty-array<array-key, mixed>',
  ),
  'min\'1' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
    'values' => 'mixed',
    '...args=' => 'mixed',
  ),
  'ming_keypress' => 
  array (
    0 => 'int',
    'char' => 'string',
  ),
  'ming_setcubicthreshold' => 
  array (
    0 => 'void',
    'threshold' => 'int',
  ),
  'ming_setscale' => 
  array (
    0 => 'void',
    'scale' => 'float',
  ),
  'ming_setswfcompression' => 
  array (
    0 => 'void',
    'level' => 'int',
  ),
  'ming_useconstants' => 
  array (
    0 => 'void',
    'use' => 'int',
  ),
  'ming_useswfversion' => 
  array (
    0 => 'void',
    'version' => 'int',
  ),
  'mkdir' => 
  array (
    0 => 'bool',
    'directory' => 'string',
    'permissions=' => 'int',
    'recursive=' => 'bool',
    'context=' => 'null|resource',
  ),
  'mktime' => 
  array (
    0 => 'false|int',
    'hour' => 'int',
    'minute=' => 'int|null',
    'second=' => 'int|null',
    'month=' => 'int|null',
    'day=' => 'int|null',
    'year=' => 'int|null',
  ),
  'mongo::__construct' => 
  array (
    0 => 'void',
    'server=' => 'string',
    'options=' => 'array<array-key, mixed>',
    'driver_options=' => 'array<array-key, mixed>',
  ),
  'mongo::__get' => 
  array (
    0 => 'MongoDB',
    'dbname' => 'string',
  ),
  'mongo::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongo::close' => 
  array (
    0 => 'bool',
  ),
  'mongo::connect' => 
  array (
    0 => 'bool',
  ),
  'mongo::connectutil' => 
  array (
    0 => 'bool',
  ),
  'mongo::dropdb' => 
  array (
    0 => 'array<array-key, mixed>',
    'db' => 'mixed',
  ),
  'mongo::forceerror' => 
  array (
    0 => 'bool',
  ),
  'mongo::getconnections' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongo::gethosts' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongo::getpoolsize' => 
  array (
    0 => 'int',
  ),
  'mongo::getreadpreference' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongo::getslave' => 
  array (
    0 => 'null|string',
  ),
  'mongo::getslaveokay' => 
  array (
    0 => 'bool',
  ),
  'mongo::getwriteconcern' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongo::killcursor' => 
  array (
    0 => 'mixed',
    'server_hash' => 'string',
    'id' => 'MongoInt64|int',
  ),
  'mongo::lasterror' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'mongo::listdbs' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongo::pairconnect' => 
  array (
    0 => 'bool',
  ),
  'mongo::pairpersistconnect' => 
  array (
    0 => 'bool',
    'username=' => 'string',
    'password=' => 'string',
  ),
  'mongo::persistconnect' => 
  array (
    0 => 'bool',
    'username=' => 'string',
    'password=' => 'string',
  ),
  'mongo::pooldebug' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongo::preverror' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongo::reseterror' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongo::selectcollection' => 
  array (
    0 => 'MongoCollection',
    'db' => 'string',
    'collection' => 'string',
  ),
  'mongo::selectdb' => 
  array (
    0 => 'MongoDB',
    'name' => 'string',
  ),
  'mongo::setpoolsize' => 
  array (
    0 => 'bool',
    'size' => 'int',
  ),
  'mongo::setreadpreference' => 
  array (
    0 => 'bool',
    'readPreference' => 'string',
    'tags=' => 'array<array-key, mixed>',
  ),
  'mongo::setslaveokay' => 
  array (
    0 => 'bool',
    'ok=' => 'bool',
  ),
  'mongo::switchslave' => 
  array (
    0 => 'string',
  ),
  'mongobindata::__construct' => 
  array (
    0 => 'void',
    'data' => 'string',
    'type=' => 'int',
  ),
  'mongobindata::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongoclient::__construct' => 
  array (
    0 => 'void',
    'server=' => 'string',
    'options=' => 'array<array-key, mixed>',
    'driver_options=' => 'array<array-key, mixed>',
  ),
  'mongoclient::__get' => 
  array (
    0 => 'MongoDB',
    'dbname' => 'string',
  ),
  'mongoclient::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongoclient::close' => 
  array (
    0 => 'bool',
    'connection=' => 'bool|string',
  ),
  'mongoclient::connect' => 
  array (
    0 => 'bool',
  ),
  'mongoclient::dropdb' => 
  array (
    0 => 'array<array-key, mixed>',
    'db' => 'mixed',
  ),
  'mongoclient::getconnections' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongoclient::gethosts' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongoclient::getreadpreference' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongoclient::getwriteconcern' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongoclient::killcursor' => 
  array (
    0 => 'bool',
    'server_hash' => 'string',
    'id' => 'MongoInt64|int',
  ),
  'mongoclient::listdbs' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongoclient::selectcollection' => 
  array (
    0 => 'MongoCollection',
    'db' => 'string',
    'collection' => 'string',
  ),
  'mongoclient::selectdb' => 
  array (
    0 => 'MongoDB',
    'name' => 'string',
  ),
  'mongoclient::setreadpreference' => 
  array (
    0 => 'bool',
    'read_preference' => 'string',
    'tags=' => 'array<array-key, mixed>',
  ),
  'mongoclient::setwriteconcern' => 
  array (
    0 => 'bool',
    'w' => 'mixed',
    'wtimeout=' => 'int',
  ),
  'mongoclient::switchslave' => 
  array (
    0 => 'string',
  ),
  'mongocode::__construct' => 
  array (
    0 => 'void',
    'code' => 'string',
    'scope=' => 'array<array-key, mixed>',
  ),
  'mongocode::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongocollection::__construct' => 
  array (
    0 => 'void',
    'db' => 'MongoDB',
    'name' => 'string',
  ),
  'mongocollection::__get' => 
  array (
    0 => 'MongoCollection',
    'name' => 'string',
  ),
  'mongocollection::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongocollection::aggregate' => 
  array (
    0 => 'array<array-key, mixed>',
    'op' => 'array<array-key, mixed>',
    'op=' => 'array<array-key, mixed>',
    '...args=' => 'array<array-key, mixed>',
  ),
  'mongocollection::aggregate\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'pipeline' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'mongocollection::aggregatecursor' => 
  array (
    0 => 'MongoCommandCursor',
    'command' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'mongocollection::batchinsert' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'a' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'mongocollection::count' => 
  array (
    0 => 'int',
    'query=' => 'array<array-key, mixed>',
    'limit=' => 'int',
    'skip=' => 'int',
  ),
  'mongocollection::createdbref' => 
  array (
    0 => 'array<array-key, mixed>',
    'a' => 'array<array-key, mixed>',
  ),
  'mongocollection::createindex' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'mongocollection::deleteindex' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'array<array-key, mixed>|string',
  ),
  'mongocollection::deleteindexes' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongocollection::distinct' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'key' => 'string',
    'query=' => 'array<array-key, mixed>',
  ),
  'mongocollection::drop' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongocollection::ensureindex' => 
  array (
    0 => 'bool',
    'keys' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'mongocollection::find' => 
  array (
    0 => 'MongoCursor',
    'query=' => 'array<array-key, mixed>',
    'fields=' => 'array<array-key, mixed>',
  ),
  'mongocollection::findandmodify' => 
  array (
    0 => 'array<array-key, mixed>',
    'query' => 'array<array-key, mixed>',
    'update=' => 'array<array-key, mixed>',
    'fields=' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'mongocollection::findone' => 
  array (
    0 => 'array<array-key, mixed>|null',
    'query=' => 'array<array-key, mixed>',
    'fields=' => 'array<array-key, mixed>',
  ),
  'mongocollection::getdbref' => 
  array (
    0 => 'array<array-key, mixed>',
    'ref' => 'array<array-key, mixed>',
  ),
  'mongocollection::getindexinfo' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongocollection::getname' => 
  array (
    0 => 'string',
  ),
  'mongocollection::getreadpreference' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongocollection::getslaveokay' => 
  array (
    0 => 'bool',
  ),
  'mongocollection::getwriteconcern' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongocollection::group' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'mixed',
    'initial' => 'array<array-key, mixed>',
    'reduce' => 'MongoCode',
    'options=' => 'array<array-key, mixed>',
  ),
  'mongocollection::insert' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'a' => 'array<array-key, mixed>|object',
    'options=' => 'array<array-key, mixed>',
  ),
  'mongocollection::parallelcollectionscan' => 
  array (
    0 => 'array<array-key, MongoCommandCursor>',
    'num_cursors' => 'int',
  ),
  'mongocollection::remove' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'criteria=' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'mongocollection::save' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'a' => 'array<array-key, mixed>|object',
    'options=' => 'array<array-key, mixed>',
  ),
  'mongocollection::setreadpreference' => 
  array (
    0 => 'bool',
    'read_preference' => 'string',
    'tags=' => 'array<array-key, mixed>',
  ),
  'mongocollection::setslaveokay' => 
  array (
    0 => 'bool',
    'ok=' => 'bool',
  ),
  'mongocollection::setwriteconcern' => 
  array (
    0 => 'bool',
    'w' => 'mixed',
    'wtimeout=' => 'int',
  ),
  'mongocollection::toindexstring' => 
  array (
    0 => 'string',
    'keys' => 'mixed',
  ),
  'mongocollection::update' => 
  array (
    0 => 'bool',
    'criteria' => 'array<array-key, mixed>',
    'newobj' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'mongocollection::validate' => 
  array (
    0 => 'array<array-key, mixed>',
    'scan_data=' => 'bool',
  ),
  'mongocommandcursor::__construct' => 
  array (
    0 => 'void',
    'connection' => 'MongoClient',
    'ns' => 'string',
    'command' => 'array<array-key, mixed>',
  ),
  'mongocommandcursor::batchsize' => 
  array (
    0 => 'MongoCommandCursor',
    'batchSize' => 'int',
  ),
  'mongocommandcursor::createfromdocument' => 
  array (
    0 => 'MongoCommandCursor',
    'connection' => 'MongoClient',
    'hash' => 'string',
    'document' => 'array<array-key, mixed>',
  ),
  'mongocommandcursor::current' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongocommandcursor::dead' => 
  array (
    0 => 'bool',
  ),
  'mongocommandcursor::getreadpreference' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongocommandcursor::info' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongocommandcursor::key' => 
  array (
    0 => 'int',
  ),
  'mongocommandcursor::next' => 
  array (
    0 => 'void',
  ),
  'mongocommandcursor::rewind' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongocommandcursor::setreadpreference' => 
  array (
    0 => 'MongoCommandCursor',
    'read_preference' => 'string',
    'tags=' => 'array<array-key, mixed>',
  ),
  'mongocommandcursor::timeout' => 
  array (
    0 => 'MongoCommandCursor',
    'ms' => 'int',
  ),
  'mongocommandcursor::valid' => 
  array (
    0 => 'bool',
  ),
  'mongocursor::__construct' => 
  array (
    0 => 'void',
    'connection' => 'MongoClient',
    'ns' => 'string',
    'query=' => 'array<array-key, mixed>',
    'fields=' => 'array<array-key, mixed>',
  ),
  'mongocursor::addoption' => 
  array (
    0 => 'MongoCursor',
    'key' => 'string',
    'value' => 'mixed',
  ),
  'mongocursor::awaitdata' => 
  array (
    0 => 'MongoCursor',
    'wait=' => 'bool',
  ),
  'mongocursor::batchsize' => 
  array (
    0 => 'MongoCursor',
    'num' => 'int',
  ),
  'mongocursor::count' => 
  array (
    0 => 'int',
    'foundonly=' => 'bool',
  ),
  'mongocursor::current' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongocursor::dead' => 
  array (
    0 => 'bool',
  ),
  'mongocursor::doquery' => 
  array (
    0 => 'void',
  ),
  'mongocursor::explain' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongocursor::fields' => 
  array (
    0 => 'MongoCursor',
    'f' => 'array<array-key, mixed>',
  ),
  'mongocursor::getnext' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongocursor::getreadpreference' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongocursor::hasnext' => 
  array (
    0 => 'bool',
  ),
  'mongocursor::hint' => 
  array (
    0 => 'MongoCursor',
    'key_pattern' => 'array<array-key, mixed>|object|string',
  ),
  'mongocursor::immortal' => 
  array (
    0 => 'MongoCursor',
    'liveforever=' => 'bool',
  ),
  'mongocursor::info' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongocursor::key' => 
  array (
    0 => 'string',
  ),
  'mongocursor::limit' => 
  array (
    0 => 'MongoCursor',
    'num' => 'int',
  ),
  'mongocursor::maxtimems' => 
  array (
    0 => 'MongoCursor',
    'ms' => 'int',
  ),
  'mongocursor::next' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongocursor::partial' => 
  array (
    0 => 'MongoCursor',
    'okay=' => 'bool',
  ),
  'mongocursor::reset' => 
  array (
    0 => 'void',
  ),
  'mongocursor::rewind' => 
  array (
    0 => 'void',
  ),
  'mongocursor::setflag' => 
  array (
    0 => 'MongoCursor',
    'flag' => 'int',
    'set=' => 'bool',
  ),
  'mongocursor::setreadpreference' => 
  array (
    0 => 'MongoCursor',
    'read_preference' => 'string',
    'tags=' => 'array<array-key, mixed>',
  ),
  'mongocursor::skip' => 
  array (
    0 => 'MongoCursor',
    'num' => 'int',
  ),
  'mongocursor::slaveokay' => 
  array (
    0 => 'MongoCursor',
    'okay=' => 'bool',
  ),
  'mongocursor::snapshot' => 
  array (
    0 => 'MongoCursor',
  ),
  'mongocursor::sort' => 
  array (
    0 => 'MongoCursor',
    'fields' => 'array<array-key, mixed>',
  ),
  'mongocursor::tailable' => 
  array (
    0 => 'MongoCursor',
    'tail=' => 'bool',
  ),
  'mongocursor::timeout' => 
  array (
    0 => 'MongoCursor',
    'ms' => 'int',
  ),
  'mongocursor::valid' => 
  array (
    0 => 'bool',
  ),
  'mongocursorexception::__clone' => 
  array (
    0 => 'void',
  ),
  'mongocursorexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Exception|Throwable|null',
  ),
  'mongocursorexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongocursorexception::__wakeup' => 
  array (
    0 => 'void',
  ),
  'mongocursorexception::getcode' => 
  array (
    0 => 'int',
  ),
  'mongocursorexception::getfile' => 
  array (
    0 => 'string',
  ),
  'mongocursorexception::gethost' => 
  array (
    0 => 'string',
  ),
  'mongocursorexception::getline' => 
  array (
    0 => 'int',
  ),
  'mongocursorexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'mongocursorexception::getprevious' => 
  array (
    0 => 'Exception|Throwable',
  ),
  'mongocursorexception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'mongocursorexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'mongocursorinterface::__construct' => 
  array (
    0 => 'void',
  ),
  'mongocursorinterface::batchsize' => 
  array (
    0 => 'MongoCursorInterface',
    'batchSize' => 'int',
  ),
  'mongocursorinterface::current' => 
  array (
    0 => 'mixed',
  ),
  'mongocursorinterface::dead' => 
  array (
    0 => 'bool',
  ),
  'mongocursorinterface::getreadpreference' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongocursorinterface::info' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongocursorinterface::key' => 
  array (
    0 => 'int|string',
  ),
  'mongocursorinterface::next' => 
  array (
    0 => 'void',
  ),
  'mongocursorinterface::rewind' => 
  array (
    0 => 'void',
  ),
  'mongocursorinterface::setreadpreference' => 
  array (
    0 => 'MongoCursorInterface',
    'read_preference' => 'string',
    'tags=' => 'array<array-key, mixed>',
  ),
  'mongocursorinterface::timeout' => 
  array (
    0 => 'MongoCursorInterface',
    'ms' => 'int',
  ),
  'mongocursorinterface::valid' => 
  array (
    0 => 'bool',
  ),
  'mongodate::__construct' => 
  array (
    0 => 'void',
    'second=' => 'int',
    'usecond=' => 'int',
  ),
  'mongodate::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodate::todatetime' => 
  array (
    0 => 'DateTime',
  ),
  'mongodb::__construct' => 
  array (
    0 => 'void',
    'conn' => 'MongoClient',
    'name' => 'string',
  ),
  'mongodb::__get' => 
  array (
    0 => 'MongoCollection',
    'name' => 'string',
  ),
  'mongodb::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb::authenticate' => 
  array (
    0 => 'array<array-key, mixed>',
    'username' => 'string',
    'password' => 'string',
  ),
  'mongodb::command' => 
  array (
    0 => 'array<array-key, mixed>',
    'command' => 'array<array-key, mixed>',
  ),
  'mongodb::createcollection' => 
  array (
    0 => 'MongoCollection',
    'name' => 'string',
    'capped=' => 'bool',
    'size=' => 'int',
    'max=' => 'int',
  ),
  'mongodb::createdbref' => 
  array (
    0 => 'array<array-key, mixed>',
    'collection' => 'string',
    'a' => 'mixed',
  ),
  'mongodb::drop' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb::dropcollection' => 
  array (
    0 => 'array<array-key, mixed>',
    'coll' => 'MongoCollection|string',
  ),
  'mongodb::execute' => 
  array (
    0 => 'array<array-key, mixed>',
    'code' => 'MongoCode|string',
    'args=' => 'array<array-key, mixed>',
  ),
  'mongodb::forceerror' => 
  array (
    0 => 'bool',
  ),
  'mongodb::getcollectioninfo' => 
  array (
    0 => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'mongodb::getcollectionnames' => 
  array (
    0 => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'mongodb::getdbref' => 
  array (
    0 => 'array<array-key, mixed>',
    'ref' => 'array<array-key, mixed>',
  ),
  'mongodb::getgridfs' => 
  array (
    0 => 'MongoGridFS',
    'prefix=' => 'string',
  ),
  'mongodb::getprofilinglevel' => 
  array (
    0 => 'int',
  ),
  'mongodb::getreadpreference' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb::getslaveokay' => 
  array (
    0 => 'bool',
  ),
  'mongodb::getwriteconcern' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb::lasterror' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb::listcollections' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb::preverror' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb::repair' => 
  array (
    0 => 'array<array-key, mixed>',
    'preserve_cloned_files=' => 'bool',
    'backup_original_files=' => 'bool',
  ),
  'mongodb::reseterror' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb::selectcollection' => 
  array (
    0 => 'MongoCollection',
    'name' => 'string',
  ),
  'mongodb::setprofilinglevel' => 
  array (
    0 => 'int',
    'level' => 'int',
  ),
  'mongodb::setreadpreference' => 
  array (
    0 => 'bool',
    'read_preference' => 'string',
    'tags=' => 'array<array-key, mixed>',
  ),
  'mongodb::setslaveokay' => 
  array (
    0 => 'bool',
    'ok=' => 'bool',
  ),
  'mongodb::setwriteconcern' => 
  array (
    0 => 'bool',
    'w' => 'mixed',
    'wtimeout=' => 'int',
  ),
  'mongodb\\bson\\binary::__construct' => 
  array (
    0 => 'void',
    'data' => 'string',
    'type=' => 'int',
  ),
  'mongodb\\bson\\binary::__serialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\binary::__set_state' => 
  array (
    0 => 'MongoDB\\BSON\\Binary',
    'properties' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\binary::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\binary::__unserialize' => 
  array (
    0 => 'void',
    'data' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\binary::getdata' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\binary::gettype' => 
  array (
    0 => 'int',
  ),
  'mongodb\\bson\\binary::jsonserialize' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\bson\\binary::serialize' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\binary::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'mongodb\\bson\\binaryinterface::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\binaryinterface::getdata' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\binaryinterface::gettype' => 
  array (
    0 => 'int',
  ),
  'mongodb\\bson\\dbpointer::__construct' => 
  array (
    0 => 'void',
  ),
  'mongodb\\bson\\dbpointer::__serialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\dbpointer::__set_state' => 
  array (
    0 => 'MongoDB\\BSON\\DBPointer',
    'properties' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\dbpointer::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\dbpointer::__unserialize' => 
  array (
    0 => 'void',
    'data' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\dbpointer::jsonserialize' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\bson\\dbpointer::serialize' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\dbpointer::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'mongodb\\bson\\decimal128::__construct' => 
  array (
    0 => 'void',
    'value' => 'string',
  ),
  'mongodb\\bson\\decimal128::__serialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\decimal128::__set_state' => 
  array (
    0 => 'MongoDB\\BSON\\Decimal128',
    'properties' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\decimal128::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\decimal128::__unserialize' => 
  array (
    0 => 'void',
    'data' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\decimal128::jsonserialize' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\bson\\decimal128::serialize' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\decimal128::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'mongodb\\bson\\decimal128interface::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\document::__construct' => 
  array (
    0 => 'void',
  ),
  'mongodb\\bson\\document::__serialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\document::__set_state' => 
  array (
    0 => 'MongoDB\\BSON\\Document',
    'properties' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\document::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\document::__unserialize' => 
  array (
    0 => 'void',
    'data' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\document::frombson' => 
  array (
    0 => 'MongoDB\\BSON\\Document',
    'bson' => 'string',
  ),
  'mongodb\\bson\\document::fromjson' => 
  array (
    0 => 'MongoDB\\BSON\\Document',
    'json' => 'string',
  ),
  'mongodb\\bson\\document::fromphp' => 
  array (
    0 => 'MongoDB\\BSON\\Document',
    'value' => 'array<array-key, mixed>|object',
  ),
  'mongodb\\bson\\document::get' => 
  array (
    0 => 'mixed',
    'key' => 'string',
  ),
  'mongodb\\bson\\document::getiterator' => 
  array (
    0 => 'MongoDB\\BSON\\Iterator',
  ),
  'mongodb\\bson\\document::has' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'mongodb\\bson\\document::offsetexists' => 
  array (
    0 => 'bool',
    'offset' => 'mixed',
  ),
  'mongodb\\bson\\document::offsetget' => 
  array (
    0 => 'mixed',
    'offset' => 'mixed',
  ),
  'mongodb\\bson\\document::offsetset' => 
  array (
    0 => 'void',
    'offset' => 'mixed',
    'value' => 'mixed',
  ),
  'mongodb\\bson\\document::offsetunset' => 
  array (
    0 => 'void',
    'offset' => 'mixed',
  ),
  'mongodb\\bson\\document::serialize' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\document::tocanonicalextendedjson' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\document::tophp' => 
  array (
    0 => 'array<array-key, mixed>|object',
    'typeMap=' => 'array<array-key, mixed>|null',
  ),
  'mongodb\\bson\\document::torelaxedextendedjson' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\document::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'mongodb\\bson\\fromjson' => 
  array (
    0 => 'string',
    'json' => 'string',
  ),
  'mongodb\\bson\\fromphp' => 
  array (
    0 => 'string',
    'value' => 'array<array-key, mixed>|object',
  ),
  'mongodb\\bson\\int64::__construct' => 
  array (
    0 => 'void',
    'value' => 'int|string',
  ),
  'mongodb\\bson\\int64::__serialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\int64::__set_state' => 
  array (
    0 => 'MongoDB\\BSON\\Int64',
    'properties' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\int64::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\int64::__unserialize' => 
  array (
    0 => 'void',
    'data' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\int64::jsonserialize' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\bson\\int64::serialize' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\int64::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'mongodb\\bson\\iterator::__construct' => 
  array (
    0 => 'void',
  ),
  'mongodb\\bson\\iterator::current' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\bson\\iterator::key' => 
  array (
    0 => 'int|string',
  ),
  'mongodb\\bson\\iterator::next' => 
  array (
    0 => 'void',
  ),
  'mongodb\\bson\\iterator::rewind' => 
  array (
    0 => 'void',
  ),
  'mongodb\\bson\\iterator::valid' => 
  array (
    0 => 'bool',
  ),
  'mongodb\\bson\\javascript::__construct' => 
  array (
    0 => 'void',
    'code' => 'string',
    'scope=' => 'array<array-key, mixed>|null|object',
  ),
  'mongodb\\bson\\javascript::__serialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\javascript::__set_state' => 
  array (
    0 => 'MongoDB\\BSON\\Javascript',
    'properties' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\javascript::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\javascript::__unserialize' => 
  array (
    0 => 'void',
    'data' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\javascript::getcode' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\javascript::getscope' => 
  array (
    0 => 'null|object',
  ),
  'mongodb\\bson\\javascript::jsonserialize' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\bson\\javascript::serialize' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\javascript::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'mongodb\\bson\\javascriptinterface::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\javascriptinterface::getcode' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\javascriptinterface::getscope' => 
  array (
    0 => 'null|object',
  ),
  'mongodb\\bson\\maxkey::__serialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\maxkey::__set_state' => 
  array (
    0 => 'MongoDB\\BSON\\MaxKey',
    'properties' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\maxkey::__unserialize' => 
  array (
    0 => 'void',
    'data' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\maxkey::jsonserialize' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\bson\\maxkey::serialize' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\maxkey::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'mongodb\\bson\\minkey::__serialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\minkey::__set_state' => 
  array (
    0 => 'MongoDB\\BSON\\MinKey',
    'properties' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\minkey::__unserialize' => 
  array (
    0 => 'void',
    'data' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\minkey::jsonserialize' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\bson\\minkey::serialize' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\minkey::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'mongodb\\bson\\objectid::__construct' => 
  array (
    0 => 'void',
    'id=' => 'null|string',
  ),
  'mongodb\\bson\\objectid::__serialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\objectid::__set_state' => 
  array (
    0 => 'MongoDB\\BSON\\ObjectId',
    'properties' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\objectid::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\objectid::__unserialize' => 
  array (
    0 => 'void',
    'data' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\objectid::gettimestamp' => 
  array (
    0 => 'int',
  ),
  'mongodb\\bson\\objectid::jsonserialize' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\bson\\objectid::serialize' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\objectid::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'mongodb\\bson\\objectidinterface::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\objectidinterface::gettimestamp' => 
  array (
    0 => 'int',
  ),
  'mongodb\\bson\\packedarray::__construct' => 
  array (
    0 => 'void',
  ),
  'mongodb\\bson\\packedarray::__serialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\packedarray::__set_state' => 
  array (
    0 => 'MongoDB\\BSON\\PackedArray',
    'properties' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\packedarray::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\packedarray::__unserialize' => 
  array (
    0 => 'void',
    'data' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\packedarray::fromjson' => 
  array (
    0 => 'MongoDB\\BSON\\PackedArray',
    'json' => 'string',
  ),
  'mongodb\\bson\\packedarray::fromphp' => 
  array (
    0 => 'MongoDB\\BSON\\PackedArray',
    'value' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\packedarray::get' => 
  array (
    0 => 'mixed',
    'index' => 'int',
  ),
  'mongodb\\bson\\packedarray::getiterator' => 
  array (
    0 => 'MongoDB\\BSON\\Iterator',
  ),
  'mongodb\\bson\\packedarray::has' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'mongodb\\bson\\packedarray::offsetexists' => 
  array (
    0 => 'bool',
    'offset' => 'mixed',
  ),
  'mongodb\\bson\\packedarray::offsetget' => 
  array (
    0 => 'mixed',
    'offset' => 'mixed',
  ),
  'mongodb\\bson\\packedarray::offsetset' => 
  array (
    0 => 'void',
    'offset' => 'mixed',
    'value' => 'mixed',
  ),
  'mongodb\\bson\\packedarray::offsetunset' => 
  array (
    0 => 'void',
    'offset' => 'mixed',
  ),
  'mongodb\\bson\\packedarray::serialize' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\packedarray::tocanonicalextendedjson' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\packedarray::tophp' => 
  array (
    0 => 'array<array-key, mixed>|object',
    'typeMap=' => 'array<array-key, mixed>|null',
  ),
  'mongodb\\bson\\packedarray::torelaxedextendedjson' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\packedarray::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'mongodb\\bson\\persistable::bsonserialize' => 
  array (
    0 => 'MongoDB\\BSON\\Document|array<array-key, mixed>|stdClass',
  ),
  'mongodb\\bson\\regex::__construct' => 
  array (
    0 => 'void',
    'pattern' => 'string',
    'flags=' => 'string',
  ),
  'mongodb\\bson\\regex::__serialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\regex::__set_state' => 
  array (
    0 => 'MongoDB\\BSON\\Regex',
    'properties' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\regex::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\regex::__unserialize' => 
  array (
    0 => 'void',
    'data' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\regex::getflags' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\regex::getpattern' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\regex::jsonserialize' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\bson\\regex::serialize' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\regex::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'mongodb\\bson\\regexinterface::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\regexinterface::getflags' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\regexinterface::getpattern' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\serializable::bsonserialize' => 
  array (
    0 => 'MongoDB\\BSON\\Document|MongoDB\\BSON\\PackedArray|array<array-key, mixed>|stdClass',
  ),
  'mongodb\\bson\\symbol::__construct' => 
  array (
    0 => 'void',
  ),
  'mongodb\\bson\\symbol::__serialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\symbol::__set_state' => 
  array (
    0 => 'MongoDB\\BSON\\Symbol',
    'properties' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\symbol::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\symbol::__unserialize' => 
  array (
    0 => 'void',
    'data' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\symbol::jsonserialize' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\bson\\symbol::serialize' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\symbol::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'mongodb\\bson\\timestamp::__construct' => 
  array (
    0 => 'void',
    'increment' => 'int|string',
    'timestamp' => 'int|string',
  ),
  'mongodb\\bson\\timestamp::__serialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\timestamp::__set_state' => 
  array (
    0 => 'MongoDB\\BSON\\Timestamp',
    'properties' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\timestamp::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\timestamp::__unserialize' => 
  array (
    0 => 'void',
    'data' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\timestamp::getincrement' => 
  array (
    0 => 'int',
  ),
  'mongodb\\bson\\timestamp::gettimestamp' => 
  array (
    0 => 'int',
  ),
  'mongodb\\bson\\timestamp::jsonserialize' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\bson\\timestamp::serialize' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\timestamp::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'mongodb\\bson\\timestampinterface::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\timestampinterface::getincrement' => 
  array (
    0 => 'int',
  ),
  'mongodb\\bson\\timestampinterface::gettimestamp' => 
  array (
    0 => 'int',
  ),
  'mongodb\\bson\\tocanonicalextendedjson' => 
  array (
    0 => 'string',
    'bson' => 'string',
  ),
  'mongodb\\bson\\tojson' => 
  array (
    0 => 'string',
    'bson' => 'string',
  ),
  'mongodb\\bson\\tophp' => 
  array (
    0 => 'array<array-key, mixed>|object',
    'bson' => 'string',
    'typemap=' => 'array<array-key, mixed>|null',
  ),
  'mongodb\\bson\\torelaxedextendedjson' => 
  array (
    0 => 'string',
    'bson' => 'string',
  ),
  'mongodb\\bson\\undefined::__construct' => 
  array (
    0 => 'void',
  ),
  'mongodb\\bson\\undefined::__serialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\undefined::__set_state' => 
  array (
    0 => 'MongoDB\\BSON\\Undefined',
    'properties' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\undefined::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\undefined::__unserialize' => 
  array (
    0 => 'void',
    'data' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\undefined::jsonserialize' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\bson\\undefined::serialize' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\undefined::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'mongodb\\bson\\unserializable::bsonunserialize' => 
  array (
    0 => 'void',
    'data' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\utcdatetime::__construct' => 
  array (
    0 => 'void',
    'milliseconds=' => 'DateTimeInterface|float|int|null|string',
  ),
  'mongodb\\bson\\utcdatetime::__serialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\utcdatetime::__set_state' => 
  array (
    0 => 'MongoDB\\BSON\\UTCDateTime',
    'properties' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\utcdatetime::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\utcdatetime::__unserialize' => 
  array (
    0 => 'void',
    'data' => 'array<array-key, mixed>',
  ),
  'mongodb\\bson\\utcdatetime::jsonserialize' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\bson\\utcdatetime::serialize' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\utcdatetime::todatetime' => 
  array (
    0 => 'DateTime',
  ),
  'mongodb\\bson\\utcdatetime::todatetimeimmutable' => 
  array (
    0 => 'DateTimeImmutable',
  ),
  'mongodb\\bson\\utcdatetime::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'mongodb\\bson\\utcdatetimeinterface::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\bson\\utcdatetimeinterface::todatetime' => 
  array (
    0 => 'DateTime',
  ),
  'mongodb\\driver\\bulkwrite::__construct' => 
  array (
    0 => 'void',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'mongodb\\driver\\bulkwrite::count' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\bulkwrite::delete' => 
  array (
    0 => 'void',
    'filter' => 'array<array-key, mixed>|object',
    'deleteOptions=' => 'array<array-key, mixed>|null',
  ),
  'mongodb\\driver\\bulkwrite::insert' => 
  array (
    0 => 'mixed',
    'document' => 'array<array-key, mixed>|object',
  ),
  'mongodb\\driver\\bulkwrite::update' => 
  array (
    0 => 'void',
    'filter' => 'array<array-key, mixed>|object',
    'newObj' => 'array<array-key, mixed>|object',
    'updateOptions=' => 'array<array-key, mixed>|null',
  ),
  'mongodb\\driver\\clientencryption::__construct' => 
  array (
    0 => 'void',
    'options' => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\clientencryption::addkeyaltname' => 
  array (
    0 => 'null|object',
    'keyId' => 'MongoDB\\BSON\\Binary',
    'keyAltName' => 'string',
  ),
  'mongodb\\driver\\clientencryption::createdatakey' => 
  array (
    0 => 'MongoDB\\BSON\\Binary',
    'kmsProvider' => 'string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'mongodb\\driver\\clientencryption::decrypt' => 
  array (
    0 => 'mixed',
    'value' => 'MongoDB\\BSON\\Binary',
  ),
  'mongodb\\driver\\clientencryption::deletekey' => 
  array (
    0 => 'object',
    'keyId' => 'MongoDB\\BSON\\Binary',
  ),
  'mongodb\\driver\\clientencryption::encrypt' => 
  array (
    0 => 'MongoDB\\BSON\\Binary',
    'value' => 'mixed',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'mongodb\\driver\\clientencryption::encryptexpression' => 
  array (
    0 => 'object',
    'expr' => 'array<array-key, mixed>|object',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'mongodb\\driver\\clientencryption::getkey' => 
  array (
    0 => 'null|object',
    'keyId' => 'MongoDB\\BSON\\Binary',
  ),
  'mongodb\\driver\\clientencryption::getkeybyaltname' => 
  array (
    0 => 'null|object',
    'keyAltName' => 'string',
  ),
  'mongodb\\driver\\clientencryption::getkeys' => 
  array (
    0 => 'MongoDB\\Driver\\Cursor',
  ),
  'mongodb\\driver\\clientencryption::removekeyaltname' => 
  array (
    0 => 'null|object',
    'keyId' => 'MongoDB\\BSON\\Binary',
    'keyAltName' => 'string',
  ),
  'mongodb\\driver\\clientencryption::rewrapmanydatakey' => 
  array (
    0 => 'object',
    'filter' => 'array<array-key, mixed>|object',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'mongodb\\driver\\command::__construct' => 
  array (
    0 => 'void',
    'document' => 'array<array-key, mixed>|object',
    'commandOptions=' => 'array<array-key, mixed>|null',
  ),
  'mongodb\\driver\\cursor::__construct' => 
  array (
    0 => 'void',
  ),
  'mongodb\\driver\\cursor::current' => 
  array (
    0 => 'array<array-key, mixed>|null|object',
  ),
  'mongodb\\driver\\cursor::getid' => 
  array (
    0 => 'MongoDB\\Driver\\CursorId',
    'asInt64=' => 'bool',
  ),
  'mongodb\\driver\\cursor::getserver' => 
  array (
    0 => 'MongoDB\\Driver\\Server',
  ),
  'mongodb\\driver\\cursor::isdead' => 
  array (
    0 => 'bool',
  ),
  'mongodb\\driver\\cursor::key' => 
  array (
    0 => 'int|null',
  ),
  'mongodb\\driver\\cursor::next' => 
  array (
    0 => 'void',
  ),
  'mongodb\\driver\\cursor::rewind' => 
  array (
    0 => 'void',
  ),
  'mongodb\\driver\\cursor::settypemap' => 
  array (
    0 => 'void',
    'typemap' => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\cursor::toarray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\cursor::valid' => 
  array (
    0 => 'bool',
  ),
  'mongodb\\driver\\cursorid::__construct' => 
  array (
    0 => 'void',
  ),
  'mongodb\\driver\\cursorid::__serialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\cursorid::__set_state' => 
  array (
    0 => 'MongoDB\\Driver\\CursorId',
    'properties' => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\cursorid::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\cursorid::__unserialize' => 
  array (
    0 => 'void',
    'data' => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\cursorid::serialize' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\cursorid::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'mongodb\\driver\\cursorinterface::getid' => 
  array (
    0 => 'MongoDB\\Driver\\CursorId',
  ),
  'mongodb\\driver\\cursorinterface::getserver' => 
  array (
    0 => 'MongoDB\\Driver\\Server',
  ),
  'mongodb\\driver\\cursorinterface::isdead' => 
  array (
    0 => 'bool',
  ),
  'mongodb\\driver\\cursorinterface::settypemap' => 
  array (
    0 => 'void',
    'typemap' => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\cursorinterface::toarray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\exception\\authenticationexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'mongodb\\driver\\exception\\authenticationexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\authenticationexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\driver\\exception\\authenticationexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\driver\\exception\\authenticationexception::getfile' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\authenticationexception::getline' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\exception\\authenticationexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\authenticationexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'mongodb\\driver\\exception\\authenticationexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\exception\\authenticationexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\authenticationexception::haserrorlabel' => 
  array (
    0 => 'bool',
    'errorLabel' => 'string',
  ),
  'mongodb\\driver\\exception\\bulkwriteexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'mongodb\\driver\\exception\\bulkwriteexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\bulkwriteexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\driver\\exception\\bulkwriteexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\driver\\exception\\bulkwriteexception::getfile' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\bulkwriteexception::getline' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\exception\\bulkwriteexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\bulkwriteexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'mongodb\\driver\\exception\\bulkwriteexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\exception\\bulkwriteexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\bulkwriteexception::getwriteresult' => 
  array (
    0 => 'MongoDB\\Driver\\WriteResult',
  ),
  'mongodb\\driver\\exception\\bulkwriteexception::haserrorlabel' => 
  array (
    0 => 'bool',
    'errorLabel' => 'string',
  ),
  'mongodb\\driver\\exception\\commandexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'mongodb\\driver\\exception\\commandexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\commandexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\driver\\exception\\commandexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\driver\\exception\\commandexception::getfile' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\commandexception::getline' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\exception\\commandexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\commandexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'mongodb\\driver\\exception\\commandexception::getresultdocument' => 
  array (
    0 => 'object',
  ),
  'mongodb\\driver\\exception\\commandexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\exception\\commandexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\commandexception::haserrorlabel' => 
  array (
    0 => 'bool',
    'errorLabel' => 'string',
  ),
  'mongodb\\driver\\exception\\connectionexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'mongodb\\driver\\exception\\connectionexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\connectionexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\driver\\exception\\connectionexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\driver\\exception\\connectionexception::getfile' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\connectionexception::getline' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\exception\\connectionexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\connectionexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'mongodb\\driver\\exception\\connectionexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\exception\\connectionexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\connectionexception::haserrorlabel' => 
  array (
    0 => 'bool',
    'errorLabel' => 'string',
  ),
  'mongodb\\driver\\exception\\connectiontimeoutexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'mongodb\\driver\\exception\\connectiontimeoutexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\connectiontimeoutexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\driver\\exception\\connectiontimeoutexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\driver\\exception\\connectiontimeoutexception::getfile' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\connectiontimeoutexception::getline' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\exception\\connectiontimeoutexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\connectiontimeoutexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'mongodb\\driver\\exception\\connectiontimeoutexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\exception\\connectiontimeoutexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\connectiontimeoutexception::haserrorlabel' => 
  array (
    0 => 'bool',
    'errorLabel' => 'string',
  ),
  'mongodb\\driver\\exception\\encryptionexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'mongodb\\driver\\exception\\encryptionexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\encryptionexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\driver\\exception\\encryptionexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\driver\\exception\\encryptionexception::getfile' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\encryptionexception::getline' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\exception\\encryptionexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\encryptionexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'mongodb\\driver\\exception\\encryptionexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\exception\\encryptionexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\encryptionexception::haserrorlabel' => 
  array (
    0 => 'bool',
    'errorLabel' => 'string',
  ),
  'mongodb\\driver\\exception\\exception::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\executiontimeoutexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'mongodb\\driver\\exception\\executiontimeoutexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\executiontimeoutexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\driver\\exception\\executiontimeoutexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\driver\\exception\\executiontimeoutexception::getfile' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\executiontimeoutexception::getline' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\exception\\executiontimeoutexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\executiontimeoutexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'mongodb\\driver\\exception\\executiontimeoutexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\exception\\executiontimeoutexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\executiontimeoutexception::haserrorlabel' => 
  array (
    0 => 'bool',
    'errorLabel' => 'string',
  ),
  'mongodb\\driver\\exception\\invalidargumentexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'mongodb\\driver\\exception\\invalidargumentexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\invalidargumentexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\driver\\exception\\invalidargumentexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\driver\\exception\\invalidargumentexception::getfile' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\invalidargumentexception::getline' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\exception\\invalidargumentexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\invalidargumentexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'mongodb\\driver\\exception\\invalidargumentexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\exception\\invalidargumentexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\logicexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'mongodb\\driver\\exception\\logicexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\logicexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\driver\\exception\\logicexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\driver\\exception\\logicexception::getfile' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\logicexception::getline' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\exception\\logicexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\logicexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'mongodb\\driver\\exception\\logicexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\exception\\logicexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\runtimeexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'mongodb\\driver\\exception\\runtimeexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\runtimeexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\driver\\exception\\runtimeexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\driver\\exception\\runtimeexception::getfile' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\runtimeexception::getline' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\exception\\runtimeexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\runtimeexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'mongodb\\driver\\exception\\runtimeexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\exception\\runtimeexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\runtimeexception::haserrorlabel' => 
  array (
    0 => 'bool',
    'errorLabel' => 'string',
  ),
  'mongodb\\driver\\exception\\serverexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'mongodb\\driver\\exception\\serverexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\serverexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\driver\\exception\\serverexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\driver\\exception\\serverexception::getfile' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\serverexception::getline' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\exception\\serverexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\serverexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'mongodb\\driver\\exception\\serverexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\exception\\serverexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\serverexception::haserrorlabel' => 
  array (
    0 => 'bool',
    'errorLabel' => 'string',
  ),
  'mongodb\\driver\\exception\\sslconnectionexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'mongodb\\driver\\exception\\sslconnectionexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\sslconnectionexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\driver\\exception\\sslconnectionexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\driver\\exception\\sslconnectionexception::getfile' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\sslconnectionexception::getline' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\exception\\sslconnectionexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\sslconnectionexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'mongodb\\driver\\exception\\sslconnectionexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\exception\\sslconnectionexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\sslconnectionexception::haserrorlabel' => 
  array (
    0 => 'bool',
    'errorLabel' => 'string',
  ),
  'mongodb\\driver\\exception\\unexpectedvalueexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'mongodb\\driver\\exception\\unexpectedvalueexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\unexpectedvalueexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\driver\\exception\\unexpectedvalueexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\driver\\exception\\unexpectedvalueexception::getfile' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\unexpectedvalueexception::getline' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\exception\\unexpectedvalueexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\unexpectedvalueexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'mongodb\\driver\\exception\\unexpectedvalueexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\exception\\unexpectedvalueexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\writeexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'mongodb\\driver\\exception\\writeexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\writeexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\driver\\exception\\writeexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'mongodb\\driver\\exception\\writeexception::getfile' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\writeexception::getline' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\exception\\writeexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\writeexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'mongodb\\driver\\exception\\writeexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\exception\\writeexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\exception\\writeexception::getwriteresult' => 
  array (
    0 => 'MongoDB\\Driver\\WriteResult',
  ),
  'mongodb\\driver\\exception\\writeexception::haserrorlabel' => 
  array (
    0 => 'bool',
    'errorLabel' => 'string',
  ),
  'mongodb\\driver\\manager::__construct' => 
  array (
    0 => 'void',
    'uri=' => 'null|string',
    'uriOptions=' => 'array<array-key, mixed>|null',
    'driverOptions=' => 'array<array-key, mixed>|null',
  ),
  'mongodb\\driver\\manager::addsubscriber' => 
  array (
    0 => 'void',
    'subscriber' => 'MongoDB\\Driver\\Monitoring\\Subscriber',
  ),
  'mongodb\\driver\\manager::createclientencryption' => 
  array (
    0 => 'MongoDB\\Driver\\ClientEncryption',
    'options' => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\manager::executebulkwrite' => 
  array (
    0 => 'MongoDB\\Driver\\WriteResult',
    'namespace' => 'string',
    'bulk' => 'MongoDB\\Driver\\BulkWrite',
    'options=' => 'MongoDB\\Driver\\WriteConcern|array<array-key, mixed>|null',
  ),
  'mongodb\\driver\\manager::executecommand' => 
  array (
    0 => 'MongoDB\\Driver\\Cursor',
    'db' => 'string',
    'command' => 'MongoDB\\Driver\\Command',
    'options=' => 'MongoDB\\Driver\\ReadPreference|array<array-key, mixed>|null',
  ),
  'mongodb\\driver\\manager::executequery' => 
  array (
    0 => 'MongoDB\\Driver\\Cursor',
    'namespace' => 'string',
    'query' => 'MongoDB\\Driver\\Query',
    'options=' => 'MongoDB\\Driver\\ReadPreference|array<array-key, mixed>|null',
  ),
  'mongodb\\driver\\manager::executereadcommand' => 
  array (
    0 => 'MongoDB\\Driver\\Cursor',
    'db' => 'string',
    'command' => 'MongoDB\\Driver\\Command',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'mongodb\\driver\\manager::executereadwritecommand' => 
  array (
    0 => 'MongoDB\\Driver\\Cursor',
    'db' => 'string',
    'command' => 'MongoDB\\Driver\\Command',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'mongodb\\driver\\manager::executewritecommand' => 
  array (
    0 => 'MongoDB\\Driver\\Cursor',
    'db' => 'string',
    'command' => 'MongoDB\\Driver\\Command',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'mongodb\\driver\\manager::getencryptedfieldsmap' => 
  array (
    0 => 'array<array-key, mixed>|null|object',
  ),
  'mongodb\\driver\\manager::getreadconcern' => 
  array (
    0 => 'MongoDB\\Driver\\ReadConcern',
  ),
  'mongodb\\driver\\manager::getreadpreference' => 
  array (
    0 => 'MongoDB\\Driver\\ReadPreference',
  ),
  'mongodb\\driver\\manager::getservers' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\manager::getwriteconcern' => 
  array (
    0 => 'MongoDB\\Driver\\WriteConcern',
  ),
  'mongodb\\driver\\manager::removesubscriber' => 
  array (
    0 => 'void',
    'subscriber' => 'MongoDB\\Driver\\Monitoring\\Subscriber',
  ),
  'mongodb\\driver\\manager::selectserver' => 
  array (
    0 => 'MongoDB\\Driver\\Server',
    'readPreference=' => 'MongoDB\\Driver\\ReadPreference|null',
  ),
  'mongodb\\driver\\manager::startsession' => 
  array (
    0 => 'MongoDB\\Driver\\Session',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'mongodb\\driver\\monitoring\\addsubscriber' => 
  array (
    0 => 'void',
    'subscriber' => 'MongoDB\\Driver\\Monitoring\\Subscriber',
  ),
  'mongodb\\driver\\monitoring\\commandfailedevent::__construct' => 
  array (
    0 => 'void',
  ),
  'mongodb\\driver\\monitoring\\commandfailedevent::getcommandname' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\monitoring\\commandfailedevent::getdatabasename' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\monitoring\\commandfailedevent::getdurationmicros' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\monitoring\\commandfailedevent::geterror' => 
  array (
    0 => 'Exception',
  ),
  'mongodb\\driver\\monitoring\\commandfailedevent::gethost' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\monitoring\\commandfailedevent::getoperationid' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\monitoring\\commandfailedevent::getport' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\monitoring\\commandfailedevent::getreply' => 
  array (
    0 => 'object',
  ),
  'mongodb\\driver\\monitoring\\commandfailedevent::getrequestid' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\monitoring\\commandfailedevent::getserver' => 
  array (
    0 => 'MongoDB\\Driver\\Server',
  ),
  'mongodb\\driver\\monitoring\\commandfailedevent::getserverconnectionid' => 
  array (
    0 => 'int|null',
  ),
  'mongodb\\driver\\monitoring\\commandfailedevent::getserviceid' => 
  array (
    0 => 'MongoDB\\BSON\\ObjectId|null',
  ),
  'mongodb\\driver\\monitoring\\commandstartedevent::__construct' => 
  array (
    0 => 'void',
  ),
  'mongodb\\driver\\monitoring\\commandstartedevent::getcommand' => 
  array (
    0 => 'object',
  ),
  'mongodb\\driver\\monitoring\\commandstartedevent::getcommandname' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\monitoring\\commandstartedevent::getdatabasename' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\monitoring\\commandstartedevent::gethost' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\monitoring\\commandstartedevent::getoperationid' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\monitoring\\commandstartedevent::getport' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\monitoring\\commandstartedevent::getrequestid' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\monitoring\\commandstartedevent::getserver' => 
  array (
    0 => 'MongoDB\\Driver\\Server',
  ),
  'mongodb\\driver\\monitoring\\commandstartedevent::getserverconnectionid' => 
  array (
    0 => 'int|null',
  ),
  'mongodb\\driver\\monitoring\\commandstartedevent::getserviceid' => 
  array (
    0 => 'MongoDB\\BSON\\ObjectId|null',
  ),
  'mongodb\\driver\\monitoring\\commandsubscriber::commandfailed' => 
  array (
    0 => 'void',
    'event' => 'MongoDB\\Driver\\Monitoring\\CommandFailedEvent',
  ),
  'mongodb\\driver\\monitoring\\commandsubscriber::commandstarted' => 
  array (
    0 => 'void',
    'event' => 'MongoDB\\Driver\\Monitoring\\CommandStartedEvent',
  ),
  'mongodb\\driver\\monitoring\\commandsubscriber::commandsucceeded' => 
  array (
    0 => 'void',
    'event' => 'MongoDB\\Driver\\Monitoring\\CommandSucceededEvent',
  ),
  'mongodb\\driver\\monitoring\\commandsucceededevent::__construct' => 
  array (
    0 => 'void',
  ),
  'mongodb\\driver\\monitoring\\commandsucceededevent::getcommandname' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\monitoring\\commandsucceededevent::getdatabasename' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\monitoring\\commandsucceededevent::getdurationmicros' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\monitoring\\commandsucceededevent::gethost' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\monitoring\\commandsucceededevent::getoperationid' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\monitoring\\commandsucceededevent::getport' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\monitoring\\commandsucceededevent::getreply' => 
  array (
    0 => 'object',
  ),
  'mongodb\\driver\\monitoring\\commandsucceededevent::getrequestid' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\monitoring\\commandsucceededevent::getserver' => 
  array (
    0 => 'MongoDB\\Driver\\Server',
  ),
  'mongodb\\driver\\monitoring\\commandsucceededevent::getserverconnectionid' => 
  array (
    0 => 'int|null',
  ),
  'mongodb\\driver\\monitoring\\commandsucceededevent::getserviceid' => 
  array (
    0 => 'MongoDB\\BSON\\ObjectId|null',
  ),
  'mongodb\\driver\\monitoring\\logsubscriber::log' => 
  array (
    0 => 'void',
    'level' => 'int',
    'domain' => 'string',
    'message' => 'string',
  ),
  'mongodb\\driver\\monitoring\\mongoc_log' => 
  array (
    0 => 'void',
    'level' => 'int',
    'domain' => 'string',
    'message' => 'string',
  ),
  'mongodb\\driver\\monitoring\\removesubscriber' => 
  array (
    0 => 'void',
    'subscriber' => 'MongoDB\\Driver\\Monitoring\\Subscriber',
  ),
  'mongodb\\driver\\monitoring\\sdamsubscriber::serverchanged' => 
  array (
    0 => 'void',
    'event' => 'MongoDB\\Driver\\Monitoring\\ServerChangedEvent',
  ),
  'mongodb\\driver\\monitoring\\sdamsubscriber::serverclosed' => 
  array (
    0 => 'void',
    'event' => 'MongoDB\\Driver\\Monitoring\\ServerClosedEvent',
  ),
  'mongodb\\driver\\monitoring\\sdamsubscriber::serverheartbeatfailed' => 
  array (
    0 => 'void',
    'event' => 'MongoDB\\Driver\\Monitoring\\ServerHeartbeatFailedEvent',
  ),
  'mongodb\\driver\\monitoring\\sdamsubscriber::serverheartbeatstarted' => 
  array (
    0 => 'void',
    'event' => 'MongoDB\\Driver\\Monitoring\\ServerHeartbeatStartedEvent',
  ),
  'mongodb\\driver\\monitoring\\sdamsubscriber::serverheartbeatsucceeded' => 
  array (
    0 => 'void',
    'event' => 'MongoDB\\Driver\\Monitoring\\ServerHeartbeatSucceededEvent',
  ),
  'mongodb\\driver\\monitoring\\sdamsubscriber::serveropening' => 
  array (
    0 => 'void',
    'event' => 'MongoDB\\Driver\\Monitoring\\ServerOpeningEvent',
  ),
  'mongodb\\driver\\monitoring\\sdamsubscriber::topologychanged' => 
  array (
    0 => 'void',
    'event' => 'MongoDB\\Driver\\Monitoring\\TopologyChangedEvent',
  ),
  'mongodb\\driver\\monitoring\\sdamsubscriber::topologyclosed' => 
  array (
    0 => 'void',
    'event' => 'MongoDB\\Driver\\Monitoring\\TopologyClosedEvent',
  ),
  'mongodb\\driver\\monitoring\\sdamsubscriber::topologyopening' => 
  array (
    0 => 'void',
    'event' => 'MongoDB\\Driver\\Monitoring\\TopologyOpeningEvent',
  ),
  'mongodb\\driver\\monitoring\\serverchangedevent::__construct' => 
  array (
    0 => 'void',
  ),
  'mongodb\\driver\\monitoring\\serverchangedevent::gethost' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\monitoring\\serverchangedevent::getnewdescription' => 
  array (
    0 => 'MongoDB\\Driver\\ServerDescription',
  ),
  'mongodb\\driver\\monitoring\\serverchangedevent::getport' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\monitoring\\serverchangedevent::getpreviousdescription' => 
  array (
    0 => 'MongoDB\\Driver\\ServerDescription',
  ),
  'mongodb\\driver\\monitoring\\serverchangedevent::gettopologyid' => 
  array (
    0 => 'MongoDB\\BSON\\ObjectId',
  ),
  'mongodb\\driver\\monitoring\\serverclosedevent::__construct' => 
  array (
    0 => 'void',
  ),
  'mongodb\\driver\\monitoring\\serverclosedevent::gethost' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\monitoring\\serverclosedevent::getport' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\monitoring\\serverclosedevent::gettopologyid' => 
  array (
    0 => 'MongoDB\\BSON\\ObjectId',
  ),
  'mongodb\\driver\\monitoring\\serverheartbeatfailedevent::__construct' => 
  array (
    0 => 'void',
  ),
  'mongodb\\driver\\monitoring\\serverheartbeatfailedevent::getdurationmicros' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\monitoring\\serverheartbeatfailedevent::geterror' => 
  array (
    0 => 'Exception',
  ),
  'mongodb\\driver\\monitoring\\serverheartbeatfailedevent::gethost' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\monitoring\\serverheartbeatfailedevent::getport' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\monitoring\\serverheartbeatfailedevent::isawaited' => 
  array (
    0 => 'bool',
  ),
  'mongodb\\driver\\monitoring\\serverheartbeatstartedevent::__construct' => 
  array (
    0 => 'void',
  ),
  'mongodb\\driver\\monitoring\\serverheartbeatstartedevent::gethost' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\monitoring\\serverheartbeatstartedevent::getport' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\monitoring\\serverheartbeatstartedevent::isawaited' => 
  array (
    0 => 'bool',
  ),
  'mongodb\\driver\\monitoring\\serverheartbeatsucceededevent::__construct' => 
  array (
    0 => 'void',
  ),
  'mongodb\\driver\\monitoring\\serverheartbeatsucceededevent::getdurationmicros' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\monitoring\\serverheartbeatsucceededevent::gethost' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\monitoring\\serverheartbeatsucceededevent::getport' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\monitoring\\serverheartbeatsucceededevent::getreply' => 
  array (
    0 => 'object',
  ),
  'mongodb\\driver\\monitoring\\serverheartbeatsucceededevent::isawaited' => 
  array (
    0 => 'bool',
  ),
  'mongodb\\driver\\monitoring\\serveropeningevent::__construct' => 
  array (
    0 => 'void',
  ),
  'mongodb\\driver\\monitoring\\serveropeningevent::gethost' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\monitoring\\serveropeningevent::getport' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\monitoring\\serveropeningevent::gettopologyid' => 
  array (
    0 => 'MongoDB\\BSON\\ObjectId',
  ),
  'mongodb\\driver\\monitoring\\topologychangedevent::__construct' => 
  array (
    0 => 'void',
  ),
  'mongodb\\driver\\monitoring\\topologychangedevent::getnewdescription' => 
  array (
    0 => 'MongoDB\\Driver\\TopologyDescription',
  ),
  'mongodb\\driver\\monitoring\\topologychangedevent::getpreviousdescription' => 
  array (
    0 => 'MongoDB\\Driver\\TopologyDescription',
  ),
  'mongodb\\driver\\monitoring\\topologychangedevent::gettopologyid' => 
  array (
    0 => 'MongoDB\\BSON\\ObjectId',
  ),
  'mongodb\\driver\\monitoring\\topologyclosedevent::__construct' => 
  array (
    0 => 'void',
  ),
  'mongodb\\driver\\monitoring\\topologyclosedevent::gettopologyid' => 
  array (
    0 => 'MongoDB\\BSON\\ObjectId',
  ),
  'mongodb\\driver\\monitoring\\topologyopeningevent::__construct' => 
  array (
    0 => 'void',
  ),
  'mongodb\\driver\\monitoring\\topologyopeningevent::gettopologyid' => 
  array (
    0 => 'MongoDB\\BSON\\ObjectId',
  ),
  'mongodb\\driver\\query::__construct' => 
  array (
    0 => 'void',
    'filter' => 'array<array-key, mixed>|object',
    'queryOptions=' => 'array<array-key, mixed>|null',
  ),
  'mongodb\\driver\\readconcern::__construct' => 
  array (
    0 => 'void',
    'level=' => 'null|string',
  ),
  'mongodb\\driver\\readconcern::__serialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\readconcern::__set_state' => 
  array (
    0 => 'MongoDB\\Driver\\ReadConcern',
    'properties' => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\readconcern::__unserialize' => 
  array (
    0 => 'void',
    'data' => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\readconcern::bsonserialize' => 
  array (
    0 => 'stdClass',
  ),
  'mongodb\\driver\\readconcern::getlevel' => 
  array (
    0 => 'null|string',
  ),
  'mongodb\\driver\\readconcern::isdefault' => 
  array (
    0 => 'bool',
  ),
  'mongodb\\driver\\readconcern::serialize' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\readconcern::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'mongodb\\driver\\readpreference::__construct' => 
  array (
    0 => 'void',
    'mode' => 'int|string',
    'tagSets=' => 'array<array-key, mixed>|null',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'mongodb\\driver\\readpreference::__serialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\readpreference::__set_state' => 
  array (
    0 => 'MongoDB\\Driver\\ReadPreference',
    'properties' => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\readpreference::__unserialize' => 
  array (
    0 => 'void',
    'data' => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\readpreference::bsonserialize' => 
  array (
    0 => 'stdClass',
  ),
  'mongodb\\driver\\readpreference::gethedge' => 
  array (
    0 => 'null|object',
  ),
  'mongodb\\driver\\readpreference::getmaxstalenessseconds' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\readpreference::getmode' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\readpreference::getmodestring' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\readpreference::gettagsets' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\readpreference::serialize' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\readpreference::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'mongodb\\driver\\server::__construct' => 
  array (
    0 => 'void',
  ),
  'mongodb\\driver\\server::executebulkwrite' => 
  array (
    0 => 'MongoDB\\Driver\\WriteResult',
    'namespace' => 'string',
    'bulkWrite' => 'MongoDB\\Driver\\BulkWrite',
    'options=' => 'MongoDB\\Driver\\WriteConcern|array<array-key, mixed>|null',
  ),
  'mongodb\\driver\\server::executecommand' => 
  array (
    0 => 'MongoDB\\Driver\\Cursor',
    'db' => 'string',
    'command' => 'MongoDB\\Driver\\Command',
    'options=' => 'MongoDB\\Driver\\ReadPreference|array<array-key, mixed>|null',
  ),
  'mongodb\\driver\\server::executequery' => 
  array (
    0 => 'MongoDB\\Driver\\Cursor',
    'namespace' => 'string',
    'query' => 'MongoDB\\Driver\\Query',
    'options=' => 'MongoDB\\Driver\\ReadPreference|array<array-key, mixed>|null',
  ),
  'mongodb\\driver\\server::executereadcommand' => 
  array (
    0 => 'MongoDB\\Driver\\Cursor',
    'db' => 'string',
    'command' => 'MongoDB\\Driver\\Command',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'mongodb\\driver\\server::executereadwritecommand' => 
  array (
    0 => 'MongoDB\\Driver\\Cursor',
    'db' => 'string',
    'command' => 'MongoDB\\Driver\\Command',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'mongodb\\driver\\server::executewritecommand' => 
  array (
    0 => 'MongoDB\\Driver\\Cursor',
    'db' => 'string',
    'command' => 'MongoDB\\Driver\\Command',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'mongodb\\driver\\server::gethost' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\server::getinfo' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\server::getlatency' => 
  array (
    0 => 'int|null',
  ),
  'mongodb\\driver\\server::getport' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\server::getserverdescription' => 
  array (
    0 => 'MongoDB\\Driver\\ServerDescription',
  ),
  'mongodb\\driver\\server::gettags' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\server::gettype' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\server::isarbiter' => 
  array (
    0 => 'bool',
  ),
  'mongodb\\driver\\server::ishidden' => 
  array (
    0 => 'bool',
  ),
  'mongodb\\driver\\server::ispassive' => 
  array (
    0 => 'bool',
  ),
  'mongodb\\driver\\server::isprimary' => 
  array (
    0 => 'bool',
  ),
  'mongodb\\driver\\server::issecondary' => 
  array (
    0 => 'bool',
  ),
  'mongodb\\driver\\serverapi::__construct' => 
  array (
    0 => 'void',
    'version' => 'string',
    'strict=' => 'bool|null',
    'deprecationErrors=' => 'bool|null',
  ),
  'mongodb\\driver\\serverapi::__serialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\serverapi::__set_state' => 
  array (
    0 => 'MongoDB\\Driver\\ServerApi',
    'properties' => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\serverapi::__unserialize' => 
  array (
    0 => 'void',
    'data' => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\serverapi::bsonserialize' => 
  array (
    0 => 'stdClass',
  ),
  'mongodb\\driver\\serverapi::serialize' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\serverapi::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'mongodb\\driver\\serverdescription::__construct' => 
  array (
    0 => 'void',
  ),
  'mongodb\\driver\\serverdescription::gethelloresponse' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\serverdescription::gethost' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\serverdescription::getlastupdatetime' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\serverdescription::getport' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\serverdescription::getroundtriptime' => 
  array (
    0 => 'int|null',
  ),
  'mongodb\\driver\\serverdescription::gettype' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\session::__construct' => 
  array (
    0 => 'void',
  ),
  'mongodb\\driver\\session::aborttransaction' => 
  array (
    0 => 'void',
  ),
  'mongodb\\driver\\session::advanceclustertime' => 
  array (
    0 => 'void',
    'clusterTime' => 'array<array-key, mixed>|object',
  ),
  'mongodb\\driver\\session::advanceoperationtime' => 
  array (
    0 => 'void',
    'operationTime' => 'MongoDB\\BSON\\TimestampInterface',
  ),
  'mongodb\\driver\\session::committransaction' => 
  array (
    0 => 'void',
  ),
  'mongodb\\driver\\session::endsession' => 
  array (
    0 => 'void',
  ),
  'mongodb\\driver\\session::getclustertime' => 
  array (
    0 => 'null|object',
  ),
  'mongodb\\driver\\session::getlogicalsessionid' => 
  array (
    0 => 'object',
  ),
  'mongodb\\driver\\session::getoperationtime' => 
  array (
    0 => 'MongoDB\\BSON\\Timestamp|null',
  ),
  'mongodb\\driver\\session::getserver' => 
  array (
    0 => 'MongoDB\\Driver\\Server|null',
  ),
  'mongodb\\driver\\session::gettransactionoptions' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'mongodb\\driver\\session::gettransactionstate' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\session::isdirty' => 
  array (
    0 => 'bool',
  ),
  'mongodb\\driver\\session::isintransaction' => 
  array (
    0 => 'bool',
  ),
  'mongodb\\driver\\session::starttransaction' => 
  array (
    0 => 'void',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'mongodb\\driver\\topologydescription::__construct' => 
  array (
    0 => 'void',
  ),
  'mongodb\\driver\\topologydescription::getservers' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\topologydescription::gettype' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\topologydescription::hasreadableserver' => 
  array (
    0 => 'bool',
    'readPreference=' => 'MongoDB\\Driver\\ReadPreference|null',
  ),
  'mongodb\\driver\\topologydescription::haswritableserver' => 
  array (
    0 => 'bool',
  ),
  'mongodb\\driver\\writeconcern::__construct' => 
  array (
    0 => 'void',
    'w' => 'int|string',
    'wtimeout=' => 'int|null',
    'journal=' => 'bool|null',
  ),
  'mongodb\\driver\\writeconcern::__serialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\writeconcern::__set_state' => 
  array (
    0 => 'MongoDB\\Driver\\WriteConcern',
    'properties' => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\writeconcern::__unserialize' => 
  array (
    0 => 'void',
    'data' => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\writeconcern::bsonserialize' => 
  array (
    0 => 'stdClass',
  ),
  'mongodb\\driver\\writeconcern::getjournal' => 
  array (
    0 => 'bool|null',
  ),
  'mongodb\\driver\\writeconcern::getw' => 
  array (
    0 => 'int|null|string',
  ),
  'mongodb\\driver\\writeconcern::getwtimeout' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\writeconcern::isdefault' => 
  array (
    0 => 'bool',
  ),
  'mongodb\\driver\\writeconcern::serialize' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\writeconcern::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'mongodb\\driver\\writeconcernerror::__construct' => 
  array (
    0 => 'void',
  ),
  'mongodb\\driver\\writeconcernerror::getcode' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\writeconcernerror::getinfo' => 
  array (
    0 => 'null|object',
  ),
  'mongodb\\driver\\writeconcernerror::getmessage' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\writeerror::__construct' => 
  array (
    0 => 'void',
  ),
  'mongodb\\driver\\writeerror::getcode' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\writeerror::getindex' => 
  array (
    0 => 'int',
  ),
  'mongodb\\driver\\writeerror::getinfo' => 
  array (
    0 => 'null|object',
  ),
  'mongodb\\driver\\writeerror::getmessage' => 
  array (
    0 => 'string',
  ),
  'mongodb\\driver\\writeresult::__construct' => 
  array (
    0 => 'void',
  ),
  'mongodb\\driver\\writeresult::getdeletedcount' => 
  array (
    0 => 'int|null',
  ),
  'mongodb\\driver\\writeresult::geterrorreplies' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\writeresult::getinsertedcount' => 
  array (
    0 => 'int|null',
  ),
  'mongodb\\driver\\writeresult::getmatchedcount' => 
  array (
    0 => 'int|null',
  ),
  'mongodb\\driver\\writeresult::getmodifiedcount' => 
  array (
    0 => 'int|null',
  ),
  'mongodb\\driver\\writeresult::getserver' => 
  array (
    0 => 'MongoDB\\Driver\\Server',
  ),
  'mongodb\\driver\\writeresult::getupsertedcount' => 
  array (
    0 => 'int|null',
  ),
  'mongodb\\driver\\writeresult::getupsertedids' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\writeresult::getwriteconcernerror' => 
  array (
    0 => 'MongoDB\\Driver\\WriteConcernError|null',
  ),
  'mongodb\\driver\\writeresult::getwriteerrors' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongodb\\driver\\writeresult::isacknowledged' => 
  array (
    0 => 'bool',
  ),
  'mongodbref::create' => 
  array (
    0 => 'array<array-key, mixed>',
    'collection' => 'string',
    'id' => 'mixed',
    'database=' => 'string',
  ),
  'mongodbref::get' => 
  array (
    0 => 'array<array-key, mixed>|null',
    'db' => 'MongoDB',
    'ref' => 'array<array-key, mixed>',
  ),
  'mongodbref::isref' => 
  array (
    0 => 'bool',
    'ref' => 'mixed',
  ),
  'mongodeletebatch::__construct' => 
  array (
    0 => 'void',
    'collection' => 'MongoCollection',
    'write_options=' => 'array<array-key, mixed>',
  ),
  'mongoexception::__clone' => 
  array (
    0 => 'void',
  ),
  'mongoexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Exception|Throwable|null',
  ),
  'mongoexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongoexception::__wakeup' => 
  array (
    0 => 'void',
  ),
  'mongoexception::getcode' => 
  array (
    0 => 'int',
  ),
  'mongoexception::getfile' => 
  array (
    0 => 'string',
  ),
  'mongoexception::getline' => 
  array (
    0 => 'int',
  ),
  'mongoexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'mongoexception::getprevious' => 
  array (
    0 => 'Exception|Throwable',
  ),
  'mongoexception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'mongoexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'mongogridfs::__construct' => 
  array (
    0 => 'void',
    'db' => 'MongoDB',
    'prefix=' => 'string',
    'chunks=' => 'mixed',
  ),
  'mongogridfs::__get' => 
  array (
    0 => 'MongoCollection',
    'name' => 'string',
  ),
  'mongogridfs::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongogridfs::aggregate' => 
  array (
    0 => 'array<array-key, mixed>',
    'pipeline' => 'array<array-key, mixed>',
    'op' => 'array<array-key, mixed>',
    'pipelineOperators' => 'array<array-key, mixed>',
  ),
  'mongogridfs::aggregatecursor' => 
  array (
    0 => 'MongoCommandCursor',
    'pipeline' => 'array<array-key, mixed>',
    'options' => 'array<array-key, mixed>',
  ),
  'mongogridfs::batchinsert' => 
  array (
    0 => 'mixed',
    'a' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'mongogridfs::count' => 
  array (
    0 => 'int',
    'query=' => 'array<array-key, mixed>|stdClass',
  ),
  'mongogridfs::createdbref' => 
  array (
    0 => 'array<array-key, mixed>',
    'a' => 'array<array-key, mixed>',
  ),
  'mongogridfs::createindex' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'mongogridfs::delete' => 
  array (
    0 => 'bool',
    'id' => 'mixed',
  ),
  'mongogridfs::deleteindex' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'array<array-key, mixed>|string',
  ),
  'mongogridfs::deleteindexes' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongogridfs::distinct' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'key' => 'string',
    'query=' => 'array<array-key, mixed>|null',
  ),
  'mongogridfs::drop' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongogridfs::ensureindex' => 
  array (
    0 => 'bool',
    'keys' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'mongogridfs::find' => 
  array (
    0 => 'MongoGridFSCursor',
    'query=' => 'array<array-key, mixed>',
    'fields=' => 'array<array-key, mixed>',
  ),
  'mongogridfs::findandmodify' => 
  array (
    0 => 'array<array-key, mixed>',
    'query' => 'array<array-key, mixed>',
    'update=' => 'array<array-key, mixed>|null',
    'fields=' => 'array<array-key, mixed>|null',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'mongogridfs::findone' => 
  array (
    0 => 'MongoGridFSFile|null',
    'query=' => 'mixed',
    'fields=' => 'mixed',
  ),
  'mongogridfs::get' => 
  array (
    0 => 'MongoGridFSFile|null',
    'id' => 'mixed',
  ),
  'mongogridfs::getdbref' => 
  array (
    0 => 'array<array-key, mixed>',
    'ref' => 'array<array-key, mixed>',
  ),
  'mongogridfs::getindexinfo' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongogridfs::getname' => 
  array (
    0 => 'string',
  ),
  'mongogridfs::getreadpreference' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongogridfs::getslaveokay' => 
  array (
    0 => 'bool',
  ),
  'mongogridfs::group' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'mixed',
    'initial' => 'array<array-key, mixed>',
    'reduce' => 'MongoCode',
    'condition=' => 'array<array-key, mixed>',
  ),
  'mongogridfs::insert' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'a' => 'array<array-key, mixed>|object',
    'options=' => 'array<array-key, mixed>',
  ),
  'mongogridfs::put' => 
  array (
    0 => 'mixed',
    'filename' => 'string',
    'extra=' => 'array<array-key, mixed>',
  ),
  'mongogridfs::remove' => 
  array (
    0 => 'bool',
    'criteria=' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'mongogridfs::save' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'a' => 'array<array-key, mixed>|object',
    'options=' => 'array<array-key, mixed>',
  ),
  'mongogridfs::setreadpreference' => 
  array (
    0 => 'bool',
    'read_preference' => 'string',
    'tags' => 'array<array-key, mixed>',
  ),
  'mongogridfs::setslaveokay' => 
  array (
    0 => 'bool',
    'ok=' => 'bool',
  ),
  'mongogridfs::storebytes' => 
  array (
    0 => 'mixed',
    'bytes' => 'string',
    'extra=' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'mongogridfs::storefile' => 
  array (
    0 => 'mixed',
    'filename' => 'string',
    'extra=' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'mongogridfs::storeupload' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'filename=' => 'string',
  ),
  'mongogridfs::toindexstring' => 
  array (
    0 => 'string',
    'keys' => 'mixed',
  ),
  'mongogridfs::update' => 
  array (
    0 => 'bool',
    'criteria' => 'array<array-key, mixed>',
    'newobj' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'mongogridfs::validate' => 
  array (
    0 => 'array<array-key, mixed>',
    'scan_data=' => 'bool',
  ),
  'mongogridfscursor::__construct' => 
  array (
    0 => 'void',
    'gridfs' => 'MongoGridFS',
    'connection' => 'resource',
    'ns' => 'string',
    'query' => 'array<array-key, mixed>',
    'fields' => 'array<array-key, mixed>',
  ),
  'mongogridfscursor::addoption' => 
  array (
    0 => 'MongoCursor',
    'key' => 'string',
    'value' => 'mixed',
  ),
  'mongogridfscursor::awaitdata' => 
  array (
    0 => 'MongoCursor',
    'wait=' => 'bool',
  ),
  'mongogridfscursor::batchsize' => 
  array (
    0 => 'MongoCursor',
    'batchSize' => 'int',
  ),
  'mongogridfscursor::count' => 
  array (
    0 => 'int',
    'all=' => 'bool',
  ),
  'mongogridfscursor::current' => 
  array (
    0 => 'MongoGridFSFile',
  ),
  'mongogridfscursor::dead' => 
  array (
    0 => 'bool',
  ),
  'mongogridfscursor::doquery' => 
  array (
    0 => 'void',
  ),
  'mongogridfscursor::explain' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongogridfscursor::fields' => 
  array (
    0 => 'MongoCursor',
    'f' => 'array<array-key, mixed>',
  ),
  'mongogridfscursor::getnext' => 
  array (
    0 => 'MongoGridFSFile',
  ),
  'mongogridfscursor::getreadpreference' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongogridfscursor::hasnext' => 
  array (
    0 => 'bool',
  ),
  'mongogridfscursor::hint' => 
  array (
    0 => 'MongoCursor',
    'key_pattern' => 'mixed',
  ),
  'mongogridfscursor::immortal' => 
  array (
    0 => 'MongoCursor',
    'liveForever=' => 'bool',
  ),
  'mongogridfscursor::info' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongogridfscursor::key' => 
  array (
    0 => 'string',
  ),
  'mongogridfscursor::limit' => 
  array (
    0 => 'MongoCursor',
    'num' => 'int',
  ),
  'mongogridfscursor::maxtimems' => 
  array (
    0 => 'MongoCursor',
    'ms' => 'int',
  ),
  'mongogridfscursor::next' => 
  array (
    0 => 'void',
  ),
  'mongogridfscursor::partial' => 
  array (
    0 => 'MongoCursor',
    'okay=' => 'bool',
  ),
  'mongogridfscursor::reset' => 
  array (
    0 => 'void',
  ),
  'mongogridfscursor::rewind' => 
  array (
    0 => 'void',
  ),
  'mongogridfscursor::setflag' => 
  array (
    0 => 'MongoCursor',
    'flag' => 'int',
    'set=' => 'bool',
  ),
  'mongogridfscursor::setreadpreference' => 
  array (
    0 => 'MongoCursor',
    'read_preference' => 'string',
    'tags' => 'array<array-key, mixed>',
  ),
  'mongogridfscursor::skip' => 
  array (
    0 => 'MongoCursor',
    'num' => 'int',
  ),
  'mongogridfscursor::slaveokay' => 
  array (
    0 => 'MongoCursor',
    'okay=' => 'bool',
  ),
  'mongogridfscursor::snapshot' => 
  array (
    0 => 'MongoCursor',
  ),
  'mongogridfscursor::sort' => 
  array (
    0 => 'MongoCursor',
    'fields' => 'array<array-key, mixed>',
  ),
  'mongogridfscursor::tailable' => 
  array (
    0 => 'MongoCursor',
    'tail=' => 'bool',
  ),
  'mongogridfscursor::timeout' => 
  array (
    0 => 'MongoCursor',
    'ms' => 'int',
  ),
  'mongogridfscursor::valid' => 
  array (
    0 => 'bool',
  ),
  'mongogridfsfile::__construct' => 
  array (
    0 => 'void',
    'gridfs' => 'MongoGridFS',
    'file' => 'array<array-key, mixed>',
  ),
  'mongogridfsfile::getbytes' => 
  array (
    0 => 'string',
  ),
  'mongogridfsfile::getfilename' => 
  array (
    0 => 'string',
  ),
  'mongogridfsfile::getresource' => 
  array (
    0 => 'resource',
  ),
  'mongogridfsfile::getsize' => 
  array (
    0 => 'int',
  ),
  'mongogridfsfile::write' => 
  array (
    0 => 'int',
    'filename=' => 'string',
  ),
  'mongoid::__construct' => 
  array (
    0 => 'void',
    'id=' => 'MongoId|string',
  ),
  'mongoid::__set_state' => 
  array (
    0 => 'MongoId',
    'props' => 'array<array-key, mixed>',
  ),
  'mongoid::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongoid::gethostname' => 
  array (
    0 => 'string',
  ),
  'mongoid::getinc' => 
  array (
    0 => 'int',
  ),
  'mongoid::getpid' => 
  array (
    0 => 'int',
  ),
  'mongoid::gettimestamp' => 
  array (
    0 => 'int',
  ),
  'mongoid::isvalid' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'mongoinsertbatch::__construct' => 
  array (
    0 => 'void',
    'collection' => 'MongoCollection',
    'write_options=' => 'array<array-key, mixed>',
  ),
  'mongoint32::__construct' => 
  array (
    0 => 'void',
    'value' => 'string',
  ),
  'mongoint32::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongoint64::__construct' => 
  array (
    0 => 'void',
    'value' => 'string',
  ),
  'mongoint64::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongolog::getcallback' => 
  array (
    0 => 'callable',
  ),
  'mongolog::getlevel' => 
  array (
    0 => 'int',
  ),
  'mongolog::getmodule' => 
  array (
    0 => 'int',
  ),
  'mongolog::setcallback' => 
  array (
    0 => 'void',
    'log_function' => 'callable',
  ),
  'mongolog::setlevel' => 
  array (
    0 => 'void',
    'level' => 'int',
  ),
  'mongolog::setmodule' => 
  array (
    0 => 'void',
    'module' => 'int',
  ),
  'mongopool::getsize' => 
  array (
    0 => 'int',
  ),
  'mongopool::info' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongopool::setsize' => 
  array (
    0 => 'bool',
    'size' => 'int',
  ),
  'mongoregex::__construct' => 
  array (
    0 => 'void',
    'regex' => 'string',
  ),
  'mongoregex::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongoresultexception::__clone' => 
  array (
    0 => 'void',
  ),
  'mongoresultexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Exception|Throwable|null',
  ),
  'mongoresultexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongoresultexception::__wakeup' => 
  array (
    0 => 'void',
  ),
  'mongoresultexception::getcode' => 
  array (
    0 => 'int',
  ),
  'mongoresultexception::getdocument' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongoresultexception::getfile' => 
  array (
    0 => 'string',
  ),
  'mongoresultexception::getline' => 
  array (
    0 => 'int',
  ),
  'mongoresultexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'mongoresultexception::getprevious' => 
  array (
    0 => 'Exception|Throwable',
  ),
  'mongoresultexception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'mongoresultexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'mongotimestamp::__construct' => 
  array (
    0 => 'void',
    'second=' => 'int',
    'inc=' => 'int',
  ),
  'mongotimestamp::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongoupdatebatch::__construct' => 
  array (
    0 => 'void',
    'collection' => 'MongoCollection',
    'write_options=' => 'array<array-key, mixed>',
  ),
  'mongoupdatebatch::add' => 
  array (
    0 => 'bool',
    'item' => 'array<array-key, mixed>',
  ),
  'mongoupdatebatch::execute' => 
  array (
    0 => 'array<array-key, mixed>',
    'write_options' => 'array<array-key, mixed>',
  ),
  'mongowritebatch::__construct' => 
  array (
    0 => 'void',
    'collection' => 'MongoCollection',
    'batch_type' => 'string',
    'write_options' => 'array<array-key, mixed>',
  ),
  'mongowritebatch::add' => 
  array (
    0 => 'bool',
    'item' => 'array<array-key, mixed>',
  ),
  'mongowritebatch::execute' => 
  array (
    0 => 'array<array-key, mixed>',
    'write_options' => 'array<array-key, mixed>',
  ),
  'mongowriteconcernexception::__clone' => 
  array (
    0 => 'void',
  ),
  'mongowriteconcernexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Exception|Throwable|null',
  ),
  'mongowriteconcernexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'mongowriteconcernexception::__wakeup' => 
  array (
    0 => 'void',
  ),
  'mongowriteconcernexception::getcode' => 
  array (
    0 => 'int',
  ),
  'mongowriteconcernexception::getdocument' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mongowriteconcernexception::getfile' => 
  array (
    0 => 'string',
  ),
  'mongowriteconcernexception::getline' => 
  array (
    0 => 'int',
  ),
  'mongowriteconcernexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'mongowriteconcernexception::getprevious' => 
  array (
    0 => 'Exception|Throwable',
  ),
  'mongowriteconcernexception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'mongowriteconcernexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'monitor_custom_event' => 
  array (
    0 => 'void',
    'class' => 'string',
    'text' => 'string',
    'severe=' => 'int',
    'user_data=' => 'mixed',
  ),
  'monitor_httperror_event' => 
  array (
    0 => 'void',
    'error_code' => 'int',
    'url' => 'string',
    'severe=' => 'int',
  ),
  'monitor_license_info' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'monitor_pass_error' => 
  array (
    0 => 'void',
    'errno' => 'int',
    'errstr' => 'string',
    'errfile' => 'string',
    'errline' => 'int',
  ),
  'monitor_set_aggregation_hint' => 
  array (
    0 => 'void',
    'hint' => 'string',
  ),
  'move_uploaded_file' => 
  array (
    0 => 'bool',
    'from' => 'string',
    'to' => 'string',
  ),
  'mqseries_back' => 
  array (
    0 => 'void',
    'hconn' => 'resource',
    'compcode' => 'resource',
    'reason' => 'resource',
  ),
  'mqseries_begin' => 
  array (
    0 => 'void',
    'hconn' => 'resource',
    'beginoptions' => 'array<array-key, mixed>',
    'compcode' => 'resource',
    'reason' => 'resource',
  ),
  'mqseries_close' => 
  array (
    0 => 'void',
    'hconn' => 'resource',
    'hobj' => 'resource',
    'options' => 'int',
    'compcode' => 'resource',
    'reason' => 'resource',
  ),
  'mqseries_cmit' => 
  array (
    0 => 'void',
    'hconn' => 'resource',
    'compcode' => 'resource',
    'reason' => 'resource',
  ),
  'mqseries_conn' => 
  array (
    0 => 'void',
    'qmanagername' => 'string',
    'hconn' => 'resource',
    'compcode' => 'resource',
    'reason' => 'resource',
  ),
  'mqseries_connx' => 
  array (
    0 => 'void',
    'qmanagername' => 'string',
    'connoptions' => 'array<array-key, mixed>',
    'hconn' => 'resource',
    'compcode' => 'resource',
    'reason' => 'resource',
  ),
  'mqseries_disc' => 
  array (
    0 => 'void',
    'hconn' => 'resource',
    'compcode' => 'resource',
    'reason' => 'resource',
  ),
  'mqseries_get' => 
  array (
    0 => 'void',
    'hconn' => 'resource',
    'hobj' => 'resource',
    'md' => 'array<array-key, mixed>',
    'gmo' => 'array<array-key, mixed>',
    'bufferlength' => 'int',
    'msg' => 'string',
    'data_length' => 'int',
    'compcode' => 'resource',
    'reason' => 'resource',
  ),
  'mqseries_inq' => 
  array (
    0 => 'void',
    'hconn' => 'resource',
    'hobj' => 'resource',
    'selectorcount' => 'int',
    'selectors' => 'array<array-key, mixed>',
    'intattrcount' => 'int',
    'intattr' => 'resource',
    'charattrlength' => 'int',
    'charattr' => 'resource',
    'compcode' => 'resource',
    'reason' => 'resource',
  ),
  'mqseries_open' => 
  array (
    0 => 'void',
    'hconn' => 'resource',
    'objdesc' => 'array<array-key, mixed>',
    'option' => 'int',
    'hobj' => 'resource',
    'compcode' => 'resource',
    'reason' => 'resource',
  ),
  'mqseries_put' => 
  array (
    0 => 'void',
    'hconn' => 'resource',
    'hobj' => 'resource',
    'md' => 'array<array-key, mixed>',
    'pmo' => 'array<array-key, mixed>',
    'message' => 'string',
    'compcode' => 'resource',
    'reason' => 'resource',
  ),
  'mqseries_put1' => 
  array (
    0 => 'void',
    'hconn' => 'resource',
    'objdesc' => 'resource',
    'msgdesc' => 'resource',
    'pmo' => 'resource',
    'buffer' => 'string',
    'compcode' => 'resource',
    'reason' => 'resource',
  ),
  'mqseries_set' => 
  array (
    0 => 'void',
    'hconn' => 'resource',
    'hobj' => 'resource',
    'selectorcount' => 'int',
    'selectors' => 'array<array-key, mixed>',
    'intattrcount' => 'int',
    'intattrs' => 'array<array-key, mixed>',
    'charattrlength' => 'int',
    'charattrs' => 'array<array-key, mixed>',
    'compcode' => 'resource',
    'reason' => 'resource',
  ),
  'mqseries_strerror' => 
  array (
    0 => 'string',
    'reason' => 'int',
  ),
  'ms_geterrorobj' => 
  array (
    0 => 'errorObj',
  ),
  'ms_getversion' => 
  array (
    0 => 'string',
  ),
  'ms_getversionint' => 
  array (
    0 => 'int',
  ),
  'ms_iogetstdoutbufferbytes' => 
  array (
    0 => 'int',
  ),
  'ms_iogetstdoutbufferstring' => 
  array (
    0 => 'void',
  ),
  'ms_ioinstallstdinfrombuffer' => 
  array (
    0 => 'void',
  ),
  'ms_ioinstallstdouttobuffer' => 
  array (
    0 => 'void',
  ),
  'ms_ioresethandlers' => 
  array (
    0 => 'void',
  ),
  'ms_iostripstdoutbuffercontentheaders' => 
  array (
    0 => 'void',
  ),
  'ms_iostripstdoutbuffercontenttype' => 
  array (
    0 => 'string',
  ),
  'ms_reseterrorlist' => 
  array (
    0 => 'void',
  ),
  'ms_tokenizemap' => 
  array (
    0 => 'array<array-key, mixed>',
    'map_file_name' => 'string',
  ),
  'msession_connect' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port' => 'string',
  ),
  'msession_count' => 
  array (
    0 => 'int',
  ),
  'msession_create' => 
  array (
    0 => 'bool',
    'session' => 'string',
    'classname=' => 'string',
    'data=' => 'string',
  ),
  'msession_destroy' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'msession_disconnect' => 
  array (
    0 => 'void',
  ),
  'msession_find' => 
  array (
    0 => 'array<array-key, mixed>',
    'name' => 'string',
    'value' => 'string',
  ),
  'msession_get' => 
  array (
    0 => 'string',
    'session' => 'string',
    'name' => 'string',
    'value' => 'string',
  ),
  'msession_get_array' => 
  array (
    0 => 'array<array-key, mixed>',
    'session' => 'string',
  ),
  'msession_get_data' => 
  array (
    0 => 'string',
    'session' => 'string',
  ),
  'msession_inc' => 
  array (
    0 => 'string',
    'session' => 'string',
    'name' => 'string',
  ),
  'msession_list' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'msession_listvar' => 
  array (
    0 => 'array<array-key, mixed>',
    'name' => 'string',
  ),
  'msession_lock' => 
  array (
    0 => 'int',
    'name' => 'string',
  ),
  'msession_plugin' => 
  array (
    0 => 'string',
    'session' => 'string',
    'value' => 'string',
    'param=' => 'string',
  ),
  'msession_randstr' => 
  array (
    0 => 'string',
    'param' => 'int',
  ),
  'msession_set' => 
  array (
    0 => 'bool',
    'session' => 'string',
    'name' => 'string',
    'value' => 'string',
  ),
  'msession_set_array' => 
  array (
    0 => 'void',
    'session' => 'string',
    'tuples' => 'array<array-key, mixed>',
  ),
  'msession_set_data' => 
  array (
    0 => 'bool',
    'session' => 'string',
    'value' => 'string',
  ),
  'msession_timeout' => 
  array (
    0 => 'int',
    'session' => 'string',
    'param=' => 'int',
  ),
  'msession_uniq' => 
  array (
    0 => 'string',
    'param' => 'int',
    'classname=' => 'string',
    'data=' => 'string',
  ),
  'msession_unlock' => 
  array (
    0 => 'int',
    'session' => 'string',
    'key' => 'int',
  ),
  'msg_get_queue' => 
  array (
    0 => 'SysvMessageQueue|false',
    'key' => 'int',
    'permissions=' => 'int',
  ),
  'msg_queue_exists' => 
  array (
    0 => 'bool',
    'key' => 'int',
  ),
  'msg_receive' => 
  array (
    0 => 'bool',
    'queue' => 'SysvMessageQueue',
    'desired_message_type' => 'int',
    '&w_received_message_type' => 'int',
    'max_message_size' => 'int',
    '&w_message' => 'mixed',
    'unserialize=' => 'bool',
    'flags=' => 'int',
    '&w_error_code=' => 'int',
  ),
  'msg_remove_queue' => 
  array (
    0 => 'bool',
    'queue' => 'SysvMessageQueue',
  ),
  'msg_send' => 
  array (
    0 => 'bool',
    'queue' => 'SysvMessageQueue',
    'message_type' => 'int',
    'message' => 'mixed',
    'serialize=' => 'bool',
    'blocking=' => 'bool',
    '&w_error_code=' => 'int',
  ),
  'msg_set_queue' => 
  array (
    0 => 'bool',
    'queue' => 'SysvMessageQueue',
    'data' => 'array<array-key, mixed>',
  ),
  'msg_stat_queue' => 
  array (
    0 => 'array<array-key, mixed>',
    'queue' => 'SysvMessageQueue',
  ),
  'msgfmt_create' => 
  array (
    0 => 'MessageFormatter|null',
    'locale' => 'string',
    'pattern' => 'string',
  ),
  'msgfmt_format' => 
  array (
    0 => 'false|string',
    'formatter' => 'MessageFormatter',
    'values' => 'array<array-key, mixed>',
  ),
  'msgfmt_format_message' => 
  array (
    0 => 'false|string',
    'locale' => 'string',
    'pattern' => 'string',
    'values' => 'array<array-key, mixed>',
  ),
  'msgfmt_get_error_code' => 
  array (
    0 => 'int',
    'formatter' => 'MessageFormatter',
  ),
  'msgfmt_get_error_message' => 
  array (
    0 => 'string',
    'formatter' => 'MessageFormatter',
  ),
  'msgfmt_get_locale' => 
  array (
    0 => 'string',
    'formatter' => 'MessageFormatter',
  ),
  'msgfmt_get_pattern' => 
  array (
    0 => 'string',
    'formatter' => 'MessageFormatter',
  ),
  'msgfmt_parse' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'formatter' => 'MessageFormatter',
    'string' => 'string',
  ),
  'msgfmt_parse_message' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'locale' => 'string',
    'pattern' => 'string',
    'message' => 'string',
  ),
  'msgfmt_set_pattern' => 
  array (
    0 => 'bool',
    'formatter' => 'MessageFormatter',
    'pattern' => 'string',
  ),
  'msql_affected_rows' => 
  array (
    0 => 'int',
    'result' => 'resource',
  ),
  'msql_close' => 
  array (
    0 => 'bool',
    'link_identifier=' => 'null|resource',
  ),
  'msql_connect' => 
  array (
    0 => 'resource',
    'hostname=' => 'string',
  ),
  'msql_create_db' => 
  array (
    0 => 'bool',
    'database_name' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'msql_data_seek' => 
  array (
    0 => 'bool',
    'result' => 'resource',
    'row_number' => 'int',
  ),
  'msql_db_query' => 
  array (
    0 => 'resource',
    'database' => 'string',
    'query' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'msql_drop_db' => 
  array (
    0 => 'bool',
    'database_name' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'msql_error' => 
  array (
    0 => 'string',
  ),
  'msql_fetch_array' => 
  array (
    0 => 'array<array-key, mixed>',
    'result' => 'resource',
    'result_type=' => 'int',
  ),
  'msql_fetch_field' => 
  array (
    0 => 'object',
    'result' => 'resource',
    'field_offset=' => 'int',
  ),
  'msql_fetch_object' => 
  array (
    0 => 'object',
    'result' => 'resource',
  ),
  'msql_fetch_row' => 
  array (
    0 => 'array<array-key, mixed>',
    'result' => 'resource',
  ),
  'msql_field_flags' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'field_offset' => 'int',
  ),
  'msql_field_len' => 
  array (
    0 => 'int',
    'result' => 'resource',
    'field_offset' => 'int',
  ),
  'msql_field_name' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'field_offset' => 'int',
  ),
  'msql_field_seek' => 
  array (
    0 => 'bool',
    'result' => 'resource',
    'field_offset' => 'int',
  ),
  'msql_field_table' => 
  array (
    0 => 'int',
    'result' => 'resource',
    'field_offset' => 'int',
  ),
  'msql_field_type' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'field_offset' => 'int',
  ),
  'msql_free_result' => 
  array (
    0 => 'bool',
    'result' => 'resource',
  ),
  'msql_list_dbs' => 
  array (
    0 => 'resource',
    'link_identifier=' => 'null|resource',
  ),
  'msql_list_fields' => 
  array (
    0 => 'resource',
    'database' => 'string',
    'tablename' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'msql_list_tables' => 
  array (
    0 => 'resource',
    'database' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'msql_num_fields' => 
  array (
    0 => 'int',
    'result' => 'resource',
  ),
  'msql_num_rows' => 
  array (
    0 => 'int',
    'query_identifier' => 'resource',
  ),
  'msql_pconnect' => 
  array (
    0 => 'resource',
    'hostname=' => 'string',
  ),
  'msql_query' => 
  array (
    0 => 'resource',
    'query' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'msql_result' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'row' => 'int',
    'field=' => 'mixed',
  ),
  'msql_select_db' => 
  array (
    0 => 'bool',
    'database_name' => 'string',
    'link_identifier=' => 'null|resource',
  ),
  'mt_getrandmax' => 
  array (
    0 => 'int<1, max>',
  ),
  'mt_rand' => 
  array (
    0 => 'int',
    'min=' => 'int',
    'max=' => 'int',
  ),
  'mt_rand\'1' => 
  array (
    0 => 'int',
  ),
  'mt_srand' => 
  array (
    0 => 'void',
    'seed=' => 'int',
    'mode=' => 'int',
  ),
  'multipleiterator::__construct' => 
  array (
    0 => 'void',
    'flags=' => 'int',
  ),
  'multipleiterator::__debuginfo' => 
  array (
    0 => 'mixed',
  ),
  'multipleiterator::attachiterator' => 
  array (
    0 => 'void',
    'iterator' => 'Iterator',
    'info=' => 'int|null|string',
  ),
  'multipleiterator::containsiterator' => 
  array (
    0 => 'bool',
    'iterator' => 'Iterator',
  ),
  'multipleiterator::countiterators' => 
  array (
    0 => 'int',
  ),
  'multipleiterator::current' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'multipleiterator::detachiterator' => 
  array (
    0 => 'void',
    'iterator' => 'Iterator',
  ),
  'multipleiterator::getflags' => 
  array (
    0 => 'int',
  ),
  'multipleiterator::key' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'multipleiterator::next' => 
  array (
    0 => 'void',
  ),
  'multipleiterator::rewind' => 
  array (
    0 => 'void',
  ),
  'multipleiterator::setflags' => 
  array (
    0 => 'void',
    'flags' => 'int',
  ),
  'multipleiterator::valid' => 
  array (
    0 => 'bool',
  ),
  'mutex::create' => 
  array (
    0 => 'long',
    'lock=' => 'bool',
  ),
  'mutex::destroy' => 
  array (
    0 => 'bool',
    'mutex' => 'long',
  ),
  'mutex::lock' => 
  array (
    0 => 'bool',
    'mutex' => 'long',
  ),
  'mutex::trylock' => 
  array (
    0 => 'bool',
    'mutex' => 'long',
  ),
  'mutex::unlock' => 
  array (
    0 => 'bool',
    'mutex' => 'long',
    'destroy=' => 'bool',
  ),
  'mysql_xdevapi\\baseresult::getwarnings' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\baseresult::getwarningscount' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\collection::add' => 
  array (
    0 => 'mysql_xdevapi\\CollectionAdd',
    'document' => 'mixed',
  ),
  'mysql_xdevapi\\collection::addorreplaceone' => 
  array (
    0 => 'mysql_xdevapi\\Result',
    'id' => 'string',
    'doc' => 'string',
  ),
  'mysql_xdevapi\\collection::count' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\collection::createindex' => 
  array (
    0 => 'void',
    'index_name' => 'string',
    'index_desc_json' => 'string',
  ),
  'mysql_xdevapi\\collection::dropindex' => 
  array (
    0 => 'bool',
    'index_name' => 'string',
  ),
  'mysql_xdevapi\\collection::existsindatabase' => 
  array (
    0 => 'bool',
  ),
  'mysql_xdevapi\\collection::find' => 
  array (
    0 => 'mysql_xdevapi\\CollectionFind',
    'search_condition=' => 'string',
  ),
  'mysql_xdevapi\\collection::getname' => 
  array (
    0 => 'string',
  ),
  'mysql_xdevapi\\collection::getone' => 
  array (
    0 => 'Document',
    'id' => 'string',
  ),
  'mysql_xdevapi\\collection::getschema' => 
  array (
    0 => 'mysql_xdevapi\\schema',
  ),
  'mysql_xdevapi\\collection::getsession' => 
  array (
    0 => 'Session',
  ),
  'mysql_xdevapi\\collection::modify' => 
  array (
    0 => 'mysql_xdevapi\\CollectionModify',
    'search_condition' => 'string',
  ),
  'mysql_xdevapi\\collection::remove' => 
  array (
    0 => 'mysql_xdevapi\\CollectionRemove',
    'search_condition' => 'string',
  ),
  'mysql_xdevapi\\collection::removeone' => 
  array (
    0 => 'mysql_xdevapi\\Result',
    'id' => 'string',
  ),
  'mysql_xdevapi\\collection::replaceone' => 
  array (
    0 => 'mysql_xdevapi\\Result',
    'id' => 'string',
    'doc' => 'string',
  ),
  'mysql_xdevapi\\collectionadd::execute' => 
  array (
    0 => 'mysql_xdevapi\\Result',
  ),
  'mysql_xdevapi\\collectionfind::bind' => 
  array (
    0 => 'mysql_xdevapi\\CollectionFind',
    'placeholder_values' => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\collectionfind::execute' => 
  array (
    0 => 'mysql_xdevapi\\DocResult',
  ),
  'mysql_xdevapi\\collectionfind::fields' => 
  array (
    0 => 'mysql_xdevapi\\CollectionFind',
    'projection' => 'string',
  ),
  'mysql_xdevapi\\collectionfind::groupby' => 
  array (
    0 => 'mysql_xdevapi\\CollectionFind',
    'sort_expr' => 'string',
  ),
  'mysql_xdevapi\\collectionfind::having' => 
  array (
    0 => 'mysql_xdevapi\\CollectionFind',
    'sort_expr' => 'string',
  ),
  'mysql_xdevapi\\collectionfind::limit' => 
  array (
    0 => 'mysql_xdevapi\\CollectionFind',
    'rows' => 'int',
  ),
  'mysql_xdevapi\\collectionfind::lockexclusive' => 
  array (
    0 => 'mysql_xdevapi\\CollectionFind',
    'lock_waiting_option=' => 'int',
  ),
  'mysql_xdevapi\\collectionfind::lockshared' => 
  array (
    0 => 'mysql_xdevapi\\CollectionFind',
    'lock_waiting_option=' => 'int',
  ),
  'mysql_xdevapi\\collectionfind::offset' => 
  array (
    0 => 'mysql_xdevapi\\CollectionFind',
    'position' => 'int',
  ),
  'mysql_xdevapi\\collectionfind::sort' => 
  array (
    0 => 'mysql_xdevapi\\CollectionFind',
    'sort_expr' => 'string',
  ),
  'mysql_xdevapi\\collectionmodify::arrayappend' => 
  array (
    0 => 'mysql_xdevapi\\CollectionModify',
    'collection_field' => 'string',
    'expression_or_literal' => 'string',
  ),
  'mysql_xdevapi\\collectionmodify::arrayinsert' => 
  array (
    0 => 'mysql_xdevapi\\CollectionModify',
    'collection_field' => 'string',
    'expression_or_literal' => 'string',
  ),
  'mysql_xdevapi\\collectionmodify::bind' => 
  array (
    0 => 'mysql_xdevapi\\CollectionModify',
    'placeholder_values' => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\collectionmodify::execute' => 
  array (
    0 => 'mysql_xdevapi\\Result',
  ),
  'mysql_xdevapi\\collectionmodify::limit' => 
  array (
    0 => 'mysql_xdevapi\\CollectionModify',
    'rows' => 'int',
  ),
  'mysql_xdevapi\\collectionmodify::patch' => 
  array (
    0 => 'mysql_xdevapi\\CollectionModify',
    'document' => 'string',
  ),
  'mysql_xdevapi\\collectionmodify::replace' => 
  array (
    0 => 'mysql_xdevapi\\CollectionModify',
    'collection_field' => 'string',
    'expression_or_literal' => 'string',
  ),
  'mysql_xdevapi\\collectionmodify::set' => 
  array (
    0 => 'mysql_xdevapi\\CollectionModify',
    'collection_field' => 'string',
    'expression_or_literal' => 'string',
  ),
  'mysql_xdevapi\\collectionmodify::skip' => 
  array (
    0 => 'mysql_xdevapi\\CollectionModify',
    'position' => 'int',
  ),
  'mysql_xdevapi\\collectionmodify::sort' => 
  array (
    0 => 'mysql_xdevapi\\CollectionModify',
    'sort_expr' => 'string',
  ),
  'mysql_xdevapi\\collectionmodify::unset' => 
  array (
    0 => 'mysql_xdevapi\\CollectionModify',
    'fields' => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\collectionremove::bind' => 
  array (
    0 => 'mysql_xdevapi\\CollectionRemove',
    'placeholder_values' => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\collectionremove::execute' => 
  array (
    0 => 'mysql_xdevapi\\Result',
  ),
  'mysql_xdevapi\\collectionremove::limit' => 
  array (
    0 => 'mysql_xdevapi\\CollectionRemove',
    'rows' => 'int',
  ),
  'mysql_xdevapi\\collectionremove::sort' => 
  array (
    0 => 'mysql_xdevapi\\CollectionRemove',
    'sort_expr' => 'string',
  ),
  'mysql_xdevapi\\columnresult::getcharactersetname' => 
  array (
    0 => 'string',
  ),
  'mysql_xdevapi\\columnresult::getcollationname' => 
  array (
    0 => 'string',
  ),
  'mysql_xdevapi\\columnresult::getcolumnlabel' => 
  array (
    0 => 'string',
  ),
  'mysql_xdevapi\\columnresult::getcolumnname' => 
  array (
    0 => 'string',
  ),
  'mysql_xdevapi\\columnresult::getfractionaldigits' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\columnresult::getlength' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\columnresult::getschemaname' => 
  array (
    0 => 'string',
  ),
  'mysql_xdevapi\\columnresult::gettablelabel' => 
  array (
    0 => 'string',
  ),
  'mysql_xdevapi\\columnresult::gettablename' => 
  array (
    0 => 'string',
  ),
  'mysql_xdevapi\\columnresult::gettype' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\columnresult::isnumbersigned' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\columnresult::ispadded' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\crudoperationbindable::bind' => 
  array (
    0 => 'mysql_xdevapi\\CrudOperationBindable',
    'placeholder_values' => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\crudoperationlimitable::limit' => 
  array (
    0 => 'mysql_xdevapi\\CrudOperationLimitable',
    'rows' => 'int',
  ),
  'mysql_xdevapi\\crudoperationskippable::skip' => 
  array (
    0 => 'mysql_xdevapi\\CrudOperationSkippable',
    'skip' => 'int',
  ),
  'mysql_xdevapi\\crudoperationsortable::sort' => 
  array (
    0 => 'mysql_xdevapi\\CrudOperationSortable',
    'sort_expr' => 'string',
  ),
  'mysql_xdevapi\\databaseobject::existsindatabase' => 
  array (
    0 => 'bool',
  ),
  'mysql_xdevapi\\databaseobject::getname' => 
  array (
    0 => 'string',
  ),
  'mysql_xdevapi\\databaseobject::getsession' => 
  array (
    0 => 'mysql_xdevapi\\Session',
  ),
  'mysql_xdevapi\\docresult::fetchall' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\docresult::fetchone' => 
  array (
    0 => 'object',
  ),
  'mysql_xdevapi\\docresult::getwarnings' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\docresult::getwarningscount' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\executable::execute' => 
  array (
    0 => 'mysql_xdevapi\\Result',
  ),
  'mysql_xdevapi\\getsession' => 
  array (
    0 => 'mysql_xdevapi\\Session',
    'uri' => 'string',
  ),
  'mysql_xdevapi\\result::getautoincrementvalue' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\result::getgeneratedids' => 
  array (
    0 => 'ArrayOfInt',
  ),
  'mysql_xdevapi\\result::getwarnings' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\result::getwarningscount' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\rowresult::fetchall' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\rowresult::fetchone' => 
  array (
    0 => 'object',
  ),
  'mysql_xdevapi\\rowresult::getcolumncount' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\rowresult::getcolumnnames' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\rowresult::getcolumns' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\rowresult::getwarnings' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\rowresult::getwarningscount' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\schema::createcollection' => 
  array (
    0 => 'mysql_xdevapi\\Collection',
    'name' => 'string',
  ),
  'mysql_xdevapi\\schema::dropcollection' => 
  array (
    0 => 'bool',
    'collection_name' => 'string',
  ),
  'mysql_xdevapi\\schema::existsindatabase' => 
  array (
    0 => 'bool',
  ),
  'mysql_xdevapi\\schema::getcollection' => 
  array (
    0 => 'mysql_xdevapi\\Collection',
    'name' => 'string',
  ),
  'mysql_xdevapi\\schema::getcollectionastable' => 
  array (
    0 => 'mysql_xdevapi\\Table',
    'name' => 'string',
  ),
  'mysql_xdevapi\\schema::getcollections' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\schema::getname' => 
  array (
    0 => 'string',
  ),
  'mysql_xdevapi\\schema::getsession' => 
  array (
    0 => 'mysql_xdevapi\\Session',
  ),
  'mysql_xdevapi\\schema::gettable' => 
  array (
    0 => 'mysql_xdevapi\\Table',
    'name' => 'string',
  ),
  'mysql_xdevapi\\schema::gettables' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\schemaobject::getschema' => 
  array (
    0 => 'mysql_xdevapi\\Schema',
  ),
  'mysql_xdevapi\\session::close' => 
  array (
    0 => 'bool',
  ),
  'mysql_xdevapi\\session::commit' => 
  array (
    0 => 'object',
  ),
  'mysql_xdevapi\\session::createschema' => 
  array (
    0 => 'mysql_xdevapi\\Schema',
    'schema_name' => 'string',
  ),
  'mysql_xdevapi\\session::dropschema' => 
  array (
    0 => 'bool',
    'schema_name' => 'string',
  ),
  'mysql_xdevapi\\session::executesql' => 
  array (
    0 => 'object',
    'statement' => 'string',
  ),
  'mysql_xdevapi\\session::generateuuid' => 
  array (
    0 => 'string',
  ),
  'mysql_xdevapi\\session::getclientid' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\session::getschema' => 
  array (
    0 => 'mysql_xdevapi\\Schema',
    'schema_name' => 'string',
  ),
  'mysql_xdevapi\\session::getschemas' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\session::getserverversion' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\session::killclient' => 
  array (
    0 => 'object',
    'client_id' => 'int',
  ),
  'mysql_xdevapi\\session::listclients' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\session::quotename' => 
  array (
    0 => 'string',
    'name' => 'string',
  ),
  'mysql_xdevapi\\session::releasesavepoint' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'mysql_xdevapi\\session::rollback' => 
  array (
    0 => 'void',
  ),
  'mysql_xdevapi\\session::rollbackto' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'mysql_xdevapi\\session::setsavepoint' => 
  array (
    0 => 'string',
    'name=' => 'string',
  ),
  'mysql_xdevapi\\session::sql' => 
  array (
    0 => 'mysql_xdevapi\\SqlStatement',
    'query' => 'string',
  ),
  'mysql_xdevapi\\session::starttransaction' => 
  array (
    0 => 'void',
  ),
  'mysql_xdevapi\\sqlstatement::bind' => 
  array (
    0 => 'mysql_xdevapi\\SqlStatement',
    'param' => 'string',
  ),
  'mysql_xdevapi\\sqlstatement::execute' => 
  array (
    0 => 'mysql_xdevapi\\Result',
  ),
  'mysql_xdevapi\\sqlstatement::getnextresult' => 
  array (
    0 => 'mysql_xdevapi\\Result',
  ),
  'mysql_xdevapi\\sqlstatement::getresult' => 
  array (
    0 => 'mysql_xdevapi\\Result',
  ),
  'mysql_xdevapi\\sqlstatement::hasmoreresults' => 
  array (
    0 => 'bool',
  ),
  'mysql_xdevapi\\sqlstatementresult::fetchall' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\sqlstatementresult::fetchone' => 
  array (
    0 => 'object',
  ),
  'mysql_xdevapi\\sqlstatementresult::getaffecteditemscount' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\sqlstatementresult::getcolumncount' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\sqlstatementresult::getcolumnnames' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\sqlstatementresult::getcolumns' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\sqlstatementresult::getgeneratedids' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\sqlstatementresult::getlastinsertid' => 
  array (
    0 => 'string',
  ),
  'mysql_xdevapi\\sqlstatementresult::getwarnings' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\sqlstatementresult::getwarningscount' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\sqlstatementresult::hasdata' => 
  array (
    0 => 'bool',
  ),
  'mysql_xdevapi\\sqlstatementresult::nextresult' => 
  array (
    0 => 'mysql_xdevapi\\Result',
  ),
  'mysql_xdevapi\\statement::getnextresult' => 
  array (
    0 => 'mysql_xdevapi\\Result',
  ),
  'mysql_xdevapi\\statement::getresult' => 
  array (
    0 => 'mysql_xdevapi\\Result',
  ),
  'mysql_xdevapi\\statement::hasmoreresults' => 
  array (
    0 => 'bool',
  ),
  'mysql_xdevapi\\table::count' => 
  array (
    0 => 'int',
  ),
  'mysql_xdevapi\\table::delete' => 
  array (
    0 => 'mysql_xdevapi\\TableDelete',
  ),
  'mysql_xdevapi\\table::existsindatabase' => 
  array (
    0 => 'bool',
  ),
  'mysql_xdevapi\\table::getname' => 
  array (
    0 => 'string',
  ),
  'mysql_xdevapi\\table::getschema' => 
  array (
    0 => 'mysql_xdevapi\\Schema',
  ),
  'mysql_xdevapi\\table::getsession' => 
  array (
    0 => 'mysql_xdevapi\\Session',
  ),
  'mysql_xdevapi\\table::insert' => 
  array (
    0 => 'mysql_xdevapi\\TableInsert',
    'columns' => 'mixed',
    '...args=' => 'mixed',
  ),
  'mysql_xdevapi\\table::isview' => 
  array (
    0 => 'bool',
  ),
  'mysql_xdevapi\\table::select' => 
  array (
    0 => 'mysql_xdevapi\\TableSelect',
    'columns' => 'mixed',
    '...args=' => 'mixed',
  ),
  'mysql_xdevapi\\table::update' => 
  array (
    0 => 'mysql_xdevapi\\TableUpdate',
  ),
  'mysql_xdevapi\\tabledelete::bind' => 
  array (
    0 => 'mysql_xdevapi\\TableDelete',
    'placeholder_values' => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\tabledelete::execute' => 
  array (
    0 => 'mysql_xdevapi\\Result',
  ),
  'mysql_xdevapi\\tabledelete::limit' => 
  array (
    0 => 'mysql_xdevapi\\TableDelete',
    'rows' => 'int',
  ),
  'mysql_xdevapi\\tabledelete::offset' => 
  array (
    0 => 'mysql_xdevapi\\TableDelete',
    'position' => 'int',
  ),
  'mysql_xdevapi\\tabledelete::orderby' => 
  array (
    0 => 'mysql_xdevapi\\TableDelete',
    'orderby_expr' => 'string',
  ),
  'mysql_xdevapi\\tabledelete::where' => 
  array (
    0 => 'mysql_xdevapi\\TableDelete',
    'where_expr' => 'string',
  ),
  'mysql_xdevapi\\tableinsert::execute' => 
  array (
    0 => 'mysql_xdevapi\\Result',
  ),
  'mysql_xdevapi\\tableinsert::values' => 
  array (
    0 => 'mysql_xdevapi\\TableInsert',
    'row_values' => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\tableselect::bind' => 
  array (
    0 => 'mysql_xdevapi\\TableSelect',
    'placeholder_values' => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\tableselect::execute' => 
  array (
    0 => 'mysql_xdevapi\\RowResult',
  ),
  'mysql_xdevapi\\tableselect::groupby' => 
  array (
    0 => 'mysql_xdevapi\\TableSelect',
    'sort_expr' => 'mixed',
  ),
  'mysql_xdevapi\\tableselect::having' => 
  array (
    0 => 'mysql_xdevapi\\TableSelect',
    'sort_expr' => 'string',
  ),
  'mysql_xdevapi\\tableselect::limit' => 
  array (
    0 => 'mysql_xdevapi\\TableSelect',
    'rows' => 'int',
  ),
  'mysql_xdevapi\\tableselect::lockexclusive' => 
  array (
    0 => 'mysql_xdevapi\\TableSelect',
    'lock_waiting_option=' => 'int',
  ),
  'mysql_xdevapi\\tableselect::lockshared' => 
  array (
    0 => 'mysql_xdevapi\\TableSelect',
    'lock_waiting_option=' => 'int',
  ),
  'mysql_xdevapi\\tableselect::offset' => 
  array (
    0 => 'mysql_xdevapi\\TableSelect',
    'position' => 'int',
  ),
  'mysql_xdevapi\\tableselect::orderby' => 
  array (
    0 => 'mysql_xdevapi\\TableSelect',
    'sort_expr' => 'mixed',
    '...args=' => 'mixed',
  ),
  'mysql_xdevapi\\tableselect::where' => 
  array (
    0 => 'mysql_xdevapi\\TableSelect',
    'where_expr' => 'string',
  ),
  'mysql_xdevapi\\tableupdate::bind' => 
  array (
    0 => 'mysql_xdevapi\\TableUpdate',
    'placeholder_values' => 'array<array-key, mixed>',
  ),
  'mysql_xdevapi\\tableupdate::execute' => 
  array (
    0 => 'mysql_xdevapi\\TableUpdate',
  ),
  'mysql_xdevapi\\tableupdate::limit' => 
  array (
    0 => 'mysql_xdevapi\\TableUpdate',
    'rows' => 'int',
  ),
  'mysql_xdevapi\\tableupdate::orderby' => 
  array (
    0 => 'mysql_xdevapi\\TableUpdate',
    'orderby_expr' => 'mixed',
    '...args=' => 'mixed',
  ),
  'mysql_xdevapi\\tableupdate::set' => 
  array (
    0 => 'mysql_xdevapi\\TableUpdate',
    'table_field' => 'string',
    'expression_or_literal' => 'string',
  ),
  'mysql_xdevapi\\tableupdate::where' => 
  array (
    0 => 'mysql_xdevapi\\TableUpdate',
    'where_expr' => 'string',
  ),
  'mysqli::__construct' => 
  array (
    0 => 'void',
    'hostname=' => 'null|string',
    'username=' => 'null|string',
    'password=' => 'null|string',
    'database=' => 'null|string',
    'port=' => 'int|null',
    'socket=' => 'null|string',
  ),
  'mysqli::autocommit' => 
  array (
    0 => 'bool',
    'enable' => 'bool',
  ),
  'mysqli::begin_transaction' => 
  array (
    0 => 'bool',
    'flags=' => 'int',
    'name=' => 'null|string',
  ),
  'mysqli::change_user' => 
  array (
    0 => 'bool',
    'username' => 'string',
    'password' => 'string',
    'database' => 'null|string',
  ),
  'mysqli::character_set_name' => 
  array (
    0 => 'string',
  ),
  'mysqli::close' => 
  array (
    0 => 'true',
  ),
  'mysqli::commit' => 
  array (
    0 => 'bool',
    'flags=' => 'int',
    'name=' => 'null|string',
  ),
  'mysqli::connect' => 
  array (
    0 => 'false|null',
    'hostname=' => 'null|string',
    'username=' => 'null|string',
    'password=' => 'null|string',
    'database=' => 'null|string',
    'port=' => 'int|null',
    'socket=' => 'null|string',
  ),
  'mysqli::debug' => 
  array (
    0 => 'true',
    'options' => 'string',
  ),
  'mysqli::dump_debug_info' => 
  array (
    0 => 'bool',
  ),
  'mysqli::escape_string' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'mysqli::get_charset' => 
  array (
    0 => 'object',
  ),
  'mysqli::get_client_info' => 
  array (
    0 => 'string',
  ),
  'mysqli::get_connection_stats' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysqli::get_warnings' => 
  array (
    0 => 'mysqli_warning',
  ),
  'mysqli::init' => 
  array (
    0 => 'false|null',
  ),
  'mysqli::kill' => 
  array (
    0 => 'bool',
    'process_id' => 'int',
  ),
  'mysqli::more_results' => 
  array (
    0 => 'bool',
  ),
  'mysqli::multi_query' => 
  array (
    0 => 'bool',
    'query' => 'string',
  ),
  'mysqli::next_result' => 
  array (
    0 => 'bool',
  ),
  'mysqli::options' => 
  array (
    0 => 'bool',
    'option' => 'int',
    'value' => 'int|string',
  ),
  'mysqli::ping' => 
  array (
    0 => 'bool',
  ),
  'mysqli::poll' => 
  array (
    0 => 'false|int',
    '&w_read' => 'array<array-key, mixed>|null',
    '&w_error' => 'array<array-key, mixed>|null',
    '&w_reject' => 'array<array-key, mixed>',
    'seconds' => 'int',
    'microseconds=' => 'int',
  ),
  'mysqli::prepare' => 
  array (
    0 => 'false|mysqli_stmt',
    'query' => 'string',
  ),
  'mysqli::query' => 
  array (
    0 => 'bool|mysqli_result',
    'query' => 'string',
    'result_mode=' => 'int',
  ),
  'mysqli::real_connect' => 
  array (
    0 => 'bool',
    'hostname=' => 'null|string',
    'username=' => 'null|string',
    'password=' => 'null|string',
    'database=' => 'null|string',
    'port=' => 'int|null',
    'socket=' => 'null|string',
    'flags=' => 'int',
  ),
  'mysqli::real_escape_string' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'mysqli::real_query' => 
  array (
    0 => 'bool',
    'query' => 'string',
  ),
  'mysqli::reap_async_query' => 
  array (
    0 => 'false|mysqli_result',
  ),
  'mysqli::refresh' => 
  array (
    0 => 'bool',
    'flags' => 'int',
  ),
  'mysqli::release_savepoint' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'mysqli::rollback' => 
  array (
    0 => 'bool',
    'flags=' => 'int',
    'name=' => 'null|string',
  ),
  'mysqli::savepoint' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'mysqli::select_db' => 
  array (
    0 => 'bool',
    'database' => 'string',
  ),
  'mysqli::set_charset' => 
  array (
    0 => 'bool',
    'charset' => 'string',
  ),
  'mysqli::set_opt' => 
  array (
    0 => 'bool',
    'option' => 'int',
    'value' => 'int|string',
  ),
  'mysqli::ssl_set' => 
  array (
    0 => 'true',
    'key' => 'null|string',
    'certificate' => 'null|string',
    'ca_certificate' => 'null|string',
    'ca_path' => 'null|string',
    'cipher_algos' => 'null|string',
  ),
  'mysqli::stat' => 
  array (
    0 => 'false|string',
  ),
  'mysqli::stmt_init' => 
  array (
    0 => 'mysqli_stmt',
  ),
  'mysqli::store_result' => 
  array (
    0 => 'false|mysqli_result',
    'mode=' => 'int',
  ),
  'mysqli::thread_safe' => 
  array (
    0 => 'bool',
  ),
  'mysqli::use_result' => 
  array (
    0 => 'false|mysqli_result',
  ),
  'mysqli_affected_rows' => 
  array (
    0 => 'int<-1, max>|numeric-string',
    'mysql' => 'mysqli',
  ),
  'mysqli_autocommit' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'enable' => 'bool',
  ),
  'mysqli_begin_transaction' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'flags=' => 'int',
    'name=' => 'null|string',
  ),
  'mysqli_change_user' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'username' => 'string',
    'password' => 'string',
    'database' => 'null|string',
  ),
  'mysqli_character_set_name' => 
  array (
    0 => 'string',
    'mysql' => 'mysqli',
  ),
  'mysqli_close' => 
  array (
    0 => 'true',
    'mysql' => 'mysqli',
  ),
  'mysqli_commit' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'flags=' => 'int',
    'name=' => 'null|string',
  ),
  'mysqli_connect' => 
  array (
    0 => 'false|mysqli',
    'hostname=' => 'null|string',
    'username=' => 'null|string',
    'password=' => 'null|string',
    'database=' => 'null|string',
    'port=' => 'int|null',
    'socket=' => 'null|string',
  ),
  'mysqli_connect_errno' => 
  array (
    0 => 'int',
  ),
  'mysqli_connect_error' => 
  array (
    0 => 'null|string',
  ),
  'mysqli_data_seek' => 
  array (
    0 => 'bool',
    'result' => 'mysqli_result',
    'offset' => 'int',
  ),
  'mysqli_debug' => 
  array (
    0 => 'true',
    'options' => 'string',
  ),
  'mysqli_disable_reads_from_master' => 
  array (
    0 => 'bool',
    'link' => 'mysqli',
  ),
  'mysqli_disable_rpl_parse' => 
  array (
    0 => 'bool',
    'link' => 'mysqli',
  ),
  'mysqli_dump_debug_info' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
  ),
  'mysqli_embedded_server_end' => 
  array (
    0 => 'void',
  ),
  'mysqli_embedded_server_start' => 
  array (
    0 => 'bool',
    'start' => 'int',
    'arguments' => 'array<array-key, mixed>',
    'groups' => 'array<array-key, mixed>',
  ),
  'mysqli_enable_reads_from_master' => 
  array (
    0 => 'bool',
    'link' => 'mysqli',
  ),
  'mysqli_enable_rpl_parse' => 
  array (
    0 => 'bool',
    'link' => 'mysqli',
  ),
  'mysqli_errno' => 
  array (
    0 => 'int',
    'mysql' => 'mysqli',
  ),
  'mysqli_error' => 
  array (
    0 => 'string',
    'mysql' => 'mysqli',
  ),
  'mysqli_error_list' => 
  array (
    0 => 'array<array-key, mixed>',
    'mysql' => 'mysqli',
  ),
  'mysqli_escape_string' => 
  array (
    0 => 'string',
    'mysql' => 'mysqli',
    'string' => 'string',
  ),
  'mysqli_execute' => 
  array (
    0 => 'bool',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_fetch_all' => 
  array (
    0 => 'list<array<array-key, float|int|null|string>>',
    'result' => 'mysqli_result',
    'mode=' => '3',
  ),
  'mysqli_fetch_all\'1' => 
  array (
    0 => 'list<array<string, float|int|null|string>>',
    'result' => 'mysqli_result',
    'mode=' => '1',
  ),
  'mysqli_fetch_all\'2' => 
  array (
    0 => 'list<list<float|int|null|string>>',
    'result' => 'mysqli_result',
    'mode=' => '2',
  ),
  'mysqli_fetch_array' => 
  array (
    0 => 'array<array-key, float|int|null|string>|false|null',
    'result' => 'mysqli_result',
    'mode=' => '3',
  ),
  'mysqli_fetch_array\'1' => 
  array (
    0 => 'array<string, float|int|null|string>|false|null',
    'result' => 'mysqli_result',
    'mode=' => '1',
  ),
  'mysqli_fetch_array\'2' => 
  array (
    0 => 'false|list<float|int|null|string>|null',
    'result' => 'mysqli_result',
    'mode=' => '2',
  ),
  'mysqli_fetch_assoc' => 
  array (
    0 => 'array<string, float|int|null|string>|false|null',
    'result' => 'mysqli_result',
  ),
  'mysqli_fetch_field' => 
  array (
    0 => 'false|object{name:string, orgname:string, table:string, orgtable:string, max_length:int, length:int, charsetnr:int, flags:int, type:int, decimals:int, db:string, def:\'\', catalog:\'def\'}',
    'result' => 'mysqli_result',
  ),
  'mysqli_fetch_field_direct' => 
  array (
    0 => 'false|object{name:string, orgname:string, table:string, orgtable:string, max_length:int, length:int, charsetnr:int, flags:int, type:int, decimals:int, db:string, def:\'\', catalog:\'def\'}',
    'result' => 'mysqli_result',
    'index' => 'int',
  ),
  'mysqli_fetch_fields' => 
  array (
    0 => 'list<object{name:string, orgname:string, table:string, orgtable:string, max_length:int, length:int, charsetnr:int, flags:int, type:int, decimals:int, db:string, def:\'\', catalog:\'def\'}>',
    'result' => 'mysqli_result',
  ),
  'mysqli_fetch_lengths' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'result' => 'mysqli_result',
  ),
  'mysqli_fetch_object' => 
  array (
    0 => 'false|null|object',
    'result' => 'mysqli_result',
    'class=' => 'string',
    'constructor_args=' => 'array<array-key, mixed>',
  ),
  'mysqli_fetch_row' => 
  array (
    0 => 'false|list<float|int|null|string>|null',
    'result' => 'mysqli_result',
  ),
  'mysqli_field_count' => 
  array (
    0 => 'int',
    'mysql' => 'mysqli',
  ),
  'mysqli_field_seek' => 
  array (
    0 => 'true',
    'result' => 'mysqli_result',
    'index' => 'int',
  ),
  'mysqli_field_tell' => 
  array (
    0 => 'int',
    'result' => 'mysqli_result',
  ),
  'mysqli_free_result' => 
  array (
    0 => 'void',
    'result' => 'mysqli_result',
  ),
  'mysqli_get_cache_stats' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'mysqli_get_charset' => 
  array (
    0 => 'null|object',
    'mysql' => 'mysqli',
  ),
  'mysqli_get_client_info' => 
  array (
    0 => 'string',
    'mysql=' => 'mysqli|null',
  ),
  'mysqli_get_client_stats' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysqli_get_client_version' => 
  array (
    0 => 'int',
  ),
  'mysqli_get_connection_stats' => 
  array (
    0 => 'array<array-key, mixed>',
    'mysql' => 'mysqli',
  ),
  'mysqli_get_host_info' => 
  array (
    0 => 'string',
    'mysql' => 'mysqli',
  ),
  'mysqli_get_links_stats' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysqli_get_proto_info' => 
  array (
    0 => 'int',
    'mysql' => 'mysqli',
  ),
  'mysqli_get_server_info' => 
  array (
    0 => 'string',
    'mysql' => 'mysqli',
  ),
  'mysqli_get_server_version' => 
  array (
    0 => 'int',
    'mysql' => 'mysqli',
  ),
  'mysqli_get_warnings' => 
  array (
    0 => 'mysqli_warning',
    'mysql' => 'mysqli',
  ),
  'mysqli_info' => 
  array (
    0 => 'null|string',
    'mysql' => 'mysqli',
  ),
  'mysqli_init' => 
  array (
    0 => 'false|mysqli',
  ),
  'mysqli_insert_id' => 
  array (
    0 => 'int|string',
    'mysql' => 'mysqli',
  ),
  'mysqli_kill' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'process_id' => 'int',
  ),
  'mysqli_link_construct' => 
  array (
    0 => 'object',
  ),
  'mysqli_master_query' => 
  array (
    0 => 'bool',
    'link' => 'mysqli',
    'query' => 'string',
  ),
  'mysqli_more_results' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
  ),
  'mysqli_multi_query' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'query' => 'string',
  ),
  'mysqli_next_result' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
  ),
  'mysqli_num_fields' => 
  array (
    0 => 'int',
    'result' => 'mysqli_result',
  ),
  'mysqli_num_rows' => 
  array (
    0 => 'int<0, max>|numeric-string',
    'result' => 'mysqli_result',
  ),
  'mysqli_options' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'option' => 'int',
    'value' => 'int|string',
  ),
  'mysqli_ping' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
  ),
  'mysqli_poll' => 
  array (
    0 => 'false|int',
    '&w_read' => 'array<array-key, mixed>|null',
    '&w_error' => 'array<array-key, mixed>|null',
    '&w_reject' => 'array<array-key, mixed>',
    'seconds' => 'int',
    'microseconds=' => 'int',
  ),
  'mysqli_prepare' => 
  array (
    0 => 'false|mysqli_stmt',
    'mysql' => 'mysqli',
    'query' => 'string',
  ),
  'mysqli_query' => 
  array (
    0 => 'bool|mysqli_result',
    'mysql' => 'mysqli',
    'query' => 'string',
    'result_mode=' => 'int',
  ),
  'mysqli_real_connect' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'hostname=' => 'null|string',
    'username=' => 'null|string',
    'password=' => 'null|string',
    'database=' => 'null|string',
    'port=' => 'int|null',
    'socket=' => 'null|string',
    'flags=' => 'int',
  ),
  'mysqli_real_escape_string' => 
  array (
    0 => 'string',
    'mysql' => 'mysqli',
    'string' => 'string',
  ),
  'mysqli_real_query' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'query' => 'string',
  ),
  'mysqli_reap_async_query' => 
  array (
    0 => 'false|mysqli_result',
    'mysql' => 'mysqli',
  ),
  'mysqli_refresh' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'flags' => 'int',
  ),
  'mysqli_release_savepoint' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'name' => 'string',
  ),
  'mysqli_report' => 
  array (
    0 => 'bool',
    'flags' => 'int',
  ),
  'mysqli_result::__construct' => 
  array (
    0 => 'void',
    'mysql' => 'mysqli',
    'result_mode=' => 'int',
  ),
  'mysqli_result::close' => 
  array (
    0 => 'void',
  ),
  'mysqli_result::data_seek' => 
  array (
    0 => 'bool',
    'offset' => 'int',
  ),
  'mysqli_result::fetch_all' => 
  array (
    0 => 'list<array<array-key, float|int|null|string>>',
    'mode=' => '3',
  ),
  'mysqli_result::fetch_all\'1' => 
  array (
    0 => 'list<array<string, float|int|null|string>>',
    'mode=' => '1',
  ),
  'mysqli_result::fetch_all\'2' => 
  array (
    0 => 'list<list<float|int|null|string>>',
    'mode=' => '2',
  ),
  'mysqli_result::fetch_array' => 
  array (
    0 => 'array<array-key, float|int|null|string>|false|null',
    'mode=' => '3',
  ),
  'mysqli_result::fetch_array\'1' => 
  array (
    0 => 'array<string, float|int|null|string>|false|null',
    'mode=' => '1',
  ),
  'mysqli_result::fetch_array\'2' => 
  array (
    0 => 'false|list<float|int|null|string>|null',
    'mode=' => '2',
  ),
  'mysqli_result::fetch_assoc' => 
  array (
    0 => 'array<string, float|int|null|string>|false|null',
  ),
  'mysqli_result::fetch_field' => 
  array (
    0 => 'false|object{name:string, orgname:string, table:string, orgtable:string, max_length:int, length:int, charsetnr:int, flags:int, type:int, decimals:int, db:string, def:\'\', catalog:\'def\'}',
  ),
  'mysqli_result::fetch_field_direct' => 
  array (
    0 => 'false|object{name:string, orgname:string, table:string, orgtable:string, max_length:int, length:int, charsetnr:int, flags:int, type:int, decimals:int, db:string, def:\'\', catalog:\'def\'}',
    'index' => 'int',
  ),
  'mysqli_result::fetch_fields' => 
  array (
    0 => 'list<object{name:string, orgname:string, table:string, orgtable:string, max_length:int, length:int, charsetnr:int, flags:int, type:int, decimals:int, db:string, def:\'\', catalog:\'def\'}>',
  ),
  'mysqli_result::fetch_object' => 
  array (
    0 => 'false|null|object',
    'class=' => 'string',
    'constructor_args=' => 'array<array-key, mixed>',
  ),
  'mysqli_result::fetch_row' => 
  array (
    0 => 'false|list<float|int|null|string>|null',
  ),
  'mysqli_result::field_seek' => 
  array (
    0 => 'true',
    'index' => 'int',
  ),
  'mysqli_result::free' => 
  array (
    0 => 'void',
  ),
  'mysqli_result::free_result' => 
  array (
    0 => 'void',
  ),
  'mysqli_rollback' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'flags=' => 'int',
    'name=' => 'null|string',
  ),
  'mysqli_rpl_parse_enabled' => 
  array (
    0 => 'int',
    'link' => 'mysqli',
  ),
  'mysqli_rpl_probe' => 
  array (
    0 => 'bool',
    'link' => 'mysqli',
  ),
  'mysqli_rpl_query_type' => 
  array (
    0 => 'int',
    'link' => 'mysqli',
    'query' => 'string',
  ),
  'mysqli_savepoint' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'name' => 'string',
  ),
  'mysqli_savepoint_libmysql' => 
  array (
    0 => 'bool',
  ),
  'mysqli_select_db' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'database' => 'string',
  ),
  'mysqli_send_query' => 
  array (
    0 => 'bool',
    'link' => 'mysqli',
    'query' => 'string',
  ),
  'mysqli_set_charset' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'charset' => 'string',
  ),
  'mysqli_set_local_infile_default' => 
  array (
    0 => 'void',
    'link' => 'mysqli',
  ),
  'mysqli_set_local_infile_handler' => 
  array (
    0 => 'bool',
    'link' => 'mysqli',
    'read_func' => 'callable',
  ),
  'mysqli_set_opt' => 
  array (
    0 => 'bool',
    'mysql' => 'mysqli',
    'option' => 'int',
    'value' => 'int|string',
  ),
  'mysqli_slave_query' => 
  array (
    0 => 'bool',
    'link' => 'mysqli',
    'query' => 'string',
  ),
  'mysqli_sqlstate' => 
  array (
    0 => 'string',
    'mysql' => 'mysqli',
  ),
  'mysqli_ssl_set' => 
  array (
    0 => 'true',
    'mysql' => 'mysqli',
    'key' => 'null|string',
    'certificate' => 'null|string',
    'ca_certificate' => 'null|string',
    'ca_path' => 'null|string',
    'cipher_algos' => 'null|string',
  ),
  'mysqli_stat' => 
  array (
    0 => 'false|string',
    'mysql' => 'mysqli',
  ),
  'mysqli_stmt::__construct' => 
  array (
    0 => 'void',
    'mysql' => 'mysqli',
    'query=' => 'null|string',
  ),
  'mysqli_stmt::attr_get' => 
  array (
    0 => 'int',
    'attribute' => 'int',
  ),
  'mysqli_stmt::attr_set' => 
  array (
    0 => 'bool',
    'attribute' => 'int',
    'value' => 'int',
  ),
  'mysqli_stmt::bind_param' => 
  array (
    0 => 'bool',
    'types' => 'string',
    '&var' => 'mixed',
    '&...vars=' => 'mixed',
  ),
  'mysqli_stmt::bind_result' => 
  array (
    0 => 'bool',
    '&w_var1' => 'mixed',
    '&...w_vars=' => 'mixed',
  ),
  'mysqli_stmt::close' => 
  array (
    0 => 'true',
  ),
  'mysqli_stmt::data_seek' => 
  array (
    0 => 'void',
    'offset' => 'int',
  ),
  'mysqli_stmt::execute' => 
  array (
    0 => 'bool',
  ),
  'mysqli_stmt::fetch' => 
  array (
    0 => 'bool|null',
  ),
  'mysqli_stmt::free_result' => 
  array (
    0 => 'void',
  ),
  'mysqli_stmt::get_result' => 
  array (
    0 => 'false|mysqli_result',
  ),
  'mysqli_stmt::get_warnings' => 
  array (
    0 => 'object',
  ),
  'mysqli_stmt::more_results' => 
  array (
    0 => 'bool',
  ),
  'mysqli_stmt::next_result' => 
  array (
    0 => 'bool',
  ),
  'mysqli_stmt::num_rows' => 
  array (
    0 => 'int<0, max>|numeric-string',
  ),
  'mysqli_stmt::prepare' => 
  array (
    0 => 'bool',
    'query' => 'string',
  ),
  'mysqli_stmt::reset' => 
  array (
    0 => 'bool',
  ),
  'mysqli_stmt::result_metadata' => 
  array (
    0 => 'false|mysqli_result',
  ),
  'mysqli_stmt::send_long_data' => 
  array (
    0 => 'bool',
    'param_num' => 'int',
    'data' => 'string',
  ),
  'mysqli_stmt::store_result' => 
  array (
    0 => 'bool',
  ),
  'mysqli_stmt_affected_rows' => 
  array (
    0 => 'int<-1, max>|numeric-string',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_attr_get' => 
  array (
    0 => 'int',
    'statement' => 'mysqli_stmt',
    'attribute' => 'int',
  ),
  'mysqli_stmt_attr_set' => 
  array (
    0 => 'bool',
    'statement' => 'mysqli_stmt',
    'attribute' => 'int',
    'value' => 'int',
  ),
  'mysqli_stmt_bind_param' => 
  array (
    0 => 'bool',
    'statement' => 'mysqli_stmt',
    'types' => 'string',
    '&var' => 'mixed',
    '&...vars=' => 'mixed',
  ),
  'mysqli_stmt_bind_result' => 
  array (
    0 => 'bool',
    'statement' => 'mysqli_stmt',
    '&w_var1' => 'mixed',
    '&...w_vars=' => 'mixed',
  ),
  'mysqli_stmt_close' => 
  array (
    0 => 'true',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_data_seek' => 
  array (
    0 => 'void',
    'statement' => 'mysqli_stmt',
    'offset' => 'int',
  ),
  'mysqli_stmt_errno' => 
  array (
    0 => 'int',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_error' => 
  array (
    0 => 'string',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_error_list' => 
  array (
    0 => 'array<array-key, mixed>',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_execute' => 
  array (
    0 => 'bool',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_fetch' => 
  array (
    0 => 'bool|null',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_field_count' => 
  array (
    0 => 'int',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_free_result' => 
  array (
    0 => 'void',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_get_result' => 
  array (
    0 => 'false|mysqli_result',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_get_warnings' => 
  array (
    0 => 'object',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_init' => 
  array (
    0 => 'mysqli_stmt',
    'mysql' => 'mysqli',
  ),
  'mysqli_stmt_insert_id' => 
  array (
    0 => 'mixed',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_more_results' => 
  array (
    0 => 'bool',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_next_result' => 
  array (
    0 => 'bool',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_num_rows' => 
  array (
    0 => 'int',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_param_count' => 
  array (
    0 => 'int',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_prepare' => 
  array (
    0 => 'bool',
    'statement' => 'mysqli_stmt',
    'query' => 'string',
  ),
  'mysqli_stmt_reset' => 
  array (
    0 => 'bool',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_result_metadata' => 
  array (
    0 => 'false|mysqli_result',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_send_long_data' => 
  array (
    0 => 'bool',
    'statement' => 'mysqli_stmt',
    'param_num' => 'int',
    'data' => 'string',
  ),
  'mysqli_stmt_sqlstate' => 
  array (
    0 => 'string',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_stmt_store_result' => 
  array (
    0 => 'bool',
    'statement' => 'mysqli_stmt',
  ),
  'mysqli_store_result' => 
  array (
    0 => 'false|mysqli_result',
    'mysql' => 'mysqli',
    'mode=' => 'int',
  ),
  'mysqli_thread_id' => 
  array (
    0 => 'int',
    'mysql' => 'mysqli',
  ),
  'mysqli_thread_safe' => 
  array (
    0 => 'bool',
  ),
  'mysqli_use_result' => 
  array (
    0 => 'false|mysqli_result',
    'mysql' => 'mysqli',
  ),
  'mysqli_warning::__construct' => 
  array (
    0 => 'void',
  ),
  'mysqli_warning::next' => 
  array (
    0 => 'bool',
  ),
  'mysqli_warning_count' => 
  array (
    0 => 'int',
    'mysql' => 'mysqli',
  ),
  'mysqlnd_memcache_get_config' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'mixed',
  ),
  'mysqlnd_memcache_set' => 
  array (
    0 => 'bool',
    'mysql_connection' => 'mixed',
    'memcache_connection=' => 'Memcached',
    'pattern=' => 'string',
    'callback=' => 'callable',
  ),
  'mysqlnd_ms_dump_servers' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'mixed',
  ),
  'mysqlnd_ms_fabric_select_global' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'mixed',
    'table_name' => 'mixed',
  ),
  'mysqlnd_ms_fabric_select_shard' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'mixed',
    'table_name' => 'mixed',
    'shard_key' => 'mixed',
  ),
  'mysqlnd_ms_get_last_gtid' => 
  array (
    0 => 'string',
    'connection' => 'mixed',
  ),
  'mysqlnd_ms_get_last_used_connection' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'mixed',
  ),
  'mysqlnd_ms_get_stats' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysqlnd_ms_match_wild' => 
  array (
    0 => 'bool',
    'table_name' => 'string',
    'wildcard' => 'string',
  ),
  'mysqlnd_ms_query_is_select' => 
  array (
    0 => 'int',
    'query' => 'string',
  ),
  'mysqlnd_ms_set_qos' => 
  array (
    0 => 'bool',
    'connection' => 'mixed',
    'service_level' => 'int',
    'service_level_option=' => 'int',
    'option_value=' => 'mixed',
  ),
  'mysqlnd_ms_set_user_pick_server' => 
  array (
    0 => 'bool',
    'function' => 'string',
  ),
  'mysqlnd_ms_xa_begin' => 
  array (
    0 => 'int',
    'connection' => 'mixed',
    'gtrid' => 'string',
    'timeout=' => 'int',
  ),
  'mysqlnd_ms_xa_commit' => 
  array (
    0 => 'int',
    'connection' => 'mixed',
    'gtrid' => 'string',
  ),
  'mysqlnd_ms_xa_gc' => 
  array (
    0 => 'int',
    'connection' => 'mixed',
    'gtrid=' => 'string',
    'ignore_max_retries=' => 'bool',
  ),
  'mysqlnd_ms_xa_rollback' => 
  array (
    0 => 'int',
    'connection' => 'mixed',
    'gtrid' => 'string',
  ),
  'mysqlnd_qc_change_handler' => 
  array (
    0 => 'bool',
    'handler' => 'mixed',
  ),
  'mysqlnd_qc_clear_cache' => 
  array (
    0 => 'bool',
  ),
  'mysqlnd_qc_get_available_handlers' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysqlnd_qc_get_cache_info' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysqlnd_qc_get_core_stats' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysqlnd_qc_get_handler' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysqlnd_qc_get_normalized_query_trace_log' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysqlnd_qc_get_query_trace_log' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'mysqlnd_qc_set_cache_condition' => 
  array (
    0 => 'bool',
    'condition_type' => 'int',
    'condition' => 'mixed',
    'condition_option' => 'mixed',
  ),
  'mysqlnd_qc_set_is_select' => 
  array (
    0 => 'mixed',
    'callback' => 'string',
  ),
  'mysqlnd_qc_set_storage_handler' => 
  array (
    0 => 'bool',
    'handler' => 'string',
  ),
  'mysqlnd_qc_set_user_handlers' => 
  array (
    0 => 'bool',
    'get_hash' => 'string',
    'find_query_in_cache' => 'string',
    'return_to_cache' => 'string',
    'add_query_to_cache_if_not_exists' => 'string',
    'query_is_select' => 'string',
    'update_query_run_time_stats' => 'string',
    'get_stats' => 'string',
    'clear_cache' => 'string',
  ),
  'mysqlnd_uh_convert_to_mysqlnd' => 
  array (
    0 => 'resource',
    '&rw_mysql_connection' => 'mysqli',
  ),
  'mysqlnd_uh_set_connection_proxy' => 
  array (
    0 => 'bool',
    '&rw_connection_proxy' => 'MysqlndUhConnection',
    '&rw_mysqli_connection=' => 'mysqli',
  ),
  'mysqlnd_uh_set_statement_proxy' => 
  array (
    0 => 'bool',
    '&rw_statement_proxy' => 'MysqlndUhStatement',
  ),
  'mysqlnduhconnection::__construct' => 
  array (
    0 => 'void',
  ),
  'mysqlnduhconnection::changeuser' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
    'user' => 'string',
    'password' => 'string',
    'database' => 'string',
    'silent' => 'bool',
    'passwd_len' => 'int',
  ),
  'mysqlnduhconnection::charsetname' => 
  array (
    0 => 'string',
    'connection' => 'mysqlnd_connection',
  ),
  'mysqlnduhconnection::close' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
    'close_type' => 'int',
  ),
  'mysqlnduhconnection::connect' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
    'host' => 'string',
    'use' => 'string',
    'password' => 'string',
    'database' => 'string',
    'port' => 'int',
    'socket' => 'string',
    'mysql_flags' => 'int',
  ),
  'mysqlnduhconnection::endpsession' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
  ),
  'mysqlnduhconnection::escapestring' => 
  array (
    0 => 'string',
    'connection' => 'mysqlnd_connection',
    'escape_string' => 'string',
  ),
  'mysqlnduhconnection::getaffectedrows' => 
  array (
    0 => 'int',
    'connection' => 'mysqlnd_connection',
  ),
  'mysqlnduhconnection::geterrornumber' => 
  array (
    0 => 'int',
    'connection' => 'mysqlnd_connection',
  ),
  'mysqlnduhconnection::geterrorstring' => 
  array (
    0 => 'string',
    'connection' => 'mysqlnd_connection',
  ),
  'mysqlnduhconnection::getfieldcount' => 
  array (
    0 => 'int',
    'connection' => 'mysqlnd_connection',
  ),
  'mysqlnduhconnection::gethostinformation' => 
  array (
    0 => 'string',
    'connection' => 'mysqlnd_connection',
  ),
  'mysqlnduhconnection::getlastinsertid' => 
  array (
    0 => 'int',
    'connection' => 'mysqlnd_connection',
  ),
  'mysqlnduhconnection::getlastmessage' => 
  array (
    0 => 'void',
    'connection' => 'mysqlnd_connection',
  ),
  'mysqlnduhconnection::getprotocolinformation' => 
  array (
    0 => 'string',
    'connection' => 'mysqlnd_connection',
  ),
  'mysqlnduhconnection::getserverinformation' => 
  array (
    0 => 'string',
    'connection' => 'mysqlnd_connection',
  ),
  'mysqlnduhconnection::getserverstatistics' => 
  array (
    0 => 'string',
    'connection' => 'mysqlnd_connection',
  ),
  'mysqlnduhconnection::getserverversion' => 
  array (
    0 => 'int',
    'connection' => 'mysqlnd_connection',
  ),
  'mysqlnduhconnection::getsqlstate' => 
  array (
    0 => 'string',
    'connection' => 'mysqlnd_connection',
  ),
  'mysqlnduhconnection::getstatistics' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'mysqlnd_connection',
  ),
  'mysqlnduhconnection::getthreadid' => 
  array (
    0 => 'int',
    'connection' => 'mysqlnd_connection',
  ),
  'mysqlnduhconnection::getwarningcount' => 
  array (
    0 => 'int',
    'connection' => 'mysqlnd_connection',
  ),
  'mysqlnduhconnection::init' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
  ),
  'mysqlnduhconnection::killconnection' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
    'pid' => 'int',
  ),
  'mysqlnduhconnection::listfields' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection' => 'mysqlnd_connection',
    'table' => 'string',
    'achtung_wild' => 'string',
  ),
  'mysqlnduhconnection::listmethod' => 
  array (
    0 => 'void',
    'connection' => 'mysqlnd_connection',
    'query' => 'string',
    'achtung_wild' => 'string',
    'par1' => 'string',
  ),
  'mysqlnduhconnection::moreresults' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
  ),
  'mysqlnduhconnection::nextresult' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
  ),
  'mysqlnduhconnection::ping' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
  ),
  'mysqlnduhconnection::query' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
    'query' => 'string',
  ),
  'mysqlnduhconnection::queryreadresultsetheader' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
    'mysqlnd_stmt' => 'mysqlnd_statement',
  ),
  'mysqlnduhconnection::reapquery' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
  ),
  'mysqlnduhconnection::refreshserver' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
    'options' => 'int',
  ),
  'mysqlnduhconnection::restartpsession' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
  ),
  'mysqlnduhconnection::selectdb' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
    'database' => 'string',
  ),
  'mysqlnduhconnection::sendclose' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
  ),
  'mysqlnduhconnection::sendquery' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
    'query' => 'string',
  ),
  'mysqlnduhconnection::serverdumpdebuginformation' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
  ),
  'mysqlnduhconnection::setautocommit' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
    'mode' => 'int',
  ),
  'mysqlnduhconnection::setcharset' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
    'charset' => 'string',
  ),
  'mysqlnduhconnection::setclientoption' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
    'option' => 'int',
    'value' => 'int',
  ),
  'mysqlnduhconnection::setserveroption' => 
  array (
    0 => 'void',
    'connection' => 'mysqlnd_connection',
    'option' => 'int',
  ),
  'mysqlnduhconnection::shutdownserver' => 
  array (
    0 => 'void',
    'MYSQLND_UH_RES_MYSQLND_NAME' => 'string',
    'level' => 'string',
  ),
  'mysqlnduhconnection::simplecommand' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
    'command' => 'int',
    'arg' => 'string',
    'ok_packet' => 'int',
    'silent' => 'bool',
    'ignore_upsert_status' => 'bool',
  ),
  'mysqlnduhconnection::simplecommandhandleresponse' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
    'ok_packet' => 'int',
    'silent' => 'bool',
    'command' => 'int',
    'ignore_upsert_status' => 'bool',
  ),
  'mysqlnduhconnection::sslset' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
    'key' => 'string',
    'cert' => 'string',
    'ca' => 'string',
    'capath' => 'string',
    'cipher' => 'string',
  ),
  'mysqlnduhconnection::stmtinit' => 
  array (
    0 => 'resource',
    'connection' => 'mysqlnd_connection',
  ),
  'mysqlnduhconnection::storeresult' => 
  array (
    0 => 'resource',
    'connection' => 'mysqlnd_connection',
  ),
  'mysqlnduhconnection::txcommit' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
  ),
  'mysqlnduhconnection::txrollback' => 
  array (
    0 => 'bool',
    'connection' => 'mysqlnd_connection',
  ),
  'mysqlnduhconnection::useresult' => 
  array (
    0 => 'resource',
    'connection' => 'mysqlnd_connection',
  ),
  'mysqlnduhpreparedstatement::__construct' => 
  array (
    0 => 'void',
  ),
  'mysqlnduhpreparedstatement::execute' => 
  array (
    0 => 'bool',
    'statement' => 'mysqlnd_prepared_statement',
  ),
  'mysqlnduhpreparedstatement::prepare' => 
  array (
    0 => 'bool',
    'statement' => 'mysqlnd_prepared_statement',
    'query' => 'string',
  ),
  'natcasesort' => 
  array (
    0 => 'bool',
    '&array' => 'array<array-key, mixed>',
  ),
  'natsort' => 
  array (
    0 => 'bool',
    '&array' => 'array<array-key, mixed>',
  ),
  'net_get_interfaces' => 
  array (
    0 => 'array<string, array<string, mixed>>|false',
  ),
  'newrelic_add_custom_parameter' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'scalar',
  ),
  'newrelic_add_custom_tracer' => 
  array (
    0 => 'bool',
    'function_name' => 'string',
  ),
  'newrelic_background_job' => 
  array (
    0 => 'void',
    'flag=' => 'bool',
  ),
  'newrelic_capture_params' => 
  array (
    0 => 'void',
    'enable=' => 'bool',
  ),
  'newrelic_custom_metric' => 
  array (
    0 => 'bool',
    'metric_name' => 'string',
    'value' => 'float',
  ),
  'newrelic_disable_autorum' => 
  array (
    0 => 'true',
  ),
  'newrelic_end_of_transaction' => 
  array (
    0 => 'void',
  ),
  'newrelic_end_transaction' => 
  array (
    0 => 'bool',
    'ignore=' => 'bool',
  ),
  'newrelic_get_browser_timing_footer' => 
  array (
    0 => 'string',
    'include_tags=' => 'bool',
  ),
  'newrelic_get_browser_timing_header' => 
  array (
    0 => 'string',
    'include_tags=' => 'bool',
  ),
  'newrelic_ignore_apdex' => 
  array (
    0 => 'void',
  ),
  'newrelic_ignore_transaction' => 
  array (
    0 => 'void',
  ),
  'newrelic_name_transaction' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'newrelic_notice_error' => 
  array (
    0 => 'void',
    'message' => 'string',
    'exception=' => 'Exception|Throwable',
  ),
  'newrelic_notice_error\'1' => 
  array (
    0 => 'void',
    'unused_1' => 'string',
    'message' => 'string',
    'unused_2' => 'string',
    'unused_3' => 'int',
    'unused_4=' => 'mixed',
  ),
  'newrelic_record_custom_event' => 
  array (
    0 => 'void',
    'name' => 'string',
    'attributes' => 'array<array-key, mixed>',
  ),
  'newrelic_record_datastore_segment' => 
  array (
    0 => 'mixed',
    'func' => 'callable',
    'parameters' => 'array<array-key, mixed>',
  ),
  'newrelic_set_appname' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'license=' => 'string',
    'xmit=' => 'bool',
  ),
  'newrelic_set_user_attributes' => 
  array (
    0 => 'bool',
    'user' => 'string',
    'account' => 'string',
    'product' => 'string',
  ),
  'newrelic_start_transaction' => 
  array (
    0 => 'bool',
    'appname' => 'string',
    'license=' => 'string',
  ),
  'next' => 
  array (
    0 => 'mixed',
    '&r_array' => 'array<array-key, mixed>|object',
  ),
  'ngettext' => 
  array (
    0 => 'string',
    'singular' => 'string',
    'plural' => 'string',
    'count' => 'int',
  ),
  'nl2br' => 
  array (
    0 => 'string',
    'string' => 'string',
    'use_xhtml=' => 'bool',
  ),
  'nl_langinfo' => 
  array (
    0 => 'false|string',
    'item' => 'int',
  ),
  'norewinditerator::__construct' => 
  array (
    0 => 'void',
    'iterator' => 'Iterator',
  ),
  'norewinditerator::current' => 
  array (
    0 => 'mixed',
  ),
  'norewinditerator::getinneriterator' => 
  array (
    0 => 'Iterator',
  ),
  'norewinditerator::key' => 
  array (
    0 => 'mixed',
  ),
  'norewinditerator::next' => 
  array (
    0 => 'void',
  ),
  'norewinditerator::rewind' => 
  array (
    0 => 'void',
  ),
  'norewinditerator::valid' => 
  array (
    0 => 'bool',
  ),
  'normalizer::getrawdecomposition' => 
  array (
    0 => 'null|string',
    'string' => 'string',
    'form=' => 'int',
  ),
  'normalizer::isnormalized' => 
  array (
    0 => 'bool',
    'string' => 'string',
    'form=' => 'int',
  ),
  'normalizer::normalize' => 
  array (
    0 => 'false|string',
    'string' => 'string',
    'form=' => 'int',
  ),
  'normalizer_get_raw_decomposition' => 
  array (
    0 => 'null|string',
    'string' => 'string',
    'form=' => 'int',
  ),
  'normalizer_is_normalized' => 
  array (
    0 => 'bool',
    'string' => 'string',
    'form=' => 'int',
  ),
  'normalizer_normalize' => 
  array (
    0 => 'false|string',
    'string' => 'string',
    'form=' => 'int',
  ),
  'notes_body' => 
  array (
    0 => 'array<array-key, mixed>',
    'server' => 'string',
    'mailbox' => 'string',
    'msg_number' => 'int',
  ),
  'notes_copy_db' => 
  array (
    0 => 'bool',
    'from_database_name' => 'string',
    'to_database_name' => 'string',
  ),
  'notes_create_db' => 
  array (
    0 => 'bool',
    'database_name' => 'string',
  ),
  'notes_create_note' => 
  array (
    0 => 'bool',
    'database_name' => 'string',
    'form_name' => 'string',
  ),
  'notes_drop_db' => 
  array (
    0 => 'bool',
    'database_name' => 'string',
  ),
  'notes_find_note' => 
  array (
    0 => 'int',
    'database_name' => 'string',
    'name' => 'string',
    'type=' => 'string',
  ),
  'notes_header_info' => 
  array (
    0 => 'object',
    'server' => 'string',
    'mailbox' => 'string',
    'msg_number' => 'int',
  ),
  'notes_list_msgs' => 
  array (
    0 => 'bool',
    'db' => 'string',
  ),
  'notes_mark_read' => 
  array (
    0 => 'bool',
    'database_name' => 'string',
    'user_name' => 'string',
    'note_id' => 'string',
  ),
  'notes_mark_unread' => 
  array (
    0 => 'bool',
    'database_name' => 'string',
    'user_name' => 'string',
    'note_id' => 'string',
  ),
  'notes_nav_create' => 
  array (
    0 => 'bool',
    'database_name' => 'string',
    'name' => 'string',
  ),
  'notes_search' => 
  array (
    0 => 'array<array-key, mixed>',
    'database_name' => 'string',
    'keywords' => 'string',
  ),
  'notes_unread' => 
  array (
    0 => 'array<array-key, mixed>',
    'database_name' => 'string',
    'user_name' => 'string',
  ),
  'notes_version' => 
  array (
    0 => 'float',
    'database_name' => 'string',
  ),
  'nsapi_request_headers' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'nsapi_response_headers' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'nsapi_virtual' => 
  array (
    0 => 'bool',
    'uri' => 'string',
  ),
  'nthmac' => 
  array (
    0 => 'string',
    'clent' => 'string',
    'data' => 'string',
  ),
  'number_format' => 
  array (
    0 => 'string',
    'num' => 'float',
    'decimals=' => 'int',
    'decimal_separator=' => 'null|string',
    'thousands_separator=' => 'null|string',
  ),
  'numberformatter::__construct' => 
  array (
    0 => 'void',
    'locale' => 'string',
    'style' => 'int',
    'pattern=' => 'null|string',
  ),
  'numberformatter::create' => 
  array (
    0 => 'NumberFormatter|null',
    'locale' => 'string',
    'style' => 'int',
    'pattern=' => 'null|string',
  ),
  'numberformatter::format' => 
  array (
    0 => 'false|string',
    'num' => 'float|int',
    'type=' => 'int',
  ),
  'numberformatter::formatcurrency' => 
  array (
    0 => 'false|string',
    'amount' => 'float',
    'currency' => 'string',
  ),
  'numberformatter::getattribute' => 
  array (
    0 => 'false|float|int',
    'attribute' => 'int',
  ),
  'numberformatter::geterrorcode' => 
  array (
    0 => 'int',
  ),
  'numberformatter::geterrormessage' => 
  array (
    0 => 'string',
  ),
  'numberformatter::getlocale' => 
  array (
    0 => 'string',
    'type=' => 'int',
  ),
  'numberformatter::getpattern' => 
  array (
    0 => 'false|string',
  ),
  'numberformatter::getsymbol' => 
  array (
    0 => 'false|string',
    'symbol' => 'int',
  ),
  'numberformatter::gettextattribute' => 
  array (
    0 => 'false|string',
    'attribute' => 'int',
  ),
  'numberformatter::parse' => 
  array (
    0 => 'false|float|int',
    'string' => 'string',
    'type=' => 'int',
    '&offset=' => 'int',
  ),
  'numberformatter::parsecurrency' => 
  array (
    0 => 'false|float',
    'string' => 'string',
    '&w_currency' => 'string',
    '&offset=' => 'int',
  ),
  'numberformatter::setattribute' => 
  array (
    0 => 'bool',
    'attribute' => 'int',
    'value' => 'float|int',
  ),
  'numberformatter::setpattern' => 
  array (
    0 => 'bool',
    'pattern' => 'string',
  ),
  'numberformatter::setsymbol' => 
  array (
    0 => 'bool',
    'symbol' => 'int',
    'value' => 'string',
  ),
  'numberformatter::settextattribute' => 
  array (
    0 => 'bool',
    'attribute' => 'int',
    'value' => 'string',
  ),
  'numfmt_create' => 
  array (
    0 => 'NumberFormatter|null',
    'locale' => 'string',
    'style' => 'int',
    'pattern=' => 'null|string',
  ),
  'numfmt_format' => 
  array (
    0 => 'false|string',
    'formatter' => 'NumberFormatter',
    'num' => 'float|int',
    'type=' => 'int',
  ),
  'numfmt_format_currency' => 
  array (
    0 => 'false|string',
    'formatter' => 'NumberFormatter',
    'amount' => 'float',
    'currency' => 'string',
  ),
  'numfmt_get_attribute' => 
  array (
    0 => 'false|float|int',
    'formatter' => 'NumberFormatter',
    'attribute' => 'int',
  ),
  'numfmt_get_error_code' => 
  array (
    0 => 'int',
    'formatter' => 'NumberFormatter',
  ),
  'numfmt_get_error_message' => 
  array (
    0 => 'string',
    'formatter' => 'NumberFormatter',
  ),
  'numfmt_get_locale' => 
  array (
    0 => 'string',
    'formatter' => 'NumberFormatter',
    'type=' => 'int',
  ),
  'numfmt_get_pattern' => 
  array (
    0 => 'false|string',
    'formatter' => 'NumberFormatter',
  ),
  'numfmt_get_symbol' => 
  array (
    0 => 'false|string',
    'formatter' => 'NumberFormatter',
    'symbol' => 'int',
  ),
  'numfmt_get_text_attribute' => 
  array (
    0 => 'false|string',
    'formatter' => 'NumberFormatter',
    'attribute' => 'int',
  ),
  'numfmt_parse' => 
  array (
    0 => 'false|float|int',
    'formatter' => 'NumberFormatter',
    'string' => 'string',
    'type=' => 'int',
    '&offset=' => 'int',
  ),
  'numfmt_parse_currency' => 
  array (
    0 => 'false|float',
    'formatter' => 'NumberFormatter',
    'string' => 'string',
    '&w_currency' => 'string',
    '&offset=' => 'int',
  ),
  'numfmt_set_attribute' => 
  array (
    0 => 'bool',
    'formatter' => 'NumberFormatter',
    'attribute' => 'int',
    'value' => 'float|int',
  ),
  'numfmt_set_pattern' => 
  array (
    0 => 'bool',
    'formatter' => 'NumberFormatter',
    'pattern' => 'string',
  ),
  'numfmt_set_symbol' => 
  array (
    0 => 'bool',
    'formatter' => 'NumberFormatter',
    'symbol' => 'int',
    'value' => 'string',
  ),
  'numfmt_set_text_attribute' => 
  array (
    0 => 'bool',
    'formatter' => 'NumberFormatter',
    'attribute' => 'int',
    'value' => 'string',
  ),
  'oauth::__construct' => 
  array (
    0 => 'void',
    'consumer_key' => 'string',
    'consumer_secret' => 'string',
    'signature_method=' => 'string',
    'auth_type=' => 'int',
  ),
  'oauth::disabledebug' => 
  array (
    0 => 'bool',
  ),
  'oauth::disableredirects' => 
  array (
    0 => 'bool',
  ),
  'oauth::disablesslchecks' => 
  array (
    0 => 'bool',
  ),
  'oauth::enabledebug' => 
  array (
    0 => 'bool',
  ),
  'oauth::enableredirects' => 
  array (
    0 => 'bool',
  ),
  'oauth::enablesslchecks' => 
  array (
    0 => 'bool',
  ),
  'oauth::fetch' => 
  array (
    0 => 'mixed',
    'protected_resource_url' => 'string',
    'extra_parameters=' => 'array<array-key, mixed>',
    'http_method=' => 'string',
    'http_headers=' => 'array<array-key, mixed>',
  ),
  'oauth::generatesignature' => 
  array (
    0 => 'string',
    'http_method' => 'string',
    'url' => 'string',
    'extra_parameters=' => 'mixed',
  ),
  'oauth::getaccesstoken' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'access_token_url' => 'string',
    'auth_session_handle=' => 'string',
    'verifier_token=' => 'string',
    'http_method=' => 'string',
  ),
  'oauth::getcapath' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'oauth::getlastresponse' => 
  array (
    0 => 'string',
  ),
  'oauth::getlastresponseheaders' => 
  array (
    0 => 'false|string',
  ),
  'oauth::getlastresponseinfo' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'oauth::getrequestheader' => 
  array (
    0 => 'false|string',
    'http_method' => 'string',
    'url' => 'string',
    'extra_parameters=' => 'mixed',
  ),
  'oauth::getrequesttoken' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'request_token_url' => 'string',
    'callback_url=' => 'string',
    'http_method=' => 'string',
  ),
  'oauth::setauthtype' => 
  array (
    0 => 'bool',
    'auth_type' => 'int',
  ),
  'oauth::setcapath' => 
  array (
    0 => 'mixed',
    'ca_path=' => 'string',
    'ca_info=' => 'string',
  ),
  'oauth::setnonce' => 
  array (
    0 => 'mixed',
    'nonce' => 'string',
  ),
  'oauth::setrequestengine' => 
  array (
    0 => 'void',
    'reqengine' => 'int',
  ),
  'oauth::setrsacertificate' => 
  array (
    0 => 'mixed',
    'cert' => 'string',
  ),
  'oauth::setsslchecks' => 
  array (
    0 => 'bool',
    'sslcheck' => 'int',
  ),
  'oauth::settimeout' => 
  array (
    0 => 'void',
    'timeout' => 'int',
  ),
  'oauth::settimestamp' => 
  array (
    0 => 'mixed',
    'timestamp' => 'string',
  ),
  'oauth::settoken' => 
  array (
    0 => 'bool',
    'token' => 'string',
    'token_secret' => 'string',
  ),
  'oauth::setversion' => 
  array (
    0 => 'bool',
    'version' => 'string',
  ),
  'oauth_get_sbs' => 
  array (
    0 => 'string',
    'http_method' => 'string',
    'uri' => 'string',
    'parameters' => 'array<array-key, mixed>',
  ),
  'oauth_urlencode' => 
  array (
    0 => 'string',
    'uri' => 'string',
  ),
  'oauthprovider::__construct' => 
  array (
    0 => 'void',
    'params_array=' => 'array<array-key, mixed>',
  ),
  'oauthprovider::addrequiredparameter' => 
  array (
    0 => 'bool',
    'req_params' => 'string',
  ),
  'oauthprovider::callconsumerhandler' => 
  array (
    0 => 'void',
  ),
  'oauthprovider::calltimestampnoncehandler' => 
  array (
    0 => 'void',
  ),
  'oauthprovider::calltokenhandler' => 
  array (
    0 => 'void',
  ),
  'oauthprovider::checkoauthrequest' => 
  array (
    0 => 'void',
    'uri=' => 'string',
    'method=' => 'string',
  ),
  'oauthprovider::consumerhandler' => 
  array (
    0 => 'void',
    'callback_function' => 'callable',
  ),
  'oauthprovider::generatetoken' => 
  array (
    0 => 'string',
    'size' => 'int',
    'strong=' => 'bool',
  ),
  'oauthprovider::is2leggedendpoint' => 
  array (
    0 => 'void',
    'params_array' => 'mixed',
  ),
  'oauthprovider::isrequesttokenendpoint' => 
  array (
    0 => 'void',
    'will_issue_request_token' => 'bool',
  ),
  'oauthprovider::removerequiredparameter' => 
  array (
    0 => 'bool',
    'req_params' => 'string',
  ),
  'oauthprovider::reportproblem' => 
  array (
    0 => 'string',
    'oauthexception' => 'string',
    'send_headers=' => 'bool',
  ),
  'oauthprovider::setparam' => 
  array (
    0 => 'bool',
    'param_key' => 'string',
    'param_val=' => 'mixed',
  ),
  'oauthprovider::setrequesttokenpath' => 
  array (
    0 => 'bool',
    'path' => 'string',
  ),
  'oauthprovider::timestampnoncehandler' => 
  array (
    0 => 'void',
    'callback_function' => 'callable',
  ),
  'oauthprovider::tokenhandler' => 
  array (
    0 => 'void',
    'callback_function' => 'callable',
  ),
  'ob_clean' => 
  array (
    0 => 'bool',
  ),
  'ob_deflatehandler' => 
  array (
    0 => 'string',
    'data' => 'string',
    'mode' => 'int',
  ),
  'ob_end_clean' => 
  array (
    0 => 'bool',
  ),
  'ob_end_flush' => 
  array (
    0 => 'bool',
  ),
  'ob_etaghandler' => 
  array (
    0 => 'string',
    'data' => 'string',
    'mode' => 'int',
  ),
  'ob_flush' => 
  array (
    0 => 'bool',
  ),
  'ob_get_clean' => 
  array (
    0 => 'false|string',
  ),
  'ob_get_contents' => 
  array (
    0 => 'false|string',
  ),
  'ob_get_flush' => 
  array (
    0 => 'false|string',
  ),
  'ob_get_length' => 
  array (
    0 => 'false|int',
  ),
  'ob_get_level' => 
  array (
    0 => 'int',
  ),
  'ob_get_status' => 
  array (
    0 => 'array<array-key, mixed>',
    'full_status=' => 'bool',
  ),
  'ob_gzhandler' => 
  array (
    0 => 'false|string',
    'data' => 'string',
    'flags' => 'int',
  ),
  'ob_iconv_handler' => 
  array (
    0 => 'string',
    'contents' => 'string',
    'status' => 'int',
  ),
  'ob_implicit_flush' => 
  array (
    0 => 'void',
    'enable=' => 'bool',
  ),
  'ob_inflatehandler' => 
  array (
    0 => 'string',
    'data' => 'string',
    'mode' => 'int',
  ),
  'ob_list_handlers' => 
  array (
    0 => 'list<string>',
  ),
  'ob_start' => 
  array (
    0 => 'bool',
    'callback=' => 'array<array-key, mixed>|callable|null|string',
    'chunk_size=' => 'int',
    'flags=' => 'int',
  ),
  'ob_tidyhandler' => 
  array (
    0 => 'string',
    'input' => 'string',
    'mode=' => 'int',
  ),
  'oci_bind_array_by_name' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
    'param' => 'string',
    '&rw_var' => 'array<array-key, mixed>',
    'max_array_length' => 'int',
    'max_item_length=' => 'int',
    'type=' => 'int',
  ),
  'oci_bind_by_name' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
    'param' => 'string',
    '&rw_var' => 'mixed',
    'max_length=' => 'int',
    'type=' => 'int',
  ),
  'oci_cancel' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
  ),
  'oci_client_version' => 
  array (
    0 => 'string',
  ),
  'oci_close' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
  ),
  'oci_collection_append' => 
  array (
    0 => 'bool',
    'collection' => 'string',
  ),
  'oci_collection_assign' => 
  array (
    0 => 'bool',
    'to' => 'object',
  ),
  'oci_collection_element_assign' => 
  array (
    0 => 'bool',
    'collection' => 'int',
    'index' => 'string',
  ),
  'oci_collection_element_get' => 
  array (
    0 => 'string',
    'collection' => 'int',
  ),
  'oci_collection_max' => 
  array (
    0 => 'int',
  ),
  'oci_collection_size' => 
  array (
    0 => 'int',
  ),
  'oci_collection_trim' => 
  array (
    0 => 'bool',
    'collection' => 'int',
  ),
  'oci_commit' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
  ),
  'oci_connect' => 
  array (
    0 => 'false|resource',
    'username' => 'string',
    'password' => 'string',
    'connection_string=' => 'string',
    'encoding=' => 'string',
    'session_mode=' => 'int',
  ),
  'oci_define_by_name' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
    'column' => 'string',
    '&w_var' => 'mixed',
    'type=' => 'int',
  ),
  'oci_error' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'connection_or_statement=' => 'resource',
  ),
  'oci_execute' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
    'mode=' => 'int',
  ),
  'oci_fetch' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
  ),
  'oci_fetch_all' => 
  array (
    0 => 'false|int',
    'statement' => 'resource',
    '&w_output' => 'array<array-key, mixed>',
    'offset=' => 'int',
    'limit=' => 'int',
    'flags=' => 'int',
  ),
  'oci_fetch_array' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'statement' => 'resource',
    'mode=' => 'int',
  ),
  'oci_fetch_assoc' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'statement' => 'resource',
  ),
  'oci_fetch_object' => 
  array (
    0 => 'false|object',
    'statement' => 'resource',
  ),
  'oci_fetch_row' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'statement' => 'resource',
  ),
  'oci_field_is_null' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
    'column' => 'mixed',
  ),
  'oci_field_name' => 
  array (
    0 => 'false|string',
    'statement' => 'resource',
    'column' => 'mixed',
  ),
  'oci_field_precision' => 
  array (
    0 => 'false|int',
    'statement' => 'resource',
    'column' => 'mixed',
  ),
  'oci_field_scale' => 
  array (
    0 => 'false|int',
    'statement' => 'resource',
    'column' => 'mixed',
  ),
  'oci_field_size' => 
  array (
    0 => 'false|int',
    'statement' => 'resource',
    'column' => 'mixed',
  ),
  'oci_field_type' => 
  array (
    0 => 'false|mixed',
    'statement' => 'resource',
    'column' => 'mixed',
  ),
  'oci_field_type_raw' => 
  array (
    0 => 'false|int',
    'statement' => 'resource',
    'column' => 'mixed',
  ),
  'oci_free_collection' => 
  array (
    0 => 'bool',
  ),
  'oci_free_cursor' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
  ),
  'oci_free_descriptor' => 
  array (
    0 => 'bool',
  ),
  'oci_free_statement' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
  ),
  'oci_get_implicit' => 
  array (
    0 => 'bool',
    'stmt' => 'mixed',
  ),
  'oci_get_implicit_resultset' => 
  array (
    0 => 'false|resource',
    'statement' => 'resource',
  ),
  'oci_internal_debug' => 
  array (
    0 => 'void',
    'onoff' => 'bool',
  ),
  'oci_lob_append' => 
  array (
    0 => 'bool',
    'to' => 'object',
  ),
  'oci_lob_close' => 
  array (
    0 => 'bool',
  ),
  'oci_lob_copy' => 
  array (
    0 => 'bool',
    'to' => 'OCILob',
    'from' => 'OCILob',
    'length=' => 'int',
  ),
  'oci_lob_eof' => 
  array (
    0 => 'bool',
  ),
  'oci_lob_erase' => 
  array (
    0 => 'int',
    'lob' => 'int',
    'offset' => 'int',
  ),
  'oci_lob_export' => 
  array (
    0 => 'bool',
    'lob' => 'string',
    'filename' => 'int',
    'offset' => 'int',
  ),
  'oci_lob_flush' => 
  array (
    0 => 'bool',
    'lob' => 'int',
  ),
  'oci_lob_import' => 
  array (
    0 => 'bool',
    'lob' => 'string',
  ),
  'oci_lob_is_equal' => 
  array (
    0 => 'bool',
    'lob1' => 'OCILob',
    'lob2' => 'OCILob',
  ),
  'oci_lob_load' => 
  array (
    0 => 'string',
  ),
  'oci_lob_read' => 
  array (
    0 => 'string',
    'lob' => 'int',
  ),
  'oci_lob_rewind' => 
  array (
    0 => 'bool',
  ),
  'oci_lob_save' => 
  array (
    0 => 'bool',
    'lob' => 'string',
    'data' => 'int',
  ),
  'oci_lob_seek' => 
  array (
    0 => 'bool',
    'lob' => 'int',
    'offset' => 'int',
  ),
  'oci_lob_size' => 
  array (
    0 => 'int',
  ),
  'oci_lob_tell' => 
  array (
    0 => 'int',
  ),
  'oci_lob_truncate' => 
  array (
    0 => 'bool',
    'lob' => 'int',
  ),
  'oci_lob_write' => 
  array (
    0 => 'int',
    'lob' => 'string',
    'data' => 'int',
  ),
  'oci_lob_write_temporary' => 
  array (
    0 => 'bool',
    'value' => 'string',
    'lob_type' => 'int',
  ),
  'oci_new_collection' => 
  array (
    0 => 'OCICollection|false',
    'connection' => 'resource',
    'type_name' => 'string',
    'schema=' => 'string',
  ),
  'oci_new_connect' => 
  array (
    0 => 'false|resource',
    'username' => 'string',
    'password' => 'string',
    'connection_string=' => 'string',
    'encoding=' => 'string',
    'session_mode=' => 'int',
  ),
  'oci_new_cursor' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
  ),
  'oci_new_descriptor' => 
  array (
    0 => 'OCILob|false',
    'connection' => 'resource',
    'type=' => 'int',
  ),
  'oci_num_fields' => 
  array (
    0 => 'false|int',
    'statement' => 'resource',
  ),
  'oci_num_rows' => 
  array (
    0 => 'false|int',
    'statement' => 'resource',
  ),
  'oci_parse' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'sql' => 'string',
  ),
  'oci_password_change' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
    'username' => 'string',
    'old_password' => 'string',
    'new_password' => 'string',
  ),
  'oci_pconnect' => 
  array (
    0 => 'false|resource',
    'username' => 'string',
    'password' => 'string',
    'connection_string=' => 'string',
    'encoding=' => 'string',
    'session_mode=' => 'int',
  ),
  'oci_register_taf_callback' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
    'callback=' => 'callable',
  ),
  'oci_result' => 
  array (
    0 => 'false|mixed',
    'statement' => 'resource',
    'column' => 'mixed',
  ),
  'oci_rollback' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
  ),
  'oci_server_version' => 
  array (
    0 => 'false|string',
    'connection' => 'resource',
  ),
  'oci_set_action' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
    'action' => 'string',
  ),
  'oci_set_call_timeout' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
    'timeout' => 'int',
  ),
  'oci_set_client_identifier' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
    'client_id' => 'string',
  ),
  'oci_set_client_info' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
    'client_info' => 'string',
  ),
  'oci_set_db_operation' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
    'action' => 'string',
  ),
  'oci_set_edition' => 
  array (
    0 => 'bool',
    'edition' => 'string',
  ),
  'oci_set_module_name' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
    'name' => 'string',
  ),
  'oci_set_prefetch' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
    'rows' => 'int',
  ),
  'oci_statement_type' => 
  array (
    0 => 'false|string',
    'statement' => 'resource',
  ),
  'oci_unregister_taf_callback' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
  ),
  'ocicollection::append' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'ocicollection::assign' => 
  array (
    0 => 'bool',
    'from' => 'OCI_Collection',
  ),
  'ocicollection::assignelem' => 
  array (
    0 => 'bool',
    'index' => 'int',
    'value' => 'mixed',
  ),
  'ocicollection::free' => 
  array (
    0 => 'bool',
  ),
  'ocicollection::getelem' => 
  array (
    0 => 'mixed',
    'index' => 'int',
  ),
  'ocicollection::max' => 
  array (
    0 => 'false|int',
  ),
  'ocicollection::size' => 
  array (
    0 => 'false|int',
  ),
  'ocicollection::trim' => 
  array (
    0 => 'bool',
    'num' => 'int',
  ),
  'ocifetchinto' => 
  array (
    0 => 'bool|int',
    'statement' => 'resource',
    '&w_result' => 'array<array-key, mixed>',
    'mode=' => 'int',
  ),
  'ocigetbufferinglob' => 
  array (
    0 => 'bool',
  ),
  'ocilob::append' => 
  array (
    0 => 'bool',
    'lob_from' => 'OCILob',
  ),
  'ocilob::close' => 
  array (
    0 => 'bool',
  ),
  'ocilob::eof' => 
  array (
    0 => 'bool',
  ),
  'ocilob::erase' => 
  array (
    0 => 'false|int',
    'offset=' => 'int',
    'length=' => 'int',
  ),
  'ocilob::export' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'start=' => 'int',
    'length=' => 'int',
  ),
  'ocilob::flush' => 
  array (
    0 => 'bool',
    'flag=' => 'int',
  ),
  'ocilob::free' => 
  array (
    0 => 'bool',
  ),
  'ocilob::getbuffering' => 
  array (
    0 => 'bool',
  ),
  'ocilob::import' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'ocilob::load' => 
  array (
    0 => 'false|string',
  ),
  'ocilob::read' => 
  array (
    0 => 'false|string',
    'length' => 'int',
  ),
  'ocilob::rewind' => 
  array (
    0 => 'bool',
  ),
  'ocilob::save' => 
  array (
    0 => 'bool',
    'data' => 'string',
    'offset=' => 'int',
  ),
  'ocilob::savefile' => 
  array (
    0 => 'bool',
    'filename' => 'mixed',
  ),
  'ocilob::seek' => 
  array (
    0 => 'bool',
    'offset' => 'int',
    'whence=' => 'int',
  ),
  'ocilob::setbuffering' => 
  array (
    0 => 'bool',
    'on_off' => 'bool',
  ),
  'ocilob::size' => 
  array (
    0 => 'false|int',
  ),
  'ocilob::tell' => 
  array (
    0 => 'false|int',
  ),
  'ocilob::truncate' => 
  array (
    0 => 'bool',
    'length=' => 'int',
  ),
  'ocilob::write' => 
  array (
    0 => 'false|int',
    'data' => 'string',
    'length=' => 'int',
  ),
  'ocilob::writetemporary' => 
  array (
    0 => 'bool',
    'data' => 'string',
    'lob_type=' => 'int',
  ),
  'ocilob::writetofile' => 
  array (
    0 => 'bool',
    'filename' => 'mixed',
    'start' => 'mixed',
    'length' => 'mixed',
  ),
  'ocisetbufferinglob' => 
  array (
    0 => 'bool',
    'lob' => 'bool',
  ),
  'octdec' => 
  array (
    0 => 'float|int',
    'octal_string' => 'string',
  ),
  'odbc_autocommit' => 
  array (
    0 => 'bool|int',
    'odbc' => 'resource',
    'enable=' => 'bool',
  ),
  'odbc_binmode' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
    'mode' => 'int',
  ),
  'odbc_close' => 
  array (
    0 => 'void',
    'odbc' => 'resource',
  ),
  'odbc_close_all' => 
  array (
    0 => 'void',
  ),
  'odbc_columnprivileges' => 
  array (
    0 => 'false|resource',
    'odbc' => 'resource',
    'catalog' => 'null|string',
    'schema' => 'string',
    'table' => 'string',
    'column' => 'string',
  ),
  'odbc_columns' => 
  array (
    0 => 'false|resource',
    'odbc' => 'resource',
    'catalog=' => 'null|string',
    'schema=' => 'null|string',
    'table=' => 'null|string',
    'column=' => 'null|string',
  ),
  'odbc_commit' => 
  array (
    0 => 'bool',
    'odbc' => 'resource',
  ),
  'odbc_connect' => 
  array (
    0 => 'false|resource',
    'dsn' => 'string',
    'user' => 'string',
    'password' => 'string',
    'cursor_option=' => 'int',
  ),
  'odbc_cursor' => 
  array (
    0 => 'string',
    'statement' => 'resource',
  ),
  'odbc_data_source' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'odbc' => 'resource',
    'fetch_type' => 'int',
  ),
  'odbc_do' => 
  array (
    0 => 'resource',
    'odbc' => 'resource',
    'query' => 'string',
  ),
  'odbc_error' => 
  array (
    0 => 'string',
    'odbc=' => 'resource',
  ),
  'odbc_errormsg' => 
  array (
    0 => 'string',
    'odbc=' => 'resource',
  ),
  'odbc_exec' => 
  array (
    0 => 'resource',
    'odbc' => 'resource',
    'query' => 'string',
  ),
  'odbc_execute' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
    'params=' => 'array<array-key, mixed>',
  ),
  'odbc_fetch_array' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'statement' => 'resource',
    'row=' => 'int',
  ),
  'odbc_fetch_into' => 
  array (
    0 => 'int',
    'statement' => 'resource',
    '&w_array' => 'array<array-key, mixed>',
    'row=' => 'int',
  ),
  'odbc_fetch_object' => 
  array (
    0 => 'false|stdClass',
    'statement' => 'resource',
    'row=' => 'int',
  ),
  'odbc_fetch_row' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
    'row=' => 'int|null',
  ),
  'odbc_field_len' => 
  array (
    0 => 'false|int',
    'statement' => 'resource',
    'field' => 'int',
  ),
  'odbc_field_name' => 
  array (
    0 => 'false|string',
    'statement' => 'resource',
    'field' => 'int',
  ),
  'odbc_field_num' => 
  array (
    0 => 'false|int',
    'statement' => 'resource',
    'field' => 'string',
  ),
  'odbc_field_precision' => 
  array (
    0 => 'int',
    'statement' => 'resource',
    'field' => 'int',
  ),
  'odbc_field_scale' => 
  array (
    0 => 'false|int',
    'statement' => 'resource',
    'field' => 'int',
  ),
  'odbc_field_type' => 
  array (
    0 => 'false|string',
    'statement' => 'resource',
    'field' => 'int',
  ),
  'odbc_foreignkeys' => 
  array (
    0 => 'false|resource',
    'odbc' => 'resource',
    'pk_catalog' => 'null|string',
    'pk_schema' => 'string',
    'pk_table' => 'string',
    'fk_catalog' => 'string',
    'fk_schema' => 'string',
    'fk_table' => 'string',
  ),
  'odbc_free_result' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
  ),
  'odbc_gettypeinfo' => 
  array (
    0 => 'resource',
    'odbc' => 'resource',
    'data_type=' => 'int',
  ),
  'odbc_longreadlen' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
    'length' => 'int',
  ),
  'odbc_next_result' => 
  array (
    0 => 'bool',
    'statement' => 'resource',
  ),
  'odbc_num_fields' => 
  array (
    0 => 'int',
    'statement' => 'resource',
  ),
  'odbc_num_rows' => 
  array (
    0 => 'int',
    'statement' => 'resource',
  ),
  'odbc_pconnect' => 
  array (
    0 => 'false|resource',
    'dsn' => 'string',
    'user' => 'string',
    'password' => 'string',
    'cursor_option=' => 'int',
  ),
  'odbc_prepare' => 
  array (
    0 => 'false|resource',
    'odbc' => 'resource',
    'query' => 'string',
  ),
  'odbc_primarykeys' => 
  array (
    0 => 'false|resource',
    'odbc' => 'resource',
    'catalog' => 'null|string',
    'schema' => 'string',
    'table' => 'string',
  ),
  'odbc_procedurecolumns' => 
  array (
    0 => 'false|resource',
    'odbc' => 'resource',
    'catalog=' => 'null|string',
    'schema=' => 'null|string',
    'procedure=' => 'null|string',
    'column=' => 'null|string',
  ),
  'odbc_procedures' => 
  array (
    0 => 'false|resource',
    'odbc' => 'resource',
    'catalog=' => 'null|string',
    'schema=' => 'null|string',
    'procedure=' => 'null|string',
  ),
  'odbc_result' => 
  array (
    0 => 'bool|null|string',
    'statement' => 'resource',
    'field' => 'int|string',
  ),
  'odbc_result_all' => 
  array (
    0 => 'false|int',
    'statement' => 'resource',
    'format=' => 'string',
  ),
  'odbc_rollback' => 
  array (
    0 => 'bool',
    'odbc' => 'resource',
  ),
  'odbc_setoption' => 
  array (
    0 => 'bool',
    'odbc' => 'resource',
    'which' => 'int',
    'option' => 'int',
    'value' => 'int',
  ),
  'odbc_specialcolumns' => 
  array (
    0 => 'false|resource',
    'odbc' => 'resource',
    'type' => 'int',
    'catalog' => 'null|string',
    'schema' => 'string',
    'table' => 'string',
    'scope' => 'int',
    'nullable' => 'int',
  ),
  'odbc_statistics' => 
  array (
    0 => 'false|resource',
    'odbc' => 'resource',
    'catalog' => 'null|string',
    'schema' => 'string',
    'table' => 'string',
    'unique' => 'int',
    'accuracy' => 'int',
  ),
  'odbc_tableprivileges' => 
  array (
    0 => 'false|resource',
    'odbc' => 'resource',
    'catalog' => 'null|string',
    'schema' => 'string',
    'table' => 'string',
  ),
  'odbc_tables' => 
  array (
    0 => 'false|resource',
    'odbc' => 'resource',
    'catalog=' => 'null|string',
    'schema=' => 'null|string',
    'table=' => 'null|string',
    'types=' => 'null|string',
  ),
  'opcache_compile_file' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'opcache_get_configuration' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'opcache_get_status' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'include_scripts=' => 'bool',
  ),
  'opcache_invalidate' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'force=' => 'bool',
  ),
  'opcache_is_script_cached' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'opcache_reset' => 
  array (
    0 => 'bool',
  ),
  'openal_buffer_create' => 
  array (
    0 => 'resource',
  ),
  'openal_buffer_data' => 
  array (
    0 => 'bool',
    'buffer' => 'resource',
    'format' => 'int',
    'data' => 'string',
    'freq' => 'int',
  ),
  'openal_buffer_destroy' => 
  array (
    0 => 'bool',
    'buffer' => 'resource',
  ),
  'openal_buffer_get' => 
  array (
    0 => 'int',
    'buffer' => 'resource',
    'property' => 'int',
  ),
  'openal_buffer_loadwav' => 
  array (
    0 => 'bool',
    'buffer' => 'resource',
    'wavfile' => 'string',
  ),
  'openal_context_create' => 
  array (
    0 => 'resource',
    'device' => 'resource',
  ),
  'openal_context_current' => 
  array (
    0 => 'bool',
    'context' => 'resource',
  ),
  'openal_context_destroy' => 
  array (
    0 => 'bool',
    'context' => 'resource',
  ),
  'openal_context_process' => 
  array (
    0 => 'bool',
    'context' => 'resource',
  ),
  'openal_context_suspend' => 
  array (
    0 => 'bool',
    'context' => 'resource',
  ),
  'openal_device_close' => 
  array (
    0 => 'bool',
    'device' => 'resource',
  ),
  'openal_device_open' => 
  array (
    0 => 'false|resource',
    'device_desc=' => 'string',
  ),
  'openal_listener_get' => 
  array (
    0 => 'mixed',
    'property' => 'int',
  ),
  'openal_listener_set' => 
  array (
    0 => 'bool',
    'property' => 'int',
    'setting' => 'mixed',
  ),
  'openal_source_create' => 
  array (
    0 => 'resource',
  ),
  'openal_source_destroy' => 
  array (
    0 => 'bool',
    'source' => 'resource',
  ),
  'openal_source_get' => 
  array (
    0 => 'mixed',
    'source' => 'resource',
    'property' => 'int',
  ),
  'openal_source_pause' => 
  array (
    0 => 'bool',
    'source' => 'resource',
  ),
  'openal_source_play' => 
  array (
    0 => 'bool',
    'source' => 'resource',
  ),
  'openal_source_rewind' => 
  array (
    0 => 'bool',
    'source' => 'resource',
  ),
  'openal_source_set' => 
  array (
    0 => 'bool',
    'source' => 'resource',
    'property' => 'int',
    'setting' => 'mixed',
  ),
  'openal_source_stop' => 
  array (
    0 => 'bool',
    'source' => 'resource',
  ),
  'openal_stream' => 
  array (
    0 => 'resource',
    'source' => 'resource',
    'format' => 'int',
    'rate' => 'int',
  ),
  'opendir' => 
  array (
    0 => 'false|resource',
    'directory' => 'string',
    'context=' => 'resource',
  ),
  'openlog' => 
  array (
    0 => 'true',
    'prefix' => 'string',
    'flags' => 'int',
    'facility' => 'int',
  ),
  'openssl_cipher_iv_length' => 
  array (
    0 => 'false|int',
    'cipher_algo' => 'string',
  ),
  'openssl_cms_decrypt' => 
  array (
    0 => 'bool',
    'input_filename' => 'string',
    'output_filename' => 'string',
    'certificate' => 'mixed',
    'private_key=' => 'mixed',
    'encoding=' => 'int',
  ),
  'openssl_cms_encrypt' => 
  array (
    0 => 'bool',
    'input_filename' => 'string',
    'output_filename' => 'string',
    'certificate' => 'mixed',
    'headers' => 'array<array-key, mixed>|null',
    'flags=' => 'int',
    'encoding=' => 'int',
    'cipher_algo=' => 'int',
  ),
  'openssl_cms_read' => 
  array (
    0 => 'bool',
    'input_filename' => 'string',
    '&certificates' => 'mixed',
  ),
  'openssl_cms_sign' => 
  array (
    0 => 'bool',
    'input_filename' => 'string',
    'output_filename' => 'string',
    'certificate' => 'OpenSSLCertificate|string',
    'private_key' => 'mixed',
    'headers' => 'array<array-key, mixed>|null',
    'flags=' => 'int',
    'encoding=' => 'int',
    'untrusted_certificates_filename=' => 'null|string',
  ),
  'openssl_cms_verify' => 
  array (
    0 => 'bool',
    'input_filename' => 'string',
    'flags=' => 'int',
    'certificates=' => 'null|string',
    'ca_info=' => 'array<array-key, mixed>',
    'untrusted_certificates_filename=' => 'null|string',
    'content=' => 'null|string',
    'pk7=' => 'null|string',
    'sigfile=' => 'null|string',
    'encoding=' => 'int',
  ),
  'openssl_csr_export' => 
  array (
    0 => 'bool',
    'csr' => 'OpenSSLCertificateSigningRequest|string',
    '&w_output' => 'string',
    'no_text=' => 'bool',
  ),
  'openssl_csr_export_to_file' => 
  array (
    0 => 'bool',
    'csr' => 'OpenSSLCertificateSigningRequest|string',
    'output_filename' => 'string',
    'no_text=' => 'bool',
  ),
  'openssl_csr_get_public_key' => 
  array (
    0 => 'OpenSSLAsymmetricKey|false',
    'csr' => 'OpenSSLCertificateSigningRequest|string',
    'short_names=' => 'bool',
  ),
  'openssl_csr_get_subject' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'csr' => 'OpenSSLCertificateSigningRequest|string',
    'short_names=' => 'bool',
  ),
  'openssl_csr_new' => 
  array (
    0 => 'OpenSSLCertificateSigningRequest|false',
    'distinguished_names' => 'array<array-key, mixed>',
    '&w_private_key' => 'OpenSSLAsymmetricKey',
    'options=' => 'array<array-key, mixed>|null',
    'extra_attributes=' => 'array<array-key, mixed>|null',
  ),
  'openssl_csr_sign' => 
  array (
    0 => 'OpenSSLCertificate|false',
    'csr' => 'OpenSSLCertificateSigningRequest|string',
    'ca_certificate' => 'OpenSSLCertificate|null|string',
    'private_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    'days' => 'int',
    'options=' => 'array<array-key, mixed>|null',
    'serial=' => 'int',
  ),
  'openssl_decrypt' => 
  array (
    0 => 'false|string',
    'data' => 'string',
    'cipher_algo' => 'string',
    'passphrase' => 'string',
    'options=' => 'int',
    'iv=' => 'string',
    'tag=' => 'string',
    'aad=' => 'string',
  ),
  'openssl_dh_compute_key' => 
  array (
    0 => 'false|string',
    'public_key' => 'string',
    'private_key' => 'OpenSSLAsymmetricKey',
  ),
  'openssl_digest' => 
  array (
    0 => 'false|string',
    'data' => 'string',
    'digest_algo' => 'string',
    'binary=' => 'bool',
  ),
  'openssl_encrypt' => 
  array (
    0 => 'false|string',
    'data' => 'string',
    'cipher_algo' => 'string',
    'passphrase' => 'string',
    'options=' => 'int',
    'iv=' => 'string',
    '&w_tag=' => 'string',
    'aad=' => 'string',
    'tag_length=' => 'int',
  ),
  'openssl_error_string' => 
  array (
    0 => 'false|string',
  ),
  'openssl_free_key' => 
  array (
    0 => 'void',
    'key' => 'OpenSSLAsymmetricKey',
  ),
  'openssl_get_cert_locations' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'openssl_get_cipher_methods' => 
  array (
    0 => 'array<array-key, mixed>',
    'aliases=' => 'bool',
  ),
  'openssl_get_curve_names' => 
  array (
    0 => 'list<string>',
  ),
  'openssl_get_md_methods' => 
  array (
    0 => 'array<array-key, mixed>',
    'aliases=' => 'bool',
  ),
  'openssl_get_privatekey' => 
  array (
    0 => 'OpenSSLAsymmetricKey|false',
    'private_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    'passphrase=' => 'null|string',
  ),
  'openssl_get_publickey' => 
  array (
    0 => 'OpenSSLAsymmetricKey|false',
    'public_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
  ),
  'openssl_open' => 
  array (
    0 => 'bool',
    'data' => 'string',
    '&w_output' => 'string',
    'encrypted_key' => 'string',
    'private_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    'cipher_algo' => 'string',
    'iv=' => 'null|string',
  ),
  'openssl_pbkdf2' => 
  array (
    0 => 'false|string',
    'password' => 'string',
    'salt' => 'string',
    'key_length' => 'int',
    'iterations' => 'int',
    'digest_algo=' => 'string',
  ),
  'openssl_pkcs12_export' => 
  array (
    0 => 'bool',
    'certificate' => 'OpenSSLCertificate|string',
    '&w_output' => 'string',
    'private_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    'passphrase' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'openssl_pkcs12_export_to_file' => 
  array (
    0 => 'bool',
    'certificate' => 'OpenSSLCertificate|string',
    'output_filename' => 'string',
    'private_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    'passphrase' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'openssl_pkcs12_read' => 
  array (
    0 => 'bool',
    'pkcs12' => 'string',
    '&w_certificates' => 'array<array-key, mixed>',
    'passphrase' => 'string',
  ),
  'openssl_pkcs7_decrypt' => 
  array (
    0 => 'bool',
    'input_filename' => 'string',
    'output_filename' => 'string',
    'certificate' => 'OpenSSLCertificate|string',
    'private_key=' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|null|string',
  ),
  'openssl_pkcs7_encrypt' => 
  array (
    0 => 'bool',
    'input_filename' => 'string',
    'output_filename' => 'string',
    'certificate' => 'OpenSSLCertificate|list<OpenSSLCertificate|string>|string',
    'headers' => 'array<array-key, mixed>|null',
    'flags=' => 'int',
    'cipher_algo=' => 'int',
  ),
  'openssl_pkcs7_read' => 
  array (
    0 => 'bool',
    'data' => 'string',
    '&w_certificates' => 'array<array-key, mixed>',
  ),
  'openssl_pkcs7_sign' => 
  array (
    0 => 'bool',
    'input_filename' => 'string',
    'output_filename' => 'string',
    'certificate' => 'OpenSSLCertificate|string',
    'private_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    'headers' => 'array<array-key, mixed>|null',
    'flags=' => 'int',
    'untrusted_certificates_filename=' => 'null|string',
  ),
  'openssl_pkcs7_verify' => 
  array (
    0 => 'bool|int',
    'input_filename' => 'string',
    'flags' => 'int',
    'signers_certificates_filename=' => 'null|string',
    'ca_info=' => 'array<array-key, mixed>',
    'untrusted_certificates_filename=' => 'null|string',
    'content=' => 'null|string',
    'output_filename=' => 'null|string',
  ),
  'openssl_pkey_derive' => 
  array (
    0 => 'false|string',
    'public_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    'private_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    'key_length=' => 'int',
  ),
  'openssl_pkey_export' => 
  array (
    0 => 'bool',
    'key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    '&w_output' => 'string',
    'passphrase=' => 'null|string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'openssl_pkey_export_to_file' => 
  array (
    0 => 'bool',
    'key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    'output_filename' => 'string',
    'passphrase=' => 'null|string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'openssl_pkey_free' => 
  array (
    0 => 'void',
    'key' => 'OpenSSLAsymmetricKey',
  ),
  'openssl_pkey_get_details' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'key' => 'OpenSSLAsymmetricKey',
  ),
  'openssl_pkey_get_private' => 
  array (
    0 => 'OpenSSLAsymmetricKey|false',
    'private_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|array<array-key, mixed>|string',
    'passphrase=' => 'null|string',
  ),
  'openssl_pkey_get_public' => 
  array (
    0 => 'OpenSSLAsymmetricKey|false',
    'public_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
  ),
  'openssl_pkey_new' => 
  array (
    0 => 'OpenSSLAsymmetricKey|false',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'openssl_private_decrypt' => 
  array (
    0 => 'bool',
    'data' => 'string',
    '&w_decrypted_data' => 'string',
    'private_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    'padding=' => 'int',
  ),
  'openssl_private_encrypt' => 
  array (
    0 => 'bool',
    'data' => 'string',
    '&w_encrypted_data' => 'string',
    'private_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    'padding=' => 'int',
  ),
  'openssl_public_decrypt' => 
  array (
    0 => 'bool',
    'data' => 'string',
    '&w_decrypted_data' => 'string',
    'public_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    'padding=' => 'int',
  ),
  'openssl_public_encrypt' => 
  array (
    0 => 'bool',
    'data' => 'string',
    '&w_encrypted_data' => 'string',
    'public_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    'padding=' => 'int',
  ),
  'openssl_random_pseudo_bytes' => 
  array (
    0 => 'string',
    'length' => 'int',
    '&w_strong_result=' => 'bool',
  ),
  'openssl_seal' => 
  array (
    0 => 'false|int',
    'data' => 'string',
    '&w_sealed_data' => 'string',
    '&w_encrypted_keys' => 'array<array-key, mixed>',
    'public_key' => 'list<OpenSSLAsymmetricKey>',
    'cipher_algo' => 'string',
    '&iv=' => 'string',
  ),
  'openssl_sign' => 
  array (
    0 => 'bool',
    'data' => 'string',
    '&w_signature' => 'string',
    'private_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    'algorithm=' => 'int|string',
  ),
  'openssl_spki_export' => 
  array (
    0 => 'false|string',
    'spki' => 'string',
  ),
  'openssl_spki_export_challenge' => 
  array (
    0 => 'false|string',
    'spki' => 'string',
  ),
  'openssl_spki_new' => 
  array (
    0 => 'false|string',
    'private_key' => 'OpenSSLAsymmetricKey',
    'challenge' => 'string',
    'digest_algo=' => 'int',
  ),
  'openssl_spki_verify' => 
  array (
    0 => 'bool',
    'spki' => 'string',
  ),
  'openssl_verify' => 
  array (
    0 => '-1|0|1|false',
    'data' => 'string',
    'signature' => 'string',
    'public_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
    'algorithm=' => 'int|string',
  ),
  'openssl_x509_check_private_key' => 
  array (
    0 => 'bool',
    'certificate' => 'OpenSSLCertificate|string',
    'private_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|list{OpenSSLAsymmetricKey|OpenSSLCertificate|string, string}|string',
  ),
  'openssl_x509_checkpurpose' => 
  array (
    0 => 'bool|int',
    'certificate' => 'OpenSSLCertificate|string',
    'purpose' => 'int',
    'ca_info=' => 'array<array-key, mixed>',
    'untrusted_certificates_file=' => 'null|string',
  ),
  'openssl_x509_export' => 
  array (
    0 => 'bool',
    'certificate' => 'OpenSSLCertificate|string',
    '&w_output' => 'string',
    'no_text=' => 'bool',
  ),
  'openssl_x509_export_to_file' => 
  array (
    0 => 'bool',
    'certificate' => 'OpenSSLCertificate|string',
    'output_filename' => 'string',
    'no_text=' => 'bool',
  ),
  'openssl_x509_fingerprint' => 
  array (
    0 => 'false|string',
    'certificate' => 'OpenSSLCertificate|string',
    'digest_algo=' => 'string',
    'binary=' => 'bool',
  ),
  'openssl_x509_free' => 
  array (
    0 => 'void',
    'certificate' => 'OpenSSLCertificate',
  ),
  'openssl_x509_parse' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'certificate' => 'OpenSSLCertificate|string',
    'short_names=' => 'bool',
  ),
  'openssl_x509_read' => 
  array (
    0 => 'OpenSSLCertificate|false',
    'certificate' => 'OpenSSLCertificate|string',
  ),
  'openssl_x509_verify' => 
  array (
    0 => 'int',
    'certificate' => 'OpenSSLCertificate|string',
    'public_key' => 'OpenSSLAsymmetricKey|OpenSSLCertificate|array<array-key, mixed>|string',
  ),
  'ord' => 
  array (
    0 => 'int<0, 255>',
    'character' => 'string',
  ),
  'outeriterator::current' => 
  array (
    0 => 'mixed',
  ),
  'outeriterator::getinneriterator' => 
  array (
    0 => 'Iterator',
  ),
  'outeriterator::key' => 
  array (
    0 => 'int|string',
  ),
  'outeriterator::next' => 
  array (
    0 => 'void',
  ),
  'outeriterator::rewind' => 
  array (
    0 => 'void',
  ),
  'outeriterator::valid' => 
  array (
    0 => 'bool',
  ),
  'outofboundsexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'outofboundsexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'outofboundsexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'outofboundsexception::getcode' => 
  array (
    0 => 'int',
  ),
  'outofboundsexception::getfile' => 
  array (
    0 => 'string',
  ),
  'outofboundsexception::getline' => 
  array (
    0 => 'int',
  ),
  'outofboundsexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'outofboundsexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'outofboundsexception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'outofboundsexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'outofrangeexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'outofrangeexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'outofrangeexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'outofrangeexception::getcode' => 
  array (
    0 => 'int',
  ),
  'outofrangeexception::getfile' => 
  array (
    0 => 'string',
  ),
  'outofrangeexception::getline' => 
  array (
    0 => 'int',
  ),
  'outofrangeexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'outofrangeexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'outofrangeexception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'outofrangeexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'output_add_rewrite_var' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value' => 'string',
  ),
  'output_cache_disable' => 
  array (
    0 => 'void',
  ),
  'output_cache_disable_compression' => 
  array (
    0 => 'void',
  ),
  'output_cache_exists' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'lifetime' => 'int',
  ),
  'output_cache_fetch' => 
  array (
    0 => 'string',
    'key' => 'string',
    'function' => 'mixed',
    'lifetime' => 'int',
  ),
  'output_cache_get' => 
  array (
    0 => 'false|mixed',
    'key' => 'string',
    'lifetime' => 'int',
  ),
  'output_cache_output' => 
  array (
    0 => 'string',
    'key' => 'string',
    'function' => 'mixed',
    'lifetime' => 'int',
  ),
  'output_cache_put' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'data' => 'mixed',
  ),
  'output_cache_remove' => 
  array (
    0 => 'bool',
    'filename' => 'mixed',
  ),
  'output_cache_remove_key' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'output_cache_remove_url' => 
  array (
    0 => 'bool',
    'url' => 'string',
  ),
  'output_cache_stop' => 
  array (
    0 => 'void',
  ),
  'output_reset_rewrite_vars' => 
  array (
    0 => 'bool',
  ),
  'outputformatobj::getoption' => 
  array (
    0 => 'string',
    'property_name' => 'string',
  ),
  'outputformatobj::set' => 
  array (
    0 => 'int',
    'property_name' => 'string',
    'new_value' => 'mixed',
  ),
  'outputformatobj::setoption' => 
  array (
    0 => 'void',
    'property_name' => 'string',
    'new_value' => 'string',
  ),
  'outputformatobj::validate' => 
  array (
    0 => 'int',
  ),
  'overflowexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'overflowexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'overflowexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'overflowexception::getcode' => 
  array (
    0 => 'int',
  ),
  'overflowexception::getfile' => 
  array (
    0 => 'string',
  ),
  'overflowexception::getline' => 
  array (
    0 => 'int',
  ),
  'overflowexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'overflowexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'overflowexception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'overflowexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'overload' => 
  array (
    0 => 'mixed',
    'class_name' => 'string',
  ),
  'override_function' => 
  array (
    0 => 'bool',
    'function_name' => 'string',
    'function_args' => 'string',
    'function_code' => 'string',
  ),
  'owsrequestobj::__construct' => 
  array (
    0 => 'void',
  ),
  'owsrequestobj::addparameter' => 
  array (
    0 => 'int',
    'name' => 'string',
    'value' => 'string',
  ),
  'owsrequestobj::getname' => 
  array (
    0 => 'string',
    'index' => 'int',
  ),
  'owsrequestobj::getvalue' => 
  array (
    0 => 'string',
    'index' => 'int',
  ),
  'owsrequestobj::getvaluebyname' => 
  array (
    0 => 'string',
    'name' => 'string',
  ),
  'owsrequestobj::loadparams' => 
  array (
    0 => 'int',
  ),
  'owsrequestobj::setparameter' => 
  array (
    0 => 'int',
    'name' => 'string',
    'value' => 'string',
  ),
  'pack' => 
  array (
    0 => 'string',
    'format' => 'string',
    '...values=' => 'mixed',
  ),
  'parallel\\future::done' => 
  array (
    0 => 'bool',
  ),
  'parallel\\future::select' => 
  array (
    0 => 'mixed',
    '&resolving' => 'array<array-key, parallel\\Future>',
    '&w_resolved' => 'array<array-key, parallel\\Future>',
    '&w_errored' => 'array<array-key, parallel\\Future>',
    '&w_timedout=' => 'array<array-key, parallel\\Future>',
    'timeout=' => 'int',
  ),
  'parallel\\future::value' => 
  array (
    0 => 'mixed',
    'timeout=' => 'int',
  ),
  'parallel\\runtime::__construct' => 
  array (
    0 => 'void',
    'arg' => 'array<array-key, mixed>|string',
  ),
  'parallel\\runtime::__construct\'1' => 
  array (
    0 => 'void',
    'bootstrap' => 'string',
    'configuration' => 'array<string, mixed>',
  ),
  'parallel\\runtime::close' => 
  array (
    0 => 'void',
  ),
  'parallel\\runtime::kill' => 
  array (
    0 => 'void',
  ),
  'parallel\\runtime::run' => 
  array (
    0 => 'null|parallel\\Future',
    'closure' => 'Closure',
    'args=' => 'array<array-key, mixed>',
  ),
  'parentiterator::__construct' => 
  array (
    0 => 'void',
    'iterator' => 'RecursiveIterator',
  ),
  'parentiterator::accept' => 
  array (
    0 => 'bool',
  ),
  'parentiterator::current' => 
  array (
    0 => 'mixed',
  ),
  'parentiterator::getchildren' => 
  array (
    0 => 'ParentIterator|null',
  ),
  'parentiterator::getinneriterator' => 
  array (
    0 => 'mixed',
  ),
  'parentiterator::haschildren' => 
  array (
    0 => 'bool',
  ),
  'parentiterator::key' => 
  array (
    0 => 'mixed',
  ),
  'parentiterator::next' => 
  array (
    0 => 'void',
  ),
  'parentiterator::rewind' => 
  array (
    0 => 'void',
  ),
  'parentiterator::valid' => 
  array (
    0 => 'bool',
  ),
  'parle\\lexer::advance' => 
  array (
    0 => 'void',
  ),
  'parle\\lexer::build' => 
  array (
    0 => 'void',
  ),
  'parle\\lexer::callout' => 
  array (
    0 => 'void',
    'id' => 'int',
    'callback' => 'callable',
  ),
  'parle\\lexer::consume' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'parle\\lexer::dump' => 
  array (
    0 => 'void',
  ),
  'parle\\lexer::gettoken' => 
  array (
    0 => 'Parle\\Token',
  ),
  'parle\\lexer::insertmacro' => 
  array (
    0 => 'void',
    'name' => 'string',
    'regex' => 'string',
  ),
  'parle\\lexer::push' => 
  array (
    0 => 'void',
    'regex' => 'string',
    'id' => 'int',
  ),
  'parle\\lexer::reset' => 
  array (
    0 => 'void',
    'pos' => 'int',
  ),
  'parle\\parser::advance' => 
  array (
    0 => 'void',
  ),
  'parle\\parser::build' => 
  array (
    0 => 'void',
  ),
  'parle\\parser::consume' => 
  array (
    0 => 'void',
    'data' => 'string',
    'lexer' => 'Parle\\Lexer',
  ),
  'parle\\parser::dump' => 
  array (
    0 => 'void',
  ),
  'parle\\parser::errorinfo' => 
  array (
    0 => 'Parle\\ErrorInfo',
  ),
  'parle\\parser::left' => 
  array (
    0 => 'void',
    'token' => 'string',
  ),
  'parle\\parser::nonassoc' => 
  array (
    0 => 'void',
    'token' => 'string',
  ),
  'parle\\parser::precedence' => 
  array (
    0 => 'void',
    'token' => 'string',
  ),
  'parle\\parser::push' => 
  array (
    0 => 'int',
    'name' => 'string',
    'rule' => 'string',
  ),
  'parle\\parser::reset' => 
  array (
    0 => 'void',
    'tokenId' => 'int',
  ),
  'parle\\parser::right' => 
  array (
    0 => 'void',
    'token' => 'string',
  ),
  'parle\\parser::sigil' => 
  array (
    0 => 'string',
    'idx' => 'array<array-key, mixed>',
  ),
  'parle\\parser::token' => 
  array (
    0 => 'void',
    'token' => 'string',
  ),
  'parle\\parser::tokenid' => 
  array (
    0 => 'int',
    'token' => 'string',
  ),
  'parle\\parser::trace' => 
  array (
    0 => 'string',
  ),
  'parle\\parser::validate' => 
  array (
    0 => 'bool',
    'data' => 'string',
    'lexer' => 'Parle\\Lexer',
  ),
  'parle\\rlexer::advance' => 
  array (
    0 => 'void',
  ),
  'parle\\rlexer::build' => 
  array (
    0 => 'void',
  ),
  'parle\\rlexer::callout' => 
  array (
    0 => 'void',
    'id' => 'int',
    'callback' => 'callable',
  ),
  'parle\\rlexer::consume' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'parle\\rlexer::dump' => 
  array (
    0 => 'void',
  ),
  'parle\\rlexer::gettoken' => 
  array (
    0 => 'Parle\\Token',
  ),
  'parle\\rlexer::insertmacro' => 
  array (
    0 => 'void',
    'name' => 'string',
    'regex' => 'string',
  ),
  'parle\\rlexer::push' => 
  array (
    0 => 'void',
    'state' => 'string',
    'regex' => 'string',
    'newState' => 'string',
  ),
  'parle\\rlexer::pushstate' => 
  array (
    0 => 'int',
    'state' => 'string',
  ),
  'parle\\rlexer::reset' => 
  array (
    0 => 'void',
    'pos' => 'int',
  ),
  'parle\\rparser::advance' => 
  array (
    0 => 'void',
  ),
  'parle\\rparser::build' => 
  array (
    0 => 'void',
  ),
  'parle\\rparser::consume' => 
  array (
    0 => 'void',
    'data' => 'string',
    'lexer' => 'Parle\\Lexer',
  ),
  'parle\\rparser::dump' => 
  array (
    0 => 'void',
  ),
  'parle\\rparser::errorinfo' => 
  array (
    0 => 'Parle\\ErrorInfo',
  ),
  'parle\\rparser::left' => 
  array (
    0 => 'void',
    'token' => 'string',
  ),
  'parle\\rparser::nonassoc' => 
  array (
    0 => 'void',
    'token' => 'string',
  ),
  'parle\\rparser::precedence' => 
  array (
    0 => 'void',
    'token' => 'string',
  ),
  'parle\\rparser::push' => 
  array (
    0 => 'int',
    'name' => 'string',
    'rule' => 'string',
  ),
  'parle\\rparser::reset' => 
  array (
    0 => 'void',
    'tokenId' => 'int',
  ),
  'parle\\rparser::right' => 
  array (
    0 => 'void',
    'token' => 'string',
  ),
  'parle\\rparser::sigil' => 
  array (
    0 => 'string',
    'idx' => 'array<array-key, mixed>',
  ),
  'parle\\rparser::token' => 
  array (
    0 => 'void',
    'token' => 'string',
  ),
  'parle\\rparser::tokenid' => 
  array (
    0 => 'int',
    'token' => 'string',
  ),
  'parle\\rparser::trace' => 
  array (
    0 => 'string',
  ),
  'parle\\rparser::validate' => 
  array (
    0 => 'bool',
    'data' => 'string',
    'lexer' => 'Parle\\Lexer',
  ),
  'parle\\stack::pop' => 
  array (
    0 => 'void',
  ),
  'parle\\stack::push' => 
  array (
    0 => 'void',
    'item' => 'mixed',
  ),
  'parse_ini_file' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'filename' => 'string',
    'process_sections=' => 'bool',
    'scanner_mode=' => 'int',
  ),
  'parse_ini_string' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'ini_string' => 'string',
    'process_sections=' => 'bool',
    'scanner_mode=' => 'int',
  ),
  'parse_str' => 
  array (
    0 => 'void',
    'string' => 'string',
    '&w_result' => 'array<array-key, mixed>',
  ),
  'parse_url' => 
  array (
    0 => 'array<array-key, mixed>|false|int|null|string',
    'url' => 'string',
    'component=' => 'int',
  ),
  'parseerror::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'parseerror::__tostring' => 
  array (
    0 => 'string',
  ),
  'parseerror::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'parseerror::getcode' => 
  array (
    0 => 'int',
  ),
  'parseerror::getfile' => 
  array (
    0 => 'string',
  ),
  'parseerror::getline' => 
  array (
    0 => 'int',
  ),
  'parseerror::getmessage' => 
  array (
    0 => 'string',
  ),
  'parseerror::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'parseerror::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'parseerror::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'parsekit_compile_file' => 
  array (
    0 => 'array<array-key, mixed>',
    'filename' => 'string',
    'errors=' => 'array<array-key, mixed>',
    'options=' => 'int',
  ),
  'parsekit_compile_string' => 
  array (
    0 => 'array<array-key, mixed>',
    'phpcode' => 'string',
    'errors=' => 'array<array-key, mixed>',
    'options=' => 'int',
  ),
  'parsekit_func_arginfo' => 
  array (
    0 => 'array<array-key, mixed>',
    'function' => 'mixed',
  ),
  'passthru' => 
  array (
    0 => 'bool|null',
    'command' => 'string',
    '&w_result_code=' => 'int',
  ),
  'password_algos' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'password_get_info' => 
  array (
    0 => 'array<array-key, mixed>',
    'hash' => 'string',
  ),
  'password_hash' => 
  array (
    0 => 'string',
    'password' => 'string',
    'algo' => 'int|null|string',
    'options=' => 'array<array-key, mixed>',
  ),
  'password_make_salt' => 
  array (
    0 => 'bool',
    'password' => 'string',
    'hash' => 'string',
  ),
  'password_needs_rehash' => 
  array (
    0 => 'bool',
    'hash' => 'string',
    'algo' => 'int|null|string',
    'options=' => 'array<array-key, mixed>',
  ),
  'password_verify' => 
  array (
    0 => 'bool',
    'password' => 'string',
    'hash' => 'string',
  ),
  'pathinfo' => 
  array (
    0 => 'array<array-key, mixed>|string',
    'path' => 'string',
    'flags=' => 'int',
  ),
  'pclose' => 
  array (
    0 => 'int',
    'handle' => 'resource',
  ),
  'pcnlt_sigwaitinfo' => 
  array (
    0 => 'int',
    'set' => 'array<array-key, mixed>',
    '&w_siginfo' => 'array<array-key, mixed>',
  ),
  'pcntl_alarm' => 
  array (
    0 => 'int',
    'seconds' => 'int',
  ),
  'pcntl_async_signals' => 
  array (
    0 => 'bool',
    'enable=' => 'bool|null',
  ),
  'pcntl_errno' => 
  array (
    0 => 'int',
  ),
  'pcntl_exec' => 
  array (
    0 => 'false',
    'path' => 'string',
    'args=' => 'array<array-key, mixed>',
    'env_vars=' => 'array<array-key, mixed>',
  ),
  'pcntl_fork' => 
  array (
    0 => 'int',
  ),
  'pcntl_get_last_error' => 
  array (
    0 => 'int',
  ),
  'pcntl_getpriority' => 
  array (
    0 => 'int',
    'process_id=' => 'int|null',
    'mode=' => 'int',
  ),
  'pcntl_setpriority' => 
  array (
    0 => 'bool',
    'priority' => 'int',
    'process_id=' => 'int|null',
    'mode=' => 'int',
  ),
  'pcntl_signal' => 
  array (
    0 => 'bool',
    'signal' => 'int',
    'handler' => 'callable():void|callable(int):void|callable(int, array<array-key, mixed>):void|int',
    'restart_syscalls=' => 'bool',
  ),
  'pcntl_signal_dispatch' => 
  array (
    0 => 'bool',
  ),
  'pcntl_signal_get_handler' => 
  array (
    0 => 'int|string',
    'signal' => 'int',
  ),
  'pcntl_sigprocmask' => 
  array (
    0 => 'bool',
    'mode' => 'int',
    'signals' => 'array<array-key, mixed>',
    '&w_old_signals=' => 'array<array-key, mixed>',
  ),
  'pcntl_sigtimedwait' => 
  array (
    0 => 'int',
    'signals' => 'array<array-key, mixed>',
    '&w_info=' => 'array<array-key, mixed>',
    'seconds=' => 'int',
    'nanoseconds=' => 'int',
  ),
  'pcntl_sigwaitinfo' => 
  array (
    0 => 'int',
    'signals' => 'array<array-key, mixed>',
    '&w_info=' => 'array<array-key, mixed>',
  ),
  'pcntl_strerror' => 
  array (
    0 => 'string',
    'error_code' => 'int',
  ),
  'pcntl_unshare' => 
  array (
    0 => 'bool',
    'flags' => 'int',
  ),
  'pcntl_wait' => 
  array (
    0 => 'int',
    '&w_status' => 'int',
    'flags=' => 'int',
    '&w_resource_usage=' => 'array<array-key, mixed>',
  ),
  'pcntl_waitpid' => 
  array (
    0 => 'int',
    'process_id' => 'int',
    '&w_status' => 'int',
    'flags=' => 'int',
    '&w_resource_usage=' => 'array<array-key, mixed>',
  ),
  'pcntl_wexitstatus' => 
  array (
    0 => 'int',
    'status' => 'int',
  ),
  'pcntl_wifexited' => 
  array (
    0 => 'bool',
    'status' => 'int',
  ),
  'pcntl_wifsignaled' => 
  array (
    0 => 'bool',
    'status' => 'int',
  ),
  'pcntl_wifstopped' => 
  array (
    0 => 'bool',
    'status' => 'int',
  ),
  'pcntl_wstopsig' => 
  array (
    0 => 'int',
    'status' => 'int',
  ),
  'pcntl_wtermsig' => 
  array (
    0 => 'int',
    'status' => 'int',
  ),
  'pdf_activate_item' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'id' => 'int',
  ),
  'pdf_add_launchlink' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'filename' => 'string',
  ),
  'pdf_add_locallink' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'lowerleftx' => 'float',
    'lowerlefty' => 'float',
    'upperrightx' => 'float',
    'upperrighty' => 'float',
    'page' => 'int',
    'dest' => 'string',
  ),
  'pdf_add_nameddest' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'name' => 'string',
    'optlist' => 'string',
  ),
  'pdf_add_note' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'contents' => 'string',
    'title' => 'string',
    'icon' => 'string',
    'open' => 'int',
  ),
  'pdf_add_pdflink' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'bottom_left_x' => 'float',
    'bottom_left_y' => 'float',
    'up_right_x' => 'float',
    'up_right_y' => 'float',
    'filename' => 'string',
    'page' => 'int',
    'dest' => 'string',
  ),
  'pdf_add_table_cell' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'table' => 'int',
    'column' => 'int',
    'row' => 'int',
    'text' => 'string',
    'optlist' => 'string',
  ),
  'pdf_add_textflow' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'textflow' => 'int',
    'text' => 'string',
    'optlist' => 'string',
  ),
  'pdf_add_thumbnail' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'image' => 'int',
  ),
  'pdf_add_weblink' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'lowerleftx' => 'float',
    'lowerlefty' => 'float',
    'upperrightx' => 'float',
    'upperrighty' => 'float',
    'url' => 'string',
  ),
  'pdf_arc' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'x' => 'float',
    'y' => 'float',
    'r' => 'float',
    'alpha' => 'float',
    'beta' => 'float',
  ),
  'pdf_arcn' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'x' => 'float',
    'y' => 'float',
    'r' => 'float',
    'alpha' => 'float',
    'beta' => 'float',
  ),
  'pdf_attach_file' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'filename' => 'string',
    'description' => 'string',
    'author' => 'string',
    'mimetype' => 'string',
    'icon' => 'string',
  ),
  'pdf_begin_document' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'filename' => 'string',
    'optlist' => 'string',
  ),
  'pdf_begin_font' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'filename' => 'string',
    'a' => 'float',
    'b' => 'float',
    'c' => 'float',
    'd' => 'float',
    'e' => 'float',
    'f' => 'float',
    'optlist' => 'string',
  ),
  'pdf_begin_glyph' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'glyphname' => 'string',
    'wx' => 'float',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
  ),
  'pdf_begin_item' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'tag' => 'string',
    'optlist' => 'string',
  ),
  'pdf_begin_layer' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'layer' => 'int',
  ),
  'pdf_begin_page' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'width' => 'float',
    'height' => 'float',
  ),
  'pdf_begin_page_ext' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'width' => 'float',
    'height' => 'float',
    'optlist' => 'string',
  ),
  'pdf_begin_pattern' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'width' => 'float',
    'height' => 'float',
    'xstep' => 'float',
    'ystep' => 'float',
    'painttype' => 'int',
  ),
  'pdf_begin_template' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'width' => 'float',
    'height' => 'float',
  ),
  'pdf_begin_template_ext' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'width' => 'float',
    'height' => 'float',
    'optlist' => 'string',
  ),
  'pdf_circle' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'x' => 'float',
    'y' => 'float',
    'r' => 'float',
  ),
  'pdf_clip' => 
  array (
    0 => 'bool',
    'p' => 'resource',
  ),
  'pdf_close' => 
  array (
    0 => 'bool',
    'p' => 'resource',
  ),
  'pdf_close_image' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'image' => 'int',
  ),
  'pdf_close_pdi' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'doc' => 'int',
  ),
  'pdf_close_pdi_page' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'page' => 'int',
  ),
  'pdf_closepath' => 
  array (
    0 => 'bool',
    'p' => 'resource',
  ),
  'pdf_closepath_fill_stroke' => 
  array (
    0 => 'bool',
    'p' => 'resource',
  ),
  'pdf_closepath_stroke' => 
  array (
    0 => 'bool',
    'p' => 'resource',
  ),
  'pdf_concat' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'a' => 'float',
    'b' => 'float',
    'c' => 'float',
    'd' => 'float',
    'e' => 'float',
    'f' => 'float',
  ),
  'pdf_continue_text' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'text' => 'string',
  ),
  'pdf_create_3dview' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'username' => 'string',
    'optlist' => 'string',
  ),
  'pdf_create_action' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'type' => 'string',
    'optlist' => 'string',
  ),
  'pdf_create_annotation' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'type' => 'string',
    'optlist' => 'string',
  ),
  'pdf_create_bookmark' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'text' => 'string',
    'optlist' => 'string',
  ),
  'pdf_create_field' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'name' => 'string',
    'type' => 'string',
    'optlist' => 'string',
  ),
  'pdf_create_fieldgroup' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'name' => 'string',
    'optlist' => 'string',
  ),
  'pdf_create_gstate' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'optlist' => 'string',
  ),
  'pdf_create_pvf' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'filename' => 'string',
    'data' => 'string',
    'optlist' => 'string',
  ),
  'pdf_create_textflow' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'text' => 'string',
    'optlist' => 'string',
  ),
  'pdf_curveto' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'x1' => 'float',
    'y1' => 'float',
    'x2' => 'float',
    'y2' => 'float',
    'x3' => 'float',
    'y3' => 'float',
  ),
  'pdf_define_layer' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'name' => 'string',
    'optlist' => 'string',
  ),
  'pdf_delete' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
  ),
  'pdf_delete_pvf' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'filename' => 'string',
  ),
  'pdf_delete_table' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'table' => 'int',
    'optlist' => 'string',
  ),
  'pdf_delete_textflow' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'textflow' => 'int',
  ),
  'pdf_encoding_set_char' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'encoding' => 'string',
    'slot' => 'int',
    'glyphname' => 'string',
    'uv' => 'int',
  ),
  'pdf_end_document' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'optlist' => 'string',
  ),
  'pdf_end_font' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
  ),
  'pdf_end_glyph' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
  ),
  'pdf_end_item' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'id' => 'int',
  ),
  'pdf_end_layer' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
  ),
  'pdf_end_page' => 
  array (
    0 => 'bool',
    'p' => 'resource',
  ),
  'pdf_end_page_ext' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'optlist' => 'string',
  ),
  'pdf_end_pattern' => 
  array (
    0 => 'bool',
    'p' => 'resource',
  ),
  'pdf_end_template' => 
  array (
    0 => 'bool',
    'p' => 'resource',
  ),
  'pdf_endpath' => 
  array (
    0 => 'bool',
    'p' => 'resource',
  ),
  'pdf_fill' => 
  array (
    0 => 'bool',
    'p' => 'resource',
  ),
  'pdf_fill_imageblock' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'page' => 'int',
    'blockname' => 'string',
    'image' => 'int',
    'optlist' => 'string',
  ),
  'pdf_fill_pdfblock' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'page' => 'int',
    'blockname' => 'string',
    'contents' => 'int',
    'optlist' => 'string',
  ),
  'pdf_fill_stroke' => 
  array (
    0 => 'bool',
    'p' => 'resource',
  ),
  'pdf_fill_textblock' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'page' => 'int',
    'blockname' => 'string',
    'text' => 'string',
    'optlist' => 'string',
  ),
  'pdf_findfont' => 
  array (
    0 => 'int',
    'p' => 'resource',
    'fontname' => 'string',
    'encoding' => 'string',
    'embed' => 'int',
  ),
  'pdf_fit_image' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'image' => 'int',
    'x' => 'float',
    'y' => 'float',
    'optlist' => 'string',
  ),
  'pdf_fit_pdi_page' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'page' => 'int',
    'x' => 'float',
    'y' => 'float',
    'optlist' => 'string',
  ),
  'pdf_fit_table' => 
  array (
    0 => 'string',
    'pdfdoc' => 'resource',
    'table' => 'int',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'optlist' => 'string',
  ),
  'pdf_fit_textflow' => 
  array (
    0 => 'string',
    'pdfdoc' => 'resource',
    'textflow' => 'int',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'optlist' => 'string',
  ),
  'pdf_fit_textline' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'text' => 'string',
    'x' => 'float',
    'y' => 'float',
    'optlist' => 'string',
  ),
  'pdf_get_apiname' => 
  array (
    0 => 'string',
    'pdfdoc' => 'resource',
  ),
  'pdf_get_buffer' => 
  array (
    0 => 'string',
    'p' => 'resource',
  ),
  'pdf_get_errmsg' => 
  array (
    0 => 'string',
    'pdfdoc' => 'resource',
  ),
  'pdf_get_errnum' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
  ),
  'pdf_get_majorversion' => 
  array (
    0 => 'int',
  ),
  'pdf_get_minorversion' => 
  array (
    0 => 'int',
  ),
  'pdf_get_parameter' => 
  array (
    0 => 'string',
    'p' => 'resource',
    'key' => 'string',
    'modifier' => 'float',
  ),
  'pdf_get_pdi_parameter' => 
  array (
    0 => 'string',
    'p' => 'resource',
    'key' => 'string',
    'doc' => 'int',
    'page' => 'int',
    'reserved' => 'int',
  ),
  'pdf_get_pdi_value' => 
  array (
    0 => 'float',
    'p' => 'resource',
    'key' => 'string',
    'doc' => 'int',
    'page' => 'int',
    'reserved' => 'int',
  ),
  'pdf_get_value' => 
  array (
    0 => 'float',
    'p' => 'resource',
    'key' => 'string',
    'modifier' => 'float',
  ),
  'pdf_info_font' => 
  array (
    0 => 'float',
    'pdfdoc' => 'resource',
    'font' => 'int',
    'keyword' => 'string',
    'optlist' => 'string',
  ),
  'pdf_info_matchbox' => 
  array (
    0 => 'float',
    'pdfdoc' => 'resource',
    'boxname' => 'string',
    'num' => 'int',
    'keyword' => 'string',
  ),
  'pdf_info_table' => 
  array (
    0 => 'float',
    'pdfdoc' => 'resource',
    'table' => 'int',
    'keyword' => 'string',
  ),
  'pdf_info_textflow' => 
  array (
    0 => 'float',
    'pdfdoc' => 'resource',
    'textflow' => 'int',
    'keyword' => 'string',
  ),
  'pdf_info_textline' => 
  array (
    0 => 'float',
    'pdfdoc' => 'resource',
    'text' => 'string',
    'keyword' => 'string',
    'optlist' => 'string',
  ),
  'pdf_initgraphics' => 
  array (
    0 => 'bool',
    'p' => 'resource',
  ),
  'pdf_lineto' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'x' => 'float',
    'y' => 'float',
  ),
  'pdf_load_3ddata' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'filename' => 'string',
    'optlist' => 'string',
  ),
  'pdf_load_font' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'fontname' => 'string',
    'encoding' => 'string',
    'optlist' => 'string',
  ),
  'pdf_load_iccprofile' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'profilename' => 'string',
    'optlist' => 'string',
  ),
  'pdf_load_image' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'imagetype' => 'string',
    'filename' => 'string',
    'optlist' => 'string',
  ),
  'pdf_makespotcolor' => 
  array (
    0 => 'int',
    'p' => 'resource',
    'spotname' => 'string',
  ),
  'pdf_moveto' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'x' => 'float',
    'y' => 'float',
  ),
  'pdf_new' => 
  array (
    0 => 'resource',
  ),
  'pdf_open_ccitt' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'filename' => 'string',
    'width' => 'int',
    'height' => 'int',
    'bitreverse' => 'int',
    'k' => 'int',
    'blackls1' => 'int',
  ),
  'pdf_open_file' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'filename' => 'string',
  ),
  'pdf_open_image' => 
  array (
    0 => 'int',
    'p' => 'resource',
    'imagetype' => 'string',
    'source' => 'string',
    'data' => 'string',
    'length' => 'int',
    'width' => 'int',
    'height' => 'int',
    'components' => 'int',
    'bpc' => 'int',
    'params' => 'string',
  ),
  'pdf_open_image_file' => 
  array (
    0 => 'int',
    'p' => 'resource',
    'imagetype' => 'string',
    'filename' => 'string',
    'stringparam' => 'string',
    'intparam' => 'int',
  ),
  'pdf_open_memory_image' => 
  array (
    0 => 'int',
    'p' => 'resource',
    'image' => 'resource',
  ),
  'pdf_open_pdi' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'filename' => 'string',
    'optlist' => 'string',
    'length' => 'int',
  ),
  'pdf_open_pdi_document' => 
  array (
    0 => 'int',
    'p' => 'resource',
    'filename' => 'string',
    'optlist' => 'string',
  ),
  'pdf_open_pdi_page' => 
  array (
    0 => 'int',
    'p' => 'resource',
    'doc' => 'int',
    'pagenumber' => 'int',
    'optlist' => 'string',
  ),
  'pdf_pcos_get_number' => 
  array (
    0 => 'float',
    'p' => 'resource',
    'doc' => 'int',
    'path' => 'string',
  ),
  'pdf_pcos_get_stream' => 
  array (
    0 => 'string',
    'p' => 'resource',
    'doc' => 'int',
    'optlist' => 'string',
    'path' => 'string',
  ),
  'pdf_pcos_get_string' => 
  array (
    0 => 'string',
    'p' => 'resource',
    'doc' => 'int',
    'path' => 'string',
  ),
  'pdf_place_image' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'image' => 'int',
    'x' => 'float',
    'y' => 'float',
    'scale' => 'float',
  ),
  'pdf_place_pdi_page' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'page' => 'int',
    'x' => 'float',
    'y' => 'float',
    'sx' => 'float',
    'sy' => 'float',
  ),
  'pdf_process_pdi' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'doc' => 'int',
    'page' => 'int',
    'optlist' => 'string',
  ),
  'pdf_rect' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'x' => 'float',
    'y' => 'float',
    'width' => 'float',
    'height' => 'float',
  ),
  'pdf_restore' => 
  array (
    0 => 'bool',
    'p' => 'resource',
  ),
  'pdf_resume_page' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'optlist' => 'string',
  ),
  'pdf_rotate' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'phi' => 'float',
  ),
  'pdf_save' => 
  array (
    0 => 'bool',
    'p' => 'resource',
  ),
  'pdf_scale' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'sx' => 'float',
    'sy' => 'float',
  ),
  'pdf_set_border_color' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'red' => 'float',
    'green' => 'float',
    'blue' => 'float',
  ),
  'pdf_set_border_dash' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'black' => 'float',
    'white' => 'float',
  ),
  'pdf_set_border_style' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'style' => 'string',
    'width' => 'float',
  ),
  'pdf_set_gstate' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'gstate' => 'int',
  ),
  'pdf_set_info' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'key' => 'string',
    'value' => 'string',
  ),
  'pdf_set_layer_dependency' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'type' => 'string',
    'optlist' => 'string',
  ),
  'pdf_set_parameter' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'key' => 'string',
    'value' => 'string',
  ),
  'pdf_set_text_pos' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'x' => 'float',
    'y' => 'float',
  ),
  'pdf_set_value' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'key' => 'string',
    'value' => 'float',
  ),
  'pdf_setcolor' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'fstype' => 'string',
    'colorspace' => 'string',
    'c1' => 'float',
    'c2' => 'float',
    'c3' => 'float',
    'c4' => 'float',
  ),
  'pdf_setdash' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'b' => 'float',
    'w' => 'float',
  ),
  'pdf_setdashpattern' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'optlist' => 'string',
  ),
  'pdf_setflat' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'flatness' => 'float',
  ),
  'pdf_setfont' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'font' => 'int',
    'fontsize' => 'float',
  ),
  'pdf_setgray' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'g' => 'float',
  ),
  'pdf_setgray_fill' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'g' => 'float',
  ),
  'pdf_setgray_stroke' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'g' => 'float',
  ),
  'pdf_setlinecap' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'linecap' => 'int',
  ),
  'pdf_setlinejoin' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'value' => 'int',
  ),
  'pdf_setlinewidth' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'width' => 'float',
  ),
  'pdf_setmatrix' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'a' => 'float',
    'b' => 'float',
    'c' => 'float',
    'd' => 'float',
    'e' => 'float',
    'f' => 'float',
  ),
  'pdf_setmiterlimit' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'miter' => 'float',
  ),
  'pdf_setrgbcolor' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'red' => 'float',
    'green' => 'float',
    'blue' => 'float',
  ),
  'pdf_setrgbcolor_fill' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'red' => 'float',
    'green' => 'float',
    'blue' => 'float',
  ),
  'pdf_setrgbcolor_stroke' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'red' => 'float',
    'green' => 'float',
    'blue' => 'float',
  ),
  'pdf_shading' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'shtype' => 'string',
    'x0' => 'float',
    'y0' => 'float',
    'x1' => 'float',
    'y1' => 'float',
    'c1' => 'float',
    'c2' => 'float',
    'c3' => 'float',
    'c4' => 'float',
    'optlist' => 'string',
  ),
  'pdf_shading_pattern' => 
  array (
    0 => 'int',
    'pdfdoc' => 'resource',
    'shading' => 'int',
    'optlist' => 'string',
  ),
  'pdf_shfill' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'shading' => 'int',
  ),
  'pdf_show' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'text' => 'string',
  ),
  'pdf_show_boxed' => 
  array (
    0 => 'int',
    'p' => 'resource',
    'text' => 'string',
    'left' => 'float',
    'top' => 'float',
    'width' => 'float',
    'height' => 'float',
    'mode' => 'string',
    'feature' => 'string',
  ),
  'pdf_show_xy' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'text' => 'string',
    'x' => 'float',
    'y' => 'float',
  ),
  'pdf_skew' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'alpha' => 'float',
    'beta' => 'float',
  ),
  'pdf_stringwidth' => 
  array (
    0 => 'float',
    'p' => 'resource',
    'text' => 'string',
    'font' => 'int',
    'fontsize' => 'float',
  ),
  'pdf_stroke' => 
  array (
    0 => 'bool',
    'p' => 'resource',
  ),
  'pdf_suspend_page' => 
  array (
    0 => 'bool',
    'pdfdoc' => 'resource',
    'optlist' => 'string',
  ),
  'pdf_translate' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'tx' => 'float',
    'ty' => 'float',
  ),
  'pdf_utf16_to_utf8' => 
  array (
    0 => 'string',
    'pdfdoc' => 'resource',
    'utf16string' => 'string',
  ),
  'pdf_utf32_to_utf16' => 
  array (
    0 => 'string',
    'pdfdoc' => 'resource',
    'utf32string' => 'string',
    'ordering' => 'string',
  ),
  'pdf_utf8_to_utf16' => 
  array (
    0 => 'string',
    'pdfdoc' => 'resource',
    'utf8string' => 'string',
    'ordering' => 'string',
  ),
  'pdflib::activate_item' => 
  array (
    0 => 'bool',
    'id' => 'mixed',
  ),
  'pdflib::add_launchlink' => 
  array (
    0 => 'bool',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'filename' => 'string',
  ),
  'pdflib::add_locallink' => 
  array (
    0 => 'bool',
    'lowerleftx' => 'float',
    'lowerlefty' => 'float',
    'upperrightx' => 'float',
    'upperrighty' => 'float',
    'page' => 'int',
    'dest' => 'string',
  ),
  'pdflib::add_nameddest' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'optlist' => 'string',
  ),
  'pdflib::add_note' => 
  array (
    0 => 'bool',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'contents' => 'string',
    'title' => 'string',
    'icon' => 'string',
    'open' => 'int',
  ),
  'pdflib::add_pdflink' => 
  array (
    0 => 'bool',
    'bottom_left_x' => 'float',
    'bottom_left_y' => 'float',
    'up_right_x' => 'float',
    'up_right_y' => 'float',
    'filename' => 'string',
    'page' => 'int',
    'dest' => 'string',
  ),
  'pdflib::add_table_cell' => 
  array (
    0 => 'int',
    'table' => 'int',
    'column' => 'int',
    'row' => 'int',
    'text' => 'string',
    'optlist' => 'string',
  ),
  'pdflib::add_textflow' => 
  array (
    0 => 'int',
    'textflow' => 'int',
    'text' => 'string',
    'optlist' => 'string',
  ),
  'pdflib::add_thumbnail' => 
  array (
    0 => 'bool',
    'image' => 'int',
  ),
  'pdflib::add_weblink' => 
  array (
    0 => 'bool',
    'lowerleftx' => 'float',
    'lowerlefty' => 'float',
    'upperrightx' => 'float',
    'upperrighty' => 'float',
    'url' => 'string',
  ),
  'pdflib::arc' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
    'r' => 'float',
    'alpha' => 'float',
    'beta' => 'float',
  ),
  'pdflib::arcn' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
    'r' => 'float',
    'alpha' => 'float',
    'beta' => 'float',
  ),
  'pdflib::attach_file' => 
  array (
    0 => 'bool',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'filename' => 'string',
    'description' => 'string',
    'author' => 'string',
    'mimetype' => 'string',
    'icon' => 'string',
  ),
  'pdflib::begin_document' => 
  array (
    0 => 'int',
    'filename' => 'string',
    'optlist' => 'string',
  ),
  'pdflib::begin_font' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'a' => 'float',
    'b' => 'float',
    'c' => 'float',
    'd' => 'float',
    'e' => 'float',
    'f' => 'float',
    'optlist' => 'string',
  ),
  'pdflib::begin_glyph' => 
  array (
    0 => 'bool',
    'glyphname' => 'string',
    'wx' => 'float',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
  ),
  'pdflib::begin_item' => 
  array (
    0 => 'int',
    'tag' => 'string',
    'optlist' => 'string',
  ),
  'pdflib::begin_layer' => 
  array (
    0 => 'bool',
    'layer' => 'int',
  ),
  'pdflib::begin_page' => 
  array (
    0 => 'bool',
    'width' => 'float',
    'height' => 'float',
  ),
  'pdflib::begin_page_ext' => 
  array (
    0 => 'bool',
    'width' => 'float',
    'height' => 'float',
    'optlist' => 'string',
  ),
  'pdflib::begin_pattern' => 
  array (
    0 => 'int',
    'width' => 'float',
    'height' => 'float',
    'xstep' => 'float',
    'ystep' => 'float',
    'painttype' => 'int',
  ),
  'pdflib::begin_template' => 
  array (
    0 => 'int',
    'width' => 'float',
    'height' => 'float',
  ),
  'pdflib::begin_template_ext' => 
  array (
    0 => 'int',
    'width' => 'float',
    'height' => 'float',
    'optlist' => 'string',
  ),
  'pdflib::circle' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
    'r' => 'float',
  ),
  'pdflib::clip' => 
  array (
    0 => 'bool',
  ),
  'pdflib::close' => 
  array (
    0 => 'bool',
  ),
  'pdflib::close_image' => 
  array (
    0 => 'bool',
    'image' => 'int',
  ),
  'pdflib::close_pdi' => 
  array (
    0 => 'bool',
    'doc' => 'int',
  ),
  'pdflib::close_pdi_page' => 
  array (
    0 => 'bool',
    'page' => 'int',
  ),
  'pdflib::closepath' => 
  array (
    0 => 'bool',
  ),
  'pdflib::closepath_fill_stroke' => 
  array (
    0 => 'bool',
  ),
  'pdflib::closepath_stroke' => 
  array (
    0 => 'bool',
  ),
  'pdflib::concat' => 
  array (
    0 => 'bool',
    'a' => 'float',
    'b' => 'float',
    'c' => 'float',
    'd' => 'float',
    'e' => 'float',
    'f' => 'float',
  ),
  'pdflib::continue_text' => 
  array (
    0 => 'bool',
    'text' => 'string',
  ),
  'pdflib::create_3dview' => 
  array (
    0 => 'int',
    'username' => 'string',
    'optlist' => 'string',
  ),
  'pdflib::create_action' => 
  array (
    0 => 'int',
    'type' => 'string',
    'optlist' => 'string',
  ),
  'pdflib::create_annotation' => 
  array (
    0 => 'bool',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'type' => 'string',
    'optlist' => 'string',
  ),
  'pdflib::create_bookmark' => 
  array (
    0 => 'int',
    'text' => 'string',
    'optlist' => 'string',
  ),
  'pdflib::create_field' => 
  array (
    0 => 'bool',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'name' => 'string',
    'type' => 'string',
    'optlist' => 'string',
  ),
  'pdflib::create_fieldgroup' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'optlist' => 'string',
  ),
  'pdflib::create_gstate' => 
  array (
    0 => 'int',
    'optlist' => 'string',
  ),
  'pdflib::create_pvf' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'data' => 'string',
    'optlist' => 'string',
  ),
  'pdflib::create_textflow' => 
  array (
    0 => 'int',
    'text' => 'string',
    'optlist' => 'string',
  ),
  'pdflib::curveto' => 
  array (
    0 => 'bool',
    'x1' => 'float',
    'y1' => 'float',
    'x2' => 'float',
    'y2' => 'float',
    'x3' => 'float',
    'y3' => 'float',
  ),
  'pdflib::define_layer' => 
  array (
    0 => 'int',
    'name' => 'string',
    'optlist' => 'string',
  ),
  'pdflib::delete' => 
  array (
    0 => 'bool',
  ),
  'pdflib::delete_pvf' => 
  array (
    0 => 'int',
    'filename' => 'string',
  ),
  'pdflib::delete_table' => 
  array (
    0 => 'bool',
    'table' => 'int',
    'optlist' => 'string',
  ),
  'pdflib::delete_textflow' => 
  array (
    0 => 'bool',
    'textflow' => 'int',
  ),
  'pdflib::encoding_set_char' => 
  array (
    0 => 'bool',
    'encoding' => 'string',
    'slot' => 'int',
    'glyphname' => 'string',
    'uv' => 'int',
  ),
  'pdflib::end_document' => 
  array (
    0 => 'bool',
    'optlist' => 'string',
  ),
  'pdflib::end_font' => 
  array (
    0 => 'bool',
  ),
  'pdflib::end_glyph' => 
  array (
    0 => 'bool',
  ),
  'pdflib::end_item' => 
  array (
    0 => 'bool',
    'id' => 'int',
  ),
  'pdflib::end_layer' => 
  array (
    0 => 'bool',
  ),
  'pdflib::end_page' => 
  array (
    0 => 'bool',
    'p' => 'mixed',
  ),
  'pdflib::end_page_ext' => 
  array (
    0 => 'bool',
    'optlist' => 'string',
  ),
  'pdflib::end_pattern' => 
  array (
    0 => 'bool',
    'p' => 'mixed',
  ),
  'pdflib::end_template' => 
  array (
    0 => 'bool',
    'p' => 'mixed',
  ),
  'pdflib::endpath' => 
  array (
    0 => 'bool',
    'p' => 'mixed',
  ),
  'pdflib::fill' => 
  array (
    0 => 'bool',
  ),
  'pdflib::fill_imageblock' => 
  array (
    0 => 'int',
    'page' => 'int',
    'blockname' => 'string',
    'image' => 'int',
    'optlist' => 'string',
  ),
  'pdflib::fill_pdfblock' => 
  array (
    0 => 'int',
    'page' => 'int',
    'blockname' => 'string',
    'contents' => 'int',
    'optlist' => 'string',
  ),
  'pdflib::fill_stroke' => 
  array (
    0 => 'bool',
  ),
  'pdflib::fill_textblock' => 
  array (
    0 => 'int',
    'page' => 'int',
    'blockname' => 'string',
    'text' => 'string',
    'optlist' => 'string',
  ),
  'pdflib::findfont' => 
  array (
    0 => 'int',
    'fontname' => 'string',
    'encoding' => 'string',
    'embed' => 'int',
  ),
  'pdflib::fit_image' => 
  array (
    0 => 'bool',
    'image' => 'int',
    'x' => 'float',
    'y' => 'float',
    'optlist' => 'string',
  ),
  'pdflib::fit_pdi_page' => 
  array (
    0 => 'bool',
    'page' => 'int',
    'x' => 'float',
    'y' => 'float',
    'optlist' => 'string',
  ),
  'pdflib::fit_table' => 
  array (
    0 => 'string',
    'table' => 'int',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'optlist' => 'string',
  ),
  'pdflib::fit_textflow' => 
  array (
    0 => 'string',
    'textflow' => 'int',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'optlist' => 'string',
  ),
  'pdflib::fit_textline' => 
  array (
    0 => 'bool',
    'text' => 'string',
    'x' => 'float',
    'y' => 'float',
    'optlist' => 'string',
  ),
  'pdflib::get_apiname' => 
  array (
    0 => 'string',
  ),
  'pdflib::get_buffer' => 
  array (
    0 => 'string',
  ),
  'pdflib::get_errmsg' => 
  array (
    0 => 'string',
  ),
  'pdflib::get_errnum' => 
  array (
    0 => 'int',
  ),
  'pdflib::get_majorversion' => 
  array (
    0 => 'int',
  ),
  'pdflib::get_minorversion' => 
  array (
    0 => 'int',
  ),
  'pdflib::get_parameter' => 
  array (
    0 => 'string',
    'key' => 'string',
    'modifier' => 'float',
  ),
  'pdflib::get_pdi_parameter' => 
  array (
    0 => 'string',
    'key' => 'string',
    'doc' => 'int',
    'page' => 'int',
    'reserved' => 'int',
  ),
  'pdflib::get_pdi_value' => 
  array (
    0 => 'float',
    'key' => 'string',
    'doc' => 'int',
    'page' => 'int',
    'reserved' => 'int',
  ),
  'pdflib::get_value' => 
  array (
    0 => 'float',
    'key' => 'string',
    'modifier' => 'float',
  ),
  'pdflib::info_font' => 
  array (
    0 => 'float',
    'font' => 'int',
    'keyword' => 'string',
    'optlist' => 'string',
  ),
  'pdflib::info_matchbox' => 
  array (
    0 => 'float',
    'boxname' => 'string',
    'num' => 'int',
    'keyword' => 'string',
  ),
  'pdflib::info_table' => 
  array (
    0 => 'float',
    'table' => 'int',
    'keyword' => 'string',
  ),
  'pdflib::info_textflow' => 
  array (
    0 => 'float',
    'textflow' => 'int',
    'keyword' => 'string',
  ),
  'pdflib::info_textline' => 
  array (
    0 => 'float',
    'text' => 'string',
    'keyword' => 'string',
    'optlist' => 'string',
  ),
  'pdflib::initgraphics' => 
  array (
    0 => 'bool',
  ),
  'pdflib::lineto' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'pdflib::load_3ddata' => 
  array (
    0 => 'int',
    'filename' => 'string',
    'optlist' => 'string',
  ),
  'pdflib::load_font' => 
  array (
    0 => 'int',
    'fontname' => 'string',
    'encoding' => 'string',
    'optlist' => 'string',
  ),
  'pdflib::load_iccprofile' => 
  array (
    0 => 'int',
    'profilename' => 'string',
    'optlist' => 'string',
  ),
  'pdflib::load_image' => 
  array (
    0 => 'int',
    'imagetype' => 'string',
    'filename' => 'string',
    'optlist' => 'string',
  ),
  'pdflib::makespotcolor' => 
  array (
    0 => 'int',
    'spotname' => 'string',
  ),
  'pdflib::moveto' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'pdflib::open_ccitt' => 
  array (
    0 => 'int',
    'filename' => 'string',
    'width' => 'int',
    'height' => 'int',
    'BitReverse' => 'int',
    'k' => 'int',
    'Blackls1' => 'int',
  ),
  'pdflib::open_file' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'pdflib::open_image' => 
  array (
    0 => 'int',
    'imagetype' => 'string',
    'source' => 'string',
    'data' => 'string',
    'length' => 'int',
    'width' => 'int',
    'height' => 'int',
    'components' => 'int',
    'bpc' => 'int',
    'params' => 'string',
  ),
  'pdflib::open_image_file' => 
  array (
    0 => 'int',
    'imagetype' => 'string',
    'filename' => 'string',
    'stringparam' => 'string',
    'intparam' => 'int',
  ),
  'pdflib::open_memory_image' => 
  array (
    0 => 'int',
    'image' => 'resource',
  ),
  'pdflib::open_pdi' => 
  array (
    0 => 'int',
    'filename' => 'string',
    'optlist' => 'string',
    'length' => 'int',
  ),
  'pdflib::open_pdi_document' => 
  array (
    0 => 'int',
    'filename' => 'string',
    'optlist' => 'string',
  ),
  'pdflib::open_pdi_page' => 
  array (
    0 => 'int',
    'doc' => 'int',
    'pagenumber' => 'int',
    'optlist' => 'string',
  ),
  'pdflib::pcos_get_number' => 
  array (
    0 => 'float',
    'doc' => 'int',
    'path' => 'string',
  ),
  'pdflib::pcos_get_stream' => 
  array (
    0 => 'string',
    'doc' => 'int',
    'optlist' => 'string',
    'path' => 'string',
  ),
  'pdflib::pcos_get_string' => 
  array (
    0 => 'string',
    'doc' => 'int',
    'path' => 'string',
  ),
  'pdflib::place_image' => 
  array (
    0 => 'bool',
    'image' => 'int',
    'x' => 'float',
    'y' => 'float',
    'scale' => 'float',
  ),
  'pdflib::place_pdi_page' => 
  array (
    0 => 'bool',
    'page' => 'int',
    'x' => 'float',
    'y' => 'float',
    'sx' => 'float',
    'sy' => 'float',
  ),
  'pdflib::process_pdi' => 
  array (
    0 => 'int',
    'doc' => 'int',
    'page' => 'int',
    'optlist' => 'string',
  ),
  'pdflib::rect' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
    'width' => 'float',
    'height' => 'float',
  ),
  'pdflib::restore' => 
  array (
    0 => 'bool',
    'p' => 'mixed',
  ),
  'pdflib::resume_page' => 
  array (
    0 => 'bool',
    'optlist' => 'string',
  ),
  'pdflib::rotate' => 
  array (
    0 => 'bool',
    'phi' => 'float',
  ),
  'pdflib::save' => 
  array (
    0 => 'bool',
    'p' => 'mixed',
  ),
  'pdflib::scale' => 
  array (
    0 => 'bool',
    'sx' => 'float',
    'sy' => 'float',
  ),
  'pdflib::set_border_color' => 
  array (
    0 => 'bool',
    'red' => 'float',
    'green' => 'float',
    'blue' => 'float',
  ),
  'pdflib::set_border_dash' => 
  array (
    0 => 'bool',
    'black' => 'float',
    'white' => 'float',
  ),
  'pdflib::set_border_style' => 
  array (
    0 => 'bool',
    'style' => 'string',
    'width' => 'float',
  ),
  'pdflib::set_gstate' => 
  array (
    0 => 'bool',
    'gstate' => 'int',
  ),
  'pdflib::set_info' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'string',
  ),
  'pdflib::set_layer_dependency' => 
  array (
    0 => 'bool',
    'type' => 'string',
    'optlist' => 'string',
  ),
  'pdflib::set_parameter' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'string',
  ),
  'pdflib::set_text_pos' => 
  array (
    0 => 'bool',
    'x' => 'float',
    'y' => 'float',
  ),
  'pdflib::set_value' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'float',
  ),
  'pdflib::setcolor' => 
  array (
    0 => 'bool',
    'fstype' => 'string',
    'colorspace' => 'string',
    'c1' => 'float',
    'c2' => 'float',
    'c3' => 'float',
    'c4' => 'float',
  ),
  'pdflib::setdash' => 
  array (
    0 => 'bool',
    'b' => 'float',
    'w' => 'float',
  ),
  'pdflib::setdashpattern' => 
  array (
    0 => 'bool',
    'optlist' => 'string',
  ),
  'pdflib::setflat' => 
  array (
    0 => 'bool',
    'flatness' => 'float',
  ),
  'pdflib::setfont' => 
  array (
    0 => 'bool',
    'font' => 'int',
    'fontsize' => 'float',
  ),
  'pdflib::setgray' => 
  array (
    0 => 'bool',
    'g' => 'float',
  ),
  'pdflib::setgray_fill' => 
  array (
    0 => 'bool',
    'g' => 'float',
  ),
  'pdflib::setgray_stroke' => 
  array (
    0 => 'bool',
    'g' => 'float',
  ),
  'pdflib::setlinecap' => 
  array (
    0 => 'bool',
    'linecap' => 'int',
  ),
  'pdflib::setlinejoin' => 
  array (
    0 => 'bool',
    'value' => 'int',
  ),
  'pdflib::setlinewidth' => 
  array (
    0 => 'bool',
    'width' => 'float',
  ),
  'pdflib::setmatrix' => 
  array (
    0 => 'bool',
    'a' => 'float',
    'b' => 'float',
    'c' => 'float',
    'd' => 'float',
    'e' => 'float',
    'f' => 'float',
  ),
  'pdflib::setmiterlimit' => 
  array (
    0 => 'bool',
    'miter' => 'float',
  ),
  'pdflib::setrgbcolor' => 
  array (
    0 => 'bool',
    'red' => 'float',
    'green' => 'float',
    'blue' => 'float',
  ),
  'pdflib::setrgbcolor_fill' => 
  array (
    0 => 'bool',
    'red' => 'float',
    'green' => 'float',
    'blue' => 'float',
  ),
  'pdflib::setrgbcolor_stroke' => 
  array (
    0 => 'bool',
    'red' => 'float',
    'green' => 'float',
    'blue' => 'float',
  ),
  'pdflib::shading' => 
  array (
    0 => 'int',
    'shtype' => 'string',
    'x0' => 'float',
    'y0' => 'float',
    'x1' => 'float',
    'y1' => 'float',
    'c1' => 'float',
    'c2' => 'float',
    'c3' => 'float',
    'c4' => 'float',
    'optlist' => 'string',
  ),
  'pdflib::shading_pattern' => 
  array (
    0 => 'int',
    'shading' => 'int',
    'optlist' => 'string',
  ),
  'pdflib::shfill' => 
  array (
    0 => 'bool',
    'shading' => 'int',
  ),
  'pdflib::show' => 
  array (
    0 => 'bool',
    'text' => 'string',
  ),
  'pdflib::show_boxed' => 
  array (
    0 => 'int',
    'text' => 'string',
    'left' => 'float',
    'top' => 'float',
    'width' => 'float',
    'height' => 'float',
    'mode' => 'string',
    'feature' => 'string',
  ),
  'pdflib::show_xy' => 
  array (
    0 => 'bool',
    'text' => 'string',
    'x' => 'float',
    'y' => 'float',
  ),
  'pdflib::skew' => 
  array (
    0 => 'bool',
    'alpha' => 'float',
    'beta' => 'float',
  ),
  'pdflib::stringwidth' => 
  array (
    0 => 'float',
    'text' => 'string',
    'font' => 'int',
    'fontsize' => 'float',
  ),
  'pdflib::stroke' => 
  array (
    0 => 'bool',
    'p' => 'mixed',
  ),
  'pdflib::suspend_page' => 
  array (
    0 => 'bool',
    'optlist' => 'string',
  ),
  'pdflib::translate' => 
  array (
    0 => 'bool',
    'tx' => 'float',
    'ty' => 'float',
  ),
  'pdflib::utf16_to_utf8' => 
  array (
    0 => 'string',
    'utf16string' => 'string',
  ),
  'pdflib::utf32_to_utf16' => 
  array (
    0 => 'string',
    'utf32string' => 'string',
    'ordering' => 'string',
  ),
  'pdflib::utf8_to_utf16' => 
  array (
    0 => 'string',
    'utf8string' => 'string',
    'ordering' => 'string',
  ),
  'pdo::__construct' => 
  array (
    0 => 'void',
    'dsn' => 'string',
    'username=' => 'null|string',
    'password=' => 'null|string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'pdo::begintransaction' => 
  array (
    0 => 'bool',
  ),
  'pdo::commit' => 
  array (
    0 => 'bool',
  ),
  'pdo::cubrid_schema' => 
  array (
    0 => 'array<array-key, mixed>',
    'schema_type' => 'int',
    'table_name=' => 'string',
    'col_name=' => 'string',
  ),
  'pdo::errorcode' => 
  array (
    0 => 'null|string',
  ),
  'pdo::errorinfo' => 
  array (
    0 => 'array{0: null|string, 1: int|null, 2: null|string, 3?: mixed, 4?: mixed}',
  ),
  'pdo::exec' => 
  array (
    0 => 'false|int',
    'statement' => 'string',
  ),
  'pdo::getattribute' => 
  array (
    0 => 'mixed',
    'attribute' => 'int',
  ),
  'pdo::getavailabledrivers' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'pdo::intransaction' => 
  array (
    0 => 'bool',
  ),
  'pdo::lastinsertid' => 
  array (
    0 => 'string',
    'name=' => 'null|string',
  ),
  'pdo::pgsqlcopyfromarray' => 
  array (
    0 => 'bool',
    'table_name' => 'string',
    'rows' => 'array<array-key, mixed>',
    'delimiter' => 'string',
    'null_as' => 'string',
    'fields' => 'string',
  ),
  'pdo::pgsqlcopyfromfile' => 
  array (
    0 => 'bool',
    'table_name' => 'string',
    'filename' => 'string',
    'delimiter' => 'string',
    'null_as' => 'string',
    'fields' => 'string',
  ),
  'pdo::pgsqlcopytoarray' => 
  array (
    0 => 'array<array-key, mixed>',
    'table_name' => 'string',
    'delimiter' => 'string',
    'null_as' => 'string',
    'fields' => 'string',
  ),
  'pdo::pgsqlcopytofile' => 
  array (
    0 => 'bool',
    'table_name' => 'string',
    'filename' => 'string',
    'delimiter' => 'string',
    'null_as' => 'string',
    'fields' => 'string',
  ),
  'pdo::pgsqlgetnotify' => 
  array (
    0 => 'array{message: string, payload?: string, pid: int}|false',
    'result_type=' => 'PDO::FETCH_*',
    'ms_timeout=' => 'int',
  ),
  'pdo::pgsqlgetpid' => 
  array (
    0 => 'int',
  ),
  'pdo::pgsqllobcreate' => 
  array (
    0 => 'string',
  ),
  'pdo::pgsqllobopen' => 
  array (
    0 => 'resource',
    'oid' => 'string',
    'mode=' => 'string',
  ),
  'pdo::pgsqllobunlink' => 
  array (
    0 => 'bool',
    'oid' => 'string',
  ),
  'pdo::prepare' => 
  array (
    0 => 'PDOStatement|false',
    'query' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'pdo::query' => 
  array (
    0 => 'PDOStatement|false',
    'query' => 'string',
    'fetchMode=' => 'int|null',
    '...fetchModeArgs=' => 'mixed',
  ),
  'pdo::query\'1' => 
  array (
    0 => 'PDOStatement|false',
    'query' => 'string',
    'fetch_column' => 'int',
    'colno=' => 'int',
  ),
  'pdo::query\'2' => 
  array (
    0 => 'PDOStatement|false',
    'query' => 'string',
    'fetch_class' => 'int',
    'classname' => 'string',
    'constructorArgs' => 'array<array-key, mixed>',
  ),
  'pdo::query\'3' => 
  array (
    0 => 'PDOStatement|false',
    'query' => 'string',
    'fetch_into' => 'int',
    'object' => 'object',
  ),
  'pdo::quote' => 
  array (
    0 => 'false|string',
    'string' => 'string',
    'type=' => 'int',
  ),
  'pdo::rollback' => 
  array (
    0 => 'bool',
  ),
  'pdo::setattribute' => 
  array (
    0 => 'bool',
    'attribute' => 'int',
    'value' => 'mixed',
  ),
  'pdo::sqlitecreateaggregate' => 
  array (
    0 => 'bool',
    'function_name' => 'string',
    'step_func' => 'callable',
    'finalize_func' => 'callable',
    'num_args=' => 'int',
  ),
  'pdo::sqlitecreatecollation' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'callback' => 'callable',
  ),
  'pdo::sqlitecreatefunction' => 
  array (
    0 => 'bool',
    'function_name' => 'string',
    'callback' => 'callable',
    'num_args=' => 'int',
  ),
  'pdo_drivers' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'pdoexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'pdoexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'pdoexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'pdoexception::getcode' => 
  array (
    0 => 'int|string',
  ),
  'pdoexception::getfile' => 
  array (
    0 => 'string',
  ),
  'pdoexception::getline' => 
  array (
    0 => 'int',
  ),
  'pdoexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'pdoexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'pdoexception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'pdoexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'pdostatement::bindcolumn' => 
  array (
    0 => 'bool',
    'column' => 'int|string',
    '&var' => 'mixed',
    'type=' => 'int',
    'maxLength=' => 'int',
    'driverOptions=' => 'mixed',
  ),
  'pdostatement::bindparam' => 
  array (
    0 => 'bool',
    'param' => 'int|string',
    '&var' => 'mixed',
    'type=' => 'int',
    'maxLength=' => 'int',
    'driverOptions=' => 'mixed',
  ),
  'pdostatement::bindvalue' => 
  array (
    0 => 'bool',
    'param' => 'int|string',
    'value' => 'mixed',
    'type=' => 'int',
  ),
  'pdostatement::closecursor' => 
  array (
    0 => 'bool',
  ),
  'pdostatement::columncount' => 
  array (
    0 => 'int',
  ),
  'pdostatement::debugdumpparams' => 
  array (
    0 => 'bool|null',
  ),
  'pdostatement::errorcode' => 
  array (
    0 => 'null|string',
  ),
  'pdostatement::errorinfo' => 
  array (
    0 => 'array{0: null|string, 1: int|null, 2: null|string, 3?: mixed, 4?: mixed}',
  ),
  'pdostatement::execute' => 
  array (
    0 => 'bool',
    'params=' => 'array<array-key, mixed>|null',
  ),
  'pdostatement::fetch' => 
  array (
    0 => 'mixed',
    'mode=' => 'int',
    'cursorOrientation=' => 'int',
    'cursorOffset=' => 'int',
  ),
  'pdostatement::fetchall' => 
  array (
    0 => 'array<array-key, mixed>',
    'mode=' => 'int',
    '...args=' => 'mixed',
  ),
  'pdostatement::fetchcolumn' => 
  array (
    0 => 'mixed',
    'column=' => 'int',
  ),
  'pdostatement::fetchobject' => 
  array (
    0 => 'false|object',
    'class=' => 'class-string|null',
    'constructorArgs=' => 'array<array-key, mixed>',
  ),
  'pdostatement::getattribute' => 
  array (
    0 => 'mixed',
    'name' => 'int',
  ),
  'pdostatement::getcolumnmeta' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'column' => 'int',
  ),
  'pdostatement::getiterator' => 
  array (
    0 => 'Iterator',
  ),
  'pdostatement::nextrowset' => 
  array (
    0 => 'bool',
  ),
  'pdostatement::rowcount' => 
  array (
    0 => 'int',
  ),
  'pdostatement::setattribute' => 
  array (
    0 => 'bool',
    'attribute' => 'int',
    'value' => 'mixed',
  ),
  'pdostatement::setfetchmode' => 
  array (
    0 => 'bool',
    'mode' => 'int',
    '...args=' => 'mixed',
  ),
  'pfsockopen' => 
  array (
    0 => 'false|resource',
    'hostname' => 'string',
    'port=' => 'int',
    '&w_error_code=' => 'int',
    '&w_error_message=' => 'string',
    'timeout=' => 'float|null',
  ),
  'pg_affected_rows' => 
  array (
    0 => 'int',
    'result' => 'resource',
  ),
  'pg_cancel_query' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
  ),
  'pg_client_encoding' => 
  array (
    0 => 'string',
    'connection=' => 'null|resource',
  ),
  'pg_clientencoding' => 
  array (
    0 => 'string',
    'connection=' => 'mixed',
  ),
  'pg_close' => 
  array (
    0 => 'bool',
    'connection=' => 'null|resource',
  ),
  'pg_cmdtuples' => 
  array (
    0 => 'int',
    'result' => 'mixed',
  ),
  'pg_connect' => 
  array (
    0 => 'false|resource',
    'connection_string' => 'string',
    'flags=' => 'int',
  ),
  'pg_connect_poll' => 
  array (
    0 => 'int',
    'connection' => 'resource',
  ),
  'pg_connection_busy' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
  ),
  'pg_connection_reset' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
  ),
  'pg_connection_status' => 
  array (
    0 => 'int',
    'connection' => 'resource',
  ),
  'pg_consume_input' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
  ),
  'pg_convert' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'connection' => 'resource',
    'table_name' => 'string',
    'values' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'pg_copy_from' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
    'table_name' => 'string',
    'rows' => 'array<array-key, mixed>',
    'separator=' => 'string',
    'null_as=' => 'string',
  ),
  'pg_copy_to' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'connection' => 'resource',
    'table_name' => 'string',
    'separator=' => 'string',
    'null_as=' => 'string',
  ),
  'pg_dbname' => 
  array (
    0 => 'string',
    'connection=' => 'null|resource',
  ),
  'pg_delete' => 
  array (
    0 => 'bool|string',
    'connection' => 'resource',
    'table_name' => 'string',
    'conditions' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'pg_end_copy' => 
  array (
    0 => 'bool',
    'connection=' => 'null|resource',
  ),
  'pg_errormessage' => 
  array (
    0 => 'string',
    'connection=' => 'mixed',
  ),
  'pg_escape_bytea' => 
  array (
    0 => 'string',
    'connection' => 'resource',
    'string=' => 'string',
  ),
  'pg_escape_bytea\'1' => 
  array (
    0 => 'string',
    'connection' => 'string',
  ),
  'pg_escape_identifier' => 
  array (
    0 => 'false|string',
    'connection' => 'resource',
    'string=' => 'string',
  ),
  'pg_escape_identifier\'1' => 
  array (
    0 => 'false|string',
    'connection' => 'string',
  ),
  'pg_escape_literal' => 
  array (
    0 => 'false|string',
    'connection' => 'resource',
    'string=' => 'string',
  ),
  'pg_escape_literal\'1' => 
  array (
    0 => 'false|string',
    'connection' => 'string',
  ),
  'pg_escape_string' => 
  array (
    0 => 'string',
    'connection' => 'resource',
    'string=' => 'string',
  ),
  'pg_escape_string\'1' => 
  array (
    0 => 'string',
    'connection' => 'string',
  ),
  'pg_exec' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'query=' => 'string',
  ),
  'pg_exec\'1' => 
  array (
    0 => 'false|resource',
    'connection' => 'string',
  ),
  'pg_execute' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'statement_name' => 'string',
    'params=' => 'array<array-key, mixed>',
  ),
  'pg_execute\'1' => 
  array (
    0 => 'false|resource',
    'connection' => 'string',
    'statement_name' => 'array<array-key, mixed>',
  ),
  'pg_fetch_all' => 
  array (
    0 => 'array<array-key, array<array-key, mixed>>',
    'result' => 'resource',
    'mode=' => 'int',
  ),
  'pg_fetch_all_columns' => 
  array (
    0 => 'array<array-key, mixed>',
    'result' => 'resource',
    'field=' => 'int',
  ),
  'pg_fetch_array' => 
  array (
    0 => 'array<array-key, null|string>|false',
    'result' => 'resource',
    'row=' => 'int|null',
    'mode=' => 'int',
  ),
  'pg_fetch_assoc' => 
  array (
    0 => 'array<string, mixed>|false',
    'result' => 'resource',
    'row=' => 'int|null',
  ),
  'pg_fetch_object' => 
  array (
    0 => 'false|object',
    'result' => 'resource',
    'row=' => 'int|null',
    'class=' => 'string',
    'constructor_args=' => 'array<array-key, mixed>',
  ),
  'pg_fetch_result' => 
  array (
    0 => 'false|null|string',
    'result' => 'resource',
    'row' => 'int|string',
    'field=' => 'int|string',
  ),
  'pg_fetch_result\'1' => 
  array (
    0 => 'false|null|string',
    'result' => 'resource',
    'row' => 'int|null',
    'field' => 'int|string',
  ),
  'pg_fetch_row' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'result' => 'resource',
    'row=' => 'int|null',
    'mode=' => 'int',
  ),
  'pg_field_is_null' => 
  array (
    0 => 'false|int',
    'result' => 'resource',
    'row' => 'int|string',
    'field=' => 'int|string',
  ),
  'pg_field_is_null\'1' => 
  array (
    0 => 'false|int',
    'result' => 'resource',
    'row' => 'int',
    'field' => 'int|string',
  ),
  'pg_field_name' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'field' => 'int',
  ),
  'pg_field_num' => 
  array (
    0 => 'int',
    'result' => 'resource',
    'field' => 'string',
  ),
  'pg_field_prtlen' => 
  array (
    0 => 'false|int',
    'result' => 'resource',
    'row' => 'int|string',
    'field=' => 'int|string',
  ),
  'pg_field_prtlen\'1' => 
  array (
    0 => 'false|int',
    'result' => 'resource',
    'row' => 'int',
    'field' => 'int|string',
  ),
  'pg_field_size' => 
  array (
    0 => 'int',
    'result' => 'resource',
    'field' => 'int',
  ),
  'pg_field_table' => 
  array (
    0 => 'false|int|string',
    'result' => 'resource',
    'field' => 'int',
    'oid_only=' => 'bool',
  ),
  'pg_field_type' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'field' => 'int',
  ),
  'pg_field_type_oid' => 
  array (
    0 => 'int|string',
    'result' => 'resource',
    'field' => 'int',
  ),
  'pg_fieldisnull' => 
  array (
    0 => 'false|int',
    'result' => 'mixed',
    'row' => 'mixed',
    'field=' => 'int|string',
  ),
  'pg_fieldname' => 
  array (
    0 => 'string',
    'result' => 'mixed',
    'field' => 'int',
  ),
  'pg_fieldnum' => 
  array (
    0 => 'int',
    'result' => 'mixed',
    'field' => 'string',
  ),
  'pg_fieldprtlen' => 
  array (
    0 => 'false|int',
    'result' => 'mixed',
    'row' => 'mixed',
    'field=' => 'int|string',
  ),
  'pg_fieldsize' => 
  array (
    0 => 'int',
    'result' => 'mixed',
    'field' => 'int',
  ),
  'pg_fieldtype' => 
  array (
    0 => 'string',
    'result' => 'mixed',
    'field' => 'int',
  ),
  'pg_flush' => 
  array (
    0 => 'bool|int',
    'connection' => 'resource',
  ),
  'pg_free_result' => 
  array (
    0 => 'bool',
    'result' => 'resource',
  ),
  'pg_freeresult' => 
  array (
    0 => 'bool',
    'result' => 'mixed',
  ),
  'pg_get_notify' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'connection' => 'resource',
    'mode=' => 'int',
  ),
  'pg_get_pid' => 
  array (
    0 => 'int',
    'connection' => 'resource',
  ),
  'pg_get_result' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
  ),
  'pg_getlastoid' => 
  array (
    0 => 'false|int|string',
    'result' => 'mixed',
  ),
  'pg_host' => 
  array (
    0 => 'string',
    'connection=' => 'resource',
  ),
  'pg_insert' => 
  array (
    0 => 'false|resource|string',
    'connection' => 'resource',
    'table_name' => 'string',
    'values' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'pg_last_error' => 
  array (
    0 => 'string',
    'connection=' => 'null|resource',
  ),
  'pg_last_notice' => 
  array (
    0 => 'array<array-key, mixed>|bool|string',
    'connection' => 'resource',
    'mode=' => 'int',
  ),
  'pg_last_oid' => 
  array (
    0 => 'false|int|string',
    'result' => 'resource',
  ),
  'pg_lo_close' => 
  array (
    0 => 'bool',
    'lob' => 'resource',
  ),
  'pg_lo_create' => 
  array (
    0 => 'false|int|string',
    'connection=' => 'resource',
    'oid=' => 'int|string',
  ),
  'pg_lo_export' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
    'oid=' => 'int|string',
    'filename=' => 'string',
  ),
  'pg_lo_export\'1' => 
  array (
    0 => 'bool',
    'connection' => 'int|string',
    'oid' => 'string',
  ),
  'pg_lo_import' => 
  array (
    0 => 'false|int|string',
    'connection' => 'resource',
    'filename=' => 'string',
    'oid=' => 'int|string',
  ),
  'pg_lo_import\'1' => 
  array (
    0 => 'false|int|string',
    'connection' => 'string',
    'filename' => 'int|string',
  ),
  'pg_lo_open' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'oid=' => 'int|string',
    'mode=' => 'string',
  ),
  'pg_lo_open\'1' => 
  array (
    0 => 'false|resource',
    'connection' => 'int|string',
    'oid' => 'string',
  ),
  'pg_lo_read' => 
  array (
    0 => 'false|string',
    'lob' => 'resource',
    'length=' => 'int',
  ),
  'pg_lo_read_all' => 
  array (
    0 => 'int',
    'lob' => 'resource',
  ),
  'pg_lo_seek' => 
  array (
    0 => 'bool',
    'lob' => 'resource',
    'offset' => 'int',
    'whence=' => 'int',
  ),
  'pg_lo_tell' => 
  array (
    0 => 'int',
    'lob' => 'resource',
  ),
  'pg_lo_truncate' => 
  array (
    0 => 'bool',
    'lob' => 'resource',
    'size' => 'int',
  ),
  'pg_lo_unlink' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
    'oid=' => 'int|string',
  ),
  'pg_lo_unlink\'1' => 
  array (
    0 => 'bool',
    'connection' => 'int|string',
  ),
  'pg_lo_write' => 
  array (
    0 => 'false|int',
    'lob' => 'resource',
    'data' => 'string',
    'length=' => 'int|null',
  ),
  'pg_loclose' => 
  array (
    0 => 'bool',
    'lob' => 'mixed',
  ),
  'pg_locreate' => 
  array (
    0 => 'false|int|string',
    'connection=' => 'mixed',
    'oid=' => 'mixed',
  ),
  'pg_loexport' => 
  array (
    0 => 'bool',
    'connection' => 'mixed',
    'oid=' => 'mixed',
    'filename=' => 'mixed',
  ),
  'pg_loimport' => 
  array (
    0 => 'false|int|string',
    'connection' => 'mixed',
    'filename=' => 'mixed',
    'oid=' => 'mixed',
  ),
  'pg_loopen' => 
  array (
    0 => 'mixed',
    'connection' => 'mixed',
    'oid=' => 'mixed',
    'mode=' => 'string',
  ),
  'pg_loread' => 
  array (
    0 => 'false|string',
    'lob' => 'mixed',
    'length=' => 'int',
  ),
  'pg_loreadall' => 
  array (
    0 => 'int',
    'lob' => 'mixed',
  ),
  'pg_lounlink' => 
  array (
    0 => 'bool',
    'connection' => 'mixed',
    'oid=' => 'mixed',
  ),
  'pg_lowrite' => 
  array (
    0 => 'false|int',
    'lob' => 'mixed',
    'data' => 'string',
    'length=' => 'int|null',
  ),
  'pg_meta_data' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'connection' => 'resource',
    'table_name' => 'string',
    'extended=' => 'bool',
  ),
  'pg_num_fields' => 
  array (
    0 => 'int',
    'result' => 'resource',
  ),
  'pg_num_rows' => 
  array (
    0 => 'int',
    'result' => 'resource',
  ),
  'pg_numfields' => 
  array (
    0 => 'int',
    'result' => 'mixed',
  ),
  'pg_numrows' => 
  array (
    0 => 'int',
    'result' => 'mixed',
  ),
  'pg_options' => 
  array (
    0 => 'string',
    'connection=' => 'null|resource',
  ),
  'pg_parameter_status' => 
  array (
    0 => 'false|string',
    'connection' => 'resource',
    'name=' => 'string',
  ),
  'pg_parameter_status\'1' => 
  array (
    0 => 'false|string',
    'connection' => 'string',
  ),
  'pg_pconnect' => 
  array (
    0 => 'false|resource',
    'connection_string' => 'string',
    'flags=' => 'int',
  ),
  'pg_ping' => 
  array (
    0 => 'bool',
    'connection=' => 'null|resource',
  ),
  'pg_port' => 
  array (
    0 => 'string',
    'connection=' => 'null|resource',
  ),
  'pg_prepare' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'statement_name' => 'string',
    'query=' => 'string',
  ),
  'pg_prepare\'1' => 
  array (
    0 => 'false|resource',
    'connection' => 'string',
    'statement_name' => 'string',
  ),
  'pg_put_line' => 
  array (
    0 => 'bool',
    'connection' => 'resource',
    'query=' => 'string',
  ),
  'pg_put_line\'1' => 
  array (
    0 => 'bool',
    'connection' => 'string',
  ),
  'pg_query' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'query=' => 'string',
  ),
  'pg_query\'1' => 
  array (
    0 => 'false|resource',
    'connection' => 'string',
  ),
  'pg_query_params' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
    'query' => 'string',
    'params=' => 'array<array-key, mixed>',
  ),
  'pg_query_params\'1' => 
  array (
    0 => 'false|resource',
    'connection' => 'string',
    'query' => 'array<array-key, mixed>',
  ),
  'pg_result' => 
  array (
    0 => 'false|null|string',
    'result' => 'mixed',
    'row' => 'mixed',
    'field=' => 'int|string',
  ),
  'pg_result_error' => 
  array (
    0 => 'false|string',
    'result' => 'resource',
  ),
  'pg_result_error_field' => 
  array (
    0 => 'false|null|string',
    'result' => 'resource',
    'field_code' => 'int',
  ),
  'pg_result_seek' => 
  array (
    0 => 'bool',
    'result' => 'resource',
    'row' => 'int',
  ),
  'pg_result_status' => 
  array (
    0 => 'int|string',
    'result' => 'resource',
    'mode=' => 'int',
  ),
  'pg_select' => 
  array (
    0 => 'array<array-key, mixed>|false|string',
    'connection' => 'resource',
    'table_name' => 'string',
    'conditions' => 'array<array-key, mixed>',
    'flags=' => 'int',
    'mode=' => 'int',
  ),
  'pg_send_execute' => 
  array (
    0 => 'bool|int',
    'connection' => 'resource',
    'statement_name' => 'string',
    'params' => 'array<array-key, mixed>',
  ),
  'pg_send_prepare' => 
  array (
    0 => 'bool|int',
    'connection' => 'resource',
    'statement_name' => 'string',
    'query' => 'string',
  ),
  'pg_send_query' => 
  array (
    0 => 'bool|int',
    'connection' => 'resource',
    'query' => 'string',
  ),
  'pg_send_query_params' => 
  array (
    0 => 'bool|int',
    'connection' => 'resource',
    'query' => 'string',
    'params' => 'array<array-key, mixed>',
  ),
  'pg_set_client_encoding' => 
  array (
    0 => 'int',
    'connection' => 'resource',
    'encoding=' => 'string',
  ),
  'pg_set_client_encoding\'1' => 
  array (
    0 => 'int',
    'connection' => 'string',
  ),
  'pg_set_error_verbosity' => 
  array (
    0 => 'false|int',
    'connection' => 'resource',
    'verbosity=' => 'int',
  ),
  'pg_set_error_verbosity\'1' => 
  array (
    0 => 'false|int',
    'connection' => 'int',
  ),
  'pg_setclientencoding' => 
  array (
    0 => 'int',
    'connection' => 'mixed',
    'encoding=' => 'string',
  ),
  'pg_socket' => 
  array (
    0 => 'false|resource',
    'connection' => 'resource',
  ),
  'pg_trace' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'mode=' => 'string',
    'connection=' => 'null|resource',
  ),
  'pg_transaction_status' => 
  array (
    0 => 'int',
    'connection' => 'resource',
  ),
  'pg_tty' => 
  array (
    0 => 'string',
    'connection=' => 'null|resource',
  ),
  'pg_unescape_bytea' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'pg_untrace' => 
  array (
    0 => 'bool',
    'connection=' => 'null|resource',
  ),
  'pg_update' => 
  array (
    0 => 'bool|string',
    'connection' => 'resource',
    'table_name' => 'string',
    'values' => 'array<array-key, mixed>',
    'conditions' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'pg_version' => 
  array (
    0 => 'array<array-key, mixed>',
    'connection=' => 'null|resource',
  ),
  'phar::__construct' => 
  array (
    0 => 'void',
    'filename' => 'string',
    'flags=' => 'int',
    'alias=' => 'null|string',
  ),
  'phar::__debuginfo' => 
  array (
    0 => 'mixed',
  ),
  'phar::__destruct' => 
  array (
    0 => 'mixed',
  ),
  'phar::__tostring' => 
  array (
    0 => 'string',
  ),
  'phar::_bad_state_ex' => 
  array (
    0 => 'mixed',
  ),
  'phar::addemptydir' => 
  array (
    0 => 'void',
    'directory' => 'string',
  ),
  'phar::addfile' => 
  array (
    0 => 'void',
    'filename' => 'string',
    'localName=' => 'null|string',
  ),
  'phar::addfromstring' => 
  array (
    0 => 'void',
    'localName' => 'string',
    'contents' => 'string',
  ),
  'phar::apiversion' => 
  array (
    0 => 'string',
  ),
  'phar::buildfromdirectory' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'directory' => 'string',
    'pattern=' => 'string',
  ),
  'phar::buildfromiterator' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'iterator' => 'Traversable',
    'baseDirectory=' => 'null|string',
  ),
  'phar::cancompress' => 
  array (
    0 => 'bool',
    'compression=' => 'int',
  ),
  'phar::canwrite' => 
  array (
    0 => 'bool',
  ),
  'phar::compress' => 
  array (
    0 => 'Phar|null',
    'compression' => 'int',
    'extension=' => 'null|string',
  ),
  'phar::compressfiles' => 
  array (
    0 => 'void',
    'compression' => 'int',
  ),
  'phar::converttodata' => 
  array (
    0 => 'PharData|null',
    'format=' => 'int|null',
    'compression=' => 'int|null',
    'extension=' => 'null|string',
  ),
  'phar::converttoexecutable' => 
  array (
    0 => 'Phar|null',
    'format=' => 'int|null',
    'compression=' => 'int|null',
    'extension=' => 'null|string',
  ),
  'phar::copy' => 
  array (
    0 => 'bool',
    'from' => 'string',
    'to' => 'string',
  ),
  'phar::count' => 
  array (
    0 => 'int',
    'mode=' => 'int',
  ),
  'phar::createdefaultstub' => 
  array (
    0 => 'string',
    'index=' => 'null|string',
    'webIndex=' => 'null|string',
  ),
  'phar::current' => 
  array (
    0 => 'mixed',
  ),
  'phar::decompress' => 
  array (
    0 => 'Phar|null',
    'extension=' => 'null|string',
  ),
  'phar::decompressfiles' => 
  array (
    0 => 'bool',
  ),
  'phar::delete' => 
  array (
    0 => 'bool',
    'localName' => 'string',
  ),
  'phar::delmetadata' => 
  array (
    0 => 'bool',
  ),
  'phar::extractto' => 
  array (
    0 => 'bool',
    'directory' => 'string',
    'files=' => 'array<array-key, mixed>|null|string',
    'overwrite=' => 'bool',
  ),
  'phar::getalias' => 
  array (
    0 => 'null|string',
  ),
  'phar::getatime' => 
  array (
    0 => 'mixed',
  ),
  'phar::getbasename' => 
  array (
    0 => 'mixed',
    'suffix=' => 'string',
  ),
  'phar::getchildren' => 
  array (
    0 => 'mixed',
  ),
  'phar::getctime' => 
  array (
    0 => 'mixed',
  ),
  'phar::getextension' => 
  array (
    0 => 'mixed',
  ),
  'phar::getfileinfo' => 
  array (
    0 => 'mixed',
    'class=' => 'null|string',
  ),
  'phar::getfilename' => 
  array (
    0 => 'mixed',
  ),
  'phar::getflags' => 
  array (
    0 => 'mixed',
  ),
  'phar::getgroup' => 
  array (
    0 => 'mixed',
  ),
  'phar::getinode' => 
  array (
    0 => 'mixed',
  ),
  'phar::getlinktarget' => 
  array (
    0 => 'mixed',
  ),
  'phar::getmetadata' => 
  array (
    0 => 'mixed',
    'unserializeOptions=' => 'array<array-key, mixed>',
  ),
  'phar::getmodified' => 
  array (
    0 => 'bool',
  ),
  'phar::getmtime' => 
  array (
    0 => 'mixed',
  ),
  'phar::getowner' => 
  array (
    0 => 'mixed',
  ),
  'phar::getpath' => 
  array (
    0 => 'string',
  ),
  'phar::getpathinfo' => 
  array (
    0 => 'mixed',
    'class=' => 'null|string',
  ),
  'phar::getpathname' => 
  array (
    0 => 'mixed',
  ),
  'phar::getperms' => 
  array (
    0 => 'mixed',
  ),
  'phar::getrealpath' => 
  array (
    0 => 'mixed',
  ),
  'phar::getsignature' => 
  array (
    0 => 'array{hash: string, hash_type: string}',
  ),
  'phar::getsize' => 
  array (
    0 => 'mixed',
  ),
  'phar::getstub' => 
  array (
    0 => 'string',
  ),
  'phar::getsubpath' => 
  array (
    0 => 'mixed',
  ),
  'phar::getsubpathname' => 
  array (
    0 => 'mixed',
  ),
  'phar::getsupportedcompression' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'phar::getsupportedsignatures' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'phar::gettype' => 
  array (
    0 => 'mixed',
  ),
  'phar::getversion' => 
  array (
    0 => 'string',
  ),
  'phar::haschildren' => 
  array (
    0 => 'mixed',
    'allowLinks=' => 'bool',
  ),
  'phar::hasmetadata' => 
  array (
    0 => 'bool',
  ),
  'phar::interceptfilefuncs' => 
  array (
    0 => 'void',
  ),
  'phar::isbuffering' => 
  array (
    0 => 'bool',
  ),
  'phar::iscompressed' => 
  array (
    0 => 'false|int',
  ),
  'phar::isdir' => 
  array (
    0 => 'mixed',
  ),
  'phar::isdot' => 
  array (
    0 => 'mixed',
  ),
  'phar::isexecutable' => 
  array (
    0 => 'mixed',
  ),
  'phar::isfile' => 
  array (
    0 => 'mixed',
  ),
  'phar::isfileformat' => 
  array (
    0 => 'bool',
    'format' => 'int',
  ),
  'phar::islink' => 
  array (
    0 => 'mixed',
  ),
  'phar::isreadable' => 
  array (
    0 => 'mixed',
  ),
  'phar::isvalidpharfilename' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'executable=' => 'bool',
  ),
  'phar::iswritable' => 
  array (
    0 => 'bool',
  ),
  'phar::key' => 
  array (
    0 => 'mixed',
  ),
  'phar::loadphar' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'alias=' => 'null|string',
  ),
  'phar::mapphar' => 
  array (
    0 => 'bool',
    'alias=' => 'null|string',
    'offset=' => 'int',
  ),
  'phar::mount' => 
  array (
    0 => 'void',
    'pharPath' => 'string',
    'externalPath' => 'string',
  ),
  'phar::mungserver' => 
  array (
    0 => 'void',
    'variables' => 'list<string>',
  ),
  'phar::next' => 
  array (
    0 => 'mixed',
  ),
  'phar::offsetexists' => 
  array (
    0 => 'bool',
    'localName' => 'string',
  ),
  'phar::offsetget' => 
  array (
    0 => 'PharFileInfo',
    'localName' => 'string',
  ),
  'phar::offsetset' => 
  array (
    0 => 'void',
    'localName' => 'string',
    'value' => 'resource|string',
  ),
  'phar::offsetunset' => 
  array (
    0 => 'void',
    'localName' => 'string',
  ),
  'phar::openfile' => 
  array (
    0 => 'mixed',
    'mode=' => 'string',
    'useIncludePath=' => 'bool',
    'context=' => 'mixed',
  ),
  'phar::rewind' => 
  array (
    0 => 'mixed',
  ),
  'phar::running' => 
  array (
    0 => 'string',
    'returnPhar=' => 'bool',
  ),
  'phar::seek' => 
  array (
    0 => 'mixed',
    'offset' => 'int',
  ),
  'phar::setalias' => 
  array (
    0 => 'bool',
    'alias' => 'string',
  ),
  'phar::setdefaultstub' => 
  array (
    0 => 'bool',
    'index=' => 'null|string',
    'webIndex=' => 'null|string',
  ),
  'phar::setfileclass' => 
  array (
    0 => 'mixed',
    'class=' => 'string',
  ),
  'phar::setflags' => 
  array (
    0 => 'mixed',
    'flags' => 'int',
  ),
  'phar::setinfoclass' => 
  array (
    0 => 'mixed',
    'class=' => 'string',
  ),
  'phar::setmetadata' => 
  array (
    0 => 'void',
    'metadata' => 'mixed',
  ),
  'phar::setsignaturealgorithm' => 
  array (
    0 => 'void',
    'algo' => 'int',
    'privateKey=' => 'null|string',
  ),
  'phar::setstub' => 
  array (
    0 => 'bool',
    'stub' => 'string',
    'length=' => 'int',
  ),
  'phar::startbuffering' => 
  array (
    0 => 'void',
  ),
  'phar::stopbuffering' => 
  array (
    0 => 'void',
  ),
  'phar::unlinkarchive' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'phar::valid' => 
  array (
    0 => 'mixed',
  ),
  'phar::webphar' => 
  array (
    0 => 'void',
    'alias=' => 'null|string',
    'index=' => 'null|string',
    'fileNotFoundScript=' => 'null|string',
    'mimeTypes=' => 'array<array-key, mixed>',
    'rewrite=' => 'callable|null',
  ),
  'phardata::__construct' => 
  array (
    0 => 'void',
    'filename' => 'string',
    'flags=' => 'int',
    'alias=' => 'null|string',
    'format=' => 'int',
  ),
  'phardata::__debuginfo' => 
  array (
    0 => 'mixed',
  ),
  'phardata::__destruct' => 
  array (
    0 => 'mixed',
  ),
  'phardata::__tostring' => 
  array (
    0 => 'string',
  ),
  'phardata::_bad_state_ex' => 
  array (
    0 => 'mixed',
  ),
  'phardata::addemptydir' => 
  array (
    0 => 'void',
    'directory' => 'string',
  ),
  'phardata::addfile' => 
  array (
    0 => 'void',
    'filename' => 'string',
    'localName=' => 'null|string',
  ),
  'phardata::addfromstring' => 
  array (
    0 => 'void',
    'localName' => 'string',
    'contents' => 'string',
  ),
  'phardata::apiversion' => 
  array (
    0 => 'string',
  ),
  'phardata::buildfromdirectory' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'directory' => 'string',
    'pattern=' => 'string',
  ),
  'phardata::buildfromiterator' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'iterator' => 'Traversable',
    'baseDirectory=' => 'null|string',
  ),
  'phardata::cancompress' => 
  array (
    0 => 'bool',
    'compression=' => 'int',
  ),
  'phardata::canwrite' => 
  array (
    0 => 'bool',
  ),
  'phardata::compress' => 
  array (
    0 => 'PharData|null',
    'compression' => 'int',
    'extension=' => 'null|string',
  ),
  'phardata::compressfiles' => 
  array (
    0 => 'void',
    'compression' => 'int',
  ),
  'phardata::converttodata' => 
  array (
    0 => 'PharData|null',
    'format=' => 'int|null',
    'compression=' => 'int|null',
    'extension=' => 'null|string',
  ),
  'phardata::converttoexecutable' => 
  array (
    0 => 'Phar|null',
    'format=' => 'int|null',
    'compression=' => 'int|null',
    'extension=' => 'null|string',
  ),
  'phardata::copy' => 
  array (
    0 => 'bool',
    'from' => 'string',
    'to' => 'string',
  ),
  'phardata::count' => 
  array (
    0 => 'mixed',
    'mode=' => 'int',
  ),
  'phardata::createdefaultstub' => 
  array (
    0 => 'string',
    'index=' => 'null|string',
    'webIndex=' => 'null|string',
  ),
  'phardata::current' => 
  array (
    0 => 'mixed',
  ),
  'phardata::decompress' => 
  array (
    0 => 'PharData|null',
    'extension=' => 'null|string',
  ),
  'phardata::decompressfiles' => 
  array (
    0 => 'bool',
  ),
  'phardata::delete' => 
  array (
    0 => 'bool',
    'localName' => 'string',
  ),
  'phardata::delmetadata' => 
  array (
    0 => 'bool',
  ),
  'phardata::extractto' => 
  array (
    0 => 'bool',
    'directory' => 'string',
    'files=' => 'array<array-key, mixed>|null|string',
    'overwrite=' => 'bool',
  ),
  'phardata::getalias' => 
  array (
    0 => 'mixed',
  ),
  'phardata::getatime' => 
  array (
    0 => 'mixed',
  ),
  'phardata::getbasename' => 
  array (
    0 => 'mixed',
    'suffix=' => 'string',
  ),
  'phardata::getchildren' => 
  array (
    0 => 'mixed',
  ),
  'phardata::getctime' => 
  array (
    0 => 'mixed',
  ),
  'phardata::getextension' => 
  array (
    0 => 'mixed',
  ),
  'phardata::getfileinfo' => 
  array (
    0 => 'mixed',
    'class=' => 'null|string',
  ),
  'phardata::getfilename' => 
  array (
    0 => 'mixed',
  ),
  'phardata::getflags' => 
  array (
    0 => 'mixed',
  ),
  'phardata::getgroup' => 
  array (
    0 => 'mixed',
  ),
  'phardata::getinode' => 
  array (
    0 => 'mixed',
  ),
  'phardata::getlinktarget' => 
  array (
    0 => 'mixed',
  ),
  'phardata::getmetadata' => 
  array (
    0 => 'mixed',
    'unserializeOptions=' => 'array<array-key, mixed>',
  ),
  'phardata::getmodified' => 
  array (
    0 => 'mixed',
  ),
  'phardata::getmtime' => 
  array (
    0 => 'mixed',
  ),
  'phardata::getowner' => 
  array (
    0 => 'mixed',
  ),
  'phardata::getpath' => 
  array (
    0 => 'mixed',
  ),
  'phardata::getpathinfo' => 
  array (
    0 => 'mixed',
    'class=' => 'null|string',
  ),
  'phardata::getpathname' => 
  array (
    0 => 'mixed',
  ),
  'phardata::getperms' => 
  array (
    0 => 'mixed',
  ),
  'phardata::getrealpath' => 
  array (
    0 => 'mixed',
  ),
  'phardata::getsignature' => 
  array (
    0 => 'mixed',
  ),
  'phardata::getsize' => 
  array (
    0 => 'mixed',
  ),
  'phardata::getstub' => 
  array (
    0 => 'mixed',
  ),
  'phardata::getsubpath' => 
  array (
    0 => 'mixed',
  ),
  'phardata::getsubpathname' => 
  array (
    0 => 'mixed',
  ),
  'phardata::getsupportedcompression' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'phardata::getsupportedsignatures' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'phardata::gettype' => 
  array (
    0 => 'mixed',
  ),
  'phardata::getversion' => 
  array (
    0 => 'mixed',
  ),
  'phardata::haschildren' => 
  array (
    0 => 'mixed',
    'allowLinks=' => 'bool',
  ),
  'phardata::hasmetadata' => 
  array (
    0 => 'mixed',
  ),
  'phardata::interceptfilefuncs' => 
  array (
    0 => 'void',
  ),
  'phardata::isbuffering' => 
  array (
    0 => 'mixed',
  ),
  'phardata::iscompressed' => 
  array (
    0 => 'mixed',
  ),
  'phardata::isdir' => 
  array (
    0 => 'mixed',
  ),
  'phardata::isdot' => 
  array (
    0 => 'mixed',
  ),
  'phardata::isexecutable' => 
  array (
    0 => 'mixed',
  ),
  'phardata::isfile' => 
  array (
    0 => 'mixed',
  ),
  'phardata::isfileformat' => 
  array (
    0 => 'mixed',
    'format' => 'int',
  ),
  'phardata::islink' => 
  array (
    0 => 'mixed',
  ),
  'phardata::isreadable' => 
  array (
    0 => 'mixed',
  ),
  'phardata::isvalidpharfilename' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'executable=' => 'bool',
  ),
  'phardata::iswritable' => 
  array (
    0 => 'bool',
  ),
  'phardata::key' => 
  array (
    0 => 'mixed',
  ),
  'phardata::loadphar' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'alias=' => 'null|string',
  ),
  'phardata::mapphar' => 
  array (
    0 => 'bool',
    'alias=' => 'null|string',
    'offset=' => 'int',
  ),
  'phardata::mount' => 
  array (
    0 => 'void',
    'pharPath' => 'string',
    'externalPath' => 'string',
  ),
  'phardata::mungserver' => 
  array (
    0 => 'void',
    'variables' => 'array<array-key, mixed>',
  ),
  'phardata::next' => 
  array (
    0 => 'mixed',
  ),
  'phardata::offsetexists' => 
  array (
    0 => 'bool',
    'localName' => 'string',
  ),
  'phardata::offsetget' => 
  array (
    0 => 'PharFileInfo',
    'localName' => 'string',
  ),
  'phardata::offsetset' => 
  array (
    0 => 'void',
    'localName' => 'string',
    'value' => 'string',
  ),
  'phardata::offsetunset' => 
  array (
    0 => 'void',
    'localName' => 'string',
  ),
  'phardata::openfile' => 
  array (
    0 => 'mixed',
    'mode=' => 'string',
    'useIncludePath=' => 'bool',
    'context=' => 'mixed',
  ),
  'phardata::rewind' => 
  array (
    0 => 'mixed',
  ),
  'phardata::running' => 
  array (
    0 => 'string',
    'returnPhar=' => 'bool',
  ),
  'phardata::seek' => 
  array (
    0 => 'mixed',
    'offset' => 'int',
  ),
  'phardata::setalias' => 
  array (
    0 => 'bool',
    'alias' => 'string',
  ),
  'phardata::setdefaultstub' => 
  array (
    0 => 'bool',
    'index=' => 'null|string',
    'webIndex=' => 'null|string',
  ),
  'phardata::setfileclass' => 
  array (
    0 => 'mixed',
    'class=' => 'string',
  ),
  'phardata::setflags' => 
  array (
    0 => 'mixed',
    'flags' => 'int',
  ),
  'phardata::setinfoclass' => 
  array (
    0 => 'mixed',
    'class=' => 'string',
  ),
  'phardata::setmetadata' => 
  array (
    0 => 'void',
    'metadata' => 'mixed',
  ),
  'phardata::setsignaturealgorithm' => 
  array (
    0 => 'void',
    'algo' => 'int',
    'privateKey=' => 'null|string',
  ),
  'phardata::setstub' => 
  array (
    0 => 'bool',
    'stub' => 'string',
    'length=' => 'int',
  ),
  'phardata::startbuffering' => 
  array (
    0 => 'mixed',
  ),
  'phardata::stopbuffering' => 
  array (
    0 => 'mixed',
  ),
  'phardata::unlinkarchive' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'phardata::valid' => 
  array (
    0 => 'mixed',
  ),
  'phardata::webphar' => 
  array (
    0 => 'void',
    'alias=' => 'null|string',
    'index=' => 'null|string',
    'fileNotFoundScript=' => 'null|string',
    'mimeTypes=' => 'array<array-key, mixed>',
    'rewrite=' => 'callable|null',
  ),
  'pharexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'pharexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'pharexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'pharexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'pharexception::getfile' => 
  array (
    0 => 'string',
  ),
  'pharexception::getline' => 
  array (
    0 => 'int',
  ),
  'pharexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'pharexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'pharexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'pharexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'pharfileinfo::__construct' => 
  array (
    0 => 'void',
    'filename' => 'string',
  ),
  'pharfileinfo::__debuginfo' => 
  array (
    0 => 'mixed',
  ),
  'pharfileinfo::__destruct' => 
  array (
    0 => 'mixed',
  ),
  'pharfileinfo::__tostring' => 
  array (
    0 => 'string',
  ),
  'pharfileinfo::_bad_state_ex' => 
  array (
    0 => 'mixed',
  ),
  'pharfileinfo::chmod' => 
  array (
    0 => 'void',
    'perms' => 'int',
  ),
  'pharfileinfo::compress' => 
  array (
    0 => 'bool',
    'compression' => 'int',
  ),
  'pharfileinfo::decompress' => 
  array (
    0 => 'bool',
  ),
  'pharfileinfo::delmetadata' => 
  array (
    0 => 'bool',
  ),
  'pharfileinfo::getatime' => 
  array (
    0 => 'mixed',
  ),
  'pharfileinfo::getbasename' => 
  array (
    0 => 'mixed',
    'suffix=' => 'string',
  ),
  'pharfileinfo::getcompressedsize' => 
  array (
    0 => 'int',
  ),
  'pharfileinfo::getcontent' => 
  array (
    0 => 'string',
  ),
  'pharfileinfo::getcrc32' => 
  array (
    0 => 'int',
  ),
  'pharfileinfo::getctime' => 
  array (
    0 => 'mixed',
  ),
  'pharfileinfo::getextension' => 
  array (
    0 => 'mixed',
  ),
  'pharfileinfo::getfileinfo' => 
  array (
    0 => 'mixed',
    'class=' => 'null|string',
  ),
  'pharfileinfo::getfilename' => 
  array (
    0 => 'mixed',
  ),
  'pharfileinfo::getgroup' => 
  array (
    0 => 'mixed',
  ),
  'pharfileinfo::getinode' => 
  array (
    0 => 'mixed',
  ),
  'pharfileinfo::getlinktarget' => 
  array (
    0 => 'mixed',
  ),
  'pharfileinfo::getmetadata' => 
  array (
    0 => 'mixed',
    'unserializeOptions=' => 'array<array-key, mixed>',
  ),
  'pharfileinfo::getmtime' => 
  array (
    0 => 'mixed',
  ),
  'pharfileinfo::getowner' => 
  array (
    0 => 'mixed',
  ),
  'pharfileinfo::getpath' => 
  array (
    0 => 'mixed',
  ),
  'pharfileinfo::getpathinfo' => 
  array (
    0 => 'mixed',
    'class=' => 'null|string',
  ),
  'pharfileinfo::getpathname' => 
  array (
    0 => 'mixed',
  ),
  'pharfileinfo::getperms' => 
  array (
    0 => 'mixed',
  ),
  'pharfileinfo::getpharflags' => 
  array (
    0 => 'int',
  ),
  'pharfileinfo::getrealpath' => 
  array (
    0 => 'mixed',
  ),
  'pharfileinfo::getsize' => 
  array (
    0 => 'mixed',
  ),
  'pharfileinfo::gettype' => 
  array (
    0 => 'mixed',
  ),
  'pharfileinfo::hasmetadata' => 
  array (
    0 => 'bool',
  ),
  'pharfileinfo::iscompressed' => 
  array (
    0 => 'bool',
    'compression=' => 'int|null',
  ),
  'pharfileinfo::iscrcchecked' => 
  array (
    0 => 'bool',
  ),
  'pharfileinfo::isdir' => 
  array (
    0 => 'mixed',
  ),
  'pharfileinfo::isexecutable' => 
  array (
    0 => 'mixed',
  ),
  'pharfileinfo::isfile' => 
  array (
    0 => 'mixed',
  ),
  'pharfileinfo::islink' => 
  array (
    0 => 'mixed',
  ),
  'pharfileinfo::isreadable' => 
  array (
    0 => 'mixed',
  ),
  'pharfileinfo::iswritable' => 
  array (
    0 => 'mixed',
  ),
  'pharfileinfo::openfile' => 
  array (
    0 => 'mixed',
    'mode=' => 'string',
    'useIncludePath=' => 'bool',
    'context=' => 'mixed',
  ),
  'pharfileinfo::setfileclass' => 
  array (
    0 => 'mixed',
    'class=' => 'string',
  ),
  'pharfileinfo::setinfoclass' => 
  array (
    0 => 'mixed',
    'class=' => 'string',
  ),
  'pharfileinfo::setmetadata' => 
  array (
    0 => 'void',
    'metadata' => 'mixed',
  ),
  'phdfs::__construct' => 
  array (
    0 => 'void',
    'ip' => 'string',
    'port' => 'string',
  ),
  'phdfs::__destruct' => 
  array (
    0 => 'void',
  ),
  'phdfs::connect' => 
  array (
    0 => 'bool',
  ),
  'phdfs::copy' => 
  array (
    0 => 'bool',
    'source_file' => 'string',
    'destination_file' => 'string',
  ),
  'phdfs::create_directory' => 
  array (
    0 => 'bool',
    'path' => 'string',
  ),
  'phdfs::delete' => 
  array (
    0 => 'bool',
    'path' => 'string',
  ),
  'phdfs::disconnect' => 
  array (
    0 => 'bool',
  ),
  'phdfs::exists' => 
  array (
    0 => 'bool',
    'path' => 'string',
  ),
  'phdfs::file_info' => 
  array (
    0 => 'array<array-key, mixed>',
    'path' => 'string',
  ),
  'phdfs::list_directory' => 
  array (
    0 => 'array<array-key, mixed>',
    'path' => 'string',
  ),
  'phdfs::read' => 
  array (
    0 => 'string',
    'path' => 'string',
    'length=' => 'string',
  ),
  'phdfs::rename' => 
  array (
    0 => 'bool',
    'old_path' => 'string',
    'new_path' => 'string',
  ),
  'phdfs::tell' => 
  array (
    0 => 'int',
    'path' => 'string',
  ),
  'phdfs::write' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'buffer' => 'string',
    'mode=' => 'string',
  ),
  'php_check_syntax' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'error_message=' => 'string',
  ),
  'php_ini_loaded_file' => 
  array (
    0 => 'false|string',
  ),
  'php_ini_scanned_files' => 
  array (
    0 => 'false|string',
  ),
  'php_logo_guid' => 
  array (
    0 => 'string',
  ),
  'php_sapi_name' => 
  array (
    0 => 'string',
  ),
  'php_strip_whitespace' => 
  array (
    0 => 'string',
    'filename' => 'string',
  ),
  'php_uname' => 
  array (
    0 => 'string',
    'mode=' => 'string',
  ),
  'php_user_filter::filter' => 
  array (
    0 => 'int',
    'in' => 'resource',
    'out' => 'resource',
    '&consumed' => 'int',
    'closing' => 'bool',
  ),
  'php_user_filter::onclose' => 
  array (
    0 => 'void',
  ),
  'php_user_filter::oncreate' => 
  array (
    0 => 'bool',
  ),
  'phpcredits' => 
  array (
    0 => 'true',
    'flags=' => 'int',
  ),
  'phpdbg_break_file' => 
  array (
    0 => 'void',
    'file' => 'string',
    'line' => 'int',
  ),
  'phpdbg_break_function' => 
  array (
    0 => 'void',
    'function' => 'string',
  ),
  'phpdbg_break_method' => 
  array (
    0 => 'void',
    'class' => 'string',
    'method' => 'string',
  ),
  'phpdbg_break_next' => 
  array (
    0 => 'void',
  ),
  'phpdbg_clear' => 
  array (
    0 => 'void',
  ),
  'phpdbg_color' => 
  array (
    0 => 'void',
    'element' => 'int',
    'color' => 'string',
  ),
  'phpdbg_end_oplog' => 
  array (
    0 => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'phpdbg_exec' => 
  array (
    0 => 'mixed',
    'context=' => 'string',
  ),
  'phpdbg_get_executable' => 
  array (
    0 => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'phpdbg_prompt' => 
  array (
    0 => 'void',
    'string' => 'string',
  ),
  'phpdbg_start_oplog' => 
  array (
    0 => 'void',
  ),
  'phpinfo' => 
  array (
    0 => 'true',
    'flags=' => 'int',
  ),
  'phptoken::__construct' => 
  array (
    0 => 'void',
    'id' => 'int',
    'text' => 'string',
    'line=' => 'int',
    'pos=' => 'int',
  ),
  'phptoken::__tostring' => 
  array (
    0 => 'string',
  ),
  'phptoken::gettokenname' => 
  array (
    0 => 'null|string',
  ),
  'phptoken::is' => 
  array (
    0 => 'bool',
    'kind' => 'array<array-key, int|string>|int|string',
  ),
  'phptoken::isignorable' => 
  array (
    0 => 'bool',
  ),
  'phptoken::tokenize' => 
  array (
    0 => 'list<PhpToken>',
    'code' => 'string',
    'flags=' => 'int',
  ),
  'phpversion' => 
  array (
    0 => 'false|string',
    'extension=' => 'null|string',
  ),
  'pht\\atomicinteger::__construct' => 
  array (
    0 => 'void',
    'value=' => 'int',
  ),
  'pht\\atomicinteger::dec' => 
  array (
    0 => 'void',
  ),
  'pht\\atomicinteger::get' => 
  array (
    0 => 'int',
  ),
  'pht\\atomicinteger::inc' => 
  array (
    0 => 'void',
  ),
  'pht\\atomicinteger::lock' => 
  array (
    0 => 'void',
  ),
  'pht\\atomicinteger::set' => 
  array (
    0 => 'void',
    'value' => 'int',
  ),
  'pht\\atomicinteger::unlock' => 
  array (
    0 => 'void',
  ),
  'pht\\hashtable::lock' => 
  array (
    0 => 'void',
  ),
  'pht\\hashtable::size' => 
  array (
    0 => 'int',
  ),
  'pht\\hashtable::unlock' => 
  array (
    0 => 'void',
  ),
  'pht\\queue::front' => 
  array (
    0 => 'mixed',
  ),
  'pht\\queue::lock' => 
  array (
    0 => 'void',
  ),
  'pht\\queue::pop' => 
  array (
    0 => 'mixed',
  ),
  'pht\\queue::push' => 
  array (
    0 => 'void',
    'value' => 'mixed',
  ),
  'pht\\queue::size' => 
  array (
    0 => 'int',
  ),
  'pht\\queue::unlock' => 
  array (
    0 => 'void',
  ),
  'pht\\runnable::run' => 
  array (
    0 => 'void',
  ),
  'pht\\thread::addclasstask' => 
  array (
    0 => 'void',
    'className' => 'string',
    '...ctorArgs=' => 'mixed',
  ),
  'pht\\thread::addfiletask' => 
  array (
    0 => 'void',
    'fileName' => 'string',
    '...globals=' => 'mixed',
  ),
  'pht\\thread::addfunctiontask' => 
  array (
    0 => 'void',
    'func' => 'callable',
    '...funcArgs=' => 'mixed',
  ),
  'pht\\thread::join' => 
  array (
    0 => 'void',
  ),
  'pht\\thread::start' => 
  array (
    0 => 'void',
  ),
  'pht\\thread::taskcount' => 
  array (
    0 => 'int',
  ),
  'pht\\threaded::lock' => 
  array (
    0 => 'void',
  ),
  'pht\\threaded::unlock' => 
  array (
    0 => 'void',
  ),
  'pht\\vector::__construct' => 
  array (
    0 => 'void',
    'size=' => 'int',
    'value=' => 'mixed',
  ),
  'pht\\vector::deleteat' => 
  array (
    0 => 'void',
    'offset' => 'int',
  ),
  'pht\\vector::insertat' => 
  array (
    0 => 'void',
    'value' => 'mixed',
    'offset' => 'int',
  ),
  'pht\\vector::lock' => 
  array (
    0 => 'void',
  ),
  'pht\\vector::pop' => 
  array (
    0 => 'mixed',
  ),
  'pht\\vector::push' => 
  array (
    0 => 'void',
    'value' => 'mixed',
  ),
  'pht\\vector::resize' => 
  array (
    0 => 'void',
    'size' => 'int',
    'value=' => 'mixed',
  ),
  'pht\\vector::shift' => 
  array (
    0 => 'mixed',
  ),
  'pht\\vector::size' => 
  array (
    0 => 'int',
  ),
  'pht\\vector::unlock' => 
  array (
    0 => 'void',
  ),
  'pht\\vector::unshift' => 
  array (
    0 => 'void',
    'value' => 'mixed',
  ),
  'pht\\vector::updateat' => 
  array (
    0 => 'void',
    'value' => 'mixed',
    'offset' => 'int',
  ),
  'pi' => 
  array (
    0 => 'float',
  ),
  'pointobj::__construct' => 
  array (
    0 => 'void',
  ),
  'pointobj::distancetoline' => 
  array (
    0 => 'float',
    'p1' => 'pointObj',
    'p2' => 'pointObj',
  ),
  'pointobj::distancetopoint' => 
  array (
    0 => 'float',
    'poPoint' => 'pointObj',
  ),
  'pointobj::distancetoshape' => 
  array (
    0 => 'float',
    'shape' => 'shapeObj',
  ),
  'pointobj::draw' => 
  array (
    0 => 'int',
    'map' => 'mapObj',
    'layer' => 'layerObj',
    'img' => 'imageObj',
    'class_index' => 'int',
    'text' => 'string',
  ),
  'pointobj::ms_newpointobj' => 
  array (
    0 => 'pointObj',
  ),
  'pointobj::project' => 
  array (
    0 => 'int',
    'in' => 'projectionObj',
    'out' => 'projectionObj',
  ),
  'pointobj::setxy' => 
  array (
    0 => 'int',
    'x' => 'float',
    'y' => 'float',
    'm' => 'float',
  ),
  'pointobj::setxyz' => 
  array (
    0 => 'int',
    'x' => 'float',
    'y' => 'float',
    'z' => 'float',
    'm' => 'float',
  ),
  'pool::__construct' => 
  array (
    0 => 'void',
    'size' => 'int',
    'class' => 'string',
    'ctor=' => 'array<array-key, mixed>',
  ),
  'pool::collect' => 
  array (
    0 => 'int',
    'collector=' => 'callable',
  ),
  'pool::resize' => 
  array (
    0 => 'void',
    'size' => 'int',
  ),
  'pool::shutdown' => 
  array (
    0 => 'void',
  ),
  'pool::submit' => 
  array (
    0 => 'int',
    'task' => 'Threaded',
  ),
  'pool::submitto' => 
  array (
    0 => 'int',
    'worker' => 'int',
    'task' => 'Threaded',
  ),
  'popen' => 
  array (
    0 => 'false|resource',
    'command' => 'string',
    'mode' => 'string',
  ),
  'pos' => 
  array (
    0 => 'mixed',
    'array' => 'array<array-key, mixed>',
  ),
  'posix_access' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'flags=' => 'int',
  ),
  'posix_ctermid' => 
  array (
    0 => 'false|string',
  ),
  'posix_errno' => 
  array (
    0 => 'int',
  ),
  'posix_get_last_error' => 
  array (
    0 => 'int',
  ),
  'posix_getcwd' => 
  array (
    0 => 'false|string',
  ),
  'posix_getegid' => 
  array (
    0 => 'int',
  ),
  'posix_geteuid' => 
  array (
    0 => 'int',
  ),
  'posix_getgid' => 
  array (
    0 => 'int',
  ),
  'posix_getgrgid' => 
  array (
    0 => 'array{gid: int, members: list<string>, name: string, passwd: string}|false',
    'group_id' => 'int',
  ),
  'posix_getgrnam' => 
  array (
    0 => 'array{gid: int, members: list<string>, name: string, passwd: string}|false',
    'name' => 'string',
  ),
  'posix_getgroups' => 
  array (
    0 => 'false|list<int>',
  ),
  'posix_getlogin' => 
  array (
    0 => 'false|string',
  ),
  'posix_getpgid' => 
  array (
    0 => 'false|int',
    'process_id' => 'int',
  ),
  'posix_getpgrp' => 
  array (
    0 => 'int',
  ),
  'posix_getpid' => 
  array (
    0 => 'int',
  ),
  'posix_getppid' => 
  array (
    0 => 'int',
  ),
  'posix_getpwnam' => 
  array (
    0 => 'array{dir: string, gecos: string, gid: int, name: string, passwd: string, shell: string, uid: int}|false',
    'username' => 'string',
  ),
  'posix_getpwuid' => 
  array (
    0 => 'array{dir: string, gecos: string, gid: int, name: string, passwd: string, shell: string, uid: int}|false',
    'user_id' => 'int',
  ),
  'posix_getrlimit' => 
  array (
    0 => 'array{\'hard core\': string, \'hard cpu\': string, \'hard data\': string, \'hard filesize\': string, \'hard maxproc\': int, \'hard memlock\': int, \'hard openfiles\': int, \'hard rss\': string, \'hard stack\': string, \'hard totalmem\': string, \'soft core\': string, \'soft cpu\': string, \'soft data\': string, \'soft filesize\': string, \'soft maxproc\': int, \'soft memlock\': int, \'soft openfiles\': int, \'soft rss\': string, \'soft stack\': int, \'soft totalmem\': string}|false',
  ),
  'posix_getsid' => 
  array (
    0 => 'false|int',
    'process_id' => 'int',
  ),
  'posix_getuid' => 
  array (
    0 => 'int',
  ),
  'posix_initgroups' => 
  array (
    0 => 'bool',
    'username' => 'string',
    'group_id' => 'int',
  ),
  'posix_isatty' => 
  array (
    0 => 'bool',
    'file_descriptor' => 'int|resource',
  ),
  'posix_kill' => 
  array (
    0 => 'bool',
    'process_id' => 'int',
    'signal' => 'int',
  ),
  'posix_mkfifo' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'permissions' => 'int',
  ),
  'posix_mknod' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'flags' => 'int',
    'major=' => 'int',
    'minor=' => 'int',
  ),
  'posix_setegid' => 
  array (
    0 => 'bool',
    'group_id' => 'int',
  ),
  'posix_seteuid' => 
  array (
    0 => 'bool',
    'user_id' => 'int',
  ),
  'posix_setgid' => 
  array (
    0 => 'bool',
    'group_id' => 'int',
  ),
  'posix_setpgid' => 
  array (
    0 => 'bool',
    'process_id' => 'int',
    'process_group_id' => 'int',
  ),
  'posix_setrlimit' => 
  array (
    0 => 'bool',
    'resource' => 'int',
    'soft_limit' => 'int',
    'hard_limit' => 'int',
  ),
  'posix_setsid' => 
  array (
    0 => 'int',
  ),
  'posix_setuid' => 
  array (
    0 => 'bool',
    'user_id' => 'int',
  ),
  'posix_strerror' => 
  array (
    0 => 'string',
    'error_code' => 'int',
  ),
  'posix_times' => 
  array (
    0 => 'array{cstime: int, cutime: int, stime: int, ticks: int, utime: int}|false',
  ),
  'posix_ttyname' => 
  array (
    0 => 'false|string',
    'file_descriptor' => 'int|resource',
  ),
  'posix_uname' => 
  array (
    0 => 'array{domainname: string, machine: string, nodename: string, release: string, sysname: string, version: string}|false',
  ),
  'postal\\expand::expand_address' => 
  array (
    0 => 'array<array-key, string>',
    'address' => 'string',
    'options=' => 'array<string, mixed>',
  ),
  'postal\\parser::parse_address' => 
  array (
    0 => 'array<string, string>',
    'address' => 'string',
    'options=' => 'array<string, string>',
  ),
  'pow' => 
  array (
    0 => 'float|int',
    'num' => 'float|int',
    'exponent' => 'float|int',
  ),
  'preg_filter' => 
  array (
    0 => 'array<array-key, string>|null|string',
    'pattern' => 'array<array-key, string>|string',
    'replacement' => 'array<array-key, string>|string',
    'subject' => 'array<array-key, string>|string',
    'limit=' => 'int',
    '&w_count=' => 'int',
  ),
  'preg_grep' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'pattern' => 'string',
    'array' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'preg_last_error' => 
  array (
    0 => 'int',
  ),
  'preg_last_error_msg' => 
  array (
    0 => 'string',
  ),
  'preg_match' => 
  array (
    0 => '0|1|false',
    'pattern' => 'string',
    'subject' => 'string',
    '&w_matches=' => 'array<array-key, string>',
    'flags=' => '0',
    'offset=' => 'int',
  ),
  'preg_match\'1' => 
  array (
    0 => '0|1|false',
    'pattern' => 'string',
    'subject' => 'string',
    '&w_matches=' => 'array<array-key, mixed>',
    'flags=' => 'int',
    'offset=' => 'int',
  ),
  'preg_match_all' => 
  array (
    0 => 'false|int<0, max>',
    'pattern' => 'string',
    'subject' => 'string',
    '&w_matches=' => 'array<array-key, mixed>',
    'flags=' => 'int',
    'offset=' => 'int',
  ),
  'preg_quote' => 
  array (
    0 => 'string',
    'str' => 'string',
    'delimiter=' => 'null|string',
  ),
  'preg_replace' => 
  array (
    0 => 'array<array-key, string>|null|string',
    'pattern' => 'array<array-key, mixed>|string',
    'replacement' => 'array<array-key, mixed>|string',
    'subject' => 'array<array-key, mixed>|string',
    'limit=' => 'int',
    '&w_count=' => 'int',
  ),
  'preg_replace_callback' => 
  array (
    0 => 'null|string',
    'pattern' => 'array<array-key, mixed>|string',
    'callback' => 'callable(array<array-key, string>):string',
    'subject' => 'string',
    'limit=' => 'int',
    '&w_count=' => 'int',
    'flags=' => 'int',
  ),
  'preg_replace_callback\'1' => 
  array (
    0 => 'array<array-key, string>|null',
    'pattern' => 'array<array-key, mixed>|string',
    'callback' => 'callable(array<array-key, string>):string',
    'subject' => 'array<array-key, string>',
    'limit=' => 'int',
    '&w_count=' => 'int',
    'flags=' => 'int',
  ),
  'preg_replace_callback_array' => 
  array (
    0 => 'null|string',
    'pattern' => 'array<string, callable(array<array-key, mixed>):string>',
    'subject' => 'string',
    'limit=' => 'int',
    '&w_count=' => 'int',
    'flags=' => 'int',
  ),
  'preg_replace_callback_array\'1' => 
  array (
    0 => 'array<array-key, string>|null',
    'pattern' => 'array<string, callable(array<array-key, mixed>):string>',
    'subject' => 'array<array-key, string>',
    'limit=' => 'int',
    '&w_count=' => 'int',
    'flags=' => 'int',
  ),
  'preg_split' => 
  array (
    0 => 'false|list<string>',
    'pattern' => 'string',
    'subject' => 'string',
    'limit=' => 'int',
    'flags=' => 'int',
  ),
  'preg_split\'1' => 
  array (
    0 => 'false|list<list<int|string>|string>',
    'pattern' => 'string',
    'subject' => 'string',
    'limit=' => 'int',
    'flags=' => 'int',
  ),
  'prev' => 
  array (
    0 => 'mixed',
    '&r_array' => 'array<array-key, mixed>|object',
  ),
  'print' => 
  array (
    0 => 'int',
    'arg' => 'string',
  ),
  'print_r' => 
  array (
    0 => 'string',
    'value' => 'mixed',
    'return=' => 'bool',
  ),
  'print_r\'1' => 
  array (
    0 => 'true',
    'value' => 'mixed',
    'return=' => 'bool',
  ),
  'printf' => 
  array (
    0 => 'int<0, max>',
    'format' => 'string',
    '...values=' => 'float|int|string',
  ),
  'proc_close' => 
  array (
    0 => 'int',
    'process' => 'resource',
  ),
  'proc_get_status' => 
  array (
    0 => 'array{command: string, exitcode: int, pid: int, running: bool, signaled: bool, stopped: bool, stopsig: int, termsig: int}',
    'process' => 'resource',
  ),
  'proc_nice' => 
  array (
    0 => 'bool',
    'priority' => 'int',
  ),
  'proc_open' => 
  array (
    0 => 'false|resource',
    'command' => 'array<array-key, mixed>|string',
    'descriptor_spec' => 'array<array-key, mixed>',
    '&pipes' => 'array<array-key, resource>',
    'cwd=' => 'null|string',
    'env_vars=' => 'array<array-key, mixed>|null',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'proc_terminate' => 
  array (
    0 => 'bool',
    'process' => 'resource',
    'signal=' => 'int',
  ),
  'projectionobj::__construct' => 
  array (
    0 => 'void',
    'projectionString' => 'string',
  ),
  'projectionobj::getunits' => 
  array (
    0 => 'int',
  ),
  'projectionobj::ms_newprojectionobj' => 
  array (
    0 => 'projectionObj',
    'projectionString' => 'string',
  ),
  'property_exists' => 
  array (
    0 => 'bool',
    'object_or_class' => 'object|string',
    'property' => 'string',
  ),
  'ps_add_bookmark' => 
  array (
    0 => 'int',
    'psdoc' => 'resource',
    'text' => 'string',
    'parent=' => 'int',
    'open=' => 'int',
  ),
  'ps_add_launchlink' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'filename' => 'string',
  ),
  'ps_add_locallink' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'page' => 'int',
    'dest' => 'string',
  ),
  'ps_add_note' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'contents' => 'string',
    'title' => 'string',
    'icon' => 'string',
    'open' => 'int',
  ),
  'ps_add_pdflink' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'filename' => 'string',
    'page' => 'int',
    'dest' => 'string',
  ),
  'ps_add_weblink' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'llx' => 'float',
    'lly' => 'float',
    'urx' => 'float',
    'ury' => 'float',
    'url' => 'string',
  ),
  'ps_arc' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'x' => 'float',
    'y' => 'float',
    'radius' => 'float',
    'alpha' => 'float',
    'beta' => 'float',
  ),
  'ps_arcn' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'x' => 'float',
    'y' => 'float',
    'radius' => 'float',
    'alpha' => 'float',
    'beta' => 'float',
  ),
  'ps_begin_page' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'width' => 'float',
    'height' => 'float',
  ),
  'ps_begin_pattern' => 
  array (
    0 => 'int',
    'psdoc' => 'resource',
    'width' => 'float',
    'height' => 'float',
    'xstep' => 'float',
    'ystep' => 'float',
    'painttype' => 'int',
  ),
  'ps_begin_template' => 
  array (
    0 => 'int',
    'psdoc' => 'resource',
    'width' => 'float',
    'height' => 'float',
  ),
  'ps_circle' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'x' => 'float',
    'y' => 'float',
    'radius' => 'float',
  ),
  'ps_clip' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
  ),
  'ps_close' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
  ),
  'ps_close_image' => 
  array (
    0 => 'void',
    'psdoc' => 'resource',
    'imageid' => 'int',
  ),
  'ps_closepath' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
  ),
  'ps_closepath_stroke' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
  ),
  'ps_continue_text' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'text' => 'string',
  ),
  'ps_curveto' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'x1' => 'float',
    'y1' => 'float',
    'x2' => 'float',
    'y2' => 'float',
    'x3' => 'float',
    'y3' => 'float',
  ),
  'ps_delete' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
  ),
  'ps_end_page' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
  ),
  'ps_end_pattern' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
  ),
  'ps_end_template' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
  ),
  'ps_fill' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
  ),
  'ps_fill_stroke' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
  ),
  'ps_findfont' => 
  array (
    0 => 'int',
    'psdoc' => 'resource',
    'fontname' => 'string',
    'encoding' => 'string',
    'embed=' => 'bool',
  ),
  'ps_get_buffer' => 
  array (
    0 => 'string',
    'psdoc' => 'resource',
  ),
  'ps_get_parameter' => 
  array (
    0 => 'string',
    'psdoc' => 'resource',
    'name' => 'string',
    'modifier=' => 'float',
  ),
  'ps_get_value' => 
  array (
    0 => 'float',
    'psdoc' => 'resource',
    'name' => 'string',
    'modifier=' => 'float',
  ),
  'ps_hyphenate' => 
  array (
    0 => 'array<array-key, mixed>',
    'psdoc' => 'resource',
    'text' => 'string',
  ),
  'ps_include_file' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'file' => 'string',
  ),
  'ps_lineto' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'x' => 'float',
    'y' => 'float',
  ),
  'ps_makespotcolor' => 
  array (
    0 => 'int',
    'psdoc' => 'resource',
    'name' => 'string',
    'reserved=' => 'int',
  ),
  'ps_moveto' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'x' => 'float',
    'y' => 'float',
  ),
  'ps_new' => 
  array (
    0 => 'resource',
  ),
  'ps_open_file' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'filename=' => 'string',
  ),
  'ps_open_image' => 
  array (
    0 => 'int',
    'psdoc' => 'resource',
    'type' => 'string',
    'source' => 'string',
    'data' => 'string',
    'length' => 'int',
    'width' => 'int',
    'height' => 'int',
    'components' => 'int',
    'bpc' => 'int',
    'params' => 'string',
  ),
  'ps_open_image_file' => 
  array (
    0 => 'int',
    'psdoc' => 'resource',
    'type' => 'string',
    'filename' => 'string',
    'stringparam=' => 'string',
    'intparam=' => 'int',
  ),
  'ps_open_memory_image' => 
  array (
    0 => 'int',
    'psdoc' => 'resource',
    'gd' => 'int',
  ),
  'ps_place_image' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'imageid' => 'int',
    'x' => 'float',
    'y' => 'float',
    'scale' => 'float',
  ),
  'ps_rect' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'x' => 'float',
    'y' => 'float',
    'width' => 'float',
    'height' => 'float',
  ),
  'ps_restore' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
  ),
  'ps_rotate' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'rot' => 'float',
  ),
  'ps_save' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
  ),
  'ps_scale' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'x' => 'float',
    'y' => 'float',
  ),
  'ps_set_border_color' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'red' => 'float',
    'green' => 'float',
    'blue' => 'float',
  ),
  'ps_set_border_dash' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'black' => 'float',
    'white' => 'float',
  ),
  'ps_set_border_style' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'style' => 'string',
    'width' => 'float',
  ),
  'ps_set_info' => 
  array (
    0 => 'bool',
    'p' => 'resource',
    'key' => 'string',
    'value' => 'string',
  ),
  'ps_set_parameter' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'name' => 'string',
    'value' => 'string',
  ),
  'ps_set_text_pos' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'x' => 'float',
    'y' => 'float',
  ),
  'ps_set_value' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'name' => 'string',
    'value' => 'float',
  ),
  'ps_setcolor' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'type' => 'string',
    'colorspace' => 'string',
    'c1' => 'float',
    'c2' => 'float',
    'c3' => 'float',
    'c4' => 'float',
  ),
  'ps_setdash' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'on' => 'float',
    'off' => 'float',
  ),
  'ps_setflat' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'value' => 'float',
  ),
  'ps_setfont' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'fontid' => 'int',
    'size' => 'float',
  ),
  'ps_setgray' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'gray' => 'float',
  ),
  'ps_setlinecap' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'type' => 'int',
  ),
  'ps_setlinejoin' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'type' => 'int',
  ),
  'ps_setlinewidth' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'width' => 'float',
  ),
  'ps_setmiterlimit' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'value' => 'float',
  ),
  'ps_setoverprintmode' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'mode' => 'int',
  ),
  'ps_setpolydash' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'arr' => 'float',
  ),
  'ps_shading' => 
  array (
    0 => 'int',
    'psdoc' => 'resource',
    'type' => 'string',
    'x0' => 'float',
    'y0' => 'float',
    'x1' => 'float',
    'y1' => 'float',
    'c1' => 'float',
    'c2' => 'float',
    'c3' => 'float',
    'c4' => 'float',
    'optlist' => 'string',
  ),
  'ps_shading_pattern' => 
  array (
    0 => 'int',
    'psdoc' => 'resource',
    'shadingid' => 'int',
    'optlist' => 'string',
  ),
  'ps_shfill' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'shadingid' => 'int',
  ),
  'ps_show' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'text' => 'string',
  ),
  'ps_show2' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'text' => 'string',
    'length' => 'int',
  ),
  'ps_show_boxed' => 
  array (
    0 => 'int',
    'psdoc' => 'resource',
    'text' => 'string',
    'left' => 'float',
    'bottom' => 'float',
    'width' => 'float',
    'height' => 'float',
    'hmode' => 'string',
    'feature=' => 'string',
  ),
  'ps_show_xy' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'text' => 'string',
    'x' => 'float',
    'y' => 'float',
  ),
  'ps_show_xy2' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'text' => 'string',
    'length' => 'int',
    'xcoor' => 'float',
    'ycoor' => 'float',
  ),
  'ps_string_geometry' => 
  array (
    0 => 'array<array-key, mixed>',
    'psdoc' => 'resource',
    'text' => 'string',
    'fontid=' => 'int',
    'size=' => 'float',
  ),
  'ps_stringwidth' => 
  array (
    0 => 'float',
    'psdoc' => 'resource',
    'text' => 'string',
    'fontid=' => 'int',
    'size=' => 'float',
  ),
  'ps_stroke' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
  ),
  'ps_symbol' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'ord' => 'int',
  ),
  'ps_symbol_name' => 
  array (
    0 => 'string',
    'psdoc' => 'resource',
    'ord' => 'int',
    'fontid=' => 'int',
  ),
  'ps_symbol_width' => 
  array (
    0 => 'float',
    'psdoc' => 'resource',
    'ord' => 'int',
    'fontid=' => 'int',
    'size=' => 'float',
  ),
  'ps_translate' => 
  array (
    0 => 'bool',
    'psdoc' => 'resource',
    'x' => 'float',
    'y' => 'float',
  ),
  'pspell_add_to_personal' => 
  array (
    0 => 'bool',
    'dictionary' => 'int',
    'word' => 'string',
  ),
  'pspell_add_to_session' => 
  array (
    0 => 'bool',
    'dictionary' => 'int',
    'word' => 'string',
  ),
  'pspell_check' => 
  array (
    0 => 'bool',
    'dictionary' => 'int',
    'word' => 'string',
  ),
  'pspell_clear_session' => 
  array (
    0 => 'bool',
    'dictionary' => 'int',
  ),
  'pspell_config_create' => 
  array (
    0 => 'int',
    'language' => 'string',
    'spelling=' => 'string',
    'jargon=' => 'string',
    'encoding=' => 'string',
  ),
  'pspell_config_data_dir' => 
  array (
    0 => 'bool',
    'config' => 'int',
    'directory' => 'string',
  ),
  'pspell_config_dict_dir' => 
  array (
    0 => 'bool',
    'config' => 'int',
    'directory' => 'string',
  ),
  'pspell_config_ignore' => 
  array (
    0 => 'bool',
    'config' => 'int',
    'min_length' => 'int',
  ),
  'pspell_config_mode' => 
  array (
    0 => 'bool',
    'config' => 'int',
    'mode' => 'int',
  ),
  'pspell_config_personal' => 
  array (
    0 => 'bool',
    'config' => 'int',
    'filename' => 'string',
  ),
  'pspell_config_repl' => 
  array (
    0 => 'bool',
    'config' => 'int',
    'filename' => 'string',
  ),
  'pspell_config_runtogether' => 
  array (
    0 => 'bool',
    'config' => 'int',
    'allow' => 'bool',
  ),
  'pspell_config_save_repl' => 
  array (
    0 => 'bool',
    'config' => 'int',
    'save' => 'bool',
  ),
  'pspell_new' => 
  array (
    0 => 'false|int',
    'language' => 'string',
    'spelling=' => 'string',
    'jargon=' => 'string',
    'encoding=' => 'string',
    'mode=' => 'int',
  ),
  'pspell_new_config' => 
  array (
    0 => 'false|int',
    'config' => 'int',
  ),
  'pspell_new_personal' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
    'language' => 'string',
    'spelling=' => 'string',
    'jargon=' => 'string',
    'encoding=' => 'string',
    'mode=' => 'int',
  ),
  'pspell_save_wordlist' => 
  array (
    0 => 'bool',
    'dictionary' => 'int',
  ),
  'pspell_store_replacement' => 
  array (
    0 => 'bool',
    'dictionary' => 'int',
    'misspelled' => 'string',
    'correct' => 'string',
  ),
  'pspell_suggest' => 
  array (
    0 => 'array<array-key, mixed>',
    'dictionary' => 'int',
    'word' => 'string',
  ),
  'putenv' => 
  array (
    0 => 'bool',
    'assignment' => 'string',
  ),
  'px_close' => 
  array (
    0 => 'bool',
    'pxdoc' => 'resource',
  ),
  'px_create_fp' => 
  array (
    0 => 'bool',
    'pxdoc' => 'resource',
    'file' => 'resource',
    'fielddesc' => 'array<array-key, mixed>',
  ),
  'px_date2string' => 
  array (
    0 => 'string',
    'pxdoc' => 'resource',
    'value' => 'int',
    'format' => 'string',
  ),
  'px_delete' => 
  array (
    0 => 'bool',
    'pxdoc' => 'resource',
  ),
  'px_delete_record' => 
  array (
    0 => 'bool',
    'pxdoc' => 'resource',
    'num' => 'int',
  ),
  'px_get_field' => 
  array (
    0 => 'array<array-key, mixed>',
    'pxdoc' => 'resource',
    'fieldno' => 'int',
  ),
  'px_get_info' => 
  array (
    0 => 'array<array-key, mixed>',
    'pxdoc' => 'resource',
  ),
  'px_get_parameter' => 
  array (
    0 => 'string',
    'pxdoc' => 'resource',
    'name' => 'string',
  ),
  'px_get_record' => 
  array (
    0 => 'array<array-key, mixed>',
    'pxdoc' => 'resource',
    'num' => 'int',
    'mode=' => 'int',
  ),
  'px_get_schema' => 
  array (
    0 => 'array<array-key, mixed>',
    'pxdoc' => 'resource',
    'mode=' => 'int',
  ),
  'px_get_value' => 
  array (
    0 => 'float',
    'pxdoc' => 'resource',
    'name' => 'string',
  ),
  'px_insert_record' => 
  array (
    0 => 'int',
    'pxdoc' => 'resource',
    'data' => 'array<array-key, mixed>',
  ),
  'px_new' => 
  array (
    0 => 'resource',
  ),
  'px_numfields' => 
  array (
    0 => 'int',
    'pxdoc' => 'resource',
  ),
  'px_numrecords' => 
  array (
    0 => 'int',
    'pxdoc' => 'resource',
  ),
  'px_open_fp' => 
  array (
    0 => 'bool',
    'pxdoc' => 'resource',
    'file' => 'resource',
  ),
  'px_put_record' => 
  array (
    0 => 'bool',
    'pxdoc' => 'resource',
    'record' => 'array<array-key, mixed>',
    'recpos=' => 'int',
  ),
  'px_retrieve_record' => 
  array (
    0 => 'array<array-key, mixed>',
    'pxdoc' => 'resource',
    'num' => 'int',
    'mode=' => 'int',
  ),
  'px_set_blob_file' => 
  array (
    0 => 'bool',
    'pxdoc' => 'resource',
    'filename' => 'string',
  ),
  'px_set_parameter' => 
  array (
    0 => 'bool',
    'pxdoc' => 'resource',
    'name' => 'string',
    'value' => 'string',
  ),
  'px_set_tablename' => 
  array (
    0 => 'void',
    'pxdoc' => 'resource',
    'name' => 'string',
  ),
  'px_set_targetencoding' => 
  array (
    0 => 'bool',
    'pxdoc' => 'resource',
    'encoding' => 'string',
  ),
  'px_set_value' => 
  array (
    0 => 'bool',
    'pxdoc' => 'resource',
    'name' => 'string',
    'value' => 'float',
  ),
  'px_timestamp2string' => 
  array (
    0 => 'string',
    'pxdoc' => 'resource',
    'value' => 'float',
    'format' => 'string',
  ),
  'px_update_record' => 
  array (
    0 => 'bool',
    'pxdoc' => 'resource',
    'data' => 'array<array-key, mixed>',
    'num' => 'int',
  ),
  'qdom_error' => 
  array (
    0 => 'string',
  ),
  'qdom_tree' => 
  array (
    0 => 'QDomDocument',
    'doc' => 'string',
  ),
  'querymapobj::converttostring' => 
  array (
    0 => 'string',
  ),
  'querymapobj::free' => 
  array (
    0 => 'void',
  ),
  'querymapobj::set' => 
  array (
    0 => 'int',
    'property_name' => 'string',
    'new_value' => 'mixed',
  ),
  'querymapobj::updatefromstring' => 
  array (
    0 => 'int',
    'snippet' => 'string',
  ),
  'quickhashinthash::__construct' => 
  array (
    0 => 'void',
    'size' => 'int',
    'options=' => 'int',
  ),
  'quickhashinthash::add' => 
  array (
    0 => 'bool',
    'key' => 'int',
    'value=' => 'int',
  ),
  'quickhashinthash::delete' => 
  array (
    0 => 'bool',
    'key' => 'int',
  ),
  'quickhashinthash::exists' => 
  array (
    0 => 'bool',
    'key' => 'int',
  ),
  'quickhashinthash::get' => 
  array (
    0 => 'int',
    'key' => 'int',
  ),
  'quickhashinthash::getsize' => 
  array (
    0 => 'int',
  ),
  'quickhashinthash::loadfromfile' => 
  array (
    0 => 'QuickHashIntHash',
    'filename' => 'string',
    'options=' => 'int',
  ),
  'quickhashinthash::loadfromstring' => 
  array (
    0 => 'QuickHashIntHash',
    'contents' => 'string',
    'options=' => 'int',
  ),
  'quickhashinthash::savetofile' => 
  array (
    0 => 'void',
    'filename' => 'string',
  ),
  'quickhashinthash::savetostring' => 
  array (
    0 => 'string',
  ),
  'quickhashinthash::set' => 
  array (
    0 => 'bool',
    'key' => 'int',
    'value' => 'int',
  ),
  'quickhashinthash::update' => 
  array (
    0 => 'bool',
    'key' => 'int',
    'value' => 'int',
  ),
  'quickhashintset::__construct' => 
  array (
    0 => 'void',
    'size' => 'int',
    'options=' => 'int',
  ),
  'quickhashintset::add' => 
  array (
    0 => 'bool',
    'key' => 'int',
  ),
  'quickhashintset::delete' => 
  array (
    0 => 'bool',
    'key' => 'int',
  ),
  'quickhashintset::exists' => 
  array (
    0 => 'bool',
    'key' => 'int',
  ),
  'quickhashintset::getsize' => 
  array (
    0 => 'int',
  ),
  'quickhashintset::loadfromfile' => 
  array (
    0 => 'QuickHashIntSet',
    'filename' => 'string',
    'size=' => 'int',
    'options=' => 'int',
  ),
  'quickhashintset::loadfromstring' => 
  array (
    0 => 'QuickHashIntSet',
    'contents' => 'string',
    'size=' => 'int',
    'options=' => 'int',
  ),
  'quickhashintset::savetofile' => 
  array (
    0 => 'void',
    'filename' => 'string',
  ),
  'quickhashintset::savetostring' => 
  array (
    0 => 'string',
  ),
  'quickhashintstringhash::__construct' => 
  array (
    0 => 'void',
    'size' => 'int',
    'options=' => 'int',
  ),
  'quickhashintstringhash::add' => 
  array (
    0 => 'bool',
    'key' => 'int',
    'value' => 'string',
  ),
  'quickhashintstringhash::delete' => 
  array (
    0 => 'bool',
    'key' => 'int',
  ),
  'quickhashintstringhash::exists' => 
  array (
    0 => 'bool',
    'key' => 'int',
  ),
  'quickhashintstringhash::get' => 
  array (
    0 => 'mixed',
    'key' => 'int',
  ),
  'quickhashintstringhash::getsize' => 
  array (
    0 => 'int',
  ),
  'quickhashintstringhash::loadfromfile' => 
  array (
    0 => 'QuickHashIntStringHash',
    'filename' => 'string',
    'size=' => 'int',
    'options=' => 'int',
  ),
  'quickhashintstringhash::loadfromstring' => 
  array (
    0 => 'QuickHashIntStringHash',
    'contents' => 'string',
    'size=' => 'int',
    'options=' => 'int',
  ),
  'quickhashintstringhash::savetofile' => 
  array (
    0 => 'void',
    'filename' => 'string',
  ),
  'quickhashintstringhash::savetostring' => 
  array (
    0 => 'string',
  ),
  'quickhashintstringhash::set' => 
  array (
    0 => 'int',
    'key' => 'int',
    'value' => 'string',
  ),
  'quickhashintstringhash::update' => 
  array (
    0 => 'bool',
    'key' => 'int',
    'value' => 'string',
  ),
  'quickhashstringinthash::__construct' => 
  array (
    0 => 'void',
    'size' => 'int',
    'options=' => 'int',
  ),
  'quickhashstringinthash::add' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'int',
  ),
  'quickhashstringinthash::delete' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'quickhashstringinthash::exists' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'quickhashstringinthash::get' => 
  array (
    0 => 'mixed',
    'key' => 'string',
  ),
  'quickhashstringinthash::getsize' => 
  array (
    0 => 'int',
  ),
  'quickhashstringinthash::loadfromfile' => 
  array (
    0 => 'QuickHashStringIntHash',
    'filename' => 'string',
    'size=' => 'int',
    'options=' => 'int',
  ),
  'quickhashstringinthash::loadfromstring' => 
  array (
    0 => 'QuickHashStringIntHash',
    'contents' => 'string',
    'size=' => 'int',
    'options=' => 'int',
  ),
  'quickhashstringinthash::savetofile' => 
  array (
    0 => 'void',
    'filename' => 'string',
  ),
  'quickhashstringinthash::savetostring' => 
  array (
    0 => 'string',
  ),
  'quickhashstringinthash::set' => 
  array (
    0 => 'int',
    'key' => 'string',
    'value' => 'int',
  ),
  'quickhashstringinthash::update' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'int',
  ),
  'quoted_printable_decode' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'quoted_printable_encode' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'quotemeta' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'rad2deg' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'radius_acct_open' => 
  array (
    0 => 'false|resource',
  ),
  'radius_add_server' => 
  array (
    0 => 'bool',
    'radius_handle' => 'resource',
    'hostname' => 'string',
    'port' => 'int',
    'secret' => 'string',
    'timeout' => 'int',
    'max_tries' => 'int',
  ),
  'radius_auth_open' => 
  array (
    0 => 'false|resource',
  ),
  'radius_close' => 
  array (
    0 => 'bool',
    'radius_handle' => 'resource',
  ),
  'radius_config' => 
  array (
    0 => 'bool',
    'radius_handle' => 'resource',
    'file' => 'string',
  ),
  'radius_create_request' => 
  array (
    0 => 'bool',
    'radius_handle' => 'resource',
    'type' => 'int',
  ),
  'radius_cvt_addr' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'radius_cvt_int' => 
  array (
    0 => 'int',
    'data' => 'string',
  ),
  'radius_cvt_string' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'radius_demangle' => 
  array (
    0 => 'string',
    'radius_handle' => 'resource',
    'mangled' => 'string',
  ),
  'radius_demangle_mppe_key' => 
  array (
    0 => 'string',
    'radius_handle' => 'resource',
    'mangled' => 'string',
  ),
  'radius_get_attr' => 
  array (
    0 => 'mixed',
    'radius_handle' => 'resource',
  ),
  'radius_get_tagged_attr_data' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'radius_get_tagged_attr_tag' => 
  array (
    0 => 'int',
    'data' => 'string',
  ),
  'radius_get_vendor_attr' => 
  array (
    0 => 'array<array-key, mixed>',
    'data' => 'string',
  ),
  'radius_put_addr' => 
  array (
    0 => 'bool',
    'radius_handle' => 'resource',
    'type' => 'int',
    'addr' => 'string',
  ),
  'radius_put_attr' => 
  array (
    0 => 'bool',
    'radius_handle' => 'resource',
    'type' => 'int',
    'value' => 'string',
  ),
  'radius_put_int' => 
  array (
    0 => 'bool',
    'radius_handle' => 'resource',
    'type' => 'int',
    'value' => 'int',
  ),
  'radius_put_string' => 
  array (
    0 => 'bool',
    'radius_handle' => 'resource',
    'type' => 'int',
    'value' => 'string',
  ),
  'radius_put_vendor_addr' => 
  array (
    0 => 'bool',
    'radius_handle' => 'resource',
    'vendor' => 'int',
    'type' => 'int',
    'addr' => 'string',
  ),
  'radius_put_vendor_attr' => 
  array (
    0 => 'bool',
    'radius_handle' => 'resource',
    'vendor' => 'int',
    'type' => 'int',
    'value' => 'string',
  ),
  'radius_put_vendor_int' => 
  array (
    0 => 'bool',
    'radius_handle' => 'resource',
    'vendor' => 'int',
    'type' => 'int',
    'value' => 'int',
  ),
  'radius_put_vendor_string' => 
  array (
    0 => 'bool',
    'radius_handle' => 'resource',
    'vendor' => 'int',
    'type' => 'int',
    'value' => 'string',
  ),
  'radius_request_authenticator' => 
  array (
    0 => 'string',
    'radius_handle' => 'resource',
  ),
  'radius_salt_encrypt_attr' => 
  array (
    0 => 'string',
    'radius_handle' => 'resource',
    'data' => 'string',
  ),
  'radius_send_request' => 
  array (
    0 => 'false|int',
    'radius_handle' => 'resource',
  ),
  'radius_server_secret' => 
  array (
    0 => 'string',
    'radius_handle' => 'resource',
  ),
  'radius_strerror' => 
  array (
    0 => 'string',
    'radius_handle' => 'resource',
  ),
  'rand' => 
  array (
    0 => 'int',
    'min=' => 'int',
    'max=' => 'int',
  ),
  'rand\'1' => 
  array (
    0 => 'int',
  ),
  'random_bytes' => 
  array (
    0 => 'non-empty-string',
    'length' => 'int<1, max>',
  ),
  'random_int' => 
  array (
    0 => 'int',
    'min' => 'int',
    'max' => 'int',
  ),
  'range' => 
  array (
    0 => 'non-empty-array<array-key, mixed>',
    'start' => 'float|int|string',
    'end' => 'float|int|string',
    'step=' => 'float|int<1, max>',
  ),
  'rangeexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'rangeexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'rangeexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'rangeexception::getcode' => 
  array (
    0 => 'int',
  ),
  'rangeexception::getfile' => 
  array (
    0 => 'string',
  ),
  'rangeexception::getline' => 
  array (
    0 => 'int',
  ),
  'rangeexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'rangeexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'rangeexception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'rangeexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'rar_allow_broken_set' => 
  array (
    0 => 'bool',
    'rarfile' => 'RarArchive',
    'allow_broken' => 'bool',
  ),
  'rar_broken_is' => 
  array (
    0 => 'bool',
    'rarfile' => 'rararchive',
  ),
  'rar_close' => 
  array (
    0 => 'bool',
    'rarfile' => 'rararchive',
  ),
  'rar_comment_get' => 
  array (
    0 => 'string',
    'rarfile' => 'rararchive',
  ),
  'rar_entry_get' => 
  array (
    0 => 'RarEntry',
    'rarfile' => 'RarArchive',
    'entryname' => 'string',
  ),
  'rar_list' => 
  array (
    0 => 'RarArchive',
    'rarfile' => 'rararchive',
  ),
  'rar_open' => 
  array (
    0 => 'RarArchive',
    'filename' => 'string',
    'password=' => 'string',
    'volume_callback=' => 'callable',
  ),
  'rar_solid_is' => 
  array (
    0 => 'bool',
    'rarfile' => 'rararchive',
  ),
  'rar_wrapper_cache_stats' => 
  array (
    0 => 'string',
  ),
  'rararchive::__tostring' => 
  array (
    0 => 'string',
  ),
  'rararchive::close' => 
  array (
    0 => 'bool',
  ),
  'rararchive::getcomment' => 
  array (
    0 => 'null|string',
  ),
  'rararchive::getentries' => 
  array (
    0 => 'array<array-key, RarEntry>|false',
  ),
  'rararchive::getentry' => 
  array (
    0 => 'RarEntry|false',
    'entryname' => 'string',
  ),
  'rararchive::isbroken' => 
  array (
    0 => 'bool',
  ),
  'rararchive::issolid' => 
  array (
    0 => 'bool',
  ),
  'rararchive::open' => 
  array (
    0 => 'RarArchive|false',
    'filename' => 'string',
    'password=' => 'string',
    'volume_callback=' => 'callable',
  ),
  'rararchive::setallowbroken' => 
  array (
    0 => 'bool',
    'allow_broken' => 'bool',
  ),
  'rarentry::__tostring' => 
  array (
    0 => 'string',
  ),
  'rarentry::extract' => 
  array (
    0 => 'bool',
    'dir' => 'string',
    'filepath=' => 'string',
    'password=' => 'string',
    'extended_data=' => 'bool',
  ),
  'rarentry::getattr' => 
  array (
    0 => 'false|int',
  ),
  'rarentry::getcrc' => 
  array (
    0 => 'false|string',
  ),
  'rarentry::getfiletime' => 
  array (
    0 => 'false|string',
  ),
  'rarentry::gethostos' => 
  array (
    0 => 'false|int',
  ),
  'rarentry::getmethod' => 
  array (
    0 => 'false|int',
  ),
  'rarentry::getname' => 
  array (
    0 => 'false|string',
  ),
  'rarentry::getpackedsize' => 
  array (
    0 => 'false|int',
  ),
  'rarentry::getstream' => 
  array (
    0 => 'false|resource',
    'password=' => 'string',
  ),
  'rarentry::getunpackedsize' => 
  array (
    0 => 'false|int',
  ),
  'rarentry::getversion' => 
  array (
    0 => 'false|int',
  ),
  'rarentry::isdirectory' => 
  array (
    0 => 'bool',
  ),
  'rarentry::isencrypted' => 
  array (
    0 => 'bool',
  ),
  'rarexception::getcode' => 
  array (
    0 => 'int',
  ),
  'rarexception::getfile' => 
  array (
    0 => 'string',
  ),
  'rarexception::getline' => 
  array (
    0 => 'int',
  ),
  'rarexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'rarexception::getprevious' => 
  array (
    0 => 'Exception|Throwable',
  ),
  'rarexception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'rarexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'rarexception::isusingexceptions' => 
  array (
    0 => 'bool',
  ),
  'rarexception::setusingexceptions' => 
  array (
    0 => 'RarEntry',
    'using_exceptions' => 'bool',
  ),
  'rawurldecode' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'rawurlencode' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'readdir' => 
  array (
    0 => 'false|string',
    'dir_handle=' => 'resource',
  ),
  'readfile' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
    'use_include_path=' => 'bool',
    'context=' => 'resource',
  ),
  'readgzfile' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
    'use_include_path=' => 'int',
  ),
  'readline' => 
  array (
    0 => 'false|string',
    'prompt=' => 'null|string',
  ),
  'readline_add_history' => 
  array (
    0 => 'bool',
    'prompt' => 'string',
  ),
  'readline_callback_handler_install' => 
  array (
    0 => 'bool',
    'prompt' => 'string',
    'callback' => 'callable',
  ),
  'readline_callback_handler_remove' => 
  array (
    0 => 'bool',
  ),
  'readline_callback_read_char' => 
  array (
    0 => 'void',
  ),
  'readline_clear_history' => 
  array (
    0 => 'bool',
  ),
  'readline_completion_function' => 
  array (
    0 => 'bool',
    'callback' => 'callable',
  ),
  'readline_info' => 
  array (
    0 => 'mixed',
    'var_name=' => 'null|string',
    'value=' => 'bool|int|null|string',
  ),
  'readline_list_history' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'readline_on_new_line' => 
  array (
    0 => 'void',
  ),
  'readline_read_history' => 
  array (
    0 => 'bool',
    'filename=' => 'null|string',
  ),
  'readline_redisplay' => 
  array (
    0 => 'void',
  ),
  'readline_write_history' => 
  array (
    0 => 'bool',
    'filename=' => 'null|string',
  ),
  'readlink' => 
  array (
    0 => 'false|non-falsy-string',
    'path' => 'string',
  ),
  'realpath' => 
  array (
    0 => 'false|non-falsy-string',
    'path' => 'string',
  ),
  'realpath_cache_get' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'realpath_cache_size' => 
  array (
    0 => 'int',
  ),
  'recode' => 
  array (
    0 => 'string',
    'request' => 'string',
    'string' => 'string',
  ),
  'recode_file' => 
  array (
    0 => 'bool',
    'request' => 'string',
    'input' => 'resource',
    'output' => 'resource',
  ),
  'recode_string' => 
  array (
    0 => 'false|string',
    'request' => 'string',
    'string' => 'string',
  ),
  'rectobj::__construct' => 
  array (
    0 => 'void',
  ),
  'rectobj::draw' => 
  array (
    0 => 'int',
    'map' => 'mapObj',
    'layer' => 'layerObj',
    'img' => 'imageObj',
    'class_index' => 'int',
    'text' => 'string',
  ),
  'rectobj::fit' => 
  array (
    0 => 'float',
    'width' => 'int',
    'height' => 'int',
  ),
  'rectobj::ms_newrectobj' => 
  array (
    0 => 'rectObj',
  ),
  'rectobj::project' => 
  array (
    0 => 'int',
    'in' => 'projectionObj',
    'out' => 'projectionObj',
  ),
  'rectobj::set' => 
  array (
    0 => 'int',
    'property_name' => 'string',
    'new_value' => 'mixed',
  ),
  'rectobj::setextent' => 
  array (
    0 => 'void',
    'minx' => 'float',
    'miny' => 'float',
    'maxx' => 'float',
    'maxy' => 'float',
  ),
  'recursivearrayiterator::__construct' => 
  array (
    0 => 'void',
    'array=' => 'array<array-key, mixed>|object',
    'flags=' => 'int',
  ),
  'recursivearrayiterator::__debuginfo' => 
  array (
    0 => 'mixed',
  ),
  'recursivearrayiterator::__serialize' => 
  array (
    0 => 'mixed',
  ),
  'recursivearrayiterator::__unserialize' => 
  array (
    0 => 'mixed',
    'data' => 'array<array-key, mixed>',
  ),
  'recursivearrayiterator::append' => 
  array (
    0 => 'void',
    'value' => 'mixed',
  ),
  'recursivearrayiterator::asort' => 
  array (
    0 => 'true',
    'flags=' => 'int',
  ),
  'recursivearrayiterator::count' => 
  array (
    0 => 'int',
  ),
  'recursivearrayiterator::current' => 
  array (
    0 => 'mixed',
  ),
  'recursivearrayiterator::getarraycopy' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'recursivearrayiterator::getchildren' => 
  array (
    0 => 'RecursiveArrayIterator|null',
  ),
  'recursivearrayiterator::getflags' => 
  array (
    0 => 'int',
  ),
  'recursivearrayiterator::haschildren' => 
  array (
    0 => 'bool',
  ),
  'recursivearrayiterator::key' => 
  array (
    0 => 'int|null|string',
  ),
  'recursivearrayiterator::ksort' => 
  array (
    0 => 'true',
    'flags=' => 'int',
  ),
  'recursivearrayiterator::natcasesort' => 
  array (
    0 => 'true',
  ),
  'recursivearrayiterator::natsort' => 
  array (
    0 => 'true',
  ),
  'recursivearrayiterator::next' => 
  array (
    0 => 'void',
  ),
  'recursivearrayiterator::offsetexists' => 
  array (
    0 => 'bool',
    'key' => 'int|string',
  ),
  'recursivearrayiterator::offsetget' => 
  array (
    0 => 'mixed',
    'key' => 'int|string',
  ),
  'recursivearrayiterator::offsetset' => 
  array (
    0 => 'void',
    'key' => 'int|null|string',
    'value' => 'string',
  ),
  'recursivearrayiterator::offsetunset' => 
  array (
    0 => 'void',
    'key' => 'int|string',
  ),
  'recursivearrayiterator::rewind' => 
  array (
    0 => 'void',
  ),
  'recursivearrayiterator::seek' => 
  array (
    0 => 'void',
    'offset' => 'int',
  ),
  'recursivearrayiterator::serialize' => 
  array (
    0 => 'string',
  ),
  'recursivearrayiterator::setflags' => 
  array (
    0 => 'void',
    'flags' => 'int',
  ),
  'recursivearrayiterator::uasort' => 
  array (
    0 => 'true',
    'callback' => 'callable(mixed, mixed):int',
  ),
  'recursivearrayiterator::uksort' => 
  array (
    0 => 'true',
    'callback' => 'callable(mixed, mixed):int',
  ),
  'recursivearrayiterator::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'recursivearrayiterator::valid' => 
  array (
    0 => 'bool',
  ),
  'recursivecachingiterator::__construct' => 
  array (
    0 => 'void',
    'iterator' => 'Iterator',
    'flags=' => 'int',
  ),
  'recursivecachingiterator::__tostring' => 
  array (
    0 => 'string',
  ),
  'recursivecachingiterator::count' => 
  array (
    0 => 'int',
  ),
  'recursivecachingiterator::current' => 
  array (
    0 => 'void',
  ),
  'recursivecachingiterator::getcache' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'recursivecachingiterator::getchildren' => 
  array (
    0 => 'RecursiveCachingIterator|null',
  ),
  'recursivecachingiterator::getflags' => 
  array (
    0 => 'int',
  ),
  'recursivecachingiterator::getinneriterator' => 
  array (
    0 => 'Iterator',
  ),
  'recursivecachingiterator::haschildren' => 
  array (
    0 => 'bool',
  ),
  'recursivecachingiterator::hasnext' => 
  array (
    0 => 'bool',
  ),
  'recursivecachingiterator::key' => 
  array (
    0 => 'scalar',
  ),
  'recursivecachingiterator::next' => 
  array (
    0 => 'void',
  ),
  'recursivecachingiterator::offsetexists' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'recursivecachingiterator::offsetget' => 
  array (
    0 => 'string',
    'key' => 'string',
  ),
  'recursivecachingiterator::offsetset' => 
  array (
    0 => 'void',
    'key' => 'string',
    'value' => 'string',
  ),
  'recursivecachingiterator::offsetunset' => 
  array (
    0 => 'void',
    'key' => 'string',
  ),
  'recursivecachingiterator::rewind' => 
  array (
    0 => 'void',
  ),
  'recursivecachingiterator::setflags' => 
  array (
    0 => 'void',
    'flags' => 'int',
  ),
  'recursivecachingiterator::valid' => 
  array (
    0 => 'bool',
  ),
  'recursivecallbackfilteriterator::__construct' => 
  array (
    0 => 'void',
    'iterator' => 'RecursiveIterator',
    'callback' => 'callable(mixed, mixed=, mixed=):bool',
  ),
  'recursivecallbackfilteriterator::accept' => 
  array (
    0 => 'bool',
  ),
  'recursivecallbackfilteriterator::current' => 
  array (
    0 => 'mixed',
  ),
  'recursivecallbackfilteriterator::getchildren' => 
  array (
    0 => 'RecursiveCallbackFilterIterator',
  ),
  'recursivecallbackfilteriterator::getinneriterator' => 
  array (
    0 => 'Iterator',
  ),
  'recursivecallbackfilteriterator::haschildren' => 
  array (
    0 => 'bool',
  ),
  'recursivecallbackfilteriterator::key' => 
  array (
    0 => 'scalar',
  ),
  'recursivecallbackfilteriterator::next' => 
  array (
    0 => 'void',
  ),
  'recursivecallbackfilteriterator::rewind' => 
  array (
    0 => 'void',
  ),
  'recursivecallbackfilteriterator::valid' => 
  array (
    0 => 'bool',
  ),
  'recursivedirectoryiterator::__construct' => 
  array (
    0 => 'void',
    'directory' => 'string',
    'flags=' => 'int',
  ),
  'recursivedirectoryiterator::__debuginfo' => 
  array (
    0 => 'mixed',
  ),
  'recursivedirectoryiterator::__tostring' => 
  array (
    0 => 'string',
  ),
  'recursivedirectoryiterator::_bad_state_ex' => 
  array (
    0 => 'mixed',
  ),
  'recursivedirectoryiterator::current' => 
  array (
    0 => 'FilesystemIterator|SplFileInfo|string',
  ),
  'recursivedirectoryiterator::getatime' => 
  array (
    0 => 'int',
  ),
  'recursivedirectoryiterator::getbasename' => 
  array (
    0 => 'string',
    'suffix=' => 'string',
  ),
  'recursivedirectoryiterator::getchildren' => 
  array (
    0 => 'RecursiveDirectoryIterator',
  ),
  'recursivedirectoryiterator::getctime' => 
  array (
    0 => 'int',
  ),
  'recursivedirectoryiterator::getextension' => 
  array (
    0 => 'string',
  ),
  'recursivedirectoryiterator::getfileinfo' => 
  array (
    0 => 'SplFileInfo',
    'class=' => 'class-string|null',
  ),
  'recursivedirectoryiterator::getfilename' => 
  array (
    0 => 'string',
  ),
  'recursivedirectoryiterator::getflags' => 
  array (
    0 => 'int',
  ),
  'recursivedirectoryiterator::getgroup' => 
  array (
    0 => 'int',
  ),
  'recursivedirectoryiterator::getinode' => 
  array (
    0 => 'int',
  ),
  'recursivedirectoryiterator::getlinktarget' => 
  array (
    0 => 'string',
  ),
  'recursivedirectoryiterator::getmtime' => 
  array (
    0 => 'int',
  ),
  'recursivedirectoryiterator::getowner' => 
  array (
    0 => 'int',
  ),
  'recursivedirectoryiterator::getpath' => 
  array (
    0 => 'string',
  ),
  'recursivedirectoryiterator::getpathinfo' => 
  array (
    0 => 'SplFileInfo|null',
    'class=' => 'class-string|null',
  ),
  'recursivedirectoryiterator::getpathname' => 
  array (
    0 => 'string',
  ),
  'recursivedirectoryiterator::getperms' => 
  array (
    0 => 'int',
  ),
  'recursivedirectoryiterator::getrealpath' => 
  array (
    0 => 'non-falsy-string',
  ),
  'recursivedirectoryiterator::getsize' => 
  array (
    0 => 'int',
  ),
  'recursivedirectoryiterator::getsubpath' => 
  array (
    0 => 'string',
  ),
  'recursivedirectoryiterator::getsubpathname' => 
  array (
    0 => 'string',
  ),
  'recursivedirectoryiterator::gettype' => 
  array (
    0 => 'string',
  ),
  'recursivedirectoryiterator::haschildren' => 
  array (
    0 => 'bool',
    'allowLinks=' => 'bool',
  ),
  'recursivedirectoryiterator::isdir' => 
  array (
    0 => 'bool',
  ),
  'recursivedirectoryiterator::isdot' => 
  array (
    0 => 'bool',
  ),
  'recursivedirectoryiterator::isexecutable' => 
  array (
    0 => 'bool',
  ),
  'recursivedirectoryiterator::isfile' => 
  array (
    0 => 'bool',
  ),
  'recursivedirectoryiterator::islink' => 
  array (
    0 => 'bool',
  ),
  'recursivedirectoryiterator::isreadable' => 
  array (
    0 => 'bool',
  ),
  'recursivedirectoryiterator::iswritable' => 
  array (
    0 => 'bool',
  ),
  'recursivedirectoryiterator::key' => 
  array (
    0 => 'string',
  ),
  'recursivedirectoryiterator::next' => 
  array (
    0 => 'void',
  ),
  'recursivedirectoryiterator::openfile' => 
  array (
    0 => 'SplFileObject',
    'mode=' => 'string',
    'useIncludePath=' => 'bool',
    'context=' => 'null|resource',
  ),
  'recursivedirectoryiterator::rewind' => 
  array (
    0 => 'void',
  ),
  'recursivedirectoryiterator::seek' => 
  array (
    0 => 'void',
    'offset' => 'int',
  ),
  'recursivedirectoryiterator::setfileclass' => 
  array (
    0 => 'void',
    'class=' => 'class-string',
  ),
  'recursivedirectoryiterator::setflags' => 
  array (
    0 => 'void',
    'flags' => 'int',
  ),
  'recursivedirectoryiterator::setinfoclass' => 
  array (
    0 => 'void',
    'class=' => 'class-string',
  ),
  'recursivedirectoryiterator::valid' => 
  array (
    0 => 'bool',
  ),
  'recursivefilteriterator::__construct' => 
  array (
    0 => 'void',
    'iterator' => 'RecursiveIterator',
  ),
  'recursivefilteriterator::accept' => 
  array (
    0 => 'bool',
  ),
  'recursivefilteriterator::current' => 
  array (
    0 => 'mixed',
  ),
  'recursivefilteriterator::getchildren' => 
  array (
    0 => 'RecursiveFilterIterator|null',
  ),
  'recursivefilteriterator::getinneriterator' => 
  array (
    0 => 'Iterator',
  ),
  'recursivefilteriterator::haschildren' => 
  array (
    0 => 'bool',
  ),
  'recursivefilteriterator::key' => 
  array (
    0 => 'mixed',
  ),
  'recursivefilteriterator::next' => 
  array (
    0 => 'void',
  ),
  'recursivefilteriterator::rewind' => 
  array (
    0 => 'void',
  ),
  'recursivefilteriterator::valid' => 
  array (
    0 => 'bool',
  ),
  'recursiveiterator::__construct' => 
  array (
    0 => 'void',
  ),
  'recursiveiterator::current' => 
  array (
    0 => 'mixed',
  ),
  'recursiveiterator::getchildren' => 
  array (
    0 => 'RecursiveIterator|null',
  ),
  'recursiveiterator::haschildren' => 
  array (
    0 => 'bool',
  ),
  'recursiveiterator::key' => 
  array (
    0 => 'int|string',
  ),
  'recursiveiterator::next' => 
  array (
    0 => 'void',
  ),
  'recursiveiterator::rewind' => 
  array (
    0 => 'void',
  ),
  'recursiveiterator::valid' => 
  array (
    0 => 'bool',
  ),
  'recursiveiteratoriterator::__construct' => 
  array (
    0 => 'void',
    'iterator' => 'IteratorAggregate|RecursiveIterator',
    'mode=' => 'int',
    'flags=' => 'int',
  ),
  'recursiveiteratoriterator::beginchildren' => 
  array (
    0 => 'void',
  ),
  'recursiveiteratoriterator::beginiteration' => 
  array (
    0 => 'void',
  ),
  'recursiveiteratoriterator::callgetchildren' => 
  array (
    0 => 'RecursiveIterator|null',
  ),
  'recursiveiteratoriterator::callhaschildren' => 
  array (
    0 => 'bool',
  ),
  'recursiveiteratoriterator::current' => 
  array (
    0 => 'mixed',
  ),
  'recursiveiteratoriterator::endchildren' => 
  array (
    0 => 'void',
  ),
  'recursiveiteratoriterator::enditeration' => 
  array (
    0 => 'void',
  ),
  'recursiveiteratoriterator::getdepth' => 
  array (
    0 => 'int',
  ),
  'recursiveiteratoriterator::getinneriterator' => 
  array (
    0 => 'RecursiveIterator',
  ),
  'recursiveiteratoriterator::getmaxdepth' => 
  array (
    0 => 'false|int',
  ),
  'recursiveiteratoriterator::getsubiterator' => 
  array (
    0 => 'RecursiveIterator|null',
    'level=' => 'int|null',
  ),
  'recursiveiteratoriterator::key' => 
  array (
    0 => 'mixed',
  ),
  'recursiveiteratoriterator::next' => 
  array (
    0 => 'void',
  ),
  'recursiveiteratoriterator::nextelement' => 
  array (
    0 => 'void',
  ),
  'recursiveiteratoriterator::rewind' => 
  array (
    0 => 'void',
  ),
  'recursiveiteratoriterator::setmaxdepth' => 
  array (
    0 => 'void',
    'maxDepth=' => 'int',
  ),
  'recursiveiteratoriterator::valid' => 
  array (
    0 => 'bool',
  ),
  'recursiveregexiterator::__construct' => 
  array (
    0 => 'void',
    'iterator' => 'RecursiveIterator',
    'pattern' => 'string',
    'mode=' => 'int',
    'flags=' => 'int',
    'pregFlags=' => 'int',
  ),
  'recursiveregexiterator::accept' => 
  array (
    0 => 'bool',
  ),
  'recursiveregexiterator::current' => 
  array (
    0 => 'mixed',
  ),
  'recursiveregexiterator::getchildren' => 
  array (
    0 => 'RecursiveRegexIterator',
  ),
  'recursiveregexiterator::getflags' => 
  array (
    0 => 'int',
  ),
  'recursiveregexiterator::getinneriterator' => 
  array (
    0 => 'Iterator',
  ),
  'recursiveregexiterator::getmode' => 
  array (
    0 => 'int',
  ),
  'recursiveregexiterator::getpregflags' => 
  array (
    0 => 'int',
  ),
  'recursiveregexiterator::getregex' => 
  array (
    0 => 'string',
  ),
  'recursiveregexiterator::haschildren' => 
  array (
    0 => 'bool',
  ),
  'recursiveregexiterator::key' => 
  array (
    0 => 'mixed',
  ),
  'recursiveregexiterator::next' => 
  array (
    0 => 'void',
  ),
  'recursiveregexiterator::rewind' => 
  array (
    0 => 'void',
  ),
  'recursiveregexiterator::setflags' => 
  array (
    0 => 'void',
    'flags' => 'int',
  ),
  'recursiveregexiterator::setmode' => 
  array (
    0 => 'void',
    'mode' => 'int',
  ),
  'recursiveregexiterator::setpregflags' => 
  array (
    0 => 'void',
    'pregFlags' => 'int',
  ),
  'recursiveregexiterator::valid' => 
  array (
    0 => 'bool',
  ),
  'recursivetreeiterator::__construct' => 
  array (
    0 => 'void',
    'iterator' => 'IteratorAggregate|RecursiveIterator',
    'flags=' => 'int',
    'cachingIteratorFlags=' => 'int',
    'mode=' => 'int',
  ),
  'recursivetreeiterator::beginchildren' => 
  array (
    0 => 'void',
  ),
  'recursivetreeiterator::beginiteration' => 
  array (
    0 => 'void',
  ),
  'recursivetreeiterator::callgetchildren' => 
  array (
    0 => 'RecursiveIterator|null',
  ),
  'recursivetreeiterator::callhaschildren' => 
  array (
    0 => 'bool',
  ),
  'recursivetreeiterator::current' => 
  array (
    0 => 'string',
  ),
  'recursivetreeiterator::endchildren' => 
  array (
    0 => 'void',
  ),
  'recursivetreeiterator::enditeration' => 
  array (
    0 => 'void',
  ),
  'recursivetreeiterator::getdepth' => 
  array (
    0 => 'int',
  ),
  'recursivetreeiterator::getentry' => 
  array (
    0 => 'string',
  ),
  'recursivetreeiterator::getinneriterator' => 
  array (
    0 => 'RecursiveIterator',
  ),
  'recursivetreeiterator::getmaxdepth' => 
  array (
    0 => 'false|int',
  ),
  'recursivetreeiterator::getpostfix' => 
  array (
    0 => 'string',
  ),
  'recursivetreeiterator::getprefix' => 
  array (
    0 => 'string',
  ),
  'recursivetreeiterator::getsubiterator' => 
  array (
    0 => 'RecursiveIterator|null',
    'level=' => 'int|null',
  ),
  'recursivetreeiterator::key' => 
  array (
    0 => 'string',
  ),
  'recursivetreeiterator::next' => 
  array (
    0 => 'void',
  ),
  'recursivetreeiterator::nextelement' => 
  array (
    0 => 'void',
  ),
  'recursivetreeiterator::rewind' => 
  array (
    0 => 'void',
  ),
  'recursivetreeiterator::setmaxdepth' => 
  array (
    0 => 'void',
    'maxDepth=' => 'int',
  ),
  'recursivetreeiterator::setpostfix' => 
  array (
    0 => 'void',
    'postfix' => 'string',
  ),
  'recursivetreeiterator::setprefixpart' => 
  array (
    0 => 'void',
    'part' => 'int',
    'value' => 'string',
  ),
  'recursivetreeiterator::valid' => 
  array (
    0 => 'bool',
  ),
  'redis::__construct' => 
  array (
    0 => 'void',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'redis::__destruct' => 
  array (
    0 => 'void',
  ),
  'redis::_compress' => 
  array (
    0 => 'string',
    'value' => 'string',
  ),
  'redis::_pack' => 
  array (
    0 => 'string',
    'value' => 'mixed',
  ),
  'redis::_prefix' => 
  array (
    0 => 'string',
    'key' => 'string',
  ),
  'redis::_serialize' => 
  array (
    0 => 'string',
    'value' => 'mixed',
  ),
  'redis::_uncompress' => 
  array (
    0 => 'string',
    'value' => 'string',
  ),
  'redis::_unpack' => 
  array (
    0 => 'mixed',
    'value' => 'string',
  ),
  'redis::_unserialize' => 
  array (
    0 => 'mixed',
    'value' => 'string',
  ),
  'redis::acl' => 
  array (
    0 => 'mixed',
    'subcmd' => 'string',
    '...args=' => 'string',
  ),
  'redis::append' => 
  array (
    0 => 'int',
    'key' => 'string',
    'value' => 'string',
  ),
  'redis::auth' => 
  array (
    0 => 'bool',
    'credentials' => 'string',
  ),
  'redis::bgrewriteaof' => 
  array (
    0 => 'bool',
  ),
  'redis::bgsave' => 
  array (
    0 => 'bool',
  ),
  'redis::bitcount' => 
  array (
    0 => 'int',
    'key' => 'string',
    'start=' => 'int',
    'end=' => 'int',
    'bybit=' => 'bool',
  ),
  'redis::bitop' => 
  array (
    0 => 'int',
    'operation' => 'string',
    'deskey' => 'string',
    'srckey' => 'string',
    '...other_keys=' => 'string',
  ),
  'redis::bitpos' => 
  array (
    0 => 'int',
    'key' => 'string',
    'bit' => 'bool',
    'start=' => 'int',
    'end=' => 'int',
    'bybit=' => 'bool',
  ),
  'redis::blmove' => 
  array (
    0 => 'false|string',
    'src' => 'string',
    'dst' => 'string',
    'wherefrom' => 'string',
    'whereto' => 'string',
    'timeout' => 'float',
  ),
  'redis::blmpop' => 
  array (
    0 => 'array<array-key, mixed>|false|null',
    'timeout' => 'float',
    'keys' => 'array<array-key, mixed>',
    'from' => 'string',
    'count=' => 'int',
  ),
  'redis::blpop' => 
  array (
    0 => 'array<array-key, mixed>|null',
    'key_or_keys' => 'array<array-key, string>',
    'timeout_or_key' => 'int',
    '...extra_args=' => 'mixed',
  ),
  'redis::blpop\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'timeout_or_key' => 'int|string',
    '...extra_args' => 'int|string',
  ),
  'redis::brpop' => 
  array (
    0 => 'array<array-key, mixed>|null',
    'key_or_keys' => 'array<array-key, string>',
    'timeout_or_key' => 'int',
    '...extra_args=' => 'mixed',
  ),
  'redis::brpop\'1' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'timeout_or_key' => 'int|string',
    '...extra_args' => 'int|string',
  ),
  'redis::brpoplpush' => 
  array (
    0 => 'false|string',
    'src' => 'string',
    'dst' => 'string',
    'timeout' => 'int',
  ),
  'redis::bzmpop' => 
  array (
    0 => 'array<array-key, mixed>|false|null',
    'timeout' => 'float',
    'keys' => 'array<array-key, mixed>',
    'from' => 'string',
    'count=' => 'int',
  ),
  'redis::bzpopmax' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'key' => 'array<array-key, mixed>|string',
    'timeout_or_key' => 'int|string',
    '...extra_args=' => 'mixed',
  ),
  'redis::bzpopmin' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'key' => 'array<array-key, mixed>|string',
    'timeout_or_key' => 'int|string',
    '...extra_args=' => 'mixed',
  ),
  'redis::clearlasterror' => 
  array (
    0 => 'bool',
  ),
  'redis::cleartransferredbytes' => 
  array (
    0 => 'void',
  ),
  'redis::client' => 
  array (
    0 => 'mixed',
    'opt' => 'string',
    '...args=' => 'string',
  ),
  'redis::close' => 
  array (
    0 => 'bool',
  ),
  'redis::command' => 
  array (
    0 => 'mixed',
    'opt=' => 'null|string',
    '...args=' => 'mixed',
  ),
  'redis::config' => 
  array (
    0 => 'string',
    'operation' => 'string',
    'key_or_settings=' => 'null|string',
    'value=' => 'null|string',
  ),
  'redis::connect' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port=' => 'int',
    'timeout=' => 'float',
    'persistent_id=' => 'null',
    'retry_interval=' => 'int',
    'read_timeout=' => 'float',
    'context=' => 'array<array-key, mixed>|null',
  ),
  'redis::copy' => 
  array (
    0 => 'bool',
    'src' => 'string',
    'dst' => 'string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'redis::dbsize' => 
  array (
    0 => 'int',
  ),
  'redis::debug' => 
  array (
    0 => 'string',
    'key' => 'string',
  ),
  'redis::decr' => 
  array (
    0 => 'int',
    'key' => 'string',
    'by=' => 'int',
  ),
  'redis::decrby' => 
  array (
    0 => 'int',
    'key' => 'string',
    'value' => 'int',
  ),
  'redis::decrbyfloat' => 
  array (
    0 => 'float',
    'key' => 'string',
    'value' => 'float',
  ),
  'redis::del' => 
  array (
    0 => 'int',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'redis::del\'1' => 
  array (
    0 => 'int',
    'key' => 'array<array-key, string>',
  ),
  'redis::delete' => 
  array (
    0 => 'int',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'redis::delete\'1' => 
  array (
    0 => 'int',
    'key' => 'array<array-key, string>',
  ),
  'redis::discard' => 
  array (
    0 => 'bool',
  ),
  'redis::dump' => 
  array (
    0 => 'false|string',
    'key' => 'string',
  ),
  'redis::echo' => 
  array (
    0 => 'string',
    'str' => 'string',
  ),
  'redis::eval' => 
  array (
    0 => 'mixed',
    'script' => 'string',
    'args=' => 'array<array-key, mixed>',
    'num_keys=' => 'int',
  ),
  'redis::eval_ro' => 
  array (
    0 => 'mixed',
    'script_sha' => 'string',
    'args=' => 'array<array-key, mixed>',
    'num_keys=' => 'int',
  ),
  'redis::evalsha' => 
  array (
    0 => 'mixed',
    'sha1' => 'string',
    'args=' => 'array<array-key, mixed>',
    'num_keys=' => 'int',
  ),
  'redis::evalsha_ro' => 
  array (
    0 => 'mixed',
    'sha1' => 'string',
    'args=' => 'array<array-key, mixed>',
    'num_keys=' => 'int',
  ),
  'redis::exec' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'redis::exists' => 
  array (
    0 => 'int',
    'key' => 'array<array-key, string>|string',
    '...other_keys=' => 'mixed',
  ),
  'redis::exists\'1' => 
  array (
    0 => 'int',
    '...keys' => 'string',
  ),
  'redis::expire' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'timeout' => 'int',
    'mode=' => 'null|string',
  ),
  'redis::expireat' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'timestamp' => 'int',
    'mode=' => 'null|string',
  ),
  'redis::expiretime' => 
  array (
    0 => 'false|int',
    'key' => 'string',
  ),
  'redis::failover' => 
  array (
    0 => 'bool',
    'to=' => 'array<array-key, mixed>|null',
    'abort=' => 'bool',
    'timeout=' => 'int',
  ),
  'redis::fcall' => 
  array (
    0 => 'mixed',
    'fn' => 'string',
    'keys=' => 'array<array-key, mixed>',
    'args=' => 'array<array-key, mixed>',
  ),
  'redis::fcall_ro' => 
  array (
    0 => 'mixed',
    'fn' => 'string',
    'keys=' => 'array<array-key, mixed>',
    'args=' => 'array<array-key, mixed>',
  ),
  'redis::flushall' => 
  array (
    0 => 'bool',
    'sync=' => 'bool|null',
  ),
  'redis::flushdb' => 
  array (
    0 => 'bool',
    'sync=' => 'bool|null',
  ),
  'redis::function' => 
  array (
    0 => 'array<array-key, mixed>|bool|string',
    'operation' => 'string',
    '...args=' => 'mixed',
  ),
  'redis::geoadd' => 
  array (
    0 => 'int',
    'key' => 'string',
    'lng' => 'float',
    'lat' => 'float',
    'member' => 'string',
    '...other_triples_and_options=' => 'float|int|string',
  ),
  'redis::geodist' => 
  array (
    0 => 'float',
    'key' => 'string',
    'src' => 'string',
    'dst' => 'string',
    'unit=' => 'null|string',
  ),
  'redis::geohash' => 
  array (
    0 => 'array<int, string>',
    'key' => 'string',
    'member' => 'string',
    '...other_members=' => 'string',
  ),
  'redis::geopos' => 
  array (
    0 => 'array<int, array{0: string, 1: string}>',
    'key' => 'string',
    'member' => 'string',
    '...other_members=' => 'string',
  ),
  'redis::georadius' => 
  array (
    0 => 'array<int, mixed>|int',
    'key' => 'string',
    'lng' => 'float',
    'lat' => 'float',
    'radius' => 'float',
    'unit' => 'string',
    'options=' => 'array<string, mixed>',
  ),
  'redis::georadius_ro' => 
  array (
    0 => 'mixed',
    'key' => 'string',
    'lng' => 'float',
    'lat' => 'float',
    'radius' => 'float',
    'unit' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'redis::georadiusbymember' => 
  array (
    0 => 'array<int, mixed>|int',
    'key' => 'string',
    'member' => 'string',
    'radius' => 'float',
    'unit' => 'string',
    'options=' => 'array<string, mixed>',
  ),
  'redis::georadiusbymember_ro' => 
  array (
    0 => 'mixed',
    'key' => 'string',
    'member' => 'string',
    'radius' => 'float',
    'unit' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'redis::geosearch' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'position' => 'array<array-key, mixed>|string',
    'shape' => 'array<array-key, mixed>|float|int',
    'unit' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'redis::geosearchstore' => 
  array (
    0 => 'array<array-key, mixed>|false|int',
    'dst' => 'string',
    'src' => 'string',
    'position' => 'array<array-key, mixed>|string',
    'shape' => 'array<array-key, mixed>|float|int',
    'unit' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'redis::get' => 
  array (
    0 => 'false|string',
    'key' => 'string',
  ),
  'redis::getauth' => 
  array (
    0 => 'false|null|string',
  ),
  'redis::getbit' => 
  array (
    0 => 'int',
    'key' => 'string',
    'idx' => 'int',
  ),
  'redis::getdbnum' => 
  array (
    0 => 'int',
  ),
  'redis::getdel' => 
  array (
    0 => 'bool|string',
    'key' => 'string',
  ),
  'redis::getex' => 
  array (
    0 => 'bool|string',
    'key' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'redis::gethost' => 
  array (
    0 => 'string',
  ),
  'redis::getlasterror' => 
  array (
    0 => 'null|string',
  ),
  'redis::getmode' => 
  array (
    0 => 'int',
  ),
  'redis::getoption' => 
  array (
    0 => 'int',
    'option' => 'int',
  ),
  'redis::getpersistentid' => 
  array (
    0 => 'null|string',
  ),
  'redis::getport' => 
  array (
    0 => 'int',
  ),
  'redis::getrange' => 
  array (
    0 => 'false|string',
    'key' => 'string',
    'start' => 'int',
    'end' => 'int',
  ),
  'redis::getreadtimeout' => 
  array (
    0 => 'float',
  ),
  'redis::getset' => 
  array (
    0 => 'string',
    'key' => 'string',
    'value' => 'string',
  ),
  'redis::gettimeout' => 
  array (
    0 => 'false|float',
  ),
  'redis::gettransferredbytes' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'redis::hdel' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'field' => 'string',
    '...other_fields=' => 'string',
  ),
  'redis::hexists' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'field' => 'string',
  ),
  'redis::hget' => 
  array (
    0 => 'false|string',
    'key' => 'string',
    'member' => 'string',
  ),
  'redis::hgetall' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
  ),
  'redis::hincrby' => 
  array (
    0 => 'int',
    'key' => 'string',
    'field' => 'string',
    'value' => 'int',
  ),
  'redis::hincrbyfloat' => 
  array (
    0 => 'float',
    'key' => 'string',
    'field' => 'string',
    'value' => 'float',
  ),
  'redis::hkeys' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
  ),
  'redis::hlen' => 
  array (
    0 => 'false|int',
    'key' => 'string',
  ),
  'redis::hmget' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'fields' => 'array<array-key, mixed>',
  ),
  'redis::hmset' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'fieldvals' => 'array<array-key, mixed>',
  ),
  'redis::hrandfield' => 
  array (
    0 => 'array<array-key, mixed>|false|string',
    'key' => 'string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'redis::hscan' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    '&iterator' => 'int|null',
    'pattern=' => 'null|string',
    'count=' => 'int',
  ),
  'redis::hset' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    '...fields_and_vals=' => 'string',
  ),
  'redis::hsetnx' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'field' => 'string',
    'value' => 'string',
  ),
  'redis::hstrlen' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'field' => 'string',
  ),
  'redis::hvals' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
  ),
  'redis::incr' => 
  array (
    0 => 'int',
    'key' => 'string',
    'by=' => 'int',
  ),
  'redis::incrby' => 
  array (
    0 => 'int',
    'key' => 'string',
    'value' => 'int',
  ),
  'redis::incrbyfloat' => 
  array (
    0 => 'float',
    'key' => 'string',
    'value' => 'float',
  ),
  'redis::info' => 
  array (
    0 => 'array<array-key, mixed>',
    '...sections=' => 'string',
  ),
  'redis::isconnected' => 
  array (
    0 => 'bool',
  ),
  'redis::keys' => 
  array (
    0 => 'array<int, string>',
    'pattern' => 'string',
  ),
  'redis::lastsave' => 
  array (
    0 => 'int',
  ),
  'redis::lcs' => 
  array (
    0 => 'array<array-key, mixed>|false|int|string',
    'key1' => 'string',
    'key2' => 'string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'redis::lindex' => 
  array (
    0 => 'false|string',
    'key' => 'string',
    'index' => 'int',
  ),
  'redis::linsert' => 
  array (
    0 => 'int',
    'key' => 'string',
    'pos' => 'string',
    'pivot' => 'string',
    'value' => 'string',
  ),
  'redis::llen' => 
  array (
    0 => 'false|int',
    'key' => 'string',
  ),
  'redis::lmove' => 
  array (
    0 => 'false|string',
    'src' => 'string',
    'dst' => 'string',
    'wherefrom' => 'string',
    'whereto' => 'string',
  ),
  'redis::lmpop' => 
  array (
    0 => 'array<array-key, mixed>|false|null',
    'keys' => 'array<array-key, mixed>',
    'from' => 'string',
    'count=' => 'int',
  ),
  'redis::lpop' => 
  array (
    0 => 'false|string',
    'key' => 'string',
    'count=' => 'int',
  ),
  'redis::lpos' => 
  array (
    0 => 'array<array-key, mixed>|bool|int|null',
    'key' => 'string',
    'value' => 'mixed',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'redis::lpush' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    '...elements=' => 'string',
  ),
  'redis::lpushx' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'value' => 'string',
  ),
  'redis::lrange' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'start' => 'int',
    'end' => 'int',
  ),
  'redis::lrem' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'value' => 'string',
    'count=' => 'int',
  ),
  'redis::lset' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'index' => 'int',
    'value' => 'string',
  ),
  'redis::ltrim' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'start' => 'int',
    'end' => 'int',
  ),
  'redis::mget' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'array<array-key, string>',
  ),
  'redis::migrate' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port' => 'int',
    'key' => 'array<array-key, string>|string',
    'dstdb' => 'int',
    'timeout' => 'int',
    'copy=' => 'bool',
    'replace=' => 'bool',
    'credentials=' => 'mixed',
  ),
  'redis::move' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'index' => 'int',
  ),
  'redis::mset' => 
  array (
    0 => 'bool',
    'key_values' => 'array<array-key, mixed>',
  ),
  'redis::msetnx' => 
  array (
    0 => 'bool',
    'key_values' => 'array<array-key, mixed>',
  ),
  'redis::multi' => 
  array (
    0 => 'Redis',
    'value=' => 'int',
  ),
  'redis::object' => 
  array (
    0 => 'false|int|string',
    'subcommand' => 'string',
    'key' => 'string',
  ),
  'redis::open' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port=' => 'int',
    'timeout=' => 'float',
    'persistent_id=' => 'null',
    'retry_interval=' => 'int',
    'read_timeout=' => 'float',
    'context=' => 'array<array-key, mixed>|null',
  ),
  'redis::pconnect' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port=' => 'int',
    'timeout=' => 'float',
    'persistent_id=' => 'null|string',
    'retry_interval=' => 'int',
    'read_timeout=' => 'float',
    'context=' => 'array<array-key, mixed>|null',
  ),
  'redis::persist' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'redis::pexpire' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'timeout' => 'int',
    'mode=' => 'null|string',
  ),
  'redis::pexpireat' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'timestamp' => 'int',
    'mode=' => 'null|string',
  ),
  'redis::pexpiretime' => 
  array (
    0 => 'false|int',
    'key' => 'string',
  ),
  'redis::pfadd' => 
  array (
    0 => 'int',
    'key' => 'string',
    'elements' => 'array<array-key, mixed>',
  ),
  'redis::pfcount' => 
  array (
    0 => 'int',
    'key_or_keys' => 'array<array-key, mixed>|string',
  ),
  'redis::pfmerge' => 
  array (
    0 => 'bool',
    'dst' => 'string',
    'srckeys' => 'array<array-key, mixed>',
  ),
  'redis::ping' => 
  array (
    0 => 'string',
    'message=' => 'null|string',
  ),
  'redis::pipeline' => 
  array (
    0 => 'Redis',
  ),
  'redis::popen' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port=' => 'int',
    'timeout=' => 'float',
    'persistent_id=' => 'null|string',
    'retry_interval=' => 'int',
    'read_timeout=' => 'float',
    'context=' => 'array<array-key, mixed>|null',
  ),
  'redis::psetex' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'expire' => 'int',
    'value' => 'string',
  ),
  'redis::psubscribe' => 
  array (
    0 => 'bool',
    'patterns' => 'array<array-key, mixed>',
    'cb' => 'callable',
  ),
  'redis::pttl' => 
  array (
    0 => 'false|int',
    'key' => 'string',
  ),
  'redis::publish' => 
  array (
    0 => 'int',
    'channel' => 'string',
    'message' => 'string',
  ),
  'redis::pubsub' => 
  array (
    0 => 'array<array-key, mixed>|int',
    'command' => 'string',
    'arg=' => 'array<array-key, mixed>|string',
  ),
  'redis::punsubscribe' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'patterns' => 'array<array-key, mixed>',
  ),
  'redis::randomkey' => 
  array (
    0 => 'string',
  ),
  'redis::rawcommand' => 
  array (
    0 => 'mixed',
    'command' => 'string',
    '...args=' => 'mixed',
  ),
  'redis::rename' => 
  array (
    0 => 'bool',
    'old_name' => 'string',
    'new_name' => 'string',
  ),
  'redis::renamenx' => 
  array (
    0 => 'bool',
    'key_src' => 'string',
    'key_dst' => 'string',
  ),
  'redis::replicaof' => 
  array (
    0 => 'bool',
    'host=' => 'null|string',
    'port=' => 'int',
  ),
  'redis::reset' => 
  array (
    0 => 'bool',
  ),
  'redis::resetstat' => 
  array (
    0 => 'bool',
  ),
  'redis::restore' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'ttl' => 'int',
    'value' => 'string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'redis::role' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'redis::rpop' => 
  array (
    0 => 'false|string',
    'key' => 'string',
    'count=' => 'int',
  ),
  'redis::rpoplpush' => 
  array (
    0 => 'string',
    'srckey' => 'string',
    'dstkey' => 'string',
  ),
  'redis::rpush' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    '...elements=' => 'string',
  ),
  'redis::rpushx' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'value' => 'string',
  ),
  'redis::sadd' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'value' => 'string',
    '...other_values=' => 'string',
  ),
  'redis::saddarray' => 
  array (
    0 => 'int',
    'key' => 'string',
    'values' => 'array<array-key, mixed>',
  ),
  'redis::save' => 
  array (
    0 => 'bool',
  ),
  'redis::scan' => 
  array (
    0 => 'array<int, string>|false',
    '&iterator' => 'int|null',
    'pattern=' => 'null|string',
    'count=' => 'int',
    'type=' => 'null|string',
  ),
  'redis::scard' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'redis::script' => 
  array (
    0 => 'mixed',
    'command' => 'string',
    '...args=' => 'mixed',
  ),
  'redis::sdiff' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'redis::sdiffstore' => 
  array (
    0 => 'false|int',
    'dst' => 'string',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'redis::select' => 
  array (
    0 => 'bool',
    'db' => 'int',
  ),
  'redis::set' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'mixed',
    'options=' => 'array<array-key, mixed>',
  ),
  'redis::set\'1' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'mixed',
    'timeout=' => 'int',
  ),
  'redis::setbit' => 
  array (
    0 => 'int',
    'key' => 'string',
    'idx' => 'int',
    'value' => 'bool',
  ),
  'redis::setex' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'expire' => 'int',
    'value' => 'string',
  ),
  'redis::setnx' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'string',
  ),
  'redis::setoption' => 
  array (
    0 => 'bool',
    'option' => 'int',
    'value' => 'mixed',
  ),
  'redis::setrange' => 
  array (
    0 => 'int',
    'key' => 'string',
    'index' => 'int',
    'value' => 'string',
  ),
  'redis::sinter' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'redis::sintercard' => 
  array (
    0 => 'false|int',
    'keys' => 'array<array-key, mixed>',
    'limit=' => 'int',
  ),
  'redis::sinterstore' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'redis::sismember' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'string',
  ),
  'redis::slave' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port' => 'int',
  ),
  'redis::slave\'1' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port' => 'int',
  ),
  'redis::slaveof' => 
  array (
    0 => 'bool',
    'host=' => 'null|string',
    'port=' => 'int',
  ),
  'redis::slowlog' => 
  array (
    0 => 'mixed',
    'operation' => 'string',
    'length=' => 'int',
  ),
  'redis::smembers' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
  ),
  'redis::smismember' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'key' => 'string',
    'member' => 'string',
    '...other_members=' => 'string',
  ),
  'redis::smove' => 
  array (
    0 => 'bool',
    'src' => 'string',
    'dst' => 'string',
    'value' => 'string',
  ),
  'redis::sort' => 
  array (
    0 => 'array<array-key, mixed>|int',
    'key' => 'string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'redis::sort_ro' => 
  array (
    0 => 'mixed',
    'key' => 'string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'redis::sortasc' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'pattern=' => 'null|string',
    'get=' => 'string',
    'offset=' => 'int',
    'count=' => 'int',
    'store=' => 'null|string',
  ),
  'redis::sortascalpha' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'pattern=' => 'null|string',
    'get=' => 'string',
    'offset=' => 'int',
    'count=' => 'int',
    'store=' => 'null|string',
  ),
  'redis::sortdesc' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'pattern=' => 'null|string',
    'get=' => 'string',
    'offset=' => 'int',
    'count=' => 'int',
    'store=' => 'null|string',
  ),
  'redis::sortdescalpha' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'pattern=' => 'null|string',
    'get=' => 'string',
    'offset=' => 'int',
    'count=' => 'int',
    'store=' => 'null|string',
  ),
  'redis::spop' => 
  array (
    0 => 'false|string',
    'key' => 'string',
    'count=' => 'int',
  ),
  'redis::srandmember' => 
  array (
    0 => 'array<array-key, mixed>|false|string',
    'key' => 'string',
    'count=' => 'int',
  ),
  'redis::srem' => 
  array (
    0 => 'int',
    'key' => 'string',
    'value' => 'string',
    '...other_values=' => 'string',
  ),
  'redis::sscan' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'key' => 'string',
    '&iterator' => 'int|null',
    'pattern=' => 'null|string',
    'count=' => 'int',
  ),
  'redis::ssubscribe' => 
  array (
    0 => 'bool',
    'channels' => 'array<array-key, mixed>',
    'cb' => 'callable',
  ),
  'redis::strlen' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'redis::subscribe' => 
  array (
    0 => 'bool',
    'channels' => 'array<array-key, mixed>',
    'cb' => 'callable',
  ),
  'redis::sunion' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'redis::sunionstore' => 
  array (
    0 => 'int',
    'dst' => 'string',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'redis::sunsubscribe' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'channels' => 'array<array-key, mixed>',
  ),
  'redis::swapdb' => 
  array (
    0 => 'bool',
    'src' => 'int',
    'dst' => 'int',
  ),
  'redis::time' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'redis::touch' => 
  array (
    0 => 'false|int',
    'key_or_array' => 'array<array-key, mixed>|string',
    '...more_keys=' => 'string',
  ),
  'redis::ttl' => 
  array (
    0 => 'false|int',
    'key' => 'string',
  ),
  'redis::type' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'redis::unlink' => 
  array (
    0 => 'int',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'redis::unlink\'1' => 
  array (
    0 => 'int',
    'key' => 'array<array-key, string>',
  ),
  'redis::unsubscribe' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'channels' => 'array<array-key, mixed>',
  ),
  'redis::unwatch' => 
  array (
    0 => 'bool',
  ),
  'redis::wait' => 
  array (
    0 => 'int',
    'numreplicas' => 'int',
    'timeout' => 'int',
  ),
  'redis::waitaof' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'numlocal' => 'int',
    'numreplicas' => 'int',
    'timeout' => 'int',
  ),
  'redis::watch' => 
  array (
    0 => 'bool',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'redis::xack' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'group' => 'string',
    'ids' => 'array<array-key, mixed>',
  ),
  'redis::xadd' => 
  array (
    0 => 'false|string',
    'key' => 'string',
    'id' => 'string',
    'values' => 'array<array-key, mixed>',
    'maxlen=' => 'int',
    'approx=' => 'bool',
    'nomkstream=' => 'bool',
  ),
  'redis::xautoclaim' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'key' => 'string',
    'group' => 'string',
    'consumer' => 'string',
    'min_idle' => 'int',
    'start' => 'string',
    'count=' => 'int',
    'justid=' => 'bool',
  ),
  'redis::xclaim' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'key' => 'string',
    'group' => 'string',
    'consumer' => 'string',
    'min_idle' => 'int',
    'ids' => 'array<array-key, mixed>',
    'options' => 'array<array-key, mixed>',
  ),
  'redis::xdel' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'ids' => 'array<array-key, mixed>',
  ),
  'redis::xgroup' => 
  array (
    0 => 'mixed',
    'operation' => 'string',
    'key=' => 'null|string',
    'group=' => 'null|string',
    'id_or_consumer=' => 'null|string',
    'mkstream=' => 'bool',
    'entries_read=' => 'int',
  ),
  'redis::xinfo' => 
  array (
    0 => 'mixed',
    'operation' => 'string',
    'arg1=' => 'null|string',
    'arg2=' => 'null|string',
    'count=' => 'int',
  ),
  'redis::xlen' => 
  array (
    0 => 'false|int',
    'key' => 'string',
  ),
  'redis::xpending' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'key' => 'string',
    'group' => 'string',
    'start=' => 'null|string',
    'end=' => 'null|string',
    'count=' => 'int',
    'consumer=' => 'null|string',
  ),
  'redis::xrange' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'key' => 'string',
    'start' => 'string',
    'end' => 'string',
    'count=' => 'int',
  ),
  'redis::xread' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'streams' => 'array<array-key, mixed>',
    'count=' => 'int',
    'block=' => 'int',
  ),
  'redis::xreadgroup' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'group' => 'string',
    'consumer' => 'string',
    'streams' => 'array<array-key, mixed>',
    'count=' => 'int',
    'block=' => 'int',
  ),
  'redis::xrevrange' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'key' => 'string',
    'end' => 'string',
    'start' => 'string',
    'count=' => 'int',
  ),
  'redis::xtrim' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'threshold' => 'string',
    'approx=' => 'bool',
    'minid=' => 'bool',
    'limit=' => 'int',
  ),
  'redis::zadd' => 
  array (
    0 => 'int',
    'key' => 'string',
    'score_or_options' => 'float',
    '...more_scores_and_mems=' => 'string',
  ),
  'redis::zadd\'1' => 
  array (
    0 => 'int',
    'options' => 'array<array-key, mixed>',
    'key' => 'string',
    'score1' => 'float',
    'value1' => 'string',
    'score2=' => 'float',
    'value2=' => 'string',
    'scoreN=' => 'float',
    'valueN=' => 'string',
  ),
  'redis::zcard' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'redis::zcount' => 
  array (
    0 => 'int',
    'key' => 'string',
    'start' => 'string',
    'end' => 'string',
  ),
  'redis::zdiff' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'keys' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'redis::zdiffstore' => 
  array (
    0 => 'false|int',
    'dst' => 'string',
    'keys' => 'array<array-key, mixed>',
  ),
  'redis::zincrby' => 
  array (
    0 => 'float',
    'key' => 'string',
    'value' => 'float',
    'member' => 'string',
  ),
  'redis::zinter' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'keys' => 'array<array-key, mixed>',
    'weights=' => 'array<array-key, mixed>|null',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'redis::zintercard' => 
  array (
    0 => 'false|int',
    'keys' => 'array<array-key, mixed>',
    'limit=' => 'int',
  ),
  'redis::zinterstore' => 
  array (
    0 => 'int',
    'dst' => 'string',
    'keys' => 'array<array-key, mixed>',
    'weights=' => 'array<array-key, mixed>|null',
    'aggregate=' => 'null|string',
  ),
  'redis::zlexcount' => 
  array (
    0 => 'int',
    'key' => 'string',
    'min' => 'string',
    'max' => 'string',
  ),
  'redis::zmpop' => 
  array (
    0 => 'array<array-key, mixed>|false|null',
    'keys' => 'array<array-key, mixed>',
    'from' => 'string',
    'count=' => 'int',
  ),
  'redis::zmscore' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'key' => 'string',
    'member' => 'mixed',
    '...other_members=' => 'mixed',
  ),
  'redis::zpopmax' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'key' => 'string',
    'count=' => 'int|null',
  ),
  'redis::zpopmin' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'key' => 'string',
    'count=' => 'int|null',
  ),
  'redis::zrandmember' => 
  array (
    0 => 'array<array-key, mixed>|string',
    'key' => 'string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'redis::zrange' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'start' => 'int',
    'end' => 'int',
    'options=' => 'bool|null',
  ),
  'redis::zrangebylex' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'key' => 'string',
    'min' => 'string',
    'max' => 'string',
    'offset=' => 'int',
    'count=' => 'int',
  ),
  'redis::zrangebyscore' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'start' => 'string',
    'end' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'redis::zrangestore' => 
  array (
    0 => 'false|int',
    'dstkey' => 'string',
    'srckey' => 'string',
    'start' => 'string',
    'end' => 'string',
    'options=' => 'array<array-key, mixed>|bool|null',
  ),
  'redis::zrank' => 
  array (
    0 => 'int',
    'key' => 'string',
    'member' => 'string',
  ),
  'redis::zrem' => 
  array (
    0 => 'int',
    'key' => 'string',
    'member' => 'string',
    '...other_members=' => 'string',
  ),
  'redis::zremoverangebyrank' => 
  array (
    0 => 'int',
    'key' => 'string',
    'start' => 'int',
    'end' => 'int',
  ),
  'redis::zremrangebylex' => 
  array (
    0 => 'int',
    'key' => 'string',
    'min' => 'string',
    'max' => 'string',
  ),
  'redis::zremrangebyrank' => 
  array (
    0 => 'int',
    'key' => 'string',
    'start' => 'int',
    'end' => 'int',
  ),
  'redis::zremrangebyscore' => 
  array (
    0 => 'int',
    'key' => 'string',
    'start' => 'string',
    'end' => 'string',
  ),
  'redis::zrevrange' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'start' => 'int',
    'end' => 'int',
    'scores=' => 'bool',
  ),
  'redis::zrevrangebylex' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'max' => 'string',
    'min' => 'string',
    'offset=' => 'int',
    'count=' => 'int',
  ),
  'redis::zrevrangebyscore' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'max' => 'string',
    'min' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'redis::zrevrank' => 
  array (
    0 => 'int',
    'key' => 'string',
    'member' => 'string',
  ),
  'redis::zscan' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'key' => 'string',
    '&iterator' => 'int|null',
    'pattern=' => 'null|string',
    'count=' => 'int',
  ),
  'redis::zscore' => 
  array (
    0 => 'false|float',
    'key' => 'string',
    'member' => 'string',
  ),
  'redis::zunion' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'keys' => 'array<array-key, mixed>',
    'weights=' => 'array<array-key, mixed>|null',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'redis::zunionstore' => 
  array (
    0 => 'int',
    'dst' => 'string',
    'keys' => 'array<array-key, mixed>',
    'weights=' => 'array<array-key, mixed>|null',
    'aggregate=' => 'null|string',
  ),
  'redisarray::__call' => 
  array (
    0 => 'mixed',
    'function_name' => 'string',
    'arguments' => 'array<array-key, mixed>',
  ),
  'redisarray::__construct' => 
  array (
    0 => 'void',
    'name_or_hosts' => 'string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'redisarray::_continuum' => 
  array (
    0 => 'array<array-key, mixed>|bool',
  ),
  'redisarray::_distributor' => 
  array (
    0 => 'bool|callable',
  ),
  'redisarray::_function' => 
  array (
    0 => 'bool|callable',
  ),
  'redisarray::_hosts' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'redisarray::_instance' => 
  array (
    0 => 'bool|null',
    'host' => 'string',
  ),
  'redisarray::_rehash' => 
  array (
    0 => 'bool|null',
    'fn=' => 'callable|null',
  ),
  'redisarray::_target' => 
  array (
    0 => 'null|string',
    'key' => 'string',
  ),
  'redisarray::bgsave' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'redisarray::del' => 
  array (
    0 => 'bool',
    'key' => 'string',
    '...otherkeys=' => 'string',
  ),
  'redisarray::delete\'1' => 
  array (
    0 => 'bool',
    'key' => 'array<array-key, string>',
  ),
  'redisarray::discard' => 
  array (
    0 => 'bool|null',
  ),
  'redisarray::exec' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'redisarray::flushall' => 
  array (
    0 => 'bool',
  ),
  'redisarray::flushdb' => 
  array (
    0 => 'bool',
  ),
  'redisarray::getoption' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'opt' => 'int',
  ),
  'redisarray::hscan' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'key' => 'string',
    '&iterator' => 'int|null|string',
    'pattern=' => 'null|string',
    'count=' => 'int',
  ),
  'redisarray::info' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'redisarray::keys' => 
  array (
    0 => 'array<int, string>',
    'pattern' => 'string',
  ),
  'redisarray::mget' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'array<array-key, string>',
  ),
  'redisarray::mset' => 
  array (
    0 => 'bool',
    'pairs' => 'array<array-key, mixed>',
  ),
  'redisarray::multi' => 
  array (
    0 => 'RedisArray',
    'host' => 'string',
    'mode=' => 'int|null',
  ),
  'redisarray::ping' => 
  array (
    0 => 'array<array-key, mixed>|bool',
  ),
  'redisarray::save' => 
  array (
    0 => 'bool',
  ),
  'redisarray::scan' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    '&iterator' => 'int|null|string',
    'node' => 'string',
    'pattern=' => 'null|string',
    'count=' => 'int',
  ),
  'redisarray::select' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'index' => 'int',
  ),
  'redisarray::setoption' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'opt' => 'int',
    'value' => 'string',
  ),
  'redisarray::sscan' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'key' => 'string',
    '&iterator' => 'int|null|string',
    'pattern=' => 'null|string',
    'count=' => 'int',
  ),
  'redisarray::unlink' => 
  array (
    0 => 'int',
    'key' => 'string',
    '...otherkeys=' => 'string',
  ),
  'redisarray::unlink\'1' => 
  array (
    0 => 'int',
    'key' => 'array<array-key, string>',
  ),
  'redisarray::unwatch' => 
  array (
    0 => 'bool|null',
  ),
  'redisarray::zscan' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'key' => 'string',
    '&iterator' => 'int|null|string',
    'pattern=' => 'null|string',
    'count=' => 'int',
  ),
  'rediscluster::__construct' => 
  array (
    0 => 'void',
    'name' => 'null|string',
    'seeds=' => 'array<array-key, string>|null',
    'timeout=' => 'float',
    'read_timeout=' => 'float',
    'persistent=' => 'bool',
    'auth=' => 'null|string',
    'context=' => 'array<array-key, mixed>|null',
  ),
  'rediscluster::_compress' => 
  array (
    0 => 'string',
    'value' => 'string',
  ),
  'rediscluster::_masters' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'rediscluster::_pack' => 
  array (
    0 => 'string',
    'value' => 'mixed',
  ),
  'rediscluster::_prefix' => 
  array (
    0 => 'string',
    'key' => 'string',
  ),
  'rediscluster::_redir' => 
  array (
    0 => 'null|string',
  ),
  'rediscluster::_serialize' => 
  array (
    0 => 'bool|string',
    'value' => 'mixed',
  ),
  'rediscluster::_uncompress' => 
  array (
    0 => 'string',
    'value' => 'string',
  ),
  'rediscluster::_unpack' => 
  array (
    0 => 'mixed',
    'value' => 'string',
  ),
  'rediscluster::_unserialize' => 
  array (
    0 => 'mixed',
    'value' => 'string',
  ),
  'rediscluster::acl' => 
  array (
    0 => 'mixed',
    'key_or_address' => 'array<array-key, mixed>|string',
    'subcmd' => 'string',
    '...args=' => 'string',
  ),
  'rediscluster::append' => 
  array (
    0 => 'int',
    'key' => 'string',
    'value' => 'string',
  ),
  'rediscluster::bgrewriteaof' => 
  array (
    0 => 'bool',
    'key_or_address' => 'array{0: string, 1: int}|string',
  ),
  'rediscluster::bgsave' => 
  array (
    0 => 'bool',
    'key_or_address' => 'array{0: string, 1: int}|string',
  ),
  'rediscluster::bitcount' => 
  array (
    0 => 'int',
    'key' => 'string',
    'start=' => 'int',
    'end=' => 'int',
    'bybit=' => 'bool',
  ),
  'rediscluster::bitop' => 
  array (
    0 => 'int',
    'operation' => 'string',
    'deskey' => 'string',
    'srckey' => 'string',
    '...otherkeys=' => 'string',
  ),
  'rediscluster::bitpos' => 
  array (
    0 => 'int',
    'key' => 'string',
    'bit' => 'bool',
    'start=' => 'int',
    'end=' => 'int',
    'bybit=' => 'bool',
  ),
  'rediscluster::blmove' => 
  array (
    0 => 'false|string',
    'src' => 'string',
    'dst' => 'string',
    'wherefrom' => 'string',
    'whereto' => 'string',
    'timeout' => 'float',
  ),
  'rediscluster::blmpop' => 
  array (
    0 => 'RedisCluster|array<array-key, mixed>|false|null',
    'timeout' => 'float',
    'keys' => 'array<array-key, mixed>',
    'from' => 'string',
    'count=' => 'int',
  ),
  'rediscluster::blpop' => 
  array (
    0 => 'array<array-key, mixed>|null',
    'key' => 'array<array-key, mixed>',
    'timeout_or_key' => 'int',
    '...extra_args=' => 'mixed',
  ),
  'rediscluster::brpop' => 
  array (
    0 => 'array<array-key, mixed>|null',
    'key' => 'array<array-key, mixed>',
    'timeout_or_key' => 'int',
    '...extra_args=' => 'mixed',
  ),
  'rediscluster::brpoplpush' => 
  array (
    0 => 'false|string',
    'srckey' => 'string',
    'deskey' => 'string',
    'timeout' => 'int',
  ),
  'rediscluster::bzmpop' => 
  array (
    0 => 'RedisCluster|array<array-key, mixed>|false|null',
    'timeout' => 'float',
    'keys' => 'array<array-key, mixed>',
    'from' => 'string',
    'count=' => 'int',
  ),
  'rediscluster::bzpopmax' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'array<array-key, mixed>|string',
    'timeout_or_key' => 'int|string',
    '...extra_args=' => 'mixed',
  ),
  'rediscluster::bzpopmin' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'array<array-key, mixed>|string',
    'timeout_or_key' => 'int|string',
    '...extra_args=' => 'mixed',
  ),
  'rediscluster::clearlasterror' => 
  array (
    0 => 'bool',
  ),
  'rediscluster::cleartransferredbytes' => 
  array (
    0 => 'void',
  ),
  'rediscluster::client' => 
  array (
    0 => 'array<array-key, mixed>|bool|string',
    'key_or_address' => 'array{0: string, 1: int}|string',
    'subcommand' => 'string',
    'arg=' => 'null|string',
  ),
  'rediscluster::close' => 
  array (
    0 => 'bool',
  ),
  'rediscluster::cluster' => 
  array (
    0 => 'mixed',
    'key_or_address' => 'array{0: string, 1: int}|string',
    'command' => 'string',
    '...extra_args=' => 'mixed',
  ),
  'rediscluster::command' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    '...extra_args=' => 'mixed',
  ),
  'rediscluster::config' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'key_or_address' => 'array{0: string, 1: int}|string',
    'subcommand' => 'string',
    '...extra_args=' => 'string',
  ),
  'rediscluster::copy' => 
  array (
    0 => 'RedisCluster|bool',
    'src' => 'string',
    'dst' => 'string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'rediscluster::dbsize' => 
  array (
    0 => 'int',
    'key_or_address' => 'array{0: string, 1: int}|string',
  ),
  'rediscluster::decr' => 
  array (
    0 => 'int',
    'key' => 'string',
    'by=' => 'int',
  ),
  'rediscluster::decrby' => 
  array (
    0 => 'int',
    'key' => 'string',
    'value' => 'int',
  ),
  'rediscluster::decrbyfloat' => 
  array (
    0 => 'float',
    'key' => 'string',
    'value' => 'float',
  ),
  'rediscluster::del' => 
  array (
    0 => 'int',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'rediscluster::del\'1' => 
  array (
    0 => 'int',
    'key' => 'array<array-key, string>',
  ),
  'rediscluster::discard' => 
  array (
    0 => 'bool',
  ),
  'rediscluster::dump' => 
  array (
    0 => 'false|string',
    'key' => 'string',
  ),
  'rediscluster::echo' => 
  array (
    0 => 'string',
    'key_or_address' => 'array{0: string, 1: int}|string',
    'msg' => 'string',
  ),
  'rediscluster::eval' => 
  array (
    0 => 'mixed',
    'script' => 'string',
    'args=' => 'array<array-key, mixed>',
    'num_keys=' => 'int',
  ),
  'rediscluster::eval_ro' => 
  array (
    0 => 'mixed',
    'script' => 'string',
    'args=' => 'array<array-key, mixed>',
    'num_keys=' => 'int',
  ),
  'rediscluster::evalsha' => 
  array (
    0 => 'mixed',
    'script_sha' => 'string',
    'args=' => 'array<array-key, mixed>',
    'num_keys=' => 'int',
  ),
  'rediscluster::evalsha_ro' => 
  array (
    0 => 'mixed',
    'script_sha' => 'string',
    'args=' => 'array<array-key, mixed>',
    'num_keys=' => 'int',
  ),
  'rediscluster::exec' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'rediscluster::exists' => 
  array (
    0 => 'bool',
    'key' => 'string',
    '...other_keys=' => 'mixed',
  ),
  'rediscluster::expire' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'timeout' => 'int',
    'mode=' => 'null|string',
  ),
  'rediscluster::expireat' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'timestamp' => 'int',
    'mode=' => 'null|string',
  ),
  'rediscluster::expiretime' => 
  array (
    0 => 'RedisCluster|false|int',
    'key' => 'string',
  ),
  'rediscluster::flushall' => 
  array (
    0 => 'bool',
    'key_or_address' => 'array{0: string, 1: int}|string',
    'async=' => 'bool',
  ),
  'rediscluster::flushdb' => 
  array (
    0 => 'bool',
    'key_or_address' => 'array{0: string, 1: int}|string',
    'async=' => 'bool',
  ),
  'rediscluster::geoadd' => 
  array (
    0 => 'int',
    'key' => 'string',
    'lng' => 'float',
    'lat' => 'float',
    'member' => 'string',
    '...other_triples_and_options=' => 'float|string',
  ),
  'rediscluster::geodist' => 
  array (
    0 => 'RedisCluster|false|float',
    'key' => 'string',
    'src' => 'string',
    'dest' => 'string',
    'unit=' => 'null|string',
  ),
  'rediscluster::geohash' => 
  array (
    0 => 'array<int, string>',
    'key' => 'string',
    'member' => 'string',
    '...other_members=' => 'string',
  ),
  'rediscluster::geopos' => 
  array (
    0 => 'array<int, array{0: string, 1: string}>',
    'key' => 'string',
    'member' => 'string',
    '...other_members=' => 'string',
  ),
  'rediscluster::georadius' => 
  array (
    0 => 'mixed',
    'key' => 'string',
    'lng' => 'float',
    'lat' => 'float',
    'radius' => 'float',
    'unit' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'rediscluster::georadius_ro' => 
  array (
    0 => 'mixed',
    'key' => 'string',
    'lng' => 'float',
    'lat' => 'float',
    'radius' => 'float',
    'unit' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'rediscluster::georadiusbymember' => 
  array (
    0 => 'array<array-key, string>',
    'key' => 'string',
    'member' => 'string',
    'radius' => 'float',
    'unit' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'rediscluster::georadiusbymember_ro' => 
  array (
    0 => 'mixed',
    'key' => 'string',
    'member' => 'string',
    'radius' => 'float',
    'unit' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'rediscluster::geosearch' => 
  array (
    0 => 'RedisCluster|array<array-key, mixed>',
    'key' => 'string',
    'position' => 'array<array-key, mixed>|string',
    'shape' => 'array<array-key, mixed>|float|int',
    'unit' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'rediscluster::geosearchstore' => 
  array (
    0 => 'RedisCluster|array<array-key, mixed>|false|int',
    'dst' => 'string',
    'src' => 'string',
    'position' => 'array<array-key, mixed>|string',
    'shape' => 'array<array-key, mixed>|float|int',
    'unit' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'rediscluster::get' => 
  array (
    0 => 'false|string',
    'key' => 'string',
  ),
  'rediscluster::getbit' => 
  array (
    0 => 'int',
    'key' => 'string',
    'value' => 'int',
  ),
  'rediscluster::getex' => 
  array (
    0 => 'RedisCluster|false|string',
    'key' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'rediscluster::getlasterror' => 
  array (
    0 => 'null|string',
  ),
  'rediscluster::getmode' => 
  array (
    0 => 'int',
  ),
  'rediscluster::getoption' => 
  array (
    0 => 'int',
    'option' => 'int',
  ),
  'rediscluster::getrange' => 
  array (
    0 => 'string',
    'key' => 'string',
    'start' => 'int',
    'end' => 'int',
  ),
  'rediscluster::getset' => 
  array (
    0 => 'string',
    'key' => 'string',
    'value' => 'string',
  ),
  'rediscluster::gettransferredbytes' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'rediscluster::hdel' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'member' => 'string',
    '...other_members=' => 'string',
  ),
  'rediscluster::hexists' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'member' => 'string',
  ),
  'rediscluster::hget' => 
  array (
    0 => 'false|string',
    'key' => 'string',
    'member' => 'string',
  ),
  'rediscluster::hgetall' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
  ),
  'rediscluster::hincrby' => 
  array (
    0 => 'int',
    'key' => 'string',
    'member' => 'string',
    'value' => 'int',
  ),
  'rediscluster::hincrbyfloat' => 
  array (
    0 => 'float',
    'key' => 'string',
    'member' => 'string',
    'value' => 'float',
  ),
  'rediscluster::hkeys' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
  ),
  'rediscluster::hlen' => 
  array (
    0 => 'false|int',
    'key' => 'string',
  ),
  'rediscluster::hmget' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'keys' => 'array<array-key, mixed>',
  ),
  'rediscluster::hmset' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'key_values' => 'array<array-key, mixed>',
  ),
  'rediscluster::hrandfield' => 
  array (
    0 => 'RedisCluster|array<array-key, mixed>|string',
    'key' => 'string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'rediscluster::hscan' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    '&iterator' => 'int|null',
    'pattern=' => 'null|string',
    'count=' => 'int',
  ),
  'rediscluster::hset' => 
  array (
    0 => 'int',
    'key' => 'string',
    'member' => 'string',
    'value' => 'string',
  ),
  'rediscluster::hsetnx' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'member' => 'string',
    'value' => 'string',
  ),
  'rediscluster::hstrlen' => 
  array (
    0 => 'int',
    'key' => 'string',
    'field' => 'string',
  ),
  'rediscluster::hvals' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
  ),
  'rediscluster::incr' => 
  array (
    0 => 'int',
    'key' => 'string',
    'by=' => 'int',
  ),
  'rediscluster::incrby' => 
  array (
    0 => 'int',
    'key' => 'string',
    'value' => 'int',
  ),
  'rediscluster::incrbyfloat' => 
  array (
    0 => 'float',
    'key' => 'string',
    'value' => 'float',
  ),
  'rediscluster::info' => 
  array (
    0 => 'array<array-key, mixed>',
    'key_or_address' => 'array{0: string, 1: int}|string',
    '...sections=' => 'string',
  ),
  'rediscluster::keys' => 
  array (
    0 => 'array<array-key, mixed>',
    'pattern' => 'string',
  ),
  'rediscluster::lastsave' => 
  array (
    0 => 'int',
    'key_or_address' => 'array{0: string, 1: int}|string',
  ),
  'rediscluster::lcs' => 
  array (
    0 => 'RedisCluster|array<array-key, mixed>|false|int|string',
    'key1' => 'string',
    'key2' => 'string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'rediscluster::lget' => 
  array (
    0 => 'RedisCluster|bool|string',
    'key' => 'string',
    'index' => 'int',
  ),
  'rediscluster::lindex' => 
  array (
    0 => 'false|string',
    'key' => 'string',
    'index' => 'int',
  ),
  'rediscluster::linsert' => 
  array (
    0 => 'int',
    'key' => 'string',
    'pos' => 'string',
    'pivot' => 'string',
    'value' => 'string',
  ),
  'rediscluster::llen' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'rediscluster::lmove' => 
  array (
    0 => 'false|string',
    'src' => 'string',
    'dst' => 'string',
    'wherefrom' => 'string',
    'whereto' => 'string',
  ),
  'rediscluster::lmpop' => 
  array (
    0 => 'RedisCluster|array<array-key, mixed>|false|null',
    'keys' => 'array<array-key, mixed>',
    'from' => 'string',
    'count=' => 'int',
  ),
  'rediscluster::lpop' => 
  array (
    0 => 'false|string',
    'key' => 'string',
    'count=' => 'int',
  ),
  'rediscluster::lpos' => 
  array (
    0 => 'array<array-key, mixed>|bool|int|null',
    'key' => 'string',
    'value' => 'mixed',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'rediscluster::lpush' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'value' => 'string',
    '...other_values=' => 'string',
  ),
  'rediscluster::lpushx' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'value' => 'string',
  ),
  'rediscluster::lrange' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'start' => 'int',
    'end' => 'int',
  ),
  'rediscluster::lrem' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'value' => 'string',
    'count=' => 'int',
  ),
  'rediscluster::lset' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'index' => 'int',
    'value' => 'string',
  ),
  'rediscluster::ltrim' => 
  array (
    0 => 'RedisCluster|bool',
    'key' => 'string',
    'start' => 'int',
    'end' => 'int',
  ),
  'rediscluster::mget' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'array<array-key, mixed>',
  ),
  'rediscluster::mset' => 
  array (
    0 => 'bool',
    'key_values' => 'array<array-key, mixed>',
  ),
  'rediscluster::msetnx' => 
  array (
    0 => 'RedisCluster|array<array-key, mixed>|false',
    'key_values' => 'array<array-key, mixed>',
  ),
  'rediscluster::multi' => 
  array (
    0 => 'RedisCluster|bool',
    'value=' => 'int',
  ),
  'rediscluster::object' => 
  array (
    0 => 'false|int|string',
    'subcommand' => 'string',
    'key' => 'string',
  ),
  'rediscluster::persist' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'rediscluster::pexpire' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'timeout' => 'int',
    'mode=' => 'null|string',
  ),
  'rediscluster::pexpireat' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'timestamp' => 'int',
    'mode=' => 'null|string',
  ),
  'rediscluster::pexpiretime' => 
  array (
    0 => 'RedisCluster|false|int',
    'key' => 'string',
  ),
  'rediscluster::pfadd' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'elements' => 'array<array-key, mixed>',
  ),
  'rediscluster::pfcount' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'rediscluster::pfmerge' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'keys' => 'array<array-key, mixed>',
  ),
  'rediscluster::ping' => 
  array (
    0 => 'string',
    'key_or_address' => 'array{0: string, 1: int}|string',
    'message=' => 'null|string',
  ),
  'rediscluster::psetex' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'timeout' => 'int',
    'value' => 'string',
  ),
  'rediscluster::psubscribe' => 
  array (
    0 => 'void',
    'patterns' => 'array<array-key, mixed>',
    'callback' => 'callable',
  ),
  'rediscluster::pttl' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'rediscluster::publish' => 
  array (
    0 => 'int',
    'channel' => 'string',
    'message' => 'string',
  ),
  'rediscluster::pubsub' => 
  array (
    0 => 'array<array-key, mixed>',
    'key_or_address' => 'string',
    '...values=' => 'string',
  ),
  'rediscluster::punsubscribe' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'pattern' => 'string',
    '...other_patterns=' => 'string',
  ),
  'rediscluster::randomkey' => 
  array (
    0 => 'string',
    'key_or_address' => 'array{0: string, 1: int}|string',
  ),
  'rediscluster::rawcommand' => 
  array (
    0 => 'mixed',
    'key_or_address' => 'array{0: string, 1: int}|string',
    'command' => 'string',
    '...args=' => 'mixed',
  ),
  'rediscluster::rename' => 
  array (
    0 => 'bool',
    'key_src' => 'string',
    'key_dst' => 'string',
  ),
  'rediscluster::renamenx' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'newkey' => 'string',
  ),
  'rediscluster::restore' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'timeout' => 'int',
    'value' => 'string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'rediscluster::role' => 
  array (
    0 => 'array<array-key, mixed>',
    'key_or_address' => 'array<array-key, mixed>|string',
  ),
  'rediscluster::rpop' => 
  array (
    0 => 'false|string',
    'key' => 'string',
    'count=' => 'int',
  ),
  'rediscluster::rpoplpush' => 
  array (
    0 => 'false|string',
    'src' => 'string',
    'dst' => 'string',
  ),
  'rediscluster::rpush' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    '...elements=' => 'string',
  ),
  'rediscluster::rpushx' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'value' => 'string',
  ),
  'rediscluster::sadd' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'value' => 'string',
    '...other_values=' => 'string',
  ),
  'rediscluster::saddarray' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'values' => 'array<array-key, mixed>',
  ),
  'rediscluster::save' => 
  array (
    0 => 'bool',
    'key_or_address' => 'array{0: string, 1: int}|string',
  ),
  'rediscluster::scan' => 
  array (
    0 => 'array<array-key, mixed>|false',
    '&iterator' => 'int|null',
    'key_or_address' => 'array{0: string, 1: int}|string',
    'pattern=' => 'null|string',
    'count=' => 'int',
  ),
  'rediscluster::scard' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'rediscluster::script' => 
  array (
    0 => 'array<array-key, mixed>|bool|string',
    'key_or_address' => 'array{0: string, 1: int}|string',
    '...args=' => 'string',
  ),
  'rediscluster::sdiff' => 
  array (
    0 => 'list<string>',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'rediscluster::sdiffstore' => 
  array (
    0 => 'int',
    'dst' => 'string',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'rediscluster::set' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'string',
    'options=' => 'array<array-key, mixed>|int',
  ),
  'rediscluster::setbit' => 
  array (
    0 => 'int',
    'key' => 'string',
    'offset' => 'int',
    'onoff' => 'bool',
  ),
  'rediscluster::setex' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'expire' => 'int',
    'value' => 'string',
  ),
  'rediscluster::setnx' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'string',
  ),
  'rediscluster::setoption' => 
  array (
    0 => 'bool',
    'option' => 'int',
    'value' => 'int|string',
  ),
  'rediscluster::setrange' => 
  array (
    0 => 'RedisCluster|false|int',
    'key' => 'string',
    'offset' => 'int',
    'value' => 'string',
  ),
  'rediscluster::sinter' => 
  array (
    0 => 'list<string>',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'rediscluster::sintercard' => 
  array (
    0 => 'RedisCluster|false|int',
    'keys' => 'array<array-key, mixed>',
    'limit=' => 'int',
  ),
  'rediscluster::sinterstore' => 
  array (
    0 => 'int',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'rediscluster::sismember' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'string',
  ),
  'rediscluster::slowlog' => 
  array (
    0 => 'array<array-key, mixed>|bool|int',
    'key_or_address' => 'array{0: string, 1: int}|string',
    '...args=' => 'string',
  ),
  'rediscluster::smembers' => 
  array (
    0 => 'list<string>',
    'key' => 'string',
  ),
  'rediscluster::smismember' => 
  array (
    0 => 'RedisCluster|array<array-key, mixed>|false',
    'key' => 'string',
    'member' => 'string',
    '...other_members=' => 'string',
  ),
  'rediscluster::smove' => 
  array (
    0 => 'bool',
    'src' => 'string',
    'dst' => 'string',
    'member' => 'string',
  ),
  'rediscluster::sort' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'rediscluster::sort_ro' => 
  array (
    0 => 'RedisCluster|array<array-key, mixed>|bool|int|string',
    'key' => 'string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'rediscluster::spop' => 
  array (
    0 => 'string',
    'key' => 'string',
    'count=' => 'int',
  ),
  'rediscluster::srandmember' => 
  array (
    0 => 'array<array-key, mixed>|string',
    'key' => 'string',
    'count=' => 'int',
  ),
  'rediscluster::srem' => 
  array (
    0 => 'int',
    'key' => 'string',
    'value' => 'string',
    '...other_values=' => 'string',
  ),
  'rediscluster::sscan' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'key' => 'string',
    '&iterator' => 'int|null',
    'pattern=' => 'null',
    'count=' => 'int',
  ),
  'rediscluster::strlen' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'rediscluster::subscribe' => 
  array (
    0 => 'void',
    'channels' => 'array<array-key, mixed>',
    'cb' => 'callable',
  ),
  'rediscluster::sunion' => 
  array (
    0 => 'list<string>',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'rediscluster::sunion\'1' => 
  array (
    0 => 'list<string>',
    'keys' => 'array<array-key, string>',
  ),
  'rediscluster::sunionstore' => 
  array (
    0 => 'int',
    'dst' => 'string',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'rediscluster::time' => 
  array (
    0 => 'array<array-key, mixed>',
    'key_or_address' => 'array<array-key, mixed>|string',
  ),
  'rediscluster::touch' => 
  array (
    0 => 'RedisCluster|bool|int',
    'key' => 'mixed',
    '...other_keys=' => 'mixed',
  ),
  'rediscluster::ttl' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'rediscluster::type' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'rediscluster::unlink' => 
  array (
    0 => 'int',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'rediscluster::unsubscribe' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'channels' => 'array<array-key, mixed>',
  ),
  'rediscluster::unwatch' => 
  array (
    0 => 'bool',
  ),
  'rediscluster::waitaof' => 
  array (
    0 => 'RedisCluster|array<array-key, mixed>|false',
    'key_or_address' => 'array<array-key, mixed>|string',
    'numlocal' => 'int',
    'numreplicas' => 'int',
    'timeout' => 'int',
  ),
  'rediscluster::watch' => 
  array (
    0 => 'RedisCluster|bool',
    'key' => 'string',
    '...other_keys=' => 'string',
  ),
  'rediscluster::xack' => 
  array (
    0 => 'RedisCluster|false|int',
    'key' => 'string',
    'group' => 'string',
    'ids' => 'array<array-key, mixed>',
  ),
  'rediscluster::xadd' => 
  array (
    0 => 'RedisCluster|false|string',
    'key' => 'string',
    'id' => 'string',
    'values' => 'array<array-key, mixed>',
    'maxlen=' => 'int',
    'approx=' => 'bool',
  ),
  'rediscluster::xautoclaim' => 
  array (
    0 => 'RedisCluster|array<array-key, mixed>|bool',
    'key' => 'string',
    'group' => 'string',
    'consumer' => 'string',
    'min_idle' => 'int',
    'start' => 'string',
    'count=' => 'int',
    'justid=' => 'bool',
  ),
  'rediscluster::xclaim' => 
  array (
    0 => 'RedisCluster|array<array-key, mixed>|false|string',
    'key' => 'string',
    'group' => 'string',
    'consumer' => 'string',
    'min_iddle' => 'int',
    'ids' => 'array<array-key, mixed>',
    'options' => 'array<array-key, mixed>',
  ),
  'rediscluster::xdel' => 
  array (
    0 => 'RedisCluster|false|int',
    'key' => 'string',
    'ids' => 'array<array-key, mixed>',
  ),
  'rediscluster::xgroup' => 
  array (
    0 => 'mixed',
    'operation' => 'string',
    'key=' => 'null|string',
    'group=' => 'null|string',
    'id_or_consumer=' => 'null|string',
    'mkstream=' => 'bool',
    'entries_read=' => 'int',
  ),
  'rediscluster::xinfo' => 
  array (
    0 => 'mixed',
    'operation' => 'string',
    'arg1=' => 'null|string',
    'arg2=' => 'null|string',
    'count=' => 'int',
  ),
  'rediscluster::xlen' => 
  array (
    0 => 'RedisCluster|false|int',
    'key' => 'string',
  ),
  'rediscluster::xpending' => 
  array (
    0 => 'RedisCluster|array<array-key, mixed>|false',
    'key' => 'string',
    'group' => 'string',
    'start=' => 'null|string',
    'end=' => 'null|string',
    'count=' => 'int',
    'consumer=' => 'null|string',
  ),
  'rediscluster::xrange' => 
  array (
    0 => 'RedisCluster|array<array-key, mixed>|bool',
    'key' => 'string',
    'start' => 'string',
    'end' => 'string',
    'count=' => 'int',
  ),
  'rediscluster::xread' => 
  array (
    0 => 'RedisCluster|array<array-key, mixed>|bool',
    'streams' => 'array<array-key, mixed>',
    'count=' => 'int',
    'block=' => 'int',
  ),
  'rediscluster::xreadgroup' => 
  array (
    0 => 'RedisCluster|array<array-key, mixed>|bool',
    'group' => 'string',
    'consumer' => 'string',
    'streams' => 'array<array-key, mixed>',
    'count=' => 'int',
    'block=' => 'int',
  ),
  'rediscluster::xrevrange' => 
  array (
    0 => 'RedisCluster|array<array-key, mixed>|bool',
    'key' => 'string',
    'start' => 'string',
    'end' => 'string',
    'count=' => 'int',
  ),
  'rediscluster::xtrim' => 
  array (
    0 => 'RedisCluster|false|int',
    'key' => 'string',
    'maxlen' => 'int',
    'approx=' => 'bool',
    'minid=' => 'bool',
    'limit=' => 'int',
  ),
  'rediscluster::zadd' => 
  array (
    0 => 'int',
    'key' => 'string',
    'score_or_options' => 'float',
    '...more_scores_and_mems=' => 'string',
  ),
  'rediscluster::zcard' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'rediscluster::zcount' => 
  array (
    0 => 'int',
    'key' => 'string',
    'start' => 'string',
    'end' => 'string',
  ),
  'rediscluster::zdiff' => 
  array (
    0 => 'RedisCluster|array<array-key, mixed>|false',
    'keys' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'rediscluster::zdiffstore' => 
  array (
    0 => 'RedisCluster|false|int',
    'dst' => 'string',
    'keys' => 'array<array-key, mixed>',
  ),
  'rediscluster::zincrby' => 
  array (
    0 => 'float',
    'key' => 'string',
    'value' => 'float',
    'member' => 'string',
  ),
  'rediscluster::zinter' => 
  array (
    0 => 'RedisCluster|array<array-key, mixed>|false',
    'keys' => 'array<array-key, mixed>',
    'weights=' => 'array<array-key, mixed>|null',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'rediscluster::zintercard' => 
  array (
    0 => 'RedisCluster|false|int',
    'keys' => 'array<array-key, mixed>',
    'limit=' => 'int',
  ),
  'rediscluster::zinterstore' => 
  array (
    0 => 'int',
    'dst' => 'string',
    'keys' => 'array<array-key, mixed>',
    'weights=' => 'array<array-key, mixed>|null',
    'aggregate=' => 'null|string',
  ),
  'rediscluster::zlexcount' => 
  array (
    0 => 'int',
    'key' => 'string',
    'min' => 'string',
    'max' => 'string',
  ),
  'rediscluster::zmpop' => 
  array (
    0 => 'RedisCluster|array<array-key, mixed>|false|null',
    'keys' => 'array<array-key, mixed>',
    'from' => 'string',
    'count=' => 'int',
  ),
  'rediscluster::zmscore' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'key' => 'string',
    'member' => 'mixed',
    '...other_members=' => 'mixed',
  ),
  'rediscluster::zpopmax' => 
  array (
    0 => 'RedisCluster|array<array-key, mixed>|bool',
    'key' => 'string',
    'value=' => 'int|null',
  ),
  'rediscluster::zpopmin' => 
  array (
    0 => 'RedisCluster|array<array-key, mixed>|bool',
    'key' => 'string',
    'value=' => 'int|null',
  ),
  'rediscluster::zrandmember' => 
  array (
    0 => 'RedisCluster|array<array-key, mixed>|string',
    'key' => 'string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'rediscluster::zrange' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'start' => 'int',
    'end' => 'int',
    'options=' => 'bool|null',
  ),
  'rediscluster::zrangebylex' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'min' => 'string',
    'max' => 'string',
    'offset=' => 'int',
    'count=' => 'int',
  ),
  'rediscluster::zrangebyscore' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'start' => 'string',
    'end' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'rediscluster::zrangestore' => 
  array (
    0 => 'RedisCluster|false|int',
    'dstkey' => 'string',
    'srckey' => 'string',
    'start' => 'int',
    'end' => 'int',
    'options=' => 'array<array-key, mixed>|bool|null',
  ),
  'rediscluster::zrank' => 
  array (
    0 => 'int',
    'key' => 'string',
    'member' => 'string',
  ),
  'rediscluster::zrem' => 
  array (
    0 => 'int',
    'key' => 'string',
    'value' => 'string',
    '...other_values=' => 'string',
  ),
  'rediscluster::zremrangebylex' => 
  array (
    0 => 'RedisCluster|false|int',
    'key' => 'string',
    'min' => 'string',
    'max' => 'string',
  ),
  'rediscluster::zremrangebyrank' => 
  array (
    0 => 'int',
    'key' => 'string',
    'min' => 'string',
    'max' => 'string',
  ),
  'rediscluster::zremrangebyscore' => 
  array (
    0 => 'int',
    'key' => 'string',
    'min' => 'string',
    'max' => 'string',
  ),
  'rediscluster::zrevrange' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'min' => 'string',
    'max' => 'string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'rediscluster::zrevrangebylex' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'min' => 'string',
    'max' => 'string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'rediscluster::zrevrangebyscore' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
    'min' => 'string',
    'max' => 'string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'rediscluster::zrevrank' => 
  array (
    0 => 'int',
    'key' => 'string',
    'member' => 'string',
  ),
  'rediscluster::zscan' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'key' => 'string',
    '&iterator' => 'int|null',
    'pattern=' => 'null|string',
    'count=' => 'int',
  ),
  'rediscluster::zscore' => 
  array (
    0 => 'float',
    'key' => 'string',
    'member' => 'string',
  ),
  'rediscluster::zunion' => 
  array (
    0 => 'RedisCluster|array<array-key, mixed>|false',
    'keys' => 'array<array-key, mixed>',
    'weights=' => 'array<array-key, mixed>|null',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'rediscluster::zunionstore' => 
  array (
    0 => 'int',
    'dst' => 'string',
    'keys' => 'array<array-key, mixed>',
    'weights=' => 'array<array-key, mixed>|null',
    'aggregate=' => 'null|string',
  ),
  'redisclusterexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'redisclusterexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'redisclusterexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'redisclusterexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'redisclusterexception::getfile' => 
  array (
    0 => 'string',
  ),
  'redisclusterexception::getline' => 
  array (
    0 => 'int',
  ),
  'redisclusterexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'redisclusterexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'redisclusterexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'redisclusterexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'redisexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'redisexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'redisexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'redisexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'redisexception::getfile' => 
  array (
    0 => 'string',
  ),
  'redisexception::getline' => 
  array (
    0 => 'int',
  ),
  'redisexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'redisexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'redisexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'redisexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'redissentinel::__construct' => 
  array (
    0 => 'void',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'redissentinel::ckquorum' => 
  array (
    0 => 'mixed',
    'master' => 'string',
  ),
  'redissentinel::failover' => 
  array (
    0 => 'mixed',
    'master' => 'string',
  ),
  'redissentinel::flushconfig' => 
  array (
    0 => 'mixed',
  ),
  'redissentinel::getmasteraddrbyname' => 
  array (
    0 => 'mixed',
    'master' => 'string',
  ),
  'redissentinel::master' => 
  array (
    0 => 'mixed',
    'master' => 'string',
  ),
  'redissentinel::masters' => 
  array (
    0 => 'mixed',
  ),
  'redissentinel::myid' => 
  array (
    0 => 'string',
  ),
  'redissentinel::ping' => 
  array (
    0 => 'mixed',
  ),
  'redissentinel::reset' => 
  array (
    0 => 'mixed',
    'pattern' => 'string',
  ),
  'redissentinel::sentinels' => 
  array (
    0 => 'mixed',
    'master' => 'string',
  ),
  'redissentinel::slaves' => 
  array (
    0 => 'mixed',
    'master' => 'string',
  ),
  'reflection::getmodifiernames' => 
  array (
    0 => 'list<string>',
    'modifiers' => 'int',
  ),
  'reflectionattribute::__clone' => 
  array (
    0 => 'void',
  ),
  'reflectionattribute::__construct' => 
  array (
    0 => 'void',
  ),
  'reflectionattribute::getarguments' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'reflectionattribute::getname' => 
  array (
    0 => 'string',
  ),
  'reflectionattribute::gettarget' => 
  array (
    0 => 'int',
  ),
  'reflectionattribute::isrepeated' => 
  array (
    0 => 'bool',
  ),
  'reflectionattribute::newinstance' => 
  array (
    0 => 'object',
  ),
  'reflectionclass::__clone' => 
  array (
    0 => 'void',
  ),
  'reflectionclass::__construct' => 
  array (
    0 => 'void',
    'objectOrClass' => 'class-string|object',
  ),
  'reflectionclass::__tostring' => 
  array (
    0 => 'string',
  ),
  'reflectionclass::getattributes' => 
  array (
    0 => 'list<ReflectionAttribute>',
    'name=' => 'null|string',
    'flags=' => 'int',
  ),
  'reflectionclass::getconstant' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'reflectionclass::getconstants' => 
  array (
    0 => 'array<string, mixed>',
    'filter=' => 'int|null',
  ),
  'reflectionclass::getconstructor' => 
  array (
    0 => 'ReflectionMethod|null',
  ),
  'reflectionclass::getdefaultproperties' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'reflectionclass::getdoccomment' => 
  array (
    0 => 'false|string',
  ),
  'reflectionclass::getendline' => 
  array (
    0 => 'false|int',
  ),
  'reflectionclass::getextension' => 
  array (
    0 => 'ReflectionExtension|null',
  ),
  'reflectionclass::getextensionname' => 
  array (
    0 => 'false|string',
  ),
  'reflectionclass::getfilename' => 
  array (
    0 => 'false|string',
  ),
  'reflectionclass::getinterfacenames' => 
  array (
    0 => 'list<class-string>',
  ),
  'reflectionclass::getinterfaces' => 
  array (
    0 => 'array<class-string, ReflectionClass>',
  ),
  'reflectionclass::getmethod' => 
  array (
    0 => 'ReflectionMethod',
    'name' => 'string',
  ),
  'reflectionclass::getmethods' => 
  array (
    0 => 'list<ReflectionMethod>',
    'filter=' => 'int|null',
  ),
  'reflectionclass::getmodifiers' => 
  array (
    0 => 'int',
  ),
  'reflectionclass::getname' => 
  array (
    0 => 'class-string',
  ),
  'reflectionclass::getnamespacename' => 
  array (
    0 => 'string',
  ),
  'reflectionclass::getparentclass' => 
  array (
    0 => 'ReflectionClass|false',
  ),
  'reflectionclass::getproperties' => 
  array (
    0 => 'list<ReflectionProperty>',
    'filter=' => 'int|null',
  ),
  'reflectionclass::getproperty' => 
  array (
    0 => 'ReflectionProperty',
    'name' => 'string',
  ),
  'reflectionclass::getreflectionconstant' => 
  array (
    0 => 'ReflectionClassConstant|false',
    'name' => 'string',
  ),
  'reflectionclass::getreflectionconstants' => 
  array (
    0 => 'list<ReflectionClassConstant>',
    'filter=' => 'int|null',
  ),
  'reflectionclass::getshortname' => 
  array (
    0 => 'string',
  ),
  'reflectionclass::getstartline' => 
  array (
    0 => 'false|int',
  ),
  'reflectionclass::getstaticproperties' => 
  array (
    0 => 'array<string, ReflectionProperty>',
  ),
  'reflectionclass::getstaticpropertyvalue' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'default=' => 'mixed',
  ),
  'reflectionclass::gettraitaliases' => 
  array (
    0 => 'array<string, string>',
  ),
  'reflectionclass::gettraitnames' => 
  array (
    0 => 'list<trait-string>',
  ),
  'reflectionclass::gettraits' => 
  array (
    0 => 'array<trait-string, ReflectionClass>',
  ),
  'reflectionclass::hasconstant' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'reflectionclass::hasmethod' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'reflectionclass::hasproperty' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'reflectionclass::implementsinterface' => 
  array (
    0 => 'bool',
    'interface' => 'ReflectionClass|class-string',
  ),
  'reflectionclass::innamespace' => 
  array (
    0 => 'bool',
  ),
  'reflectionclass::isabstract' => 
  array (
    0 => 'bool',
  ),
  'reflectionclass::isanonymous' => 
  array (
    0 => 'bool',
  ),
  'reflectionclass::iscloneable' => 
  array (
    0 => 'bool',
  ),
  'reflectionclass::isfinal' => 
  array (
    0 => 'bool',
  ),
  'reflectionclass::isinstance' => 
  array (
    0 => 'bool',
    'object' => 'object',
  ),
  'reflectionclass::isinstantiable' => 
  array (
    0 => 'bool',
  ),
  'reflectionclass::isinterface' => 
  array (
    0 => 'bool',
  ),
  'reflectionclass::isinternal' => 
  array (
    0 => 'bool',
  ),
  'reflectionclass::isiterable' => 
  array (
    0 => 'bool',
  ),
  'reflectionclass::isiterateable' => 
  array (
    0 => 'bool',
  ),
  'reflectionclass::issubclassof' => 
  array (
    0 => 'bool',
    'class' => 'ReflectionClass|class-string',
  ),
  'reflectionclass::istrait' => 
  array (
    0 => 'bool',
  ),
  'reflectionclass::isuserdefined' => 
  array (
    0 => 'bool',
  ),
  'reflectionclass::newinstance' => 
  array (
    0 => 'object',
    '...args=' => 'mixed',
  ),
  'reflectionclass::newinstanceargs' => 
  array (
    0 => 'object',
    'args=' => 'array<int<0, max>|string, mixed>',
  ),
  'reflectionclass::newinstancewithoutconstructor' => 
  array (
    0 => 'object',
  ),
  'reflectionclass::setstaticpropertyvalue' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'reflectionclassconstant::__clone' => 
  array (
    0 => 'void',
  ),
  'reflectionclassconstant::__construct' => 
  array (
    0 => 'void',
    'class' => 'class-string|object',
    'constant' => 'string',
  ),
  'reflectionclassconstant::__tostring' => 
  array (
    0 => 'string',
  ),
  'reflectionclassconstant::getattributes' => 
  array (
    0 => 'list<ReflectionAttribute>',
    'name=' => 'null|string',
    'flags=' => 'int',
  ),
  'reflectionclassconstant::getdeclaringclass' => 
  array (
    0 => 'ReflectionClass',
  ),
  'reflectionclassconstant::getdoccomment' => 
  array (
    0 => 'false|string',
  ),
  'reflectionclassconstant::getmodifiers' => 
  array (
    0 => 'int',
  ),
  'reflectionclassconstant::getname' => 
  array (
    0 => 'string',
  ),
  'reflectionclassconstant::getvalue' => 
  array (
    0 => 'array<array-key, scalar>|null|scalar',
  ),
  'reflectionclassconstant::isprivate' => 
  array (
    0 => 'bool',
  ),
  'reflectionclassconstant::isprotected' => 
  array (
    0 => 'bool',
  ),
  'reflectionclassconstant::ispublic' => 
  array (
    0 => 'bool',
  ),
  'reflectionexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'reflectionexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'reflectionexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'reflectionexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'reflectionexception::getfile' => 
  array (
    0 => 'string',
  ),
  'reflectionexception::getline' => 
  array (
    0 => 'int',
  ),
  'reflectionexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'reflectionexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'reflectionexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'reflectionexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'reflectionextension::__clone' => 
  array (
    0 => 'void',
  ),
  'reflectionextension::__construct' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'reflectionextension::__tostring' => 
  array (
    0 => 'string',
  ),
  'reflectionextension::getclasses' => 
  array (
    0 => 'array<class-string, ReflectionClass>',
  ),
  'reflectionextension::getclassnames' => 
  array (
    0 => 'list<class-string>',
  ),
  'reflectionextension::getconstants' => 
  array (
    0 => 'array<string, mixed>',
  ),
  'reflectionextension::getdependencies' => 
  array (
    0 => 'array<string, string>',
  ),
  'reflectionextension::getfunctions' => 
  array (
    0 => 'array<string, ReflectionFunction>',
  ),
  'reflectionextension::getinientries' => 
  array (
    0 => 'array<string, mixed>',
  ),
  'reflectionextension::getname' => 
  array (
    0 => 'string',
  ),
  'reflectionextension::getversion' => 
  array (
    0 => 'null|string',
  ),
  'reflectionextension::info' => 
  array (
    0 => 'void',
  ),
  'reflectionextension::ispersistent' => 
  array (
    0 => 'bool',
  ),
  'reflectionextension::istemporary' => 
  array (
    0 => 'bool',
  ),
  'reflectionfunction::__construct' => 
  array (
    0 => 'void',
    'function' => 'Closure|callable-string',
  ),
  'reflectionfunction::__tostring' => 
  array (
    0 => 'string',
  ),
  'reflectionfunction::getattributes' => 
  array (
    0 => 'array<array-key, mixed>',
    'name=' => 'null|string',
    'flags=' => 'int',
  ),
  'reflectionfunction::getclosure' => 
  array (
    0 => 'Closure',
  ),
  'reflectionfunction::getclosurecalledclass' => 
  array (
    0 => 'mixed',
  ),
  'reflectionfunction::getclosurescopeclass' => 
  array (
    0 => 'ReflectionClass',
  ),
  'reflectionfunction::getclosurethis' => 
  array (
    0 => 'object',
  ),
  'reflectionfunction::getdoccomment' => 
  array (
    0 => 'false|string',
  ),
  'reflectionfunction::getendline' => 
  array (
    0 => 'false|int',
  ),
  'reflectionfunction::getextension' => 
  array (
    0 => 'ReflectionExtension|null',
  ),
  'reflectionfunction::getextensionname' => 
  array (
    0 => 'false|string',
  ),
  'reflectionfunction::getfilename' => 
  array (
    0 => 'false|string',
  ),
  'reflectionfunction::getname' => 
  array (
    0 => 'callable-string',
  ),
  'reflectionfunction::getnamespacename' => 
  array (
    0 => 'string',
  ),
  'reflectionfunction::getnumberofparameters' => 
  array (
    0 => 'int',
  ),
  'reflectionfunction::getnumberofrequiredparameters' => 
  array (
    0 => 'int',
  ),
  'reflectionfunction::getparameters' => 
  array (
    0 => 'list<ReflectionParameter>',
  ),
  'reflectionfunction::getreturntype' => 
  array (
    0 => 'ReflectionType|null',
  ),
  'reflectionfunction::getshortname' => 
  array (
    0 => 'string',
  ),
  'reflectionfunction::getstartline' => 
  array (
    0 => 'false|int',
  ),
  'reflectionfunction::getstaticvariables' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'reflectionfunction::hasreturntype' => 
  array (
    0 => 'bool',
  ),
  'reflectionfunction::innamespace' => 
  array (
    0 => 'bool',
  ),
  'reflectionfunction::invoke' => 
  array (
    0 => 'mixed',
    '...args=' => 'mixed',
  ),
  'reflectionfunction::invokeargs' => 
  array (
    0 => 'mixed',
    'args' => 'array<array-key, mixed>',
  ),
  'reflectionfunction::isclosure' => 
  array (
    0 => 'bool',
  ),
  'reflectionfunction::isdeprecated' => 
  array (
    0 => 'bool',
  ),
  'reflectionfunction::isdisabled' => 
  array (
    0 => 'bool',
  ),
  'reflectionfunction::isgenerator' => 
  array (
    0 => 'bool',
  ),
  'reflectionfunction::isinternal' => 
  array (
    0 => 'bool',
  ),
  'reflectionfunction::isuserdefined' => 
  array (
    0 => 'bool',
  ),
  'reflectionfunction::isvariadic' => 
  array (
    0 => 'bool',
  ),
  'reflectionfunction::returnsreference' => 
  array (
    0 => 'bool',
  ),
  'reflectionfunctionabstract::__clone' => 
  array (
    0 => 'void',
  ),
  'reflectionfunctionabstract::__tostring' => 
  array (
    0 => 'string',
  ),
  'reflectionfunctionabstract::getattributes' => 
  array (
    0 => 'list<ReflectionAttribute>',
    'name=' => 'null|string',
    'flags=' => 'int',
  ),
  'reflectionfunctionabstract::getclosurecalledclass' => 
  array (
    0 => 'mixed',
  ),
  'reflectionfunctionabstract::getclosurescopeclass' => 
  array (
    0 => 'ReflectionClass|null',
  ),
  'reflectionfunctionabstract::getclosurethis' => 
  array (
    0 => 'null|object',
  ),
  'reflectionfunctionabstract::getdoccomment' => 
  array (
    0 => 'false|string',
  ),
  'reflectionfunctionabstract::getendline' => 
  array (
    0 => 'false|int',
  ),
  'reflectionfunctionabstract::getextension' => 
  array (
    0 => 'ReflectionExtension|null',
  ),
  'reflectionfunctionabstract::getextensionname' => 
  array (
    0 => 'false|string',
  ),
  'reflectionfunctionabstract::getfilename' => 
  array (
    0 => 'false|string',
  ),
  'reflectionfunctionabstract::getname' => 
  array (
    0 => 'string',
  ),
  'reflectionfunctionabstract::getnamespacename' => 
  array (
    0 => 'string',
  ),
  'reflectionfunctionabstract::getnumberofparameters' => 
  array (
    0 => 'int',
  ),
  'reflectionfunctionabstract::getnumberofrequiredparameters' => 
  array (
    0 => 'int',
  ),
  'reflectionfunctionabstract::getparameters' => 
  array (
    0 => 'list<ReflectionParameter>',
  ),
  'reflectionfunctionabstract::getreturntype' => 
  array (
    0 => 'ReflectionType|null',
  ),
  'reflectionfunctionabstract::getshortname' => 
  array (
    0 => 'string',
  ),
  'reflectionfunctionabstract::getstartline' => 
  array (
    0 => 'false|int',
  ),
  'reflectionfunctionabstract::getstaticvariables' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'reflectionfunctionabstract::hasreturntype' => 
  array (
    0 => 'bool',
  ),
  'reflectionfunctionabstract::innamespace' => 
  array (
    0 => 'bool',
  ),
  'reflectionfunctionabstract::isclosure' => 
  array (
    0 => 'bool',
  ),
  'reflectionfunctionabstract::isdeprecated' => 
  array (
    0 => 'bool',
  ),
  'reflectionfunctionabstract::isgenerator' => 
  array (
    0 => 'bool',
  ),
  'reflectionfunctionabstract::isinternal' => 
  array (
    0 => 'bool',
  ),
  'reflectionfunctionabstract::isuserdefined' => 
  array (
    0 => 'bool',
  ),
  'reflectionfunctionabstract::isvariadic' => 
  array (
    0 => 'bool',
  ),
  'reflectionfunctionabstract::returnsreference' => 
  array (
    0 => 'bool',
  ),
  'reflectiongenerator::__construct' => 
  array (
    0 => 'void',
    'generator' => 'Generator',
  ),
  'reflectiongenerator::getexecutingfile' => 
  array (
    0 => 'string',
  ),
  'reflectiongenerator::getexecutinggenerator' => 
  array (
    0 => 'Generator',
  ),
  'reflectiongenerator::getexecutingline' => 
  array (
    0 => 'int',
  ),
  'reflectiongenerator::getfunction' => 
  array (
    0 => 'ReflectionFunctionAbstract',
  ),
  'reflectiongenerator::getthis' => 
  array (
    0 => 'null|object',
  ),
  'reflectiongenerator::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
    'options=' => 'int',
  ),
  'reflectionmethod::__construct' => 
  array (
    0 => 'void',
    'objectOrMethod' => 'class-string|object',
    'method=' => 'null|string',
  ),
  'reflectionmethod::__construct\'1' => 
  array (
    0 => 'void',
    'class_method' => 'string',
  ),
  'reflectionmethod::__tostring' => 
  array (
    0 => 'string',
  ),
  'reflectionmethod::getattributes' => 
  array (
    0 => 'array<array-key, mixed>',
    'name=' => 'null|string',
    'flags=' => 'int',
  ),
  'reflectionmethod::getclosure' => 
  array (
    0 => 'Closure',
    'object=' => 'null|object',
  ),
  'reflectionmethod::getclosurecalledclass' => 
  array (
    0 => 'mixed',
  ),
  'reflectionmethod::getclosurescopeclass' => 
  array (
    0 => 'ReflectionClass',
  ),
  'reflectionmethod::getclosurethis' => 
  array (
    0 => 'object',
  ),
  'reflectionmethod::getdeclaringclass' => 
  array (
    0 => 'ReflectionClass',
  ),
  'reflectionmethod::getdoccomment' => 
  array (
    0 => 'false|string',
  ),
  'reflectionmethod::getendline' => 
  array (
    0 => 'false|int',
  ),
  'reflectionmethod::getextension' => 
  array (
    0 => 'ReflectionExtension|null',
  ),
  'reflectionmethod::getextensionname' => 
  array (
    0 => 'false|string',
  ),
  'reflectionmethod::getfilename' => 
  array (
    0 => 'false|string',
  ),
  'reflectionmethod::getmodifiers' => 
  array (
    0 => 'int',
  ),
  'reflectionmethod::getname' => 
  array (
    0 => 'string',
  ),
  'reflectionmethod::getnamespacename' => 
  array (
    0 => 'string',
  ),
  'reflectionmethod::getnumberofparameters' => 
  array (
    0 => 'int',
  ),
  'reflectionmethod::getnumberofrequiredparameters' => 
  array (
    0 => 'int',
  ),
  'reflectionmethod::getparameters' => 
  array (
    0 => 'list<ReflectionParameter>',
  ),
  'reflectionmethod::getprototype' => 
  array (
    0 => 'ReflectionMethod',
  ),
  'reflectionmethod::getreturntype' => 
  array (
    0 => 'ReflectionType|null',
  ),
  'reflectionmethod::getshortname' => 
  array (
    0 => 'string',
  ),
  'reflectionmethod::getstartline' => 
  array (
    0 => 'false|int',
  ),
  'reflectionmethod::getstaticvariables' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'reflectionmethod::hasreturntype' => 
  array (
    0 => 'bool',
  ),
  'reflectionmethod::innamespace' => 
  array (
    0 => 'bool',
  ),
  'reflectionmethod::invoke' => 
  array (
    0 => 'mixed',
    'object' => 'null|object',
    '...args=' => 'mixed',
  ),
  'reflectionmethod::invokeargs' => 
  array (
    0 => 'mixed',
    'object' => 'null|object',
    'args' => 'array<array-key, mixed>',
  ),
  'reflectionmethod::isabstract' => 
  array (
    0 => 'bool',
  ),
  'reflectionmethod::isclosure' => 
  array (
    0 => 'bool',
  ),
  'reflectionmethod::isconstructor' => 
  array (
    0 => 'bool',
  ),
  'reflectionmethod::isdeprecated' => 
  array (
    0 => 'bool',
  ),
  'reflectionmethod::isdestructor' => 
  array (
    0 => 'bool',
  ),
  'reflectionmethod::isfinal' => 
  array (
    0 => 'bool',
  ),
  'reflectionmethod::isgenerator' => 
  array (
    0 => 'bool',
  ),
  'reflectionmethod::isinternal' => 
  array (
    0 => 'bool',
  ),
  'reflectionmethod::isprivate' => 
  array (
    0 => 'bool',
  ),
  'reflectionmethod::isprotected' => 
  array (
    0 => 'bool',
  ),
  'reflectionmethod::ispublic' => 
  array (
    0 => 'bool',
  ),
  'reflectionmethod::isstatic' => 
  array (
    0 => 'bool',
  ),
  'reflectionmethod::isuserdefined' => 
  array (
    0 => 'bool',
  ),
  'reflectionmethod::isvariadic' => 
  array (
    0 => 'bool',
  ),
  'reflectionmethod::returnsreference' => 
  array (
    0 => 'bool',
  ),
  'reflectionmethod::setaccessible' => 
  array (
    0 => 'void',
    'accessible' => 'bool',
  ),
  'reflectionnamedtype::__tostring' => 
  array (
    0 => 'string',
  ),
  'reflectionnamedtype::allowsnull' => 
  array (
    0 => 'bool',
  ),
  'reflectionnamedtype::getname' => 
  array (
    0 => 'string',
  ),
  'reflectionnamedtype::isbuiltin' => 
  array (
    0 => 'bool',
  ),
  'reflectionobject::__construct' => 
  array (
    0 => 'void',
    'object' => 'object',
  ),
  'reflectionobject::__tostring' => 
  array (
    0 => 'string',
  ),
  'reflectionobject::getattributes' => 
  array (
    0 => 'array<array-key, mixed>',
    'name=' => 'null|string',
    'flags=' => 'int',
  ),
  'reflectionobject::getconstant' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'reflectionobject::getconstants' => 
  array (
    0 => 'array<string, mixed>',
    'filter=' => 'int|null',
  ),
  'reflectionobject::getconstructor' => 
  array (
    0 => 'ReflectionMethod|null',
  ),
  'reflectionobject::getdefaultproperties' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'reflectionobject::getdoccomment' => 
  array (
    0 => 'false|string',
  ),
  'reflectionobject::getendline' => 
  array (
    0 => 'false|int',
  ),
  'reflectionobject::getextension' => 
  array (
    0 => 'ReflectionExtension|null',
  ),
  'reflectionobject::getextensionname' => 
  array (
    0 => 'false|string',
  ),
  'reflectionobject::getfilename' => 
  array (
    0 => 'false|string',
  ),
  'reflectionobject::getinterfacenames' => 
  array (
    0 => 'array<array-key, class-string>',
  ),
  'reflectionobject::getinterfaces' => 
  array (
    0 => 'array<string, ReflectionClass>',
  ),
  'reflectionobject::getmethod' => 
  array (
    0 => 'ReflectionMethod',
    'name' => 'string',
  ),
  'reflectionobject::getmethods' => 
  array (
    0 => 'array<array-key, ReflectionMethod>',
    'filter=' => 'int|null',
  ),
  'reflectionobject::getmodifiers' => 
  array (
    0 => 'int',
  ),
  'reflectionobject::getname' => 
  array (
    0 => 'string',
  ),
  'reflectionobject::getnamespacename' => 
  array (
    0 => 'string',
  ),
  'reflectionobject::getparentclass' => 
  array (
    0 => 'ReflectionClass|false',
  ),
  'reflectionobject::getproperties' => 
  array (
    0 => 'array<array-key, ReflectionProperty>',
    'filter=' => 'int|null',
  ),
  'reflectionobject::getproperty' => 
  array (
    0 => 'ReflectionProperty',
    'name' => 'string',
  ),
  'reflectionobject::getreflectionconstant' => 
  array (
    0 => 'ReflectionClassConstant',
    'name' => 'string',
  ),
  'reflectionobject::getreflectionconstants' => 
  array (
    0 => 'list<ReflectionClassConstant>',
    'filter=' => 'int|null',
  ),
  'reflectionobject::getshortname' => 
  array (
    0 => 'string',
  ),
  'reflectionobject::getstartline' => 
  array (
    0 => 'false|int',
  ),
  'reflectionobject::getstaticproperties' => 
  array (
    0 => 'array<array-key, ReflectionProperty>',
  ),
  'reflectionobject::getstaticpropertyvalue' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'default=' => 'mixed',
  ),
  'reflectionobject::gettraitaliases' => 
  array (
    0 => 'array<string, string>',
  ),
  'reflectionobject::gettraitnames' => 
  array (
    0 => 'list<string>',
  ),
  'reflectionobject::gettraits' => 
  array (
    0 => 'array<string, ReflectionClass>',
  ),
  'reflectionobject::hasconstant' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'reflectionobject::hasmethod' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'reflectionobject::hasproperty' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'reflectionobject::implementsinterface' => 
  array (
    0 => 'bool',
    'interface' => 'ReflectionClass|class-string',
  ),
  'reflectionobject::innamespace' => 
  array (
    0 => 'bool',
  ),
  'reflectionobject::isabstract' => 
  array (
    0 => 'bool',
  ),
  'reflectionobject::isanonymous' => 
  array (
    0 => 'bool',
  ),
  'reflectionobject::iscloneable' => 
  array (
    0 => 'bool',
  ),
  'reflectionobject::isfinal' => 
  array (
    0 => 'bool',
  ),
  'reflectionobject::isinstance' => 
  array (
    0 => 'bool',
    'object' => 'object',
  ),
  'reflectionobject::isinstantiable' => 
  array (
    0 => 'bool',
  ),
  'reflectionobject::isinterface' => 
  array (
    0 => 'bool',
  ),
  'reflectionobject::isinternal' => 
  array (
    0 => 'bool',
  ),
  'reflectionobject::isiterable' => 
  array (
    0 => 'bool',
  ),
  'reflectionobject::isiterateable' => 
  array (
    0 => 'bool',
  ),
  'reflectionobject::issubclassof' => 
  array (
    0 => 'bool',
    'class' => 'ReflectionClass|string',
  ),
  'reflectionobject::istrait' => 
  array (
    0 => 'bool',
  ),
  'reflectionobject::isuserdefined' => 
  array (
    0 => 'bool',
  ),
  'reflectionobject::newinstance' => 
  array (
    0 => 'object',
    '...args=' => 'array<array-key, mixed>',
  ),
  'reflectionobject::newinstanceargs' => 
  array (
    0 => 'object',
    'args=' => 'array<int<0, max>|string, mixed>',
  ),
  'reflectionobject::newinstancewithoutconstructor' => 
  array (
    0 => 'object',
  ),
  'reflectionobject::setstaticpropertyvalue' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'string',
  ),
  'reflectionparameter::__clone' => 
  array (
    0 => 'void',
  ),
  'reflectionparameter::__construct' => 
  array (
    0 => 'void',
    'function' => 'array<array-key, mixed>|object|string',
    'param' => 'int|string',
  ),
  'reflectionparameter::__tostring' => 
  array (
    0 => 'string',
  ),
  'reflectionparameter::allowsnull' => 
  array (
    0 => 'bool',
  ),
  'reflectionparameter::canbepassedbyvalue' => 
  array (
    0 => 'bool',
  ),
  'reflectionparameter::getattributes' => 
  array (
    0 => 'list<ReflectionAttribute>',
    'name=' => 'null|string',
    'flags=' => 'int',
  ),
  'reflectionparameter::getclass' => 
  array (
    0 => 'ReflectionClass|null',
  ),
  'reflectionparameter::getdeclaringclass' => 
  array (
    0 => 'ReflectionClass|null',
  ),
  'reflectionparameter::getdeclaringfunction' => 
  array (
    0 => 'ReflectionFunctionAbstract',
  ),
  'reflectionparameter::getdefaultvalue' => 
  array (
    0 => 'mixed',
  ),
  'reflectionparameter::getdefaultvalueconstantname' => 
  array (
    0 => 'null|string',
  ),
  'reflectionparameter::getname' => 
  array (
    0 => 'non-empty-string',
  ),
  'reflectionparameter::getposition' => 
  array (
    0 => 'int<0, max>',
  ),
  'reflectionparameter::gettype' => 
  array (
    0 => 'ReflectionType|null',
  ),
  'reflectionparameter::hastype' => 
  array (
    0 => 'bool',
  ),
  'reflectionparameter::isarray' => 
  array (
    0 => 'bool',
  ),
  'reflectionparameter::iscallable' => 
  array (
    0 => 'bool',
  ),
  'reflectionparameter::isdefaultvalueavailable' => 
  array (
    0 => 'bool',
  ),
  'reflectionparameter::isdefaultvalueconstant' => 
  array (
    0 => 'bool',
  ),
  'reflectionparameter::isoptional' => 
  array (
    0 => 'bool',
  ),
  'reflectionparameter::ispassedbyreference' => 
  array (
    0 => 'bool',
  ),
  'reflectionparameter::ispromoted' => 
  array (
    0 => 'bool',
  ),
  'reflectionparameter::isvariadic' => 
  array (
    0 => 'bool',
  ),
  'reflectionproperty::__clone' => 
  array (
    0 => 'void',
  ),
  'reflectionproperty::__construct' => 
  array (
    0 => 'void',
    'class' => 'class-string|object',
    'property' => 'string',
  ),
  'reflectionproperty::__tostring' => 
  array (
    0 => 'string',
  ),
  'reflectionproperty::getattributes' => 
  array (
    0 => 'list<ReflectionAttribute>',
    'name=' => 'null|string',
    'flags=' => 'int',
  ),
  'reflectionproperty::getdeclaringclass' => 
  array (
    0 => 'ReflectionClass',
  ),
  'reflectionproperty::getdefaultvalue' => 
  array (
    0 => 'mixed',
  ),
  'reflectionproperty::getdoccomment' => 
  array (
    0 => 'false|string',
  ),
  'reflectionproperty::getmodifiers' => 
  array (
    0 => 'int',
  ),
  'reflectionproperty::getname' => 
  array (
    0 => 'string',
  ),
  'reflectionproperty::gettype' => 
  array (
    0 => 'ReflectionType|null',
  ),
  'reflectionproperty::getvalue' => 
  array (
    0 => 'mixed',
    'object=' => 'null|object',
  ),
  'reflectionproperty::hasdefaultvalue' => 
  array (
    0 => 'bool',
  ),
  'reflectionproperty::hastype' => 
  array (
    0 => 'bool',
  ),
  'reflectionproperty::isdefault' => 
  array (
    0 => 'bool',
  ),
  'reflectionproperty::isinitialized' => 
  array (
    0 => 'bool',
    'object=' => 'null|object',
  ),
  'reflectionproperty::isprivate' => 
  array (
    0 => 'bool',
  ),
  'reflectionproperty::ispromoted' => 
  array (
    0 => 'bool',
  ),
  'reflectionproperty::isprotected' => 
  array (
    0 => 'bool',
  ),
  'reflectionproperty::ispublic' => 
  array (
    0 => 'bool',
  ),
  'reflectionproperty::isstatic' => 
  array (
    0 => 'bool',
  ),
  'reflectionproperty::setaccessible' => 
  array (
    0 => 'void',
    'accessible' => 'bool',
  ),
  'reflectionproperty::setvalue' => 
  array (
    0 => 'void',
    'objectOrValue' => 'null|object',
    'value=' => 'mixed',
  ),
  'reflectionproperty::setvalue\'1' => 
  array (
    0 => 'void',
    'value' => 'mixed',
  ),
  'reflectionreference::__clone' => 
  array (
    0 => 'void',
  ),
  'reflectionreference::__construct' => 
  array (
    0 => 'void',
  ),
  'reflectionreference::fromarrayelement' => 
  array (
    0 => 'ReflectionReference|null',
    'array' => 'array<array-key, mixed>',
    'key' => 'int|string',
  ),
  'reflectionreference::getid' => 
  array (
    0 => 'string',
  ),
  'reflectiontype::__clone' => 
  array (
    0 => 'void',
  ),
  'reflectiontype::__tostring' => 
  array (
    0 => 'string',
  ),
  'reflectiontype::allowsnull' => 
  array (
    0 => 'bool',
  ),
  'reflectionuniontype::__tostring' => 
  array (
    0 => 'string',
  ),
  'reflectionuniontype::allowsnull' => 
  array (
    0 => 'mixed',
  ),
  'reflectionuniontype::gettypes' => 
  array (
    0 => 'list<ReflectionNamedType>',
  ),
  'reflectionzendextension::__clone' => 
  array (
    0 => 'void',
  ),
  'reflectionzendextension::__construct' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'reflectionzendextension::__tostring' => 
  array (
    0 => 'string',
  ),
  'reflectionzendextension::getauthor' => 
  array (
    0 => 'string',
  ),
  'reflectionzendextension::getcopyright' => 
  array (
    0 => 'string',
  ),
  'reflectionzendextension::getname' => 
  array (
    0 => 'string',
  ),
  'reflectionzendextension::geturl' => 
  array (
    0 => 'string',
  ),
  'reflectionzendextension::getversion' => 
  array (
    0 => 'string',
  ),
  'reflector::__tostring' => 
  array (
    0 => 'string',
  ),
  'reflector::export' => 
  array (
    0 => 'null|string',
  ),
  'regexiterator::__construct' => 
  array (
    0 => 'void',
    'iterator' => 'Iterator',
    'pattern' => 'string',
    'mode=' => 'int',
    'flags=' => 'int',
    'pregFlags=' => 'int',
  ),
  'regexiterator::accept' => 
  array (
    0 => 'bool',
  ),
  'regexiterator::current' => 
  array (
    0 => 'mixed',
  ),
  'regexiterator::getflags' => 
  array (
    0 => 'int',
  ),
  'regexiterator::getinneriterator' => 
  array (
    0 => 'Iterator',
  ),
  'regexiterator::getmode' => 
  array (
    0 => 'int',
  ),
  'regexiterator::getpregflags' => 
  array (
    0 => 'int',
  ),
  'regexiterator::getregex' => 
  array (
    0 => 'string',
  ),
  'regexiterator::key' => 
  array (
    0 => 'mixed',
  ),
  'regexiterator::next' => 
  array (
    0 => 'void',
  ),
  'regexiterator::rewind' => 
  array (
    0 => 'void',
  ),
  'regexiterator::setflags' => 
  array (
    0 => 'void',
    'flags' => 'int',
  ),
  'regexiterator::setmode' => 
  array (
    0 => 'void',
    'mode' => 'int',
  ),
  'regexiterator::setpregflags' => 
  array (
    0 => 'void',
    'pregFlags' => 'int',
  ),
  'regexiterator::valid' => 
  array (
    0 => 'bool',
  ),
  'register_event_handler' => 
  array (
    0 => 'bool',
    'event_handler_func' => 'string',
    'handler_register_name' => 'string',
    'event_type_mask' => 'int',
  ),
  'register_shutdown_function' => 
  array (
    0 => 'bool|null',
    'callback' => 'callable',
    '...args=' => 'mixed',
  ),
  'register_tick_function' => 
  array (
    0 => 'bool',
    'callback' => 'callable():void',
    '...args=' => 'mixed',
  ),
  'rename' => 
  array (
    0 => 'bool',
    'from' => 'string',
    'to' => 'string',
    'context=' => 'resource',
  ),
  'rename_function' => 
  array (
    0 => 'bool',
    'original_name' => 'string',
    'new_name' => 'string',
  ),
  'reset' => 
  array (
    0 => 'false|mixed',
    '&r_array' => 'array<array-key, mixed>|object',
  ),
  'resourcebundle::__construct' => 
  array (
    0 => 'void',
    'locale' => 'null|string',
    'bundle' => 'null|string',
    'fallback=' => 'bool',
  ),
  'resourcebundle::count' => 
  array (
    0 => 'int',
  ),
  'resourcebundle::create' => 
  array (
    0 => 'ResourceBundle|null',
    'locale' => 'null|string',
    'bundle' => 'null|string',
    'fallback=' => 'bool',
  ),
  'resourcebundle::get' => 
  array (
    0 => 'mixed',
    'index' => 'int|string',
    'fallback=' => 'bool',
  ),
  'resourcebundle::geterrorcode' => 
  array (
    0 => 'int',
  ),
  'resourcebundle::geterrormessage' => 
  array (
    0 => 'string',
  ),
  'resourcebundle::getiterator' => 
  array (
    0 => 'Iterator',
  ),
  'resourcebundle::getlocales' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'bundle' => 'string',
  ),
  'resourcebundle_count' => 
  array (
    0 => 'int',
    'bundle' => 'ResourceBundle',
  ),
  'resourcebundle_create' => 
  array (
    0 => 'ResourceBundle|null',
    'locale' => 'null|string',
    'bundle' => 'null|string',
    'fallback=' => 'bool',
  ),
  'resourcebundle_get' => 
  array (
    0 => 'mixed|null',
    'bundle' => 'ResourceBundle',
    'index' => 'int|string',
    'fallback=' => 'bool',
  ),
  'resourcebundle_get_error_code' => 
  array (
    0 => 'int',
    'bundle' => 'ResourceBundle',
  ),
  'resourcebundle_get_error_message' => 
  array (
    0 => 'string',
    'bundle' => 'ResourceBundle',
  ),
  'resourcebundle_locales' => 
  array (
    0 => 'array<array-key, mixed>',
    'bundle' => 'string',
  ),
  'restore_error_handler' => 
  array (
    0 => 'true',
  ),
  'restore_exception_handler' => 
  array (
    0 => 'true',
  ),
  'rewind' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
  ),
  'rewinddir' => 
  array (
    0 => 'void',
    'dir_handle=' => 'resource',
  ),
  'rmdir' => 
  array (
    0 => 'bool',
    'directory' => 'string',
    'context=' => 'resource',
  ),
  'round' => 
  array (
    0 => 'float',
    'num' => 'float|int',
    'precision=' => 'int',
    'mode=' => 'int<0, max>',
  ),
  'rpm_close' => 
  array (
    0 => 'bool',
    'rpmr' => 'resource',
  ),
  'rpm_get_tag' => 
  array (
    0 => 'mixed',
    'rpmr' => 'resource',
    'tagnum' => 'int',
  ),
  'rpm_is_valid' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'rpm_open' => 
  array (
    0 => 'false|resource',
    'filename' => 'string',
  ),
  'rpm_version' => 
  array (
    0 => 'string',
  ),
  'rpmaddtag' => 
  array (
    0 => 'bool',
    'tag' => 'int',
  ),
  'rpmdbinfo' => 
  array (
    0 => 'array<array-key, mixed>',
    'nevr' => 'string',
    'full=' => 'bool',
  ),
  'rpmdbsearch' => 
  array (
    0 => 'array<array-key, mixed>',
    'pattern' => 'string',
    'rpmtag=' => 'int',
    'rpmmire=' => 'int',
    'full=' => 'bool',
  ),
  'rpminfo' => 
  array (
    0 => 'array<array-key, mixed>',
    'path' => 'string',
    'full=' => 'bool',
    'error=' => 'string',
  ),
  'rpmvercmp' => 
  array (
    0 => 'int',
    'evr1' => 'string',
    'evr2' => 'string',
  ),
  'rrd_create' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'options' => 'array<array-key, mixed>',
  ),
  'rrd_disconnect' => 
  array (
    0 => 'void',
  ),
  'rrd_error' => 
  array (
    0 => 'string',
  ),
  'rrd_fetch' => 
  array (
    0 => 'array<array-key, mixed>',
    'filename' => 'string',
    'options' => 'array<array-key, mixed>',
  ),
  'rrd_first' => 
  array (
    0 => 'false|int',
    'file' => 'string',
    'raaindex=' => 'int',
  ),
  'rrd_graph' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'filename' => 'string',
    'options' => 'array<array-key, mixed>',
  ),
  'rrd_info' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'filename' => 'string',
  ),
  'rrd_last' => 
  array (
    0 => 'int',
    'filename' => 'string',
  ),
  'rrd_lastupdate' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'filename' => 'string',
  ),
  'rrd_restore' => 
  array (
    0 => 'bool',
    'xml_file' => 'string',
    'rrd_file' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'rrd_tune' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'options' => 'array<array-key, mixed>',
  ),
  'rrd_update' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'options' => 'array<array-key, mixed>',
  ),
  'rrd_version' => 
  array (
    0 => 'string',
  ),
  'rrd_xport' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'options' => 'array<array-key, mixed>',
  ),
  'rrdc_disconnect' => 
  array (
    0 => 'void',
  ),
  'rrdcreator::__construct' => 
  array (
    0 => 'void',
    'path' => 'string',
    'starttime=' => 'string',
    'step=' => 'int',
  ),
  'rrdcreator::addarchive' => 
  array (
    0 => 'void',
    'description' => 'string',
  ),
  'rrdcreator::adddatasource' => 
  array (
    0 => 'void',
    'description' => 'string',
  ),
  'rrdcreator::save' => 
  array (
    0 => 'bool',
  ),
  'rrdgraph::__construct' => 
  array (
    0 => 'void',
    'path' => 'string',
  ),
  'rrdgraph::save' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'rrdgraph::saveverbose' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'rrdgraph::setoptions' => 
  array (
    0 => 'void',
    'options' => 'array<array-key, mixed>',
  ),
  'rrdupdater::__construct' => 
  array (
    0 => 'void',
    'path' => 'string',
  ),
  'rrdupdater::update' => 
  array (
    0 => 'bool',
    'values' => 'array<array-key, mixed>',
    'time=' => 'string',
  ),
  'rsort' => 
  array (
    0 => 'bool',
    '&array' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'rtrim' => 
  array (
    0 => 'string',
    'string' => 'string',
    'characters=' => 'string',
  ),
  'runkit7_constant_add' => 
  array (
    0 => 'bool',
    'constant_name' => 'string',
    'value' => 'mixed',
    'new_visibility=' => 'int',
  ),
  'runkit7_constant_redefine' => 
  array (
    0 => 'bool',
    'constant_name' => 'string',
    'value' => 'mixed',
    'new_visibility=' => 'int|null',
  ),
  'runkit7_constant_remove' => 
  array (
    0 => 'bool',
    'constant_name' => 'string',
  ),
  'runkit7_function_add' => 
  array (
    0 => 'bool',
    'function_name' => 'string',
    'argument_list_or_closure' => 'Closure|string',
    'code_or_doc_comment=' => 'null|string',
    'return_by_reference=' => 'bool|null',
    'doc_comment=' => 'null|string',
    'return_type=' => 'null|string',
    'is_strict=' => 'bool|null',
  ),
  'runkit7_function_copy' => 
  array (
    0 => 'bool',
    'source_name' => 'string',
    'target_name' => 'string',
  ),
  'runkit7_function_redefine' => 
  array (
    0 => 'bool',
    'function_name' => 'string',
    'argument_list_or_closure' => 'Closure|string',
    'code_or_doc_comment=' => 'null|string',
    'return_by_reference=' => 'bool|null',
    'doc_comment=' => 'null|string',
    'return_type=' => 'null|string',
    'is_strict=' => 'bool|null',
  ),
  'runkit7_function_remove' => 
  array (
    0 => 'bool',
    'function_name' => 'string',
  ),
  'runkit7_function_rename' => 
  array (
    0 => 'bool',
    'source_name' => 'string',
    'target_name' => 'string',
  ),
  'runkit7_import' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'flags=' => 'int|null',
  ),
  'runkit7_method_add' => 
  array (
    0 => 'bool',
    'class_name' => 'string',
    'method_name' => 'string',
    'argument_list_or_closure' => 'Closure|string',
    'code_or_flags=' => 'int|null|string',
    'flags_or_doc_comment=' => 'int|null|string',
    'doc_comment=' => 'null|string',
    'return_type=' => 'null|string',
    'is_strict=' => 'bool|null',
  ),
  'runkit7_method_copy' => 
  array (
    0 => 'bool',
    'destination_class' => 'string',
    'destination_method' => 'string',
    'source_class' => 'string',
    'source_method=' => 'null|string',
  ),
  'runkit7_method_redefine' => 
  array (
    0 => 'bool',
    'class_name' => 'string',
    'method_name' => 'string',
    'argument_list_or_closure' => 'Closure|string',
    'code_or_flags=' => 'int|null|string',
    'flags_or_doc_comment=' => 'int|null|string',
    'doc_comment=' => 'null|string',
    'return_type=' => 'null|string',
    'is_strict=' => 'bool|null',
  ),
  'runkit7_method_remove' => 
  array (
    0 => 'bool',
    'class_name' => 'string',
    'method_name' => 'string',
  ),
  'runkit7_method_rename' => 
  array (
    0 => 'bool',
    'class_name' => 'string',
    'source_method_name' => 'string',
    'source_target_name' => 'string',
  ),
  'runkit7_superglobals' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'runkit7_zval_inspect' => 
  array (
    0 => 'array<array-key, mixed>',
    'value' => 'mixed',
  ),
  'runkit_class_adopt' => 
  array (
    0 => 'bool',
    'classname' => 'string',
    'parentname' => 'string',
  ),
  'runkit_class_emancipate' => 
  array (
    0 => 'bool',
    'classname' => 'string',
  ),
  'runkit_constant_add' => 
  array (
    0 => 'bool',
    'constname' => 'string',
    'value' => 'mixed',
  ),
  'runkit_constant_redefine' => 
  array (
    0 => 'bool',
    'constname' => 'string',
    'newvalue' => 'mixed',
  ),
  'runkit_constant_remove' => 
  array (
    0 => 'bool',
    'constname' => 'string',
  ),
  'runkit_function_add' => 
  array (
    0 => 'bool',
    'funcname' => 'string',
    'arglist' => 'string',
    'code' => 'string',
    'doccomment=' => 'null|string',
  ),
  'runkit_function_add\'1' => 
  array (
    0 => 'bool',
    'funcname' => 'string',
    'closure' => 'Closure',
    'doccomment=' => 'null|string',
  ),
  'runkit_function_copy' => 
  array (
    0 => 'bool',
    'funcname' => 'string',
    'targetname' => 'string',
  ),
  'runkit_function_redefine' => 
  array (
    0 => 'bool',
    'funcname' => 'string',
    'arglist' => 'string',
    'code' => 'string',
    'doccomment=' => 'null|string',
  ),
  'runkit_function_redefine\'1' => 
  array (
    0 => 'bool',
    'funcname' => 'string',
    'closure' => 'Closure',
    'doccomment=' => 'null|string',
  ),
  'runkit_function_remove' => 
  array (
    0 => 'bool',
    'funcname' => 'string',
  ),
  'runkit_function_rename' => 
  array (
    0 => 'bool',
    'funcname' => 'string',
    'newname' => 'string',
  ),
  'runkit_import' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'flags=' => 'int',
  ),
  'runkit_lint' => 
  array (
    0 => 'bool',
    'code' => 'string',
  ),
  'runkit_lint_file' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'runkit_method_add' => 
  array (
    0 => 'bool',
    'classname' => 'string',
    'methodname' => 'string',
    'args' => 'string',
    'code' => 'string',
    'flags=' => 'int',
    'doccomment=' => 'null|string',
  ),
  'runkit_method_add\'1' => 
  array (
    0 => 'bool',
    'classname' => 'string',
    'methodname' => 'string',
    'closure' => 'Closure',
    'flags=' => 'int',
    'doccomment=' => 'null|string',
  ),
  'runkit_method_copy' => 
  array (
    0 => 'bool',
    'dclass' => 'string',
    'dmethod' => 'string',
    'sclass' => 'string',
    'smethod=' => 'string',
  ),
  'runkit_method_redefine' => 
  array (
    0 => 'bool',
    'classname' => 'string',
    'methodname' => 'string',
    'args' => 'string',
    'code' => 'string',
    'flags=' => 'int',
    'doccomment=' => 'null|string',
  ),
  'runkit_method_redefine\'1' => 
  array (
    0 => 'bool',
    'classname' => 'string',
    'methodname' => 'string',
    'closure' => 'Closure',
    'flags=' => 'int',
    'doccomment=' => 'null|string',
  ),
  'runkit_method_remove' => 
  array (
    0 => 'bool',
    'classname' => 'string',
    'methodname' => 'string',
  ),
  'runkit_method_rename' => 
  array (
    0 => 'bool',
    'classname' => 'string',
    'methodname' => 'string',
    'newname' => 'string',
  ),
  'runkit_return_value_used' => 
  array (
    0 => 'bool',
  ),
  'runkit_sandbox::__construct' => 
  array (
    0 => 'void',
    'options=' => 'array<array-key, mixed>',
  ),
  'runkit_sandbox_output_handler' => 
  array (
    0 => 'mixed',
    'sandbox' => 'object',
    'callback=' => 'mixed',
  ),
  'runkit_sandbox_parent' => 
  array (
    0 => 'mixed',
  ),
  'runkit_sandbox_parent::__construct' => 
  array (
    0 => 'void',
  ),
  'runkit_superglobals' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'runkit_zval_inspect' => 
  array (
    0 => 'array<array-key, mixed>',
    'value' => 'mixed',
  ),
  'runtimeexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'runtimeexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'runtimeexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'runtimeexception::getcode' => 
  array (
    0 => 'int',
  ),
  'runtimeexception::getfile' => 
  array (
    0 => 'string',
  ),
  'runtimeexception::getline' => 
  array (
    0 => 'int',
  ),
  'runtimeexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'runtimeexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'runtimeexception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'runtimeexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'samconnection::commit' => 
  array (
    0 => 'bool',
  ),
  'samconnection::connect' => 
  array (
    0 => 'bool',
    'protocol' => 'string',
    'properties=' => 'array<array-key, mixed>',
  ),
  'samconnection::disconnect' => 
  array (
    0 => 'bool',
  ),
  'samconnection::errno' => 
  array (
    0 => 'int',
  ),
  'samconnection::error' => 
  array (
    0 => 'string',
  ),
  'samconnection::isconnected' => 
  array (
    0 => 'bool',
  ),
  'samconnection::peek' => 
  array (
    0 => 'SAMMessage',
    'target' => 'string',
    'properties=' => 'array<array-key, mixed>',
  ),
  'samconnection::peekall' => 
  array (
    0 => 'array<array-key, mixed>',
    'target' => 'string',
    'properties=' => 'array<array-key, mixed>',
  ),
  'samconnection::receive' => 
  array (
    0 => 'SAMMessage',
    'target' => 'string',
    'properties=' => 'array<array-key, mixed>',
  ),
  'samconnection::remove' => 
  array (
    0 => 'SAMMessage',
    'target' => 'string',
    'properties=' => 'array<array-key, mixed>',
  ),
  'samconnection::rollback' => 
  array (
    0 => 'bool',
  ),
  'samconnection::send' => 
  array (
    0 => 'string',
    'target' => 'string',
    'msg' => 'sammessage',
    'properties=' => 'array<array-key, mixed>',
  ),
  'samconnection::setdebug' => 
  array (
    0 => 'mixed',
    'switch' => 'bool',
  ),
  'samconnection::subscribe' => 
  array (
    0 => 'string',
    'targettopic' => 'string',
  ),
  'samconnection::unsubscribe' => 
  array (
    0 => 'bool',
    'subscriptionid' => 'string',
    'targettopic=' => 'string',
  ),
  'sammessage::body' => 
  array (
    0 => 'string',
  ),
  'sammessage::header' => 
  array (
    0 => 'object',
  ),
  'sapi_windows_cp_conv' => 
  array (
    0 => 'null|string',
    'in_codepage' => 'int|string',
    'out_codepage' => 'int|string',
    'subject' => 'string',
  ),
  'sapi_windows_cp_get' => 
  array (
    0 => 'int',
    'kind=' => 'string',
  ),
  'sapi_windows_cp_is_utf8' => 
  array (
    0 => 'bool',
  ),
  'sapi_windows_cp_set' => 
  array (
    0 => 'bool',
    'codepage' => 'int',
  ),
  'sapi_windows_vt100_support' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
    'enable=' => 'bool|null',
  ),
  'saxon\\saxonprocessor::__construct' => 
  array (
    0 => 'void',
    'license=' => 'bool',
    'cwd=' => 'string',
  ),
  'saxon\\saxonprocessor::createatomicvalue' => 
  array (
    0 => 'Saxon\\XdmValue',
    'primitive_type_val' => 'scalar',
  ),
  'saxon\\saxonprocessor::newschemavalidator' => 
  array (
    0 => 'Saxon\\SchemaValidator',
  ),
  'saxon\\saxonprocessor::newxpathprocessor' => 
  array (
    0 => 'Saxon\\XPathProcessor',
  ),
  'saxon\\saxonprocessor::newxqueryprocessor' => 
  array (
    0 => 'Saxon\\XQueryProcessor',
  ),
  'saxon\\saxonprocessor::newxsltprocessor' => 
  array (
    0 => 'Saxon\\XsltProcessor',
  ),
  'saxon\\saxonprocessor::parsexmlfromfile' => 
  array (
    0 => 'Saxon\\XdmNode',
    'fileName' => 'string',
  ),
  'saxon\\saxonprocessor::parsexmlfromstring' => 
  array (
    0 => 'Saxon\\XdmNode',
    'value' => 'string',
  ),
  'saxon\\saxonprocessor::registerphpfunctions' => 
  array (
    0 => 'void',
    'library' => 'string',
  ),
  'saxon\\saxonprocessor::setconfigurationproperty' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'string',
  ),
  'saxon\\saxonprocessor::setcwd' => 
  array (
    0 => 'void',
    'cwd' => 'string',
  ),
  'saxon\\saxonprocessor::setresourcedirectory' => 
  array (
    0 => 'void',
    'dir' => 'string',
  ),
  'saxon\\saxonprocessor::version' => 
  array (
    0 => 'string',
  ),
  'saxon\\schemavalidator::clearparameters' => 
  array (
    0 => 'void',
  ),
  'saxon\\schemavalidator::clearproperties' => 
  array (
    0 => 'void',
  ),
  'saxon\\schemavalidator::exceptionclear' => 
  array (
    0 => 'void',
  ),
  'saxon\\schemavalidator::geterrorcode' => 
  array (
    0 => 'string',
    'i' => 'int',
  ),
  'saxon\\schemavalidator::geterrormessage' => 
  array (
    0 => 'string',
    'i' => 'int',
  ),
  'saxon\\schemavalidator::getexceptioncount' => 
  array (
    0 => 'int',
  ),
  'saxon\\schemavalidator::getvalidationreport' => 
  array (
    0 => 'Saxon\\XdmNode',
  ),
  'saxon\\schemavalidator::registerschemafromfile' => 
  array (
    0 => 'void',
    'fileName' => 'string',
  ),
  'saxon\\schemavalidator::registerschemafromstring' => 
  array (
    0 => 'void',
    'schemaStr' => 'string',
  ),
  'saxon\\schemavalidator::setoutputfile' => 
  array (
    0 => 'void',
    'fileName' => 'string',
  ),
  'saxon\\schemavalidator::setparameter' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'Saxon\\XdmValue',
  ),
  'saxon\\schemavalidator::setproperty' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'string',
  ),
  'saxon\\schemavalidator::setsourcenode' => 
  array (
    0 => 'void',
    'node' => 'Saxon\\XdmNode',
  ),
  'saxon\\schemavalidator::validate' => 
  array (
    0 => 'void',
    'filename=' => 'null|string',
  ),
  'saxon\\schemavalidator::validatetonode' => 
  array (
    0 => 'Saxon\\XdmNode',
    'filename=' => 'null|string',
  ),
  'saxon\\xdmatomicvalue::addxdmitem' => 
  array (
    0 => 'mixed',
    'item' => 'Saxon\\XdmItem',
  ),
  'saxon\\xdmatomicvalue::getatomicvalue' => 
  array (
    0 => 'Saxon\\XdmAtomicValue|null',
  ),
  'saxon\\xdmatomicvalue::getbooleanvalue' => 
  array (
    0 => 'bool',
  ),
  'saxon\\xdmatomicvalue::getdoublevalue' => 
  array (
    0 => 'float',
  ),
  'saxon\\xdmatomicvalue::gethead' => 
  array (
    0 => 'Saxon\\XdmItem',
  ),
  'saxon\\xdmatomicvalue::getlongvalue' => 
  array (
    0 => 'int',
  ),
  'saxon\\xdmatomicvalue::getnodevalue' => 
  array (
    0 => 'Saxon\\XdmNode|null',
  ),
  'saxon\\xdmatomicvalue::getstringvalue' => 
  array (
    0 => 'string',
  ),
  'saxon\\xdmatomicvalue::isatomic' => 
  array (
    0 => 'true',
  ),
  'saxon\\xdmatomicvalue::isnode' => 
  array (
    0 => 'bool',
  ),
  'saxon\\xdmatomicvalue::itemat' => 
  array (
    0 => 'Saxon\\XdmItem',
    'index' => 'int',
  ),
  'saxon\\xdmatomicvalue::size' => 
  array (
    0 => 'int',
  ),
  'saxon\\xdmitem::addxdmitem' => 
  array (
    0 => 'mixed',
    'item' => 'Saxon\\XdmItem',
  ),
  'saxon\\xdmitem::getatomicvalue' => 
  array (
    0 => 'Saxon\\XdmAtomicValue|null',
  ),
  'saxon\\xdmitem::gethead' => 
  array (
    0 => 'Saxon\\XdmItem',
  ),
  'saxon\\xdmitem::getnodevalue' => 
  array (
    0 => 'Saxon\\XdmNode|null',
  ),
  'saxon\\xdmitem::getstringvalue' => 
  array (
    0 => 'string',
  ),
  'saxon\\xdmitem::isatomic' => 
  array (
    0 => 'bool',
  ),
  'saxon\\xdmitem::isnode' => 
  array (
    0 => 'bool',
  ),
  'saxon\\xdmitem::itemat' => 
  array (
    0 => 'Saxon\\XdmItem',
    'index' => 'int',
  ),
  'saxon\\xdmitem::size' => 
  array (
    0 => 'int',
  ),
  'saxon\\xdmnode::addxdmitem' => 
  array (
    0 => 'mixed',
    'item' => 'Saxon\\XdmItem',
  ),
  'saxon\\xdmnode::getatomicvalue' => 
  array (
    0 => 'Saxon\\XdmAtomicValue|null',
  ),
  'saxon\\xdmnode::getattributecount' => 
  array (
    0 => 'int',
  ),
  'saxon\\xdmnode::getattributenode' => 
  array (
    0 => 'Saxon\\XdmNode|null',
    'index' => 'int',
  ),
  'saxon\\xdmnode::getattributevalue' => 
  array (
    0 => 'null|string',
    'index' => 'int',
  ),
  'saxon\\xdmnode::getchildcount' => 
  array (
    0 => 'int',
  ),
  'saxon\\xdmnode::getchildnode' => 
  array (
    0 => 'Saxon\\XdmNode|null',
    'index' => 'int',
  ),
  'saxon\\xdmnode::gethead' => 
  array (
    0 => 'Saxon\\XdmItem',
  ),
  'saxon\\xdmnode::getnodekind' => 
  array (
    0 => 'int',
  ),
  'saxon\\xdmnode::getnodename' => 
  array (
    0 => 'string',
  ),
  'saxon\\xdmnode::getnodevalue' => 
  array (
    0 => 'Saxon\\XdmNode|null',
  ),
  'saxon\\xdmnode::getparent' => 
  array (
    0 => 'Saxon\\XdmNode|null',
  ),
  'saxon\\xdmnode::getstringvalue' => 
  array (
    0 => 'string',
  ),
  'saxon\\xdmnode::isatomic' => 
  array (
    0 => 'false',
  ),
  'saxon\\xdmnode::isnode' => 
  array (
    0 => 'bool',
  ),
  'saxon\\xdmnode::itemat' => 
  array (
    0 => 'Saxon\\XdmItem',
    'index' => 'int',
  ),
  'saxon\\xdmnode::size' => 
  array (
    0 => 'int',
  ),
  'saxon\\xdmvalue::addxdmitem' => 
  array (
    0 => 'mixed',
    'item' => 'Saxon\\XdmItem',
  ),
  'saxon\\xdmvalue::gethead' => 
  array (
    0 => 'Saxon\\XdmItem',
  ),
  'saxon\\xdmvalue::itemat' => 
  array (
    0 => 'Saxon\\XdmItem',
    'index' => 'int',
  ),
  'saxon\\xdmvalue::size' => 
  array (
    0 => 'int',
  ),
  'saxon\\xpathprocessor::clearparameters' => 
  array (
    0 => 'void',
  ),
  'saxon\\xpathprocessor::clearproperties' => 
  array (
    0 => 'void',
  ),
  'saxon\\xpathprocessor::declarenamespace' => 
  array (
    0 => 'void',
    'prefix' => 'mixed',
    'namespace' => 'mixed',
  ),
  'saxon\\xpathprocessor::effectivebooleanvalue' => 
  array (
    0 => 'bool',
    'xpathStr' => 'string',
  ),
  'saxon\\xpathprocessor::evaluate' => 
  array (
    0 => 'Saxon\\XdmValue',
    'xpathStr' => 'string',
  ),
  'saxon\\xpathprocessor::evaluatesingle' => 
  array (
    0 => 'Saxon\\XdmItem',
    'xpathStr' => 'string',
  ),
  'saxon\\xpathprocessor::exceptionclear' => 
  array (
    0 => 'void',
  ),
  'saxon\\xpathprocessor::geterrorcode' => 
  array (
    0 => 'string',
    'i' => 'int',
  ),
  'saxon\\xpathprocessor::geterrormessage' => 
  array (
    0 => 'string',
    'i' => 'int',
  ),
  'saxon\\xpathprocessor::getexceptioncount' => 
  array (
    0 => 'int',
  ),
  'saxon\\xpathprocessor::setbaseuri' => 
  array (
    0 => 'void',
    'uri' => 'string',
  ),
  'saxon\\xpathprocessor::setcontextfile' => 
  array (
    0 => 'void',
    'fileName' => 'string',
  ),
  'saxon\\xpathprocessor::setcontextitem' => 
  array (
    0 => 'void',
    'item' => 'Saxon\\XdmItem',
  ),
  'saxon\\xpathprocessor::setparameter' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'Saxon\\XdmValue',
  ),
  'saxon\\xpathprocessor::setproperty' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'string',
  ),
  'saxon\\xqueryprocessor::clearparameters' => 
  array (
    0 => 'void',
  ),
  'saxon\\xqueryprocessor::clearproperties' => 
  array (
    0 => 'void',
  ),
  'saxon\\xqueryprocessor::declarenamespace' => 
  array (
    0 => 'void',
    'prefix' => 'string',
    'namespace' => 'string',
  ),
  'saxon\\xqueryprocessor::exceptionclear' => 
  array (
    0 => 'void',
  ),
  'saxon\\xqueryprocessor::geterrorcode' => 
  array (
    0 => 'string',
    'i' => 'int',
  ),
  'saxon\\xqueryprocessor::geterrormessage' => 
  array (
    0 => 'string',
    'i' => 'int',
  ),
  'saxon\\xqueryprocessor::getexceptioncount' => 
  array (
    0 => 'int',
  ),
  'saxon\\xqueryprocessor::runquerytofile' => 
  array (
    0 => 'void',
    'outfilename' => 'string',
  ),
  'saxon\\xqueryprocessor::runquerytostring' => 
  array (
    0 => 'null|string',
  ),
  'saxon\\xqueryprocessor::runquerytovalue' => 
  array (
    0 => 'Saxon\\XdmValue|null',
  ),
  'saxon\\xqueryprocessor::setcontextitem' => 
  array (
    0 => 'void',
    'object' => 'Saxon\\XdmAtomicValue|Saxon\\XdmItem|Saxon\\XdmNode|Saxon\\XdmValue',
  ),
  'saxon\\xqueryprocessor::setcontextitemfromfile' => 
  array (
    0 => 'void',
    'fileName' => 'string',
  ),
  'saxon\\xqueryprocessor::setparameter' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'Saxon\\XdmValue',
  ),
  'saxon\\xqueryprocessor::setproperty' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'string',
  ),
  'saxon\\xqueryprocessor::setquerybaseuri' => 
  array (
    0 => 'void',
    'uri' => 'string',
  ),
  'saxon\\xqueryprocessor::setquerycontent' => 
  array (
    0 => 'void',
    'string' => 'string',
  ),
  'saxon\\xqueryprocessor::setqueryfile' => 
  array (
    0 => 'void',
    'filename' => 'string',
  ),
  'saxon\\xqueryprocessor::setqueryitem' => 
  array (
    0 => 'void',
    'item' => 'Saxon\\XdmItem',
  ),
  'saxon\\xsltprocessor::clearparameters' => 
  array (
    0 => 'void',
  ),
  'saxon\\xsltprocessor::clearproperties' => 
  array (
    0 => 'void',
  ),
  'saxon\\xsltprocessor::compilefromfile' => 
  array (
    0 => 'void',
    'fileName' => 'string',
  ),
  'saxon\\xsltprocessor::compilefromstring' => 
  array (
    0 => 'void',
    'string' => 'string',
  ),
  'saxon\\xsltprocessor::compilefromvalue' => 
  array (
    0 => 'void',
    'node' => 'Saxon\\XdmNode',
  ),
  'saxon\\xsltprocessor::exceptionclear' => 
  array (
    0 => 'void',
  ),
  'saxon\\xsltprocessor::geterrorcode' => 
  array (
    0 => 'string',
    'i' => 'int',
  ),
  'saxon\\xsltprocessor::geterrormessage' => 
  array (
    0 => 'string',
    'i' => 'int',
  ),
  'saxon\\xsltprocessor::getexceptioncount' => 
  array (
    0 => 'int',
  ),
  'saxon\\xsltprocessor::setoutputfile' => 
  array (
    0 => 'void',
    'fileName' => 'string',
  ),
  'saxon\\xsltprocessor::setparameter' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'Saxon\\XdmValue',
  ),
  'saxon\\xsltprocessor::setproperty' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'string',
  ),
  'saxon\\xsltprocessor::setsourcefromfile' => 
  array (
    0 => 'void',
    'filename' => 'string',
  ),
  'saxon\\xsltprocessor::setsourcefromxdmvalue' => 
  array (
    0 => 'void',
    'value' => 'Saxon\\XdmValue',
  ),
  'saxon\\xsltprocessor::transformfiletofile' => 
  array (
    0 => 'void',
    'sourceFileName' => 'string',
    'stylesheetFileName' => 'string',
    'outputfileName' => 'string',
  ),
  'saxon\\xsltprocessor::transformfiletostring' => 
  array (
    0 => 'null|string',
    'sourceFileName' => 'string',
    'stylesheetFileName' => 'string',
  ),
  'saxon\\xsltprocessor::transformfiletovalue' => 
  array (
    0 => 'Saxon\\XdmValue',
    'fileName' => 'string',
  ),
  'saxon\\xsltprocessor::transformtofile' => 
  array (
    0 => 'void',
  ),
  'saxon\\xsltprocessor::transformtostring' => 
  array (
    0 => 'string',
  ),
  'saxon\\xsltprocessor::transformtovalue' => 
  array (
    0 => 'Saxon\\XdmValue|null',
  ),
  'sca::createdataobject' => 
  array (
    0 => 'SDO_DataObject',
    'type_namespace_uri' => 'string',
    'type_name' => 'string',
  ),
  'sca::getservice' => 
  array (
    0 => 'mixed',
    'target' => 'string',
    'binding=' => 'string',
    'config=' => 'array<array-key, mixed>',
  ),
  'sca_localproxy::createdataobject' => 
  array (
    0 => 'SDO_DataObject',
    'type_namespace_uri' => 'string',
    'type_name' => 'string',
  ),
  'sca_soapproxy::createdataobject' => 
  array (
    0 => 'SDO_DataObject',
    'type_namespace_uri' => 'string',
    'type_name' => 'string',
  ),
  'scalebarobj::converttostring' => 
  array (
    0 => 'string',
  ),
  'scalebarobj::free' => 
  array (
    0 => 'void',
  ),
  'scalebarobj::set' => 
  array (
    0 => 'int',
    'property_name' => 'string',
    'new_value' => 'mixed',
  ),
  'scalebarobj::setimagecolor' => 
  array (
    0 => 'int',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
  ),
  'scalebarobj::updatefromstring' => 
  array (
    0 => 'int',
    'snippet' => 'string',
  ),
  'scandir' => 
  array (
    0 => 'false|list<string>',
    'directory' => 'string',
    'sorting_order=' => 'int',
    'context=' => 'resource',
  ),
  'sdo_das_changesummary::beginlogging' => 
  array (
    0 => 'mixed',
  ),
  'sdo_das_changesummary::endlogging' => 
  array (
    0 => 'mixed',
  ),
  'sdo_das_changesummary::getchangeddataobjects' => 
  array (
    0 => 'SDO_List',
  ),
  'sdo_das_changesummary::getchangetype' => 
  array (
    0 => 'int',
    'dataobject' => 'sdo_dataobject',
  ),
  'sdo_das_changesummary::getoldcontainer' => 
  array (
    0 => 'SDO_DataObject',
    'data_object' => 'sdo_dataobject',
  ),
  'sdo_das_changesummary::getoldvalues' => 
  array (
    0 => 'SDO_List',
    'data_object' => 'sdo_dataobject',
  ),
  'sdo_das_changesummary::islogging' => 
  array (
    0 => 'bool',
  ),
  'sdo_das_datafactory::addpropertytotype' => 
  array (
    0 => 'mixed',
    'parent_type_namespace_uri' => 'string',
    'parent_type_name' => 'string',
    'property_name' => 'string',
    'type_namespace_uri' => 'string',
    'type_name' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'sdo_das_datafactory::addtype' => 
  array (
    0 => 'mixed',
    'type_namespace_uri' => 'string',
    'type_name' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'sdo_das_datafactory::getdatafactory' => 
  array (
    0 => 'SDO_DAS_DataFactory',
  ),
  'sdo_das_dataobject::getchangesummary' => 
  array (
    0 => 'SDO_DAS_ChangeSummary',
  ),
  'sdo_das_relational::__construct' => 
  array (
    0 => 'void',
    'database_metadata' => 'array<array-key, mixed>',
    'application_root_type=' => 'string',
    'sdo_containment_references_metadata=' => 'array<array-key, mixed>',
  ),
  'sdo_das_relational::applychanges' => 
  array (
    0 => 'mixed',
    'database_handle' => 'pdo',
    'root_data_object' => 'sdodataobject',
  ),
  'sdo_das_relational::createrootdataobject' => 
  array (
    0 => 'SDODataObject',
  ),
  'sdo_das_relational::executepreparedquery' => 
  array (
    0 => 'SDODataObject',
    'database_handle' => 'pdo',
    'prepared_statement' => 'pdostatement',
    'value_list' => 'array<array-key, mixed>',
    'column_specifier=' => 'array<array-key, mixed>',
  ),
  'sdo_das_relational::executequery' => 
  array (
    0 => 'SDODataObject',
    'database_handle' => 'pdo',
    'sql_statement' => 'string',
    'column_specifier=' => 'array<array-key, mixed>',
  ),
  'sdo_das_setting::getlistindex' => 
  array (
    0 => 'int',
  ),
  'sdo_das_setting::getpropertyindex' => 
  array (
    0 => 'int',
  ),
  'sdo_das_setting::getpropertyname' => 
  array (
    0 => 'string',
  ),
  'sdo_das_setting::getvalue' => 
  array (
    0 => 'mixed',
  ),
  'sdo_das_setting::isset' => 
  array (
    0 => 'bool',
  ),
  'sdo_das_xml::addtypes' => 
  array (
    0 => 'mixed',
    'xsd_file' => 'string',
  ),
  'sdo_das_xml::create' => 
  array (
    0 => 'SDO_DAS_XML',
    'xsd_file=' => 'mixed',
    'key=' => 'string',
  ),
  'sdo_das_xml::createdataobject' => 
  array (
    0 => 'SDO_DataObject',
    'namespace_uri' => 'string',
    'type_name' => 'string',
  ),
  'sdo_das_xml::createdocument' => 
  array (
    0 => 'SDO_DAS_XML_Document',
    'document_element_name' => 'string',
    'document_element_namespace_uri' => 'string',
    'dataobject=' => 'sdo_dataobject',
  ),
  'sdo_das_xml::loadfile' => 
  array (
    0 => 'SDO_XMLDocument',
    'xml_file' => 'string',
  ),
  'sdo_das_xml::loadstring' => 
  array (
    0 => 'SDO_DAS_XML_Document',
    'xml_string' => 'string',
  ),
  'sdo_das_xml::savefile' => 
  array (
    0 => 'mixed',
    'xdoc' => 'sdo_xmldocument',
    'xml_file' => 'string',
    'indent=' => 'int',
  ),
  'sdo_das_xml::savestring' => 
  array (
    0 => 'string',
    'xdoc' => 'sdo_xmldocument',
    'indent=' => 'int',
  ),
  'sdo_das_xml_document::getrootdataobject' => 
  array (
    0 => 'SDO_DataObject',
  ),
  'sdo_das_xml_document::getrootelementname' => 
  array (
    0 => 'string',
  ),
  'sdo_das_xml_document::getrootelementuri' => 
  array (
    0 => 'string',
  ),
  'sdo_das_xml_document::setencoding' => 
  array (
    0 => 'mixed',
    'encoding' => 'string',
  ),
  'sdo_das_xml_document::setxmldeclaration' => 
  array (
    0 => 'mixed',
    'xmldeclatation' => 'bool',
  ),
  'sdo_das_xml_document::setxmlversion' => 
  array (
    0 => 'mixed',
    'xmlversion' => 'string',
  ),
  'sdo_datafactory::create' => 
  array (
    0 => 'void',
    'type_namespace_uri' => 'string',
    'type_name' => 'string',
  ),
  'sdo_dataobject::clear' => 
  array (
    0 => 'void',
  ),
  'sdo_dataobject::createdataobject' => 
  array (
    0 => 'SDO_DataObject',
    'identifier' => 'mixed',
  ),
  'sdo_dataobject::getcontainer' => 
  array (
    0 => 'SDO_DataObject',
  ),
  'sdo_dataobject::getsequence' => 
  array (
    0 => 'SDO_Sequence',
  ),
  'sdo_dataobject::gettypename' => 
  array (
    0 => 'string',
  ),
  'sdo_dataobject::gettypenamespaceuri' => 
  array (
    0 => 'string',
  ),
  'sdo_exception::getcause' => 
  array (
    0 => 'mixed',
  ),
  'sdo_list::insert' => 
  array (
    0 => 'void',
    'value' => 'mixed',
    'index=' => 'int',
  ),
  'sdo_model_property::getcontainingtype' => 
  array (
    0 => 'SDO_Model_Type',
  ),
  'sdo_model_property::getdefault' => 
  array (
    0 => 'mixed',
  ),
  'sdo_model_property::getname' => 
  array (
    0 => 'string',
  ),
  'sdo_model_property::gettype' => 
  array (
    0 => 'SDO_Model_Type',
  ),
  'sdo_model_property::iscontainment' => 
  array (
    0 => 'bool',
  ),
  'sdo_model_property::ismany' => 
  array (
    0 => 'bool',
  ),
  'sdo_model_reflectiondataobject::__construct' => 
  array (
    0 => 'void',
    'data_object' => 'sdo_dataobject',
  ),
  'sdo_model_reflectiondataobject::export' => 
  array (
    0 => 'mixed',
    'rdo' => 'sdo_model_reflectiondataobject',
    'return=' => 'bool',
  ),
  'sdo_model_reflectiondataobject::getcontainmentproperty' => 
  array (
    0 => 'SDO_Model_Property',
  ),
  'sdo_model_reflectiondataobject::getinstanceproperties' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'sdo_model_reflectiondataobject::gettype' => 
  array (
    0 => 'SDO_Model_Type',
  ),
  'sdo_model_type::getbasetype' => 
  array (
    0 => 'SDO_Model_Type',
  ),
  'sdo_model_type::getname' => 
  array (
    0 => 'string',
  ),
  'sdo_model_type::getnamespaceuri' => 
  array (
    0 => 'string',
  ),
  'sdo_model_type::getproperties' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'sdo_model_type::getproperty' => 
  array (
    0 => 'SDO_Model_Property',
    'identifier' => 'mixed',
  ),
  'sdo_model_type::isabstracttype' => 
  array (
    0 => 'bool',
  ),
  'sdo_model_type::isdatatype' => 
  array (
    0 => 'bool',
  ),
  'sdo_model_type::isinstance' => 
  array (
    0 => 'bool',
    'data_object' => 'sdo_dataobject',
  ),
  'sdo_model_type::isopentype' => 
  array (
    0 => 'bool',
  ),
  'sdo_model_type::issequencedtype' => 
  array (
    0 => 'bool',
  ),
  'sdo_sequence::getproperty' => 
  array (
    0 => 'SDO_Model_Property',
    'sequence_index' => 'int',
  ),
  'sdo_sequence::insert' => 
  array (
    0 => 'void',
    'value' => 'mixed',
    'sequenceindex=' => 'int',
    'propertyidentifier=' => 'mixed',
  ),
  'sdo_sequence::move' => 
  array (
    0 => 'void',
    'toindex' => 'int',
    'fromindex' => 'int',
  ),
  'seaslog::__destruct' => 
  array (
    0 => 'void',
  ),
  'seaslog::alert' => 
  array (
    0 => 'bool',
    'message' => 'string',
    'content=' => 'array<array-key, mixed>',
    'logger=' => 'string',
  ),
  'seaslog::analyzercount' => 
  array (
    0 => 'mixed',
    'level' => 'string',
    'log_path=' => 'string',
    'key_word=' => 'string',
  ),
  'seaslog::analyzerdetail' => 
  array (
    0 => 'mixed',
    'level' => 'string',
    'log_path=' => 'string',
    'key_word=' => 'string',
    'start=' => 'int',
    'limit=' => 'int',
    'order=' => 'int',
  ),
  'seaslog::closeloggerstream' => 
  array (
    0 => 'bool',
    'model' => 'int',
    'logger' => 'string',
  ),
  'seaslog::critical' => 
  array (
    0 => 'bool',
    'message' => 'string',
    'content=' => 'array<array-key, mixed>',
    'logger=' => 'string',
  ),
  'seaslog::debug' => 
  array (
    0 => 'bool',
    'message' => 'string',
    'content=' => 'array<array-key, mixed>',
    'logger=' => 'string',
  ),
  'seaslog::emergency' => 
  array (
    0 => 'bool',
    'message' => 'string',
    'content=' => 'array<array-key, mixed>',
    'logger=' => 'string',
  ),
  'seaslog::error' => 
  array (
    0 => 'bool',
    'message' => 'string',
    'content=' => 'array<array-key, mixed>',
    'logger=' => 'string',
  ),
  'seaslog::flushbuffer' => 
  array (
    0 => 'bool',
  ),
  'seaslog::getbasepath' => 
  array (
    0 => 'string',
  ),
  'seaslog::getbuffer' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'seaslog::getbufferenabled' => 
  array (
    0 => 'bool',
  ),
  'seaslog::getdatetimeformat' => 
  array (
    0 => 'string',
  ),
  'seaslog::getlastlogger' => 
  array (
    0 => 'string',
  ),
  'seaslog::getrequestid' => 
  array (
    0 => 'string',
  ),
  'seaslog::getrequestvariable' => 
  array (
    0 => 'bool',
    'key' => 'int',
  ),
  'seaslog::info' => 
  array (
    0 => 'bool',
    'message' => 'string',
    'content=' => 'array<array-key, mixed>',
    'logger=' => 'string',
  ),
  'seaslog::log' => 
  array (
    0 => 'bool',
    'level' => 'string',
    'message=' => 'string',
    'content=' => 'array<array-key, mixed>',
    'logger=' => 'string',
  ),
  'seaslog::notice' => 
  array (
    0 => 'bool',
    'message' => 'string',
    'content=' => 'array<array-key, mixed>',
    'logger=' => 'string',
  ),
  'seaslog::setbasepath' => 
  array (
    0 => 'bool',
    'base_path' => 'string',
  ),
  'seaslog::setdatetimeformat' => 
  array (
    0 => 'bool',
    'format' => 'string',
  ),
  'seaslog::setlogger' => 
  array (
    0 => 'bool',
    'logger' => 'string',
  ),
  'seaslog::setrequestid' => 
  array (
    0 => 'bool',
    'request_id' => 'string',
  ),
  'seaslog::setrequestvariable' => 
  array (
    0 => 'bool',
    'key' => 'int',
    'value' => 'string',
  ),
  'seaslog::warning' => 
  array (
    0 => 'bool',
    'message' => 'string',
    'content=' => 'array<array-key, mixed>',
    'logger=' => 'string',
  ),
  'seaslog_get_author' => 
  array (
    0 => 'string',
  ),
  'seaslog_get_version' => 
  array (
    0 => 'string',
  ),
  'seekableiterator::__construct' => 
  array (
    0 => 'void',
  ),
  'seekableiterator::current' => 
  array (
    0 => 'mixed',
  ),
  'seekableiterator::key' => 
  array (
    0 => 'int|string',
  ),
  'seekableiterator::next' => 
  array (
    0 => 'void',
  ),
  'seekableiterator::rewind' => 
  array (
    0 => 'void',
  ),
  'seekableiterator::seek' => 
  array (
    0 => 'void',
    'position' => 'int',
  ),
  'seekableiterator::valid' => 
  array (
    0 => 'bool',
  ),
  'sem_acquire' => 
  array (
    0 => 'bool',
    'semaphore' => 'SysvSemaphore',
    'non_blocking=' => 'bool',
  ),
  'sem_get' => 
  array (
    0 => 'SysvSemaphore|false',
    'key' => 'int',
    'max_acquire=' => 'int',
    'permissions=' => 'int',
    'auto_release=' => 'bool',
  ),
  'sem_release' => 
  array (
    0 => 'bool',
    'semaphore' => 'SysvSemaphore',
  ),
  'sem_remove' => 
  array (
    0 => 'bool',
    'semaphore' => 'SysvSemaphore',
  ),
  'serializable::__construct' => 
  array (
    0 => 'void',
  ),
  'serializable::serialize' => 
  array (
    0 => 'null|string',
  ),
  'serializable::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'serialize' => 
  array (
    0 => 'string',
    'value' => 'mixed',
  ),
  'serverrequest::withinput' => 
  array (
    0 => 'ServerRequest',
    'input' => 'mixed',
  ),
  'serverrequest::withoutparams' => 
  array (
    0 => 'ServerRequest',
    'params' => 'int|string',
  ),
  'serverrequest::withparam' => 
  array (
    0 => 'ServerRequest',
    'key' => 'int|string',
    'value' => 'mixed',
  ),
  'serverrequest::withparams' => 
  array (
    0 => 'ServerRequest',
    'params' => 'mixed',
  ),
  'serverrequest::withurl' => 
  array (
    0 => 'ServerRequest',
    'url' => 'array<array-key, mixed>',
  ),
  'serverresponse::addheader' => 
  array (
    0 => 'void',
    'label' => 'string',
    'value' => 'string',
  ),
  'serverresponse::date' => 
  array (
    0 => 'string',
    'date' => 'DateTimeInterface|string',
  ),
  'serverresponse::getheader' => 
  array (
    0 => 'string',
    'label' => 'string',
  ),
  'serverresponse::getheaders' => 
  array (
    0 => 'array<array-key, string>',
  ),
  'serverresponse::getstatus' => 
  array (
    0 => 'int',
  ),
  'serverresponse::getversion' => 
  array (
    0 => 'string',
  ),
  'serverresponse::setheader' => 
  array (
    0 => 'void',
    'label' => 'string',
    'value' => 'string',
  ),
  'serverresponse::setstatus' => 
  array (
    0 => 'void',
    'status' => 'int',
  ),
  'serverresponse::setversion' => 
  array (
    0 => 'void',
    'version' => 'string',
  ),
  'session_abort' => 
  array (
    0 => 'bool',
  ),
  'session_cache_expire' => 
  array (
    0 => 'false|int',
    'value=' => 'int|null',
  ),
  'session_cache_limiter' => 
  array (
    0 => 'false|string',
    'value=' => 'null|string',
  ),
  'session_commit' => 
  array (
    0 => 'bool',
  ),
  'session_create_id' => 
  array (
    0 => 'false|string',
    'prefix=' => 'string',
  ),
  'session_decode' => 
  array (
    0 => 'bool',
    'data' => 'string',
  ),
  'session_destroy' => 
  array (
    0 => 'bool',
  ),
  'session_encode' => 
  array (
    0 => 'false|string',
  ),
  'session_gc' => 
  array (
    0 => 'false|int',
  ),
  'session_get_cookie_params' => 
  array (
    0 => 'array{domain: null|string, httponly: bool|null, lifetime: int|null, path: null|string, samesite: null|string, secure: bool|null}',
  ),
  'session_id' => 
  array (
    0 => 'false|string',
    'id=' => 'null|string',
  ),
  'session_is_registered' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'session_module_name' => 
  array (
    0 => 'false|string',
    'module=' => 'null|string',
  ),
  'session_name' => 
  array (
    0 => 'false|string',
    'name=' => 'null|string',
  ),
  'session_pgsql_add_error' => 
  array (
    0 => 'bool',
    'error_level' => 'int',
    'error_message=' => 'string',
  ),
  'session_pgsql_get_error' => 
  array (
    0 => 'array<array-key, mixed>',
    'with_error_message=' => 'bool',
  ),
  'session_pgsql_get_field' => 
  array (
    0 => 'string',
  ),
  'session_pgsql_reset' => 
  array (
    0 => 'bool',
  ),
  'session_pgsql_set_field' => 
  array (
    0 => 'bool',
    'value' => 'string',
  ),
  'session_pgsql_status' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'session_regenerate_id' => 
  array (
    0 => 'bool',
    'delete_old_session=' => 'bool',
  ),
  'session_register' => 
  array (
    0 => 'bool',
    'name' => 'mixed',
    '...args=' => 'mixed',
  ),
  'session_register_shutdown' => 
  array (
    0 => 'void',
  ),
  'session_reset' => 
  array (
    0 => 'bool',
  ),
  'session_save_path' => 
  array (
    0 => 'false|string',
    'path=' => 'null|string',
  ),
  'session_set_cookie_params' => 
  array (
    0 => 'bool',
    'lifetime_or_options' => 'int',
    'path=' => 'null|string',
    'domain=' => 'null|string',
    'secure=' => 'bool|null',
    'httponly=' => 'bool|null',
  ),
  'session_set_cookie_params\'1' => 
  array (
    0 => 'bool',
    'options' => 'array{domain?: null|string, httponly?: bool|null, lifetime?: int|null, path?: null|string, samesite?: null|string, secure?: bool|null}',
  ),
  'session_set_save_handler' => 
  array (
    0 => 'bool',
    'open' => 'callable(string, string):bool',
    'close=' => 'callable():bool',
    'read=' => 'callable(string):string',
    'write=' => 'callable(string, string):bool',
    'destroy=' => 'callable(string):bool',
    'gc=' => 'callable(string):bool',
    'create_sid=' => 'callable():string',
    'validate_sid=' => 'callable(string):bool',
    'update_timestamp=' => 'callable(string):bool',
  ),
  'session_set_save_handler\'1' => 
  array (
    0 => 'bool',
    'open' => 'SessionHandlerInterface',
    'close=' => 'bool',
  ),
  'session_start' => 
  array (
    0 => 'bool',
    'options=' => 'array<array-key, mixed>',
  ),
  'session_status' => 
  array (
    0 => 'int',
  ),
  'session_unregister' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'session_unset' => 
  array (
    0 => 'bool',
  ),
  'session_write_close' => 
  array (
    0 => 'bool',
  ),
  'sessionhandler::close' => 
  array (
    0 => 'bool',
  ),
  'sessionhandler::create_sid' => 
  array (
    0 => 'string',
  ),
  'sessionhandler::destroy' => 
  array (
    0 => 'bool',
    'id' => 'string',
  ),
  'sessionhandler::gc' => 
  array (
    0 => 'false|int',
    'max_lifetime' => 'int',
  ),
  'sessionhandler::open' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'name' => 'string',
  ),
  'sessionhandler::read' => 
  array (
    0 => 'false|string',
    'id' => 'string',
  ),
  'sessionhandler::write' => 
  array (
    0 => 'bool',
    'id' => 'string',
    'data' => 'string',
  ),
  'sessionhandlerinterface::close' => 
  array (
    0 => 'bool',
  ),
  'sessionhandlerinterface::destroy' => 
  array (
    0 => 'bool',
    'id' => 'string',
  ),
  'sessionhandlerinterface::gc' => 
  array (
    0 => 'false|int',
    'max_lifetime' => 'int',
  ),
  'sessionhandlerinterface::open' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'name' => 'string',
  ),
  'sessionhandlerinterface::read' => 
  array (
    0 => 'false|string',
    'id' => 'string',
  ),
  'sessionhandlerinterface::write' => 
  array (
    0 => 'bool',
    'id' => 'string',
    'data' => 'string',
  ),
  'sessionidinterface::create_sid' => 
  array (
    0 => 'string',
  ),
  'sessionupdatetimestamphandler::updatetimestamp' => 
  array (
    0 => 'bool',
    'id' => 'string',
    'data' => 'string',
  ),
  'sessionupdatetimestamphandler::validateid' => 
  array (
    0 => 'char',
    'id' => 'string',
  ),
  'sessionupdatetimestamphandlerinterface::updatetimestamp' => 
  array (
    0 => 'bool',
    'id' => 'string',
    'data' => 'string',
  ),
  'sessionupdatetimestamphandlerinterface::validateid' => 
  array (
    0 => 'bool',
    'id' => 'string',
  ),
  'set_error_handler' => 
  array (
    0 => 'callable(int, string, string=, int=, array<array-key, mixed>=):bool|null',
    'callback' => 'callable(int, string, string=, int=, array<array-key, mixed>=):bool|null',
    'error_levels=' => 'int',
  ),
  'set_exception_handler' => 
  array (
    0 => 'callable(Throwable):void|null',
    'callback' => 'callable(Throwable):void|null',
  ),
  'set_file_buffer' => 
  array (
    0 => 'int',
    'stream' => 'resource',
    'size' => 'int',
  ),
  'set_include_path' => 
  array (
    0 => 'false|string',
    'include_path' => 'string',
  ),
  'set_magic_quotes_runtime' => 
  array (
    0 => 'bool',
    'new_setting' => 'bool',
  ),
  'set_time_limit' => 
  array (
    0 => 'bool',
    'seconds' => 'int',
  ),
  'setcookie' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value=' => 'string',
    'expires_or_options=' => 'int',
    'path=' => 'string',
    'domain=' => 'string',
    'secure=' => 'bool',
    'httponly=' => 'bool',
  ),
  'setcookie\'1' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value=' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'setleftfill' => 
  array (
    0 => 'void',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'a=' => 'int',
  ),
  'setline' => 
  array (
    0 => 'void',
    'width' => 'int',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'a=' => 'int',
  ),
  'setlocale' => 
  array (
    0 => 'false|string',
    'category' => 'int',
    'locales' => '0|null|string',
    '...rest=' => 'string',
  ),
  'setlocale\'1' => 
  array (
    0 => 'false|string',
    'category' => 'int',
    'locales' => 'array<array-key, mixed>|null',
  ),
  'setproctitle' => 
  array (
    0 => 'void',
    'title' => 'string',
  ),
  'setrawcookie' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value=' => 'string',
    'expires_or_options=' => 'int',
    'path=' => 'string',
    'domain=' => 'string',
    'secure=' => 'bool',
    'httponly=' => 'bool',
  ),
  'setrawcookie\'1' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value=' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'setrightfill' => 
  array (
    0 => 'void',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'a=' => 'int',
  ),
  'setthreadtitle' => 
  array (
    0 => 'bool',
    'title' => 'string',
  ),
  'settype' => 
  array (
    0 => 'bool',
    '&var' => 'mixed',
    'type' => 'string',
  ),
  'sha1' => 
  array (
    0 => 'string',
    'string' => 'string',
    'binary=' => 'bool',
  ),
  'sha1_file' => 
  array (
    0 => 'false|string',
    'filename' => 'string',
    'binary=' => 'bool',
  ),
  'sha256' => 
  array (
    0 => 'string',
    'string' => 'string',
    'raw_output=' => 'bool',
  ),
  'sha256_file' => 
  array (
    0 => 'string',
    'filename' => 'string',
    'raw_output=' => 'bool',
  ),
  'shapefileobj::__construct' => 
  array (
    0 => 'void',
    'filename' => 'string',
    'type' => 'int',
  ),
  'shapefileobj::addpoint' => 
  array (
    0 => 'int',
    'point' => 'pointObj',
  ),
  'shapefileobj::addshape' => 
  array (
    0 => 'int',
    'shape' => 'shapeObj',
  ),
  'shapefileobj::free' => 
  array (
    0 => 'void',
  ),
  'shapefileobj::getextent' => 
  array (
    0 => 'rectObj',
    'i' => 'int',
  ),
  'shapefileobj::getpoint' => 
  array (
    0 => 'shapeObj',
    'i' => 'int',
  ),
  'shapefileobj::getshape' => 
  array (
    0 => 'shapeObj',
    'i' => 'int',
  ),
  'shapefileobj::gettransformed' => 
  array (
    0 => 'shapeObj',
    'map' => 'mapObj',
    'i' => 'int',
  ),
  'shapefileobj::ms_newshapefileobj' => 
  array (
    0 => 'shapefileObj',
    'filename' => 'string',
    'type' => 'int',
  ),
  'shapeobj::__construct' => 
  array (
    0 => 'void',
    'type' => 'int',
  ),
  'shapeobj::add' => 
  array (
    0 => 'int',
    'line' => 'lineObj',
  ),
  'shapeobj::boundary' => 
  array (
    0 => 'shapeObj',
  ),
  'shapeobj::contains' => 
  array (
    0 => 'bool',
    'point' => 'pointObj',
  ),
  'shapeobj::containsshape' => 
  array (
    0 => 'int',
    'shape2' => 'shapeObj',
  ),
  'shapeobj::convexhull' => 
  array (
    0 => 'shapeObj',
  ),
  'shapeobj::crosses' => 
  array (
    0 => 'int',
    'shape' => 'shapeObj',
  ),
  'shapeobj::difference' => 
  array (
    0 => 'shapeObj',
    'shape' => 'shapeObj',
  ),
  'shapeobj::disjoint' => 
  array (
    0 => 'int',
    'shape' => 'shapeObj',
  ),
  'shapeobj::draw' => 
  array (
    0 => 'int',
    'map' => 'mapObj',
    'layer' => 'layerObj',
    'img' => 'imageObj',
  ),
  'shapeobj::equals' => 
  array (
    0 => 'int',
    'shape' => 'shapeObj',
  ),
  'shapeobj::free' => 
  array (
    0 => 'void',
  ),
  'shapeobj::getarea' => 
  array (
    0 => 'float',
  ),
  'shapeobj::getcentroid' => 
  array (
    0 => 'pointObj',
  ),
  'shapeobj::getlabelpoint' => 
  array (
    0 => 'pointObj',
  ),
  'shapeobj::getlength' => 
  array (
    0 => 'float',
  ),
  'shapeobj::getpointusingmeasure' => 
  array (
    0 => 'pointObj',
    'm' => 'float',
  ),
  'shapeobj::getvalue' => 
  array (
    0 => 'string',
    'layer' => 'layerObj',
    'filedname' => 'string',
  ),
  'shapeobj::intersection' => 
  array (
    0 => 'shapeObj',
    'shape' => 'shapeObj',
  ),
  'shapeobj::intersects' => 
  array (
    0 => 'bool',
    'shape' => 'shapeObj',
  ),
  'shapeobj::line' => 
  array (
    0 => 'lineObj',
    'i' => 'int',
  ),
  'shapeobj::ms_shapeobjfromwkt' => 
  array (
    0 => 'shapeObj',
    'wkt' => 'string',
  ),
  'shapeobj::overlaps' => 
  array (
    0 => 'int',
    'shape' => 'shapeObj',
  ),
  'shapeobj::project' => 
  array (
    0 => 'int',
    'in' => 'projectionObj',
    'out' => 'projectionObj',
  ),
  'shapeobj::set' => 
  array (
    0 => 'int',
    'property_name' => 'string',
    'new_value' => 'mixed',
  ),
  'shapeobj::setbounds' => 
  array (
    0 => 'int',
  ),
  'shapeobj::simplify' => 
  array (
    0 => 'null|shapeObj',
    'tolerance' => 'float',
  ),
  'shapeobj::symdifference' => 
  array (
    0 => 'shapeObj',
    'shape' => 'shapeObj',
  ),
  'shapeobj::topologypreservingsimplify' => 
  array (
    0 => 'null|shapeObj',
    'tolerance' => 'float',
  ),
  'shapeobj::touches' => 
  array (
    0 => 'int',
    'shape' => 'shapeObj',
  ),
  'shapeobj::towkt' => 
  array (
    0 => 'string',
  ),
  'shapeobj::union' => 
  array (
    0 => 'shapeObj',
    'shape' => 'shapeObj',
  ),
  'shapeobj::within' => 
  array (
    0 => 'int',
    'shape2' => 'shapeObj',
  ),
  'shell_exec' => 
  array (
    0 => 'false|null|string',
    'command' => 'string',
  ),
  'shm_attach' => 
  array (
    0 => 'SysvSharedMemory|false',
    'key' => 'int',
    'size=' => 'int|null',
    'permissions=' => 'int',
  ),
  'shm_detach' => 
  array (
    0 => 'bool',
    'shm' => 'SysvSharedMemory',
  ),
  'shm_get_var' => 
  array (
    0 => 'mixed',
    'shm' => 'SysvSharedMemory',
    'key' => 'int',
  ),
  'shm_has_var' => 
  array (
    0 => 'bool',
    'shm' => 'SysvSharedMemory',
    'key' => 'int',
  ),
  'shm_put_var' => 
  array (
    0 => 'bool',
    'shm' => 'SysvSharedMemory',
    'key' => 'int',
    'value' => 'mixed',
  ),
  'shm_remove' => 
  array (
    0 => 'bool',
    'shm' => 'SysvSharedMemory',
  ),
  'shm_remove_var' => 
  array (
    0 => 'bool',
    'shm' => 'SysvSharedMemory',
    'key' => 'int',
  ),
  'shmop_close' => 
  array (
    0 => 'void',
    'shmop' => 'Shmop',
  ),
  'shmop_delete' => 
  array (
    0 => 'bool',
    'shmop' => 'Shmop',
  ),
  'shmop_open' => 
  array (
    0 => 'Shmop|false',
    'key' => 'int',
    'mode' => 'string',
    'permissions' => 'int',
    'size' => 'int',
  ),
  'shmop_read' => 
  array (
    0 => 'string',
    'shmop' => 'Shmop',
    'offset' => 'int',
    'size' => 'int',
  ),
  'shmop_size' => 
  array (
    0 => 'int',
    'shmop' => 'Shmop',
  ),
  'shmop_write' => 
  array (
    0 => 'int',
    'shmop' => 'Shmop',
    'data' => 'string',
    'offset' => 'int',
  ),
  'show_source' => 
  array (
    0 => 'bool|string',
    'filename' => 'string',
    'return=' => 'bool',
  ),
  'shuffle' => 
  array (
    0 => 'true',
    '&array' => 'array<array-key, mixed>',
  ),
  'signeurlpaiement' => 
  array (
    0 => 'string',
    'clent' => 'string',
    'data' => 'string',
  ),
  'similar_text' => 
  array (
    0 => 'int',
    'string1' => 'string',
    'string2' => 'string',
    '&w_percent=' => 'float',
  ),
  'simplexml_import_dom' => 
  array (
    0 => 'SimpleXMLElement|null',
    'node' => 'DOMNode',
    'class_name=' => 'null|string',
  ),
  'simplexml_load_file' => 
  array (
    0 => 'SimpleXMLElement|false',
    'filename' => 'string',
    'class_name=' => 'null|string',
    'options=' => 'int',
    'namespace_or_prefix=' => 'string',
    'is_prefix=' => 'bool',
  ),
  'simplexml_load_string' => 
  array (
    0 => 'SimpleXMLElement|false',
    'data' => 'string',
    'class_name=' => 'null|string',
    'options=' => 'int',
    'namespace_or_prefix=' => 'string',
    'is_prefix=' => 'bool',
  ),
  'simplexmlelement::__construct' => 
  array (
    0 => 'void',
    'data' => 'string',
    'options=' => 'int',
    'dataIsURL=' => 'bool',
    'namespaceOrPrefix=' => 'string',
    'isPrefix=' => 'bool',
  ),
  'simplexmlelement::__get' => 
  array (
    0 => 'SimpleXMLElement',
    'name' => 'string',
  ),
  'simplexmlelement::__tostring' => 
  array (
    0 => 'string',
  ),
  'simplexmlelement::addattribute' => 
  array (
    0 => 'void',
    'qualifiedName' => 'string',
    'value' => 'string',
    'namespace=' => 'null|string',
  ),
  'simplexmlelement::addchild' => 
  array (
    0 => 'SimpleXMLElement|null',
    'qualifiedName' => 'string',
    'value=' => 'null|string',
    'namespace=' => 'null|string',
  ),
  'simplexmlelement::asxml' => 
  array (
    0 => 'bool|string',
    'filename=' => 'null|string',
  ),
  'simplexmlelement::asxml\'1' => 
  array (
    0 => 'false|string',
  ),
  'simplexmlelement::attributes' => 
  array (
    0 => 'SimpleXMLElement|null',
    'namespaceOrPrefix=' => 'null|string',
    'isPrefix=' => 'bool',
  ),
  'simplexmlelement::children' => 
  array (
    0 => 'SimpleXMLElement|null',
    'namespaceOrPrefix=' => 'null|string',
    'isPrefix=' => 'bool',
  ),
  'simplexmlelement::count' => 
  array (
    0 => 'int',
  ),
  'simplexmlelement::current' => 
  array (
    0 => 'mixed',
  ),
  'simplexmlelement::getchildren' => 
  array (
    0 => 'mixed',
  ),
  'simplexmlelement::getdocnamespaces' => 
  array (
    0 => 'array<string, string>',
    'recursive=' => 'bool',
    'fromRoot=' => 'bool',
  ),
  'simplexmlelement::getname' => 
  array (
    0 => 'string',
  ),
  'simplexmlelement::getnamespaces' => 
  array (
    0 => 'array<string, string>',
    'recursive=' => 'bool',
  ),
  'simplexmlelement::haschildren' => 
  array (
    0 => 'mixed',
  ),
  'simplexmlelement::key' => 
  array (
    0 => 'mixed',
  ),
  'simplexmlelement::next' => 
  array (
    0 => 'mixed',
  ),
  'simplexmlelement::offsetexists' => 
  array (
    0 => 'bool',
    'offset' => 'int|string',
  ),
  'simplexmlelement::offsetget' => 
  array (
    0 => 'SimpleXMLElement',
    'offset' => 'int|string',
  ),
  'simplexmlelement::offsetset' => 
  array (
    0 => 'void',
    'offset' => 'int|null|string',
    'value' => 'mixed',
  ),
  'simplexmlelement::offsetunset' => 
  array (
    0 => 'void',
    'offset' => 'int|string',
  ),
  'simplexmlelement::registerxpathnamespace' => 
  array (
    0 => 'bool',
    'prefix' => 'string',
    'namespace' => 'string',
  ),
  'simplexmlelement::rewind' => 
  array (
    0 => 'mixed',
  ),
  'simplexmlelement::savexml' => 
  array (
    0 => 'bool|string',
    'filename=' => 'null|string',
  ),
  'simplexmlelement::valid' => 
  array (
    0 => 'mixed',
  ),
  'simplexmlelement::xpath' => 
  array (
    0 => 'array<array-key, SimpleXMLElement>|false|null',
    'expression' => 'string',
  ),
  'simplexmliterator::__construct' => 
  array (
    0 => 'void',
    'data' => 'string',
    'options=' => 'int',
    'dataIsURL=' => 'bool',
    'namespaceOrPrefix=' => 'string',
    'isPrefix=' => 'bool',
  ),
  'simplexmliterator::__tostring' => 
  array (
    0 => 'string',
  ),
  'simplexmliterator::addattribute' => 
  array (
    0 => 'mixed',
    'qualifiedName' => 'string',
    'value' => 'string',
    'namespace=' => 'null|string',
  ),
  'simplexmliterator::addchild' => 
  array (
    0 => 'mixed',
    'qualifiedName' => 'string',
    'value=' => 'null|string',
    'namespace=' => 'null|string',
  ),
  'simplexmliterator::asxml' => 
  array (
    0 => 'mixed',
    'filename=' => 'null|string',
  ),
  'simplexmliterator::attributes' => 
  array (
    0 => 'mixed',
    'namespaceOrPrefix=' => 'null|string',
    'isPrefix=' => 'bool',
  ),
  'simplexmliterator::children' => 
  array (
    0 => 'mixed',
    'namespaceOrPrefix=' => 'null|string',
    'isPrefix=' => 'bool',
  ),
  'simplexmliterator::count' => 
  array (
    0 => 'mixed',
  ),
  'simplexmliterator::current' => 
  array (
    0 => 'mixed',
  ),
  'simplexmliterator::getchildren' => 
  array (
    0 => 'mixed',
  ),
  'simplexmliterator::getdocnamespaces' => 
  array (
    0 => 'mixed',
    'recursive=' => 'bool',
    'fromRoot=' => 'bool',
  ),
  'simplexmliterator::getname' => 
  array (
    0 => 'mixed',
  ),
  'simplexmliterator::getnamespaces' => 
  array (
    0 => 'mixed',
    'recursive=' => 'bool',
  ),
  'simplexmliterator::haschildren' => 
  array (
    0 => 'mixed',
  ),
  'simplexmliterator::key' => 
  array (
    0 => 'mixed',
  ),
  'simplexmliterator::next' => 
  array (
    0 => 'mixed',
  ),
  'simplexmliterator::registerxpathnamespace' => 
  array (
    0 => 'mixed',
    'prefix' => 'string',
    'namespace' => 'string',
  ),
  'simplexmliterator::rewind' => 
  array (
    0 => 'mixed',
  ),
  'simplexmliterator::savexml' => 
  array (
    0 => 'mixed',
    'filename=' => 'null|string',
  ),
  'simplexmliterator::valid' => 
  array (
    0 => 'mixed',
  ),
  'simplexmliterator::xpath' => 
  array (
    0 => 'mixed',
    'expression' => 'string',
  ),
  'sin' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'sinh' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'sizeof' => 
  array (
    0 => 'int<0, max>',
    'value' => 'Countable|array<array-key, mixed>',
    'mode=' => 'int',
  ),
  'sleep' => 
  array (
    0 => 'int',
    'seconds' => 'int<0, max>',
  ),
  'snmp2_get' => 
  array (
    0 => 'false|string',
    'hostname' => 'string',
    'community' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'snmp2_getnext' => 
  array (
    0 => 'false|string',
    'hostname' => 'string',
    'community' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'snmp2_real_walk' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'hostname' => 'string',
    'community' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'snmp2_set' => 
  array (
    0 => 'bool',
    'hostname' => 'string',
    'community' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'type' => 'array<array-key, mixed>|string',
    'value' => 'array<array-key, mixed>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'snmp2_walk' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'hostname' => 'string',
    'community' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'snmp3_get' => 
  array (
    0 => 'false|string',
    'hostname' => 'string',
    'security_name' => 'string',
    'security_level' => 'string',
    'auth_protocol' => 'string',
    'auth_passphrase' => 'string',
    'privacy_protocol' => 'string',
    'privacy_passphrase' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'snmp3_getnext' => 
  array (
    0 => 'false|string',
    'hostname' => 'string',
    'security_name' => 'string',
    'security_level' => 'string',
    'auth_protocol' => 'string',
    'auth_passphrase' => 'string',
    'privacy_protocol' => 'string',
    'privacy_passphrase' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'snmp3_real_walk' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'hostname' => 'string',
    'security_name' => 'string',
    'security_level' => 'string',
    'auth_protocol' => 'string',
    'auth_passphrase' => 'string',
    'privacy_protocol' => 'string',
    'privacy_passphrase' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'snmp3_set' => 
  array (
    0 => 'bool',
    'hostname' => 'string',
    'security_name' => 'string',
    'security_level' => 'string',
    'auth_protocol' => 'string',
    'auth_passphrase' => 'string',
    'privacy_protocol' => 'string',
    'privacy_passphrase' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'type' => 'array<array-key, mixed>|string',
    'value' => 'array<array-key, mixed>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'snmp3_walk' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'hostname' => 'string',
    'security_name' => 'string',
    'security_level' => 'string',
    'auth_protocol' => 'string',
    'auth_passphrase' => 'string',
    'privacy_protocol' => 'string',
    'privacy_passphrase' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'snmp::__construct' => 
  array (
    0 => 'void',
    'version' => 'int',
    'hostname' => 'string',
    'community' => 'string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'snmp::close' => 
  array (
    0 => 'bool',
  ),
  'snmp::get' => 
  array (
    0 => 'array<array-key, mixed>|false|string',
    'objectId' => 'array<array-key, mixed>|string',
    'preserveKeys=' => 'bool',
  ),
  'snmp::geterrno' => 
  array (
    0 => 'int',
  ),
  'snmp::geterror' => 
  array (
    0 => 'string',
  ),
  'snmp::getnext' => 
  array (
    0 => 'array<array-key, mixed>|false|string',
    'objectId' => 'array<array-key, mixed>|string',
  ),
  'snmp::set' => 
  array (
    0 => 'bool',
    'objectId' => 'array<array-key, mixed>|string',
    'type' => 'array<array-key, mixed>|string',
    'value' => 'array<array-key, mixed>|string',
  ),
  'snmp::setsecurity' => 
  array (
    0 => 'bool',
    'securityLevel' => 'string',
    'authProtocol=' => 'string',
    'authPassphrase=' => 'string',
    'privacyProtocol=' => 'string',
    'privacyPassphrase=' => 'string',
    'contextName=' => 'string',
    'contextEngineId=' => 'string',
  ),
  'snmp::walk' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'objectId' => 'array<array-key, mixed>|string',
    'suffixAsKey=' => 'bool',
    'maxRepetitions=' => 'int',
    'nonRepeaters=' => 'int',
  ),
  'snmp_get_quick_print' => 
  array (
    0 => 'bool',
  ),
  'snmp_get_valueretrieval' => 
  array (
    0 => 'int',
  ),
  'snmp_read_mib' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'snmp_set_enum_print' => 
  array (
    0 => 'true',
    'enable' => 'bool',
  ),
  'snmp_set_oid_numeric_print' => 
  array (
    0 => 'true',
    'format' => 'int',
  ),
  'snmp_set_oid_output_format' => 
  array (
    0 => 'true',
    'format' => 'int',
  ),
  'snmp_set_quick_print' => 
  array (
    0 => 'bool',
    'enable' => 'bool',
  ),
  'snmp_set_valueretrieval' => 
  array (
    0 => 'true',
    'method' => 'int',
  ),
  'snmpget' => 
  array (
    0 => 'false|string',
    'hostname' => 'string',
    'community' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'snmpgetnext' => 
  array (
    0 => 'false|string',
    'hostname' => 'string',
    'community' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'snmprealwalk' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'hostname' => 'string',
    'community' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'snmpset' => 
  array (
    0 => 'bool',
    'hostname' => 'string',
    'community' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'type' => 'array<array-key, string>|string',
    'value' => 'array<array-key, string>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'snmpwalk' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'hostname' => 'string',
    'community' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'snmpwalkoid' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'hostname' => 'string',
    'community' => 'string',
    'object_id' => 'array<array-key, mixed>|string',
    'timeout=' => 'int',
    'retries=' => 'int',
  ),
  'soapclient::__call' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'args' => 'array<array-key, mixed>',
  ),
  'soapclient::__construct' => 
  array (
    0 => 'void',
    'wsdl' => 'null|string',
    'options=' => 'array<array-key, mixed>',
  ),
  'soapclient::__dorequest' => 
  array (
    0 => 'null|string',
    'request' => 'string',
    'location' => 'string',
    'action' => 'string',
    'version' => 'int',
    'oneWay=' => 'bool',
  ),
  'soapclient::__getcookies' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'soapclient::__getfunctions' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'soapclient::__getlastrequest' => 
  array (
    0 => 'null|string',
  ),
  'soapclient::__getlastrequestheaders' => 
  array (
    0 => 'null|string',
  ),
  'soapclient::__getlastresponse' => 
  array (
    0 => 'null|string',
  ),
  'soapclient::__getlastresponseheaders' => 
  array (
    0 => 'null|string',
  ),
  'soapclient::__gettypes' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'soapclient::__setcookie' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'value=' => 'null|string',
  ),
  'soapclient::__setlocation' => 
  array (
    0 => 'string',
    'location=' => 'null|string',
  ),
  'soapclient::__setsoapheaders' => 
  array (
    0 => 'bool',
    'headers=' => 'mixed',
  ),
  'soapclient::__soapcall' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'args' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>|null',
    'inputHeaders=' => 'SoapHeader|array<array-key, mixed>',
    '&w_outputHeaders=' => 'array<array-key, mixed>',
  ),
  'soapfault::__construct' => 
  array (
    0 => 'void',
    'code' => 'array<array-key, mixed>|null|string',
    'string' => 'string',
    'actor=' => 'null|string',
    'details=' => 'mixed|null',
    'name=' => 'null|string',
    'headerFault=' => 'mixed|null',
  ),
  'soapfault::__tostring' => 
  array (
    0 => 'string',
  ),
  'soapfault::__wakeup' => 
  array (
    0 => 'void',
  ),
  'soapfault::getcode' => 
  array (
    0 => 'int',
  ),
  'soapfault::getfile' => 
  array (
    0 => 'string',
  ),
  'soapfault::getline' => 
  array (
    0 => 'int',
  ),
  'soapfault::getmessage' => 
  array (
    0 => 'string',
  ),
  'soapfault::getprevious' => 
  array (
    0 => 'Exception|Throwable|null',
  ),
  'soapfault::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'soapfault::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'soapheader::__construct' => 
  array (
    0 => 'void',
    'namespace' => 'string',
    'name' => 'string',
    'data=' => 'mixed',
    'mustUnderstand=' => 'bool',
    'actor=' => 'null|string',
  ),
  'soapparam::__construct' => 
  array (
    0 => 'void',
    'data' => 'mixed',
    'name' => 'string',
  ),
  'soapserver::__construct' => 
  array (
    0 => 'void',
    'wsdl' => 'null|string',
    'options=' => 'array<array-key, mixed>',
  ),
  'soapserver::addfunction' => 
  array (
    0 => 'void',
    'functions' => 'mixed',
  ),
  'soapserver::addsoapheader' => 
  array (
    0 => 'void',
    'header' => 'SoapHeader',
  ),
  'soapserver::fault' => 
  array (
    0 => 'void',
    'code' => 'string',
    'string' => 'string',
    'actor=' => 'string',
    'details=' => 'string',
    'name=' => 'string',
  ),
  'soapserver::getfunctions' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'soapserver::handle' => 
  array (
    0 => 'void',
    'request=' => 'null|string',
  ),
  'soapserver::setclass' => 
  array (
    0 => 'void',
    'class' => 'string',
    '...args=' => 'mixed',
  ),
  'soapserver::setobject' => 
  array (
    0 => 'void',
    'object' => 'object',
  ),
  'soapserver::setpersistence' => 
  array (
    0 => 'void',
    'mode' => 'int',
  ),
  'soapvar::__construct' => 
  array (
    0 => 'void',
    'data' => 'mixed',
    'encoding' => 'int|null',
    'typeName=' => 'null|string',
    'typeNamespace=' => 'null|string',
    'nodeName=' => 'null|string',
    'nodeNamespace=' => 'null|string',
  ),
  'socket_accept' => 
  array (
    0 => 'Socket|false',
    'socket' => 'Socket',
  ),
  'socket_addrinfo_bind' => 
  array (
    0 => 'Socket|false',
    'address' => 'AddressInfo',
  ),
  'socket_addrinfo_connect' => 
  array (
    0 => 'Socket|false',
    'address' => 'AddressInfo',
  ),
  'socket_addrinfo_explain' => 
  array (
    0 => 'array<array-key, mixed>',
    'address' => 'AddressInfo',
  ),
  'socket_addrinfo_lookup' => 
  array (
    0 => 'array<array-key, AddressInfo>|false',
    'host' => 'string',
    'service=' => 'null|string',
    'hints=' => 'array<array-key, mixed>',
  ),
  'socket_bind' => 
  array (
    0 => 'bool',
    'socket' => 'Socket',
    'address' => 'string',
    'port=' => 'int',
  ),
  'socket_clear_error' => 
  array (
    0 => 'void',
    'socket=' => 'Socket|null',
  ),
  'socket_close' => 
  array (
    0 => 'void',
    'socket' => 'Socket',
  ),
  'socket_cmsg_space' => 
  array (
    0 => 'int|null',
    'level' => 'int',
    'type' => 'int',
    'num=' => 'int',
  ),
  'socket_connect' => 
  array (
    0 => 'bool',
    'socket' => 'Socket',
    'address' => 'string',
    'port=' => 'int|null',
  ),
  'socket_create' => 
  array (
    0 => 'Socket|false',
    'domain' => 'int',
    'type' => 'int',
    'protocol' => 'int',
  ),
  'socket_create_listen' => 
  array (
    0 => 'Socket|false',
    'port' => 'int',
    'backlog=' => 'int',
  ),
  'socket_create_pair' => 
  array (
    0 => 'bool',
    'domain' => 'int',
    'type' => 'int',
    'protocol' => 'int',
    '&w_pair' => 'array<array-key, Socket>',
  ),
  'socket_export_stream' => 
  array (
    0 => 'false|resource',
    'socket' => 'Socket',
  ),
  'socket_get_option' => 
  array (
    0 => 'array<array-key, mixed>|false|int',
    'socket' => 'Socket',
    'level' => 'int',
    'option' => 'int',
  ),
  'socket_get_status' => 
  array (
    0 => 'array<array-key, mixed>',
    'stream' => 'Socket',
  ),
  'socket_getopt' => 
  array (
    0 => 'array<array-key, mixed>|false|int',
    'socket' => 'Socket',
    'level' => 'int',
    'option' => 'int',
  ),
  'socket_getpeername' => 
  array (
    0 => 'bool',
    'socket' => 'Socket',
    '&w_address' => 'string',
    '&w_port=' => 'int',
  ),
  'socket_getsockname' => 
  array (
    0 => 'bool',
    'socket' => 'Socket',
    '&w_address' => 'string',
    '&w_port=' => 'int',
  ),
  'socket_import_stream' => 
  array (
    0 => 'Socket|false',
    'stream' => 'resource',
  ),
  'socket_last_error' => 
  array (
    0 => 'int',
    'socket=' => 'Socket|null',
  ),
  'socket_listen' => 
  array (
    0 => 'bool',
    'socket' => 'Socket',
    'backlog=' => 'int',
  ),
  'socket_read' => 
  array (
    0 => 'false|string',
    'socket' => 'Socket',
    'length' => 'int',
    'mode=' => 'int',
  ),
  'socket_recv' => 
  array (
    0 => 'false|int',
    'socket' => 'Socket',
    '&w_data' => 'string',
    'length' => 'int',
    'flags' => 'int',
  ),
  'socket_recvfrom' => 
  array (
    0 => 'false|int',
    'socket' => 'Socket',
    '&w_data' => 'string',
    'length' => 'int',
    'flags' => 'int',
    '&w_address' => 'string',
    '&w_port=' => 'int',
  ),
  'socket_recvmsg' => 
  array (
    0 => 'false|int',
    'socket' => 'Socket',
    '&w_message' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'socket_select' => 
  array (
    0 => 'false|int',
    '&rw_read' => 'array<array-key, Socket>|null',
    '&rw_write' => 'array<array-key, Socket>|null',
    '&rw_except' => 'array<array-key, Socket>|null',
    'seconds' => 'int|null',
    'microseconds=' => 'int',
  ),
  'socket_send' => 
  array (
    0 => 'false|int',
    'socket' => 'Socket',
    'data' => 'string',
    'length' => 'int',
    'flags' => 'int',
  ),
  'socket_sendmsg' => 
  array (
    0 => 'false|int',
    'socket' => 'Socket',
    'message' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'socket_sendto' => 
  array (
    0 => 'false|int',
    'socket' => 'Socket',
    'data' => 'string',
    'length' => 'int',
    'flags' => 'int',
    'address' => 'string',
    'port=' => 'int|null',
  ),
  'socket_set_block' => 
  array (
    0 => 'bool',
    'socket' => 'Socket',
  ),
  'socket_set_blocking' => 
  array (
    0 => 'bool',
    'stream' => 'Socket',
    'enable' => 'bool',
  ),
  'socket_set_nonblock' => 
  array (
    0 => 'bool',
    'socket' => 'Socket',
  ),
  'socket_set_option' => 
  array (
    0 => 'bool',
    'socket' => 'Socket',
    'level' => 'int',
    'option' => 'int',
    'value' => 'array<array-key, mixed>|int|string',
  ),
  'socket_set_timeout' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
    'seconds' => 'int',
    'microseconds=' => 'int',
  ),
  'socket_setopt' => 
  array (
    0 => 'bool',
    'socket' => 'Socket',
    'level' => 'int',
    'option' => 'int',
    'value' => 'array<array-key, mixed>|int|string',
  ),
  'socket_shutdown' => 
  array (
    0 => 'bool',
    'socket' => 'Socket',
    'mode=' => 'int',
  ),
  'socket_strerror' => 
  array (
    0 => 'string',
    'error_code' => 'int',
  ),
  'socket_write' => 
  array (
    0 => 'false|int',
    'socket' => 'Socket',
    'data' => 'string',
    'length=' => 'int|null',
  ),
  'socket_wsaprotocol_info_export' => 
  array (
    0 => 'false|string',
    'socket' => 'Socket',
    'process_id' => 'int',
  ),
  'socket_wsaprotocol_info_import' => 
  array (
    0 => 'Socket|false',
    'info_id' => 'string',
  ),
  'socket_wsaprotocol_info_release' => 
  array (
    0 => 'bool',
    'info_id' => 'string',
  ),
  'sodium_add' => 
  array (
    0 => 'void',
    '&string1' => 'string',
    'string2' => 'string',
  ),
  'sodium_base642bin' => 
  array (
    0 => 'string',
    'string' => 'string',
    'id' => 'int',
    'ignore=' => 'string',
  ),
  'sodium_bin2base64' => 
  array (
    0 => 'string',
    'string' => 'string',
    'id' => 'int',
  ),
  'sodium_bin2hex' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'sodium_compare' => 
  array (
    0 => 'int',
    'string1' => 'string',
    'string2' => 'string',
  ),
  'sodium_crypto_aead_aes256gcm_is_available' => 
  array (
    0 => 'bool',
  ),
  'sodium_crypto_aead_chacha20poly1305_decrypt' => 
  array (
    0 => 'false|string',
    'ciphertext' => 'string',
    'additional_data' => 'string',
    'nonce' => 'string',
    'key' => 'string',
  ),
  'sodium_crypto_aead_chacha20poly1305_encrypt' => 
  array (
    0 => 'string',
    'message' => 'string',
    'additional_data' => 'string',
    'nonce' => 'string',
    'key' => 'string',
  ),
  'sodium_crypto_aead_chacha20poly1305_ietf_decrypt' => 
  array (
    0 => 'false|string',
    'ciphertext' => 'string',
    'additional_data' => 'string',
    'nonce' => 'string',
    'key' => 'string',
  ),
  'sodium_crypto_aead_chacha20poly1305_ietf_encrypt' => 
  array (
    0 => 'string',
    'message' => 'string',
    'additional_data' => 'string',
    'nonce' => 'string',
    'key' => 'string',
  ),
  'sodium_crypto_aead_chacha20poly1305_ietf_keygen' => 
  array (
    0 => 'non-empty-string',
  ),
  'sodium_crypto_aead_chacha20poly1305_keygen' => 
  array (
    0 => 'non-empty-string',
  ),
  'sodium_crypto_aead_xchacha20poly1305_ietf_decrypt' => 
  array (
    0 => 'false|string',
    'ciphertext' => 'string',
    'additional_data' => 'string',
    'nonce' => 'string',
    'key' => 'string',
  ),
  'sodium_crypto_aead_xchacha20poly1305_ietf_encrypt' => 
  array (
    0 => 'string',
    'message' => 'string',
    'additional_data' => 'string',
    'nonce' => 'string',
    'key' => 'string',
  ),
  'sodium_crypto_aead_xchacha20poly1305_ietf_keygen' => 
  array (
    0 => 'non-empty-string',
  ),
  'sodium_crypto_auth' => 
  array (
    0 => 'string',
    'message' => 'string',
    'key' => 'string',
  ),
  'sodium_crypto_auth_keygen' => 
  array (
    0 => 'non-empty-string',
  ),
  'sodium_crypto_auth_verify' => 
  array (
    0 => 'bool',
    'mac' => 'string',
    'message' => 'string',
    'key' => 'string',
  ),
  'sodium_crypto_box' => 
  array (
    0 => 'string',
    'message' => 'string',
    'nonce' => 'string',
    'key_pair' => 'string',
  ),
  'sodium_crypto_box_keypair' => 
  array (
    0 => 'string',
  ),
  'sodium_crypto_box_keypair_from_secretkey_and_publickey' => 
  array (
    0 => 'string',
    'secret_key' => 'string',
    'public_key' => 'string',
  ),
  'sodium_crypto_box_open' => 
  array (
    0 => 'false|string',
    'ciphertext' => 'string',
    'nonce' => 'string',
    'key_pair' => 'string',
  ),
  'sodium_crypto_box_publickey' => 
  array (
    0 => 'string',
    'key_pair' => 'string',
  ),
  'sodium_crypto_box_publickey_from_secretkey' => 
  array (
    0 => 'string',
    'secret_key' => 'string',
  ),
  'sodium_crypto_box_seal' => 
  array (
    0 => 'string',
    'message' => 'string',
    'public_key' => 'string',
  ),
  'sodium_crypto_box_seal_open' => 
  array (
    0 => 'false|string',
    'ciphertext' => 'string',
    'key_pair' => 'string',
  ),
  'sodium_crypto_box_secretkey' => 
  array (
    0 => 'string',
    'key_pair' => 'string',
  ),
  'sodium_crypto_box_seed_keypair' => 
  array (
    0 => 'string',
    'seed' => 'string',
  ),
  'sodium_crypto_generichash' => 
  array (
    0 => 'string',
    'message' => 'string',
    'key=' => 'string',
    'length=' => 'int',
  ),
  'sodium_crypto_generichash_final' => 
  array (
    0 => 'string',
    '&state' => 'string',
    'length=' => 'int',
  ),
  'sodium_crypto_generichash_init' => 
  array (
    0 => 'string',
    'key=' => 'string',
    'length=' => 'int',
  ),
  'sodium_crypto_generichash_keygen' => 
  array (
    0 => 'non-empty-string',
  ),
  'sodium_crypto_generichash_update' => 
  array (
    0 => 'true',
    '&state' => 'string',
    'message' => 'string',
  ),
  'sodium_crypto_kdf_derive_from_key' => 
  array (
    0 => 'string',
    'subkey_length' => 'int',
    'subkey_id' => 'int',
    'context' => 'string',
    'key' => 'string',
  ),
  'sodium_crypto_kdf_keygen' => 
  array (
    0 => 'non-empty-string',
  ),
  'sodium_crypto_kx_client_session_keys' => 
  array (
    0 => 'array<int, string>',
    'client_key_pair' => 'string',
    'server_key' => 'string',
  ),
  'sodium_crypto_kx_keypair' => 
  array (
    0 => 'string',
  ),
  'sodium_crypto_kx_publickey' => 
  array (
    0 => 'string',
    'key_pair' => 'string',
  ),
  'sodium_crypto_kx_secretkey' => 
  array (
    0 => 'string',
    'key_pair' => 'string',
  ),
  'sodium_crypto_kx_seed_keypair' => 
  array (
    0 => 'string',
    'seed' => 'string',
  ),
  'sodium_crypto_kx_server_session_keys' => 
  array (
    0 => 'array<int, string>',
    'server_key_pair' => 'string',
    'client_key' => 'string',
  ),
  'sodium_crypto_pwhash' => 
  array (
    0 => 'string',
    'length' => 'int',
    'password' => 'string',
    'salt' => 'string',
    'opslimit' => 'int',
    'memlimit' => 'int',
    'algo=' => 'int',
  ),
  'sodium_crypto_pwhash_scryptsalsa208sha256' => 
  array (
    0 => 'string',
    'length' => 'int',
    'password' => 'string',
    'salt' => 'string',
    'opslimit' => 'int',
    'memlimit' => 'int',
  ),
  'sodium_crypto_pwhash_scryptsalsa208sha256_str' => 
  array (
    0 => 'string',
    'password' => 'string',
    'opslimit' => 'int',
    'memlimit' => 'int',
  ),
  'sodium_crypto_pwhash_scryptsalsa208sha256_str_verify' => 
  array (
    0 => 'bool',
    'hash' => 'string',
    'password' => 'string',
  ),
  'sodium_crypto_pwhash_str' => 
  array (
    0 => 'string',
    'password' => 'string',
    'opslimit' => 'int',
    'memlimit' => 'int',
  ),
  'sodium_crypto_pwhash_str_needs_rehash' => 
  array (
    0 => 'bool',
    'password' => 'string',
    'opslimit' => 'int',
    'memlimit' => 'int',
  ),
  'sodium_crypto_pwhash_str_verify' => 
  array (
    0 => 'bool',
    'hash' => 'string',
    'password' => 'string',
  ),
  'sodium_crypto_scalarmult' => 
  array (
    0 => 'string',
    'n' => 'string',
    'p' => 'string',
  ),
  'sodium_crypto_scalarmult_base' => 
  array (
    0 => 'string',
    'secret_key' => 'string',
  ),
  'sodium_crypto_secretbox' => 
  array (
    0 => 'string',
    'message' => 'string',
    'nonce' => 'string',
    'key' => 'string',
  ),
  'sodium_crypto_secretbox_keygen' => 
  array (
    0 => 'non-empty-string',
  ),
  'sodium_crypto_secretbox_open' => 
  array (
    0 => 'false|string',
    'ciphertext' => 'string',
    'nonce' => 'string',
    'key' => 'string',
  ),
  'sodium_crypto_secretstream_xchacha20poly1305_init_pull' => 
  array (
    0 => 'string',
    'header' => 'string',
    'key' => 'string',
  ),
  'sodium_crypto_secretstream_xchacha20poly1305_init_push' => 
  array (
    0 => 'array<array-key, mixed>',
    'key' => 'string',
  ),
  'sodium_crypto_secretstream_xchacha20poly1305_keygen' => 
  array (
    0 => 'non-empty-string',
  ),
  'sodium_crypto_secretstream_xchacha20poly1305_pull' => 
  array (
    0 => 'array<array-key, mixed>|false',
    '&r_state' => 'string',
    'ciphertext' => 'string',
    'additional_data=' => 'string',
  ),
  'sodium_crypto_secretstream_xchacha20poly1305_push' => 
  array (
    0 => 'string',
    '&w_state' => 'string',
    'message' => 'string',
    'additional_data=' => 'string',
    'tag=' => 'int',
  ),
  'sodium_crypto_secretstream_xchacha20poly1305_rekey' => 
  array (
    0 => 'void',
    '&w_state' => 'string',
  ),
  'sodium_crypto_shorthash' => 
  array (
    0 => 'string',
    'message' => 'string',
    'key' => 'string',
  ),
  'sodium_crypto_shorthash_keygen' => 
  array (
    0 => 'non-empty-string',
  ),
  'sodium_crypto_sign' => 
  array (
    0 => 'string',
    'message' => 'string',
    'secret_key' => 'string',
  ),
  'sodium_crypto_sign_detached' => 
  array (
    0 => 'string',
    'message' => 'string',
    'secret_key' => 'string',
  ),
  'sodium_crypto_sign_ed25519_pk_to_curve25519' => 
  array (
    0 => 'string',
    'public_key' => 'string',
  ),
  'sodium_crypto_sign_ed25519_sk_to_curve25519' => 
  array (
    0 => 'string',
    'secret_key' => 'string',
  ),
  'sodium_crypto_sign_keypair' => 
  array (
    0 => 'string',
  ),
  'sodium_crypto_sign_keypair_from_secretkey_and_publickey' => 
  array (
    0 => 'string',
    'secret_key' => 'string',
    'public_key' => 'string',
  ),
  'sodium_crypto_sign_open' => 
  array (
    0 => 'false|string',
    'signed_message' => 'string',
    'public_key' => 'string',
  ),
  'sodium_crypto_sign_publickey' => 
  array (
    0 => 'string',
    'key_pair' => 'string',
  ),
  'sodium_crypto_sign_publickey_from_secretkey' => 
  array (
    0 => 'string',
    'secret_key' => 'string',
  ),
  'sodium_crypto_sign_secretkey' => 
  array (
    0 => 'string',
    'key_pair' => 'string',
  ),
  'sodium_crypto_sign_seed_keypair' => 
  array (
    0 => 'string',
    'seed' => 'string',
  ),
  'sodium_crypto_sign_verify_detached' => 
  array (
    0 => 'bool',
    'signature' => 'string',
    'message' => 'string',
    'public_key' => 'string',
  ),
  'sodium_crypto_stream' => 
  array (
    0 => 'string',
    'length' => 'int',
    'nonce' => 'string',
    'key' => 'string',
  ),
  'sodium_crypto_stream_keygen' => 
  array (
    0 => 'non-empty-string',
  ),
  'sodium_crypto_stream_xor' => 
  array (
    0 => 'string',
    'message' => 'string',
    'nonce' => 'string',
    'key' => 'string',
  ),
  'sodium_hex2bin' => 
  array (
    0 => 'string',
    'string' => 'string',
    'ignore=' => 'string',
  ),
  'sodium_increment' => 
  array (
    0 => 'void',
    '&string' => 'string',
  ),
  'sodium_memcmp' => 
  array (
    0 => 'int',
    'string1' => 'string',
    'string2' => 'string',
  ),
  'sodium_memzero' => 
  array (
    0 => 'void',
    '&w_string' => 'string',
  ),
  'sodium_pad' => 
  array (
    0 => 'string',
    'string' => 'string',
    'block_size' => 'int',
  ),
  'sodium_unpad' => 
  array (
    0 => 'string',
    'string' => 'string',
    'block_size' => 'int',
  ),
  'sodiumexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'sodiumexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'sodiumexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'sodiumexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'sodiumexception::getfile' => 
  array (
    0 => 'string',
  ),
  'sodiumexception::getline' => 
  array (
    0 => 'int',
  ),
  'sodiumexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'sodiumexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'sodiumexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'sodiumexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'solid_fetch_prev' => 
  array (
    0 => 'bool',
    'result_id' => 'mixed',
  ),
  'solr_get_version' => 
  array (
    0 => 'false|string',
  ),
  'solrclient::__construct' => 
  array (
    0 => 'void',
    'clientOptions' => 'array<array-key, mixed>',
  ),
  'solrclient::__destruct' => 
  array (
    0 => 'void',
  ),
  'solrclient::adddocument' => 
  array (
    0 => 'SolrUpdateResponse',
    'doc' => 'SolrInputDocument',
    'allowdups=' => 'bool',
    'commitwithin=' => 'int',
  ),
  'solrclient::adddocuments' => 
  array (
    0 => 'SolrUpdateResponse',
    'docs' => 'array<array-key, mixed>',
    'allowdups=' => 'bool',
    'commitwithin=' => 'int',
  ),
  'solrclient::commit' => 
  array (
    0 => 'SolrUpdateResponse',
    'maxsegments=' => 'int',
    'waitflush=' => 'bool',
    'waitsearcher=' => 'bool',
  ),
  'solrclient::deletebyid' => 
  array (
    0 => 'SolrUpdateResponse',
    'id' => 'string',
  ),
  'solrclient::deletebyids' => 
  array (
    0 => 'SolrUpdateResponse',
    'ids' => 'array<array-key, mixed>',
  ),
  'solrclient::deletebyqueries' => 
  array (
    0 => 'SolrUpdateResponse',
    'queries' => 'array<array-key, mixed>',
  ),
  'solrclient::deletebyquery' => 
  array (
    0 => 'SolrUpdateResponse',
    'query' => 'string',
  ),
  'solrclient::getbyid' => 
  array (
    0 => 'SolrQueryResponse',
    'id' => 'string',
  ),
  'solrclient::getbyids' => 
  array (
    0 => 'SolrQueryResponse',
    'ids' => 'array<array-key, mixed>',
  ),
  'solrclient::getdebug' => 
  array (
    0 => 'string',
  ),
  'solrclient::getoptions' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrclient::optimize' => 
  array (
    0 => 'SolrUpdateResponse',
    'maxsegments=' => 'int',
    'waitflush=' => 'bool',
    'waitsearcher=' => 'bool',
  ),
  'solrclient::ping' => 
  array (
    0 => 'SolrPingResponse',
  ),
  'solrclient::query' => 
  array (
    0 => 'SolrQueryResponse',
    'query' => 'SolrParams',
  ),
  'solrclient::request' => 
  array (
    0 => 'SolrUpdateResponse',
    'raw_request' => 'string',
  ),
  'solrclient::rollback' => 
  array (
    0 => 'SolrUpdateResponse',
  ),
  'solrclient::setresponsewriter' => 
  array (
    0 => 'void',
    'responsewriter' => 'string',
  ),
  'solrclient::setservlet' => 
  array (
    0 => 'bool',
    'type' => 'int',
    'value' => 'string',
  ),
  'solrclient::system' => 
  array (
    0 => 'SolrGenericResponse',
  ),
  'solrclient::threads' => 
  array (
    0 => 'SolrGenericResponse',
  ),
  'solrclientexception::__clone' => 
  array (
    0 => 'void',
  ),
  'solrclientexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Exception|Throwable|null',
  ),
  'solrclientexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'solrclientexception::__wakeup' => 
  array (
    0 => 'void',
  ),
  'solrclientexception::getcode' => 
  array (
    0 => 'int',
  ),
  'solrclientexception::getfile' => 
  array (
    0 => 'string',
  ),
  'solrclientexception::getinternalinfo' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrclientexception::getline' => 
  array (
    0 => 'int',
  ),
  'solrclientexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'solrclientexception::getprevious' => 
  array (
    0 => 'Exception|Throwable|null',
  ),
  'solrclientexception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'solrclientexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'solrcollapsefunction::__construct' => 
  array (
    0 => 'void',
    'field' => 'string',
  ),
  'solrcollapsefunction::__tostring' => 
  array (
    0 => 'string',
  ),
  'solrcollapsefunction::getfield' => 
  array (
    0 => 'string',
  ),
  'solrcollapsefunction::gethint' => 
  array (
    0 => 'string',
  ),
  'solrcollapsefunction::getmax' => 
  array (
    0 => 'string',
  ),
  'solrcollapsefunction::getmin' => 
  array (
    0 => 'string',
  ),
  'solrcollapsefunction::getnullpolicy' => 
  array (
    0 => 'string',
  ),
  'solrcollapsefunction::getsize' => 
  array (
    0 => 'int',
  ),
  'solrcollapsefunction::setfield' => 
  array (
    0 => 'SolrCollapseFunction',
    'fieldName' => 'string',
  ),
  'solrcollapsefunction::sethint' => 
  array (
    0 => 'SolrCollapseFunction',
    'hint' => 'string',
  ),
  'solrcollapsefunction::setmax' => 
  array (
    0 => 'SolrCollapseFunction',
    'max' => 'string',
  ),
  'solrcollapsefunction::setmin' => 
  array (
    0 => 'SolrCollapseFunction',
    'min' => 'string',
  ),
  'solrcollapsefunction::setnullpolicy' => 
  array (
    0 => 'SolrCollapseFunction',
    'nullPolicy' => 'string',
  ),
  'solrcollapsefunction::setsize' => 
  array (
    0 => 'SolrCollapseFunction',
    'size' => 'int',
  ),
  'solrdismaxquery::__construct' => 
  array (
    0 => 'void',
    'q=' => 'string',
  ),
  'solrdismaxquery::__destruct' => 
  array (
    0 => 'void',
  ),
  'solrdismaxquery::add' => 
  array (
    0 => 'SolrParams',
    'name' => 'string',
    'value' => 'string',
  ),
  'solrdismaxquery::addbigramphrasefield' => 
  array (
    0 => 'SolrDisMaxQuery',
    'field' => 'string',
    'boost' => 'string',
    'slop=' => 'string',
  ),
  'solrdismaxquery::addboostquery' => 
  array (
    0 => 'SolrDisMaxQuery',
    'field' => 'string',
    'value' => 'string',
    'boost=' => 'string',
  ),
  'solrdismaxquery::addexpandfilterquery' => 
  array (
    0 => 'SolrQuery',
    'fq' => 'string',
  ),
  'solrdismaxquery::addexpandsortfield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
    'order' => 'string',
  ),
  'solrdismaxquery::addfacetdatefield' => 
  array (
    0 => 'SolrQuery',
    'dateField' => 'string',
  ),
  'solrdismaxquery::addfacetdateother' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
    'field_override' => 'string',
  ),
  'solrdismaxquery::addfacetfield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'solrdismaxquery::addfacetquery' => 
  array (
    0 => 'SolrQuery',
    'facetQuery' => 'string',
  ),
  'solrdismaxquery::addfield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'solrdismaxquery::addfilterquery' => 
  array (
    0 => 'SolrQuery',
    'fq' => 'string',
  ),
  'solrdismaxquery::addgroupfield' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'solrdismaxquery::addgroupfunction' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'solrdismaxquery::addgroupquery' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'solrdismaxquery::addgroupsortfield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
    'order' => 'int',
  ),
  'solrdismaxquery::addhighlightfield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'solrdismaxquery::addmltfield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'solrdismaxquery::addmltqueryfield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
    'boost' => 'float',
  ),
  'solrdismaxquery::addparam' => 
  array (
    0 => 'SolrParams',
    'name' => 'string',
    'value' => 'string',
  ),
  'solrdismaxquery::addphrasefield' => 
  array (
    0 => 'SolrDisMaxQuery',
    'field' => 'string',
    'boost' => 'string',
    'slop=' => 'string',
  ),
  'solrdismaxquery::addqueryfield' => 
  array (
    0 => 'SolrDisMaxQuery',
    'field' => 'string',
    'boost=' => 'string',
  ),
  'solrdismaxquery::addsortfield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
    'order=' => 'int',
  ),
  'solrdismaxquery::addstatsfacet' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'solrdismaxquery::addstatsfield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'solrdismaxquery::addtrigramphrasefield' => 
  array (
    0 => 'SolrDisMaxQuery',
    'field' => 'string',
    'boost' => 'string',
    'slop=' => 'string',
  ),
  'solrdismaxquery::adduserfield' => 
  array (
    0 => 'SolrDisMaxQuery',
    'field' => 'string',
  ),
  'solrdismaxquery::collapse' => 
  array (
    0 => 'SolrQuery',
    'collapseFunction' => 'SolrCollapseFunction',
  ),
  'solrdismaxquery::get' => 
  array (
    0 => 'mixed',
    'param_name' => 'string',
  ),
  'solrdismaxquery::getexpand' => 
  array (
    0 => 'bool',
  ),
  'solrdismaxquery::getexpandfilterqueries' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrdismaxquery::getexpandquery' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrdismaxquery::getexpandrows' => 
  array (
    0 => 'int',
  ),
  'solrdismaxquery::getexpandsortfields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrdismaxquery::getfacet' => 
  array (
    0 => 'bool',
  ),
  'solrdismaxquery::getfacetdateend' => 
  array (
    0 => 'string',
    'field_override' => 'string',
  ),
  'solrdismaxquery::getfacetdatefields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrdismaxquery::getfacetdategap' => 
  array (
    0 => 'string',
    'field_override' => 'string',
  ),
  'solrdismaxquery::getfacetdatehardend' => 
  array (
    0 => 'string',
    'field_override' => 'string',
  ),
  'solrdismaxquery::getfacetdateother' => 
  array (
    0 => 'string',
    'field_override' => 'string',
  ),
  'solrdismaxquery::getfacetdatestart' => 
  array (
    0 => 'string',
    'field_override' => 'string',
  ),
  'solrdismaxquery::getfacetfields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrdismaxquery::getfacetlimit' => 
  array (
    0 => 'int',
    'field_override' => 'string',
  ),
  'solrdismaxquery::getfacetmethod' => 
  array (
    0 => 'string',
    'field_override' => 'string',
  ),
  'solrdismaxquery::getfacetmincount' => 
  array (
    0 => 'int',
    'field_override' => 'string',
  ),
  'solrdismaxquery::getfacetmissing' => 
  array (
    0 => 'string',
    'field_override' => 'string',
  ),
  'solrdismaxquery::getfacetoffset' => 
  array (
    0 => 'int',
    'field_override' => 'string',
  ),
  'solrdismaxquery::getfacetprefix' => 
  array (
    0 => 'string',
    'field_override' => 'string',
  ),
  'solrdismaxquery::getfacetqueries' => 
  array (
    0 => 'string',
  ),
  'solrdismaxquery::getfacetsort' => 
  array (
    0 => 'int',
    'field_override' => 'string',
  ),
  'solrdismaxquery::getfields' => 
  array (
    0 => 'string',
  ),
  'solrdismaxquery::getfilterqueries' => 
  array (
    0 => 'string',
  ),
  'solrdismaxquery::getgroup' => 
  array (
    0 => 'bool',
  ),
  'solrdismaxquery::getgroupcachepercent' => 
  array (
    0 => 'int',
  ),
  'solrdismaxquery::getgroupfacet' => 
  array (
    0 => 'bool',
  ),
  'solrdismaxquery::getgroupfields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrdismaxquery::getgroupformat' => 
  array (
    0 => 'string',
  ),
  'solrdismaxquery::getgroupfunctions' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrdismaxquery::getgrouplimit' => 
  array (
    0 => 'int',
  ),
  'solrdismaxquery::getgroupmain' => 
  array (
    0 => 'bool',
  ),
  'solrdismaxquery::getgroupngroups' => 
  array (
    0 => 'bool',
  ),
  'solrdismaxquery::getgroupoffset' => 
  array (
    0 => 'bool',
  ),
  'solrdismaxquery::getgroupqueries' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrdismaxquery::getgroupsortfields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrdismaxquery::getgrouptruncate' => 
  array (
    0 => 'bool',
  ),
  'solrdismaxquery::gethighlight' => 
  array (
    0 => 'bool',
  ),
  'solrdismaxquery::gethighlightalternatefield' => 
  array (
    0 => 'string',
    'field_override' => 'string',
  ),
  'solrdismaxquery::gethighlightfields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrdismaxquery::gethighlightformatter' => 
  array (
    0 => 'string',
    'field_override' => 'string',
  ),
  'solrdismaxquery::gethighlightfragmenter' => 
  array (
    0 => 'string',
    'field_override' => 'string',
  ),
  'solrdismaxquery::gethighlightfragsize' => 
  array (
    0 => 'int',
    'field_override' => 'string',
  ),
  'solrdismaxquery::gethighlighthighlightmultiterm' => 
  array (
    0 => 'bool',
  ),
  'solrdismaxquery::gethighlightmaxalternatefieldlength' => 
  array (
    0 => 'int',
    'field_override' => 'string',
  ),
  'solrdismaxquery::gethighlightmaxanalyzedchars' => 
  array (
    0 => 'int',
  ),
  'solrdismaxquery::gethighlightmergecontiguous' => 
  array (
    0 => 'bool',
    'field_override' => 'string',
  ),
  'solrdismaxquery::gethighlightregexmaxanalyzedchars' => 
  array (
    0 => 'int',
  ),
  'solrdismaxquery::gethighlightregexpattern' => 
  array (
    0 => 'string',
  ),
  'solrdismaxquery::gethighlightregexslop' => 
  array (
    0 => 'float',
  ),
  'solrdismaxquery::gethighlightrequirefieldmatch' => 
  array (
    0 => 'bool',
  ),
  'solrdismaxquery::gethighlightsimplepost' => 
  array (
    0 => 'string',
    'field_override' => 'string',
  ),
  'solrdismaxquery::gethighlightsimplepre' => 
  array (
    0 => 'string',
    'field_override' => 'string',
  ),
  'solrdismaxquery::gethighlightsnippets' => 
  array (
    0 => 'int',
    'field_override' => 'string',
  ),
  'solrdismaxquery::gethighlightusephrasehighlighter' => 
  array (
    0 => 'bool',
  ),
  'solrdismaxquery::getmlt' => 
  array (
    0 => 'bool',
  ),
  'solrdismaxquery::getmltboost' => 
  array (
    0 => 'bool',
  ),
  'solrdismaxquery::getmltcount' => 
  array (
    0 => 'int',
  ),
  'solrdismaxquery::getmltfields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrdismaxquery::getmltmaxnumqueryterms' => 
  array (
    0 => 'int',
  ),
  'solrdismaxquery::getmltmaxnumtokens' => 
  array (
    0 => 'int',
  ),
  'solrdismaxquery::getmltmaxwordlength' => 
  array (
    0 => 'int',
  ),
  'solrdismaxquery::getmltmindocfrequency' => 
  array (
    0 => 'int',
  ),
  'solrdismaxquery::getmltmintermfrequency' => 
  array (
    0 => 'int',
  ),
  'solrdismaxquery::getmltminwordlength' => 
  array (
    0 => 'int',
  ),
  'solrdismaxquery::getmltqueryfields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrdismaxquery::getparam' => 
  array (
    0 => 'mixed',
    'param_name' => 'string',
  ),
  'solrdismaxquery::getparams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrdismaxquery::getpreparedparams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrdismaxquery::getquery' => 
  array (
    0 => 'string',
  ),
  'solrdismaxquery::getrows' => 
  array (
    0 => 'int',
  ),
  'solrdismaxquery::getsortfields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrdismaxquery::getstart' => 
  array (
    0 => 'int',
  ),
  'solrdismaxquery::getstats' => 
  array (
    0 => 'bool',
  ),
  'solrdismaxquery::getstatsfacets' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrdismaxquery::getstatsfields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrdismaxquery::getterms' => 
  array (
    0 => 'bool',
  ),
  'solrdismaxquery::gettermsfield' => 
  array (
    0 => 'string',
  ),
  'solrdismaxquery::gettermsincludelowerbound' => 
  array (
    0 => 'bool',
  ),
  'solrdismaxquery::gettermsincludeupperbound' => 
  array (
    0 => 'bool',
  ),
  'solrdismaxquery::gettermslimit' => 
  array (
    0 => 'int',
  ),
  'solrdismaxquery::gettermslowerbound' => 
  array (
    0 => 'string',
  ),
  'solrdismaxquery::gettermsmaxcount' => 
  array (
    0 => 'int',
  ),
  'solrdismaxquery::gettermsmincount' => 
  array (
    0 => 'int',
  ),
  'solrdismaxquery::gettermsprefix' => 
  array (
    0 => 'string',
  ),
  'solrdismaxquery::gettermsreturnraw' => 
  array (
    0 => 'bool',
  ),
  'solrdismaxquery::gettermssort' => 
  array (
    0 => 'int',
  ),
  'solrdismaxquery::gettermsupperbound' => 
  array (
    0 => 'string',
  ),
  'solrdismaxquery::gettimeallowed' => 
  array (
    0 => 'int',
  ),
  'solrdismaxquery::removebigramphrasefield' => 
  array (
    0 => 'SolrDisMaxQuery',
    'field' => 'string',
  ),
  'solrdismaxquery::removeboostquery' => 
  array (
    0 => 'SolrDisMaxQuery',
    'field' => 'string',
  ),
  'solrdismaxquery::removeexpandfilterquery' => 
  array (
    0 => 'SolrQuery',
    'fq' => 'string',
  ),
  'solrdismaxquery::removeexpandsortfield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'solrdismaxquery::removefacetdatefield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'solrdismaxquery::removefacetdateother' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
    'field_override' => 'string',
  ),
  'solrdismaxquery::removefacetfield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'solrdismaxquery::removefacetquery' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'solrdismaxquery::removefield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'solrdismaxquery::removefilterquery' => 
  array (
    0 => 'SolrQuery',
    'fq' => 'string',
  ),
  'solrdismaxquery::removehighlightfield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'solrdismaxquery::removemltfield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'solrdismaxquery::removemltqueryfield' => 
  array (
    0 => 'SolrQuery',
    'queryField' => 'string',
  ),
  'solrdismaxquery::removephrasefield' => 
  array (
    0 => 'SolrDisMaxQuery',
    'field' => 'string',
  ),
  'solrdismaxquery::removequeryfield' => 
  array (
    0 => 'SolrDisMaxQuery',
    'field' => 'string',
  ),
  'solrdismaxquery::removesortfield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'solrdismaxquery::removestatsfacet' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'solrdismaxquery::removestatsfield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'solrdismaxquery::removetrigramphrasefield' => 
  array (
    0 => 'SolrDisMaxQuery',
    'field' => 'string',
  ),
  'solrdismaxquery::removeuserfield' => 
  array (
    0 => 'SolrDisMaxQuery',
    'field' => 'string',
  ),
  'solrdismaxquery::serialize' => 
  array (
    0 => 'string',
  ),
  'solrdismaxquery::set' => 
  array (
    0 => 'SolrParams',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'solrdismaxquery::setbigramphrasefields' => 
  array (
    0 => 'SolrDisMaxQuery',
    'fields' => 'string',
  ),
  'solrdismaxquery::setbigramphraseslop' => 
  array (
    0 => 'SolrDisMaxQuery',
    'slop' => 'string',
  ),
  'solrdismaxquery::setboostfunction' => 
  array (
    0 => 'SolrDisMaxQuery',
    'function' => 'string',
  ),
  'solrdismaxquery::setboostquery' => 
  array (
    0 => 'SolrDisMaxQuery',
    'q' => 'string',
  ),
  'solrdismaxquery::setechohandler' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'solrdismaxquery::setechoparams' => 
  array (
    0 => 'SolrQuery',
    'type' => 'string',
  ),
  'solrdismaxquery::setexpand' => 
  array (
    0 => 'SolrQuery',
    'value' => 'bool',
  ),
  'solrdismaxquery::setexpandquery' => 
  array (
    0 => 'SolrQuery',
    'q' => 'string',
  ),
  'solrdismaxquery::setexpandrows' => 
  array (
    0 => 'SolrQuery',
    'value' => 'int',
  ),
  'solrdismaxquery::setexplainother' => 
  array (
    0 => 'SolrQuery',
    'query' => 'string',
  ),
  'solrdismaxquery::setfacet' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'solrdismaxquery::setfacetdateend' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
    'field_override' => 'string',
  ),
  'solrdismaxquery::setfacetdategap' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
    'field_override' => 'string',
  ),
  'solrdismaxquery::setfacetdatehardend' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
    'field_override' => 'string',
  ),
  'solrdismaxquery::setfacetdatestart' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
    'field_override' => 'string',
  ),
  'solrdismaxquery::setfacetenumcachemindefaultfrequency' => 
  array (
    0 => 'SolrQuery',
    'frequency' => 'int',
    'field_override' => 'string',
  ),
  'solrdismaxquery::setfacetlimit' => 
  array (
    0 => 'SolrQuery',
    'limit' => 'int',
    'field_override' => 'string',
  ),
  'solrdismaxquery::setfacetmethod' => 
  array (
    0 => 'SolrQuery',
    'method' => 'string',
    'field_override' => 'string',
  ),
  'solrdismaxquery::setfacetmincount' => 
  array (
    0 => 'SolrQuery',
    'mincount' => 'int',
    'field_override' => 'string',
  ),
  'solrdismaxquery::setfacetmissing' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
    'field_override' => 'string',
  ),
  'solrdismaxquery::setfacetoffset' => 
  array (
    0 => 'SolrQuery',
    'offset' => 'int',
    'field_override' => 'string',
  ),
  'solrdismaxquery::setfacetprefix' => 
  array (
    0 => 'SolrQuery',
    'prefix' => 'string',
    'field_override' => 'string',
  ),
  'solrdismaxquery::setfacetsort' => 
  array (
    0 => 'SolrQuery',
    'facetSort' => 'int',
    'field_override' => 'string',
  ),
  'solrdismaxquery::setgroup' => 
  array (
    0 => 'SolrQuery',
    'value' => 'bool',
  ),
  'solrdismaxquery::setgroupcachepercent' => 
  array (
    0 => 'SolrQuery',
    'percent' => 'int',
  ),
  'solrdismaxquery::setgroupfacet' => 
  array (
    0 => 'SolrQuery',
    'value' => 'bool',
  ),
  'solrdismaxquery::setgroupformat' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'solrdismaxquery::setgrouplimit' => 
  array (
    0 => 'SolrQuery',
    'value' => 'int',
  ),
  'solrdismaxquery::setgroupmain' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'solrdismaxquery::setgroupngroups' => 
  array (
    0 => 'SolrQuery',
    'value' => 'bool',
  ),
  'solrdismaxquery::setgroupoffset' => 
  array (
    0 => 'SolrQuery',
    'value' => 'int',
  ),
  'solrdismaxquery::setgrouptruncate' => 
  array (
    0 => 'SolrQuery',
    'value' => 'bool',
  ),
  'solrdismaxquery::sethighlight' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'solrdismaxquery::sethighlightalternatefield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
    'field_override' => 'string',
  ),
  'solrdismaxquery::sethighlightformatter' => 
  array (
    0 => 'SolrQuery',
    'formatter' => 'string',
    'field_override' => 'string',
  ),
  'solrdismaxquery::sethighlightfragmenter' => 
  array (
    0 => 'SolrQuery',
    'fragmenter' => 'string',
    'field_override' => 'string',
  ),
  'solrdismaxquery::sethighlightfragsize' => 
  array (
    0 => 'SolrQuery',
    'size' => 'int',
    'field_override' => 'string',
  ),
  'solrdismaxquery::sethighlighthighlightmultiterm' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'solrdismaxquery::sethighlightmaxalternatefieldlength' => 
  array (
    0 => 'SolrQuery',
    'fieldLength' => 'string',
    'field_override' => 'string',
  ),
  'solrdismaxquery::sethighlightmaxanalyzedchars' => 
  array (
    0 => 'SolrQuery',
    'value' => 'int',
  ),
  'solrdismaxquery::sethighlightmergecontiguous' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
    'field_override' => 'string',
  ),
  'solrdismaxquery::sethighlightregexmaxanalyzedchars' => 
  array (
    0 => 'SolrQuery',
    'maxAnalyzedChars' => 'int',
  ),
  'solrdismaxquery::sethighlightregexpattern' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'solrdismaxquery::sethighlightregexslop' => 
  array (
    0 => 'SolrQuery',
    'factor' => 'float',
  ),
  'solrdismaxquery::sethighlightrequirefieldmatch' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'solrdismaxquery::sethighlightsimplepost' => 
  array (
    0 => 'SolrQuery',
    'simplePost' => 'string',
    'field_override' => 'string',
  ),
  'solrdismaxquery::sethighlightsimplepre' => 
  array (
    0 => 'SolrQuery',
    'simplePre' => 'string',
    'field_override' => 'string',
  ),
  'solrdismaxquery::sethighlightsnippets' => 
  array (
    0 => 'SolrQuery',
    'value' => 'int',
    'field_override' => 'string',
  ),
  'solrdismaxquery::sethighlightusephrasehighlighter' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'solrdismaxquery::setminimummatch' => 
  array (
    0 => 'SolrDisMaxQuery',
    'value' => 'string',
  ),
  'solrdismaxquery::setmlt' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'solrdismaxquery::setmltboost' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'solrdismaxquery::setmltcount' => 
  array (
    0 => 'SolrQuery',
    'count' => 'int',
  ),
  'solrdismaxquery::setmltmaxnumqueryterms' => 
  array (
    0 => 'SolrQuery',
    'value' => 'int',
  ),
  'solrdismaxquery::setmltmaxnumtokens' => 
  array (
    0 => 'SolrQuery',
    'value' => 'int',
  ),
  'solrdismaxquery::setmltmaxwordlength' => 
  array (
    0 => 'SolrQuery',
    'maxWordLength' => 'int',
  ),
  'solrdismaxquery::setmltmindocfrequency' => 
  array (
    0 => 'SolrQuery',
    'minDocFrequency' => 'int',
  ),
  'solrdismaxquery::setmltmintermfrequency' => 
  array (
    0 => 'SolrQuery',
    'minTermFrequency' => 'int',
  ),
  'solrdismaxquery::setmltminwordlength' => 
  array (
    0 => 'SolrQuery',
    'minWordLength' => 'int',
  ),
  'solrdismaxquery::setomitheader' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'solrdismaxquery::setparam' => 
  array (
    0 => 'SolrParams',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'solrdismaxquery::setphrasefields' => 
  array (
    0 => 'SolrDisMaxQuery',
    'fields' => 'string',
  ),
  'solrdismaxquery::setphraseslop' => 
  array (
    0 => 'SolrDisMaxQuery',
    'slop' => 'string',
  ),
  'solrdismaxquery::setquery' => 
  array (
    0 => 'SolrQuery',
    'query' => 'string',
  ),
  'solrdismaxquery::setqueryalt' => 
  array (
    0 => 'SolrDisMaxQuery',
    'q' => 'string',
  ),
  'solrdismaxquery::setqueryphraseslop' => 
  array (
    0 => 'SolrDisMaxQuery',
    'slop' => 'string',
  ),
  'solrdismaxquery::setrows' => 
  array (
    0 => 'SolrQuery',
    'rows' => 'int',
  ),
  'solrdismaxquery::setshowdebuginfo' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'solrdismaxquery::setstart' => 
  array (
    0 => 'SolrQuery',
    'start' => 'int',
  ),
  'solrdismaxquery::setstats' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'solrdismaxquery::setterms' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'solrdismaxquery::settermsfield' => 
  array (
    0 => 'SolrQuery',
    'fieldname' => 'string',
  ),
  'solrdismaxquery::settermsincludelowerbound' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'solrdismaxquery::settermsincludeupperbound' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'solrdismaxquery::settermslimit' => 
  array (
    0 => 'SolrQuery',
    'limit' => 'int',
  ),
  'solrdismaxquery::settermslowerbound' => 
  array (
    0 => 'SolrQuery',
    'lowerBound' => 'string',
  ),
  'solrdismaxquery::settermsmaxcount' => 
  array (
    0 => 'SolrQuery',
    'frequency' => 'int',
  ),
  'solrdismaxquery::settermsmincount' => 
  array (
    0 => 'SolrQuery',
    'frequency' => 'int',
  ),
  'solrdismaxquery::settermsprefix' => 
  array (
    0 => 'SolrQuery',
    'prefix' => 'string',
  ),
  'solrdismaxquery::settermsreturnraw' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'solrdismaxquery::settermssort' => 
  array (
    0 => 'SolrQuery',
    'sortType' => 'int',
  ),
  'solrdismaxquery::settermsupperbound' => 
  array (
    0 => 'SolrQuery',
    'upperBound' => 'string',
  ),
  'solrdismaxquery::settiebreaker' => 
  array (
    0 => 'SolrDisMaxQuery',
    'tieBreaker' => 'string',
  ),
  'solrdismaxquery::settimeallowed' => 
  array (
    0 => 'SolrQuery',
    'timeAllowed' => 'int',
  ),
  'solrdismaxquery::settrigramphrasefields' => 
  array (
    0 => 'SolrDisMaxQuery',
    'fields' => 'string',
  ),
  'solrdismaxquery::settrigramphraseslop' => 
  array (
    0 => 'SolrDisMaxQuery',
    'slop' => 'string',
  ),
  'solrdismaxquery::setuserfields' => 
  array (
    0 => 'SolrDisMaxQuery',
    'fields' => 'string',
  ),
  'solrdismaxquery::tostring' => 
  array (
    0 => 'string',
    'url_encode=' => 'bool',
  ),
  'solrdismaxquery::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'solrdismaxquery::usedismaxqueryparser' => 
  array (
    0 => 'SolrDisMaxQuery',
  ),
  'solrdismaxquery::useedismaxqueryparser' => 
  array (
    0 => 'SolrDisMaxQuery',
  ),
  'solrdocument::__clone' => 
  array (
    0 => 'void',
  ),
  'solrdocument::__construct' => 
  array (
    0 => 'void',
  ),
  'solrdocument::__destruct' => 
  array (
    0 => 'void',
  ),
  'solrdocument::__get' => 
  array (
    0 => 'SolrDocumentField',
    'fieldname' => 'string',
  ),
  'solrdocument::__isset' => 
  array (
    0 => 'bool',
    'fieldname' => 'string',
  ),
  'solrdocument::__set' => 
  array (
    0 => 'bool',
    'fieldname' => 'string',
    'fieldvalue' => 'string',
  ),
  'solrdocument::__unset' => 
  array (
    0 => 'bool',
    'fieldname' => 'string',
  ),
  'solrdocument::addfield' => 
  array (
    0 => 'bool',
    'fieldname' => 'string',
    'fieldvalue' => 'string',
  ),
  'solrdocument::clear' => 
  array (
    0 => 'bool',
  ),
  'solrdocument::current' => 
  array (
    0 => 'SolrDocumentField',
  ),
  'solrdocument::deletefield' => 
  array (
    0 => 'bool',
    'fieldname' => 'string',
  ),
  'solrdocument::fieldexists' => 
  array (
    0 => 'bool',
    'fieldname' => 'string',
  ),
  'solrdocument::getchilddocuments' => 
  array (
    0 => 'array<array-key, SolrInputDocument>',
  ),
  'solrdocument::getchilddocumentscount' => 
  array (
    0 => 'int',
  ),
  'solrdocument::getfield' => 
  array (
    0 => 'SolrDocumentField|false',
    'fieldname' => 'string',
  ),
  'solrdocument::getfieldcount' => 
  array (
    0 => 'false|int',
  ),
  'solrdocument::getfieldnames' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'solrdocument::getinputdocument' => 
  array (
    0 => 'SolrInputDocument',
  ),
  'solrdocument::haschilddocuments' => 
  array (
    0 => 'bool',
  ),
  'solrdocument::key' => 
  array (
    0 => 'string',
  ),
  'solrdocument::merge' => 
  array (
    0 => 'bool',
    'sourcedoc' => 'solrdocument',
    'overwrite=' => 'bool',
  ),
  'solrdocument::next' => 
  array (
    0 => 'void',
  ),
  'solrdocument::offsetexists' => 
  array (
    0 => 'bool',
    'fieldname' => 'string',
  ),
  'solrdocument::offsetget' => 
  array (
    0 => 'SolrDocumentField',
    'fieldname' => 'string',
  ),
  'solrdocument::offsetset' => 
  array (
    0 => 'void',
    'fieldname' => 'string',
    'fieldvalue' => 'string',
  ),
  'solrdocument::offsetunset' => 
  array (
    0 => 'void',
    'fieldname' => 'string',
  ),
  'solrdocument::reset' => 
  array (
    0 => 'bool',
  ),
  'solrdocument::rewind' => 
  array (
    0 => 'void',
  ),
  'solrdocument::serialize' => 
  array (
    0 => 'string',
  ),
  'solrdocument::sort' => 
  array (
    0 => 'bool',
    'sortorderby' => 'int',
    'sortdirection=' => 'int',
  ),
  'solrdocument::toarray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrdocument::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'solrdocument::valid' => 
  array (
    0 => 'bool',
  ),
  'solrdocumentfield::__construct' => 
  array (
    0 => 'void',
  ),
  'solrdocumentfield::__destruct' => 
  array (
    0 => 'void',
  ),
  'solrexception::__clone' => 
  array (
    0 => 'void',
  ),
  'solrexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Exception|Throwable|null',
  ),
  'solrexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'solrexception::__wakeup' => 
  array (
    0 => 'void',
  ),
  'solrexception::getcode' => 
  array (
    0 => 'int',
  ),
  'solrexception::getfile' => 
  array (
    0 => 'string',
  ),
  'solrexception::getinternalinfo' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrexception::getline' => 
  array (
    0 => 'int',
  ),
  'solrexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'solrexception::getprevious' => 
  array (
    0 => 'Exception|Throwable',
  ),
  'solrexception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'solrexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'solrgenericresponse::__construct' => 
  array (
    0 => 'void',
  ),
  'solrgenericresponse::__destruct' => 
  array (
    0 => 'void',
  ),
  'solrgenericresponse::getdigestedresponse' => 
  array (
    0 => 'string',
  ),
  'solrgenericresponse::gethttpstatus' => 
  array (
    0 => 'int',
  ),
  'solrgenericresponse::gethttpstatusmessage' => 
  array (
    0 => 'string',
  ),
  'solrgenericresponse::getrawrequest' => 
  array (
    0 => 'string',
  ),
  'solrgenericresponse::getrawrequestheaders' => 
  array (
    0 => 'string',
  ),
  'solrgenericresponse::getrawresponse' => 
  array (
    0 => 'string',
  ),
  'solrgenericresponse::getrawresponseheaders' => 
  array (
    0 => 'string',
  ),
  'solrgenericresponse::getrequesturl' => 
  array (
    0 => 'string',
  ),
  'solrgenericresponse::getresponse' => 
  array (
    0 => 'SolrObject',
  ),
  'solrgenericresponse::setparsemode' => 
  array (
    0 => 'bool',
    'parser_mode=' => 'int',
  ),
  'solrgenericresponse::success' => 
  array (
    0 => 'bool',
  ),
  'solrillegalargumentexception::__clone' => 
  array (
    0 => 'void',
  ),
  'solrillegalargumentexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Exception|Throwable|null',
  ),
  'solrillegalargumentexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'solrillegalargumentexception::__wakeup' => 
  array (
    0 => 'void',
  ),
  'solrillegalargumentexception::getcode' => 
  array (
    0 => 'int',
  ),
  'solrillegalargumentexception::getfile' => 
  array (
    0 => 'string',
  ),
  'solrillegalargumentexception::getinternalinfo' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrillegalargumentexception::getline' => 
  array (
    0 => 'int',
  ),
  'solrillegalargumentexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'solrillegalargumentexception::getprevious' => 
  array (
    0 => 'Exception|Throwable',
  ),
  'solrillegalargumentexception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'solrillegalargumentexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'solrillegaloperationexception::__clone' => 
  array (
    0 => 'void',
  ),
  'solrillegaloperationexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Exception|Throwable|null',
  ),
  'solrillegaloperationexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'solrillegaloperationexception::__wakeup' => 
  array (
    0 => 'void',
  ),
  'solrillegaloperationexception::getcode' => 
  array (
    0 => 'int',
  ),
  'solrillegaloperationexception::getfile' => 
  array (
    0 => 'string',
  ),
  'solrillegaloperationexception::getinternalinfo' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrillegaloperationexception::getline' => 
  array (
    0 => 'int',
  ),
  'solrillegaloperationexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'solrillegaloperationexception::getprevious' => 
  array (
    0 => 'Exception|Throwable',
  ),
  'solrillegaloperationexception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'solrillegaloperationexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'solrinputdocument::__clone' => 
  array (
    0 => 'void',
  ),
  'solrinputdocument::__construct' => 
  array (
    0 => 'void',
  ),
  'solrinputdocument::__destruct' => 
  array (
    0 => 'void',
  ),
  'solrinputdocument::addchilddocument' => 
  array (
    0 => 'void',
    'child' => 'SolrInputDocument',
  ),
  'solrinputdocument::addchilddocuments' => 
  array (
    0 => 'void',
    'docs' => 'array<array-key, mixed>',
  ),
  'solrinputdocument::addfield' => 
  array (
    0 => 'bool',
    'fieldname' => 'string',
    'fieldvalue' => 'string',
    'fieldboostvalue=' => 'float',
  ),
  'solrinputdocument::clear' => 
  array (
    0 => 'bool',
  ),
  'solrinputdocument::deletefield' => 
  array (
    0 => 'bool',
    'fieldname' => 'string',
  ),
  'solrinputdocument::fieldexists' => 
  array (
    0 => 'bool',
    'fieldname' => 'string',
  ),
  'solrinputdocument::getboost' => 
  array (
    0 => 'false|float',
  ),
  'solrinputdocument::getchilddocuments' => 
  array (
    0 => 'array<array-key, SolrInputDocument>',
  ),
  'solrinputdocument::getchilddocumentscount' => 
  array (
    0 => 'int',
  ),
  'solrinputdocument::getfield' => 
  array (
    0 => 'SolrDocumentField|false',
    'fieldname' => 'string',
  ),
  'solrinputdocument::getfieldboost' => 
  array (
    0 => 'false|float',
    'fieldname' => 'string',
  ),
  'solrinputdocument::getfieldcount' => 
  array (
    0 => 'false|int',
  ),
  'solrinputdocument::getfieldnames' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'solrinputdocument::haschilddocuments' => 
  array (
    0 => 'bool',
  ),
  'solrinputdocument::merge' => 
  array (
    0 => 'bool',
    'sourcedoc' => 'SolrInputDocument',
    'overwrite=' => 'bool',
  ),
  'solrinputdocument::reset' => 
  array (
    0 => 'bool',
  ),
  'solrinputdocument::setboost' => 
  array (
    0 => 'bool',
    'documentboostvalue' => 'float',
  ),
  'solrinputdocument::setfieldboost' => 
  array (
    0 => 'bool',
    'fieldname' => 'string',
    'fieldboostvalue' => 'float',
  ),
  'solrinputdocument::sort' => 
  array (
    0 => 'bool',
    'sortorderby' => 'int',
    'sortdirection=' => 'int',
  ),
  'solrinputdocument::toarray' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'solrmodifiableparams::__construct' => 
  array (
    0 => 'void',
  ),
  'solrmodifiableparams::__destruct' => 
  array (
    0 => 'void',
  ),
  'solrmodifiableparams::add' => 
  array (
    0 => 'SolrParams',
    'name' => 'string',
    'value' => 'string',
  ),
  'solrmodifiableparams::addparam' => 
  array (
    0 => 'SolrParams',
    'name' => 'string',
    'value' => 'string',
  ),
  'solrmodifiableparams::get' => 
  array (
    0 => 'mixed',
    'param_name' => 'string',
  ),
  'solrmodifiableparams::getparam' => 
  array (
    0 => 'mixed',
    'param_name' => 'string',
  ),
  'solrmodifiableparams::getparams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrmodifiableparams::getpreparedparams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrmodifiableparams::serialize' => 
  array (
    0 => 'string',
  ),
  'solrmodifiableparams::set' => 
  array (
    0 => 'SolrParams',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'solrmodifiableparams::setparam' => 
  array (
    0 => 'SolrParams',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'solrmodifiableparams::tostring' => 
  array (
    0 => 'string',
    'url_encode=' => 'bool',
  ),
  'solrmodifiableparams::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'solrobject::__construct' => 
  array (
    0 => 'void',
  ),
  'solrobject::__destruct' => 
  array (
    0 => 'void',
  ),
  'solrobject::getpropertynames' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrobject::offsetexists' => 
  array (
    0 => 'bool',
    'property_name' => 'string',
  ),
  'solrobject::offsetget' => 
  array (
    0 => 'SolrDocumentField',
    'property_name' => 'string',
  ),
  'solrobject::offsetset' => 
  array (
    0 => 'void',
    'property_name' => 'string',
    'property_value' => 'string',
  ),
  'solrobject::offsetunset' => 
  array (
    0 => 'void',
    'property_name' => 'string',
  ),
  'solrparams::__construct' => 
  array (
    0 => 'void',
  ),
  'solrparams::add' => 
  array (
    0 => 'SolrParams|false',
    'name' => 'string',
    'value' => 'string',
  ),
  'solrparams::addparam' => 
  array (
    0 => 'SolrParams|false',
    'name' => 'string',
    'value' => 'string',
  ),
  'solrparams::get' => 
  array (
    0 => 'mixed',
    'param_name' => 'string',
  ),
  'solrparams::getparam' => 
  array (
    0 => 'mixed',
    'param_name=' => 'string',
  ),
  'solrparams::getparams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrparams::getpreparedparams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrparams::serialize' => 
  array (
    0 => 'string',
  ),
  'solrparams::set' => 
  array (
    0 => 'SolrParams|false',
    'name' => 'string',
    'value' => 'string',
  ),
  'solrparams::setparam' => 
  array (
    0 => 'SolrParams|false',
    'name' => 'string',
    'value' => 'string',
  ),
  'solrparams::tostring' => 
  array (
    0 => 'false|string',
    'url_encode=' => 'bool',
  ),
  'solrparams::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'solrpingresponse::__construct' => 
  array (
    0 => 'void',
  ),
  'solrpingresponse::__destruct' => 
  array (
    0 => 'void',
  ),
  'solrpingresponse::getdigestedresponse' => 
  array (
    0 => 'string',
  ),
  'solrpingresponse::gethttpstatus' => 
  array (
    0 => 'int',
  ),
  'solrpingresponse::gethttpstatusmessage' => 
  array (
    0 => 'string',
  ),
  'solrpingresponse::getrawrequest' => 
  array (
    0 => 'string',
  ),
  'solrpingresponse::getrawrequestheaders' => 
  array (
    0 => 'string',
  ),
  'solrpingresponse::getrawresponse' => 
  array (
    0 => 'string',
  ),
  'solrpingresponse::getrawresponseheaders' => 
  array (
    0 => 'string',
  ),
  'solrpingresponse::getrequesturl' => 
  array (
    0 => 'string',
  ),
  'solrpingresponse::getresponse' => 
  array (
    0 => 'string',
  ),
  'solrpingresponse::setparsemode' => 
  array (
    0 => 'bool',
    'parser_mode=' => 'int',
  ),
  'solrpingresponse::success' => 
  array (
    0 => 'bool',
  ),
  'solrquery::__construct' => 
  array (
    0 => 'void',
    'q=' => 'string',
  ),
  'solrquery::__destruct' => 
  array (
    0 => 'void',
  ),
  'solrquery::add' => 
  array (
    0 => 'SolrParams',
    'name' => 'string',
    'value' => 'string',
  ),
  'solrquery::addexpandfilterquery' => 
  array (
    0 => 'SolrQuery',
    'fq' => 'string',
  ),
  'solrquery::addexpandsortfield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
    'order=' => 'string',
  ),
  'solrquery::addfacetdatefield' => 
  array (
    0 => 'SolrQuery',
    'datefield' => 'string',
  ),
  'solrquery::addfacetdateother' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
    'field_override=' => 'string',
  ),
  'solrquery::addfacetfield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'solrquery::addfacetquery' => 
  array (
    0 => 'SolrQuery',
    'facetquery' => 'string',
  ),
  'solrquery::addfield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'solrquery::addfilterquery' => 
  array (
    0 => 'SolrQuery',
    'fq' => 'string',
  ),
  'solrquery::addgroupfield' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'solrquery::addgroupfunction' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'solrquery::addgroupquery' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'solrquery::addgroupsortfield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
    'order=' => 'int',
  ),
  'solrquery::addhighlightfield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'solrquery::addmltfield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'solrquery::addmltqueryfield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
    'boost' => 'float',
  ),
  'solrquery::addparam' => 
  array (
    0 => 'SolrParams',
    'name' => 'string',
    'value' => 'string',
  ),
  'solrquery::addsortfield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
    'order=' => 'int',
  ),
  'solrquery::addstatsfacet' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'solrquery::addstatsfield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'solrquery::collapse' => 
  array (
    0 => 'SolrQuery',
    'collapseFunction' => 'SolrCollapseFunction',
  ),
  'solrquery::get' => 
  array (
    0 => 'mixed',
    'param_name' => 'string',
  ),
  'solrquery::getexpand' => 
  array (
    0 => 'bool',
  ),
  'solrquery::getexpandfilterqueries' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrquery::getexpandquery' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrquery::getexpandrows' => 
  array (
    0 => 'int',
  ),
  'solrquery::getexpandsortfields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrquery::getfacet' => 
  array (
    0 => 'bool|null',
  ),
  'solrquery::getfacetdateend' => 
  array (
    0 => 'null|string',
    'field_override=' => 'string',
  ),
  'solrquery::getfacetdatefields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrquery::getfacetdategap' => 
  array (
    0 => 'null|string',
    'field_override=' => 'string',
  ),
  'solrquery::getfacetdatehardend' => 
  array (
    0 => 'null|string',
    'field_override=' => 'string',
  ),
  'solrquery::getfacetdateother' => 
  array (
    0 => 'null|string',
    'field_override=' => 'string',
  ),
  'solrquery::getfacetdatestart' => 
  array (
    0 => 'null|string',
    'field_override=' => 'string',
  ),
  'solrquery::getfacetfields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrquery::getfacetlimit' => 
  array (
    0 => 'int|null',
    'field_override=' => 'string',
  ),
  'solrquery::getfacetmethod' => 
  array (
    0 => 'null|string',
    'field_override=' => 'string',
  ),
  'solrquery::getfacetmincount' => 
  array (
    0 => 'int|null',
    'field_override=' => 'string',
  ),
  'solrquery::getfacetmissing' => 
  array (
    0 => 'bool|null',
    'field_override=' => 'string',
  ),
  'solrquery::getfacetoffset' => 
  array (
    0 => 'int|null',
    'field_override=' => 'string',
  ),
  'solrquery::getfacetprefix' => 
  array (
    0 => 'null|string',
    'field_override=' => 'string',
  ),
  'solrquery::getfacetqueries' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'solrquery::getfacetsort' => 
  array (
    0 => 'int',
    'field_override=' => 'string',
  ),
  'solrquery::getfields' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'solrquery::getfilterqueries' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'solrquery::getgroup' => 
  array (
    0 => 'bool',
  ),
  'solrquery::getgroupcachepercent' => 
  array (
    0 => 'int',
  ),
  'solrquery::getgroupfacet' => 
  array (
    0 => 'bool',
  ),
  'solrquery::getgroupfields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrquery::getgroupformat' => 
  array (
    0 => 'string',
  ),
  'solrquery::getgroupfunctions' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrquery::getgrouplimit' => 
  array (
    0 => 'int',
  ),
  'solrquery::getgroupmain' => 
  array (
    0 => 'bool',
  ),
  'solrquery::getgroupngroups' => 
  array (
    0 => 'bool',
  ),
  'solrquery::getgroupoffset' => 
  array (
    0 => 'int',
  ),
  'solrquery::getgroupqueries' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrquery::getgroupsortfields' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrquery::getgrouptruncate' => 
  array (
    0 => 'bool',
  ),
  'solrquery::gethighlight' => 
  array (
    0 => 'bool',
  ),
  'solrquery::gethighlightalternatefield' => 
  array (
    0 => 'null|string',
    'field_override=' => 'string',
  ),
  'solrquery::gethighlightfields' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'solrquery::gethighlightformatter' => 
  array (
    0 => 'null|string',
    'field_override=' => 'string',
  ),
  'solrquery::gethighlightfragmenter' => 
  array (
    0 => 'null|string',
    'field_override=' => 'string',
  ),
  'solrquery::gethighlightfragsize' => 
  array (
    0 => 'int|null',
    'field_override=' => 'string',
  ),
  'solrquery::gethighlighthighlightmultiterm' => 
  array (
    0 => 'bool|null',
  ),
  'solrquery::gethighlightmaxalternatefieldlength' => 
  array (
    0 => 'int|null',
    'field_override=' => 'string',
  ),
  'solrquery::gethighlightmaxanalyzedchars' => 
  array (
    0 => 'int|null',
  ),
  'solrquery::gethighlightmergecontiguous' => 
  array (
    0 => 'bool|null',
    'field_override=' => 'string',
  ),
  'solrquery::gethighlightregexmaxanalyzedchars' => 
  array (
    0 => 'int|null',
  ),
  'solrquery::gethighlightregexpattern' => 
  array (
    0 => 'null|string',
  ),
  'solrquery::gethighlightregexslop' => 
  array (
    0 => 'float|null',
  ),
  'solrquery::gethighlightrequirefieldmatch' => 
  array (
    0 => 'bool|null',
  ),
  'solrquery::gethighlightsimplepost' => 
  array (
    0 => 'null|string',
    'field_override=' => 'string',
  ),
  'solrquery::gethighlightsimplepre' => 
  array (
    0 => 'null|string',
    'field_override=' => 'string',
  ),
  'solrquery::gethighlightsnippets' => 
  array (
    0 => 'int|null',
    'field_override=' => 'string',
  ),
  'solrquery::gethighlightusephrasehighlighter' => 
  array (
    0 => 'bool|null',
  ),
  'solrquery::getmlt' => 
  array (
    0 => 'bool|null',
  ),
  'solrquery::getmltboost' => 
  array (
    0 => 'bool|null',
  ),
  'solrquery::getmltcount' => 
  array (
    0 => 'int|null',
  ),
  'solrquery::getmltfields' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'solrquery::getmltmaxnumqueryterms' => 
  array (
    0 => 'int|null',
  ),
  'solrquery::getmltmaxnumtokens' => 
  array (
    0 => 'int|null',
  ),
  'solrquery::getmltmaxwordlength' => 
  array (
    0 => 'int|null',
  ),
  'solrquery::getmltmindocfrequency' => 
  array (
    0 => 'int|null',
  ),
  'solrquery::getmltmintermfrequency' => 
  array (
    0 => 'int|null',
  ),
  'solrquery::getmltminwordlength' => 
  array (
    0 => 'int|null',
  ),
  'solrquery::getmltqueryfields' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'solrquery::getparam' => 
  array (
    0 => 'mixed|null',
    'param_name' => 'string',
  ),
  'solrquery::getparams' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'solrquery::getpreparedparams' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'solrquery::getquery' => 
  array (
    0 => 'null|string',
  ),
  'solrquery::getrows' => 
  array (
    0 => 'int|null',
  ),
  'solrquery::getsortfields' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'solrquery::getstart' => 
  array (
    0 => 'int|null',
  ),
  'solrquery::getstats' => 
  array (
    0 => 'bool|null',
  ),
  'solrquery::getstatsfacets' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'solrquery::getstatsfields' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'solrquery::getterms' => 
  array (
    0 => 'bool|null',
  ),
  'solrquery::gettermsfield' => 
  array (
    0 => 'null|string',
  ),
  'solrquery::gettermsincludelowerbound' => 
  array (
    0 => 'bool|null',
  ),
  'solrquery::gettermsincludeupperbound' => 
  array (
    0 => 'bool|null',
  ),
  'solrquery::gettermslimit' => 
  array (
    0 => 'int|null',
  ),
  'solrquery::gettermslowerbound' => 
  array (
    0 => 'null|string',
  ),
  'solrquery::gettermsmaxcount' => 
  array (
    0 => 'int|null',
  ),
  'solrquery::gettermsmincount' => 
  array (
    0 => 'int|null',
  ),
  'solrquery::gettermsprefix' => 
  array (
    0 => 'null|string',
  ),
  'solrquery::gettermsreturnraw' => 
  array (
    0 => 'bool|null',
  ),
  'solrquery::gettermssort' => 
  array (
    0 => 'int|null',
  ),
  'solrquery::gettermsupperbound' => 
  array (
    0 => 'null|string',
  ),
  'solrquery::gettimeallowed' => 
  array (
    0 => 'int|null',
  ),
  'solrquery::removeexpandfilterquery' => 
  array (
    0 => 'SolrQuery',
    'fq' => 'string',
  ),
  'solrquery::removeexpandsortfield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'solrquery::removefacetdatefield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'solrquery::removefacetdateother' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
    'field_override=' => 'string',
  ),
  'solrquery::removefacetfield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'solrquery::removefacetquery' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'solrquery::removefield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'solrquery::removefilterquery' => 
  array (
    0 => 'SolrQuery',
    'fq' => 'string',
  ),
  'solrquery::removehighlightfield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'solrquery::removemltfield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'solrquery::removemltqueryfield' => 
  array (
    0 => 'SolrQuery',
    'queryfield' => 'string',
  ),
  'solrquery::removesortfield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'solrquery::removestatsfacet' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'solrquery::removestatsfield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
  ),
  'solrquery::serialize' => 
  array (
    0 => 'string',
  ),
  'solrquery::set' => 
  array (
    0 => 'SolrParams',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'solrquery::setechohandler' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'solrquery::setechoparams' => 
  array (
    0 => 'SolrQuery',
    'type' => 'string',
  ),
  'solrquery::setexpand' => 
  array (
    0 => 'SolrQuery',
    'value' => 'bool',
  ),
  'solrquery::setexpandquery' => 
  array (
    0 => 'SolrQuery',
    'q' => 'string',
  ),
  'solrquery::setexpandrows' => 
  array (
    0 => 'SolrQuery',
    'value' => 'int',
  ),
  'solrquery::setexplainother' => 
  array (
    0 => 'SolrQuery',
    'query' => 'string',
  ),
  'solrquery::setfacet' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'solrquery::setfacetdateend' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
    'field_override=' => 'string',
  ),
  'solrquery::setfacetdategap' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
    'field_override=' => 'string',
  ),
  'solrquery::setfacetdatehardend' => 
  array (
    0 => 'SolrQuery',
    'value' => 'bool',
    'field_override=' => 'string',
  ),
  'solrquery::setfacetdatestart' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
    'field_override=' => 'string',
  ),
  'solrquery::setfacetenumcachemindefaultfrequency' => 
  array (
    0 => 'SolrQuery',
    'frequency' => 'int',
    'field_override=' => 'string',
  ),
  'solrquery::setfacetlimit' => 
  array (
    0 => 'SolrQuery',
    'limit' => 'int',
    'field_override=' => 'string',
  ),
  'solrquery::setfacetmethod' => 
  array (
    0 => 'SolrQuery',
    'method' => 'string',
    'field_override=' => 'string',
  ),
  'solrquery::setfacetmincount' => 
  array (
    0 => 'SolrQuery',
    'mincount' => 'int',
    'field_override=' => 'string',
  ),
  'solrquery::setfacetmissing' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
    'field_override=' => 'string',
  ),
  'solrquery::setfacetoffset' => 
  array (
    0 => 'SolrQuery',
    'offset' => 'int',
    'field_override=' => 'string',
  ),
  'solrquery::setfacetprefix' => 
  array (
    0 => 'SolrQuery',
    'prefix' => 'string',
    'field_override=' => 'string',
  ),
  'solrquery::setfacetsort' => 
  array (
    0 => 'SolrQuery',
    'facetsort' => 'int',
    'field_override=' => 'string',
  ),
  'solrquery::setgroup' => 
  array (
    0 => 'SolrQuery',
    'value' => 'bool',
  ),
  'solrquery::setgroupcachepercent' => 
  array (
    0 => 'SolrQuery',
    'percent' => 'int',
  ),
  'solrquery::setgroupfacet' => 
  array (
    0 => 'SolrQuery',
    'value' => 'bool',
  ),
  'solrquery::setgroupformat' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'solrquery::setgrouplimit' => 
  array (
    0 => 'SolrQuery',
    'value' => 'int',
  ),
  'solrquery::setgroupmain' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'solrquery::setgroupngroups' => 
  array (
    0 => 'SolrQuery',
    'value' => 'bool',
  ),
  'solrquery::setgroupoffset' => 
  array (
    0 => 'SolrQuery',
    'value' => 'int',
  ),
  'solrquery::setgrouptruncate' => 
  array (
    0 => 'SolrQuery',
    'value' => 'bool',
  ),
  'solrquery::sethighlight' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'solrquery::sethighlightalternatefield' => 
  array (
    0 => 'SolrQuery',
    'field' => 'string',
    'field_override=' => 'string',
  ),
  'solrquery::sethighlightformatter' => 
  array (
    0 => 'SolrQuery',
    'formatter' => 'string',
    'field_override=' => 'string',
  ),
  'solrquery::sethighlightfragmenter' => 
  array (
    0 => 'SolrQuery',
    'fragmenter' => 'string',
    'field_override=' => 'string',
  ),
  'solrquery::sethighlightfragsize' => 
  array (
    0 => 'SolrQuery',
    'size' => 'int',
    'field_override=' => 'string',
  ),
  'solrquery::sethighlighthighlightmultiterm' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'solrquery::sethighlightmaxalternatefieldlength' => 
  array (
    0 => 'SolrQuery',
    'fieldlength' => 'int',
    'field_override=' => 'string',
  ),
  'solrquery::sethighlightmaxanalyzedchars' => 
  array (
    0 => 'SolrQuery',
    'value' => 'int',
  ),
  'solrquery::sethighlightmergecontiguous' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
    'field_override=' => 'string',
  ),
  'solrquery::sethighlightregexmaxanalyzedchars' => 
  array (
    0 => 'SolrQuery',
    'maxanalyzedchars' => 'int',
  ),
  'solrquery::sethighlightregexpattern' => 
  array (
    0 => 'SolrQuery',
    'value' => 'string',
  ),
  'solrquery::sethighlightregexslop' => 
  array (
    0 => 'SolrQuery',
    'factor' => 'float',
  ),
  'solrquery::sethighlightrequirefieldmatch' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'solrquery::sethighlightsimplepost' => 
  array (
    0 => 'SolrQuery',
    'simplepost' => 'string',
    'field_override=' => 'string',
  ),
  'solrquery::sethighlightsimplepre' => 
  array (
    0 => 'SolrQuery',
    'simplepre' => 'string',
    'field_override=' => 'string',
  ),
  'solrquery::sethighlightsnippets' => 
  array (
    0 => 'SolrQuery',
    'value' => 'int',
    'field_override=' => 'string',
  ),
  'solrquery::sethighlightusephrasehighlighter' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'solrquery::setmlt' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'solrquery::setmltboost' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'solrquery::setmltcount' => 
  array (
    0 => 'SolrQuery',
    'count' => 'int',
  ),
  'solrquery::setmltmaxnumqueryterms' => 
  array (
    0 => 'SolrQuery',
    'value' => 'int',
  ),
  'solrquery::setmltmaxnumtokens' => 
  array (
    0 => 'SolrQuery',
    'value' => 'int',
  ),
  'solrquery::setmltmaxwordlength' => 
  array (
    0 => 'SolrQuery',
    'maxwordlength' => 'int',
  ),
  'solrquery::setmltmindocfrequency' => 
  array (
    0 => 'SolrQuery',
    'mindocfrequency' => 'int',
  ),
  'solrquery::setmltmintermfrequency' => 
  array (
    0 => 'SolrQuery',
    'mintermfrequency' => 'int',
  ),
  'solrquery::setmltminwordlength' => 
  array (
    0 => 'SolrQuery',
    'minwordlength' => 'int',
  ),
  'solrquery::setomitheader' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'solrquery::setparam' => 
  array (
    0 => 'SolrParams',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'solrquery::setquery' => 
  array (
    0 => 'SolrQuery',
    'query' => 'string',
  ),
  'solrquery::setrows' => 
  array (
    0 => 'SolrQuery',
    'rows' => 'int',
  ),
  'solrquery::setshowdebuginfo' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'solrquery::setstart' => 
  array (
    0 => 'SolrQuery',
    'start' => 'int',
  ),
  'solrquery::setstats' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'solrquery::setterms' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'solrquery::settermsfield' => 
  array (
    0 => 'SolrQuery',
    'fieldname' => 'string',
  ),
  'solrquery::settermsincludelowerbound' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'solrquery::settermsincludeupperbound' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'solrquery::settermslimit' => 
  array (
    0 => 'SolrQuery',
    'limit' => 'int',
  ),
  'solrquery::settermslowerbound' => 
  array (
    0 => 'SolrQuery',
    'lowerbound' => 'string',
  ),
  'solrquery::settermsmaxcount' => 
  array (
    0 => 'SolrQuery',
    'frequency' => 'int',
  ),
  'solrquery::settermsmincount' => 
  array (
    0 => 'SolrQuery',
    'frequency' => 'int',
  ),
  'solrquery::settermsprefix' => 
  array (
    0 => 'SolrQuery',
    'prefix' => 'string',
  ),
  'solrquery::settermsreturnraw' => 
  array (
    0 => 'SolrQuery',
    'flag' => 'bool',
  ),
  'solrquery::settermssort' => 
  array (
    0 => 'SolrQuery',
    'sorttype' => 'int',
  ),
  'solrquery::settermsupperbound' => 
  array (
    0 => 'SolrQuery',
    'upperbound' => 'string',
  ),
  'solrquery::settimeallowed' => 
  array (
    0 => 'SolrQuery',
    'timeallowed' => 'int',
  ),
  'solrquery::tostring' => 
  array (
    0 => 'string',
    'url_encode=' => 'bool',
  ),
  'solrquery::unserialize' => 
  array (
    0 => 'void',
    'serialized' => 'string',
  ),
  'solrqueryresponse::__construct' => 
  array (
    0 => 'void',
  ),
  'solrqueryresponse::__destruct' => 
  array (
    0 => 'void',
  ),
  'solrqueryresponse::getdigestedresponse' => 
  array (
    0 => 'string',
  ),
  'solrqueryresponse::gethttpstatus' => 
  array (
    0 => 'int',
  ),
  'solrqueryresponse::gethttpstatusmessage' => 
  array (
    0 => 'string',
  ),
  'solrqueryresponse::getrawrequest' => 
  array (
    0 => 'string',
  ),
  'solrqueryresponse::getrawrequestheaders' => 
  array (
    0 => 'string',
  ),
  'solrqueryresponse::getrawresponse' => 
  array (
    0 => 'string',
  ),
  'solrqueryresponse::getrawresponseheaders' => 
  array (
    0 => 'string',
  ),
  'solrqueryresponse::getrequesturl' => 
  array (
    0 => 'string',
  ),
  'solrqueryresponse::getresponse' => 
  array (
    0 => 'SolrObject',
  ),
  'solrqueryresponse::setparsemode' => 
  array (
    0 => 'bool',
    'parser_mode=' => 'int',
  ),
  'solrqueryresponse::success' => 
  array (
    0 => 'bool',
  ),
  'solrresponse::getdigestedresponse' => 
  array (
    0 => 'string',
  ),
  'solrresponse::gethttpstatus' => 
  array (
    0 => 'int',
  ),
  'solrresponse::gethttpstatusmessage' => 
  array (
    0 => 'string',
  ),
  'solrresponse::getrawrequest' => 
  array (
    0 => 'string',
  ),
  'solrresponse::getrawrequestheaders' => 
  array (
    0 => 'string',
  ),
  'solrresponse::getrawresponse' => 
  array (
    0 => 'string',
  ),
  'solrresponse::getrawresponseheaders' => 
  array (
    0 => 'string',
  ),
  'solrresponse::getrequesturl' => 
  array (
    0 => 'string',
  ),
  'solrresponse::getresponse' => 
  array (
    0 => 'SolrObject',
  ),
  'solrresponse::setparsemode' => 
  array (
    0 => 'bool',
    'parser_mode=' => 'int',
  ),
  'solrresponse::success' => 
  array (
    0 => 'bool',
  ),
  'solrserverexception::__clone' => 
  array (
    0 => 'void',
  ),
  'solrserverexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Exception|Throwable|null',
  ),
  'solrserverexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'solrserverexception::__wakeup' => 
  array (
    0 => 'void',
  ),
  'solrserverexception::getcode' => 
  array (
    0 => 'int',
  ),
  'solrserverexception::getfile' => 
  array (
    0 => 'string',
  ),
  'solrserverexception::getinternalinfo' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'solrserverexception::getline' => 
  array (
    0 => 'int',
  ),
  'solrserverexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'solrserverexception::getprevious' => 
  array (
    0 => 'Exception|Throwable',
  ),
  'solrserverexception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'solrserverexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'solrupdateresponse::__construct' => 
  array (
    0 => 'void',
  ),
  'solrupdateresponse::__destruct' => 
  array (
    0 => 'void',
  ),
  'solrupdateresponse::getdigestedresponse' => 
  array (
    0 => 'string',
  ),
  'solrupdateresponse::gethttpstatus' => 
  array (
    0 => 'int',
  ),
  'solrupdateresponse::gethttpstatusmessage' => 
  array (
    0 => 'string',
  ),
  'solrupdateresponse::getrawrequest' => 
  array (
    0 => 'string',
  ),
  'solrupdateresponse::getrawrequestheaders' => 
  array (
    0 => 'string',
  ),
  'solrupdateresponse::getrawresponse' => 
  array (
    0 => 'string',
  ),
  'solrupdateresponse::getrawresponseheaders' => 
  array (
    0 => 'string',
  ),
  'solrupdateresponse::getrequesturl' => 
  array (
    0 => 'string',
  ),
  'solrupdateresponse::getresponse' => 
  array (
    0 => 'SolrObject',
  ),
  'solrupdateresponse::setparsemode' => 
  array (
    0 => 'bool',
    'parser_mode=' => 'int',
  ),
  'solrupdateresponse::success' => 
  array (
    0 => 'bool',
  ),
  'solrutils::digestxmlresponse' => 
  array (
    0 => 'SolrObject',
    'xmlresponse' => 'string',
    'parse_mode=' => 'int',
  ),
  'solrutils::escapequerychars' => 
  array (
    0 => 'false|string',
    'string' => 'string',
  ),
  'solrutils::getsolrversion' => 
  array (
    0 => 'string',
  ),
  'solrutils::queryphrase' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'sort' => 
  array (
    0 => 'true',
    '&array' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'soundex' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'sphinxclient::__construct' => 
  array (
    0 => 'void',
  ),
  'sphinxclient::addquery' => 
  array (
    0 => 'int',
    'query' => 'string',
    'index=' => 'string',
    'comment=' => 'string',
  ),
  'sphinxclient::buildexcerpts' => 
  array (
    0 => 'array<array-key, mixed>',
    'docs' => 'array<array-key, mixed>',
    'index' => 'string',
    'words' => 'string',
    'opts=' => 'array<array-key, mixed>',
  ),
  'sphinxclient::buildkeywords' => 
  array (
    0 => 'array<array-key, mixed>',
    'query' => 'string',
    'index' => 'string',
    'hits' => 'bool',
  ),
  'sphinxclient::close' => 
  array (
    0 => 'bool',
  ),
  'sphinxclient::escapestring' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'sphinxclient::getlasterror' => 
  array (
    0 => 'string',
  ),
  'sphinxclient::getlastwarning' => 
  array (
    0 => 'string',
  ),
  'sphinxclient::open' => 
  array (
    0 => 'bool',
  ),
  'sphinxclient::query' => 
  array (
    0 => 'array<array-key, mixed>',
    'query' => 'string',
    'index=' => 'string',
    'comment=' => 'string',
  ),
  'sphinxclient::resetfilters' => 
  array (
    0 => 'void',
  ),
  'sphinxclient::resetgroupby' => 
  array (
    0 => 'void',
  ),
  'sphinxclient::runqueries' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'sphinxclient::setarrayresult' => 
  array (
    0 => 'bool',
    'array_result' => 'bool',
  ),
  'sphinxclient::setconnecttimeout' => 
  array (
    0 => 'bool',
    'timeout' => 'float',
  ),
  'sphinxclient::setfieldweights' => 
  array (
    0 => 'bool',
    'weights' => 'array<array-key, mixed>',
  ),
  'sphinxclient::setfilter' => 
  array (
    0 => 'bool',
    'attribute' => 'string',
    'values' => 'array<array-key, mixed>',
    'exclude=' => 'bool',
  ),
  'sphinxclient::setfilterfloatrange' => 
  array (
    0 => 'bool',
    'attribute' => 'string',
    'min' => 'float',
    'max' => 'float',
    'exclude=' => 'bool',
  ),
  'sphinxclient::setfilterrange' => 
  array (
    0 => 'bool',
    'attribute' => 'string',
    'min' => 'int',
    'max' => 'int',
    'exclude=' => 'bool',
  ),
  'sphinxclient::setgeoanchor' => 
  array (
    0 => 'bool',
    'attrlat' => 'string',
    'attrlong' => 'string',
    'latitude' => 'float',
    'longitude' => 'float',
  ),
  'sphinxclient::setgroupby' => 
  array (
    0 => 'bool',
    'attribute' => 'string',
    'func' => 'int',
    'groupsort=' => 'string',
  ),
  'sphinxclient::setgroupdistinct' => 
  array (
    0 => 'bool',
    'attribute' => 'string',
  ),
  'sphinxclient::setidrange' => 
  array (
    0 => 'bool',
    'min' => 'int',
    'max' => 'int',
  ),
  'sphinxclient::setindexweights' => 
  array (
    0 => 'bool',
    'weights' => 'array<array-key, mixed>',
  ),
  'sphinxclient::setlimits' => 
  array (
    0 => 'bool',
    'offset' => 'int',
    'limit' => 'int',
    'max_matches=' => 'int',
    'cutoff=' => 'int',
  ),
  'sphinxclient::setmatchmode' => 
  array (
    0 => 'bool',
    'mode' => 'int',
  ),
  'sphinxclient::setmaxquerytime' => 
  array (
    0 => 'bool',
    'qtime' => 'int',
  ),
  'sphinxclient::setoverride' => 
  array (
    0 => 'bool',
    'attribute' => 'string',
    'type' => 'int',
    'values' => 'array<array-key, mixed>',
  ),
  'sphinxclient::setrankingmode' => 
  array (
    0 => 'bool',
    'ranker' => 'int',
  ),
  'sphinxclient::setretries' => 
  array (
    0 => 'bool',
    'count' => 'int',
    'delay=' => 'int',
  ),
  'sphinxclient::setselect' => 
  array (
    0 => 'bool',
    'clause' => 'string',
  ),
  'sphinxclient::setserver' => 
  array (
    0 => 'bool',
    'server' => 'string',
    'port' => 'int',
  ),
  'sphinxclient::setsortmode' => 
  array (
    0 => 'bool',
    'mode' => 'int',
    'sortby=' => 'string',
  ),
  'sphinxclient::status' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'sphinxclient::updateattributes' => 
  array (
    0 => 'int',
    'index' => 'string',
    'attributes' => 'array<array-key, mixed>',
    'values' => 'array<array-key, mixed>',
    'mva=' => 'bool',
  ),
  'spl_autoload' => 
  array (
    0 => 'void',
    'class' => 'string',
    'file_extensions=' => 'null|string',
  ),
  'spl_autoload_call' => 
  array (
    0 => 'void',
    'class' => 'string',
  ),
  'spl_autoload_extensions' => 
  array (
    0 => 'string',
    'file_extensions=' => 'null|string',
  ),
  'spl_autoload_functions' => 
  array (
    0 => 'list<callable(string):void>',
  ),
  'spl_autoload_register' => 
  array (
    0 => 'bool',
    'callback=' => 'callable(string):void|null',
    'throw=' => 'bool',
    'prepend=' => 'bool',
  ),
  'spl_autoload_unregister' => 
  array (
    0 => 'bool',
    'callback' => 'callable(string):void',
  ),
  'spl_classes' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'spl_object_hash' => 
  array (
    0 => 'string',
    'object' => 'object',
  ),
  'spl_object_id' => 
  array (
    0 => 'int',
    'object' => 'object',
  ),
  'spldoublylinkedlist::__construct' => 
  array (
    0 => 'void',
  ),
  'spldoublylinkedlist::__debuginfo' => 
  array (
    0 => 'mixed',
  ),
  'spldoublylinkedlist::__serialize' => 
  array (
    0 => 'mixed',
  ),
  'spldoublylinkedlist::__unserialize' => 
  array (
    0 => 'mixed',
    'data' => 'array<array-key, mixed>',
  ),
  'spldoublylinkedlist::add' => 
  array (
    0 => 'void',
    'index' => 'int',
    'value' => 'mixed',
  ),
  'spldoublylinkedlist::bottom' => 
  array (
    0 => 'mixed',
  ),
  'spldoublylinkedlist::count' => 
  array (
    0 => 'int',
  ),
  'spldoublylinkedlist::current' => 
  array (
    0 => 'mixed',
  ),
  'spldoublylinkedlist::getiteratormode' => 
  array (
    0 => 'int',
  ),
  'spldoublylinkedlist::isempty' => 
  array (
    0 => 'bool',
  ),
  'spldoublylinkedlist::key' => 
  array (
    0 => 'int',
  ),
  'spldoublylinkedlist::next' => 
  array (
    0 => 'void',
  ),
  'spldoublylinkedlist::offsetexists' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'spldoublylinkedlist::offsetget' => 
  array (
    0 => 'mixed',
    'index' => 'int',
  ),
  'spldoublylinkedlist::offsetset' => 
  array (
    0 => 'void',
    'index' => 'int|null',
    'value' => 'mixed',
  ),
  'spldoublylinkedlist::offsetunset' => 
  array (
    0 => 'void',
    'index' => 'int',
  ),
  'spldoublylinkedlist::pop' => 
  array (
    0 => 'mixed',
  ),
  'spldoublylinkedlist::prev' => 
  array (
    0 => 'void',
  ),
  'spldoublylinkedlist::push' => 
  array (
    0 => 'void',
    'value' => 'mixed',
  ),
  'spldoublylinkedlist::rewind' => 
  array (
    0 => 'void',
  ),
  'spldoublylinkedlist::serialize' => 
  array (
    0 => 'string',
  ),
  'spldoublylinkedlist::setiteratormode' => 
  array (
    0 => 'int',
    'mode' => 'int',
  ),
  'spldoublylinkedlist::shift' => 
  array (
    0 => 'mixed',
  ),
  'spldoublylinkedlist::top' => 
  array (
    0 => 'mixed',
  ),
  'spldoublylinkedlist::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'spldoublylinkedlist::unshift' => 
  array (
    0 => 'void',
    'value' => 'mixed',
  ),
  'spldoublylinkedlist::valid' => 
  array (
    0 => 'bool',
  ),
  'splenum::__construct' => 
  array (
    0 => 'void',
    'initial_value=' => 'mixed',
    'strict=' => 'bool',
  ),
  'splenum::getconstlist' => 
  array (
    0 => 'array<array-key, mixed>',
    'include_default=' => 'bool',
  ),
  'splfileinfo::__construct' => 
  array (
    0 => 'void',
    'filename' => 'string',
  ),
  'splfileinfo::__debuginfo' => 
  array (
    0 => 'mixed',
  ),
  'splfileinfo::__tostring' => 
  array (
    0 => 'string',
  ),
  'splfileinfo::_bad_state_ex' => 
  array (
    0 => 'mixed',
  ),
  'splfileinfo::getatime' => 
  array (
    0 => 'false|int',
  ),
  'splfileinfo::getbasename' => 
  array (
    0 => 'string',
    'suffix=' => 'string',
  ),
  'splfileinfo::getctime' => 
  array (
    0 => 'false|int',
  ),
  'splfileinfo::getextension' => 
  array (
    0 => 'string',
  ),
  'splfileinfo::getfileinfo' => 
  array (
    0 => 'SplFileInfo',
    'class=' => 'class-string|null',
  ),
  'splfileinfo::getfilename' => 
  array (
    0 => 'string',
  ),
  'splfileinfo::getgroup' => 
  array (
    0 => 'false|int',
  ),
  'splfileinfo::getinode' => 
  array (
    0 => 'false|int',
  ),
  'splfileinfo::getlinktarget' => 
  array (
    0 => 'false|string',
  ),
  'splfileinfo::getmtime' => 
  array (
    0 => 'false|int',
  ),
  'splfileinfo::getowner' => 
  array (
    0 => 'false|int',
  ),
  'splfileinfo::getpath' => 
  array (
    0 => 'string',
  ),
  'splfileinfo::getpathinfo' => 
  array (
    0 => 'SplFileInfo|null',
    'class=' => 'class-string|null',
  ),
  'splfileinfo::getpathname' => 
  array (
    0 => 'string',
  ),
  'splfileinfo::getperms' => 
  array (
    0 => 'false|int',
  ),
  'splfileinfo::getrealpath' => 
  array (
    0 => 'false|non-falsy-string',
  ),
  'splfileinfo::getsize' => 
  array (
    0 => 'false|int',
  ),
  'splfileinfo::gettype' => 
  array (
    0 => 'false|string',
  ),
  'splfileinfo::isdir' => 
  array (
    0 => 'bool',
  ),
  'splfileinfo::isexecutable' => 
  array (
    0 => 'bool',
  ),
  'splfileinfo::isfile' => 
  array (
    0 => 'bool',
  ),
  'splfileinfo::islink' => 
  array (
    0 => 'bool',
  ),
  'splfileinfo::isreadable' => 
  array (
    0 => 'bool',
  ),
  'splfileinfo::iswritable' => 
  array (
    0 => 'bool',
  ),
  'splfileinfo::openfile' => 
  array (
    0 => 'SplFileObject',
    'mode=' => 'string',
    'useIncludePath=' => 'bool',
    'context=' => 'null|resource',
  ),
  'splfileinfo::setfileclass' => 
  array (
    0 => 'void',
    'class=' => 'class-string',
  ),
  'splfileinfo::setinfoclass' => 
  array (
    0 => 'void',
    'class=' => 'class-string',
  ),
  'splfileobject::__construct' => 
  array (
    0 => 'void',
    'filename' => 'string',
    'mode=' => 'string',
    'useIncludePath=' => 'bool',
    'context=' => 'null|resource',
  ),
  'splfileobject::__debuginfo' => 
  array (
    0 => 'mixed',
  ),
  'splfileobject::__tostring' => 
  array (
    0 => 'string',
  ),
  'splfileobject::_bad_state_ex' => 
  array (
    0 => 'mixed',
  ),
  'splfileobject::current' => 
  array (
    0 => 'array<array-key, mixed>|false|string',
  ),
  'splfileobject::eof' => 
  array (
    0 => 'bool',
  ),
  'splfileobject::fflush' => 
  array (
    0 => 'bool',
  ),
  'splfileobject::fgetc' => 
  array (
    0 => 'false|string',
  ),
  'splfileobject::fgetcsv' => 
  array (
    0 => 'array{0?: null|string, ...<int<0, max>, string>}|false',
    'separator=' => 'string',
    'enclosure=' => 'string',
    'escape=' => 'string',
  ),
  'splfileobject::fgets' => 
  array (
    0 => 'string',
  ),
  'splfileobject::flock' => 
  array (
    0 => 'bool',
    'operation' => 'int',
    '&w_wouldBlock=' => 'int',
  ),
  'splfileobject::fpassthru' => 
  array (
    0 => 'int',
  ),
  'splfileobject::fputcsv' => 
  array (
    0 => 'false|int',
    'fields' => 'array<array-key, Stringable|null|scalar>',
    'separator=' => 'string',
    'enclosure=' => 'string',
    'escape=' => 'string',
  ),
  'splfileobject::fread' => 
  array (
    0 => 'false|string',
    'length' => 'int',
  ),
  'splfileobject::fscanf' => 
  array (
    0 => 'array<array-key, mixed>|int',
    'format' => 'string',
    '&...vars=' => 'float|int|string',
  ),
  'splfileobject::fseek' => 
  array (
    0 => 'int',
    'offset' => 'int',
    'whence=' => 'int',
  ),
  'splfileobject::fstat' => 
  array (
    0 => 'array{0: int, 10: int, 11: int, 12: int, 1: int, 2: int, 3: int, 4: int, 5: int, 6: int, 7: int, 8: int, 9: int, atime: int, blksize: int, blocks: int, ctime: int, dev: int, gid: int, ino: int, mode: int, mtime: int, nlink: int, rdev: int, size: int, uid: int}',
  ),
  'splfileobject::ftell' => 
  array (
    0 => 'false|int',
  ),
  'splfileobject::ftruncate' => 
  array (
    0 => 'bool',
    'size' => 'int',
  ),
  'splfileobject::fwrite' => 
  array (
    0 => 'false|int',
    'data' => 'string',
    'length=' => 'int',
  ),
  'splfileobject::getatime' => 
  array (
    0 => 'false|int',
  ),
  'splfileobject::getbasename' => 
  array (
    0 => 'string',
    'suffix=' => 'string',
  ),
  'splfileobject::getchildren' => 
  array (
    0 => 'null',
  ),
  'splfileobject::getcsvcontrol' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'splfileobject::getctime' => 
  array (
    0 => 'false|int',
  ),
  'splfileobject::getcurrentline' => 
  array (
    0 => 'string',
  ),
  'splfileobject::getextension' => 
  array (
    0 => 'string',
  ),
  'splfileobject::getfileinfo' => 
  array (
    0 => 'SplFileInfo',
    'class=' => 'class-string|null',
  ),
  'splfileobject::getfilename' => 
  array (
    0 => 'string',
  ),
  'splfileobject::getflags' => 
  array (
    0 => 'int',
  ),
  'splfileobject::getgroup' => 
  array (
    0 => 'false|int',
  ),
  'splfileobject::getinode' => 
  array (
    0 => 'false|int',
  ),
  'splfileobject::getlinktarget' => 
  array (
    0 => 'false|string',
  ),
  'splfileobject::getmaxlinelen' => 
  array (
    0 => 'int',
  ),
  'splfileobject::getmtime' => 
  array (
    0 => 'false|int',
  ),
  'splfileobject::getowner' => 
  array (
    0 => 'false|int',
  ),
  'splfileobject::getpath' => 
  array (
    0 => 'string',
  ),
  'splfileobject::getpathinfo' => 
  array (
    0 => 'SplFileInfo|null',
    'class=' => 'class-string|null',
  ),
  'splfileobject::getpathname' => 
  array (
    0 => 'string',
  ),
  'splfileobject::getperms' => 
  array (
    0 => 'false|int',
  ),
  'splfileobject::getrealpath' => 
  array (
    0 => 'false|non-falsy-string',
  ),
  'splfileobject::getsize' => 
  array (
    0 => 'false|int',
  ),
  'splfileobject::gettype' => 
  array (
    0 => 'false|string',
  ),
  'splfileobject::haschildren' => 
  array (
    0 => 'false',
  ),
  'splfileobject::isdir' => 
  array (
    0 => 'bool',
  ),
  'splfileobject::isexecutable' => 
  array (
    0 => 'bool',
  ),
  'splfileobject::isfile' => 
  array (
    0 => 'bool',
  ),
  'splfileobject::islink' => 
  array (
    0 => 'bool',
  ),
  'splfileobject::isreadable' => 
  array (
    0 => 'bool',
  ),
  'splfileobject::iswritable' => 
  array (
    0 => 'bool',
  ),
  'splfileobject::key' => 
  array (
    0 => 'int',
  ),
  'splfileobject::next' => 
  array (
    0 => 'void',
  ),
  'splfileobject::openfile' => 
  array (
    0 => 'SplFileObject',
    'mode=' => 'string',
    'useIncludePath=' => 'bool',
    'context=' => 'null|resource',
  ),
  'splfileobject::rewind' => 
  array (
    0 => 'void',
  ),
  'splfileobject::seek' => 
  array (
    0 => 'void',
    'line' => 'int',
  ),
  'splfileobject::setcsvcontrol' => 
  array (
    0 => 'void',
    'separator=' => 'string',
    'enclosure=' => 'string',
    'escape=' => 'string',
  ),
  'splfileobject::setfileclass' => 
  array (
    0 => 'void',
    'class=' => 'class-string',
  ),
  'splfileobject::setflags' => 
  array (
    0 => 'void',
    'flags' => 'int',
  ),
  'splfileobject::setinfoclass' => 
  array (
    0 => 'void',
    'class=' => 'class-string',
  ),
  'splfileobject::setmaxlinelen' => 
  array (
    0 => 'void',
    'maxLength' => 'int',
  ),
  'splfileobject::valid' => 
  array (
    0 => 'bool',
  ),
  'splfixedarray::__construct' => 
  array (
    0 => 'void',
    'size=' => 'int',
  ),
  'splfixedarray::__wakeup' => 
  array (
    0 => 'void',
  ),
  'splfixedarray::count' => 
  array (
    0 => 'int',
  ),
  'splfixedarray::fromarray' => 
  array (
    0 => 'SplFixedArray',
    'array' => 'array<array-key, mixed>',
    'preserveKeys=' => 'bool',
  ),
  'splfixedarray::getiterator' => 
  array (
    0 => 'Iterator',
  ),
  'splfixedarray::getsize' => 
  array (
    0 => 'int',
  ),
  'splfixedarray::offsetexists' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'splfixedarray::offsetget' => 
  array (
    0 => 'mixed',
    'index' => 'int',
  ),
  'splfixedarray::offsetset' => 
  array (
    0 => 'void',
    'index' => 'int',
    'value' => 'mixed',
  ),
  'splfixedarray::offsetunset' => 
  array (
    0 => 'void',
    'index' => 'int',
  ),
  'splfixedarray::setsize' => 
  array (
    0 => 'bool',
    'size' => 'int',
  ),
  'splfixedarray::toarray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'splheap::__construct' => 
  array (
    0 => 'void',
  ),
  'splheap::__debuginfo' => 
  array (
    0 => 'mixed',
  ),
  'splheap::compare' => 
  array (
    0 => 'int',
    'value1' => 'mixed',
    'value2' => 'mixed',
  ),
  'splheap::count' => 
  array (
    0 => 'int',
  ),
  'splheap::current' => 
  array (
    0 => 'mixed',
  ),
  'splheap::extract' => 
  array (
    0 => 'mixed',
  ),
  'splheap::insert' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
  ),
  'splheap::iscorrupted' => 
  array (
    0 => 'bool',
  ),
  'splheap::isempty' => 
  array (
    0 => 'bool',
  ),
  'splheap::key' => 
  array (
    0 => 'int',
  ),
  'splheap::next' => 
  array (
    0 => 'void',
  ),
  'splheap::recoverfromcorruption' => 
  array (
    0 => 'true',
  ),
  'splheap::rewind' => 
  array (
    0 => 'void',
  ),
  'splheap::top' => 
  array (
    0 => 'mixed',
  ),
  'splheap::valid' => 
  array (
    0 => 'bool',
  ),
  'splmaxheap::__construct' => 
  array (
    0 => 'void',
  ),
  'splmaxheap::__debuginfo' => 
  array (
    0 => 'mixed',
  ),
  'splmaxheap::compare' => 
  array (
    0 => 'int',
    'value1' => 'mixed',
    'value2' => 'mixed',
  ),
  'splmaxheap::count' => 
  array (
    0 => 'mixed',
  ),
  'splmaxheap::current' => 
  array (
    0 => 'mixed',
  ),
  'splmaxheap::extract' => 
  array (
    0 => 'mixed',
  ),
  'splmaxheap::insert' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
  ),
  'splmaxheap::iscorrupted' => 
  array (
    0 => 'mixed',
  ),
  'splmaxheap::isempty' => 
  array (
    0 => 'mixed',
  ),
  'splmaxheap::key' => 
  array (
    0 => 'mixed',
  ),
  'splmaxheap::next' => 
  array (
    0 => 'mixed',
  ),
  'splmaxheap::recoverfromcorruption' => 
  array (
    0 => 'mixed',
  ),
  'splmaxheap::rewind' => 
  array (
    0 => 'mixed',
  ),
  'splmaxheap::top' => 
  array (
    0 => 'mixed',
  ),
  'splmaxheap::valid' => 
  array (
    0 => 'mixed',
  ),
  'splminheap::__debuginfo' => 
  array (
    0 => 'mixed',
  ),
  'splminheap::compare' => 
  array (
    0 => 'int',
    'value1' => 'mixed',
    'value2' => 'mixed',
  ),
  'splminheap::count' => 
  array (
    0 => 'int',
  ),
  'splminheap::current' => 
  array (
    0 => 'mixed',
  ),
  'splminheap::extract' => 
  array (
    0 => 'mixed',
  ),
  'splminheap::insert' => 
  array (
    0 => 'true',
    'value' => 'mixed',
  ),
  'splminheap::iscorrupted' => 
  array (
    0 => 'bool',
  ),
  'splminheap::isempty' => 
  array (
    0 => 'bool',
  ),
  'splminheap::key' => 
  array (
    0 => 'int',
  ),
  'splminheap::next' => 
  array (
    0 => 'void',
  ),
  'splminheap::recoverfromcorruption' => 
  array (
    0 => 'true',
  ),
  'splminheap::rewind' => 
  array (
    0 => 'void',
  ),
  'splminheap::top' => 
  array (
    0 => 'mixed',
  ),
  'splminheap::valid' => 
  array (
    0 => 'bool',
  ),
  'splobjectstorage::__construct' => 
  array (
    0 => 'void',
  ),
  'splobjectstorage::__debuginfo' => 
  array (
    0 => 'mixed',
  ),
  'splobjectstorage::__serialize' => 
  array (
    0 => 'mixed',
  ),
  'splobjectstorage::__unserialize' => 
  array (
    0 => 'mixed',
    'data' => 'array<array-key, mixed>',
  ),
  'splobjectstorage::addall' => 
  array (
    0 => 'int',
    'storage' => 'SplObjectStorage',
  ),
  'splobjectstorage::attach' => 
  array (
    0 => 'void',
    'object' => 'object',
    'info=' => 'mixed',
  ),
  'splobjectstorage::contains' => 
  array (
    0 => 'bool',
    'object' => 'object',
  ),
  'splobjectstorage::count' => 
  array (
    0 => 'int',
    'mode=' => 'int',
  ),
  'splobjectstorage::current' => 
  array (
    0 => 'object',
  ),
  'splobjectstorage::detach' => 
  array (
    0 => 'void',
    'object' => 'object',
  ),
  'splobjectstorage::gethash' => 
  array (
    0 => 'string',
    'object' => 'object',
  ),
  'splobjectstorage::getinfo' => 
  array (
    0 => 'mixed',
  ),
  'splobjectstorage::key' => 
  array (
    0 => 'int',
  ),
  'splobjectstorage::next' => 
  array (
    0 => 'void',
  ),
  'splobjectstorage::offsetexists' => 
  array (
    0 => 'bool',
    'object' => 'object',
  ),
  'splobjectstorage::offsetget' => 
  array (
    0 => 'mixed',
    'object' => 'object',
  ),
  'splobjectstorage::offsetset' => 
  array (
    0 => 'void',
    'object' => 'object',
    'info=' => 'mixed',
  ),
  'splobjectstorage::offsetunset' => 
  array (
    0 => 'void',
    'object' => 'object',
  ),
  'splobjectstorage::removeall' => 
  array (
    0 => 'int',
    'storage' => 'SplObjectStorage',
  ),
  'splobjectstorage::removeallexcept' => 
  array (
    0 => 'int',
    'storage' => 'SplObjectStorage',
  ),
  'splobjectstorage::rewind' => 
  array (
    0 => 'void',
  ),
  'splobjectstorage::serialize' => 
  array (
    0 => 'string',
  ),
  'splobjectstorage::setinfo' => 
  array (
    0 => 'void',
    'info' => 'mixed',
  ),
  'splobjectstorage::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'splobjectstorage::valid' => 
  array (
    0 => 'bool',
  ),
  'splobserver::update' => 
  array (
    0 => 'void',
    'subject' => 'SplSubject',
  ),
  'splpriorityqueue::__construct' => 
  array (
    0 => 'void',
  ),
  'splpriorityqueue::__debuginfo' => 
  array (
    0 => 'mixed',
  ),
  'splpriorityqueue::compare' => 
  array (
    0 => 'int',
    'priority1' => 'mixed',
    'priority2' => 'mixed',
  ),
  'splpriorityqueue::count' => 
  array (
    0 => 'int',
  ),
  'splpriorityqueue::current' => 
  array (
    0 => 'mixed',
  ),
  'splpriorityqueue::extract' => 
  array (
    0 => 'mixed',
  ),
  'splpriorityqueue::getextractflags' => 
  array (
    0 => 'int',
  ),
  'splpriorityqueue::insert' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
    'priority' => 'mixed',
  ),
  'splpriorityqueue::iscorrupted' => 
  array (
    0 => 'bool',
  ),
  'splpriorityqueue::isempty' => 
  array (
    0 => 'bool',
  ),
  'splpriorityqueue::key' => 
  array (
    0 => 'int',
  ),
  'splpriorityqueue::next' => 
  array (
    0 => 'void',
  ),
  'splpriorityqueue::recoverfromcorruption' => 
  array (
    0 => 'void',
  ),
  'splpriorityqueue::rewind' => 
  array (
    0 => 'void',
  ),
  'splpriorityqueue::setextractflags' => 
  array (
    0 => 'int',
    'flags' => 'int',
  ),
  'splpriorityqueue::top' => 
  array (
    0 => 'mixed',
  ),
  'splpriorityqueue::valid' => 
  array (
    0 => 'bool',
  ),
  'splqueue::__debuginfo' => 
  array (
    0 => 'mixed',
  ),
  'splqueue::__serialize' => 
  array (
    0 => 'mixed',
  ),
  'splqueue::__unserialize' => 
  array (
    0 => 'mixed',
    'data' => 'array<array-key, mixed>',
  ),
  'splqueue::add' => 
  array (
    0 => 'mixed',
    'index' => 'int',
    'value' => 'mixed',
  ),
  'splqueue::bottom' => 
  array (
    0 => 'mixed',
  ),
  'splqueue::count' => 
  array (
    0 => 'mixed',
  ),
  'splqueue::current' => 
  array (
    0 => 'mixed',
  ),
  'splqueue::dequeue' => 
  array (
    0 => 'mixed',
  ),
  'splqueue::enqueue' => 
  array (
    0 => 'void',
    'value' => 'mixed',
  ),
  'splqueue::getiteratormode' => 
  array (
    0 => 'int',
  ),
  'splqueue::isempty' => 
  array (
    0 => 'bool',
  ),
  'splqueue::key' => 
  array (
    0 => 'int',
  ),
  'splqueue::next' => 
  array (
    0 => 'void',
  ),
  'splqueue::offsetexists' => 
  array (
    0 => 'bool',
    'index' => 'mixed',
  ),
  'splqueue::offsetget' => 
  array (
    0 => 'mixed',
    'index' => 'mixed',
  ),
  'splqueue::offsetset' => 
  array (
    0 => 'void',
    'index' => 'int|null',
    'value' => 'mixed',
  ),
  'splqueue::offsetunset' => 
  array (
    0 => 'void',
    'index' => 'mixed',
  ),
  'splqueue::pop' => 
  array (
    0 => 'mixed',
  ),
  'splqueue::prev' => 
  array (
    0 => 'void',
  ),
  'splqueue::push' => 
  array (
    0 => 'void',
    'value' => 'mixed',
  ),
  'splqueue::rewind' => 
  array (
    0 => 'void',
  ),
  'splqueue::serialize' => 
  array (
    0 => 'string',
  ),
  'splqueue::setiteratormode' => 
  array (
    0 => 'int',
    'mode' => 'int',
  ),
  'splqueue::shift' => 
  array (
    0 => 'mixed',
  ),
  'splqueue::top' => 
  array (
    0 => 'mixed',
  ),
  'splqueue::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'splqueue::unshift' => 
  array (
    0 => 'void',
    'value' => 'mixed',
  ),
  'splqueue::valid' => 
  array (
    0 => 'bool',
  ),
  'splstack::__construct' => 
  array (
    0 => 'void',
  ),
  'splstack::__debuginfo' => 
  array (
    0 => 'mixed',
  ),
  'splstack::__serialize' => 
  array (
    0 => 'mixed',
  ),
  'splstack::__unserialize' => 
  array (
    0 => 'mixed',
    'data' => 'array<array-key, mixed>',
  ),
  'splstack::add' => 
  array (
    0 => 'void',
    'index' => 'int',
    'value' => 'mixed',
  ),
  'splstack::bottom' => 
  array (
    0 => 'mixed',
  ),
  'splstack::count' => 
  array (
    0 => 'int',
  ),
  'splstack::current' => 
  array (
    0 => 'mixed',
  ),
  'splstack::getiteratormode' => 
  array (
    0 => 'int',
  ),
  'splstack::isempty' => 
  array (
    0 => 'bool',
  ),
  'splstack::key' => 
  array (
    0 => 'int',
  ),
  'splstack::next' => 
  array (
    0 => 'void',
  ),
  'splstack::offsetexists' => 
  array (
    0 => 'bool',
    'index' => 'mixed',
  ),
  'splstack::offsetget' => 
  array (
    0 => 'mixed',
    'index' => 'mixed',
  ),
  'splstack::offsetset' => 
  array (
    0 => 'void',
    'index' => 'int|null',
    'value' => 'mixed',
  ),
  'splstack::offsetunset' => 
  array (
    0 => 'void',
    'index' => 'mixed',
  ),
  'splstack::pop' => 
  array (
    0 => 'mixed',
  ),
  'splstack::prev' => 
  array (
    0 => 'void',
  ),
  'splstack::push' => 
  array (
    0 => 'void',
    'value' => 'mixed',
  ),
  'splstack::rewind' => 
  array (
    0 => 'void',
  ),
  'splstack::serialize' => 
  array (
    0 => 'string',
  ),
  'splstack::setiteratormode' => 
  array (
    0 => 'int',
    'mode' => 'int',
  ),
  'splstack::shift' => 
  array (
    0 => 'mixed',
  ),
  'splstack::top' => 
  array (
    0 => 'mixed',
  ),
  'splstack::unserialize' => 
  array (
    0 => 'void',
    'data' => 'string',
  ),
  'splstack::unshift' => 
  array (
    0 => 'void',
    'value' => 'mixed',
  ),
  'splstack::valid' => 
  array (
    0 => 'bool',
  ),
  'splsubject::attach' => 
  array (
    0 => 'void',
    'observer' => 'SplObserver',
  ),
  'splsubject::detach' => 
  array (
    0 => 'void',
    'observer' => 'SplObserver',
  ),
  'splsubject::notify' => 
  array (
    0 => 'void',
  ),
  'spltempfileobject::__construct' => 
  array (
    0 => 'void',
    'maxMemory=' => 'int',
  ),
  'spltempfileobject::__debuginfo' => 
  array (
    0 => 'mixed',
  ),
  'spltempfileobject::__tostring' => 
  array (
    0 => 'string',
  ),
  'spltempfileobject::_bad_state_ex' => 
  array (
    0 => 'mixed',
  ),
  'spltempfileobject::current' => 
  array (
    0 => 'array<array-key, mixed>|false|string',
  ),
  'spltempfileobject::eof' => 
  array (
    0 => 'bool',
  ),
  'spltempfileobject::fflush' => 
  array (
    0 => 'bool',
  ),
  'spltempfileobject::fgetc' => 
  array (
    0 => 'false|string',
  ),
  'spltempfileobject::fgetcsv' => 
  array (
    0 => 'array{0?: null|string, ...<int<0, max>, string>}|false',
    'separator=' => 'string',
    'enclosure=' => 'string',
    'escape=' => 'string',
  ),
  'spltempfileobject::fgets' => 
  array (
    0 => 'string',
  ),
  'spltempfileobject::flock' => 
  array (
    0 => 'bool',
    'operation' => 'int',
    '&w_wouldBlock=' => 'int',
  ),
  'spltempfileobject::fpassthru' => 
  array (
    0 => 'int',
  ),
  'spltempfileobject::fputcsv' => 
  array (
    0 => 'false|int',
    'fields' => 'array<array-key, Stringable|null|scalar>',
    'separator=' => 'string',
    'enclosure=' => 'string',
    'escape=' => 'string',
  ),
  'spltempfileobject::fread' => 
  array (
    0 => 'false|string',
    'length' => 'int',
  ),
  'spltempfileobject::fscanf' => 
  array (
    0 => 'array<array-key, mixed>|int',
    'format' => 'string',
    '&...vars=' => 'float|int|string',
  ),
  'spltempfileobject::fseek' => 
  array (
    0 => 'int',
    'offset' => 'int',
    'whence=' => 'int',
  ),
  'spltempfileobject::fstat' => 
  array (
    0 => 'array{0: int, 10: int, 11: int, 12: int, 1: int, 2: int, 3: int, 4: int, 5: int, 6: int, 7: int, 8: int, 9: int, atime: int, blksize: int, blocks: int, ctime: int, dev: int, gid: int, ino: int, mode: int, mtime: int, nlink: int, rdev: int, size: int, uid: int}',
  ),
  'spltempfileobject::ftell' => 
  array (
    0 => 'false|int',
  ),
  'spltempfileobject::ftruncate' => 
  array (
    0 => 'bool',
    'size' => 'int',
  ),
  'spltempfileobject::fwrite' => 
  array (
    0 => 'false|int',
    'data' => 'string',
    'length=' => 'int',
  ),
  'spltempfileobject::getatime' => 
  array (
    0 => 'false|int',
  ),
  'spltempfileobject::getbasename' => 
  array (
    0 => 'string',
    'suffix=' => 'string',
  ),
  'spltempfileobject::getchildren' => 
  array (
    0 => 'null',
  ),
  'spltempfileobject::getcsvcontrol' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'spltempfileobject::getctime' => 
  array (
    0 => 'false|int',
  ),
  'spltempfileobject::getcurrentline' => 
  array (
    0 => 'string',
  ),
  'spltempfileobject::getextension' => 
  array (
    0 => 'string',
  ),
  'spltempfileobject::getfileinfo' => 
  array (
    0 => 'SplFileInfo',
    'class=' => 'class-string|null',
  ),
  'spltempfileobject::getfilename' => 
  array (
    0 => 'string',
  ),
  'spltempfileobject::getflags' => 
  array (
    0 => 'int',
  ),
  'spltempfileobject::getgroup' => 
  array (
    0 => 'false|int',
  ),
  'spltempfileobject::getinode' => 
  array (
    0 => 'false|int',
  ),
  'spltempfileobject::getlinktarget' => 
  array (
    0 => 'false|string',
  ),
  'spltempfileobject::getmaxlinelen' => 
  array (
    0 => 'int',
  ),
  'spltempfileobject::getmtime' => 
  array (
    0 => 'false|int',
  ),
  'spltempfileobject::getowner' => 
  array (
    0 => 'false|int',
  ),
  'spltempfileobject::getpath' => 
  array (
    0 => 'string',
  ),
  'spltempfileobject::getpathinfo' => 
  array (
    0 => 'SplFileInfo|null',
    'class=' => 'class-string|null',
  ),
  'spltempfileobject::getpathname' => 
  array (
    0 => 'string',
  ),
  'spltempfileobject::getperms' => 
  array (
    0 => 'false|int',
  ),
  'spltempfileobject::getrealpath' => 
  array (
    0 => 'false|non-falsy-string',
  ),
  'spltempfileobject::getsize' => 
  array (
    0 => 'false|int',
  ),
  'spltempfileobject::gettype' => 
  array (
    0 => 'false|string',
  ),
  'spltempfileobject::haschildren' => 
  array (
    0 => 'false',
  ),
  'spltempfileobject::isdir' => 
  array (
    0 => 'bool',
  ),
  'spltempfileobject::isexecutable' => 
  array (
    0 => 'bool',
  ),
  'spltempfileobject::isfile' => 
  array (
    0 => 'bool',
  ),
  'spltempfileobject::islink' => 
  array (
    0 => 'bool',
  ),
  'spltempfileobject::isreadable' => 
  array (
    0 => 'bool',
  ),
  'spltempfileobject::iswritable' => 
  array (
    0 => 'bool',
  ),
  'spltempfileobject::key' => 
  array (
    0 => 'int',
  ),
  'spltempfileobject::next' => 
  array (
    0 => 'void',
  ),
  'spltempfileobject::openfile' => 
  array (
    0 => 'SplTempFileObject',
    'mode=' => 'string',
    'useIncludePath=' => 'bool',
    'context=' => 'null|resource',
  ),
  'spltempfileobject::rewind' => 
  array (
    0 => 'void',
  ),
  'spltempfileobject::seek' => 
  array (
    0 => 'void',
    'line' => 'int',
  ),
  'spltempfileobject::setcsvcontrol' => 
  array (
    0 => 'void',
    'separator=' => 'string',
    'enclosure=' => 'string',
    'escape=' => 'string',
  ),
  'spltempfileobject::setfileclass' => 
  array (
    0 => 'void',
    'class=' => 'class-string',
  ),
  'spltempfileobject::setflags' => 
  array (
    0 => 'void',
    'flags' => 'int',
  ),
  'spltempfileobject::setinfoclass' => 
  array (
    0 => 'void',
    'class=' => 'class-string',
  ),
  'spltempfileobject::setmaxlinelen' => 
  array (
    0 => 'void',
    'maxLength' => 'int',
  ),
  'spltempfileobject::valid' => 
  array (
    0 => 'bool',
  ),
  'spltype::__construct' => 
  array (
    0 => 'void',
    'initial_value=' => 'mixed',
    'strict=' => 'bool',
  ),
  'spoofchecker::__construct' => 
  array (
    0 => 'void',
  ),
  'spoofchecker::areconfusable' => 
  array (
    0 => 'bool',
    'string1' => 'string',
    'string2' => 'string',
    '&w_errorCode=' => 'int',
  ),
  'spoofchecker::issuspicious' => 
  array (
    0 => 'bool',
    'string' => 'string',
    '&w_errorCode=' => 'int',
  ),
  'spoofchecker::setallowedlocales' => 
  array (
    0 => 'void',
    'locales' => 'string',
  ),
  'spoofchecker::setchecks' => 
  array (
    0 => 'void',
    'checks' => 'int',
  ),
  'spoofchecker::setrestrictionlevel' => 
  array (
    0 => 'void',
    'level' => 'int',
  ),
  'sprintf' => 
  array (
    0 => 'string',
    'format' => 'string',
    '...values=' => 'float|int|string',
  ),
  'sqlite3::__construct' => 
  array (
    0 => 'void',
    'filename' => 'string',
    'flags=' => 'int',
    'encryptionKey=' => 'string',
  ),
  'sqlite3::backup' => 
  array (
    0 => 'mixed',
    'destination' => 'SQLite3',
    'sourceDatabase=' => 'string',
    'destinationDatabase=' => 'string',
  ),
  'sqlite3::busytimeout' => 
  array (
    0 => 'bool',
    'milliseconds' => 'int',
  ),
  'sqlite3::changes' => 
  array (
    0 => 'int',
  ),
  'sqlite3::close' => 
  array (
    0 => 'bool',
  ),
  'sqlite3::createaggregate' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'stepCallback' => 'callable',
    'finalCallback' => 'callable',
    'argCount=' => 'int',
  ),
  'sqlite3::createcollation' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'callback' => 'callable',
  ),
  'sqlite3::createfunction' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'callback' => 'callable',
    'argCount=' => 'int',
    'flags=' => 'int',
  ),
  'sqlite3::enableexceptions' => 
  array (
    0 => 'bool',
    'enable=' => 'bool',
  ),
  'sqlite3::enableextendedresultcodes' => 
  array (
    0 => 'mixed',
    'enable=' => 'bool',
  ),
  'sqlite3::escapestring' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'sqlite3::exec' => 
  array (
    0 => 'bool',
    'query' => 'string',
  ),
  'sqlite3::lasterrorcode' => 
  array (
    0 => 'int',
  ),
  'sqlite3::lasterrormsg' => 
  array (
    0 => 'string',
  ),
  'sqlite3::lastextendederrorcode' => 
  array (
    0 => 'mixed',
  ),
  'sqlite3::lastinsertrowid' => 
  array (
    0 => 'int',
  ),
  'sqlite3::loadextension' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'sqlite3::open' => 
  array (
    0 => 'void',
    'filename' => 'string',
    'flags=' => 'int',
    'encryptionKey=' => 'string',
  ),
  'sqlite3::openblob' => 
  array (
    0 => 'false|resource',
    'table' => 'string',
    'column' => 'string',
    'rowid' => 'int',
    'database=' => 'string',
    'flags=' => 'int',
  ),
  'sqlite3::prepare' => 
  array (
    0 => 'SQLite3Stmt|false',
    'query' => 'string',
  ),
  'sqlite3::query' => 
  array (
    0 => 'SQLite3Result|false',
    'query' => 'string',
  ),
  'sqlite3::querysingle' => 
  array (
    0 => 'array<array-key, mixed>|null|scalar',
    'query' => 'string',
    'entireRow=' => 'bool',
  ),
  'sqlite3::setauthorizer' => 
  array (
    0 => 'mixed',
    'callback' => 'callable|null',
  ),
  'sqlite3::version' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'sqlite3result::__construct' => 
  array (
    0 => 'void',
  ),
  'sqlite3result::columnname' => 
  array (
    0 => 'string',
    'column' => 'int',
  ),
  'sqlite3result::columntype' => 
  array (
    0 => 'int',
    'column' => 'int',
  ),
  'sqlite3result::fetcharray' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'mode=' => 'int',
  ),
  'sqlite3result::finalize' => 
  array (
    0 => 'bool',
  ),
  'sqlite3result::numcolumns' => 
  array (
    0 => 'int',
  ),
  'sqlite3result::reset' => 
  array (
    0 => 'bool',
  ),
  'sqlite3stmt::__construct' => 
  array (
    0 => 'void',
    'sqlite3' => 'sqlite3',
    'query' => 'string',
  ),
  'sqlite3stmt::bindparam' => 
  array (
    0 => 'bool',
    'param' => 'int|string',
    '&var' => 'mixed',
    'type=' => 'int',
  ),
  'sqlite3stmt::bindvalue' => 
  array (
    0 => 'bool',
    'param' => 'int|string',
    'value' => 'mixed',
    'type=' => 'int',
  ),
  'sqlite3stmt::clear' => 
  array (
    0 => 'bool',
  ),
  'sqlite3stmt::close' => 
  array (
    0 => 'bool',
  ),
  'sqlite3stmt::execute' => 
  array (
    0 => 'SQLite3Result|false',
  ),
  'sqlite3stmt::getsql' => 
  array (
    0 => 'string',
    'expand=' => 'bool',
  ),
  'sqlite3stmt::paramcount' => 
  array (
    0 => 'int',
  ),
  'sqlite3stmt::readonly' => 
  array (
    0 => 'bool',
  ),
  'sqlite3stmt::reset' => 
  array (
    0 => 'bool',
  ),
  'sqlite_array_query' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'dbhandle' => 'resource',
    'query' => 'string',
    'result_type=' => 'int',
    'decode_binary=' => 'bool',
  ),
  'sqlite_busy_timeout' => 
  array (
    0 => 'void',
    'dbhandle' => 'resource',
    'milliseconds' => 'int',
  ),
  'sqlite_changes' => 
  array (
    0 => 'int',
    'dbhandle' => 'resource',
  ),
  'sqlite_close' => 
  array (
    0 => 'void',
    'dbhandle' => 'resource',
  ),
  'sqlite_column' => 
  array (
    0 => 'mixed',
    'result' => 'resource',
    'index_or_name' => 'mixed',
    'decode_binary=' => 'bool',
  ),
  'sqlite_create_aggregate' => 
  array (
    0 => 'void',
    'dbhandle' => 'resource',
    'function_name' => 'string',
    'step_func' => 'callable',
    'finalize_func' => 'callable',
    'num_args=' => 'int',
  ),
  'sqlite_create_function' => 
  array (
    0 => 'void',
    'dbhandle' => 'resource',
    'function_name' => 'string',
    'callback' => 'callable',
    'num_args=' => 'int',
  ),
  'sqlite_current' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'result' => 'resource',
    'result_type=' => 'int',
    'decode_binary=' => 'bool',
  ),
  'sqlite_error_string' => 
  array (
    0 => 'string',
    'error_code' => 'int',
  ),
  'sqlite_escape_string' => 
  array (
    0 => 'string',
    'item' => 'string',
  ),
  'sqlite_exec' => 
  array (
    0 => 'bool',
    'dbhandle' => 'resource',
    'query' => 'string',
    'error_msg=' => 'string',
  ),
  'sqlite_factory' => 
  array (
    0 => 'SQLiteDatabase',
    'filename' => 'string',
    'mode=' => 'int',
    'error_message=' => 'string',
  ),
  'sqlite_fetch_all' => 
  array (
    0 => 'array<array-key, mixed>',
    'result' => 'resource',
    'result_type=' => 'int',
    'decode_binary=' => 'bool',
  ),
  'sqlite_fetch_array' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'result' => 'resource',
    'result_type=' => 'int',
    'decode_binary=' => 'bool',
  ),
  'sqlite_fetch_column_types' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'table_name' => 'string',
    'dbhandle' => 'resource',
    'result_type=' => 'int',
  ),
  'sqlite_fetch_object' => 
  array (
    0 => 'object',
    'result' => 'resource',
    'class_name=' => 'string',
    'ctor_params=' => 'array<array-key, mixed>',
    'decode_binary=' => 'bool',
  ),
  'sqlite_fetch_single' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'decode_binary=' => 'bool',
  ),
  'sqlite_fetch_string' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'decode_binary' => 'bool',
  ),
  'sqlite_field_name' => 
  array (
    0 => 'string',
    'result' => 'resource',
    'field_index' => 'int',
  ),
  'sqlite_has_more' => 
  array (
    0 => 'bool',
    'result' => 'resource',
  ),
  'sqlite_has_prev' => 
  array (
    0 => 'bool',
    'result' => 'resource',
  ),
  'sqlite_key' => 
  array (
    0 => 'int',
    'result' => 'resource',
  ),
  'sqlite_last_error' => 
  array (
    0 => 'int',
    'dbhandle' => 'resource',
  ),
  'sqlite_last_insert_rowid' => 
  array (
    0 => 'int',
    'dbhandle' => 'resource',
  ),
  'sqlite_libencoding' => 
  array (
    0 => 'string',
  ),
  'sqlite_libversion' => 
  array (
    0 => 'string',
  ),
  'sqlite_next' => 
  array (
    0 => 'bool',
    'result' => 'resource',
  ),
  'sqlite_num_fields' => 
  array (
    0 => 'int',
    'result' => 'resource',
  ),
  'sqlite_num_rows' => 
  array (
    0 => 'int',
    'result' => 'resource',
  ),
  'sqlite_open' => 
  array (
    0 => 'false|resource',
    'filename' => 'string',
    'mode=' => 'int',
    'error_message=' => 'string',
  ),
  'sqlite_popen' => 
  array (
    0 => 'false|resource',
    'filename' => 'string',
    'mode=' => 'int',
    'error_message=' => 'string',
  ),
  'sqlite_prev' => 
  array (
    0 => 'bool',
    'result' => 'resource',
  ),
  'sqlite_query' => 
  array (
    0 => 'false|resource',
    'dbhandle' => 'resource',
    'query' => 'resource|string',
    'result_type=' => 'int',
    'error_msg=' => 'string',
  ),
  'sqlite_rewind' => 
  array (
    0 => 'bool',
    'result' => 'resource',
  ),
  'sqlite_seek' => 
  array (
    0 => 'bool',
    'result' => 'resource',
    'rownum' => 'int',
  ),
  'sqlite_single_query' => 
  array (
    0 => 'array<array-key, mixed>',
    'db' => 'resource',
    'query' => 'string',
    'first_row_only=' => 'bool',
    'decode_binary=' => 'bool',
  ),
  'sqlite_udf_decode_binary' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'sqlite_udf_encode_binary' => 
  array (
    0 => 'string',
    'data' => 'string',
  ),
  'sqlite_unbuffered_query' => 
  array (
    0 => 'SQLiteUnbuffered|false',
    'dbhandle' => 'resource',
    'query' => 'string',
    'result_type=' => 'int',
    'error_msg=' => 'string',
  ),
  'sqlite_valid' => 
  array (
    0 => 'bool',
    'result' => 'resource',
  ),
  'sqlitedatabase::__construct' => 
  array (
    0 => 'void',
    'filename' => 'mixed',
    'mode=' => 'int|mixed',
    '&error_message' => 'mixed',
  ),
  'sqlitedatabase::arrayquery' => 
  array (
    0 => 'array<array-key, mixed>',
    'query' => 'string',
    'result_type=' => 'int',
    'decode_binary=' => 'bool',
  ),
  'sqlitedatabase::busytimeout' => 
  array (
    0 => 'int',
    'milliseconds' => 'int',
  ),
  'sqlitedatabase::changes' => 
  array (
    0 => 'int',
  ),
  'sqlitedatabase::createaggregate' => 
  array (
    0 => 'mixed',
    'function_name' => 'string',
    'step_func' => 'callable',
    'finalize_func' => 'callable',
    'num_args=' => 'int',
  ),
  'sqlitedatabase::createfunction' => 
  array (
    0 => 'mixed',
    'function_name' => 'string',
    'callback' => 'callable',
    'num_args=' => 'int',
  ),
  'sqlitedatabase::exec' => 
  array (
    0 => 'bool',
    'query' => 'string',
    'error_msg=' => 'string',
  ),
  'sqlitedatabase::fetchcolumntypes' => 
  array (
    0 => 'array<array-key, mixed>',
    'table_name' => 'string',
    'result_type=' => 'int',
  ),
  'sqlitedatabase::lasterror' => 
  array (
    0 => 'int',
  ),
  'sqlitedatabase::lastinsertrowid' => 
  array (
    0 => 'int',
  ),
  'sqlitedatabase::query' => 
  array (
    0 => 'SQLiteResult|false',
    'query' => 'string',
    'result_type=' => 'int',
    'error_msg=' => 'string',
  ),
  'sqlitedatabase::queryexec' => 
  array (
    0 => 'bool',
    'query' => 'string',
    '&w_error_msg=' => 'string',
  ),
  'sqlitedatabase::singlequery' => 
  array (
    0 => 'array<array-key, mixed>',
    'query' => 'string',
    'first_row_only=' => 'bool',
    'decode_binary=' => 'bool',
  ),
  'sqlitedatabase::unbufferedquery' => 
  array (
    0 => 'SQLiteUnbuffered|false',
    'query' => 'string',
    'result_type=' => 'int',
    'error_msg=' => 'string',
  ),
  'sqliteexception::__clone' => 
  array (
    0 => 'void',
  ),
  'sqliteexception::__construct' => 
  array (
    0 => 'void',
    'message' => 'mixed',
    'code' => 'mixed',
    'previous' => 'mixed',
  ),
  'sqliteexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'sqliteexception::__wakeup' => 
  array (
    0 => 'void',
  ),
  'sqliteexception::getcode' => 
  array (
    0 => 'int',
  ),
  'sqliteexception::getfile' => 
  array (
    0 => 'string',
  ),
  'sqliteexception::getline' => 
  array (
    0 => 'int',
  ),
  'sqliteexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'sqliteexception::getprevious' => 
  array (
    0 => 'RuntimeException|Throwable|null',
  ),
  'sqliteexception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'sqliteexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'sqliteresult::__construct' => 
  array (
    0 => 'void',
  ),
  'sqliteresult::column' => 
  array (
    0 => 'mixed',
    'index_or_name' => 'mixed',
    'decode_binary=' => 'bool',
  ),
  'sqliteresult::count' => 
  array (
    0 => 'int',
  ),
  'sqliteresult::current' => 
  array (
    0 => 'array<array-key, mixed>',
    'result_type=' => 'int',
    'decode_binary=' => 'bool',
  ),
  'sqliteresult::fetch' => 
  array (
    0 => 'array<array-key, mixed>',
    'result_type=' => 'int',
    'decode_binary=' => 'bool',
  ),
  'sqliteresult::fetchall' => 
  array (
    0 => 'array<array-key, mixed>',
    'result_type=' => 'int',
    'decode_binary=' => 'bool',
  ),
  'sqliteresult::fetchobject' => 
  array (
    0 => 'object',
    'class_name=' => 'string',
    'ctor_params=' => 'array<array-key, mixed>',
    'decode_binary=' => 'bool',
  ),
  'sqliteresult::fetchsingle' => 
  array (
    0 => 'string',
    'decode_binary=' => 'bool',
  ),
  'sqliteresult::fieldname' => 
  array (
    0 => 'string',
    'field_index' => 'int',
  ),
  'sqliteresult::hasprev' => 
  array (
    0 => 'bool',
  ),
  'sqliteresult::key' => 
  array (
    0 => 'mixed|null',
  ),
  'sqliteresult::next' => 
  array (
    0 => 'bool',
  ),
  'sqliteresult::numfields' => 
  array (
    0 => 'int',
  ),
  'sqliteresult::numrows' => 
  array (
    0 => 'int',
  ),
  'sqliteresult::prev' => 
  array (
    0 => 'bool',
  ),
  'sqliteresult::rewind' => 
  array (
    0 => 'bool',
  ),
  'sqliteresult::seek' => 
  array (
    0 => 'bool',
    'rownum' => 'int',
  ),
  'sqliteresult::valid' => 
  array (
    0 => 'bool',
  ),
  'sqliteunbuffered::column' => 
  array (
    0 => 'void',
    'index_or_name' => 'mixed',
    'decode_binary=' => 'bool',
  ),
  'sqliteunbuffered::current' => 
  array (
    0 => 'array<array-key, mixed>',
    'result_type=' => 'int',
    'decode_binary=' => 'bool',
  ),
  'sqliteunbuffered::fetch' => 
  array (
    0 => 'array<array-key, mixed>',
    'result_type=' => 'int',
    'decode_binary=' => 'bool',
  ),
  'sqliteunbuffered::fetchall' => 
  array (
    0 => 'array<array-key, mixed>',
    'result_type=' => 'int',
    'decode_binary=' => 'bool',
  ),
  'sqliteunbuffered::fetchobject' => 
  array (
    0 => 'object',
    'class_name=' => 'string',
    'ctor_params=' => 'array<array-key, mixed>',
    'decode_binary=' => 'bool',
  ),
  'sqliteunbuffered::fetchsingle' => 
  array (
    0 => 'string',
    'decode_binary=' => 'bool',
  ),
  'sqliteunbuffered::fieldname' => 
  array (
    0 => 'string',
    'field_index' => 'int',
  ),
  'sqliteunbuffered::next' => 
  array (
    0 => 'bool',
  ),
  'sqliteunbuffered::numfields' => 
  array (
    0 => 'int',
  ),
  'sqliteunbuffered::valid' => 
  array (
    0 => 'bool',
  ),
  'sqlsrv_begin_transaction' => 
  array (
    0 => 'bool',
    'conn' => 'resource',
  ),
  'sqlsrv_cancel' => 
  array (
    0 => 'bool',
    'stmt' => 'resource',
  ),
  'sqlsrv_client_info' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'conn' => 'resource',
  ),
  'sqlsrv_close' => 
  array (
    0 => 'bool',
    'conn' => 'null|resource',
  ),
  'sqlsrv_commit' => 
  array (
    0 => 'bool',
    'conn' => 'resource',
  ),
  'sqlsrv_configure' => 
  array (
    0 => 'bool',
    'setting' => 'string',
    'value' => 'mixed',
  ),
  'sqlsrv_connect' => 
  array (
    0 => 'false|resource',
    'server_name' => 'string',
    'connection_info=' => 'array<array-key, mixed>',
  ),
  'sqlsrv_errors' => 
  array (
    0 => 'array<array-key, mixed>|null',
    'errors_and_or_warnings=' => 'int',
  ),
  'sqlsrv_execute' => 
  array (
    0 => 'bool',
    'stmt' => 'resource',
  ),
  'sqlsrv_fetch' => 
  array (
    0 => 'bool|null',
    'stmt' => 'resource',
    'row=' => 'int',
    'offset=' => 'int',
  ),
  'sqlsrv_fetch_array' => 
  array (
    0 => 'array<array-key, mixed>|false|null',
    'stmt' => 'resource',
    'fetchType=' => 'int',
    'row=' => 'int',
    'offset=' => 'int',
  ),
  'sqlsrv_fetch_object' => 
  array (
    0 => 'false|null|object',
    'stmt' => 'resource',
    'className=' => 'string',
    'ctorParams=' => 'array<array-key, mixed>',
    'row=' => 'int',
    'offset=' => 'int',
  ),
  'sqlsrv_field_metadata' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'stmt' => 'resource',
  ),
  'sqlsrv_free_stmt' => 
  array (
    0 => 'bool',
    'stmt' => 'resource',
  ),
  'sqlsrv_get_config' => 
  array (
    0 => 'mixed',
    'setting' => 'string',
  ),
  'sqlsrv_get_field' => 
  array (
    0 => 'mixed',
    'stmt' => 'resource',
    'fieldIndex' => 'int',
    'getAsType=' => 'int',
  ),
  'sqlsrv_has_rows' => 
  array (
    0 => 'bool',
    'stmt' => 'resource',
  ),
  'sqlsrv_next_result' => 
  array (
    0 => 'bool|null',
    'stmt' => 'resource',
  ),
  'sqlsrv_num_fields' => 
  array (
    0 => 'false|int',
    'stmt' => 'resource',
  ),
  'sqlsrv_num_rows' => 
  array (
    0 => 'false|int',
    'stmt' => 'resource',
  ),
  'sqlsrv_prepare' => 
  array (
    0 => 'false|resource',
    'conn' => 'resource',
    'sql' => 'string',
    'params=' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'sqlsrv_query' => 
  array (
    0 => 'false|resource',
    'conn' => 'resource',
    'sql' => 'string',
    'params=' => 'array<array-key, mixed>',
    'options=' => 'array<array-key, mixed>',
  ),
  'sqlsrv_rollback' => 
  array (
    0 => 'bool',
    'conn' => 'resource',
  ),
  'sqlsrv_rows_affected' => 
  array (
    0 => 'false|int',
    'stmt' => 'resource',
  ),
  'sqlsrv_send_stream_data' => 
  array (
    0 => 'bool',
    'stmt' => 'resource',
  ),
  'sqlsrv_server_info' => 
  array (
    0 => 'array<array-key, mixed>',
    'conn' => 'resource',
  ),
  'sqrt' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'srand' => 
  array (
    0 => 'void',
    'seed=' => 'int',
    'mode=' => 'int',
  ),
  'sscanf' => 
  array (
    0 => 'int|list<float|int|null|string>|null',
    'string' => 'string',
    'format' => 'string',
    '&...vars=' => 'float|int|null|string',
  ),
  'ssdeep_fuzzy_compare' => 
  array (
    0 => 'int',
    'signature1' => 'string',
    'signature2' => 'string',
  ),
  'ssdeep_fuzzy_hash' => 
  array (
    0 => 'string',
    'to_hash' => 'string',
  ),
  'ssdeep_fuzzy_hash_filename' => 
  array (
    0 => 'string',
    'file_name' => 'string',
  ),
  'ssh2_auth_agent' => 
  array (
    0 => 'bool',
    'session' => 'resource',
    'username' => 'string',
  ),
  'ssh2_auth_hostbased_file' => 
  array (
    0 => 'bool',
    'session' => 'resource',
    'username' => 'string',
    'hostname' => 'string',
    'pubkeyfile' => 'string',
    'privkeyfile' => 'string',
    'passphrase=' => 'string',
    'local_username=' => 'string',
  ),
  'ssh2_auth_none' => 
  array (
    0 => 'array<array-key, string>|bool',
    'session' => 'resource',
    'username' => 'string',
  ),
  'ssh2_auth_password' => 
  array (
    0 => 'bool',
    'session' => 'resource',
    'username' => 'string',
    'password' => 'string',
  ),
  'ssh2_auth_pubkey_file' => 
  array (
    0 => 'bool',
    'session' => 'resource',
    'username' => 'string',
    'pubkeyfile' => 'string',
    'privkeyfile' => 'string',
    'passphrase=' => 'string',
  ),
  'ssh2_connect' => 
  array (
    0 => 'false|resource',
    'host' => 'string',
    'port=' => 'int',
    'methods=' => 'array<array-key, mixed>',
    'callbacks=' => 'array<array-key, mixed>',
  ),
  'ssh2_disconnect' => 
  array (
    0 => 'bool',
    'session' => 'resource',
  ),
  'ssh2_exec' => 
  array (
    0 => 'false|resource',
    'session' => 'resource',
    'command' => 'string',
    'pty=' => 'string',
    'env=' => 'array<array-key, mixed>',
    'width=' => 'int',
    'height=' => 'int',
    'width_height_type=' => 'int',
  ),
  'ssh2_fetch_stream' => 
  array (
    0 => 'false|resource',
    'channel' => 'resource',
    'streamid' => 'int',
  ),
  'ssh2_fingerprint' => 
  array (
    0 => 'false|string',
    'session' => 'resource',
    'flags=' => 'int',
  ),
  'ssh2_forward_accept' => 
  array (
    0 => 'false|resource',
    'listener' => 'resource',
  ),
  'ssh2_forward_listen' => 
  array (
    0 => 'false|resource',
    'session' => 'resource',
    'port' => 'int',
    'host=' => 'string',
    'max_connections=' => 'string',
  ),
  'ssh2_methods_negotiated' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'session' => 'resource',
  ),
  'ssh2_poll' => 
  array (
    0 => 'int',
    '&polldes' => 'array<array-key, mixed>',
    'timeout=' => 'int',
  ),
  'ssh2_publickey_add' => 
  array (
    0 => 'bool',
    'pkey' => 'resource',
    'algoname' => 'string',
    'blob' => 'string',
    'overwrite=' => 'bool',
    'attributes=' => 'array<array-key, mixed>',
  ),
  'ssh2_publickey_init' => 
  array (
    0 => 'false|resource',
    'session' => 'resource',
  ),
  'ssh2_publickey_list' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'pkey' => 'resource',
  ),
  'ssh2_publickey_remove' => 
  array (
    0 => 'bool',
    'pkey' => 'resource',
    'algoname' => 'string',
    'blob' => 'string',
  ),
  'ssh2_scp_recv' => 
  array (
    0 => 'bool',
    'session' => 'resource',
    'remote_file' => 'string',
    'local_file' => 'string',
  ),
  'ssh2_scp_send' => 
  array (
    0 => 'bool',
    'session' => 'resource',
    'local_file' => 'string',
    'remote_file' => 'string',
    'create_mode=' => 'int',
  ),
  'ssh2_sftp' => 
  array (
    0 => 'false|resource',
    'session' => 'resource',
  ),
  'ssh2_sftp_chmod' => 
  array (
    0 => 'bool',
    'sftp' => 'resource',
    'filename' => 'string',
    'mode' => 'int',
  ),
  'ssh2_sftp_lstat' => 
  array (
    0 => 'array{0: int, 10: int, 11: int, 12: int, 1: int, 2: int, 3: int, 4: int, 5: int, 6: int, 7: int, 8: int, 9: int, atime: int, blksize: int, blocks: int, ctime: int, dev: int, gid: int, ino: int, mode: int, mtime: int, nlink: int, rdev: int, size: int, uid: int}|false',
    'sftp' => 'resource',
    'path' => 'string',
  ),
  'ssh2_sftp_mkdir' => 
  array (
    0 => 'bool',
    'sftp' => 'resource',
    'dirname' => 'string',
    'mode=' => 'int',
    'recursive=' => 'bool',
  ),
  'ssh2_sftp_readlink' => 
  array (
    0 => 'false|non-falsy-string',
    'sftp' => 'resource',
    'link' => 'string',
  ),
  'ssh2_sftp_realpath' => 
  array (
    0 => 'false|non-falsy-string',
    'sftp' => 'resource',
    'filename' => 'string',
  ),
  'ssh2_sftp_rename' => 
  array (
    0 => 'bool',
    'sftp' => 'resource',
    'from' => 'string',
    'to' => 'string',
  ),
  'ssh2_sftp_rmdir' => 
  array (
    0 => 'bool',
    'sftp' => 'resource',
    'dirname' => 'string',
  ),
  'ssh2_sftp_stat' => 
  array (
    0 => 'array{0: int, 10: int, 11: int, 12: int, 1: int, 2: int, 3: int, 4: int, 5: int, 6: int, 7: int, 8: int, 9: int, atime: int, blksize: int, blocks: int, ctime: int, dev: int, gid: int, ino: int, mode: int, mtime: int, nlink: int, rdev: int, size: int, uid: int}|false',
    'sftp' => 'resource',
    'path' => 'string',
  ),
  'ssh2_sftp_symlink' => 
  array (
    0 => 'bool',
    'sftp' => 'resource',
    'target' => 'string',
    'link' => 'string',
  ),
  'ssh2_sftp_unlink' => 
  array (
    0 => 'bool',
    'sftp' => 'resource',
    'filename' => 'string',
  ),
  'ssh2_shell' => 
  array (
    0 => 'false|resource',
    'session' => 'resource',
    'termtype=' => 'string',
    'env=' => 'array<array-key, mixed>',
    'width=' => 'int',
    'height=' => 'int',
    'width_height_type=' => 'int',
  ),
  'ssh2_tunnel' => 
  array (
    0 => 'false|resource',
    'session' => 'resource',
    'host' => 'string',
    'port' => 'int',
  ),
  'stat' => 
  array (
    0 => 'array{0: int, 10: int, 11: int, 12: int, 1: int, 2: int, 3: int, 4: int, 5: int, 6: int, 7: int, 8: int, 9: int, atime: int, blksize: int, blocks: int, ctime: int, dev: int, gid: int, ino: int, mode: int, mtime: int, nlink: int, rdev: int, size: int, uid: int}|false',
    'filename' => 'string',
  ),
  'stats_absolute_deviation' => 
  array (
    0 => 'float',
    'a' => 'array<array-key, mixed>',
  ),
  'stats_cdf_beta' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'par3' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_binomial' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'par3' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_cauchy' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'par3' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_chisquare' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_exponential' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_f' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'par3' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_gamma' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'par3' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_laplace' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'par3' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_logistic' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'par3' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_negative_binomial' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'par3' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_noncentral_chisquare' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'par3' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_noncentral_f' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'par3' => 'float',
    'par4' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_noncentral_t' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'par3' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_normal' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'par3' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_poisson' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_t' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_uniform' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'par3' => 'float',
    'which' => 'int',
  ),
  'stats_cdf_weibull' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'par3' => 'float',
    'which' => 'int',
  ),
  'stats_covariance' => 
  array (
    0 => 'float',
    'a' => 'array<array-key, mixed>',
    'b' => 'array<array-key, mixed>',
  ),
  'stats_den_uniform' => 
  array (
    0 => 'float',
    'x' => 'float',
    'a' => 'float',
    'b' => 'float',
  ),
  'stats_dens_beta' => 
  array (
    0 => 'float',
    'x' => 'float',
    'a' => 'float',
    'b' => 'float',
  ),
  'stats_dens_cauchy' => 
  array (
    0 => 'float',
    'x' => 'float',
    'ave' => 'float',
    'stdev' => 'float',
  ),
  'stats_dens_chisquare' => 
  array (
    0 => 'float',
    'x' => 'float',
    'dfr' => 'float',
  ),
  'stats_dens_exponential' => 
  array (
    0 => 'float',
    'x' => 'float',
    'scale' => 'float',
  ),
  'stats_dens_f' => 
  array (
    0 => 'float',
    'x' => 'float',
    'dfr1' => 'float',
    'dfr2' => 'float',
  ),
  'stats_dens_gamma' => 
  array (
    0 => 'float',
    'x' => 'float',
    'shape' => 'float',
    'scale' => 'float',
  ),
  'stats_dens_laplace' => 
  array (
    0 => 'float',
    'x' => 'float',
    'ave' => 'float',
    'stdev' => 'float',
  ),
  'stats_dens_logistic' => 
  array (
    0 => 'float',
    'x' => 'float',
    'ave' => 'float',
    'stdev' => 'float',
  ),
  'stats_dens_negative_binomial' => 
  array (
    0 => 'float',
    'x' => 'float',
    'n' => 'float',
    'pi' => 'float',
  ),
  'stats_dens_normal' => 
  array (
    0 => 'float',
    'x' => 'float',
    'ave' => 'float',
    'stdev' => 'float',
  ),
  'stats_dens_pmf_binomial' => 
  array (
    0 => 'float',
    'x' => 'float',
    'n' => 'float',
    'pi' => 'float',
  ),
  'stats_dens_pmf_hypergeometric' => 
  array (
    0 => 'float',
    'n1' => 'float',
    'n2' => 'float',
    'N1' => 'float',
    'N2' => 'float',
  ),
  'stats_dens_pmf_negative_binomial' => 
  array (
    0 => 'float',
    'x' => 'float',
    'n' => 'float',
    'pi' => 'float',
  ),
  'stats_dens_pmf_poisson' => 
  array (
    0 => 'float',
    'x' => 'float',
    'lb' => 'float',
  ),
  'stats_dens_t' => 
  array (
    0 => 'float',
    'x' => 'float',
    'dfr' => 'float',
  ),
  'stats_dens_uniform' => 
  array (
    0 => 'float',
    'x' => 'float',
    'a' => 'float',
    'b' => 'float',
  ),
  'stats_dens_weibull' => 
  array (
    0 => 'float',
    'x' => 'float',
    'a' => 'float',
    'b' => 'float',
  ),
  'stats_harmonic_mean' => 
  array (
    0 => 'float',
    'a' => 'array<array-key, mixed>',
  ),
  'stats_kurtosis' => 
  array (
    0 => 'float',
    'a' => 'array<array-key, mixed>',
  ),
  'stats_rand_gen_beta' => 
  array (
    0 => 'float',
    'a' => 'float',
    'b' => 'float',
  ),
  'stats_rand_gen_chisquare' => 
  array (
    0 => 'float',
    'df' => 'float',
  ),
  'stats_rand_gen_exponential' => 
  array (
    0 => 'float',
    'av' => 'float',
  ),
  'stats_rand_gen_f' => 
  array (
    0 => 'float',
    'dfn' => 'float',
    'dfd' => 'float',
  ),
  'stats_rand_gen_funiform' => 
  array (
    0 => 'float',
    'low' => 'float',
    'high' => 'float',
  ),
  'stats_rand_gen_gamma' => 
  array (
    0 => 'float',
    'a' => 'float',
    'r' => 'float',
  ),
  'stats_rand_gen_ibinomial' => 
  array (
    0 => 'int',
    'n' => 'int',
    'pp' => 'float',
  ),
  'stats_rand_gen_ibinomial_negative' => 
  array (
    0 => 'int',
    'n' => 'int',
    'p' => 'float',
  ),
  'stats_rand_gen_int' => 
  array (
    0 => 'int',
  ),
  'stats_rand_gen_ipoisson' => 
  array (
    0 => 'int',
    'mu' => 'float',
  ),
  'stats_rand_gen_iuniform' => 
  array (
    0 => 'int',
    'low' => 'int',
    'high' => 'int',
  ),
  'stats_rand_gen_noncenral_chisquare' => 
  array (
    0 => 'float',
    'df' => 'float',
    'xnonc' => 'float',
  ),
  'stats_rand_gen_noncentral_chisquare' => 
  array (
    0 => 'float',
    'df' => 'float',
    'xnonc' => 'float',
  ),
  'stats_rand_gen_noncentral_f' => 
  array (
    0 => 'float',
    'dfn' => 'float',
    'dfd' => 'float',
    'xnonc' => 'float',
  ),
  'stats_rand_gen_noncentral_t' => 
  array (
    0 => 'float',
    'df' => 'float',
    'xnonc' => 'float',
  ),
  'stats_rand_gen_normal' => 
  array (
    0 => 'float',
    'av' => 'float',
    'sd' => 'float',
  ),
  'stats_rand_gen_t' => 
  array (
    0 => 'float',
    'df' => 'float',
  ),
  'stats_rand_get_seeds' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'stats_rand_phrase_to_seeds' => 
  array (
    0 => 'array<array-key, mixed>',
    'phrase' => 'string',
  ),
  'stats_rand_ranf' => 
  array (
    0 => 'float',
  ),
  'stats_rand_setall' => 
  array (
    0 => 'void',
    'iseed1' => 'int',
    'iseed2' => 'int',
  ),
  'stats_skew' => 
  array (
    0 => 'float',
    'a' => 'array<array-key, mixed>',
  ),
  'stats_standard_deviation' => 
  array (
    0 => 'float',
    'a' => 'array<array-key, mixed>',
    'sample=' => 'bool',
  ),
  'stats_stat_binomial_coef' => 
  array (
    0 => 'float',
    'x' => 'int',
    'n' => 'int',
  ),
  'stats_stat_correlation' => 
  array (
    0 => 'float',
    'array1' => 'array<array-key, mixed>',
    'array2' => 'array<array-key, mixed>',
  ),
  'stats_stat_factorial' => 
  array (
    0 => 'float',
    'n' => 'int',
  ),
  'stats_stat_gennch' => 
  array (
    0 => 'float',
    'n' => 'int',
  ),
  'stats_stat_independent_t' => 
  array (
    0 => 'float',
    'array1' => 'array<array-key, mixed>',
    'array2' => 'array<array-key, mixed>',
  ),
  'stats_stat_innerproduct' => 
  array (
    0 => 'float',
    'array1' => 'array<array-key, mixed>',
    'array2' => 'array<array-key, mixed>',
  ),
  'stats_stat_noncentral_t' => 
  array (
    0 => 'float',
    'par1' => 'float',
    'par2' => 'float',
    'par3' => 'float',
    'which' => 'int',
  ),
  'stats_stat_paired_t' => 
  array (
    0 => 'float',
    'array1' => 'array<array-key, mixed>',
    'array2' => 'array<array-key, mixed>',
  ),
  'stats_stat_percentile' => 
  array (
    0 => 'float',
    'arr' => 'array<array-key, mixed>',
    'perc' => 'float',
  ),
  'stats_stat_powersum' => 
  array (
    0 => 'float',
    'arr' => 'array<array-key, mixed>',
    'power' => 'float',
  ),
  'stats_variance' => 
  array (
    0 => 'float',
    'a' => 'array<array-key, mixed>',
    'sample=' => 'bool',
  ),
  'stomp::__construct' => 
  array (
    0 => 'void',
    'broker=' => 'string',
    'username=' => 'string',
    'password=' => 'string',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'stomp::abort' => 
  array (
    0 => 'bool',
    'transaction_id' => 'string',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'stomp::ack' => 
  array (
    0 => 'bool',
    'msg' => 'mixed',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'stomp::begin' => 
  array (
    0 => 'bool',
    'transaction_id' => 'string',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'stomp::commit' => 
  array (
    0 => 'bool',
    'transaction_id' => 'string',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'stomp::error' => 
  array (
    0 => 'string',
  ),
  'stomp::getreadtimeout' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'stomp::getsessionid' => 
  array (
    0 => 'string',
  ),
  'stomp::hasframe' => 
  array (
    0 => 'bool',
  ),
  'stomp::readframe' => 
  array (
    0 => 'array<array-key, mixed>',
    'class_name=' => 'string',
  ),
  'stomp::send' => 
  array (
    0 => 'bool',
    'destination' => 'string',
    'msg' => 'mixed',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'stomp::setreadtimeout' => 
  array (
    0 => 'void',
    'seconds' => 'int',
    'microseconds=' => 'int|null',
  ),
  'stomp::subscribe' => 
  array (
    0 => 'bool',
    'destination' => 'string',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'stomp::unsubscribe' => 
  array (
    0 => 'bool',
    'destination' => 'string',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'stomp_abort' => 
  array (
    0 => 'bool',
    'link' => 'resource',
    'transaction_id' => 'string',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'stomp_ack' => 
  array (
    0 => 'bool',
    'link' => 'resource',
    'msg' => 'mixed',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'stomp_begin' => 
  array (
    0 => 'bool',
    'link' => 'resource',
    'transaction_id' => 'string',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'stomp_close' => 
  array (
    0 => 'bool',
    'link' => 'resource',
  ),
  'stomp_commit' => 
  array (
    0 => 'bool',
    'link' => 'resource',
    'transaction_id' => 'string',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'stomp_connect' => 
  array (
    0 => 'resource',
    'link' => 'resource',
    'broker=' => 'string',
    'username=' => 'string',
    'password=' => 'string',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'stomp_connect_error' => 
  array (
    0 => 'string',
  ),
  'stomp_error' => 
  array (
    0 => 'string',
    'link' => 'resource',
  ),
  'stomp_get_read_timeout' => 
  array (
    0 => 'array<array-key, mixed>',
    'link' => 'resource',
  ),
  'stomp_get_session_id' => 
  array (
    0 => 'string',
    'link' => 'resource',
  ),
  'stomp_has_frame' => 
  array (
    0 => 'bool',
    'link' => 'resource',
  ),
  'stomp_read_frame' => 
  array (
    0 => 'array<array-key, mixed>',
    'link' => 'resource',
    'class_name=' => 'string',
  ),
  'stomp_send' => 
  array (
    0 => 'bool',
    'link' => 'resource',
    'destination' => 'string',
    'msg' => 'mixed',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'stomp_set_read_timeout' => 
  array (
    0 => 'void',
    'link' => 'resource',
    'seconds' => 'int',
    'microseconds=' => 'int|null',
  ),
  'stomp_subscribe' => 
  array (
    0 => 'bool',
    'link' => 'resource',
    'destination' => 'string',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'stomp_unsubscribe' => 
  array (
    0 => 'bool',
    'link' => 'resource',
    'destination' => 'string',
    'headers=' => 'array<array-key, mixed>|null',
  ),
  'stomp_version' => 
  array (
    0 => 'string',
  ),
  'stompexception::getdetails' => 
  array (
    0 => 'string',
  ),
  'stompframe::__construct' => 
  array (
    0 => 'void',
    'command=' => 'string',
    'headers=' => 'array<array-key, mixed>|null',
    'body=' => 'string',
  ),
  'str_contains' => 
  array (
    0 => 'bool',
    'haystack' => 'string',
    'needle' => 'string',
  ),
  'str_ends_with' => 
  array (
    0 => 'bool',
    'haystack' => 'string',
    'needle' => 'string',
  ),
  'str_getcsv' => 
  array (
    0 => 'non-empty-list<null|string>',
    'string' => 'string',
    'separator=' => 'string',
    'enclosure=' => 'string',
    'escape=' => 'string',
  ),
  'str_ireplace' => 
  array (
    0 => 'string',
    'search' => 'string',
    'replace' => 'string',
    'subject' => 'string',
    '&w_count=' => 'int',
  ),
  'str_ireplace\'1' => 
  array (
    0 => 'array<array-key, string>',
    'search' => 'string',
    'replace' => 'string',
    'subject' => 'array<array-key, mixed>',
    '&w_count=' => 'int',
  ),
  'str_ireplace\'2' => 
  array (
    0 => 'string',
    'search' => 'array<array-key, mixed>',
    'replace' => 'array<array-key, string>|string',
    'subject' => 'string',
    '&w_count=' => 'int',
  ),
  'str_ireplace\'3' => 
  array (
    0 => 'array<array-key, string>',
    'search' => 'array<array-key, mixed>',
    'replace' => 'array<array-key, string>|string',
    'subject' => 'array<array-key, mixed>',
    '&w_count=' => 'int',
  ),
  'str_pad' => 
  array (
    0 => 'string',
    'string' => 'string',
    'length' => 'int',
    'pad_string=' => 'string',
    'pad_type=' => 'int',
  ),
  'str_repeat' => 
  array (
    0 => 'string',
    'string' => 'string',
    'times' => 'int',
  ),
  'str_replace' => 
  array (
    0 => 'string',
    'search' => 'string',
    'replace' => 'string',
    'subject' => 'string',
    '&w_count=' => 'int',
  ),
  'str_replace\'1' => 
  array (
    0 => 'array<array-key, string>',
    'search' => 'string',
    'replace' => 'string',
    'subject' => 'array<array-key, mixed>',
    '&w_count=' => 'int',
  ),
  'str_replace\'2' => 
  array (
    0 => 'string',
    'search' => 'array<array-key, mixed>',
    'replace' => 'array<array-key, string>|string',
    'subject' => 'string',
    '&w_count=' => 'int',
  ),
  'str_replace\'3' => 
  array (
    0 => 'array<array-key, string>',
    'search' => 'array<array-key, mixed>',
    'replace' => 'array<array-key, string>|string',
    'subject' => 'array<array-key, mixed>',
    '&w_count=' => 'int',
  ),
  'str_rot13' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'str_shuffle' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'str_split' => 
  array (
    0 => 'non-empty-list<string>',
    'string' => 'string',
    'length=' => 'int<1, max>',
  ),
  'str_starts_with' => 
  array (
    0 => 'bool',
    'haystack' => 'string',
    'needle' => 'string',
  ),
  'str_word_count' => 
  array (
    0 => 'array<int, string>|int',
    'string' => 'string',
    'format=' => 'int',
    'characters=' => 'null|string',
  ),
  'strcasecmp' => 
  array (
    0 => 'int',
    'string1' => 'string',
    'string2' => 'string',
  ),
  'strchr' => 
  array (
    0 => 'false|string',
    'haystack' => 'string',
    'needle' => 'string',
    'before_needle=' => 'bool',
  ),
  'strcmp' => 
  array (
    0 => 'int',
    'string1' => 'string',
    'string2' => 'string',
  ),
  'strcoll' => 
  array (
    0 => 'int',
    'string1' => 'string',
    'string2' => 'string',
  ),
  'strcspn' => 
  array (
    0 => 'int',
    'string' => 'string',
    'characters' => 'string',
    'offset=' => 'int',
    'length=' => 'int|null',
  ),
  'stream_bucket_append' => 
  array (
    0 => 'void',
    'brigade' => 'resource',
    'bucket' => 'object',
  ),
  'stream_bucket_make_writeable' => 
  array (
    0 => 'null|object',
    'brigade' => 'resource',
  ),
  'stream_bucket_new' => 
  array (
    0 => 'object',
    'stream' => 'resource',
    'buffer' => 'string',
  ),
  'stream_bucket_prepend' => 
  array (
    0 => 'void',
    'brigade' => 'resource',
    'bucket' => 'object',
  ),
  'stream_context_create' => 
  array (
    0 => 'resource',
    'options=' => 'array<array-key, mixed>|null',
    'params=' => 'array<array-key, mixed>|null',
  ),
  'stream_context_get_default' => 
  array (
    0 => 'resource',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'stream_context_get_options' => 
  array (
    0 => 'array<array-key, mixed>',
    'stream_or_context' => 'resource',
  ),
  'stream_context_get_params' => 
  array (
    0 => 'array{notification: string, options: array<array-key, mixed>}',
    'context' => 'resource',
  ),
  'stream_context_set_default' => 
  array (
    0 => 'resource',
    'options' => 'array<array-key, mixed>',
  ),
  'stream_context_set_option' => 
  array (
    0 => 'bool',
    'context' => 'mixed',
    'wrapper_or_options' => 'string',
    'option_name=' => 'null|string',
    'value=' => 'mixed',
  ),
  'stream_context_set_option\'1' => 
  array (
    0 => 'bool',
    'context' => 'mixed',
    'wrapper_or_options' => 'array<array-key, mixed>',
  ),
  'stream_context_set_params' => 
  array (
    0 => 'bool',
    'context' => 'resource',
    'params' => 'array<array-key, mixed>',
  ),
  'stream_copy_to_stream' => 
  array (
    0 => 'false|int',
    'from' => 'resource',
    'to' => 'resource',
    'length=' => 'int|null',
    'offset=' => 'int',
  ),
  'stream_encoding' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
    'encoding=' => 'string',
  ),
  'stream_filter_append' => 
  array (
    0 => 'false|resource',
    'stream' => 'resource',
    'filter_name' => 'string',
    'mode=' => 'int',
    'params=' => 'mixed',
  ),
  'stream_filter_prepend' => 
  array (
    0 => 'false|resource',
    'stream' => 'resource',
    'filter_name' => 'string',
    'mode=' => 'int',
    'params=' => 'mixed',
  ),
  'stream_filter_register' => 
  array (
    0 => 'bool',
    'filter_name' => 'string',
    'class' => 'string',
  ),
  'stream_filter_remove' => 
  array (
    0 => 'bool',
    'stream_filter' => 'resource',
  ),
  'stream_get_contents' => 
  array (
    0 => 'false|string',
    'stream' => 'resource',
    'length=' => 'int|null',
    'offset=' => 'int',
  ),
  'stream_get_filters' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'stream_get_line' => 
  array (
    0 => 'false|string',
    'stream' => 'resource',
    'length' => 'int',
    'ending=' => 'string',
  ),
  'stream_get_meta_data' => 
  array (
    0 => 'array{blocked: bool, crypto?: array{cipher_bits: int, cipher_name: string, cipher_version: string, protocol: string}, eof: bool, mediatype: string, mode: string, seekable: bool, stream_type: string, timed_out: bool, unread_bytes: int, uri: string, wrapper_data: mixed, wrapper_type: string}',
    'stream' => 'resource',
  ),
  'stream_get_transports' => 
  array (
    0 => 'list<string>',
  ),
  'stream_get_wrappers' => 
  array (
    0 => 'list<string>',
  ),
  'stream_is_local' => 
  array (
    0 => 'bool',
    'stream' => 'resource|string',
  ),
  'stream_isatty' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
  ),
  'stream_notification_callback' => 
  array (
    0 => 'callback',
    'notification_code' => 'int',
    'severity' => 'int',
    'message' => 'string',
    'message_code' => 'int',
    'bytes_transferred' => 'int',
    'bytes_max' => 'int',
  ),
  'stream_register_wrapper' => 
  array (
    0 => 'bool',
    'protocol' => 'string',
    'class' => 'string',
    'flags=' => 'int',
  ),
  'stream_resolve_include_path' => 
  array (
    0 => 'false|string',
    'filename' => 'string',
  ),
  'stream_select' => 
  array (
    0 => 'false|int',
    '&read' => 'array<array-key, resource>|null',
    '&write' => 'array<array-key, resource>|null',
    '&except' => 'array<array-key, resource>|null',
    'seconds' => 'int|null',
    'microseconds=' => 'int',
  ),
  'stream_set_blocking' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
    'enable' => 'bool',
  ),
  'stream_set_chunk_size' => 
  array (
    0 => 'int',
    'stream' => 'resource',
    'size' => 'int',
  ),
  'stream_set_read_buffer' => 
  array (
    0 => 'int',
    'stream' => 'resource',
    'size' => 'int',
  ),
  'stream_set_timeout' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
    'seconds' => 'int',
    'microseconds=' => 'int',
  ),
  'stream_set_write_buffer' => 
  array (
    0 => 'int',
    'stream' => 'resource',
    'size' => 'int',
  ),
  'stream_socket_accept' => 
  array (
    0 => 'false|resource',
    'socket' => 'resource',
    'timeout=' => 'float|null',
    '&w_peer_name=' => 'string',
  ),
  'stream_socket_client' => 
  array (
    0 => 'false|resource',
    'address' => 'string',
    '&w_error_code=' => 'int',
    '&w_error_message=' => 'string',
    'timeout=' => 'float|null',
    'flags=' => 'int',
    'context=' => 'null|resource',
  ),
  'stream_socket_enable_crypto' => 
  array (
    0 => 'bool|int',
    'stream' => 'resource',
    'enable' => 'bool',
    'crypto_method=' => 'int|null',
    'session_stream=' => 'null|resource',
  ),
  'stream_socket_get_name' => 
  array (
    0 => 'false|string',
    'socket' => 'resource',
    'remote' => 'bool',
  ),
  'stream_socket_pair' => 
  array (
    0 => 'array<array-key, resource>|false',
    'domain' => 'int',
    'type' => 'int',
    'protocol' => 'int',
  ),
  'stream_socket_recvfrom' => 
  array (
    0 => 'false|string',
    'socket' => 'resource',
    'length' => 'int',
    'flags=' => 'int',
    '&w_address=' => 'string',
  ),
  'stream_socket_sendto' => 
  array (
    0 => 'false|int',
    'socket' => 'resource',
    'data' => 'string',
    'flags=' => 'int',
    'address=' => 'string',
  ),
  'stream_socket_server' => 
  array (
    0 => 'false|resource',
    'address' => 'string',
    '&w_error_code=' => 'int',
    '&w_error_message=' => 'string',
    'flags=' => 'int',
    'context=' => 'resource',
  ),
  'stream_socket_shutdown' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
    'mode' => 'int',
  ),
  'stream_supports_lock' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
  ),
  'stream_wrapper_register' => 
  array (
    0 => 'bool',
    'protocol' => 'string',
    'class' => 'string',
    'flags=' => 'int',
  ),
  'stream_wrapper_restore' => 
  array (
    0 => 'bool',
    'protocol' => 'string',
  ),
  'stream_wrapper_unregister' => 
  array (
    0 => 'bool',
    'protocol' => 'string',
  ),
  'streamwrapper::__construct' => 
  array (
    0 => 'void',
  ),
  'streamwrapper::__destruct' => 
  array (
    0 => 'void',
  ),
  'streamwrapper::dir_closedir' => 
  array (
    0 => 'bool',
  ),
  'streamwrapper::dir_opendir' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'options' => 'int',
  ),
  'streamwrapper::dir_readdir' => 
  array (
    0 => 'string',
  ),
  'streamwrapper::dir_rewinddir' => 
  array (
    0 => 'bool',
  ),
  'streamwrapper::mkdir' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'mode' => 'int',
    'options' => 'int',
  ),
  'streamwrapper::rename' => 
  array (
    0 => 'bool',
    'path_from' => 'string',
    'path_to' => 'string',
  ),
  'streamwrapper::rmdir' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'options' => 'int',
  ),
  'streamwrapper::stream_cast' => 
  array (
    0 => 'resource',
    'cast_as' => 'int',
  ),
  'streamwrapper::stream_close' => 
  array (
    0 => 'void',
  ),
  'streamwrapper::stream_eof' => 
  array (
    0 => 'bool',
  ),
  'streamwrapper::stream_flush' => 
  array (
    0 => 'bool',
  ),
  'streamwrapper::stream_lock' => 
  array (
    0 => 'bool',
    'operation' => 'mode',
  ),
  'streamwrapper::stream_metadata' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'option' => 'int',
    'value' => 'mixed',
  ),
  'streamwrapper::stream_open' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'mode' => 'string',
    'options' => 'int',
    'opened_path' => 'string',
  ),
  'streamwrapper::stream_read' => 
  array (
    0 => 'string',
    'count' => 'int',
  ),
  'streamwrapper::stream_seek' => 
  array (
    0 => 'bool',
    'offset' => 'int',
    'whence' => 'int',
  ),
  'streamwrapper::stream_set_option' => 
  array (
    0 => 'bool',
    'option' => 'int',
    'arg1' => 'int',
    'arg2' => 'int',
  ),
  'streamwrapper::stream_stat' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'streamwrapper::stream_tell' => 
  array (
    0 => 'int',
  ),
  'streamwrapper::stream_truncate' => 
  array (
    0 => 'bool',
    'new_size' => 'int',
  ),
  'streamwrapper::stream_write' => 
  array (
    0 => 'int',
    'data' => 'string',
  ),
  'streamwrapper::unlink' => 
  array (
    0 => 'bool',
    'path' => 'string',
  ),
  'streamwrapper::url_stat' => 
  array (
    0 => 'array<array-key, mixed>',
    'path' => 'string',
    'flags' => 'int',
  ),
  'strftime' => 
  array (
    0 => 'false|string',
    'format' => 'string',
    'timestamp=' => 'int|null',
  ),
  'strip_tags' => 
  array (
    0 => 'string',
    'string' => 'string',
    'allowed_tags=' => 'list<non-empty-string>|null|string',
  ),
  'stripcslashes' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'stripos' => 
  array (
    0 => 'false|int',
    'haystack' => 'string',
    'needle' => 'string',
    'offset=' => 'int',
  ),
  'stripslashes' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'stristr' => 
  array (
    0 => 'false|string',
    'haystack' => 'string',
    'needle' => 'string',
    'before_needle=' => 'bool',
  ),
  'strlen' => 
  array (
    0 => 'int<0, max>',
    'string' => 'string',
  ),
  'strnatcasecmp' => 
  array (
    0 => 'int',
    'string1' => 'string',
    'string2' => 'string',
  ),
  'strnatcmp' => 
  array (
    0 => 'int',
    'string1' => 'string',
    'string2' => 'string',
  ),
  'strncasecmp' => 
  array (
    0 => 'int',
    'string1' => 'string',
    'string2' => 'string',
    'length' => 'int',
  ),
  'strncmp' => 
  array (
    0 => 'int',
    'string1' => 'string',
    'string2' => 'string',
    'length' => 'int',
  ),
  'strpbrk' => 
  array (
    0 => 'false|string',
    'string' => 'string',
    'characters' => 'string',
  ),
  'strpos' => 
  array (
    0 => 'false|int',
    'haystack' => 'string',
    'needle' => 'string',
    'offset=' => 'int',
  ),
  'strptime' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'timestamp' => 'string',
    'format' => 'string',
  ),
  'strrchr' => 
  array (
    0 => 'false|string',
    'haystack' => 'string',
    'needle' => 'string',
  ),
  'strrev' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'strripos' => 
  array (
    0 => 'false|int',
    'haystack' => 'string',
    'needle' => 'string',
    'offset=' => 'int',
  ),
  'strrpos' => 
  array (
    0 => 'false|int',
    'haystack' => 'string',
    'needle' => 'string',
    'offset=' => 'int',
  ),
  'strspn' => 
  array (
    0 => 'int',
    'string' => 'string',
    'characters' => 'string',
    'offset=' => 'int',
    'length=' => 'int|null',
  ),
  'strstr' => 
  array (
    0 => 'false|string',
    'haystack' => 'string',
    'needle' => 'string',
    'before_needle=' => 'bool',
  ),
  'strtok' => 
  array (
    0 => 'false|non-empty-string',
    'string' => 'string',
    'token=' => 'null|string',
  ),
  'strtok\'1' => 
  array (
    0 => 'false|non-empty-string',
    'string' => 'string',
  ),
  'strtolower' => 
  array (
    0 => 'lowercase-string',
    'string' => 'string',
  ),
  'strtotime' => 
  array (
    0 => 'false|int',
    'datetime' => 'string',
    'baseTimestamp=' => 'int|null',
  ),
  'strtoupper' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'strtr' => 
  array (
    0 => 'string',
    'string' => 'string',
    'from' => 'string',
    'to=' => 'null|string',
  ),
  'strtr\'1' => 
  array (
    0 => 'string',
    'string' => 'string',
    'from' => 'array<array-key, mixed>',
  ),
  'strval' => 
  array (
    0 => 'string',
    'value' => 'mixed',
  ),
  'styleobj::__construct' => 
  array (
    0 => 'void',
    'label' => 'labelObj',
    'style' => 'styleObj',
  ),
  'styleobj::converttostring' => 
  array (
    0 => 'string',
  ),
  'styleobj::free' => 
  array (
    0 => 'void',
  ),
  'styleobj::getbinding' => 
  array (
    0 => 'string',
    'stylebinding' => 'mixed',
  ),
  'styleobj::getgeomtransform' => 
  array (
    0 => 'string',
  ),
  'styleobj::ms_newstyleobj' => 
  array (
    0 => 'styleObj',
    'class' => 'classObj',
    'style' => 'styleObj',
  ),
  'styleobj::removebinding' => 
  array (
    0 => 'int',
    'stylebinding' => 'mixed',
  ),
  'styleobj::set' => 
  array (
    0 => 'int',
    'property_name' => 'string',
    'new_value' => 'mixed',
  ),
  'styleobj::setbinding' => 
  array (
    0 => 'int',
    'stylebinding' => 'mixed',
    'value' => 'string',
  ),
  'styleobj::setgeomtransform' => 
  array (
    0 => 'int',
    'value' => 'string',
  ),
  'styleobj::updatefromstring' => 
  array (
    0 => 'int',
    'snippet' => 'string',
  ),
  'substr' => 
  array (
    0 => 'string',
    'string' => 'string',
    'offset' => 'int',
    'length=' => 'int|null',
  ),
  'substr_compare' => 
  array (
    0 => 'int',
    'haystack' => 'string',
    'needle' => 'string',
    'offset' => 'int',
    'length=' => 'int|null',
    'case_insensitive=' => 'bool',
  ),
  'substr_count' => 
  array (
    0 => 'int',
    'haystack' => 'string',
    'needle' => 'string',
    'offset=' => 'int',
    'length=' => 'int|null',
  ),
  'substr_replace' => 
  array (
    0 => 'string',
    'string' => 'string',
    'replace' => 'array<array-key, string>|string',
    'offset' => 'array<array-key, int>|int',
    'length=' => 'array<array-key, int>|int|null',
  ),
  'substr_replace\'1' => 
  array (
    0 => 'array<array-key, string>',
    'string' => 'array<array-key, string>',
    'replace' => 'array<array-key, string>|string',
    'offset' => 'array<array-key, int>|int',
    'length=' => 'array<array-key, int>|int|null',
  ),
  'suhosin_encrypt_cookie' => 
  array (
    0 => 'false|string',
    'name' => 'string',
    'value' => 'string',
  ),
  'suhosin_get_raw_cookies' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'svm::__construct' => 
  array (
    0 => 'void',
  ),
  'svm::crossvalidate' => 
  array (
    0 => 'float',
    'problem' => 'array<array-key, mixed>',
    'number_of_folds' => 'int',
  ),
  'svm::getoptions' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'svm::setoptions' => 
  array (
    0 => 'bool',
    'params' => 'array<array-key, mixed>',
  ),
  'svm::train' => 
  array (
    0 => 'SVMModel',
    'problem' => 'array<array-key, mixed>',
    'weights=' => 'array<array-key, mixed>',
  ),
  'svmmodel::__construct' => 
  array (
    0 => 'void',
    'filename=' => 'string',
  ),
  'svmmodel::checkprobabilitymodel' => 
  array (
    0 => 'bool',
  ),
  'svmmodel::getlabels' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'svmmodel::getnrclass' => 
  array (
    0 => 'int',
  ),
  'svmmodel::getsvmtype' => 
  array (
    0 => 'int',
  ),
  'svmmodel::getsvrprobability' => 
  array (
    0 => 'float',
  ),
  'svmmodel::load' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'svmmodel::predict' => 
  array (
    0 => 'float',
    'data' => 'array<array-key, mixed>',
  ),
  'svmmodel::predict_probability' => 
  array (
    0 => 'float',
    'data' => 'array<array-key, mixed>',
  ),
  'svmmodel::save' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'svn_add' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'recursive=' => 'bool',
    'force=' => 'bool',
  ),
  'svn_auth_get_parameter' => 
  array (
    0 => 'null|string',
    'key' => 'string',
  ),
  'svn_auth_set_parameter' => 
  array (
    0 => 'void',
    'key' => 'string',
    'value' => 'string',
  ),
  'svn_blame' => 
  array (
    0 => 'array<array-key, mixed>',
    'repository_url' => 'string',
    'revision_no=' => 'int',
  ),
  'svn_cat' => 
  array (
    0 => 'string',
    'repos_url' => 'string',
    'revision_no=' => 'int',
  ),
  'svn_checkout' => 
  array (
    0 => 'bool',
    'repos' => 'string',
    'targetpath' => 'string',
    'revision=' => 'int',
    'flags=' => 'int',
  ),
  'svn_cleanup' => 
  array (
    0 => 'bool',
    'workingdir' => 'string',
  ),
  'svn_client_version' => 
  array (
    0 => 'string',
  ),
  'svn_commit' => 
  array (
    0 => 'array<array-key, mixed>',
    'log' => 'string',
    'targets' => 'array<array-key, mixed>',
    'dontrecurse=' => 'bool',
  ),
  'svn_delete' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'force=' => 'bool',
  ),
  'svn_diff' => 
  array (
    0 => 'array<array-key, mixed>',
    'path1' => 'string',
    'rev1' => 'int',
    'path2' => 'string',
    'rev2' => 'int',
  ),
  'svn_export' => 
  array (
    0 => 'bool',
    'frompath' => 'string',
    'topath' => 'string',
    'working_copy=' => 'bool',
    'revision_no=' => 'int',
  ),
  'svn_fs_abort_txn' => 
  array (
    0 => 'bool',
    'txn' => 'resource',
  ),
  'svn_fs_apply_text' => 
  array (
    0 => 'resource',
    'root' => 'resource',
    'path' => 'string',
  ),
  'svn_fs_begin_txn2' => 
  array (
    0 => 'resource',
    'repos' => 'resource',
    'rev' => 'int',
  ),
  'svn_fs_change_node_prop' => 
  array (
    0 => 'bool',
    'root' => 'resource',
    'path' => 'string',
    'name' => 'string',
    'value' => 'string',
  ),
  'svn_fs_check_path' => 
  array (
    0 => 'int',
    'fsroot' => 'resource',
    'path' => 'string',
  ),
  'svn_fs_contents_changed' => 
  array (
    0 => 'bool',
    'root1' => 'resource',
    'path1' => 'string',
    'root2' => 'resource',
    'path2' => 'string',
  ),
  'svn_fs_copy' => 
  array (
    0 => 'bool',
    'from_root' => 'resource',
    'from_path' => 'string',
    'to_root' => 'resource',
    'to_path' => 'string',
  ),
  'svn_fs_delete' => 
  array (
    0 => 'bool',
    'root' => 'resource',
    'path' => 'string',
  ),
  'svn_fs_dir_entries' => 
  array (
    0 => 'array<array-key, mixed>',
    'fsroot' => 'resource',
    'path' => 'string',
  ),
  'svn_fs_file_contents' => 
  array (
    0 => 'resource',
    'fsroot' => 'resource',
    'path' => 'string',
  ),
  'svn_fs_file_length' => 
  array (
    0 => 'int',
    'fsroot' => 'resource',
    'path' => 'string',
  ),
  'svn_fs_is_dir' => 
  array (
    0 => 'bool',
    'root' => 'resource',
    'path' => 'string',
  ),
  'svn_fs_is_file' => 
  array (
    0 => 'bool',
    'root' => 'resource',
    'path' => 'string',
  ),
  'svn_fs_make_dir' => 
  array (
    0 => 'bool',
    'root' => 'resource',
    'path' => 'string',
  ),
  'svn_fs_make_file' => 
  array (
    0 => 'bool',
    'root' => 'resource',
    'path' => 'string',
  ),
  'svn_fs_node_created_rev' => 
  array (
    0 => 'int',
    'fsroot' => 'resource',
    'path' => 'string',
  ),
  'svn_fs_node_prop' => 
  array (
    0 => 'string',
    'fsroot' => 'resource',
    'path' => 'string',
    'propname' => 'string',
  ),
  'svn_fs_props_changed' => 
  array (
    0 => 'bool',
    'root1' => 'resource',
    'path1' => 'string',
    'root2' => 'resource',
    'path2' => 'string',
  ),
  'svn_fs_revision_prop' => 
  array (
    0 => 'string',
    'fs' => 'resource',
    'revnum' => 'int',
    'propname' => 'string',
  ),
  'svn_fs_revision_root' => 
  array (
    0 => 'resource',
    'fs' => 'resource',
    'revnum' => 'int',
  ),
  'svn_fs_txn_root' => 
  array (
    0 => 'resource',
    'txn' => 'resource',
  ),
  'svn_fs_youngest_rev' => 
  array (
    0 => 'int',
    'fs' => 'resource',
  ),
  'svn_import' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'url' => 'string',
    'nonrecursive' => 'bool',
  ),
  'svn_log' => 
  array (
    0 => 'array<array-key, mixed>',
    'repos_url' => 'string',
    'start_revision=' => 'int',
    'end_revision=' => 'int',
    'limit=' => 'int',
    'flags=' => 'int',
  ),
  'svn_ls' => 
  array (
    0 => 'array<array-key, mixed>',
    'repos_url' => 'string',
    'revision_no=' => 'int',
    'recurse=' => 'bool',
    'peg=' => 'bool',
  ),
  'svn_mkdir' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'log_message=' => 'string',
  ),
  'svn_move' => 
  array (
    0 => 'mixed',
    'src_path' => 'string',
    'dst_path' => 'string',
    'force=' => 'bool',
  ),
  'svn_propget' => 
  array (
    0 => 'mixed',
    'path' => 'string',
    'property_name' => 'string',
    'recurse=' => 'bool',
    'revision' => 'int',
  ),
  'svn_proplist' => 
  array (
    0 => 'mixed',
    'path' => 'string',
    'recurse=' => 'bool',
    'revision' => 'int',
  ),
  'svn_repos_create' => 
  array (
    0 => 'resource',
    'path' => 'string',
    'config=' => 'array<array-key, mixed>',
    'fsconfig=' => 'array<array-key, mixed>',
  ),
  'svn_repos_fs' => 
  array (
    0 => 'resource',
    'repos' => 'resource',
  ),
  'svn_repos_fs_begin_txn_for_commit' => 
  array (
    0 => 'resource',
    'repos' => 'resource',
    'rev' => 'int',
    'author' => 'string',
    'log_msg' => 'string',
  ),
  'svn_repos_fs_commit_txn' => 
  array (
    0 => 'int',
    'txn' => 'resource',
  ),
  'svn_repos_hotcopy' => 
  array (
    0 => 'bool',
    'repospath' => 'string',
    'destpath' => 'string',
    'cleanlogs' => 'bool',
  ),
  'svn_repos_open' => 
  array (
    0 => 'resource',
    'path' => 'string',
  ),
  'svn_repos_recover' => 
  array (
    0 => 'bool',
    'path' => 'string',
  ),
  'svn_revert' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'recursive=' => 'bool',
  ),
  'svn_status' => 
  array (
    0 => 'array<array-key, mixed>',
    'path' => 'string',
    'flags=' => 'int',
  ),
  'svn_update' => 
  array (
    0 => 'false|int',
    'path' => 'string',
    'revno=' => 'int',
    'recurse=' => 'bool',
  ),
  'swf_actiongeturl' => 
  array (
    0 => 'mixed',
    'url' => 'string',
    'target' => 'string',
  ),
  'swf_actiongotoframe' => 
  array (
    0 => 'mixed',
    'framenumber' => 'int',
  ),
  'swf_actiongotolabel' => 
  array (
    0 => 'mixed',
    'label' => 'string',
  ),
  'swf_actionnextframe' => 
  array (
    0 => 'mixed',
  ),
  'swf_actionplay' => 
  array (
    0 => 'mixed',
  ),
  'swf_actionprevframe' => 
  array (
    0 => 'mixed',
  ),
  'swf_actionsettarget' => 
  array (
    0 => 'mixed',
    'target' => 'string',
  ),
  'swf_actionstop' => 
  array (
    0 => 'mixed',
  ),
  'swf_actiontogglequality' => 
  array (
    0 => 'mixed',
  ),
  'swf_actionwaitforframe' => 
  array (
    0 => 'mixed',
    'framenumber' => 'int',
    'skipcount' => 'int',
  ),
  'swf_addbuttonrecord' => 
  array (
    0 => 'mixed',
    'states' => 'int',
    'shapeid' => 'int',
    'depth' => 'int',
  ),
  'swf_addcolor' => 
  array (
    0 => 'mixed',
    'r' => 'float',
    'g' => 'float',
    'b' => 'float',
    'a' => 'float',
  ),
  'swf_closefile' => 
  array (
    0 => 'mixed',
    'return_file=' => 'int',
  ),
  'swf_definebitmap' => 
  array (
    0 => 'mixed',
    'objid' => 'int',
    'image_name' => 'string',
  ),
  'swf_definefont' => 
  array (
    0 => 'mixed',
    'fontid' => 'int',
    'fontname' => 'string',
  ),
  'swf_defineline' => 
  array (
    0 => 'mixed',
    'objid' => 'int',
    'x1' => 'float',
    'y1' => 'float',
    'x2' => 'float',
    'y2' => 'float',
    'width' => 'float',
  ),
  'swf_definepoly' => 
  array (
    0 => 'mixed',
    'objid' => 'int',
    'coords' => 'array<array-key, mixed>',
    'npoints' => 'int',
    'width' => 'float',
  ),
  'swf_definerect' => 
  array (
    0 => 'mixed',
    'objid' => 'int',
    'x1' => 'float',
    'y1' => 'float',
    'x2' => 'float',
    'y2' => 'float',
    'width' => 'float',
  ),
  'swf_definetext' => 
  array (
    0 => 'mixed',
    'objid' => 'int',
    'string' => 'string',
    'docenter' => 'int',
  ),
  'swf_endbutton' => 
  array (
    0 => 'mixed',
  ),
  'swf_enddoaction' => 
  array (
    0 => 'mixed',
  ),
  'swf_endshape' => 
  array (
    0 => 'mixed',
  ),
  'swf_endsymbol' => 
  array (
    0 => 'mixed',
  ),
  'swf_fontsize' => 
  array (
    0 => 'mixed',
    'size' => 'float',
  ),
  'swf_fontslant' => 
  array (
    0 => 'mixed',
    'slant' => 'float',
  ),
  'swf_fonttracking' => 
  array (
    0 => 'mixed',
    'tracking' => 'float',
  ),
  'swf_getbitmapinfo' => 
  array (
    0 => 'array<array-key, mixed>',
    'bitmapid' => 'int',
  ),
  'swf_getfontinfo' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swf_getframe' => 
  array (
    0 => 'int',
  ),
  'swf_labelframe' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'swf_lookat' => 
  array (
    0 => 'mixed',
    'view_x' => 'float',
    'view_y' => 'float',
    'view_z' => 'float',
    'reference_x' => 'float',
    'reference_y' => 'float',
    'reference_z' => 'float',
    'twist' => 'float',
  ),
  'swf_modifyobject' => 
  array (
    0 => 'mixed',
    'depth' => 'int',
    'how' => 'int',
  ),
  'swf_mulcolor' => 
  array (
    0 => 'mixed',
    'r' => 'float',
    'g' => 'float',
    'b' => 'float',
    'a' => 'float',
  ),
  'swf_nextid' => 
  array (
    0 => 'int',
  ),
  'swf_oncondition' => 
  array (
    0 => 'mixed',
    'transition' => 'int',
  ),
  'swf_openfile' => 
  array (
    0 => 'mixed',
    'filename' => 'string',
    'width' => 'float',
    'height' => 'float',
    'framerate' => 'float',
    'r' => 'float',
    'g' => 'float',
    'b' => 'float',
  ),
  'swf_ortho' => 
  array (
    0 => 'mixed',
    'xmin' => 'float',
    'xmax' => 'float',
    'ymin' => 'float',
    'ymax' => 'float',
    'zmin' => 'float',
    'zmax' => 'float',
  ),
  'swf_ortho2' => 
  array (
    0 => 'mixed',
    'xmin' => 'float',
    'xmax' => 'float',
    'ymin' => 'float',
    'ymax' => 'float',
  ),
  'swf_perspective' => 
  array (
    0 => 'mixed',
    'fovy' => 'float',
    'aspect' => 'float',
    'near' => 'float',
    'far' => 'float',
  ),
  'swf_placeobject' => 
  array (
    0 => 'mixed',
    'objid' => 'int',
    'depth' => 'int',
  ),
  'swf_polarview' => 
  array (
    0 => 'mixed',
    'dist' => 'float',
    'azimuth' => 'float',
    'incidence' => 'float',
    'twist' => 'float',
  ),
  'swf_popmatrix' => 
  array (
    0 => 'mixed',
  ),
  'swf_posround' => 
  array (
    0 => 'mixed',
    'round' => 'int',
  ),
  'swf_pushmatrix' => 
  array (
    0 => 'mixed',
  ),
  'swf_removeobject' => 
  array (
    0 => 'mixed',
    'depth' => 'int',
  ),
  'swf_rotate' => 
  array (
    0 => 'mixed',
    'angle' => 'float',
    'axis' => 'string',
  ),
  'swf_scale' => 
  array (
    0 => 'mixed',
    'x' => 'float',
    'y' => 'float',
    'z' => 'float',
  ),
  'swf_setfont' => 
  array (
    0 => 'mixed',
    'fontid' => 'int',
  ),
  'swf_setframe' => 
  array (
    0 => 'mixed',
    'framenumber' => 'int',
  ),
  'swf_shapearc' => 
  array (
    0 => 'mixed',
    'x' => 'float',
    'y' => 'float',
    'r' => 'float',
    'ang1' => 'float',
    'ang2' => 'float',
  ),
  'swf_shapecurveto' => 
  array (
    0 => 'mixed',
    'x1' => 'float',
    'y1' => 'float',
    'x2' => 'float',
    'y2' => 'float',
  ),
  'swf_shapecurveto3' => 
  array (
    0 => 'mixed',
    'x1' => 'float',
    'y1' => 'float',
    'x2' => 'float',
    'y2' => 'float',
    'x3' => 'float',
    'y3' => 'float',
  ),
  'swf_shapefillbitmapclip' => 
  array (
    0 => 'mixed',
    'bitmapid' => 'int',
  ),
  'swf_shapefillbitmaptile' => 
  array (
    0 => 'mixed',
    'bitmapid' => 'int',
  ),
  'swf_shapefilloff' => 
  array (
    0 => 'mixed',
  ),
  'swf_shapefillsolid' => 
  array (
    0 => 'mixed',
    'r' => 'float',
    'g' => 'float',
    'b' => 'float',
    'a' => 'float',
  ),
  'swf_shapelinesolid' => 
  array (
    0 => 'mixed',
    'r' => 'float',
    'g' => 'float',
    'b' => 'float',
    'a' => 'float',
    'width' => 'float',
  ),
  'swf_shapelineto' => 
  array (
    0 => 'mixed',
    'x' => 'float',
    'y' => 'float',
  ),
  'swf_shapemoveto' => 
  array (
    0 => 'mixed',
    'x' => 'float',
    'y' => 'float',
  ),
  'swf_showframe' => 
  array (
    0 => 'mixed',
  ),
  'swf_startbutton' => 
  array (
    0 => 'mixed',
    'objid' => 'int',
    'type' => 'int',
  ),
  'swf_startdoaction' => 
  array (
    0 => 'mixed',
  ),
  'swf_startshape' => 
  array (
    0 => 'mixed',
    'objid' => 'int',
  ),
  'swf_startsymbol' => 
  array (
    0 => 'mixed',
    'objid' => 'int',
  ),
  'swf_textwidth' => 
  array (
    0 => 'float',
    'string' => 'string',
  ),
  'swf_translate' => 
  array (
    0 => 'mixed',
    'x' => 'float',
    'y' => 'float',
    'z' => 'float',
  ),
  'swf_viewport' => 
  array (
    0 => 'mixed',
    'xmin' => 'float',
    'xmax' => 'float',
    'ymin' => 'float',
    'ymax' => 'float',
  ),
  'swfaction::__construct' => 
  array (
    0 => 'void',
    'script' => 'string',
  ),
  'swfbitmap::__construct' => 
  array (
    0 => 'void',
    'file' => 'mixed',
    'alphafile=' => 'mixed',
  ),
  'swfbitmap::getheight' => 
  array (
    0 => 'float',
  ),
  'swfbitmap::getwidth' => 
  array (
    0 => 'float',
  ),
  'swfbutton::__construct' => 
  array (
    0 => 'void',
  ),
  'swfbutton::addaction' => 
  array (
    0 => 'void',
    'action' => 'swfaction',
    'flags' => 'int',
  ),
  'swfbutton::addasound' => 
  array (
    0 => 'SWFSoundInstance',
    'sound' => 'swfsound',
    'flags' => 'int',
  ),
  'swfbutton::addshape' => 
  array (
    0 => 'void',
    'shape' => 'swfshape',
    'flags' => 'int',
  ),
  'swfbutton::setaction' => 
  array (
    0 => 'void',
    'action' => 'swfaction',
  ),
  'swfbutton::setdown' => 
  array (
    0 => 'void',
    'shape' => 'swfshape',
  ),
  'swfbutton::sethit' => 
  array (
    0 => 'void',
    'shape' => 'swfshape',
  ),
  'swfbutton::setmenu' => 
  array (
    0 => 'void',
    'flag' => 'int',
  ),
  'swfbutton::setover' => 
  array (
    0 => 'void',
    'shape' => 'swfshape',
  ),
  'swfbutton::setup' => 
  array (
    0 => 'void',
    'shape' => 'swfshape',
  ),
  'swfdisplayitem::addaction' => 
  array (
    0 => 'void',
    'action' => 'swfaction',
    'flags' => 'int',
  ),
  'swfdisplayitem::addcolor' => 
  array (
    0 => 'void',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'a=' => 'int',
  ),
  'swfdisplayitem::endmask' => 
  array (
    0 => 'void',
  ),
  'swfdisplayitem::getrot' => 
  array (
    0 => 'float',
  ),
  'swfdisplayitem::getx' => 
  array (
    0 => 'float',
  ),
  'swfdisplayitem::getxscale' => 
  array (
    0 => 'float',
  ),
  'swfdisplayitem::getxskew' => 
  array (
    0 => 'float',
  ),
  'swfdisplayitem::gety' => 
  array (
    0 => 'float',
  ),
  'swfdisplayitem::getyscale' => 
  array (
    0 => 'float',
  ),
  'swfdisplayitem::getyskew' => 
  array (
    0 => 'float',
  ),
  'swfdisplayitem::move' => 
  array (
    0 => 'void',
    'dx' => 'float',
    'dy' => 'float',
  ),
  'swfdisplayitem::moveto' => 
  array (
    0 => 'void',
    'x' => 'float',
    'y' => 'float',
  ),
  'swfdisplayitem::multcolor' => 
  array (
    0 => 'void',
    'red' => 'float',
    'green' => 'float',
    'blue' => 'float',
    'a=' => 'float',
  ),
  'swfdisplayitem::remove' => 
  array (
    0 => 'void',
  ),
  'swfdisplayitem::rotate' => 
  array (
    0 => 'void',
    'angle' => 'float',
  ),
  'swfdisplayitem::rotateto' => 
  array (
    0 => 'void',
    'angle' => 'float',
  ),
  'swfdisplayitem::scale' => 
  array (
    0 => 'void',
    'dx' => 'float',
    'dy' => 'float',
  ),
  'swfdisplayitem::scaleto' => 
  array (
    0 => 'void',
    'x' => 'float',
    'y=' => 'float',
  ),
  'swfdisplayitem::setdepth' => 
  array (
    0 => 'void',
    'depth' => 'int',
  ),
  'swfdisplayitem::setmasklevel' => 
  array (
    0 => 'void',
    'level' => 'int',
  ),
  'swfdisplayitem::setmatrix' => 
  array (
    0 => 'void',
    'a' => 'float',
    'b' => 'float',
    'c' => 'float',
    'd' => 'float',
    'x' => 'float',
    'y' => 'float',
  ),
  'swfdisplayitem::setname' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'swfdisplayitem::setratio' => 
  array (
    0 => 'void',
    'ratio' => 'float',
  ),
  'swfdisplayitem::skewx' => 
  array (
    0 => 'void',
    'ddegrees' => 'float',
  ),
  'swfdisplayitem::skewxto' => 
  array (
    0 => 'void',
    'degrees' => 'float',
  ),
  'swfdisplayitem::skewy' => 
  array (
    0 => 'void',
    'ddegrees' => 'float',
  ),
  'swfdisplayitem::skewyto' => 
  array (
    0 => 'void',
    'degrees' => 'float',
  ),
  'swffill::moveto' => 
  array (
    0 => 'void',
    'x' => 'float',
    'y' => 'float',
  ),
  'swffill::rotateto' => 
  array (
    0 => 'void',
    'angle' => 'float',
  ),
  'swffill::scaleto' => 
  array (
    0 => 'void',
    'x' => 'float',
    'y=' => 'float',
  ),
  'swffill::skewxto' => 
  array (
    0 => 'void',
    'x' => 'float',
  ),
  'swffill::skewyto' => 
  array (
    0 => 'void',
    'y' => 'float',
  ),
  'swffont::__construct' => 
  array (
    0 => 'void',
    'filename' => 'string',
  ),
  'swffont::getascent' => 
  array (
    0 => 'float',
  ),
  'swffont::getdescent' => 
  array (
    0 => 'float',
  ),
  'swffont::getleading' => 
  array (
    0 => 'float',
  ),
  'swffont::getshape' => 
  array (
    0 => 'string',
    'code' => 'int',
  ),
  'swffont::getutf8width' => 
  array (
    0 => 'float',
    'string' => 'string',
  ),
  'swffont::getwidth' => 
  array (
    0 => 'float',
    'string' => 'string',
  ),
  'swffontchar::addchars' => 
  array (
    0 => 'void',
    'char' => 'string',
  ),
  'swffontchar::addutf8chars' => 
  array (
    0 => 'void',
    'char' => 'string',
  ),
  'swfgradient::__construct' => 
  array (
    0 => 'void',
  ),
  'swfgradient::addentry' => 
  array (
    0 => 'void',
    'ratio' => 'float',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'alpha=' => 'int',
  ),
  'swfmorph::__construct' => 
  array (
    0 => 'void',
  ),
  'swfmorph::getshape1' => 
  array (
    0 => 'SWFShape',
  ),
  'swfmorph::getshape2' => 
  array (
    0 => 'SWFShape',
  ),
  'swfmovie::__construct' => 
  array (
    0 => 'void',
    'version=' => 'int',
  ),
  'swfmovie::add' => 
  array (
    0 => 'mixed',
    'instance' => 'object',
  ),
  'swfmovie::addexport' => 
  array (
    0 => 'void',
    'char' => 'swfcharacter',
    'name' => 'string',
  ),
  'swfmovie::addfont' => 
  array (
    0 => 'mixed',
    'font' => 'swffont',
  ),
  'swfmovie::importchar' => 
  array (
    0 => 'SWFSprite',
    'libswf' => 'string',
    'name' => 'string',
  ),
  'swfmovie::importfont' => 
  array (
    0 => 'SWFFontChar',
    'libswf' => 'string',
    'name' => 'string',
  ),
  'swfmovie::labelframe' => 
  array (
    0 => 'void',
    'label' => 'string',
  ),
  'swfmovie::namedanchor' => 
  array (
    0 => 'mixed',
  ),
  'swfmovie::nextframe' => 
  array (
    0 => 'void',
  ),
  'swfmovie::output' => 
  array (
    0 => 'int',
    'compression=' => 'int',
  ),
  'swfmovie::protect' => 
  array (
    0 => 'mixed',
  ),
  'swfmovie::remove' => 
  array (
    0 => 'void',
    'instance' => 'object',
  ),
  'swfmovie::save' => 
  array (
    0 => 'int',
    'filename' => 'string',
    'compression=' => 'int',
  ),
  'swfmovie::savetofile' => 
  array (
    0 => 'int',
    'x' => 'resource',
    'compression=' => 'int',
  ),
  'swfmovie::setbackground' => 
  array (
    0 => 'void',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
  ),
  'swfmovie::setdimension' => 
  array (
    0 => 'void',
    'width' => 'float',
    'height' => 'float',
  ),
  'swfmovie::setframes' => 
  array (
    0 => 'void',
    'number' => 'int',
  ),
  'swfmovie::setrate' => 
  array (
    0 => 'void',
    'rate' => 'float',
  ),
  'swfmovie::startsound' => 
  array (
    0 => 'SWFSoundInstance',
    'sound' => 'swfsound',
  ),
  'swfmovie::stopsound' => 
  array (
    0 => 'void',
    'sound' => 'swfsound',
  ),
  'swfmovie::streammp3' => 
  array (
    0 => 'int',
    'mp3file' => 'mixed',
    'skip=' => 'float',
  ),
  'swfmovie::writeexports' => 
  array (
    0 => 'void',
  ),
  'swfprebuiltclip::__construct' => 
  array (
    0 => 'void',
    'file' => 'mixed',
  ),
  'swfshape::__construct' => 
  array (
    0 => 'void',
  ),
  'swfshape::addfill' => 
  array (
    0 => 'SWFFill',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'alpha=' => 'int',
    'bitmap=' => 'swfbitmap',
    'flags=' => 'int',
    'gradient=' => 'swfgradient',
  ),
  'swfshape::addfill\'1' => 
  array (
    0 => 'SWFFill',
    'bitmap' => 'SWFBitmap',
    'flags=' => 'int',
  ),
  'swfshape::addfill\'2' => 
  array (
    0 => 'SWFFill',
    'gradient' => 'SWFGradient',
    'flags=' => 'int',
  ),
  'swfshape::drawarc' => 
  array (
    0 => 'void',
    'r' => 'float',
    'startangle' => 'float',
    'endangle' => 'float',
  ),
  'swfshape::drawcircle' => 
  array (
    0 => 'void',
    'r' => 'float',
  ),
  'swfshape::drawcubic' => 
  array (
    0 => 'int',
    'bx' => 'float',
    'by' => 'float',
    'cx' => 'float',
    'cy' => 'float',
    'dx' => 'float',
    'dy' => 'float',
  ),
  'swfshape::drawcubicto' => 
  array (
    0 => 'int',
    'bx' => 'float',
    'by' => 'float',
    'cx' => 'float',
    'cy' => 'float',
    'dx' => 'float',
    'dy' => 'float',
  ),
  'swfshape::drawcurve' => 
  array (
    0 => 'int',
    'controldx' => 'float',
    'controldy' => 'float',
    'anchordx' => 'float',
    'anchordy' => 'float',
    'targetdx=' => 'float',
    'targetdy=' => 'float',
  ),
  'swfshape::drawcurveto' => 
  array (
    0 => 'int',
    'controlx' => 'float',
    'controly' => 'float',
    'anchorx' => 'float',
    'anchory' => 'float',
    'targetx=' => 'float',
    'targety=' => 'float',
  ),
  'swfshape::drawglyph' => 
  array (
    0 => 'void',
    'font' => 'swffont',
    'character' => 'string',
    'size=' => 'int',
  ),
  'swfshape::drawline' => 
  array (
    0 => 'void',
    'dx' => 'float',
    'dy' => 'float',
  ),
  'swfshape::drawlineto' => 
  array (
    0 => 'void',
    'x' => 'float',
    'y' => 'float',
  ),
  'swfshape::movepen' => 
  array (
    0 => 'void',
    'dx' => 'float',
    'dy' => 'float',
  ),
  'swfshape::movepento' => 
  array (
    0 => 'void',
    'x' => 'float',
    'y' => 'float',
  ),
  'swfshape::setleftfill' => 
  array (
    0 => 'mixed',
    'fill' => 'swfgradient',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'a=' => 'int',
  ),
  'swfshape::setline' => 
  array (
    0 => 'mixed',
    'shape' => 'swfshape',
    'width' => 'int',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'a=' => 'int',
  ),
  'swfshape::setrightfill' => 
  array (
    0 => 'mixed',
    'fill' => 'swfgradient',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'a=' => 'int',
  ),
  'swfsound' => 
  array (
    0 => 'SWFSound',
    'filename' => 'string',
    'flags=' => 'int',
  ),
  'swfsound::__construct' => 
  array (
    0 => 'void',
    'filename' => 'string',
    'flags=' => 'int',
  ),
  'swfsoundinstance::loopcount' => 
  array (
    0 => 'void',
    'point' => 'int',
  ),
  'swfsoundinstance::loopinpoint' => 
  array (
    0 => 'void',
    'point' => 'int',
  ),
  'swfsoundinstance::loopoutpoint' => 
  array (
    0 => 'void',
    'point' => 'int',
  ),
  'swfsoundinstance::nomultiple' => 
  array (
    0 => 'void',
  ),
  'swfsprite::__construct' => 
  array (
    0 => 'void',
  ),
  'swfsprite::add' => 
  array (
    0 => 'void',
    'object' => 'object',
  ),
  'swfsprite::labelframe' => 
  array (
    0 => 'void',
    'label' => 'string',
  ),
  'swfsprite::nextframe' => 
  array (
    0 => 'void',
  ),
  'swfsprite::remove' => 
  array (
    0 => 'void',
    'object' => 'object',
  ),
  'swfsprite::setframes' => 
  array (
    0 => 'void',
    'number' => 'int',
  ),
  'swfsprite::startsound' => 
  array (
    0 => 'SWFSoundInstance',
    'sount' => 'swfsound',
  ),
  'swfsprite::stopsound' => 
  array (
    0 => 'void',
    'sount' => 'swfsound',
  ),
  'swftext::__construct' => 
  array (
    0 => 'void',
  ),
  'swftext::addstring' => 
  array (
    0 => 'void',
    'string' => 'string',
  ),
  'swftext::addutf8string' => 
  array (
    0 => 'void',
    'text' => 'string',
  ),
  'swftext::getascent' => 
  array (
    0 => 'float',
  ),
  'swftext::getdescent' => 
  array (
    0 => 'float',
  ),
  'swftext::getleading' => 
  array (
    0 => 'float',
  ),
  'swftext::getutf8width' => 
  array (
    0 => 'float',
    'string' => 'string',
  ),
  'swftext::getwidth' => 
  array (
    0 => 'float',
    'string' => 'string',
  ),
  'swftext::moveto' => 
  array (
    0 => 'void',
    'x' => 'float',
    'y' => 'float',
  ),
  'swftext::setcolor' => 
  array (
    0 => 'void',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'a=' => 'int',
  ),
  'swftext::setfont' => 
  array (
    0 => 'void',
    'font' => 'swffont',
  ),
  'swftext::setheight' => 
  array (
    0 => 'void',
    'height' => 'float',
  ),
  'swftext::setspacing' => 
  array (
    0 => 'void',
    'spacing' => 'float',
  ),
  'swftextfield::__construct' => 
  array (
    0 => 'void',
    'flags=' => 'int',
  ),
  'swftextfield::addchars' => 
  array (
    0 => 'void',
    'chars' => 'string',
  ),
  'swftextfield::addstring' => 
  array (
    0 => 'void',
    'string' => 'string',
  ),
  'swftextfield::align' => 
  array (
    0 => 'void',
    'alignement' => 'int',
  ),
  'swftextfield::setbounds' => 
  array (
    0 => 'void',
    'width' => 'float',
    'height' => 'float',
  ),
  'swftextfield::setcolor' => 
  array (
    0 => 'void',
    'red' => 'int',
    'green' => 'int',
    'blue' => 'int',
    'a=' => 'int',
  ),
  'swftextfield::setfont' => 
  array (
    0 => 'void',
    'font' => 'swffont',
  ),
  'swftextfield::setheight' => 
  array (
    0 => 'void',
    'height' => 'float',
  ),
  'swftextfield::setindentation' => 
  array (
    0 => 'void',
    'width' => 'float',
  ),
  'swftextfield::setleftmargin' => 
  array (
    0 => 'void',
    'width' => 'float',
  ),
  'swftextfield::setlinespacing' => 
  array (
    0 => 'void',
    'height' => 'float',
  ),
  'swftextfield::setmargins' => 
  array (
    0 => 'void',
    'left' => 'float',
    'right' => 'float',
  ),
  'swftextfield::setname' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'swftextfield::setpadding' => 
  array (
    0 => 'void',
    'padding' => 'float',
  ),
  'swftextfield::setrightmargin' => 
  array (
    0 => 'void',
    'width' => 'float',
  ),
  'swfvideostream::__construct' => 
  array (
    0 => 'void',
    'file=' => 'string',
  ),
  'swfvideostream::getnumframes' => 
  array (
    0 => 'int',
  ),
  'swfvideostream::setdimension' => 
  array (
    0 => 'void',
    'x' => 'int',
    'y' => 'int',
  ),
  'swish::__construct' => 
  array (
    0 => 'void',
    'index_names' => 'string',
  ),
  'swish::getmetalist' => 
  array (
    0 => 'array<array-key, mixed>',
    'index_name' => 'string',
  ),
  'swish::getpropertylist' => 
  array (
    0 => 'array<array-key, mixed>',
    'index_name' => 'string',
  ),
  'swish::prepare' => 
  array (
    0 => 'object',
    'query=' => 'string',
  ),
  'swish::query' => 
  array (
    0 => 'object',
    'query' => 'string',
  ),
  'swishresult::getmetalist' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swishresult::stem' => 
  array (
    0 => 'array<array-key, mixed>',
    'word' => 'string',
  ),
  'swishresults::getparsedwords' => 
  array (
    0 => 'array<array-key, mixed>',
    'index_name' => 'string',
  ),
  'swishresults::getremovedstopwords' => 
  array (
    0 => 'array<array-key, mixed>',
    'index_name' => 'string',
  ),
  'swishresults::nextresult' => 
  array (
    0 => 'object',
  ),
  'swishresults::seekresult' => 
  array (
    0 => 'int',
    'position' => 'int',
  ),
  'swishsearch::execute' => 
  array (
    0 => 'object',
    'query=' => 'string',
  ),
  'swishsearch::resetlimit' => 
  array (
    0 => 'mixed',
  ),
  'swishsearch::setlimit' => 
  array (
    0 => 'mixed',
    'property' => 'string',
    'low' => 'string',
    'high' => 'string',
  ),
  'swishsearch::setphrasedelimiter' => 
  array (
    0 => 'mixed',
    'delimiter' => 'string',
  ),
  'swishsearch::setsort' => 
  array (
    0 => 'mixed',
    'sort' => 'string',
  ),
  'swishsearch::setstructure' => 
  array (
    0 => 'mixed',
    'structure' => 'int',
  ),
  'swoole\\arrayobject::__construct' => 
  array (
    0 => 'void',
    'array=' => 'array<array-key, mixed>',
  ),
  'swoole\\arrayobject::__serialize' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\arrayobject::__toarray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\arrayobject::__unserialize' => 
  array (
    0 => 'void',
    'data' => 'array<array-key, mixed>',
  ),
  'swoole\\arrayobject::append' => 
  array (
    0 => 'Swoole\\ArrayObject',
    '...values=' => 'mixed',
  ),
  'swoole\\arrayobject::arsort' => 
  array (
    0 => 'self',
    'sort_flags=' => 'int',
  ),
  'swoole\\arrayobject::asort' => 
  array (
    0 => 'self',
    'sort_flags=' => 'int',
  ),
  'swoole\\arrayobject::chunk' => 
  array (
    0 => 'static',
    'size' => 'int',
    'preserve_keys=' => 'bool',
  ),
  'swoole\\arrayobject::clear' => 
  array (
    0 => 'self',
  ),
  'swoole\\arrayobject::column' => 
  array (
    0 => 'static',
    'column_key' => 'mixed',
    'index=' => 'mixed',
  ),
  'swoole\\arrayobject::contains' => 
  array (
    0 => 'bool',
    'value' => 'mixed',
    'strict=' => 'bool',
  ),
  'swoole\\arrayobject::count' => 
  array (
    0 => 'int',
  ),
  'swoole\\arrayobject::current' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\arrayobject::delete' => 
  array (
    0 => 'self',
    'key' => 'mixed',
  ),
  'swoole\\arrayobject::detectarraytype' => 
  array (
    0 => 'static',
    'value' => 'array<array-key, mixed>',
  ),
  'swoole\\arrayobject::detectstringtype' => 
  array (
    0 => 'Swoole\\StringObject',
    'value' => 'string',
  ),
  'swoole\\arrayobject::detecttype' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\arrayobject::each' => 
  array (
    0 => 'self',
    'fn' => 'callable',
  ),
  'swoole\\arrayobject::exists' => 
  array (
    0 => 'bool',
    'key' => 'mixed',
  ),
  'swoole\\arrayobject::filter' => 
  array (
    0 => 'static',
    'fn' => 'callable',
    'flag=' => 'int',
  ),
  'swoole\\arrayobject::first' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\arrayobject::firstkey' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\arrayobject::flip' => 
  array (
    0 => 'static',
  ),
  'swoole\\arrayobject::from' => 
  array (
    0 => 'static',
    'array=' => 'array<array-key, mixed>',
  ),
  'swoole\\arrayobject::get' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\arrayobject::getor' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'default=' => 'mixed',
  ),
  'swoole\\arrayobject::indexof' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
    'strict=' => 'bool',
  ),
  'swoole\\arrayobject::insert' => 
  array (
    0 => 'self',
    'offset' => 'int',
    'value' => 'mixed',
  ),
  'swoole\\arrayobject::isempty' => 
  array (
    0 => 'bool',
  ),
  'swoole\\arrayobject::join' => 
  array (
    0 => 'Swoole\\StringObject',
    'glue=' => 'string',
  ),
  'swoole\\arrayobject::key' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\arrayobject::keys' => 
  array (
    0 => 'static',
    '...args=' => 'mixed',
  ),
  'swoole\\arrayobject::krsort' => 
  array (
    0 => 'self',
    'sort_flags=' => 'int',
  ),
  'swoole\\arrayobject::ksort' => 
  array (
    0 => 'self',
    'sort_flags=' => 'int',
  ),
  'swoole\\arrayobject::last' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\arrayobject::lastindexof' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
    'strict=' => 'bool',
  ),
  'swoole\\arrayobject::lastkey' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\arrayobject::map' => 
  array (
    0 => 'static',
    'fn' => 'callable',
    '...args=' => 'mixed',
  ),
  'swoole\\arrayobject::natcasesort' => 
  array (
    0 => 'self',
  ),
  'swoole\\arrayobject::natsort' => 
  array (
    0 => 'self',
  ),
  'swoole\\arrayobject::next' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\arrayobject::offsetexists' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\arrayobject::offsetget' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\arrayobject::offsetset' => 
  array (
    0 => 'void',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\arrayobject::offsetunset' => 
  array (
    0 => 'void',
    'key' => 'mixed',
  ),
  'swoole\\arrayobject::pop' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\arrayobject::popback' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\arrayobject::popfront' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\arrayobject::product' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\arrayobject::push' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\arrayobject::pushback' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\arrayobject::pushfront' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\arrayobject::randomget' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\arrayobject::reduce' => 
  array (
    0 => 'mixed',
    'fn' => 'callable',
    'initial=' => 'mixed',
  ),
  'swoole\\arrayobject::remove' => 
  array (
    0 => 'self',
    'value' => 'mixed',
    'strict=' => 'bool',
    'loop=' => 'bool',
  ),
  'swoole\\arrayobject::reverse' => 
  array (
    0 => 'static',
    'preserve_keys=' => 'bool',
  ),
  'swoole\\arrayobject::rewind' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\arrayobject::rsort' => 
  array (
    0 => 'self',
    'sort_flags=' => 'int',
  ),
  'swoole\\arrayobject::search' => 
  array (
    0 => 'mixed',
    'needle' => 'mixed',
    'strict=' => 'bool',
  ),
  'swoole\\arrayobject::serialize' => 
  array (
    0 => 'string',
  ),
  'swoole\\arrayobject::set' => 
  array (
    0 => 'self',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\arrayobject::shuffle' => 
  array (
    0 => 'self',
  ),
  'swoole\\arrayobject::slice' => 
  array (
    0 => 'static',
    'offset' => 'int',
    'length=' => 'int|null',
    'preserve_keys=' => 'bool',
  ),
  'swoole\\arrayobject::sort' => 
  array (
    0 => 'self',
    'sort_flags=' => 'int',
  ),
  'swoole\\arrayobject::sum' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\arrayobject::toarray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\arrayobject::uasort' => 
  array (
    0 => 'self',
    'value_compare_func' => 'callable',
  ),
  'swoole\\arrayobject::uksort' => 
  array (
    0 => 'self',
    'value_compare_func' => 'callable',
  ),
  'swoole\\arrayobject::unique' => 
  array (
    0 => 'static',
    'sort_flags=' => 'int',
  ),
  'swoole\\arrayobject::unserialize' => 
  array (
    0 => 'self',
    'string' => 'Stringable|Swoole\\StringObject|string',
  ),
  'swoole\\arrayobject::usort' => 
  array (
    0 => 'self',
    'value_compare_func' => 'callable',
  ),
  'swoole\\arrayobject::valid' => 
  array (
    0 => 'bool',
  ),
  'swoole\\arrayobject::values' => 
  array (
    0 => 'static',
  ),
  'swoole\\async::dnslookup' => 
  array (
    0 => 'void',
    'hostname' => 'string',
    'callback' => 'callable',
  ),
  'swoole\\async::read' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'callback' => 'callable',
    'chunk_size=' => 'int',
    'offset=' => 'int',
  ),
  'swoole\\async::readfile' => 
  array (
    0 => 'void',
    'filename' => 'string',
    'callback' => 'callable',
  ),
  'swoole\\async::set' => 
  array (
    0 => 'void',
    'settings' => 'array<array-key, mixed>',
  ),
  'swoole\\async::write' => 
  array (
    0 => 'void',
    'filename' => 'string',
    'content' => 'string',
    'offset=' => 'int',
    'callback=' => 'callable',
  ),
  'swoole\\async::writefile' => 
  array (
    0 => 'void',
    'filename' => 'string',
    'content' => 'string',
    'callback=' => 'callable',
    'flags=' => 'string',
  ),
  'swoole\\atomic::__construct' => 
  array (
    0 => 'void',
    'value=' => 'int',
  ),
  'swoole\\atomic::add' => 
  array (
    0 => 'int',
    'add_value=' => 'int',
  ),
  'swoole\\atomic::cmpset' => 
  array (
    0 => 'bool',
    'cmp_value' => 'int',
    'new_value' => 'int',
  ),
  'swoole\\atomic::get' => 
  array (
    0 => 'int',
  ),
  'swoole\\atomic::set' => 
  array (
    0 => 'void',
    'value' => 'int',
  ),
  'swoole\\atomic::sub' => 
  array (
    0 => 'int',
    'sub_value=' => 'int',
  ),
  'swoole\\atomic::wait' => 
  array (
    0 => 'bool',
    'timeout=' => 'float',
  ),
  'swoole\\atomic::wakeup' => 
  array (
    0 => 'bool',
    'count=' => 'int',
  ),
  'swoole\\atomic\\long::__construct' => 
  array (
    0 => 'void',
    'value=' => 'int',
  ),
  'swoole\\atomic\\long::add' => 
  array (
    0 => 'int',
    'add_value=' => 'int',
  ),
  'swoole\\atomic\\long::cmpset' => 
  array (
    0 => 'bool',
    'cmp_value' => 'int',
    'new_value' => 'int',
  ),
  'swoole\\atomic\\long::get' => 
  array (
    0 => 'int',
  ),
  'swoole\\atomic\\long::set' => 
  array (
    0 => 'void',
    'value' => 'int',
  ),
  'swoole\\atomic\\long::sub' => 
  array (
    0 => 'int',
    'sub_value=' => 'int',
  ),
  'swoole\\channel::__destruct' => 
  array (
    0 => 'void',
  ),
  'swoole\\channel::pop' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\channel::push' => 
  array (
    0 => 'bool',
    'data' => 'string',
  ),
  'swoole\\channel::stats' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\client::__construct' => 
  array (
    0 => 'void',
    'type' => 'int',
    'async=' => 'bool',
    'id=' => 'string',
  ),
  'swoole\\client::__destruct' => 
  array (
    0 => 'void',
  ),
  'swoole\\client::close' => 
  array (
    0 => 'bool',
    'force=' => 'bool',
  ),
  'swoole\\client::connect' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port=' => 'int',
    'timeout=' => 'float',
    'sock_flag=' => 'int',
  ),
  'swoole\\client::enablessl' => 
  array (
    0 => 'bool',
  ),
  'swoole\\client::getpeercert' => 
  array (
    0 => 'bool|string',
  ),
  'swoole\\client::getpeername' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\client::getsockname' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\client::isconnected' => 
  array (
    0 => 'bool',
  ),
  'swoole\\client::recv' => 
  array (
    0 => 'false|string',
    'size=' => 'int',
    'flag=' => 'int',
  ),
  'swoole\\client::send' => 
  array (
    0 => 'int',
    'data' => 'string',
    'flag=' => 'int',
  ),
  'swoole\\client::sendfile' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'offset=' => 'int',
    'length=' => 'int',
  ),
  'swoole\\client::sendto' => 
  array (
    0 => 'bool',
    'ip' => 'string',
    'port' => 'int',
    'data' => 'string',
  ),
  'swoole\\client::set' => 
  array (
    0 => 'bool',
    'settings' => 'array<array-key, mixed>',
  ),
  'swoole\\client::shutdown' => 
  array (
    0 => 'bool',
    'how' => 'int',
  ),
  'swoole\\client::verifypeercert' => 
  array (
    0 => 'bool',
  ),
  'swoole\\client\\exception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'swoole\\client\\exception::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\client\\exception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\client\\exception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\client\\exception::getfile' => 
  array (
    0 => 'string',
  ),
  'swoole\\client\\exception::getline' => 
  array (
    0 => 'int',
  ),
  'swoole\\client\\exception::getmessage' => 
  array (
    0 => 'string',
  ),
  'swoole\\client\\exception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'swoole\\client\\exception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\client\\exception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'swoole\\connection\\iterator::__construct' => 
  array (
    0 => 'void',
  ),
  'swoole\\connection\\iterator::__destruct' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\connection\\iterator::count' => 
  array (
    0 => 'int',
  ),
  'swoole\\connection\\iterator::current' => 
  array (
    0 => 'Connection',
  ),
  'swoole\\connection\\iterator::key' => 
  array (
    0 => 'int',
  ),
  'swoole\\connection\\iterator::next' => 
  array (
    0 => 'void',
  ),
  'swoole\\connection\\iterator::offsetexists' => 
  array (
    0 => 'bool',
    'fd' => 'int',
  ),
  'swoole\\connection\\iterator::offsetget' => 
  array (
    0 => 'Connection',
    'fd' => 'string',
  ),
  'swoole\\connection\\iterator::offsetset' => 
  array (
    0 => 'void',
    'fd' => 'int',
    'value' => 'mixed',
  ),
  'swoole\\connection\\iterator::offsetunset' => 
  array (
    0 => 'void',
    'fd' => 'int',
  ),
  'swoole\\connection\\iterator::rewind' => 
  array (
    0 => 'void',
  ),
  'swoole\\connection\\iterator::valid' => 
  array (
    0 => 'bool',
  ),
  'swoole\\connectionpool::__construct' => 
  array (
    0 => 'void',
    'constructor' => 'callable',
    'size=' => 'int',
    'proxy=' => 'null|string',
  ),
  'swoole\\connectionpool::close' => 
  array (
    0 => 'void',
  ),
  'swoole\\connectionpool::fill' => 
  array (
    0 => 'void',
  ),
  'swoole\\connectionpool::get' => 
  array (
    0 => 'mixed',
    'timeout=' => 'float',
  ),
  'swoole\\connectionpool::make' => 
  array (
    0 => 'void',
  ),
  'swoole\\connectionpool::put' => 
  array (
    0 => 'void',
    'connection' => 'mixed',
  ),
  'swoole\\coroutine::call_user_func' => 
  array (
    0 => 'mixed',
    'callback' => 'callable',
    'parameter=' => 'mixed',
    '...args=' => 'mixed',
  ),
  'swoole\\coroutine::call_user_func_array' => 
  array (
    0 => 'mixed',
    'callback' => 'callable',
    'param_array' => 'array<array-key, mixed>',
  ),
  'swoole\\coroutine::cancel' => 
  array (
    0 => 'bool',
    'cid' => 'int',
  ),
  'swoole\\coroutine::cli_wait' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine::create' => 
  array (
    0 => 'false|int',
    'func' => 'callable',
    '...param=' => 'mixed',
  ),
  'swoole\\coroutine::defer' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'swoole\\coroutine::disablescheduler' => 
  array (
    0 => 'bool',
  ),
  'swoole\\coroutine::dnslookup' => 
  array (
    0 => 'false|string',
    'domain_name' => 'string',
    'timeout=' => 'float',
    'type=' => 'int',
  ),
  'swoole\\coroutine::enablescheduler' => 
  array (
    0 => 'bool',
  ),
  'swoole\\coroutine::exec' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'command' => 'string',
    'get_error_stream=' => 'bool',
  ),
  'swoole\\coroutine::exists' => 
  array (
    0 => 'bool',
    'cid' => 'int',
  ),
  'swoole\\coroutine::fgets' => 
  array (
    0 => 'false|string',
    'handle' => 'mixed',
  ),
  'swoole\\coroutine::fread' => 
  array (
    0 => 'false|string',
    'handle' => 'mixed',
    'length=' => 'int',
  ),
  'swoole\\coroutine::fwrite' => 
  array (
    0 => 'false|int',
    'handle' => 'mixed',
    'data' => 'string',
    'length=' => 'int',
  ),
  'swoole\\coroutine::getaddrinfo' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'domain' => 'string',
    'family=' => 'int',
    'socktype=' => 'int',
    'protocol=' => 'int',
    'service=' => 'null|string',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine::getbacktrace' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'cid=' => 'int',
    'options=' => 'int',
    'limit=' => 'int',
  ),
  'swoole\\coroutine::getcid' => 
  array (
    0 => 'int',
  ),
  'swoole\\coroutine::getcontext' => 
  array (
    0 => 'Swoole\\Coroutine\\Context|null',
    'cid=' => 'int',
  ),
  'swoole\\coroutine::getelapsed' => 
  array (
    0 => 'int',
    'cid=' => 'int',
  ),
  'swoole\\coroutine::gethostbyname' => 
  array (
    0 => 'false|string',
    'domain_name' => 'string',
    'type=' => 'int',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine::getoptions' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'swoole\\coroutine::getpcid' => 
  array (
    0 => 'false|int',
    'cid=' => 'int',
  ),
  'swoole\\coroutine::getstackusage' => 
  array (
    0 => 'false|int',
    'cid=' => 'int',
  ),
  'swoole\\coroutine::getuid' => 
  array (
    0 => 'int',
  ),
  'swoole\\coroutine::iscanceled' => 
  array (
    0 => 'bool',
  ),
  'swoole\\coroutine::join' => 
  array (
    0 => 'bool',
    'cid_array' => 'array<array-key, mixed>',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine::list' => 
  array (
    0 => 'Swoole\\Coroutine\\Iterator',
  ),
  'swoole\\coroutine::listcoroutines' => 
  array (
    0 => 'Swoole\\Coroutine\\Iterator',
  ),
  'swoole\\coroutine::printbacktrace' => 
  array (
    0 => 'void',
    'cid=' => 'int',
    'options=' => 'int',
    'limit=' => 'int',
  ),
  'swoole\\coroutine::readfile' => 
  array (
    0 => 'false|string',
    'filename' => 'string',
    'flag=' => 'int',
  ),
  'swoole\\coroutine::resume' => 
  array (
    0 => 'bool',
    'cid' => 'int',
  ),
  'swoole\\coroutine::set' => 
  array (
    0 => 'void',
    'options' => 'array<array-key, mixed>',
  ),
  'swoole\\coroutine::sleep' => 
  array (
    0 => 'bool',
    'seconds' => 'float',
  ),
  'swoole\\coroutine::stats' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\coroutine::statvfs' => 
  array (
    0 => 'array<array-key, mixed>',
    'path' => 'string',
  ),
  'swoole\\coroutine::suspend' => 
  array (
    0 => 'bool',
  ),
  'swoole\\coroutine::wait' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine::waitevent' => 
  array (
    0 => 'false|int',
    'socket' => 'mixed',
    'events=' => 'int',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine::waitpid' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'pid' => 'int',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine::waitsignal' => 
  array (
    0 => 'bool',
    'signo' => 'int',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine::writefile' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
    'fileContent' => 'string',
    'flags=' => 'int',
  ),
  'swoole\\coroutine::yield' => 
  array (
    0 => 'bool',
  ),
  'swoole\\coroutine\\barrier::__destruct' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\barrier::make' => 
  array (
    0 => 'self',
  ),
  'swoole\\coroutine\\barrier::wait' => 
  array (
    0 => 'mixed',
    '&barrier' => 'Swoole\\Coroutine\\Barrier',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\batch' => 
  array (
    0 => 'array<array-key, mixed>',
    'tasks' => 'array<array-key, mixed>',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\channel::__construct' => 
  array (
    0 => 'void',
    'size=' => 'int',
  ),
  'swoole\\coroutine\\channel::close' => 
  array (
    0 => 'bool',
  ),
  'swoole\\coroutine\\channel::isempty' => 
  array (
    0 => 'bool',
  ),
  'swoole\\coroutine\\channel::isfull' => 
  array (
    0 => 'bool',
  ),
  'swoole\\coroutine\\channel::length' => 
  array (
    0 => 'int',
  ),
  'swoole\\coroutine\\channel::pop' => 
  array (
    0 => 'mixed',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\channel::push' => 
  array (
    0 => 'bool',
    'data' => 'mixed',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\channel::stats' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\coroutine\\client::__construct' => 
  array (
    0 => 'void',
    'type' => 'int',
  ),
  'swoole\\coroutine\\client::__destruct' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\client::close' => 
  array (
    0 => 'bool',
  ),
  'swoole\\coroutine\\client::connect' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port=' => 'int',
    'timeout=' => 'float',
    'sock_flag=' => 'int',
  ),
  'swoole\\coroutine\\client::enablessl' => 
  array (
    0 => 'bool',
  ),
  'swoole\\coroutine\\client::exportsocket' => 
  array (
    0 => 'Swoole\\Coroutine\\Socket|false',
  ),
  'swoole\\coroutine\\client::getpeercert' => 
  array (
    0 => 'false|string',
  ),
  'swoole\\coroutine\\client::getpeername' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'swoole\\coroutine\\client::getsockname' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'swoole\\coroutine\\client::isconnected' => 
  array (
    0 => 'bool',
  ),
  'swoole\\coroutine\\client::peek' => 
  array (
    0 => 'false|string',
    'length=' => 'int',
  ),
  'swoole\\coroutine\\client::recv' => 
  array (
    0 => 'false|string',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\client::recvfrom' => 
  array (
    0 => 'false|string',
    'length' => 'int',
    '&address' => 'mixed',
    '&port=' => 'mixed',
  ),
  'swoole\\coroutine\\client::send' => 
  array (
    0 => 'false|int',
    'data' => 'string',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\client::sendfile' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'offset=' => 'int',
    'length=' => 'int',
  ),
  'swoole\\coroutine\\client::sendto' => 
  array (
    0 => 'bool',
    'address' => 'string',
    'port' => 'int',
    'data' => 'string',
  ),
  'swoole\\coroutine\\client::set' => 
  array (
    0 => 'bool',
    'settings' => 'array<array-key, mixed>',
  ),
  'swoole\\coroutine\\client::verifypeercert' => 
  array (
    0 => 'bool',
    'allow_self_signed=' => 'bool',
  ),
  'swoole\\coroutine\\context::__construct' => 
  array (
    0 => 'void',
    'array=' => 'array<array-key, mixed>|object',
    'flags=' => 'int',
    'iteratorClass=' => 'string',
  ),
  'swoole\\coroutine\\context::__debuginfo' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\context::__serialize' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\context::__unserialize' => 
  array (
    0 => 'mixed',
    'data' => 'array<array-key, mixed>',
  ),
  'swoole\\coroutine\\context::append' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\context::asort' => 
  array (
    0 => 'mixed',
    'flags=' => 'int',
  ),
  'swoole\\coroutine\\context::count' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\context::exchangearray' => 
  array (
    0 => 'mixed',
    'array' => 'array<array-key, mixed>|object',
  ),
  'swoole\\coroutine\\context::getarraycopy' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\context::getflags' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\context::getiterator' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\context::getiteratorclass' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\context::ksort' => 
  array (
    0 => 'mixed',
    'flags=' => 'int',
  ),
  'swoole\\coroutine\\context::natcasesort' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\context::natsort' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\context::offsetexists' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\context::offsetget' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\context::offsetset' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\context::offsetunset' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\context::serialize' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\context::setflags' => 
  array (
    0 => 'mixed',
    'flags' => 'int',
  ),
  'swoole\\coroutine\\context::setiteratorclass' => 
  array (
    0 => 'mixed',
    'iteratorClass' => 'string',
  ),
  'swoole\\coroutine\\context::uasort' => 
  array (
    0 => 'mixed',
    'callback' => 'callable',
  ),
  'swoole\\coroutine\\context::uksort' => 
  array (
    0 => 'mixed',
    'callback' => 'callable',
  ),
  'swoole\\coroutine\\context::unserialize' => 
  array (
    0 => 'mixed',
    'data' => 'string',
  ),
  'swoole\\coroutine\\deadlock_check' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\defer' => 
  array (
    0 => 'mixed',
    'fn' => 'callable',
  ),
  'swoole\\coroutine\\fastcgi\\client::__construct' => 
  array (
    0 => 'void',
    'host' => 'string',
    'port=' => 'int',
    'ssl=' => 'bool',
  ),
  'swoole\\coroutine\\fastcgi\\client::call' => 
  array (
    0 => 'string',
    'url' => 'string',
    'path' => 'string',
    'data=' => 'mixed',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\fastcgi\\client::execute' => 
  array (
    0 => 'Swoole\\FastCGI\\Response',
    'request' => 'Swoole\\FastCGI\\Request',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\fastcgi\\client::ioexception' => 
  array (
    0 => 'void',
    'errno=' => 'int|null',
  ),
  'swoole\\coroutine\\fastcgi\\client::parseurl' => 
  array (
    0 => 'array<array-key, mixed>',
    'url' => 'string',
  ),
  'swoole\\coroutine\\fastcgi\\client\\exception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'swoole\\coroutine\\fastcgi\\client\\exception::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\coroutine\\fastcgi\\client\\exception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\fastcgi\\client\\exception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\fastcgi\\client\\exception::getfile' => 
  array (
    0 => 'string',
  ),
  'swoole\\coroutine\\fastcgi\\client\\exception::getline' => 
  array (
    0 => 'int',
  ),
  'swoole\\coroutine\\fastcgi\\client\\exception::getmessage' => 
  array (
    0 => 'string',
  ),
  'swoole\\coroutine\\fastcgi\\client\\exception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'swoole\\coroutine\\fastcgi\\client\\exception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\coroutine\\fastcgi\\client\\exception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'swoole\\coroutine\\fastcgi\\proxy::__construct' => 
  array (
    0 => 'void',
    'url' => 'string',
    'documentRoot=' => 'string',
  ),
  'swoole\\coroutine\\fastcgi\\proxy::getparam' => 
  array (
    0 => 'null|string',
    'name' => 'string',
  ),
  'swoole\\coroutine\\fastcgi\\proxy::getparams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\coroutine\\fastcgi\\proxy::pass' => 
  array (
    0 => 'void',
    'userRequest' => 'Swoole\\FastCGI\\HttpRequest|Swoole\\Http\\Request',
    'userResponse' => 'Swoole\\Http\\Response',
  ),
  'swoole\\coroutine\\fastcgi\\proxy::staticfilefiltrate' => 
  array (
    0 => 'bool',
    'request' => 'Swoole\\FastCGI\\HttpRequest',
    'userResponse' => 'Swoole\\Http\\Response',
  ),
  'swoole\\coroutine\\fastcgi\\proxy::translaterequest' => 
  array (
    0 => 'Swoole\\FastCGI\\HttpRequest',
    'userRequest' => 'Swoole\\Http\\Request',
  ),
  'swoole\\coroutine\\fastcgi\\proxy::translateresponse' => 
  array (
    0 => 'void',
    'response' => 'Swoole\\FastCGI\\HttpResponse',
    'userResponse' => 'Swoole\\Http\\Response',
  ),
  'swoole\\coroutine\\fastcgi\\proxy::withaddedparams' => 
  array (
    0 => 'self',
    'params' => 'array<array-key, mixed>',
  ),
  'swoole\\coroutine\\fastcgi\\proxy::withhttps' => 
  array (
    0 => 'self',
    'https' => 'bool',
  ),
  'swoole\\coroutine\\fastcgi\\proxy::withindex' => 
  array (
    0 => 'self',
    'index' => 'string',
  ),
  'swoole\\coroutine\\fastcgi\\proxy::withoutparam' => 
  array (
    0 => 'self',
    'name' => 'string',
  ),
  'swoole\\coroutine\\fastcgi\\proxy::withparam' => 
  array (
    0 => 'self',
    'name' => 'string',
    'value' => 'string',
  ),
  'swoole\\coroutine\\fastcgi\\proxy::withparams' => 
  array (
    0 => 'self',
    'params' => 'array<array-key, mixed>',
  ),
  'swoole\\coroutine\\fastcgi\\proxy::withstaticfilefilter' => 
  array (
    0 => 'self',
    'filter' => 'callable|null',
  ),
  'swoole\\coroutine\\fastcgi\\proxy::withtimeout' => 
  array (
    0 => 'self',
    'timeout' => 'float',
  ),
  'swoole\\coroutine\\go' => 
  array (
    0 => 'mixed',
    'fn' => 'callable',
    '...args=' => 'mixed',
  ),
  'swoole\\coroutine\\http2\\client::__construct' => 
  array (
    0 => 'void',
    'host' => 'string',
    'port=' => 'int',
    'open_ssl=' => 'bool',
  ),
  'swoole\\coroutine\\http2\\client::__destruct' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\http2\\client::close' => 
  array (
    0 => 'bool',
  ),
  'swoole\\coroutine\\http2\\client::connect' => 
  array (
    0 => 'bool',
  ),
  'swoole\\coroutine\\http2\\client::goaway' => 
  array (
    0 => 'bool',
    'error_code=' => 'int',
    'debug_data=' => 'string',
  ),
  'swoole\\coroutine\\http2\\client::isstreamexist' => 
  array (
    0 => 'bool',
    'stream_id' => 'int',
  ),
  'swoole\\coroutine\\http2\\client::ping' => 
  array (
    0 => 'bool',
  ),
  'swoole\\coroutine\\http2\\client::read' => 
  array (
    0 => 'Swoole\\Http2\\Response|false',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\http2\\client::recv' => 
  array (
    0 => 'Swoole\\Http2\\Response|false',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\http2\\client::send' => 
  array (
    0 => 'false|int',
    'request' => 'Swoole\\Http2\\Request',
  ),
  'swoole\\coroutine\\http2\\client::set' => 
  array (
    0 => 'bool',
    'settings' => 'array<array-key, mixed>',
  ),
  'swoole\\coroutine\\http2\\client::stats' => 
  array (
    0 => 'array<array-key, mixed>|int',
    'key=' => 'string',
  ),
  'swoole\\coroutine\\http2\\client::write' => 
  array (
    0 => 'bool',
    'stream_id' => 'int',
    'data' => 'mixed',
    'end_stream=' => 'bool',
  ),
  'swoole\\coroutine\\http2\\client\\exception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'swoole\\coroutine\\http2\\client\\exception::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\coroutine\\http2\\client\\exception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\http2\\client\\exception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\http2\\client\\exception::getfile' => 
  array (
    0 => 'string',
  ),
  'swoole\\coroutine\\http2\\client\\exception::getline' => 
  array (
    0 => 'int',
  ),
  'swoole\\coroutine\\http2\\client\\exception::getmessage' => 
  array (
    0 => 'string',
  ),
  'swoole\\coroutine\\http2\\client\\exception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'swoole\\coroutine\\http2\\client\\exception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\coroutine\\http2\\client\\exception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'swoole\\coroutine\\http\\client::__construct' => 
  array (
    0 => 'void',
    'host' => 'string',
    'port=' => 'int',
    'ssl=' => 'bool',
  ),
  'swoole\\coroutine\\http\\client::__destruct' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\http\\client::adddata' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'name' => 'string',
    'type=' => 'null|string',
    'filename=' => 'null|string',
  ),
  'swoole\\coroutine\\http\\client::addfile' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'name' => 'string',
    'type=' => 'null|string',
    'filename=' => 'null|string',
    'offset=' => 'int',
    'length=' => 'int',
  ),
  'swoole\\coroutine\\http\\client::close' => 
  array (
    0 => 'bool',
  ),
  'swoole\\coroutine\\http\\client::download' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'file' => 'string',
    'offset=' => 'int',
  ),
  'swoole\\coroutine\\http\\client::execute' => 
  array (
    0 => 'bool',
    'path' => 'string',
  ),
  'swoole\\coroutine\\http\\client::get' => 
  array (
    0 => 'bool',
    'path' => 'string',
  ),
  'swoole\\coroutine\\http\\client::getbody' => 
  array (
    0 => 'false|string',
  ),
  'swoole\\coroutine\\http\\client::getcookies' => 
  array (
    0 => 'array<array-key, mixed>|false|null',
  ),
  'swoole\\coroutine\\http\\client::getdefer' => 
  array (
    0 => 'bool',
  ),
  'swoole\\coroutine\\http\\client::getheaderout' => 
  array (
    0 => 'false|string',
  ),
  'swoole\\coroutine\\http\\client::getheaders' => 
  array (
    0 => 'array<array-key, mixed>|false|null',
  ),
  'swoole\\coroutine\\http\\client::getpeercert' => 
  array (
    0 => 'false|string',
  ),
  'swoole\\coroutine\\http\\client::getpeername' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'swoole\\coroutine\\http\\client::getsockname' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'swoole\\coroutine\\http\\client::getstatuscode' => 
  array (
    0 => 'false|int',
  ),
  'swoole\\coroutine\\http\\client::isconnected' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\http\\client::post' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'data' => 'mixed',
  ),
  'swoole\\coroutine\\http\\client::push' => 
  array (
    0 => 'bool',
    'data' => 'mixed',
    'opcode=' => 'int',
    'flags=' => 'int',
  ),
  'swoole\\coroutine\\http\\client::recv' => 
  array (
    0 => 'Swoole\\WebSocket\\Frame|bool',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\http\\client::set' => 
  array (
    0 => 'bool',
    'settings' => 'array<array-key, mixed>',
  ),
  'swoole\\coroutine\\http\\client::setbasicauth' => 
  array (
    0 => 'void',
    'username' => 'string',
    'password' => 'string',
  ),
  'swoole\\coroutine\\http\\client::setcookies' => 
  array (
    0 => 'bool',
    'cookies' => 'array<array-key, mixed>',
  ),
  'swoole\\coroutine\\http\\client::setdata' => 
  array (
    0 => 'bool',
    'data' => 'array<array-key, mixed>|string',
  ),
  'swoole\\coroutine\\http\\client::setdefer' => 
  array (
    0 => 'bool',
    'defer=' => 'bool',
  ),
  'swoole\\coroutine\\http\\client::setheaders' => 
  array (
    0 => 'bool',
    'headers' => 'array<array-key, mixed>',
  ),
  'swoole\\coroutine\\http\\client::setmethod' => 
  array (
    0 => 'bool',
    'method' => 'string',
  ),
  'swoole\\coroutine\\http\\client::upgrade' => 
  array (
    0 => 'bool',
    'path' => 'string',
  ),
  'swoole\\coroutine\\http\\client\\exception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'swoole\\coroutine\\http\\client\\exception::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\coroutine\\http\\client\\exception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\http\\client\\exception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\http\\client\\exception::getfile' => 
  array (
    0 => 'string',
  ),
  'swoole\\coroutine\\http\\client\\exception::getline' => 
  array (
    0 => 'int',
  ),
  'swoole\\coroutine\\http\\client\\exception::getmessage' => 
  array (
    0 => 'string',
  ),
  'swoole\\coroutine\\http\\client\\exception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'swoole\\coroutine\\http\\client\\exception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\coroutine\\http\\client\\exception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'swoole\\coroutine\\http\\clientproxy::__construct' => 
  array (
    0 => 'void',
    'body' => 'string',
    'statusCode' => 'int',
    'headers' => 'array<array-key, mixed>|null',
    'cookies' => 'array<array-key, mixed>|null',
  ),
  'swoole\\coroutine\\http\\clientproxy::getbody' => 
  array (
    0 => 'string',
  ),
  'swoole\\coroutine\\http\\clientproxy::getcookies' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\coroutine\\http\\clientproxy::getheaders' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\coroutine\\http\\clientproxy::getstatuscode' => 
  array (
    0 => 'int',
  ),
  'swoole\\coroutine\\http\\get' => 
  array (
    0 => 'Swoole\\Coroutine\\Http\\ClientProxy',
    'url' => 'string',
    'options=' => 'array<array-key, mixed>|null',
    'headers=' => 'array<array-key, mixed>|null',
    'cookies=' => 'array<array-key, mixed>|null',
  ),
  'swoole\\coroutine\\http\\post' => 
  array (
    0 => 'Swoole\\Coroutine\\Http\\ClientProxy',
    'url' => 'string',
    'data' => 'mixed',
    'options=' => 'array<array-key, mixed>|null',
    'headers=' => 'array<array-key, mixed>|null',
    'cookies=' => 'array<array-key, mixed>|null',
  ),
  'swoole\\coroutine\\http\\request' => 
  array (
    0 => 'Swoole\\Coroutine\\Http\\ClientProxy',
    'url' => 'string',
    'method' => 'string',
    'data=' => 'mixed',
    'options=' => 'array<array-key, mixed>|null',
    'headers=' => 'array<array-key, mixed>|null',
    'cookies=' => 'array<array-key, mixed>|null',
  ),
  'swoole\\coroutine\\http\\request_with_curl' => 
  array (
    0 => 'Swoole\\Coroutine\\Http\\ClientProxy',
    'url' => 'string',
    'method' => 'string',
    'data=' => 'mixed',
    'options=' => 'array<array-key, mixed>|null',
    'headers=' => 'array<array-key, mixed>|null',
    'cookies=' => 'array<array-key, mixed>|null',
  ),
  'swoole\\coroutine\\http\\request_with_http_client' => 
  array (
    0 => 'Swoole\\Coroutine\\Http\\ClientProxy',
    'url' => 'string',
    'method' => 'string',
    'data=' => 'mixed',
    'options=' => 'array<array-key, mixed>|null',
    'headers=' => 'array<array-key, mixed>|null',
    'cookies=' => 'array<array-key, mixed>|null',
  ),
  'swoole\\coroutine\\http\\request_with_stream' => 
  array (
    0 => 'Swoole\\Coroutine\\Http\\ClientProxy',
    'url' => 'string',
    'method' => 'string',
    'data=' => 'mixed',
    'options=' => 'array<array-key, mixed>|null',
    'headers=' => 'array<array-key, mixed>|null',
    'cookies=' => 'array<array-key, mixed>|null',
  ),
  'swoole\\coroutine\\http\\server::__construct' => 
  array (
    0 => 'void',
    'host' => 'string',
    'port=' => 'int',
    'ssl=' => 'bool',
    'reuse_port=' => 'bool',
  ),
  'swoole\\coroutine\\http\\server::handle' => 
  array (
    0 => 'void',
    'pattern' => 'string',
    'callback' => 'callable',
  ),
  'swoole\\coroutine\\http\\server::onaccept' => 
  array (
    0 => 'void',
    'conn' => 'Swoole\\Coroutine\\Socket',
  ),
  'swoole\\coroutine\\http\\server::set' => 
  array (
    0 => 'bool',
    'settings' => 'array<array-key, mixed>',
  ),
  'swoole\\coroutine\\http\\server::shutdown' => 
  array (
    0 => 'void',
  ),
  'swoole\\coroutine\\http\\server::start' => 
  array (
    0 => 'bool',
  ),
  'swoole\\coroutine\\iterator::__construct' => 
  array (
    0 => 'void',
    'array=' => 'array<array-key, mixed>|object',
    'flags=' => 'int',
  ),
  'swoole\\coroutine\\iterator::__debuginfo' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\iterator::__serialize' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\iterator::__unserialize' => 
  array (
    0 => 'mixed',
    'data' => 'array<array-key, mixed>',
  ),
  'swoole\\coroutine\\iterator::append' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\iterator::asort' => 
  array (
    0 => 'mixed',
    'flags=' => 'int',
  ),
  'swoole\\coroutine\\iterator::count' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\iterator::current' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\iterator::getarraycopy' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\iterator::getflags' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\iterator::key' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\iterator::ksort' => 
  array (
    0 => 'mixed',
    'flags=' => 'int',
  ),
  'swoole\\coroutine\\iterator::natcasesort' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\iterator::natsort' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\iterator::next' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\iterator::offsetexists' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\iterator::offsetget' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\iterator::offsetset' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\iterator::offsetunset' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\iterator::rewind' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\iterator::seek' => 
  array (
    0 => 'mixed',
    'offset' => 'int',
  ),
  'swoole\\coroutine\\iterator::serialize' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\iterator::setflags' => 
  array (
    0 => 'mixed',
    'flags' => 'int',
  ),
  'swoole\\coroutine\\iterator::uasort' => 
  array (
    0 => 'mixed',
    'callback' => 'callable',
  ),
  'swoole\\coroutine\\iterator::uksort' => 
  array (
    0 => 'mixed',
    'callback' => 'callable',
  ),
  'swoole\\coroutine\\iterator::unserialize' => 
  array (
    0 => 'mixed',
    'data' => 'string',
  ),
  'swoole\\coroutine\\iterator::valid' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\map' => 
  array (
    0 => 'array<array-key, mixed>',
    'list' => 'array<array-key, mixed>',
    'fn' => 'callable',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\mysql::__construct' => 
  array (
    0 => 'void',
  ),
  'swoole\\coroutine\\mysql::__destruct' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\mysql::begin' => 
  array (
    0 => 'mixed',
    'timeout=' => 'mixed',
  ),
  'swoole\\coroutine\\mysql::close' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\mysql::commit' => 
  array (
    0 => 'mixed',
    'timeout=' => 'mixed',
  ),
  'swoole\\coroutine\\mysql::connect' => 
  array (
    0 => 'ReturnType',
    'server_config=' => 'array<array-key, mixed>',
  ),
  'swoole\\coroutine\\mysql::escape' => 
  array (
    0 => 'mixed',
    'string' => 'mixed',
    'flags=' => 'mixed',
  ),
  'swoole\\coroutine\\mysql::fetch' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\mysql::fetchall' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\mysql::getdefer' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\mysql::nextresult' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\mysql::prepare' => 
  array (
    0 => 'mixed',
    'query' => 'mixed',
    'timeout=' => 'mixed',
  ),
  'swoole\\coroutine\\mysql::query' => 
  array (
    0 => 'ReturnType',
    'sql' => 'mixed',
    'timeout=' => 'mixed',
  ),
  'swoole\\coroutine\\mysql::recv' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\coroutine\\mysql::rollback' => 
  array (
    0 => 'mixed',
    'timeout=' => 'mixed',
  ),
  'swoole\\coroutine\\mysql::setdefer' => 
  array (
    0 => 'ReturnType',
    'defer=' => 'mixed',
  ),
  'swoole\\coroutine\\mysql\\exception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'swoole\\coroutine\\mysql\\exception::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\coroutine\\mysql\\exception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\mysql\\exception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\mysql\\exception::getfile' => 
  array (
    0 => 'string',
  ),
  'swoole\\coroutine\\mysql\\exception::getline' => 
  array (
    0 => 'int',
  ),
  'swoole\\coroutine\\mysql\\exception::getmessage' => 
  array (
    0 => 'string',
  ),
  'swoole\\coroutine\\mysql\\exception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'swoole\\coroutine\\mysql\\exception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\coroutine\\mysql\\exception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'swoole\\coroutine\\mysql\\statement::close' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\mysql\\statement::execute' => 
  array (
    0 => 'mixed',
    'params=' => 'mixed',
    'timeout=' => 'mixed',
  ),
  'swoole\\coroutine\\mysql\\statement::fetch' => 
  array (
    0 => 'mixed',
    'timeout=' => 'mixed',
  ),
  'swoole\\coroutine\\mysql\\statement::fetchall' => 
  array (
    0 => 'mixed',
    'timeout=' => 'mixed',
  ),
  'swoole\\coroutine\\mysql\\statement::nextresult' => 
  array (
    0 => 'mixed',
    'timeout=' => 'mixed',
  ),
  'swoole\\coroutine\\mysql\\statement::recv' => 
  array (
    0 => 'mixed',
    'timeout=' => 'mixed',
  ),
  'swoole\\coroutine\\parallel' => 
  array (
    0 => 'void',
    'n' => 'int',
    'fn' => 'callable',
  ),
  'swoole\\coroutine\\postgresql::__construct' => 
  array (
    0 => 'void',
  ),
  'swoole\\coroutine\\postgresql::__destruct' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\postgresql::connect' => 
  array (
    0 => 'bool',
    'conninfo' => 'string',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\postgresql::createlob' => 
  array (
    0 => 'false|int',
  ),
  'swoole\\coroutine\\postgresql::escape' => 
  array (
    0 => 'false|string',
    'string' => 'string',
  ),
  'swoole\\coroutine\\postgresql::escapeidentifier' => 
  array (
    0 => 'false|string',
    'string' => 'string',
  ),
  'swoole\\coroutine\\postgresql::escapeliteral' => 
  array (
    0 => 'false|string',
    'string' => 'string',
  ),
  'swoole\\coroutine\\postgresql::metadata' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'table_name' => 'string',
  ),
  'swoole\\coroutine\\postgresql::openlob' => 
  array (
    0 => 'mixed',
    'oid' => 'int',
    'mode=' => 'string',
  ),
  'swoole\\coroutine\\postgresql::prepare' => 
  array (
    0 => 'Swoole\\Coroutine\\PostgreSQLStatement|false',
    'query' => 'string',
  ),
  'swoole\\coroutine\\postgresql::query' => 
  array (
    0 => 'Swoole\\Coroutine\\PostgreSQLStatement|false',
    'query' => 'string',
  ),
  'swoole\\coroutine\\postgresql::unlinklob' => 
  array (
    0 => 'bool',
    'oid' => 'int',
  ),
  'swoole\\coroutine\\postgresqlstatement::affectedrows' => 
  array (
    0 => 'false|int',
  ),
  'swoole\\coroutine\\postgresqlstatement::execute' => 
  array (
    0 => 'bool',
    'params=' => 'array<array-key, mixed>',
  ),
  'swoole\\coroutine\\postgresqlstatement::fetchall' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'result_type=' => 'int',
  ),
  'swoole\\coroutine\\postgresqlstatement::fetcharray' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'row=' => 'int|null',
    'result_type=' => 'int',
  ),
  'swoole\\coroutine\\postgresqlstatement::fetchassoc' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'row=' => 'int|null',
    'result_type=' => 'int',
  ),
  'swoole\\coroutine\\postgresqlstatement::fetchobject' => 
  array (
    0 => 'false|object',
    'row=' => 'int|null',
    'class_name=' => 'null|string',
    'ctor_params=' => 'array<array-key, mixed>',
  ),
  'swoole\\coroutine\\postgresqlstatement::fetchrow' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'row=' => 'int|null',
    'result_type=' => 'int',
  ),
  'swoole\\coroutine\\postgresqlstatement::fieldcount' => 
  array (
    0 => 'false|int',
  ),
  'swoole\\coroutine\\postgresqlstatement::numrows' => 
  array (
    0 => 'false|int',
  ),
  'swoole\\coroutine\\redis::__construct' => 
  array (
    0 => 'void',
    'config=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::__destruct' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\redis::append' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\redis::auth' => 
  array (
    0 => 'mixed',
    'password' => 'mixed',
  ),
  'swoole\\coroutine\\redis::bgrewriteaof' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\redis::bgsave' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\redis::bitcount' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\redis::bitop' => 
  array (
    0 => 'mixed',
    'operation' => 'mixed',
    'ret_key' => 'mixed',
    'key' => 'mixed',
    'other_keys=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::blpop' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'timeout_or_key' => 'mixed',
    'extra_args=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::brpop' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'timeout_or_key' => 'mixed',
    'extra_args=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::brpoplpush' => 
  array (
    0 => 'mixed',
    'src' => 'mixed',
    'dst' => 'mixed',
    'timeout' => 'mixed',
  ),
  'swoole\\coroutine\\redis::bzpopmax' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'timeout_or_key' => 'mixed',
    'extra_args=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::bzpopmin' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'timeout_or_key' => 'mixed',
    'extra_args=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::close' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\redis::connect' => 
  array (
    0 => 'mixed',
    'host' => 'mixed',
    'port=' => 'mixed',
    'serialize=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::dbsize' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\redis::debug' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\redis::decr' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\redis::decrby' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\redis::del' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'other_keys=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::delete' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'other_keys=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::dump' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\redis::eval' => 
  array (
    0 => 'mixed',
    'script' => 'mixed',
    'args=' => 'mixed',
    'num_keys=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::evalsha' => 
  array (
    0 => 'mixed',
    'script_sha' => 'mixed',
    'args=' => 'mixed',
    'num_keys=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::exec' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\redis::exists' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'other_keys=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::expire' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'integer' => 'mixed',
  ),
  'swoole\\coroutine\\redis::expireat' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'timestamp' => 'mixed',
  ),
  'swoole\\coroutine\\redis::flushall' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\redis::flushdb' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\redis::get' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\redis::getauth' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\redis::getbit' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'offset' => 'mixed',
  ),
  'swoole\\coroutine\\redis::getdbnum' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\redis::getdefer' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\redis::getkeys' => 
  array (
    0 => 'mixed',
    'pattern' => 'mixed',
  ),
  'swoole\\coroutine\\redis::getoptions' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\redis::getrange' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'start' => 'mixed',
    'end' => 'mixed',
  ),
  'swoole\\coroutine\\redis::getset' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\redis::hdel' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'member' => 'mixed',
    'other_members=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::hexists' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'member' => 'mixed',
  ),
  'swoole\\coroutine\\redis::hget' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'member' => 'mixed',
  ),
  'swoole\\coroutine\\redis::hgetall' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\redis::hincrby' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'member' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\redis::hincrbyfloat' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'member' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\redis::hkeys' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\redis::hlen' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\redis::hmget' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'keys' => 'mixed',
  ),
  'swoole\\coroutine\\redis::hmset' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'pairs' => 'mixed',
  ),
  'swoole\\coroutine\\redis::hset' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'member' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\redis::hsetnx' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'member' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\redis::hvals' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\redis::incr' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\redis::incrby' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\redis::incrbyfloat' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\redis::keys' => 
  array (
    0 => 'mixed',
    'pattern' => 'mixed',
  ),
  'swoole\\coroutine\\redis::lastsave' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\redis::lget' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'index' => 'mixed',
  ),
  'swoole\\coroutine\\redis::lgetrange' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'start' => 'mixed',
    'end' => 'mixed',
  ),
  'swoole\\coroutine\\redis::lindex' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'integer' => 'mixed',
  ),
  'swoole\\coroutine\\redis::linsert' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'position' => 'mixed',
    'pivot' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\redis::listtrim' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'start' => 'mixed',
    'stop' => 'mixed',
  ),
  'swoole\\coroutine\\redis::llen' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\redis::lpop' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\redis::lpush' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\redis::lpushx' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\redis::lrange' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'start' => 'mixed',
    'end' => 'mixed',
  ),
  'swoole\\coroutine\\redis::lrem' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
    'count' => 'mixed',
  ),
  'swoole\\coroutine\\redis::lremove' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
    'count' => 'mixed',
  ),
  'swoole\\coroutine\\redis::lset' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'index' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\redis::lsize' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\redis::ltrim' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'start' => 'mixed',
    'stop' => 'mixed',
  ),
  'swoole\\coroutine\\redis::mget' => 
  array (
    0 => 'mixed',
    'keys' => 'mixed',
  ),
  'swoole\\coroutine\\redis::move' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'dbindex' => 'mixed',
  ),
  'swoole\\coroutine\\redis::mset' => 
  array (
    0 => 'mixed',
    'pairs' => 'mixed',
  ),
  'swoole\\coroutine\\redis::msetnx' => 
  array (
    0 => 'mixed',
    'pairs' => 'mixed',
  ),
  'swoole\\coroutine\\redis::multi' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\redis::persist' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\redis::pexpire' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'timestamp' => 'mixed',
  ),
  'swoole\\coroutine\\redis::pexpireat' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'timestamp' => 'mixed',
  ),
  'swoole\\coroutine\\redis::pfadd' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'elements' => 'mixed',
  ),
  'swoole\\coroutine\\redis::pfcount' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\redis::pfmerge' => 
  array (
    0 => 'mixed',
    'dstkey' => 'mixed',
    'keys' => 'mixed',
  ),
  'swoole\\coroutine\\redis::ping' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\redis::psetex' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'expire' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\redis::psubscribe' => 
  array (
    0 => 'mixed',
    'patterns' => 'mixed',
  ),
  'swoole\\coroutine\\redis::pttl' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\redis::publish' => 
  array (
    0 => 'mixed',
    'channel' => 'mixed',
    'message' => 'mixed',
  ),
  'swoole\\coroutine\\redis::punsubscribe' => 
  array (
    0 => 'mixed',
    'patterns' => 'mixed',
  ),
  'swoole\\coroutine\\redis::randomkey' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\redis::recv' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\redis::rename' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'newkey' => 'mixed',
  ),
  'swoole\\coroutine\\redis::renamekey' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'newkey' => 'mixed',
  ),
  'swoole\\coroutine\\redis::renamenx' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'newkey' => 'mixed',
  ),
  'swoole\\coroutine\\redis::request' => 
  array (
    0 => 'mixed',
    'params' => 'array<array-key, mixed>',
  ),
  'swoole\\coroutine\\redis::restore' => 
  array (
    0 => 'mixed',
    'ttl' => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\redis::role' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\redis::rpop' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\redis::rpoplpush' => 
  array (
    0 => 'mixed',
    'src' => 'mixed',
    'dst' => 'mixed',
  ),
  'swoole\\coroutine\\redis::rpush' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\redis::rpushx' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\redis::sadd' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\redis::save' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\redis::scard' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\redis::scontains' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\redis::script' => 
  array (
    0 => 'mixed',
    'cmd' => 'mixed',
    'args=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::sdiff' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'other_keys=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::sdiffstore' => 
  array (
    0 => 'mixed',
    'dst' => 'mixed',
    'key' => 'mixed',
    'other_keys=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::select' => 
  array (
    0 => 'mixed',
    'dbindex' => 'mixed',
  ),
  'swoole\\coroutine\\redis::set' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
    'timeout=' => 'mixed',
    'opt=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::setbit' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'offset' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\redis::setdefer' => 
  array (
    0 => 'mixed',
    'defer' => 'mixed',
  ),
  'swoole\\coroutine\\redis::setex' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'expire' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\redis::setnx' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\redis::setoptions' => 
  array (
    0 => 'mixed',
    'options' => 'mixed',
  ),
  'swoole\\coroutine\\redis::setrange' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'offset' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\redis::settimeout' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'timeout' => 'mixed',
  ),
  'swoole\\coroutine\\redis::sgetmembers' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\redis::sinter' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'other_keys=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::sinterstore' => 
  array (
    0 => 'mixed',
    'dst' => 'mixed',
    'key' => 'mixed',
    'other_keys=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::sismember' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\redis::smembers' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\redis::smove' => 
  array (
    0 => 'mixed',
    'src' => 'mixed',
    'dst' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\redis::spop' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\redis::srandmember' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'count=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::srem' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\redis::sremove' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\redis::ssize' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\redis::strlen' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\redis::subscribe' => 
  array (
    0 => 'mixed',
    'channels' => 'mixed',
  ),
  'swoole\\coroutine\\redis::sunion' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'other_keys=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::sunionstore' => 
  array (
    0 => 'mixed',
    'dst' => 'mixed',
    'key' => 'mixed',
    'other_keys=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::time' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\redis::ttl' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\redis::type' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\redis::unsubscribe' => 
  array (
    0 => 'mixed',
    'channels' => 'mixed',
  ),
  'swoole\\coroutine\\redis::unwatch' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\redis::watch' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'other_keys=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::xack' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'group_name' => 'mixed',
    'id' => 'mixed',
  ),
  'swoole\\coroutine\\redis::xadd' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'id' => 'mixed',
    'pairs' => 'mixed',
    'options=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::xautoclaim' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'group_name' => 'mixed',
    'consumer_name' => 'mixed',
    'min_idle_time' => 'mixed',
    'start' => 'mixed',
    'options=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::xclaim' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'group_name' => 'mixed',
    'consumer_name' => 'mixed',
    'min_idle_time' => 'mixed',
    'id' => 'mixed',
    'options=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::xdel' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'id' => 'mixed',
  ),
  'swoole\\coroutine\\redis::xgroupcreate' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'group_name' => 'mixed',
    'id' => 'mixed',
    'mkstream=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::xgroupcreateconsumer' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'group_name' => 'mixed',
    'consumer_name' => 'mixed',
  ),
  'swoole\\coroutine\\redis::xgroupdelconsumer' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'group_name' => 'mixed',
    'consumer_name' => 'mixed',
  ),
  'swoole\\coroutine\\redis::xgroupdestroy' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'group_name' => 'mixed',
  ),
  'swoole\\coroutine\\redis::xgroupsetid' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'group_name' => 'mixed',
    'id' => 'mixed',
  ),
  'swoole\\coroutine\\redis::xinfoconsumers' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'group_name' => 'mixed',
  ),
  'swoole\\coroutine\\redis::xinfogroups' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\redis::xinfostream' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\redis::xlen' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\redis::xpending' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'group_name' => 'mixed',
    'options=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::xrange' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'start' => 'mixed',
    'end' => 'mixed',
    'count=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::xread' => 
  array (
    0 => 'mixed',
    'streams' => 'mixed',
    'options=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::xreadgroup' => 
  array (
    0 => 'mixed',
    'group_name' => 'mixed',
    'consumer_name' => 'mixed',
    'streams' => 'mixed',
    'options=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::xrevrange' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'start' => 'mixed',
    'end' => 'mixed',
    'count=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::xtrim' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'options=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::zadd' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'score' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\coroutine\\redis::zcard' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\redis::zcount' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'min' => 'mixed',
    'max' => 'mixed',
  ),
  'swoole\\coroutine\\redis::zdelete' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'member' => 'mixed',
    'other_members=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::zdeleterangebyrank' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'start' => 'mixed',
    'end' => 'mixed',
  ),
  'swoole\\coroutine\\redis::zdeleterangebyscore' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'min' => 'mixed',
    'max' => 'mixed',
  ),
  'swoole\\coroutine\\redis::zincrby' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
    'member' => 'mixed',
  ),
  'swoole\\coroutine\\redis::zinter' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'keys' => 'mixed',
    'weights=' => 'mixed',
    'aggregate=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::zinterstore' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'keys' => 'mixed',
    'weights=' => 'mixed',
    'aggregate=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::zpopmax' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'count' => 'mixed',
  ),
  'swoole\\coroutine\\redis::zpopmin' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'count' => 'mixed',
  ),
  'swoole\\coroutine\\redis::zrange' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'start' => 'mixed',
    'end' => 'mixed',
    'scores=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::zrangebylex' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'min' => 'mixed',
    'max' => 'mixed',
    'offset=' => 'mixed',
    'limit=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::zrangebyscore' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'start' => 'mixed',
    'end' => 'mixed',
    'options=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::zrank' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'member' => 'mixed',
  ),
  'swoole\\coroutine\\redis::zrem' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'member' => 'mixed',
    'other_members=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::zremove' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'member' => 'mixed',
    'other_members=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::zremrangebyrank' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'min' => 'mixed',
    'max' => 'mixed',
  ),
  'swoole\\coroutine\\redis::zremrangebyscore' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'min' => 'mixed',
    'max' => 'mixed',
  ),
  'swoole\\coroutine\\redis::zrevrange' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'start' => 'mixed',
    'end' => 'mixed',
    'scores=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::zrevrangebylex' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'min' => 'mixed',
    'max' => 'mixed',
    'offset=' => 'mixed',
    'limit=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::zrevrangebyscore' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'start' => 'mixed',
    'end' => 'mixed',
    'options=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::zrevrank' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'member' => 'mixed',
  ),
  'swoole\\coroutine\\redis::zscore' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'member' => 'mixed',
  ),
  'swoole\\coroutine\\redis::zsize' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\coroutine\\redis::zunion' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'keys' => 'mixed',
    'weights=' => 'mixed',
    'aggregate=' => 'mixed',
  ),
  'swoole\\coroutine\\redis::zunionstore' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'keys' => 'mixed',
    'weights=' => 'mixed',
    'aggregate=' => 'mixed',
  ),
  'swoole\\coroutine\\run' => 
  array (
    0 => 'mixed',
    'fn' => 'callable',
    '...args=' => 'mixed',
  ),
  'swoole\\coroutine\\scheduler::add' => 
  array (
    0 => 'void',
    'func' => 'callable',
    '...param=' => 'mixed',
  ),
  'swoole\\coroutine\\scheduler::getoptions' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'swoole\\coroutine\\scheduler::parallel' => 
  array (
    0 => 'void',
    'n' => 'int',
    'func' => 'callable',
    '...param=' => 'mixed',
  ),
  'swoole\\coroutine\\scheduler::set' => 
  array (
    0 => 'void',
    'settings' => 'array<array-key, mixed>',
  ),
  'swoole\\coroutine\\scheduler::start' => 
  array (
    0 => 'bool',
  ),
  'swoole\\coroutine\\server::__construct' => 
  array (
    0 => 'void',
    'host' => 'string',
    'port=' => 'int',
    'ssl=' => 'bool',
    'reuse_port=' => 'bool',
  ),
  'swoole\\coroutine\\server::handle' => 
  array (
    0 => 'void',
    'fn' => 'callable',
  ),
  'swoole\\coroutine\\server::set' => 
  array (
    0 => 'void',
    'setting' => 'array<array-key, mixed>',
  ),
  'swoole\\coroutine\\server::shutdown' => 
  array (
    0 => 'bool',
  ),
  'swoole\\coroutine\\server::start' => 
  array (
    0 => 'bool',
  ),
  'swoole\\coroutine\\server\\connection::__construct' => 
  array (
    0 => 'void',
    'conn' => 'Swoole\\Coroutine\\Socket',
  ),
  'swoole\\coroutine\\server\\connection::close' => 
  array (
    0 => 'bool',
  ),
  'swoole\\coroutine\\server\\connection::exportsocket' => 
  array (
    0 => 'Swoole\\Coroutine\\Socket',
  ),
  'swoole\\coroutine\\server\\connection::recv' => 
  array (
    0 => 'mixed',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\server\\connection::send' => 
  array (
    0 => 'mixed',
    'data' => 'string',
  ),
  'swoole\\coroutine\\socket::__construct' => 
  array (
    0 => 'void',
    'domain' => 'int',
    'type' => 'int',
    'protocol=' => 'int',
  ),
  'swoole\\coroutine\\socket::accept' => 
  array (
    0 => 'Swoole\\Coroutine\\Socket|false',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\socket::bind' => 
  array (
    0 => 'bool',
    'address' => 'string',
    'port=' => 'int',
  ),
  'swoole\\coroutine\\socket::cancel' => 
  array (
    0 => 'bool',
    'event=' => 'int',
  ),
  'swoole\\coroutine\\socket::checkliveness' => 
  array (
    0 => 'bool',
  ),
  'swoole\\coroutine\\socket::close' => 
  array (
    0 => 'bool',
  ),
  'swoole\\coroutine\\socket::connect' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port=' => 'int',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\socket::getboundcid' => 
  array (
    0 => 'int',
    'event' => 'int',
  ),
  'swoole\\coroutine\\socket::getoption' => 
  array (
    0 => 'mixed',
    'level' => 'int',
    'opt_name' => 'int',
  ),
  'swoole\\coroutine\\socket::getpeername' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'swoole\\coroutine\\socket::getsockname' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'swoole\\coroutine\\socket::import' => 
  array (
    0 => 'Swoole\\Coroutine\\Socket|false',
    'stream' => 'mixed',
  ),
  'swoole\\coroutine\\socket::isclosed' => 
  array (
    0 => 'bool',
  ),
  'swoole\\coroutine\\socket::listen' => 
  array (
    0 => 'bool',
    'backlog=' => 'int',
  ),
  'swoole\\coroutine\\socket::peek' => 
  array (
    0 => 'false|string',
    'length=' => 'int',
  ),
  'swoole\\coroutine\\socket::readvector' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'io_vector' => 'array<array-key, mixed>',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\socket::readvectorall' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'io_vector' => 'array<array-key, mixed>',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\socket::recv' => 
  array (
    0 => 'false|string',
    'length=' => 'int',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\socket::recvall' => 
  array (
    0 => 'false|string',
    'length=' => 'int',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\socket::recvfrom' => 
  array (
    0 => 'false|string',
    '&peername' => 'mixed',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\socket::recvline' => 
  array (
    0 => 'false|string',
    'length=' => 'int',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\socket::recvpacket' => 
  array (
    0 => 'false|string',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\socket::recvwithbuffer' => 
  array (
    0 => 'false|string',
    'length=' => 'int',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\socket::send' => 
  array (
    0 => 'false|int',
    'data' => 'string',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\socket::sendall' => 
  array (
    0 => 'false|int',
    'data' => 'string',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\socket::sendfile' => 
  array (
    0 => 'bool',
    'file' => 'string',
    'offset=' => 'int',
    'length=' => 'int',
  ),
  'swoole\\coroutine\\socket::sendto' => 
  array (
    0 => 'false|int',
    'addr' => 'string',
    'port' => 'int',
    'data' => 'string',
  ),
  'swoole\\coroutine\\socket::setoption' => 
  array (
    0 => 'bool',
    'level' => 'int',
    'opt_name' => 'int',
    'opt_value' => 'mixed',
  ),
  'swoole\\coroutine\\socket::setprotocol' => 
  array (
    0 => 'bool',
    'settings' => 'array<array-key, mixed>',
  ),
  'swoole\\coroutine\\socket::shutdown' => 
  array (
    0 => 'bool',
    'how=' => 'int',
  ),
  'swoole\\coroutine\\socket::sslhandshake' => 
  array (
    0 => 'bool',
  ),
  'swoole\\coroutine\\socket::writevector' => 
  array (
    0 => 'false|int',
    'io_vector' => 'array<array-key, mixed>',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\socket::writevectorall' => 
  array (
    0 => 'false|int',
    'io_vector' => 'array<array-key, mixed>',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\socket\\exception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'swoole\\coroutine\\socket\\exception::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\coroutine\\socket\\exception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\socket\\exception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\coroutine\\socket\\exception::getfile' => 
  array (
    0 => 'string',
  ),
  'swoole\\coroutine\\socket\\exception::getline' => 
  array (
    0 => 'int',
  ),
  'swoole\\coroutine\\socket\\exception::getmessage' => 
  array (
    0 => 'string',
  ),
  'swoole\\coroutine\\socket\\exception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'swoole\\coroutine\\socket\\exception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\coroutine\\socket\\exception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'swoole\\coroutine\\system::dnslookup' => 
  array (
    0 => 'false|string',
    'domain_name' => 'string',
    'timeout=' => 'float',
    'type=' => 'int',
  ),
  'swoole\\coroutine\\system::exec' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'command' => 'string',
    'get_error_stream=' => 'bool',
  ),
  'swoole\\coroutine\\system::fgets' => 
  array (
    0 => 'false|string',
    'handle' => 'mixed',
  ),
  'swoole\\coroutine\\system::fread' => 
  array (
    0 => 'false|string',
    'handle' => 'mixed',
    'length=' => 'int',
  ),
  'swoole\\coroutine\\system::fwrite' => 
  array (
    0 => 'false|int',
    'handle' => 'mixed',
    'data' => 'string',
    'length=' => 'int',
  ),
  'swoole\\coroutine\\system::getaddrinfo' => 
  array (
    0 => 'array<array-key, mixed>|bool',
    'domain' => 'string',
    'family=' => 'int',
    'socktype=' => 'int',
    'protocol=' => 'int',
    'service=' => 'null|string',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\system::gethostbyname' => 
  array (
    0 => 'false|string',
    'domain_name' => 'string',
    'type=' => 'int',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\system::readfile' => 
  array (
    0 => 'false|string',
    'filename' => 'string',
    'flag=' => 'int',
  ),
  'swoole\\coroutine\\system::sleep' => 
  array (
    0 => 'bool',
    'seconds' => 'float',
  ),
  'swoole\\coroutine\\system::statvfs' => 
  array (
    0 => 'array<array-key, mixed>',
    'path' => 'string',
  ),
  'swoole\\coroutine\\system::wait' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\system::waitevent' => 
  array (
    0 => 'false|int',
    'socket' => 'mixed',
    'events=' => 'int',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\system::waitpid' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'pid' => 'int',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\system::waitsignal' => 
  array (
    0 => 'bool',
    'signo' => 'int',
    'timeout=' => 'float',
  ),
  'swoole\\coroutine\\system::writefile' => 
  array (
    0 => 'false|int',
    'filename' => 'string',
    'fileContent' => 'string',
    'flags=' => 'int',
  ),
  'swoole\\coroutine\\waitgroup::__construct' => 
  array (
    0 => 'void',
    'delta=' => 'int',
  ),
  'swoole\\coroutine\\waitgroup::add' => 
  array (
    0 => 'void',
    'delta=' => 'int',
  ),
  'swoole\\coroutine\\waitgroup::count' => 
  array (
    0 => 'int',
  ),
  'swoole\\coroutine\\waitgroup::done' => 
  array (
    0 => 'void',
  ),
  'swoole\\coroutine\\waitgroup::wait' => 
  array (
    0 => 'bool',
    'timeout=' => 'float',
  ),
  'swoole\\curl\\exception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'swoole\\curl\\exception::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\curl\\exception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\curl\\exception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\curl\\exception::getfile' => 
  array (
    0 => 'string',
  ),
  'swoole\\curl\\exception::getline' => 
  array (
    0 => 'int',
  ),
  'swoole\\curl\\exception::getmessage' => 
  array (
    0 => 'string',
  ),
  'swoole\\curl\\exception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'swoole\\curl\\exception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\curl\\exception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'swoole\\curl\\handler::__construct' => 
  array (
    0 => 'void',
    'url=' => 'string',
  ),
  'swoole\\curl\\handler::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\curl\\handler::close' => 
  array (
    0 => 'void',
  ),
  'swoole\\curl\\handler::create' => 
  array (
    0 => 'void',
    'urlInfo=' => 'array<array-key, mixed>|null',
  ),
  'swoole\\curl\\handler::errno' => 
  array (
    0 => 'int',
  ),
  'swoole\\curl\\handler::error' => 
  array (
    0 => 'string',
  ),
  'swoole\\curl\\handler::exec' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\curl\\handler::execute' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\curl\\handler::getcontent' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\curl\\handler::getinfo' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\curl\\handler::getredirecturl' => 
  array (
    0 => 'array<array-key, mixed>',
    'location' => 'string',
  ),
  'swoole\\curl\\handler::geturl' => 
  array (
    0 => 'string',
  ),
  'swoole\\curl\\handler::hasheader' => 
  array (
    0 => 'bool',
    'headerName' => 'string',
  ),
  'swoole\\curl\\handler::isavailable' => 
  array (
    0 => 'bool',
  ),
  'swoole\\curl\\handler::reset' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\curl\\handler::seterror' => 
  array (
    0 => 'void',
    'code' => 'mixed',
    'msg=' => 'mixed',
  ),
  'swoole\\curl\\handler::setheader' => 
  array (
    0 => 'void',
    'headerName' => 'string',
    'value' => 'string',
  ),
  'swoole\\curl\\handler::setopt' => 
  array (
    0 => 'bool',
    'opt' => 'int',
    'value' => 'mixed',
  ),
  'swoole\\curl\\handler::setoption' => 
  array (
    0 => 'bool',
    'opt' => 'int',
    'value' => 'mixed',
  ),
  'swoole\\curl\\handler::setport' => 
  array (
    0 => 'void',
    'port' => 'int',
  ),
  'swoole\\curl\\handler::seturl' => 
  array (
    0 => 'bool',
    'url' => 'string',
    'setInfo=' => 'bool',
  ),
  'swoole\\curl\\handler::seturlinfo' => 
  array (
    0 => 'bool',
    'urlInfo' => 'array<array-key, mixed>',
  ),
  'swoole\\curl\\handler::unparseurl' => 
  array (
    0 => 'string',
    'parsedUrl' => 'array<array-key, mixed>',
  ),
  'swoole\\database\\detectslostconnections::causedbylostconnection' => 
  array (
    0 => 'bool',
    'e' => 'Throwable',
  ),
  'swoole\\database\\mysqliconfig::getcharset' => 
  array (
    0 => 'string',
  ),
  'swoole\\database\\mysqliconfig::getdbname' => 
  array (
    0 => 'string',
  ),
  'swoole\\database\\mysqliconfig::gethost' => 
  array (
    0 => 'string',
  ),
  'swoole\\database\\mysqliconfig::getoptions' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\database\\mysqliconfig::getpassword' => 
  array (
    0 => 'string',
  ),
  'swoole\\database\\mysqliconfig::getport' => 
  array (
    0 => 'int',
  ),
  'swoole\\database\\mysqliconfig::getunixsocket' => 
  array (
    0 => 'null|string',
  ),
  'swoole\\database\\mysqliconfig::getusername' => 
  array (
    0 => 'string',
  ),
  'swoole\\database\\mysqliconfig::withcharset' => 
  array (
    0 => 'self',
    'charset' => 'string',
  ),
  'swoole\\database\\mysqliconfig::withdbname' => 
  array (
    0 => 'self',
    'dbname' => 'string',
  ),
  'swoole\\database\\mysqliconfig::withhost' => 
  array (
    0 => 'self',
    'host' => 'string',
  ),
  'swoole\\database\\mysqliconfig::withoptions' => 
  array (
    0 => 'self',
    'options' => 'array<array-key, mixed>',
  ),
  'swoole\\database\\mysqliconfig::withpassword' => 
  array (
    0 => 'self',
    'password' => 'string',
  ),
  'swoole\\database\\mysqliconfig::withport' => 
  array (
    0 => 'self',
    'port' => 'int',
  ),
  'swoole\\database\\mysqliconfig::withunixsocket' => 
  array (
    0 => 'self',
    'unixSocket' => 'null|string',
  ),
  'swoole\\database\\mysqliconfig::withusername' => 
  array (
    0 => 'self',
    'username' => 'string',
  ),
  'swoole\\database\\mysqliexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'swoole\\database\\mysqliexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\database\\mysqliexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\database\\mysqliexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\database\\mysqliexception::getfile' => 
  array (
    0 => 'string',
  ),
  'swoole\\database\\mysqliexception::getline' => 
  array (
    0 => 'int',
  ),
  'swoole\\database\\mysqliexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'swoole\\database\\mysqliexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'swoole\\database\\mysqliexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\database\\mysqliexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'swoole\\database\\mysqlipool::__construct' => 
  array (
    0 => 'void',
    'config' => 'Swoole\\Database\\MysqliConfig',
    'size=' => 'int',
  ),
  'swoole\\database\\mysqlipool::close' => 
  array (
    0 => 'void',
  ),
  'swoole\\database\\mysqlipool::fill' => 
  array (
    0 => 'void',
  ),
  'swoole\\database\\mysqlipool::get' => 
  array (
    0 => 'mixed',
    'timeout=' => 'float',
  ),
  'swoole\\database\\mysqlipool::make' => 
  array (
    0 => 'void',
  ),
  'swoole\\database\\mysqlipool::put' => 
  array (
    0 => 'void',
    'connection' => 'mixed',
  ),
  'swoole\\database\\mysqliproxy::__call' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'arguments' => 'array<array-key, mixed>',
  ),
  'swoole\\database\\mysqliproxy::__clone' => 
  array (
    0 => 'void',
  ),
  'swoole\\database\\mysqliproxy::__construct' => 
  array (
    0 => 'void',
    'constructor' => 'callable',
  ),
  'swoole\\database\\mysqliproxy::__get' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'swoole\\database\\mysqliproxy::__getobject' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\database\\mysqliproxy::__invoke' => 
  array (
    0 => 'mixed',
    '...arguments=' => 'mixed',
  ),
  'swoole\\database\\mysqliproxy::__isset' => 
  array (
    0 => 'mixed',
    'name' => 'mixed',
  ),
  'swoole\\database\\mysqliproxy::__set' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'swoole\\database\\mysqliproxy::__unset' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'swoole\\database\\mysqliproxy::change_user' => 
  array (
    0 => 'bool',
    'user' => 'string',
    'password' => 'string',
    'database' => 'null|string',
  ),
  'swoole\\database\\mysqliproxy::getround' => 
  array (
    0 => 'int',
  ),
  'swoole\\database\\mysqliproxy::options' => 
  array (
    0 => 'bool',
    'option' => 'int',
    'value' => 'mixed',
  ),
  'swoole\\database\\mysqliproxy::reconnect' => 
  array (
    0 => 'void',
  ),
  'swoole\\database\\mysqliproxy::set_charset' => 
  array (
    0 => 'bool',
    'charset' => 'string',
  ),
  'swoole\\database\\mysqliproxy::set_opt' => 
  array (
    0 => 'bool',
    'option' => 'int',
    'value' => 'mixed',
  ),
  'swoole\\database\\mysqlistatementproxy::__call' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'arguments' => 'array<array-key, mixed>',
  ),
  'swoole\\database\\mysqlistatementproxy::__clone' => 
  array (
    0 => 'void',
  ),
  'swoole\\database\\mysqlistatementproxy::__construct' => 
  array (
    0 => 'void',
    'object' => 'mysqli_stmt',
    'queryString' => 'null|string',
    'parent' => 'Swoole\\Database\\MysqliProxy',
  ),
  'swoole\\database\\mysqlistatementproxy::__get' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'swoole\\database\\mysqlistatementproxy::__getobject' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\database\\mysqlistatementproxy::__invoke' => 
  array (
    0 => 'mixed',
    '...arguments=' => 'mixed',
  ),
  'swoole\\database\\mysqlistatementproxy::__isset' => 
  array (
    0 => 'mixed',
    'name' => 'mixed',
  ),
  'swoole\\database\\mysqlistatementproxy::__set' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'swoole\\database\\mysqlistatementproxy::__unset' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'swoole\\database\\mysqlistatementproxy::attr_set' => 
  array (
    0 => 'bool',
    'attr' => 'mixed',
    'mode' => 'mixed',
  ),
  'swoole\\database\\mysqlistatementproxy::bind_param' => 
  array (
    0 => 'bool',
    'types' => 'mixed',
    '...&arguments=' => 'mixed',
  ),
  'swoole\\database\\mysqlistatementproxy::bind_result' => 
  array (
    0 => 'bool',
    '...&arguments=' => 'mixed',
  ),
  'swoole\\database\\objectproxy::__call' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'arguments' => 'array<array-key, mixed>',
  ),
  'swoole\\database\\objectproxy::__clone' => 
  array (
    0 => 'void',
  ),
  'swoole\\database\\objectproxy::__construct' => 
  array (
    0 => 'void',
    'object' => 'object',
  ),
  'swoole\\database\\objectproxy::__get' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'swoole\\database\\objectproxy::__getobject' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\database\\objectproxy::__invoke' => 
  array (
    0 => 'mixed',
    '...arguments=' => 'mixed',
  ),
  'swoole\\database\\objectproxy::__isset' => 
  array (
    0 => 'mixed',
    'name' => 'mixed',
  ),
  'swoole\\database\\objectproxy::__set' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'swoole\\database\\objectproxy::__unset' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'swoole\\database\\pdoconfig::getavailabledrivers' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\database\\pdoconfig::getcharset' => 
  array (
    0 => 'string',
  ),
  'swoole\\database\\pdoconfig::getdbname' => 
  array (
    0 => 'string',
  ),
  'swoole\\database\\pdoconfig::getdriver' => 
  array (
    0 => 'string',
  ),
  'swoole\\database\\pdoconfig::gethost' => 
  array (
    0 => 'string',
  ),
  'swoole\\database\\pdoconfig::getoptions' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\database\\pdoconfig::getpassword' => 
  array (
    0 => 'string',
  ),
  'swoole\\database\\pdoconfig::getport' => 
  array (
    0 => 'int',
  ),
  'swoole\\database\\pdoconfig::getunixsocket' => 
  array (
    0 => 'null|string',
  ),
  'swoole\\database\\pdoconfig::getusername' => 
  array (
    0 => 'string',
  ),
  'swoole\\database\\pdoconfig::hasunixsocket' => 
  array (
    0 => 'bool',
  ),
  'swoole\\database\\pdoconfig::withcharset' => 
  array (
    0 => 'self',
    'charset' => 'string',
  ),
  'swoole\\database\\pdoconfig::withdbname' => 
  array (
    0 => 'self',
    'dbname' => 'string',
  ),
  'swoole\\database\\pdoconfig::withdriver' => 
  array (
    0 => 'self',
    'driver' => 'string',
  ),
  'swoole\\database\\pdoconfig::withhost' => 
  array (
    0 => 'self',
    'host' => 'string',
  ),
  'swoole\\database\\pdoconfig::withoptions' => 
  array (
    0 => 'self',
    'options' => 'array<array-key, mixed>',
  ),
  'swoole\\database\\pdoconfig::withpassword' => 
  array (
    0 => 'self',
    'password' => 'string',
  ),
  'swoole\\database\\pdoconfig::withport' => 
  array (
    0 => 'self',
    'port' => 'int',
  ),
  'swoole\\database\\pdoconfig::withunixsocket' => 
  array (
    0 => 'self',
    'unixSocket' => 'null|string',
  ),
  'swoole\\database\\pdoconfig::withusername' => 
  array (
    0 => 'self',
    'username' => 'string',
  ),
  'swoole\\database\\pdopool::__construct' => 
  array (
    0 => 'void',
    'config' => 'Swoole\\Database\\PDOConfig',
    'size=' => 'int',
  ),
  'swoole\\database\\pdopool::close' => 
  array (
    0 => 'void',
  ),
  'swoole\\database\\pdopool::createdsn' => 
  array (
    0 => 'string',
    'driver' => 'string',
  ),
  'swoole\\database\\pdopool::fill' => 
  array (
    0 => 'void',
  ),
  'swoole\\database\\pdopool::get' => 
  array (
    0 => 'mixed',
    'timeout=' => 'float',
  ),
  'swoole\\database\\pdopool::make' => 
  array (
    0 => 'void',
  ),
  'swoole\\database\\pdopool::put' => 
  array (
    0 => 'void',
    'connection' => 'mixed',
  ),
  'swoole\\database\\pdoproxy::__call' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'arguments' => 'array<array-key, mixed>',
  ),
  'swoole\\database\\pdoproxy::__clone' => 
  array (
    0 => 'void',
  ),
  'swoole\\database\\pdoproxy::__construct' => 
  array (
    0 => 'void',
    'constructor' => 'callable',
  ),
  'swoole\\database\\pdoproxy::__get' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'swoole\\database\\pdoproxy::__getobject' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\database\\pdoproxy::__invoke' => 
  array (
    0 => 'mixed',
    '...arguments=' => 'mixed',
  ),
  'swoole\\database\\pdoproxy::__isset' => 
  array (
    0 => 'mixed',
    'name' => 'mixed',
  ),
  'swoole\\database\\pdoproxy::__set' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'swoole\\database\\pdoproxy::__unset' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'swoole\\database\\pdoproxy::getround' => 
  array (
    0 => 'int',
  ),
  'swoole\\database\\pdoproxy::intransaction' => 
  array (
    0 => 'bool',
  ),
  'swoole\\database\\pdoproxy::reconnect' => 
  array (
    0 => 'void',
  ),
  'swoole\\database\\pdoproxy::reset' => 
  array (
    0 => 'void',
  ),
  'swoole\\database\\pdoproxy::setattribute' => 
  array (
    0 => 'bool',
    'attribute' => 'int',
    'value' => 'mixed',
  ),
  'swoole\\database\\pdostatementproxy::__call' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'arguments' => 'array<array-key, mixed>',
  ),
  'swoole\\database\\pdostatementproxy::__clone' => 
  array (
    0 => 'void',
  ),
  'swoole\\database\\pdostatementproxy::__construct' => 
  array (
    0 => 'void',
    'object' => 'PDOStatement',
    'parent' => 'Swoole\\Database\\PDOProxy',
  ),
  'swoole\\database\\pdostatementproxy::__get' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'swoole\\database\\pdostatementproxy::__getobject' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\database\\pdostatementproxy::__invoke' => 
  array (
    0 => 'mixed',
    '...arguments=' => 'mixed',
  ),
  'swoole\\database\\pdostatementproxy::__isset' => 
  array (
    0 => 'mixed',
    'name' => 'mixed',
  ),
  'swoole\\database\\pdostatementproxy::__set' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'swoole\\database\\pdostatementproxy::__unset' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'swoole\\database\\pdostatementproxy::bindcolumn' => 
  array (
    0 => 'bool',
    'column' => 'mixed',
    '&param' => 'mixed',
    'type=' => 'mixed',
    'maxlen=' => 'mixed',
    'driverdata=' => 'mixed',
  ),
  'swoole\\database\\pdostatementproxy::bindparam' => 
  array (
    0 => 'bool',
    'parameter' => 'mixed',
    '&variable' => 'mixed',
    'data_type=' => 'mixed',
    'length=' => 'mixed',
    'driver_options=' => 'mixed',
  ),
  'swoole\\database\\pdostatementproxy::bindvalue' => 
  array (
    0 => 'bool',
    'parameter' => 'mixed',
    'value' => 'mixed',
    'data_type=' => 'mixed',
  ),
  'swoole\\database\\pdostatementproxy::setattribute' => 
  array (
    0 => 'bool',
    'attribute' => 'int',
    'value' => 'mixed',
  ),
  'swoole\\database\\pdostatementproxy::setfetchmode' => 
  array (
    0 => 'bool',
    'mode' => 'int',
    '...params=' => 'mixed',
  ),
  'swoole\\database\\redisconfig::getauth' => 
  array (
    0 => 'string',
  ),
  'swoole\\database\\redisconfig::getdbindex' => 
  array (
    0 => 'int',
  ),
  'swoole\\database\\redisconfig::gethost' => 
  array (
    0 => 'string',
  ),
  'swoole\\database\\redisconfig::getoptions' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\database\\redisconfig::getport' => 
  array (
    0 => 'int',
  ),
  'swoole\\database\\redisconfig::getreadtimeout' => 
  array (
    0 => 'float',
  ),
  'swoole\\database\\redisconfig::getreserved' => 
  array (
    0 => 'string',
  ),
  'swoole\\database\\redisconfig::getretryinterval' => 
  array (
    0 => 'int',
  ),
  'swoole\\database\\redisconfig::gettimeout' => 
  array (
    0 => 'float',
  ),
  'swoole\\database\\redisconfig::setoptions' => 
  array (
    0 => 'self',
    'options' => 'array<array-key, mixed>',
  ),
  'swoole\\database\\redisconfig::withauth' => 
  array (
    0 => 'self',
    'auth' => 'string',
  ),
  'swoole\\database\\redisconfig::withdbindex' => 
  array (
    0 => 'self',
    'dbIndex' => 'int',
  ),
  'swoole\\database\\redisconfig::withhost' => 
  array (
    0 => 'self',
    'host' => 'string',
  ),
  'swoole\\database\\redisconfig::withoption' => 
  array (
    0 => 'self',
    'option' => 'int',
    'value' => 'mixed',
  ),
  'swoole\\database\\redisconfig::withport' => 
  array (
    0 => 'self',
    'port' => 'int',
  ),
  'swoole\\database\\redisconfig::withreadtimeout' => 
  array (
    0 => 'self',
    'read_timeout' => 'float',
  ),
  'swoole\\database\\redisconfig::withreserved' => 
  array (
    0 => 'self',
    'reserved' => 'string',
  ),
  'swoole\\database\\redisconfig::withretryinterval' => 
  array (
    0 => 'self',
    'retry_interval' => 'int',
  ),
  'swoole\\database\\redisconfig::withtimeout' => 
  array (
    0 => 'self',
    'timeout' => 'float',
  ),
  'swoole\\database\\redispool::__construct' => 
  array (
    0 => 'void',
    'config' => 'Swoole\\Database\\RedisConfig',
    'size=' => 'int',
  ),
  'swoole\\database\\redispool::close' => 
  array (
    0 => 'void',
  ),
  'swoole\\database\\redispool::fill' => 
  array (
    0 => 'void',
  ),
  'swoole\\database\\redispool::get' => 
  array (
    0 => 'mixed',
    'timeout=' => 'float',
  ),
  'swoole\\database\\redispool::make' => 
  array (
    0 => 'void',
  ),
  'swoole\\database\\redispool::put' => 
  array (
    0 => 'void',
    'connection' => 'mixed',
  ),
  'swoole\\error::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'swoole\\error::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\error::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\error::getcode' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\error::getfile' => 
  array (
    0 => 'string',
  ),
  'swoole\\error::getline' => 
  array (
    0 => 'int',
  ),
  'swoole\\error::getmessage' => 
  array (
    0 => 'string',
  ),
  'swoole\\error::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'swoole\\error::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\error::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'swoole\\event::add' => 
  array (
    0 => 'false|int',
    'fd' => 'int',
    'read_callback=' => 'callable|null',
    'write_callback=' => 'callable|null',
    'events=' => 'int',
  ),
  'swoole\\event::cycle' => 
  array (
    0 => 'bool',
    'callback' => 'callable|null',
    'before=' => 'bool',
  ),
  'swoole\\event::defer' => 
  array (
    0 => 'bool',
    'callback' => 'callable',
  ),
  'swoole\\event::del' => 
  array (
    0 => 'bool',
    'fd' => 'string',
  ),
  'swoole\\event::dispatch' => 
  array (
    0 => 'bool',
  ),
  'swoole\\event::exit' => 
  array (
    0 => 'void',
  ),
  'swoole\\event::isset' => 
  array (
    0 => 'bool',
    'fd' => 'mixed',
    'events=' => 'int',
  ),
  'swoole\\event::rshutdown' => 
  array (
    0 => 'void',
  ),
  'swoole\\event::set' => 
  array (
    0 => 'bool',
    'fd' => 'int',
    'read_callback=' => 'callable|null',
    'write_callback=' => 'callable|null',
    'events=' => 'int',
  ),
  'swoole\\event::wait' => 
  array (
    0 => 'void',
  ),
  'swoole\\event::write' => 
  array (
    0 => 'bool',
    'fd' => 'string',
    'data' => 'string',
  ),
  'swoole\\exception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'swoole\\exception::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\exception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\exception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\exception::getfile' => 
  array (
    0 => 'string',
  ),
  'swoole\\exception::getline' => 
  array (
    0 => 'int',
  ),
  'swoole\\exception::getmessage' => 
  array (
    0 => 'string',
  ),
  'swoole\\exception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'swoole\\exception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\exception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'swoole\\exception\\arraykeynotexists::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'swoole\\exception\\arraykeynotexists::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\exception\\arraykeynotexists::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\exception\\arraykeynotexists::getcode' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\exception\\arraykeynotexists::getfile' => 
  array (
    0 => 'string',
  ),
  'swoole\\exception\\arraykeynotexists::getline' => 
  array (
    0 => 'int',
  ),
  'swoole\\exception\\arraykeynotexists::getmessage' => 
  array (
    0 => 'string',
  ),
  'swoole\\exception\\arraykeynotexists::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'swoole\\exception\\arraykeynotexists::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\exception\\arraykeynotexists::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'swoole\\exitexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'swoole\\exitexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\exitexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\exitexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\exitexception::getfile' => 
  array (
    0 => 'string',
  ),
  'swoole\\exitexception::getflags' => 
  array (
    0 => 'int',
  ),
  'swoole\\exitexception::getline' => 
  array (
    0 => 'int',
  ),
  'swoole\\exitexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'swoole\\exitexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'swoole\\exitexception::getstatus' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\exitexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\exitexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\frameparser::hasframe' => 
  array (
    0 => 'bool',
    'binaryBuffer' => 'string',
  ),
  'swoole\\fastcgi\\frameparser::parseframe' => 
  array (
    0 => 'Swoole\\FastCGI\\Record',
    '&binaryBuffer' => 'string',
  ),
  'swoole\\fastcgi\\httprequest::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\httprequest::convertheadernametoparamname' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'swoole\\fastcgi\\httprequest::convertparamnametoheadername' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'swoole\\fastcgi\\httprequest::getbody' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\httprequest::getcontentlength' => 
  array (
    0 => 'int|null',
  ),
  'swoole\\fastcgi\\httprequest::getcontenttype' => 
  array (
    0 => 'null|string',
  ),
  'swoole\\fastcgi\\httprequest::getdocumentroot' => 
  array (
    0 => 'null|string',
  ),
  'swoole\\fastcgi\\httprequest::getdocumenturi' => 
  array (
    0 => 'null|string',
  ),
  'swoole\\fastcgi\\httprequest::geterror' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\httprequest::getgatewayinterface' => 
  array (
    0 => 'null|string',
  ),
  'swoole\\fastcgi\\httprequest::getheader' => 
  array (
    0 => 'null|string',
    'name' => 'string',
  ),
  'swoole\\fastcgi\\httprequest::getheaders' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\fastcgi\\httprequest::getkeepconn' => 
  array (
    0 => 'bool',
  ),
  'swoole\\fastcgi\\httprequest::getmethod' => 
  array (
    0 => 'null|string',
  ),
  'swoole\\fastcgi\\httprequest::getparam' => 
  array (
    0 => 'null|string',
    'name' => 'string',
  ),
  'swoole\\fastcgi\\httprequest::getparams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\fastcgi\\httprequest::getquerystring' => 
  array (
    0 => 'null|string',
  ),
  'swoole\\fastcgi\\httprequest::getredirectstatus' => 
  array (
    0 => 'null|string',
  ),
  'swoole\\fastcgi\\httprequest::getremoteaddr' => 
  array (
    0 => 'null|string',
  ),
  'swoole\\fastcgi\\httprequest::getremoteport' => 
  array (
    0 => 'int|null',
  ),
  'swoole\\fastcgi\\httprequest::getrequesturi' => 
  array (
    0 => 'null|string',
  ),
  'swoole\\fastcgi\\httprequest::getscheme' => 
  array (
    0 => 'null|string',
  ),
  'swoole\\fastcgi\\httprequest::getscriptfilename' => 
  array (
    0 => 'null|string',
  ),
  'swoole\\fastcgi\\httprequest::getscriptname' => 
  array (
    0 => 'null|string',
  ),
  'swoole\\fastcgi\\httprequest::getserveraddr' => 
  array (
    0 => 'null|string',
  ),
  'swoole\\fastcgi\\httprequest::getservername' => 
  array (
    0 => 'null|string',
  ),
  'swoole\\fastcgi\\httprequest::getserverport' => 
  array (
    0 => 'int|null',
  ),
  'swoole\\fastcgi\\httprequest::getserverprotocol' => 
  array (
    0 => 'null|string',
  ),
  'swoole\\fastcgi\\httprequest::getserversoftware' => 
  array (
    0 => 'null|string',
  ),
  'swoole\\fastcgi\\httprequest::withaddedparams' => 
  array (
    0 => 'static',
    'params' => 'array<array-key, mixed>',
  ),
  'swoole\\fastcgi\\httprequest::withbody' => 
  array (
    0 => 'self',
    'body' => 'Stringable|array<array-key, mixed>|string',
  ),
  'swoole\\fastcgi\\httprequest::withcontentlength' => 
  array (
    0 => 'self',
    'contentLength' => 'int',
  ),
  'swoole\\fastcgi\\httprequest::withcontenttype' => 
  array (
    0 => 'self',
    'contentType' => 'string',
  ),
  'swoole\\fastcgi\\httprequest::withdocumentroot' => 
  array (
    0 => 'self',
    'documentRoot' => 'string',
  ),
  'swoole\\fastcgi\\httprequest::withdocumenturi' => 
  array (
    0 => 'self',
    'documentUri' => 'string',
  ),
  'swoole\\fastcgi\\httprequest::witherror' => 
  array (
    0 => 'static',
    'error' => 'string',
  ),
  'swoole\\fastcgi\\httprequest::withgatewayinterface' => 
  array (
    0 => 'self',
    'gatewayInterface' => 'string',
  ),
  'swoole\\fastcgi\\httprequest::withheader' => 
  array (
    0 => 'self',
    'name' => 'string',
    'value' => 'string',
  ),
  'swoole\\fastcgi\\httprequest::withheaders' => 
  array (
    0 => 'self',
    'headers' => 'array<array-key, mixed>',
  ),
  'swoole\\fastcgi\\httprequest::withkeepconn' => 
  array (
    0 => 'self',
    'keepConn' => 'bool',
  ),
  'swoole\\fastcgi\\httprequest::withmethod' => 
  array (
    0 => 'self',
    'method' => 'string',
  ),
  'swoole\\fastcgi\\httprequest::withoutcontentlength' => 
  array (
    0 => 'void',
  ),
  'swoole\\fastcgi\\httprequest::withoutcontenttype' => 
  array (
    0 => 'void',
  ),
  'swoole\\fastcgi\\httprequest::withoutdocumentroot' => 
  array (
    0 => 'void',
  ),
  'swoole\\fastcgi\\httprequest::withoutdocumenturi' => 
  array (
    0 => 'void',
  ),
  'swoole\\fastcgi\\httprequest::withoutgatewayinterface' => 
  array (
    0 => 'void',
  ),
  'swoole\\fastcgi\\httprequest::withoutheader' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'swoole\\fastcgi\\httprequest::withoutmethod' => 
  array (
    0 => 'void',
  ),
  'swoole\\fastcgi\\httprequest::withoutparam' => 
  array (
    0 => 'static',
    'name' => 'string',
  ),
  'swoole\\fastcgi\\httprequest::withoutquerystring' => 
  array (
    0 => 'void',
  ),
  'swoole\\fastcgi\\httprequest::withoutredirectstatus' => 
  array (
    0 => 'void',
  ),
  'swoole\\fastcgi\\httprequest::withoutremoteaddr' => 
  array (
    0 => 'void',
  ),
  'swoole\\fastcgi\\httprequest::withoutremoteport' => 
  array (
    0 => 'void',
  ),
  'swoole\\fastcgi\\httprequest::withoutrequesturi' => 
  array (
    0 => 'void',
  ),
  'swoole\\fastcgi\\httprequest::withoutscheme' => 
  array (
    0 => 'void',
  ),
  'swoole\\fastcgi\\httprequest::withoutscriptfilename' => 
  array (
    0 => 'void',
  ),
  'swoole\\fastcgi\\httprequest::withoutscriptname' => 
  array (
    0 => 'void',
  ),
  'swoole\\fastcgi\\httprequest::withoutserveraddr' => 
  array (
    0 => 'void',
  ),
  'swoole\\fastcgi\\httprequest::withoutservername' => 
  array (
    0 => 'void',
  ),
  'swoole\\fastcgi\\httprequest::withoutserverport' => 
  array (
    0 => 'void',
  ),
  'swoole\\fastcgi\\httprequest::withoutserverprotocol' => 
  array (
    0 => 'void',
  ),
  'swoole\\fastcgi\\httprequest::withoutserversoftware' => 
  array (
    0 => 'void',
  ),
  'swoole\\fastcgi\\httprequest::withparam' => 
  array (
    0 => 'static',
    'name' => 'string',
    'value' => 'string',
  ),
  'swoole\\fastcgi\\httprequest::withparams' => 
  array (
    0 => 'static',
    'params' => 'array<array-key, mixed>',
  ),
  'swoole\\fastcgi\\httprequest::withprotocolversion' => 
  array (
    0 => 'self',
    'protocolVersion' => 'string',
  ),
  'swoole\\fastcgi\\httprequest::withquery' => 
  array (
    0 => 'self',
    'query' => 'mixed',
  ),
  'swoole\\fastcgi\\httprequest::withquerystring' => 
  array (
    0 => 'self',
    'queryString' => 'string',
  ),
  'swoole\\fastcgi\\httprequest::withredirectstatus' => 
  array (
    0 => 'self',
    'redirectStatus' => 'string',
  ),
  'swoole\\fastcgi\\httprequest::withremoteaddr' => 
  array (
    0 => 'self',
    'remoteAddr' => 'string',
  ),
  'swoole\\fastcgi\\httprequest::withremoteport' => 
  array (
    0 => 'self',
    'remotePort' => 'int',
  ),
  'swoole\\fastcgi\\httprequest::withrequesturi' => 
  array (
    0 => 'self',
    'requestUri' => 'string',
  ),
  'swoole\\fastcgi\\httprequest::withscheme' => 
  array (
    0 => 'self',
    'scheme' => 'string',
  ),
  'swoole\\fastcgi\\httprequest::withscriptfilename' => 
  array (
    0 => 'self',
    'scriptFilename' => 'string',
  ),
  'swoole\\fastcgi\\httprequest::withscriptname' => 
  array (
    0 => 'self',
    'scriptName' => 'string',
  ),
  'swoole\\fastcgi\\httprequest::withserveraddr' => 
  array (
    0 => 'self',
    'serverAddr' => 'string',
  ),
  'swoole\\fastcgi\\httprequest::withservername' => 
  array (
    0 => 'self',
    'serverName' => 'string',
  ),
  'swoole\\fastcgi\\httprequest::withserverport' => 
  array (
    0 => 'self',
    'serverPort' => 'int',
  ),
  'swoole\\fastcgi\\httprequest::withserverprotocol' => 
  array (
    0 => 'self',
    'serverProtocol' => 'string',
  ),
  'swoole\\fastcgi\\httprequest::withserversoftware' => 
  array (
    0 => 'self',
    'serverSoftware' => 'string',
  ),
  'swoole\\fastcgi\\httprequest::withuri' => 
  array (
    0 => 'self',
    'uri' => 'string',
  ),
  'swoole\\fastcgi\\httpresponse::__construct' => 
  array (
    0 => 'void',
    'records=' => 'array<array-key, mixed>',
  ),
  'swoole\\fastcgi\\httpresponse::getbody' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\httpresponse::geterror' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\httpresponse::getheader' => 
  array (
    0 => 'null|string',
    'name' => 'string',
  ),
  'swoole\\fastcgi\\httpresponse::getheaders' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\fastcgi\\httpresponse::getparam' => 
  array (
    0 => 'null|string',
    'name' => 'string',
  ),
  'swoole\\fastcgi\\httpresponse::getparams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\fastcgi\\httpresponse::getreasonphrase' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\httpresponse::getsetcookieheaderlines' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\fastcgi\\httpresponse::getstatuscode' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\httpresponse::verify' => 
  array (
    0 => 'bool',
    'records' => 'array<array-key, mixed>',
  ),
  'swoole\\fastcgi\\httpresponse::withaddedparams' => 
  array (
    0 => 'static',
    'params' => 'array<array-key, mixed>',
  ),
  'swoole\\fastcgi\\httpresponse::withbody' => 
  array (
    0 => 'self',
    'body' => 'Stringable|string',
  ),
  'swoole\\fastcgi\\httpresponse::witherror' => 
  array (
    0 => 'static',
    'error' => 'string',
  ),
  'swoole\\fastcgi\\httpresponse::withheader' => 
  array (
    0 => 'self',
    'name' => 'string',
    'value' => 'string',
  ),
  'swoole\\fastcgi\\httpresponse::withheaders' => 
  array (
    0 => 'self',
    'headers' => 'array<array-key, mixed>',
  ),
  'swoole\\fastcgi\\httpresponse::withoutparam' => 
  array (
    0 => 'static',
    'name' => 'string',
  ),
  'swoole\\fastcgi\\httpresponse::withparam' => 
  array (
    0 => 'static',
    'name' => 'string',
    'value' => 'string',
  ),
  'swoole\\fastcgi\\httpresponse::withparams' => 
  array (
    0 => 'static',
    'params' => 'array<array-key, mixed>',
  ),
  'swoole\\fastcgi\\httpresponse::withreasonphrase' => 
  array (
    0 => 'self',
    'reasonPhrase' => 'string',
  ),
  'swoole\\fastcgi\\httpresponse::withsetcookieheaderline' => 
  array (
    0 => 'self',
    'value' => 'string',
  ),
  'swoole\\fastcgi\\httpresponse::withstatuscode' => 
  array (
    0 => 'self',
    'statusCode' => 'int',
  ),
  'swoole\\fastcgi\\message::getbody' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\message::geterror' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\message::getparam' => 
  array (
    0 => 'null|string',
    'name' => 'string',
  ),
  'swoole\\fastcgi\\message::getparams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\fastcgi\\message::withaddedparams' => 
  array (
    0 => 'static',
    'params' => 'array<array-key, mixed>',
  ),
  'swoole\\fastcgi\\message::withbody' => 
  array (
    0 => 'self',
    'body' => 'Stringable|string',
  ),
  'swoole\\fastcgi\\message::witherror' => 
  array (
    0 => 'static',
    'error' => 'string',
  ),
  'swoole\\fastcgi\\message::withoutparam' => 
  array (
    0 => 'static',
    'name' => 'string',
  ),
  'swoole\\fastcgi\\message::withparam' => 
  array (
    0 => 'static',
    'name' => 'string',
    'value' => 'string',
  ),
  'swoole\\fastcgi\\message::withparams' => 
  array (
    0 => 'static',
    'params' => 'array<array-key, mixed>',
  ),
  'swoole\\fastcgi\\record::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record::getcontentdata' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record::getcontentlength' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record::getpaddinglength' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record::getrequestid' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record::gettype' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record::getversion' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record::packpayload' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record::setcontentdata' => 
  array (
    0 => 'self',
    'data' => 'string',
  ),
  'swoole\\fastcgi\\record::setrequestid' => 
  array (
    0 => 'self',
    'requestId' => 'int',
  ),
  'swoole\\fastcgi\\record::unpack' => 
  array (
    0 => 'static',
    'binaryData' => 'string',
  ),
  'swoole\\fastcgi\\record::unpackpayload' => 
  array (
    0 => 'void',
    'self' => 'self',
    'binaryData' => 'string',
  ),
  'swoole\\fastcgi\\record\\abortrequest::__construct' => 
  array (
    0 => 'void',
    'requestId' => 'int',
  ),
  'swoole\\fastcgi\\record\\abortrequest::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\abortrequest::getcontentdata' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\abortrequest::getcontentlength' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\abortrequest::getpaddinglength' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\abortrequest::getrequestid' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\abortrequest::gettype' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\abortrequest::getversion' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\abortrequest::packpayload' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\abortrequest::setcontentdata' => 
  array (
    0 => 'self',
    'data' => 'string',
  ),
  'swoole\\fastcgi\\record\\abortrequest::setrequestid' => 
  array (
    0 => 'self',
    'requestId' => 'int',
  ),
  'swoole\\fastcgi\\record\\abortrequest::unpack' => 
  array (
    0 => 'static',
    'binaryData' => 'string',
  ),
  'swoole\\fastcgi\\record\\abortrequest::unpackpayload' => 
  array (
    0 => 'void',
    'self' => 'self',
    'binaryData' => 'string',
  ),
  'swoole\\fastcgi\\record\\beginrequest::__construct' => 
  array (
    0 => 'void',
    'role=' => 'int',
    'flags=' => 'int',
    'reserved=' => 'string',
  ),
  'swoole\\fastcgi\\record\\beginrequest::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\beginrequest::getcontentdata' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\beginrequest::getcontentlength' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\beginrequest::getflags' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\beginrequest::getpaddinglength' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\beginrequest::getrequestid' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\beginrequest::getrole' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\beginrequest::gettype' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\beginrequest::getversion' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\beginrequest::packpayload' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\beginrequest::setcontentdata' => 
  array (
    0 => 'self',
    'data' => 'string',
  ),
  'swoole\\fastcgi\\record\\beginrequest::setrequestid' => 
  array (
    0 => 'self',
    'requestId' => 'int',
  ),
  'swoole\\fastcgi\\record\\beginrequest::unpack' => 
  array (
    0 => 'static',
    'binaryData' => 'string',
  ),
  'swoole\\fastcgi\\record\\beginrequest::unpackpayload' => 
  array (
    0 => 'void',
    'self' => 'mixed',
    'binaryData' => 'string',
  ),
  'swoole\\fastcgi\\record\\data::__construct' => 
  array (
    0 => 'void',
    'contentData' => 'string',
  ),
  'swoole\\fastcgi\\record\\data::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\data::getcontentdata' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\data::getcontentlength' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\data::getpaddinglength' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\data::getrequestid' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\data::gettype' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\data::getversion' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\data::packpayload' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\data::setcontentdata' => 
  array (
    0 => 'self',
    'data' => 'string',
  ),
  'swoole\\fastcgi\\record\\data::setrequestid' => 
  array (
    0 => 'self',
    'requestId' => 'int',
  ),
  'swoole\\fastcgi\\record\\data::unpack' => 
  array (
    0 => 'static',
    'binaryData' => 'string',
  ),
  'swoole\\fastcgi\\record\\data::unpackpayload' => 
  array (
    0 => 'void',
    'self' => 'self',
    'binaryData' => 'string',
  ),
  'swoole\\fastcgi\\record\\endrequest::__construct' => 
  array (
    0 => 'void',
    'protocolStatus=' => 'int',
    'appStatus=' => 'int',
    'reserved=' => 'string',
  ),
  'swoole\\fastcgi\\record\\endrequest::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\endrequest::getappstatus' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\endrequest::getcontentdata' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\endrequest::getcontentlength' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\endrequest::getpaddinglength' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\endrequest::getprotocolstatus' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\endrequest::getrequestid' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\endrequest::gettype' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\endrequest::getversion' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\endrequest::packpayload' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\endrequest::setcontentdata' => 
  array (
    0 => 'self',
    'data' => 'string',
  ),
  'swoole\\fastcgi\\record\\endrequest::setrequestid' => 
  array (
    0 => 'self',
    'requestId' => 'int',
  ),
  'swoole\\fastcgi\\record\\endrequest::unpack' => 
  array (
    0 => 'static',
    'binaryData' => 'string',
  ),
  'swoole\\fastcgi\\record\\endrequest::unpackpayload' => 
  array (
    0 => 'void',
    'self' => 'mixed',
    'binaryData' => 'string',
  ),
  'swoole\\fastcgi\\record\\getvalues::__construct' => 
  array (
    0 => 'void',
    'keys' => 'array<array-key, mixed>',
  ),
  'swoole\\fastcgi\\record\\getvalues::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\getvalues::getcontentdata' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\getvalues::getcontentlength' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\getvalues::getpaddinglength' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\getvalues::getrequestid' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\getvalues::gettype' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\getvalues::getvalues' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\fastcgi\\record\\getvalues::getversion' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\getvalues::packpayload' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\getvalues::setcontentdata' => 
  array (
    0 => 'self',
    'data' => 'string',
  ),
  'swoole\\fastcgi\\record\\getvalues::setrequestid' => 
  array (
    0 => 'self',
    'requestId' => 'int',
  ),
  'swoole\\fastcgi\\record\\getvalues::unpack' => 
  array (
    0 => 'static',
    'binaryData' => 'string',
  ),
  'swoole\\fastcgi\\record\\getvalues::unpackpayload' => 
  array (
    0 => 'void',
    'self' => 'mixed',
    'binaryData' => 'string',
  ),
  'swoole\\fastcgi\\record\\getvaluesresult::__construct' => 
  array (
    0 => 'void',
    'values' => 'array<array-key, mixed>',
  ),
  'swoole\\fastcgi\\record\\getvaluesresult::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\getvaluesresult::getcontentdata' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\getvaluesresult::getcontentlength' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\getvaluesresult::getpaddinglength' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\getvaluesresult::getrequestid' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\getvaluesresult::gettype' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\getvaluesresult::getvalues' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\fastcgi\\record\\getvaluesresult::getversion' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\getvaluesresult::packpayload' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\getvaluesresult::setcontentdata' => 
  array (
    0 => 'self',
    'data' => 'string',
  ),
  'swoole\\fastcgi\\record\\getvaluesresult::setrequestid' => 
  array (
    0 => 'self',
    'requestId' => 'int',
  ),
  'swoole\\fastcgi\\record\\getvaluesresult::unpack' => 
  array (
    0 => 'static',
    'binaryData' => 'string',
  ),
  'swoole\\fastcgi\\record\\getvaluesresult::unpackpayload' => 
  array (
    0 => 'void',
    'self' => 'mixed',
    'binaryData' => 'string',
  ),
  'swoole\\fastcgi\\record\\params::__construct' => 
  array (
    0 => 'void',
    'values' => 'array<array-key, mixed>',
  ),
  'swoole\\fastcgi\\record\\params::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\params::getcontentdata' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\params::getcontentlength' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\params::getpaddinglength' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\params::getrequestid' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\params::gettype' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\params::getvalues' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\fastcgi\\record\\params::getversion' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\params::packpayload' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\params::setcontentdata' => 
  array (
    0 => 'self',
    'data' => 'string',
  ),
  'swoole\\fastcgi\\record\\params::setrequestid' => 
  array (
    0 => 'self',
    'requestId' => 'int',
  ),
  'swoole\\fastcgi\\record\\params::unpack' => 
  array (
    0 => 'static',
    'binaryData' => 'string',
  ),
  'swoole\\fastcgi\\record\\params::unpackpayload' => 
  array (
    0 => 'void',
    'self' => 'mixed',
    'binaryData' => 'string',
  ),
  'swoole\\fastcgi\\record\\stderr::__construct' => 
  array (
    0 => 'void',
    'contentData' => 'string',
  ),
  'swoole\\fastcgi\\record\\stderr::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\stderr::getcontentdata' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\stderr::getcontentlength' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\stderr::getpaddinglength' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\stderr::getrequestid' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\stderr::gettype' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\stderr::getversion' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\stderr::packpayload' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\stderr::setcontentdata' => 
  array (
    0 => 'self',
    'data' => 'string',
  ),
  'swoole\\fastcgi\\record\\stderr::setrequestid' => 
  array (
    0 => 'self',
    'requestId' => 'int',
  ),
  'swoole\\fastcgi\\record\\stderr::unpack' => 
  array (
    0 => 'static',
    'binaryData' => 'string',
  ),
  'swoole\\fastcgi\\record\\stderr::unpackpayload' => 
  array (
    0 => 'void',
    'self' => 'self',
    'binaryData' => 'string',
  ),
  'swoole\\fastcgi\\record\\stdin::__construct' => 
  array (
    0 => 'void',
    'contentData' => 'string',
  ),
  'swoole\\fastcgi\\record\\stdin::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\stdin::getcontentdata' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\stdin::getcontentlength' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\stdin::getpaddinglength' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\stdin::getrequestid' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\stdin::gettype' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\stdin::getversion' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\stdin::packpayload' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\stdin::setcontentdata' => 
  array (
    0 => 'self',
    'data' => 'string',
  ),
  'swoole\\fastcgi\\record\\stdin::setrequestid' => 
  array (
    0 => 'self',
    'requestId' => 'int',
  ),
  'swoole\\fastcgi\\record\\stdin::unpack' => 
  array (
    0 => 'static',
    'binaryData' => 'string',
  ),
  'swoole\\fastcgi\\record\\stdin::unpackpayload' => 
  array (
    0 => 'void',
    'self' => 'self',
    'binaryData' => 'string',
  ),
  'swoole\\fastcgi\\record\\stdout::__construct' => 
  array (
    0 => 'void',
    'contentData' => 'string',
  ),
  'swoole\\fastcgi\\record\\stdout::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\stdout::getcontentdata' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\stdout::getcontentlength' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\stdout::getpaddinglength' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\stdout::getrequestid' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\stdout::gettype' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\stdout::getversion' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\stdout::packpayload' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\stdout::setcontentdata' => 
  array (
    0 => 'self',
    'data' => 'string',
  ),
  'swoole\\fastcgi\\record\\stdout::setrequestid' => 
  array (
    0 => 'self',
    'requestId' => 'int',
  ),
  'swoole\\fastcgi\\record\\stdout::unpack' => 
  array (
    0 => 'static',
    'binaryData' => 'string',
  ),
  'swoole\\fastcgi\\record\\stdout::unpackpayload' => 
  array (
    0 => 'void',
    'self' => 'self',
    'binaryData' => 'string',
  ),
  'swoole\\fastcgi\\record\\unknowntype::__construct' => 
  array (
    0 => 'void',
    'type' => 'int',
    'reserved=' => 'string',
  ),
  'swoole\\fastcgi\\record\\unknowntype::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\unknowntype::getcontentdata' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\unknowntype::getcontentlength' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\unknowntype::getpaddinglength' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\unknowntype::getrequestid' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\unknowntype::gettype' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\unknowntype::getunrecognizedtype' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\unknowntype::getversion' => 
  array (
    0 => 'int',
  ),
  'swoole\\fastcgi\\record\\unknowntype::packpayload' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\record\\unknowntype::setcontentdata' => 
  array (
    0 => 'self',
    'data' => 'string',
  ),
  'swoole\\fastcgi\\record\\unknowntype::setrequestid' => 
  array (
    0 => 'self',
    'requestId' => 'int',
  ),
  'swoole\\fastcgi\\record\\unknowntype::unpack' => 
  array (
    0 => 'static',
    'binaryData' => 'string',
  ),
  'swoole\\fastcgi\\record\\unknowntype::unpackpayload' => 
  array (
    0 => 'void',
    'self' => 'mixed',
    'binaryData' => 'string',
  ),
  'swoole\\fastcgi\\request::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\request::getbody' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\request::geterror' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\request::getkeepconn' => 
  array (
    0 => 'bool',
  ),
  'swoole\\fastcgi\\request::getparam' => 
  array (
    0 => 'null|string',
    'name' => 'string',
  ),
  'swoole\\fastcgi\\request::getparams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\fastcgi\\request::withaddedparams' => 
  array (
    0 => 'static',
    'params' => 'array<array-key, mixed>',
  ),
  'swoole\\fastcgi\\request::withbody' => 
  array (
    0 => 'self',
    'body' => 'Stringable|string',
  ),
  'swoole\\fastcgi\\request::witherror' => 
  array (
    0 => 'static',
    'error' => 'string',
  ),
  'swoole\\fastcgi\\request::withkeepconn' => 
  array (
    0 => 'self',
    'keepConn' => 'bool',
  ),
  'swoole\\fastcgi\\request::withoutparam' => 
  array (
    0 => 'static',
    'name' => 'string',
  ),
  'swoole\\fastcgi\\request::withparam' => 
  array (
    0 => 'static',
    'name' => 'string',
    'value' => 'string',
  ),
  'swoole\\fastcgi\\request::withparams' => 
  array (
    0 => 'static',
    'params' => 'array<array-key, mixed>',
  ),
  'swoole\\fastcgi\\response::__construct' => 
  array (
    0 => 'void',
    'records' => 'array<array-key, mixed>',
  ),
  'swoole\\fastcgi\\response::getbody' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\response::geterror' => 
  array (
    0 => 'string',
  ),
  'swoole\\fastcgi\\response::getparam' => 
  array (
    0 => 'null|string',
    'name' => 'string',
  ),
  'swoole\\fastcgi\\response::getparams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\fastcgi\\response::verify' => 
  array (
    0 => 'bool',
    'records' => 'array<array-key, mixed>',
  ),
  'swoole\\fastcgi\\response::withaddedparams' => 
  array (
    0 => 'static',
    'params' => 'array<array-key, mixed>',
  ),
  'swoole\\fastcgi\\response::withbody' => 
  array (
    0 => 'self',
    'body' => 'Stringable|string',
  ),
  'swoole\\fastcgi\\response::witherror' => 
  array (
    0 => 'static',
    'error' => 'string',
  ),
  'swoole\\fastcgi\\response::withoutparam' => 
  array (
    0 => 'static',
    'name' => 'string',
  ),
  'swoole\\fastcgi\\response::withparam' => 
  array (
    0 => 'static',
    'name' => 'string',
    'value' => 'string',
  ),
  'swoole\\fastcgi\\response::withparams' => 
  array (
    0 => 'static',
    'params' => 'array<array-key, mixed>',
  ),
  'swoole\\http\\client::__destruct' => 
  array (
    0 => 'void',
  ),
  'swoole\\http\\client::addfile' => 
  array (
    0 => 'void',
    'path' => 'string',
    'name' => 'string',
    'type=' => 'string',
    'filename=' => 'string',
    'offset=' => 'string',
  ),
  'swoole\\http\\client::close' => 
  array (
    0 => 'void',
  ),
  'swoole\\http\\client::download' => 
  array (
    0 => 'void',
    'path' => 'string',
    'file' => 'string',
    'callback' => 'callable',
    'offset=' => 'int',
  ),
  'swoole\\http\\client::execute' => 
  array (
    0 => 'void',
    'path' => 'string',
    'callback' => 'string',
  ),
  'swoole\\http\\client::get' => 
  array (
    0 => 'void',
    'path' => 'string',
    'callback' => 'callable',
  ),
  'swoole\\http\\client::isconnected' => 
  array (
    0 => 'bool',
  ),
  'swoole\\http\\client::on' => 
  array (
    0 => 'void',
    'event_name' => 'string',
    'callback' => 'callable',
  ),
  'swoole\\http\\client::post' => 
  array (
    0 => 'void',
    'path' => 'string',
    'data' => 'string',
    'callback' => 'callable',
  ),
  'swoole\\http\\client::push' => 
  array (
    0 => 'void',
    'data' => 'string',
    'opcode=' => 'string',
    'finish=' => 'string',
  ),
  'swoole\\http\\client::set' => 
  array (
    0 => 'void',
    'settings' => 'array<array-key, mixed>',
  ),
  'swoole\\http\\client::setcookies' => 
  array (
    0 => 'void',
    'cookies' => 'array<array-key, mixed>',
  ),
  'swoole\\http\\client::setdata' => 
  array (
    0 => 'ReturnType',
    'data' => 'string',
  ),
  'swoole\\http\\client::setheaders' => 
  array (
    0 => 'void',
    'headers' => 'array<array-key, mixed>',
  ),
  'swoole\\http\\client::setmethod' => 
  array (
    0 => 'void',
    'method' => 'string',
  ),
  'swoole\\http\\client::upgrade' => 
  array (
    0 => 'void',
    'path' => 'string',
    'callback' => 'string',
  ),
  'swoole\\http\\request::create' => 
  array (
    0 => 'Swoole\\Http\\Request',
    'options=' => 'array<array-key, mixed>',
  ),
  'swoole\\http\\request::getcontent' => 
  array (
    0 => 'false|string',
  ),
  'swoole\\http\\request::getdata' => 
  array (
    0 => 'false|string',
  ),
  'swoole\\http\\request::getmethod' => 
  array (
    0 => 'false|string',
  ),
  'swoole\\http\\request::iscompleted' => 
  array (
    0 => 'bool',
  ),
  'swoole\\http\\request::parse' => 
  array (
    0 => 'false|int',
    'data' => 'string',
  ),
  'swoole\\http\\request::rawcontent' => 
  array (
    0 => 'string',
  ),
  'swoole\\http\\response::close' => 
  array (
    0 => 'bool',
  ),
  'swoole\\http\\response::cookie' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value=' => 'string',
    'expires=' => 'int',
    'path=' => 'string',
    'domain=' => 'string',
    'secure=' => 'bool',
    'httponly=' => 'bool',
    'samesite=' => 'string',
    'priority=' => 'string',
  ),
  'swoole\\http\\response::create' => 
  array (
    0 => 'Swoole\\Http\\Response|false',
    'server=' => 'array<array-key, mixed>|int|object',
    'fd=' => 'int',
  ),
  'swoole\\http\\response::detach' => 
  array (
    0 => 'bool',
  ),
  'swoole\\http\\response::end' => 
  array (
    0 => 'bool',
    'content=' => 'null|string',
  ),
  'swoole\\http\\response::goaway' => 
  array (
    0 => 'bool',
    'error_code=' => 'int',
    'debug_data=' => 'string',
  ),
  'swoole\\http\\response::gzip' => 
  array (
    0 => 'ReturnType',
    'compress_level=' => 'string',
  ),
  'swoole\\http\\response::header' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'string',
    'format=' => 'bool',
  ),
  'swoole\\http\\response::initheader' => 
  array (
    0 => 'bool',
  ),
  'swoole\\http\\response::iswritable' => 
  array (
    0 => 'bool',
  ),
  'swoole\\http\\response::ping' => 
  array (
    0 => 'bool',
  ),
  'swoole\\http\\response::push' => 
  array (
    0 => 'bool',
    'data' => 'Swoole\\WebSocket\\Frame|string',
    'opcode=' => 'int',
    'flags=' => 'int',
  ),
  'swoole\\http\\response::rawcookie' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value=' => 'string',
    'expires=' => 'int',
    'path=' => 'string',
    'domain=' => 'string',
    'secure=' => 'bool',
    'httponly=' => 'bool',
    'samesite=' => 'string',
    'priority=' => 'string',
  ),
  'swoole\\http\\response::recv' => 
  array (
    0 => 'Swoole\\WebSocket\\Frame|false|string',
    'timeout=' => 'float',
  ),
  'swoole\\http\\response::redirect' => 
  array (
    0 => 'bool',
    'location' => 'string',
    'http_code=' => 'int',
  ),
  'swoole\\http\\response::sendfile' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'offset=' => 'int',
    'length=' => 'int',
  ),
  'swoole\\http\\response::setcookie' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value=' => 'string',
    'expires=' => 'int',
    'path=' => 'string',
    'domain=' => 'string',
    'secure=' => 'bool',
    'httponly=' => 'bool',
    'samesite=' => 'string',
    'priority=' => 'string',
  ),
  'swoole\\http\\response::setheader' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'array<array-key, mixed>|string',
    'format=' => 'bool',
  ),
  'swoole\\http\\response::setstatuscode' => 
  array (
    0 => 'bool',
    'http_code' => 'int',
    'reason=' => 'string',
  ),
  'swoole\\http\\response::status' => 
  array (
    0 => 'bool',
    'http_code' => 'int',
    'reason=' => 'string',
  ),
  'swoole\\http\\response::trailer' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'string',
  ),
  'swoole\\http\\response::upgrade' => 
  array (
    0 => 'bool',
  ),
  'swoole\\http\\response::write' => 
  array (
    0 => 'bool',
    'content' => 'string',
  ),
  'swoole\\http\\server::__construct' => 
  array (
    0 => 'void',
    'host=' => 'string',
    'port=' => 'int',
    'mode=' => 'int',
    'sock_type=' => 'int',
  ),
  'swoole\\http\\server::__destruct' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\http\\server::addcommand' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'accepted_process_types' => 'int',
    'callback' => 'callable',
  ),
  'swoole\\http\\server::addlistener' => 
  array (
    0 => 'Swoole\\Server\\Port|false',
    'host' => 'string',
    'port' => 'int',
    'sock_type' => 'int',
  ),
  'swoole\\http\\server::addprocess' => 
  array (
    0 => 'int',
    'process' => 'Swoole\\Process',
  ),
  'swoole\\http\\server::bind' => 
  array (
    0 => 'bool',
    'fd' => 'int',
    'uid' => 'int',
  ),
  'swoole\\http\\server::close' => 
  array (
    0 => 'bool',
    'fd' => 'int',
    'reset=' => 'bool',
  ),
  'swoole\\http\\server::command' => 
  array (
    0 => 'array<array-key, mixed>|false|string',
    'name' => 'string',
    'process_id' => 'int',
    'process_type' => 'int',
    'data' => 'mixed',
    'json_decode=' => 'bool',
  ),
  'swoole\\http\\server::confirm' => 
  array (
    0 => 'bool',
    'fd' => 'int',
  ),
  'swoole\\http\\server::connection_info' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'fd' => 'int',
    'reactor_id=' => 'int',
    'ignoreError=' => 'bool',
  ),
  'swoole\\http\\server::connection_list' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'start_fd=' => 'int',
    'find_count=' => 'int',
  ),
  'swoole\\http\\server::exist' => 
  array (
    0 => 'bool',
    'fd' => 'int',
  ),
  'swoole\\http\\server::exists' => 
  array (
    0 => 'bool',
    'fd' => 'int',
  ),
  'swoole\\http\\server::finish' => 
  array (
    0 => 'bool',
    'data' => 'mixed',
  ),
  'swoole\\http\\server::getcallback' => 
  array (
    0 => 'Closure|array<array-key, mixed>|null|string',
    'event_name' => 'string',
  ),
  'swoole\\http\\server::getclientinfo' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'fd' => 'int',
    'reactor_id=' => 'int',
    'ignoreError=' => 'bool',
  ),
  'swoole\\http\\server::getclientlist' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'start_fd=' => 'int',
    'find_count=' => 'int',
  ),
  'swoole\\http\\server::getlasterror' => 
  array (
    0 => 'int',
  ),
  'swoole\\http\\server::getmanagerpid' => 
  array (
    0 => 'int',
  ),
  'swoole\\http\\server::getmasterpid' => 
  array (
    0 => 'int',
  ),
  'swoole\\http\\server::getworkerid' => 
  array (
    0 => 'false|int',
  ),
  'swoole\\http\\server::getworkerpid' => 
  array (
    0 => 'false|int',
    'worker_id=' => 'int',
  ),
  'swoole\\http\\server::getworkerstatus' => 
  array (
    0 => 'false|int',
    'worker_id=' => 'int',
  ),
  'swoole\\http\\server::heartbeat' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'ifCloseConnection=' => 'bool',
  ),
  'swoole\\http\\server::listen' => 
  array (
    0 => 'Swoole\\Server\\Port|false',
    'host' => 'string',
    'port' => 'int',
    'sock_type' => 'int',
  ),
  'swoole\\http\\server::on' => 
  array (
    0 => 'bool',
    'event_name' => 'string',
    'callback' => 'callable',
  ),
  'swoole\\http\\server::pause' => 
  array (
    0 => 'bool',
    'fd' => 'int',
  ),
  'swoole\\http\\server::protect' => 
  array (
    0 => 'bool',
    'fd' => 'int',
    'is_protected=' => 'bool',
  ),
  'swoole\\http\\server::reload' => 
  array (
    0 => 'bool',
    'only_reload_taskworker=' => 'bool',
  ),
  'swoole\\http\\server::resume' => 
  array (
    0 => 'bool',
    'fd' => 'int',
  ),
  'swoole\\http\\server::send' => 
  array (
    0 => 'bool',
    'fd' => 'int|string',
    'send_data' => 'string',
    'serverSocket=' => 'int',
  ),
  'swoole\\http\\server::sendfile' => 
  array (
    0 => 'bool',
    'conn_fd' => 'int',
    'filename' => 'string',
    'offset=' => 'int',
    'length=' => 'int',
  ),
  'swoole\\http\\server::sendmessage' => 
  array (
    0 => 'bool',
    'message' => 'mixed',
    'dst_worker_id' => 'int',
  ),
  'swoole\\http\\server::sendto' => 
  array (
    0 => 'bool',
    'ip' => 'string',
    'port' => 'int',
    'send_data' => 'string',
    'server_socket=' => 'int',
  ),
  'swoole\\http\\server::sendwait' => 
  array (
    0 => 'bool',
    'conn_fd' => 'int',
    'send_data' => 'string',
  ),
  'swoole\\http\\server::set' => 
  array (
    0 => 'bool',
    'settings' => 'array<array-key, mixed>',
  ),
  'swoole\\http\\server::shutdown' => 
  array (
    0 => 'bool',
  ),
  'swoole\\http\\server::start' => 
  array (
    0 => 'bool',
  ),
  'swoole\\http\\server::stats' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\http\\server::stop' => 
  array (
    0 => 'bool',
    'workerId=' => 'int',
    'waitEvent=' => 'bool',
  ),
  'swoole\\http\\server::task' => 
  array (
    0 => 'false|int',
    'data' => 'mixed',
    'taskWorkerIndex=' => 'int',
    'finishCallback=' => 'callable|null',
  ),
  'swoole\\http\\server::taskco' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'tasks' => 'array<array-key, mixed>',
    'timeout=' => 'float',
  ),
  'swoole\\http\\server::taskwait' => 
  array (
    0 => 'mixed',
    'data' => 'mixed',
    'timeout=' => 'float',
    'taskWorkerIndex=' => 'int',
  ),
  'swoole\\http\\server::taskwaitmulti' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'tasks' => 'array<array-key, mixed>',
    'timeout=' => 'float',
  ),
  'swoole\\http\\status::getreasonphrase' => 
  array (
    0 => 'string',
    'value' => 'int',
  ),
  'swoole\\http\\status::getreasonphrases' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\lock::__construct' => 
  array (
    0 => 'void',
    'type=' => 'int',
    'filename=' => 'string',
  ),
  'swoole\\lock::__destruct' => 
  array (
    0 => 'void',
  ),
  'swoole\\lock::destroy' => 
  array (
    0 => 'void',
  ),
  'swoole\\lock::lock' => 
  array (
    0 => 'bool',
  ),
  'swoole\\lock::lock_read' => 
  array (
    0 => 'bool',
  ),
  'swoole\\lock::lockwait' => 
  array (
    0 => 'bool',
    'timeout=' => 'float',
  ),
  'swoole\\lock::trylock' => 
  array (
    0 => 'bool',
  ),
  'swoole\\lock::trylock_read' => 
  array (
    0 => 'bool',
  ),
  'swoole\\lock::unlock' => 
  array (
    0 => 'bool',
  ),
  'swoole\\mmap::open' => 
  array (
    0 => 'ReturnType',
    'filename' => 'string',
    'size=' => 'string',
    'offset=' => 'string',
  ),
  'swoole\\multibytestringobject::__construct' => 
  array (
    0 => 'void',
    'string=' => 'string',
  ),
  'swoole\\multibytestringobject::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\multibytestringobject::append' => 
  array (
    0 => 'static',
    'str' => 'mixed',
  ),
  'swoole\\multibytestringobject::char' => 
  array (
    0 => 'string',
    'index' => 'int',
  ),
  'swoole\\multibytestringobject::chunk' => 
  array (
    0 => 'Swoole\\ArrayObject',
    'length=' => 'int',
  ),
  'swoole\\multibytestringobject::chunksplit' => 
  array (
    0 => 'static',
    'length=' => 'int',
    'separator=' => 'string',
  ),
  'swoole\\multibytestringobject::contains' => 
  array (
    0 => 'bool',
    'subString' => 'string',
  ),
  'swoole\\multibytestringobject::detectarraytype' => 
  array (
    0 => 'Swoole\\ArrayObject',
    'value' => 'array<array-key, mixed>',
  ),
  'swoole\\multibytestringobject::endswith' => 
  array (
    0 => 'bool',
    'needle' => 'string',
  ),
  'swoole\\multibytestringobject::equals' => 
  array (
    0 => 'bool',
    'str' => 'mixed',
    'strict=' => 'bool',
  ),
  'swoole\\multibytestringobject::from' => 
  array (
    0 => 'static',
    'string=' => 'string',
  ),
  'swoole\\multibytestringobject::indexof' => 
  array (
    0 => 'false|int',
    'needle' => 'string',
    'offset=' => 'int',
    'encoding=' => 'null|string',
  ),
  'swoole\\multibytestringobject::ipos' => 
  array (
    0 => 'false|int',
    'needle' => 'string',
    'offset=' => 'int',
    'encoding=' => 'null|string',
  ),
  'swoole\\multibytestringobject::lastindexof' => 
  array (
    0 => 'false|int',
    'needle' => 'string',
    'offset=' => 'int',
    'encoding=' => 'null|string',
  ),
  'swoole\\multibytestringobject::length' => 
  array (
    0 => 'int',
  ),
  'swoole\\multibytestringobject::lower' => 
  array (
    0 => 'static',
  ),
  'swoole\\multibytestringobject::ltrim' => 
  array (
    0 => 'self',
  ),
  'swoole\\multibytestringobject::pos' => 
  array (
    0 => 'false|int',
    'needle' => 'string',
    'offset=' => 'int',
    'encoding=' => 'null|string',
  ),
  'swoole\\multibytestringobject::repeat' => 
  array (
    0 => 'static',
    'times' => 'int',
  ),
  'swoole\\multibytestringobject::replace' => 
  array (
    0 => 'static',
    'search' => 'string',
    'replace' => 'string',
    '&count=' => 'mixed',
  ),
  'swoole\\multibytestringobject::reverse' => 
  array (
    0 => 'static',
  ),
  'swoole\\multibytestringobject::rpos' => 
  array (
    0 => 'false|int',
    'needle' => 'string',
    'offset=' => 'int',
    'encoding=' => 'null|string',
  ),
  'swoole\\multibytestringobject::rtrim' => 
  array (
    0 => 'self',
  ),
  'swoole\\multibytestringobject::split' => 
  array (
    0 => 'Swoole\\ArrayObject',
    'delimiter' => 'string',
    'limit=' => 'int',
  ),
  'swoole\\multibytestringobject::startswith' => 
  array (
    0 => 'bool',
    'needle' => 'string',
  ),
  'swoole\\multibytestringobject::substr' => 
  array (
    0 => 'static',
    'start' => 'int',
    'length=' => 'int|null',
    'encoding=' => 'null|string',
  ),
  'swoole\\multibytestringobject::tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\multibytestringobject::trim' => 
  array (
    0 => 'static',
    'characters=' => 'string',
  ),
  'swoole\\multibytestringobject::upper' => 
  array (
    0 => 'static',
  ),
  'swoole\\mysql::__destruct' => 
  array (
    0 => 'void',
  ),
  'swoole\\mysql::close' => 
  array (
    0 => 'void',
  ),
  'swoole\\mysql::connect' => 
  array (
    0 => 'void',
    'server_config' => 'array<array-key, mixed>',
    'callback' => 'callable',
  ),
  'swoole\\mysql::getbuffer' => 
  array (
    0 => 'ReturnType',
  ),
  'swoole\\mysql::on' => 
  array (
    0 => 'void',
    'event_name' => 'string',
    'callback' => 'callable',
  ),
  'swoole\\mysql::query' => 
  array (
    0 => 'ReturnType',
    'sql' => 'string',
    'callback' => 'callable',
  ),
  'swoole\\nameresolver::__construct' => 
  array (
    0 => 'void',
    'url' => 'mixed',
    'prefix=' => 'mixed',
  ),
  'swoole\\nameresolver::checkresponse' => 
  array (
    0 => 'bool',
    'response' => 'Swoole\\Coroutine\\Http\\ClientProxy',
  ),
  'swoole\\nameresolver::checkserverurl' => 
  array (
    0 => 'mixed',
    'url' => 'string',
  ),
  'swoole\\nameresolver::getcluster' => 
  array (
    0 => 'Swoole\\NameResolver\\Cluster|null',
    'name' => 'string',
  ),
  'swoole\\nameresolver::getfilter' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\nameresolver::hasfilter' => 
  array (
    0 => 'bool',
  ),
  'swoole\\nameresolver::join' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'ip' => 'string',
    'port' => 'int',
    'options=' => 'array<array-key, mixed>',
  ),
  'swoole\\nameresolver::leave' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'ip' => 'string',
    'port' => 'int',
  ),
  'swoole\\nameresolver::lookup' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'swoole\\nameresolver::withfilter' => 
  array (
    0 => 'self',
    'fn' => 'callable',
  ),
  'swoole\\nameresolver\\cluster::add' => 
  array (
    0 => 'void',
    'host' => 'string',
    'port' => 'int',
    'weight=' => 'int',
  ),
  'swoole\\nameresolver\\cluster::count' => 
  array (
    0 => 'int',
  ),
  'swoole\\nameresolver\\cluster::pop' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\nameresolver\\consul::__construct' => 
  array (
    0 => 'void',
    'url' => 'mixed',
    'prefix=' => 'mixed',
  ),
  'swoole\\nameresolver\\consul::checkresponse' => 
  array (
    0 => 'bool',
    'response' => 'Swoole\\Coroutine\\Http\\ClientProxy',
  ),
  'swoole\\nameresolver\\consul::checkserverurl' => 
  array (
    0 => 'mixed',
    'url' => 'string',
  ),
  'swoole\\nameresolver\\consul::enablemaintenancemode' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'ip' => 'string',
    'port' => 'int',
  ),
  'swoole\\nameresolver\\consul::getcluster' => 
  array (
    0 => 'Swoole\\NameResolver\\Cluster|null',
    'name' => 'string',
  ),
  'swoole\\nameresolver\\consul::getfilter' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\nameresolver\\consul::getserviceid' => 
  array (
    0 => 'string',
    'name' => 'string',
    'ip' => 'string',
    'port' => 'int',
  ),
  'swoole\\nameresolver\\consul::hasfilter' => 
  array (
    0 => 'bool',
  ),
  'swoole\\nameresolver\\consul::join' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'ip' => 'string',
    'port' => 'int',
    'options=' => 'array<array-key, mixed>',
  ),
  'swoole\\nameresolver\\consul::leave' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'ip' => 'string',
    'port' => 'int',
  ),
  'swoole\\nameresolver\\consul::lookup' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'swoole\\nameresolver\\consul::withfilter' => 
  array (
    0 => 'self',
    'fn' => 'callable',
  ),
  'swoole\\nameresolver\\context::__construct' => 
  array (
    0 => 'void',
    'family=' => 'int',
    'withPort=' => 'bool',
  ),
  'swoole\\nameresolver\\exception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'swoole\\nameresolver\\exception::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\nameresolver\\exception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\nameresolver\\exception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\nameresolver\\exception::getfile' => 
  array (
    0 => 'string',
  ),
  'swoole\\nameresolver\\exception::getline' => 
  array (
    0 => 'int',
  ),
  'swoole\\nameresolver\\exception::getmessage' => 
  array (
    0 => 'string',
  ),
  'swoole\\nameresolver\\exception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'swoole\\nameresolver\\exception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\nameresolver\\exception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'swoole\\nameresolver\\nacos::__construct' => 
  array (
    0 => 'void',
    'url' => 'mixed',
    'prefix=' => 'mixed',
  ),
  'swoole\\nameresolver\\nacos::checkresponse' => 
  array (
    0 => 'bool',
    'response' => 'Swoole\\Coroutine\\Http\\ClientProxy',
  ),
  'swoole\\nameresolver\\nacos::checkserverurl' => 
  array (
    0 => 'mixed',
    'url' => 'string',
  ),
  'swoole\\nameresolver\\nacos::getcluster' => 
  array (
    0 => 'Swoole\\NameResolver\\Cluster|null',
    'name' => 'string',
  ),
  'swoole\\nameresolver\\nacos::getfilter' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\nameresolver\\nacos::hasfilter' => 
  array (
    0 => 'bool',
  ),
  'swoole\\nameresolver\\nacos::join' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'ip' => 'string',
    'port' => 'int',
    'options=' => 'array<array-key, mixed>',
  ),
  'swoole\\nameresolver\\nacos::leave' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'ip' => 'string',
    'port' => 'int',
  ),
  'swoole\\nameresolver\\nacos::lookup' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'swoole\\nameresolver\\nacos::withfilter' => 
  array (
    0 => 'self',
    'fn' => 'callable',
  ),
  'swoole\\nameresolver\\redis::__construct' => 
  array (
    0 => 'void',
    'url' => 'mixed',
    'prefix=' => 'mixed',
  ),
  'swoole\\nameresolver\\redis::checkresponse' => 
  array (
    0 => 'bool',
    'response' => 'Swoole\\Coroutine\\Http\\ClientProxy',
  ),
  'swoole\\nameresolver\\redis::checkserverurl' => 
  array (
    0 => 'mixed',
    'url' => 'string',
  ),
  'swoole\\nameresolver\\redis::connect' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\nameresolver\\redis::getcluster' => 
  array (
    0 => 'Swoole\\NameResolver\\Cluster|null',
    'name' => 'string',
  ),
  'swoole\\nameresolver\\redis::getfilter' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\nameresolver\\redis::hasfilter' => 
  array (
    0 => 'bool',
  ),
  'swoole\\nameresolver\\redis::join' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'ip' => 'string',
    'port' => 'int',
    'options=' => 'array<array-key, mixed>',
  ),
  'swoole\\nameresolver\\redis::leave' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'ip' => 'string',
    'port' => 'int',
  ),
  'swoole\\nameresolver\\redis::lookup' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'swoole\\nameresolver\\redis::withfilter' => 
  array (
    0 => 'self',
    'fn' => 'callable',
  ),
  'swoole\\objectproxy::__call' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'arguments' => 'array<array-key, mixed>',
  ),
  'swoole\\objectproxy::__construct' => 
  array (
    0 => 'void',
    'object' => 'object',
  ),
  'swoole\\objectproxy::__get' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'swoole\\objectproxy::__getobject' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\objectproxy::__invoke' => 
  array (
    0 => 'mixed',
    '...arguments=' => 'mixed',
  ),
  'swoole\\objectproxy::__isset' => 
  array (
    0 => 'mixed',
    'name' => 'mixed',
  ),
  'swoole\\objectproxy::__set' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'swoole\\objectproxy::__unset' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'swoole\\process::__construct' => 
  array (
    0 => 'void',
    'callback' => 'callable',
    'redirect_stdin_and_stdout=' => 'bool',
    'pipe_type=' => 'int',
    'enable_coroutine=' => 'bool',
  ),
  'swoole\\process::__destruct' => 
  array (
    0 => 'void',
  ),
  'swoole\\process::alarm' => 
  array (
    0 => 'bool',
    'usec' => 'int',
    'type=' => 'int',
  ),
  'swoole\\process::close' => 
  array (
    0 => 'bool',
    'which=' => 'int',
  ),
  'swoole\\process::daemon' => 
  array (
    0 => 'bool',
    'nochdir=' => 'bool',
    'noclose=' => 'bool',
    'pipes=' => 'array<array-key, mixed>',
  ),
  'swoole\\process::exec' => 
  array (
    0 => 'bool',
    'exec_file' => 'string',
    'args' => 'array<array-key, mixed>',
  ),
  'swoole\\process::exit' => 
  array (
    0 => 'void',
    'exit_code=' => 'int',
  ),
  'swoole\\process::exportsocket' => 
  array (
    0 => 'Swoole\\Coroutine\\Socket|false',
  ),
  'swoole\\process::freequeue' => 
  array (
    0 => 'bool',
  ),
  'swoole\\process::getpriority' => 
  array (
    0 => 'false|int',
    'which' => 'int',
    'who=' => 'int|null',
  ),
  'swoole\\process::kill' => 
  array (
    0 => 'bool',
    'pid' => 'int',
    'signal_no=' => 'int',
  ),
  'swoole\\process::name' => 
  array (
    0 => 'bool',
    'process_name' => 'string',
  ),
  'swoole\\process::pop' => 
  array (
    0 => 'false|string',
    'size=' => 'int',
  ),
  'swoole\\process::push' => 
  array (
    0 => 'bool',
    'data' => 'string',
  ),
  'swoole\\process::read' => 
  array (
    0 => 'string',
    'size=' => 'int',
  ),
  'swoole\\process::set' => 
  array (
    0 => 'void',
    'settings' => 'array<array-key, mixed>',
  ),
  'swoole\\process::setblocking' => 
  array (
    0 => 'void',
    'blocking' => 'bool',
  ),
  'swoole\\process::setpriority' => 
  array (
    0 => 'bool',
    'which' => 'int',
    'priority' => 'int',
    'who=' => 'int|null',
  ),
  'swoole\\process::settimeout' => 
  array (
    0 => 'bool',
    'seconds' => 'float',
  ),
  'swoole\\process::signal' => 
  array (
    0 => 'bool',
    'signal_no' => 'int',
    'callback=' => 'callable|null',
  ),
  'swoole\\process::start' => 
  array (
    0 => 'bool|int',
  ),
  'swoole\\process::statqueue' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\process::usequeue' => 
  array (
    0 => 'bool',
    'key=' => 'int',
    'mode=' => 'int',
    'capacity=' => 'int',
  ),
  'swoole\\process::wait' => 
  array (
    0 => 'array<array-key, mixed>',
    'blocking=' => 'bool',
  ),
  'swoole\\process::write' => 
  array (
    0 => 'int',
    'data' => 'string',
  ),
  'swoole\\process\\manager::__construct' => 
  array (
    0 => 'void',
    'ipcType=' => 'int',
    'msgQueueKey=' => 'int',
  ),
  'swoole\\process\\manager::add' => 
  array (
    0 => 'self',
    'func' => 'callable',
    'enableCoroutine=' => 'bool',
  ),
  'swoole\\process\\manager::addbatch' => 
  array (
    0 => 'self',
    'workerNum' => 'int',
    'func' => 'callable',
    'enableCoroutine=' => 'bool',
  ),
  'swoole\\process\\manager::getipctype' => 
  array (
    0 => 'int',
  ),
  'swoole\\process\\manager::getmsgqueuekey' => 
  array (
    0 => 'int',
  ),
  'swoole\\process\\manager::setipctype' => 
  array (
    0 => 'self',
    'ipcType' => 'int',
  ),
  'swoole\\process\\manager::setmsgqueuekey' => 
  array (
    0 => 'self',
    'msgQueueKey' => 'int',
  ),
  'swoole\\process\\manager::start' => 
  array (
    0 => 'void',
  ),
  'swoole\\process\\pool::__construct' => 
  array (
    0 => 'void',
    'worker_num' => 'int',
    'ipc_type=' => 'int',
    'msgqueue_key=' => 'int',
    'enable_coroutine=' => 'bool',
  ),
  'swoole\\process\\pool::__destruct' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\process\\pool::detach' => 
  array (
    0 => 'bool',
  ),
  'swoole\\process\\pool::getprocess' => 
  array (
    0 => 'Swoole\\Process|false',
    'work_id=' => 'int',
  ),
  'swoole\\process\\pool::listen' => 
  array (
    0 => 'bool',
    'host' => 'string',
    'port=' => 'int',
    'backlog=' => 'int',
  ),
  'swoole\\process\\pool::on' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'callback' => 'callable',
  ),
  'swoole\\process\\pool::sendmessage' => 
  array (
    0 => 'bool',
    'data' => 'string',
    'dst_worker_id' => 'int',
  ),
  'swoole\\process\\pool::set' => 
  array (
    0 => 'void',
    'settings' => 'array<array-key, mixed>',
  ),
  'swoole\\process\\pool::shutdown' => 
  array (
    0 => 'bool',
  ),
  'swoole\\process\\pool::start' => 
  array (
    0 => 'false|null',
  ),
  'swoole\\process\\pool::stop' => 
  array (
    0 => 'void',
  ),
  'swoole\\process\\pool::write' => 
  array (
    0 => 'bool',
    'data' => 'string',
  ),
  'swoole\\process\\processmanager::__construct' => 
  array (
    0 => 'void',
    'ipcType=' => 'int',
    'msgQueueKey=' => 'int',
  ),
  'swoole\\process\\processmanager::add' => 
  array (
    0 => 'self',
    'func' => 'callable',
    'enableCoroutine=' => 'bool',
  ),
  'swoole\\process\\processmanager::addbatch' => 
  array (
    0 => 'self',
    'workerNum' => 'int',
    'func' => 'callable',
    'enableCoroutine=' => 'bool',
  ),
  'swoole\\process\\processmanager::getipctype' => 
  array (
    0 => 'int',
  ),
  'swoole\\process\\processmanager::getmsgqueuekey' => 
  array (
    0 => 'int',
  ),
  'swoole\\process\\processmanager::setipctype' => 
  array (
    0 => 'self',
    'ipcType' => 'int',
  ),
  'swoole\\process\\processmanager::setmsgqueuekey' => 
  array (
    0 => 'self',
    'msgQueueKey' => 'int',
  ),
  'swoole\\process\\processmanager::start' => 
  array (
    0 => 'void',
  ),
  'swoole\\redis\\server::__construct' => 
  array (
    0 => 'void',
    'host=' => 'string',
    'port=' => 'int',
    'mode=' => 'int',
    'sock_type=' => 'int',
  ),
  'swoole\\redis\\server::__destruct' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\redis\\server::addcommand' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'accepted_process_types' => 'int',
    'callback' => 'callable',
  ),
  'swoole\\redis\\server::addlistener' => 
  array (
    0 => 'Swoole\\Server\\Port|false',
    'host' => 'string',
    'port' => 'int',
    'sock_type' => 'int',
  ),
  'swoole\\redis\\server::addprocess' => 
  array (
    0 => 'int',
    'process' => 'Swoole\\Process',
  ),
  'swoole\\redis\\server::bind' => 
  array (
    0 => 'bool',
    'fd' => 'int',
    'uid' => 'int',
  ),
  'swoole\\redis\\server::close' => 
  array (
    0 => 'bool',
    'fd' => 'int',
    'reset=' => 'bool',
  ),
  'swoole\\redis\\server::command' => 
  array (
    0 => 'array<array-key, mixed>|false|string',
    'name' => 'string',
    'process_id' => 'int',
    'process_type' => 'int',
    'data' => 'mixed',
    'json_decode=' => 'bool',
  ),
  'swoole\\redis\\server::confirm' => 
  array (
    0 => 'bool',
    'fd' => 'int',
  ),
  'swoole\\redis\\server::connection_info' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'fd' => 'int',
    'reactor_id=' => 'int',
    'ignoreError=' => 'bool',
  ),
  'swoole\\redis\\server::connection_list' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'start_fd=' => 'int',
    'find_count=' => 'int',
  ),
  'swoole\\redis\\server::exist' => 
  array (
    0 => 'bool',
    'fd' => 'int',
  ),
  'swoole\\redis\\server::exists' => 
  array (
    0 => 'bool',
    'fd' => 'int',
  ),
  'swoole\\redis\\server::finish' => 
  array (
    0 => 'bool',
    'data' => 'mixed',
  ),
  'swoole\\redis\\server::format' => 
  array (
    0 => 'false|string',
    'type' => 'int',
    'value=' => 'string',
  ),
  'swoole\\redis\\server::getcallback' => 
  array (
    0 => 'Closure|array<array-key, mixed>|null|string',
    'event_name' => 'string',
  ),
  'swoole\\redis\\server::getclientinfo' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'fd' => 'int',
    'reactor_id=' => 'int',
    'ignoreError=' => 'bool',
  ),
  'swoole\\redis\\server::getclientlist' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'start_fd=' => 'int',
    'find_count=' => 'int',
  ),
  'swoole\\redis\\server::gethandler' => 
  array (
    0 => 'Closure',
    'command' => 'string',
  ),
  'swoole\\redis\\server::getlasterror' => 
  array (
    0 => 'int',
  ),
  'swoole\\redis\\server::getmanagerpid' => 
  array (
    0 => 'int',
  ),
  'swoole\\redis\\server::getmasterpid' => 
  array (
    0 => 'int',
  ),
  'swoole\\redis\\server::getworkerid' => 
  array (
    0 => 'false|int',
  ),
  'swoole\\redis\\server::getworkerpid' => 
  array (
    0 => 'false|int',
    'worker_id=' => 'int',
  ),
  'swoole\\redis\\server::getworkerstatus' => 
  array (
    0 => 'false|int',
    'worker_id=' => 'int',
  ),
  'swoole\\redis\\server::heartbeat' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'ifCloseConnection=' => 'bool',
  ),
  'swoole\\redis\\server::listen' => 
  array (
    0 => 'Swoole\\Server\\Port|false',
    'host' => 'string',
    'port' => 'int',
    'sock_type' => 'int',
  ),
  'swoole\\redis\\server::on' => 
  array (
    0 => 'bool',
    'event_name' => 'string',
    'callback' => 'callable',
  ),
  'swoole\\redis\\server::pause' => 
  array (
    0 => 'bool',
    'fd' => 'int',
  ),
  'swoole\\redis\\server::protect' => 
  array (
    0 => 'bool',
    'fd' => 'int',
    'is_protected=' => 'bool',
  ),
  'swoole\\redis\\server::reload' => 
  array (
    0 => 'bool',
    'only_reload_taskworker=' => 'bool',
  ),
  'swoole\\redis\\server::resume' => 
  array (
    0 => 'bool',
    'fd' => 'int',
  ),
  'swoole\\redis\\server::send' => 
  array (
    0 => 'bool',
    'fd' => 'int|string',
    'send_data' => 'string',
    'serverSocket=' => 'int',
  ),
  'swoole\\redis\\server::sendfile' => 
  array (
    0 => 'bool',
    'conn_fd' => 'int',
    'filename' => 'string',
    'offset=' => 'int',
    'length=' => 'int',
  ),
  'swoole\\redis\\server::sendmessage' => 
  array (
    0 => 'bool',
    'message' => 'mixed',
    'dst_worker_id' => 'int',
  ),
  'swoole\\redis\\server::sendto' => 
  array (
    0 => 'bool',
    'ip' => 'string',
    'port' => 'int',
    'send_data' => 'string',
    'server_socket=' => 'int',
  ),
  'swoole\\redis\\server::sendwait' => 
  array (
    0 => 'bool',
    'conn_fd' => 'int',
    'send_data' => 'string',
  ),
  'swoole\\redis\\server::set' => 
  array (
    0 => 'bool',
    'settings' => 'array<array-key, mixed>',
  ),
  'swoole\\redis\\server::sethandler' => 
  array (
    0 => 'bool',
    'command' => 'string',
    'callback' => 'callable',
  ),
  'swoole\\redis\\server::shutdown' => 
  array (
    0 => 'bool',
  ),
  'swoole\\redis\\server::start' => 
  array (
    0 => 'bool',
  ),
  'swoole\\redis\\server::stats' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\redis\\server::stop' => 
  array (
    0 => 'bool',
    'workerId=' => 'int',
    'waitEvent=' => 'bool',
  ),
  'swoole\\redis\\server::task' => 
  array (
    0 => 'false|int',
    'data' => 'mixed',
    'taskWorkerIndex=' => 'int',
    'finishCallback=' => 'callable|null',
  ),
  'swoole\\redis\\server::taskco' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'tasks' => 'array<array-key, mixed>',
    'timeout=' => 'float',
  ),
  'swoole\\redis\\server::taskwait' => 
  array (
    0 => 'mixed',
    'data' => 'mixed',
    'timeout=' => 'float',
    'taskWorkerIndex=' => 'int',
  ),
  'swoole\\redis\\server::taskwaitmulti' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'tasks' => 'array<array-key, mixed>',
    'timeout=' => 'float',
  ),
  'swoole\\runtime::enablecoroutine' => 
  array (
    0 => 'bool',
    'enable=' => 'bool|int',
    'flags=' => 'int',
  ),
  'swoole\\runtime::gethookflags' => 
  array (
    0 => 'int',
  ),
  'swoole\\runtime::sethookflags' => 
  array (
    0 => 'bool',
    'flags' => 'int',
  ),
  'swoole\\server::__construct' => 
  array (
    0 => 'void',
    'host=' => 'string',
    'port=' => 'int',
    'mode=' => 'int',
    'sock_type=' => 'int',
  ),
  'swoole\\server::__destruct' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\server::addcommand' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'accepted_process_types' => 'int',
    'callback' => 'callable',
  ),
  'swoole\\server::addlistener' => 
  array (
    0 => 'Swoole\\Server\\Port|false',
    'host' => 'string',
    'port' => 'int',
    'sock_type' => 'int',
  ),
  'swoole\\server::addprocess' => 
  array (
    0 => 'int',
    'process' => 'Swoole\\Process',
  ),
  'swoole\\server::bind' => 
  array (
    0 => 'bool',
    'fd' => 'int',
    'uid' => 'int',
  ),
  'swoole\\server::close' => 
  array (
    0 => 'bool',
    'fd' => 'int',
    'reset=' => 'bool',
  ),
  'swoole\\server::command' => 
  array (
    0 => 'array<array-key, mixed>|false|string',
    'name' => 'string',
    'process_id' => 'int',
    'process_type' => 'int',
    'data' => 'mixed',
    'json_decode=' => 'bool',
  ),
  'swoole\\server::confirm' => 
  array (
    0 => 'bool',
    'fd' => 'int',
  ),
  'swoole\\server::connection_info' => 
  array (
    0 => 'array<array-key, mixed>',
    'fd' => 'int',
    'reactor_id=' => 'int',
    'ignoreError=' => 'bool',
  ),
  'swoole\\server::connection_list' => 
  array (
    0 => 'array<array-key, mixed>',
    'start_fd=' => 'int',
    'find_count=' => 'int',
  ),
  'swoole\\server::exist' => 
  array (
    0 => 'bool',
    'fd' => 'int',
  ),
  'swoole\\server::exists' => 
  array (
    0 => 'bool',
    'fd' => 'int',
  ),
  'swoole\\server::finish' => 
  array (
    0 => 'bool',
    'data' => 'string',
  ),
  'swoole\\server::getcallback' => 
  array (
    0 => 'Closure|array<array-key, mixed>|null|string',
    'event_name' => 'string',
  ),
  'swoole\\server::getclientinfo' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'fd' => 'int',
    'reactor_id=' => 'int',
    'ignoreError=' => 'bool',
  ),
  'swoole\\server::getclientlist' => 
  array (
    0 => 'array<array-key, mixed>',
    'start_fd=' => 'int',
    'find_count=' => 'int',
  ),
  'swoole\\server::getlasterror' => 
  array (
    0 => 'int',
  ),
  'swoole\\server::getmanagerpid' => 
  array (
    0 => 'int',
  ),
  'swoole\\server::getmasterpid' => 
  array (
    0 => 'int',
  ),
  'swoole\\server::getworkerid' => 
  array (
    0 => 'false|int',
  ),
  'swoole\\server::getworkerpid' => 
  array (
    0 => 'false|int',
    'worker_id=' => 'int',
  ),
  'swoole\\server::getworkerstatus' => 
  array (
    0 => 'false|int',
    'worker_id=' => 'int',
  ),
  'swoole\\server::heartbeat' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'ifCloseConnection=' => 'bool',
  ),
  'swoole\\server::listen' => 
  array (
    0 => 'Swoole\\Server\\Port|false',
    'host' => 'string',
    'port' => 'int',
    'sock_type' => 'int',
  ),
  'swoole\\server::on' => 
  array (
    0 => 'bool',
    'event_name' => 'string',
    'callback' => 'callable',
  ),
  'swoole\\server::pause' => 
  array (
    0 => 'bool',
    'fd' => 'int',
  ),
  'swoole\\server::protect' => 
  array (
    0 => 'bool',
    'fd' => 'int',
    'is_protected=' => 'bool',
  ),
  'swoole\\server::reload' => 
  array (
    0 => 'bool',
    'only_reload_taskworker=' => 'bool',
  ),
  'swoole\\server::resume' => 
  array (
    0 => 'bool',
    'fd' => 'int',
  ),
  'swoole\\server::send' => 
  array (
    0 => 'bool',
    'fd' => 'int',
    'send_data' => 'string',
    'serverSocket=' => 'int',
  ),
  'swoole\\server::sendfile' => 
  array (
    0 => 'bool',
    'conn_fd' => 'int',
    'filename' => 'string',
    'offset=' => 'int',
    'length=' => 'int',
  ),
  'swoole\\server::sendmessage' => 
  array (
    0 => 'bool',
    'message' => 'int',
    'dst_worker_id' => 'int',
  ),
  'swoole\\server::sendto' => 
  array (
    0 => 'bool',
    'ip' => 'string',
    'port' => 'int',
    'send_data' => 'string',
    'server_socket=' => 'int',
  ),
  'swoole\\server::sendwait' => 
  array (
    0 => 'bool',
    'conn_fd' => 'int',
    'send_data' => 'string',
  ),
  'swoole\\server::set' => 
  array (
    0 => 'bool',
    'settings' => 'array<array-key, mixed>',
  ),
  'swoole\\server::shutdown' => 
  array (
    0 => 'bool',
  ),
  'swoole\\server::start' => 
  array (
    0 => 'bool',
  ),
  'swoole\\server::stats' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\server::stop' => 
  array (
    0 => 'bool',
    'workerId=' => 'int',
    'waitEvent=' => 'bool',
  ),
  'swoole\\server::task' => 
  array (
    0 => 'false|int',
    'data' => 'string',
    'taskWorkerIndex=' => 'int',
    'finishCallback=' => 'callable|null',
  ),
  'swoole\\server::taskco' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'tasks' => 'array<array-key, mixed>',
    'timeout=' => 'float',
  ),
  'swoole\\server::taskwait' => 
  array (
    0 => 'void',
    'data' => 'string',
    'timeout=' => 'float',
    'taskWorkerIndex=' => 'int',
  ),
  'swoole\\server::taskwaitmulti' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'tasks' => 'array<array-key, mixed>',
    'timeout=' => 'float',
  ),
  'swoole\\server\\admin::getaccesstoken' => 
  array (
    0 => 'string',
  ),
  'swoole\\server\\admin::getarraymemorysize' => 
  array (
    0 => 'int',
    'a' => 'array<array-key, mixed>',
  ),
  'swoole\\server\\admin::getobjectmemorysize' => 
  array (
    0 => 'int',
    'o' => 'object',
  ),
  'swoole\\server\\admin::getprocesscpuusage' => 
  array (
    0 => 'mixed',
    'pid' => 'mixed',
  ),
  'swoole\\server\\admin::getprocessmemoryrealusage' => 
  array (
    0 => 'mixed',
    'pid=' => 'mixed',
  ),
  'swoole\\server\\admin::getprocessstatus' => 
  array (
    0 => 'mixed',
    'pid=' => 'mixed',
  ),
  'swoole\\server\\admin::getstringmemorysize' => 
  array (
    0 => 'int',
    's' => 'string',
  ),
  'swoole\\server\\admin::handlerclosesession' => 
  array (
    0 => 'mixed',
    'server' => 'Swoole\\Server',
    'msg' => 'string',
  ),
  'swoole\\server\\admin::handlergetall' => 
  array (
    0 => 'mixed',
    'server' => 'Swoole\\Server',
    'process' => 'Swoole\\StringObject',
    'cmd' => 'mixed',
    'data' => 'mixed',
    'json_decode=' => 'bool',
  ),
  'swoole\\server\\admin::handlergetallreactor' => 
  array (
    0 => 'mixed',
    'cmd' => 'mixed',
    'data' => 'mixed',
    'server' => 'Swoole\\Server',
    'json_decode=' => 'bool',
  ),
  'swoole\\server\\admin::handlergetalltaskworker' => 
  array (
    0 => 'mixed',
    'cmd' => 'mixed',
    'data' => 'mixed',
    'server' => 'Swoole\\Server',
    'json_decode=' => 'bool',
  ),
  'swoole\\server\\admin::handlergetallworker' => 
  array (
    0 => 'mixed',
    'cmd' => 'mixed',
    'data' => 'mixed',
    'server' => 'Swoole\\Server',
    'json_decode=' => 'bool',
  ),
  'swoole\\server\\admin::handlergetclassinfo' => 
  array (
    0 => 'mixed',
    'server' => 'Swoole\\Server',
    'msg' => 'string',
  ),
  'swoole\\server\\admin::handlergetcoroutinelist' => 
  array (
    0 => 'mixed',
    'server' => 'Swoole\\Server',
    'msg' => 'string',
  ),
  'swoole\\server\\admin::handlergetdeclaredclasses' => 
  array (
    0 => 'mixed',
    'server' => 'Swoole\\Server',
    'msg' => 'string',
  ),
  'swoole\\server\\admin::handlergetdefinedfunctions' => 
  array (
    0 => 'mixed',
    'server' => 'Swoole\\Server',
    'msg' => 'string',
  ),
  'swoole\\server\\admin::handlergetfunctioninfo' => 
  array (
    0 => 'mixed',
    'server' => 'Swoole\\Server',
    'msg' => 'string',
  ),
  'swoole\\server\\admin::handlergetmanager' => 
  array (
    0 => 'mixed',
    'cmd' => 'mixed',
    'data' => 'mixed',
    'server' => 'Swoole\\Server',
    'json_decode=' => 'bool',
  ),
  'swoole\\server\\admin::handlergetmaster' => 
  array (
    0 => 'mixed',
    'cmd' => 'mixed',
    'data' => 'mixed',
    'server' => 'Swoole\\Server',
    'json_decode=' => 'bool',
  ),
  'swoole\\server\\admin::handlergetobjectbyhandle' => 
  array (
    0 => 'mixed',
    'server' => 'Swoole\\Server',
    'msg' => 'string',
  ),
  'swoole\\server\\admin::handlergetobjects' => 
  array (
    0 => 'mixed',
    'server' => 'Swoole\\Server',
    'msg' => 'string',
  ),
  'swoole\\server\\admin::handlergetresources' => 
  array (
    0 => 'mixed',
    'server' => 'Swoole\\Server',
    'msg' => 'string',
  ),
  'swoole\\server\\admin::handlergetservercpuusage' => 
  array (
    0 => 'mixed',
    'server' => 'Swoole\\Server',
    'msg' => 'string',
  ),
  'swoole\\server\\admin::handlergetservermemoryusage' => 
  array (
    0 => 'mixed',
    'server' => 'Swoole\\Server',
    'msg' => 'string',
  ),
  'swoole\\server\\admin::handlergetstaticpropertyvalue' => 
  array (
    0 => 'mixed',
    'server' => 'Swoole\\Server',
    'msg' => 'string',
  ),
  'swoole\\server\\admin::handlergettimerlist' => 
  array (
    0 => 'mixed',
    'server' => 'Swoole\\Server',
    'msg' => 'string',
  ),
  'swoole\\server\\admin::handlergetversioninfo' => 
  array (
    0 => 'mixed',
    'server' => 'Swoole\\Server',
    'msg' => 'string',
  ),
  'swoole\\server\\admin::handlergetworkerinfo' => 
  array (
    0 => 'mixed',
    'server' => 'Swoole\\Server',
    'msg' => 'string',
  ),
  'swoole\\server\\admin::handlermulti' => 
  array (
    0 => 'mixed',
    'server' => 'Swoole\\Server',
    'list' => 'array<array-key, mixed>',
  ),
  'swoole\\server\\admin::havemanagerprocess' => 
  array (
    0 => 'bool',
    'server' => 'Swoole\\Server',
  ),
  'swoole\\server\\admin::havemasterprocess' => 
  array (
    0 => 'bool',
    'server' => 'Swoole\\Server',
  ),
  'swoole\\server\\admin::init' => 
  array (
    0 => 'mixed',
    'server' => 'Swoole\\Server',
  ),
  'swoole\\server\\admin::json' => 
  array (
    0 => 'mixed',
    'data' => 'mixed',
    'code=' => 'mixed',
  ),
  'swoole\\server\\admin::start' => 
  array (
    0 => 'void',
    'server' => 'Swoole\\Server',
  ),
  'swoole\\server\\helper::checkoptions' => 
  array (
    0 => 'mixed',
    'input_options' => 'array<array-key, mixed>',
  ),
  'swoole\\server\\helper::onafterreload' => 
  array (
    0 => 'mixed',
    'server' => 'Swoole\\Server',
  ),
  'swoole\\server\\helper::onbeforereload' => 
  array (
    0 => 'mixed',
    'server' => 'Swoole\\Server',
  ),
  'swoole\\server\\helper::onbeforeshutdown' => 
  array (
    0 => 'void',
    'server' => 'Swoole\\Server',
  ),
  'swoole\\server\\helper::onbeforestart' => 
  array (
    0 => 'mixed',
    'server' => 'Swoole\\Server',
  ),
  'swoole\\server\\helper::onmanagerstart' => 
  array (
    0 => 'mixed',
    'server' => 'Swoole\\Server',
  ),
  'swoole\\server\\helper::onmanagerstop' => 
  array (
    0 => 'mixed',
    'server' => 'Swoole\\Server',
  ),
  'swoole\\server\\helper::onshutdown' => 
  array (
    0 => 'mixed',
    'server' => 'Swoole\\Server',
  ),
  'swoole\\server\\helper::onstart' => 
  array (
    0 => 'void',
    'server' => 'Swoole\\Server',
  ),
  'swoole\\server\\helper::onworkererror' => 
  array (
    0 => 'mixed',
    'server' => 'Swoole\\Server',
  ),
  'swoole\\server\\helper::onworkerexit' => 
  array (
    0 => 'mixed',
    'server' => 'Swoole\\Server',
    'workerId' => 'int',
  ),
  'swoole\\server\\helper::onworkerstart' => 
  array (
    0 => 'mixed',
    'server' => 'Swoole\\Server',
    'workerId' => 'int',
  ),
  'swoole\\server\\helper::onworkerstop' => 
  array (
    0 => 'mixed',
    'server' => 'Swoole\\Server',
    'workerId' => 'int',
  ),
  'swoole\\server\\port::__construct' => 
  array (
    0 => 'void',
  ),
  'swoole\\server\\port::__destruct' => 
  array (
    0 => 'void',
  ),
  'swoole\\server\\port::getcallback' => 
  array (
    0 => 'Closure|null',
    'event_name' => 'string',
  ),
  'swoole\\server\\port::on' => 
  array (
    0 => 'bool',
    'event_name' => 'string',
    'callback' => 'callable',
  ),
  'swoole\\server\\port::set' => 
  array (
    0 => 'void',
    'settings' => 'array<array-key, mixed>',
  ),
  'swoole\\server\\task::finish' => 
  array (
    0 => 'bool',
    'data' => 'mixed',
  ),
  'swoole\\server\\task::pack' => 
  array (
    0 => 'false|string',
    'data' => 'mixed',
  ),
  'swoole\\server\\task::unpack' => 
  array (
    0 => 'mixed',
    'data' => 'string',
  ),
  'swoole\\stringobject::__construct' => 
  array (
    0 => 'void',
    'string=' => 'string',
  ),
  'swoole\\stringobject::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\stringobject::append' => 
  array (
    0 => 'static',
    'str' => 'mixed',
  ),
  'swoole\\stringobject::char' => 
  array (
    0 => 'string',
    'index' => 'int',
  ),
  'swoole\\stringobject::chunk' => 
  array (
    0 => 'Swoole\\ArrayObject',
    'length=' => 'int',
  ),
  'swoole\\stringobject::chunksplit' => 
  array (
    0 => 'static',
    'length=' => 'int',
    'separator=' => 'string',
  ),
  'swoole\\stringobject::contains' => 
  array (
    0 => 'bool',
    'subString' => 'string',
  ),
  'swoole\\stringobject::detectarraytype' => 
  array (
    0 => 'Swoole\\ArrayObject',
    'value' => 'array<array-key, mixed>',
  ),
  'swoole\\stringobject::endswith' => 
  array (
    0 => 'bool',
    'needle' => 'string',
  ),
  'swoole\\stringobject::equals' => 
  array (
    0 => 'bool',
    'str' => 'mixed',
    'strict=' => 'bool',
  ),
  'swoole\\stringobject::from' => 
  array (
    0 => 'static',
    'string=' => 'string',
  ),
  'swoole\\stringobject::indexof' => 
  array (
    0 => 'false|int',
    'needle' => 'string',
    'offset=' => 'int',
  ),
  'swoole\\stringobject::ipos' => 
  array (
    0 => 'mixed',
    'needle' => 'string',
  ),
  'swoole\\stringobject::lastindexof' => 
  array (
    0 => 'false|int',
    'needle' => 'string',
    'offset=' => 'int',
  ),
  'swoole\\stringobject::length' => 
  array (
    0 => 'int',
  ),
  'swoole\\stringobject::lower' => 
  array (
    0 => 'static',
  ),
  'swoole\\stringobject::ltrim' => 
  array (
    0 => 'self',
  ),
  'swoole\\stringobject::pos' => 
  array (
    0 => 'false|int',
    'needle' => 'string',
    'offset=' => 'int',
  ),
  'swoole\\stringobject::repeat' => 
  array (
    0 => 'static',
    'times' => 'int',
  ),
  'swoole\\stringobject::replace' => 
  array (
    0 => 'static',
    'search' => 'string',
    'replace' => 'string',
    '&count=' => 'mixed',
  ),
  'swoole\\stringobject::reverse' => 
  array (
    0 => 'static',
  ),
  'swoole\\stringobject::rpos' => 
  array (
    0 => 'false|int',
    'needle' => 'string',
    'offset=' => 'int',
  ),
  'swoole\\stringobject::rtrim' => 
  array (
    0 => 'self',
  ),
  'swoole\\stringobject::split' => 
  array (
    0 => 'Swoole\\ArrayObject',
    'delimiter' => 'string',
    'limit=' => 'int',
  ),
  'swoole\\stringobject::startswith' => 
  array (
    0 => 'bool',
    'needle' => 'string',
  ),
  'swoole\\stringobject::substr' => 
  array (
    0 => 'mixed',
    'offset' => 'int',
    'length=' => 'int|null',
  ),
  'swoole\\stringobject::tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\stringobject::trim' => 
  array (
    0 => 'static',
    'characters=' => 'string',
  ),
  'swoole\\stringobject::upper' => 
  array (
    0 => 'static',
  ),
  'swoole\\table::__construct' => 
  array (
    0 => 'void',
    'table_size' => 'int',
    'conflict_proportion=' => 'float',
  ),
  'swoole\\table::column' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'type' => 'int',
    'size=' => 'int',
  ),
  'swoole\\table::count' => 
  array (
    0 => 'int',
  ),
  'swoole\\table::create' => 
  array (
    0 => 'bool',
  ),
  'swoole\\table::current' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\table::decr' => 
  array (
    0 => 'float|int',
    'key' => 'string',
    'column' => 'string',
    'incrby=' => 'int',
  ),
  'swoole\\table::del' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'swoole\\table::delete' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'swoole\\table::destroy' => 
  array (
    0 => 'bool',
  ),
  'swoole\\table::exist' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'swoole\\table::exists' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'swoole\\table::get' => 
  array (
    0 => 'int',
    'key' => 'string',
    'field=' => 'null|string',
  ),
  'swoole\\table::getmemorysize' => 
  array (
    0 => 'int',
  ),
  'swoole\\table::getsize' => 
  array (
    0 => 'int',
  ),
  'swoole\\table::incr' => 
  array (
    0 => 'float|int',
    'key' => 'string',
    'column' => 'string',
    'incrby=' => 'int',
  ),
  'swoole\\table::key' => 
  array (
    0 => 'string',
  ),
  'swoole\\table::next' => 
  array (
    0 => 'void',
  ),
  'swoole\\table::rewind' => 
  array (
    0 => 'void',
  ),
  'swoole\\table::set' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'array<array-key, mixed>',
  ),
  'swoole\\table::stats' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'swoole\\table::valid' => 
  array (
    0 => 'bool',
  ),
  'swoole\\timer::after' => 
  array (
    0 => 'false|int',
    'ms' => 'int',
    'callback' => 'callable',
    '...params=' => 'mixed',
  ),
  'swoole\\timer::clear' => 
  array (
    0 => 'bool',
    'timer_id' => 'int',
  ),
  'swoole\\timer::clearall' => 
  array (
    0 => 'bool',
  ),
  'swoole\\timer::exists' => 
  array (
    0 => 'bool',
    'timer_id' => 'int',
  ),
  'swoole\\timer::info' => 
  array (
    0 => 'array<array-key, mixed>|null',
    'timer_id' => 'int',
  ),
  'swoole\\timer::list' => 
  array (
    0 => 'Swoole\\Timer\\Iterator',
  ),
  'swoole\\timer::set' => 
  array (
    0 => 'void',
    'settings' => 'array<array-key, mixed>',
  ),
  'swoole\\timer::stats' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\timer::tick' => 
  array (
    0 => 'false|int',
    'ms' => 'int',
    'callback' => 'callable',
    '...params=' => 'string',
  ),
  'swoole\\timer\\iterator::__construct' => 
  array (
    0 => 'void',
    'array=' => 'array<array-key, mixed>|object',
    'flags=' => 'int',
  ),
  'swoole\\timer\\iterator::__debuginfo' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\timer\\iterator::__serialize' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\timer\\iterator::__unserialize' => 
  array (
    0 => 'mixed',
    'data' => 'array<array-key, mixed>',
  ),
  'swoole\\timer\\iterator::append' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\timer\\iterator::asort' => 
  array (
    0 => 'mixed',
    'flags=' => 'int',
  ),
  'swoole\\timer\\iterator::count' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\timer\\iterator::current' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\timer\\iterator::getarraycopy' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\timer\\iterator::getflags' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\timer\\iterator::key' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\timer\\iterator::ksort' => 
  array (
    0 => 'mixed',
    'flags=' => 'int',
  ),
  'swoole\\timer\\iterator::natcasesort' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\timer\\iterator::natsort' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\timer\\iterator::next' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\timer\\iterator::offsetexists' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\timer\\iterator::offsetget' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\timer\\iterator::offsetset' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    'value' => 'mixed',
  ),
  'swoole\\timer\\iterator::offsetunset' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
  ),
  'swoole\\timer\\iterator::rewind' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\timer\\iterator::seek' => 
  array (
    0 => 'mixed',
    'offset' => 'int',
  ),
  'swoole\\timer\\iterator::serialize' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\timer\\iterator::setflags' => 
  array (
    0 => 'mixed',
    'flags' => 'int',
  ),
  'swoole\\timer\\iterator::uasort' => 
  array (
    0 => 'mixed',
    'callback' => 'callable',
  ),
  'swoole\\timer\\iterator::uksort' => 
  array (
    0 => 'mixed',
    'callback' => 'callable',
  ),
  'swoole\\timer\\iterator::unserialize' => 
  array (
    0 => 'mixed',
    'data' => 'string',
  ),
  'swoole\\timer\\iterator::valid' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\websocket\\closeframe::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\websocket\\closeframe::pack' => 
  array (
    0 => 'string',
    'data' => 'Swoole\\WebSocket\\Frame|string',
    'opcode=' => 'int',
    'flags=' => 'int',
  ),
  'swoole\\websocket\\closeframe::unpack' => 
  array (
    0 => 'Swoole\\WebSocket\\Frame',
    'data' => 'string',
  ),
  'swoole\\websocket\\frame::__tostring' => 
  array (
    0 => 'string',
  ),
  'swoole\\websocket\\frame::pack' => 
  array (
    0 => 'string',
    'data' => 'Swoole\\WebSocket\\Frame|string',
    'opcode=' => 'int',
    'flags=' => 'int',
  ),
  'swoole\\websocket\\frame::unpack' => 
  array (
    0 => 'Swoole\\WebSocket\\Frame',
    'data' => 'string',
  ),
  'swoole\\websocket\\server::__construct' => 
  array (
    0 => 'void',
    'host=' => 'string',
    'port=' => 'int',
    'mode=' => 'int',
    'sock_type=' => 'int',
  ),
  'swoole\\websocket\\server::__destruct' => 
  array (
    0 => 'mixed',
  ),
  'swoole\\websocket\\server::addcommand' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'accepted_process_types' => 'int',
    'callback' => 'callable',
  ),
  'swoole\\websocket\\server::addlistener' => 
  array (
    0 => 'Swoole\\Server\\Port|false',
    'host' => 'string',
    'port' => 'int',
    'sock_type' => 'int',
  ),
  'swoole\\websocket\\server::addprocess' => 
  array (
    0 => 'int',
    'process' => 'Swoole\\Process',
  ),
  'swoole\\websocket\\server::bind' => 
  array (
    0 => 'bool',
    'fd' => 'int',
    'uid' => 'int',
  ),
  'swoole\\websocket\\server::close' => 
  array (
    0 => 'bool',
    'fd' => 'int',
    'reset=' => 'bool',
  ),
  'swoole\\websocket\\server::command' => 
  array (
    0 => 'array<array-key, mixed>|false|string',
    'name' => 'string',
    'process_id' => 'int',
    'process_type' => 'int',
    'data' => 'mixed',
    'json_decode=' => 'bool',
  ),
  'swoole\\websocket\\server::confirm' => 
  array (
    0 => 'bool',
    'fd' => 'int',
  ),
  'swoole\\websocket\\server::connection_info' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'fd' => 'int',
    'reactor_id=' => 'int',
    'ignoreError=' => 'bool',
  ),
  'swoole\\websocket\\server::connection_list' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'start_fd=' => 'int',
    'find_count=' => 'int',
  ),
  'swoole\\websocket\\server::disconnect' => 
  array (
    0 => 'bool',
    'fd' => 'int',
    'code=' => 'int',
    'reason=' => 'string',
  ),
  'swoole\\websocket\\server::exist' => 
  array (
    0 => 'bool',
    'fd' => 'int',
  ),
  'swoole\\websocket\\server::exists' => 
  array (
    0 => 'bool',
    'fd' => 'int',
  ),
  'swoole\\websocket\\server::finish' => 
  array (
    0 => 'bool',
    'data' => 'mixed',
  ),
  'swoole\\websocket\\server::getcallback' => 
  array (
    0 => 'Closure|array<array-key, mixed>|null|string',
    'event_name' => 'string',
  ),
  'swoole\\websocket\\server::getclientinfo' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'fd' => 'int',
    'reactor_id=' => 'int',
    'ignoreError=' => 'bool',
  ),
  'swoole\\websocket\\server::getclientlist' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'start_fd=' => 'int',
    'find_count=' => 'int',
  ),
  'swoole\\websocket\\server::getlasterror' => 
  array (
    0 => 'int',
  ),
  'swoole\\websocket\\server::getmanagerpid' => 
  array (
    0 => 'int',
  ),
  'swoole\\websocket\\server::getmasterpid' => 
  array (
    0 => 'int',
  ),
  'swoole\\websocket\\server::getworkerid' => 
  array (
    0 => 'false|int',
  ),
  'swoole\\websocket\\server::getworkerpid' => 
  array (
    0 => 'false|int',
    'worker_id=' => 'int',
  ),
  'swoole\\websocket\\server::getworkerstatus' => 
  array (
    0 => 'false|int',
    'worker_id=' => 'int',
  ),
  'swoole\\websocket\\server::heartbeat' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'ifCloseConnection=' => 'bool',
  ),
  'swoole\\websocket\\server::isestablished' => 
  array (
    0 => 'bool',
    'fd' => 'int',
  ),
  'swoole\\websocket\\server::listen' => 
  array (
    0 => 'Swoole\\Server\\Port|false',
    'host' => 'string',
    'port' => 'int',
    'sock_type' => 'int',
  ),
  'swoole\\websocket\\server::on' => 
  array (
    0 => 'bool',
    'event_name' => 'string',
    'callback' => 'callable',
  ),
  'swoole\\websocket\\server::pack' => 
  array (
    0 => 'string',
    'data' => 'string',
    'opcode=' => 'int',
    'flags=' => 'int',
  ),
  'swoole\\websocket\\server::pause' => 
  array (
    0 => 'bool',
    'fd' => 'int',
  ),
  'swoole\\websocket\\server::protect' => 
  array (
    0 => 'bool',
    'fd' => 'int',
    'is_protected=' => 'bool',
  ),
  'swoole\\websocket\\server::push' => 
  array (
    0 => 'bool',
    'fd' => 'int',
    'data' => 'string',
    'opcode=' => 'int',
    'flags=' => 'int',
  ),
  'swoole\\websocket\\server::reload' => 
  array (
    0 => 'bool',
    'only_reload_taskworker=' => 'bool',
  ),
  'swoole\\websocket\\server::resume' => 
  array (
    0 => 'bool',
    'fd' => 'int',
  ),
  'swoole\\websocket\\server::send' => 
  array (
    0 => 'bool',
    'fd' => 'int|string',
    'send_data' => 'string',
    'serverSocket=' => 'int',
  ),
  'swoole\\websocket\\server::sendfile' => 
  array (
    0 => 'bool',
    'conn_fd' => 'int',
    'filename' => 'string',
    'offset=' => 'int',
    'length=' => 'int',
  ),
  'swoole\\websocket\\server::sendmessage' => 
  array (
    0 => 'bool',
    'message' => 'mixed',
    'dst_worker_id' => 'int',
  ),
  'swoole\\websocket\\server::sendto' => 
  array (
    0 => 'bool',
    'ip' => 'string',
    'port' => 'int',
    'send_data' => 'string',
    'server_socket=' => 'int',
  ),
  'swoole\\websocket\\server::sendwait' => 
  array (
    0 => 'bool',
    'conn_fd' => 'int',
    'send_data' => 'string',
  ),
  'swoole\\websocket\\server::set' => 
  array (
    0 => 'bool',
    'settings' => 'array<array-key, mixed>',
  ),
  'swoole\\websocket\\server::shutdown' => 
  array (
    0 => 'bool',
  ),
  'swoole\\websocket\\server::start' => 
  array (
    0 => 'bool',
  ),
  'swoole\\websocket\\server::stats' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole\\websocket\\server::stop' => 
  array (
    0 => 'bool',
    'workerId=' => 'int',
    'waitEvent=' => 'bool',
  ),
  'swoole\\websocket\\server::task' => 
  array (
    0 => 'false|int',
    'data' => 'mixed',
    'taskWorkerIndex=' => 'int',
    'finishCallback=' => 'callable|null',
  ),
  'swoole\\websocket\\server::taskco' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'tasks' => 'array<array-key, mixed>',
    'timeout=' => 'float',
  ),
  'swoole\\websocket\\server::taskwait' => 
  array (
    0 => 'mixed',
    'data' => 'mixed',
    'timeout=' => 'float',
    'taskWorkerIndex=' => 'int',
  ),
  'swoole\\websocket\\server::taskwaitmulti' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'tasks' => 'array<array-key, mixed>',
    'timeout=' => 'float',
  ),
  'swoole\\websocket\\server::unpack' => 
  array (
    0 => 'Swoole\\WebSocket\\Frame',
    'data' => 'string',
  ),
  'swoole_array' => 
  array (
    0 => 'Swoole\\ArrayObject',
    'array=' => 'array<array-key, mixed>',
  ),
  'swoole_array_default_value' => 
  array (
    0 => 'mixed',
    'array' => 'array<array-key, mixed>',
    'key' => 'mixed',
    'default_value=' => 'mixed',
  ),
  'swoole_array_list' => 
  array (
    0 => 'Swoole\\ArrayObject',
    '...arrray=' => 'mixed',
  ),
  'swoole_async_dns_lookup' => 
  array (
    0 => 'bool',
    'hostname' => 'string',
    'callback' => 'callable',
  ),
  'swoole_async_dns_lookup_coro' => 
  array (
    0 => 'false|string',
    'domain_name' => 'string',
    'timeout=' => 'float',
    'type=' => 'int',
  ),
  'swoole_async_read' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'callback' => 'callable',
    'chunk_size=' => 'int',
    'offset=' => 'int',
  ),
  'swoole_async_readfile' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'callback' => 'string',
  ),
  'swoole_async_set' => 
  array (
    0 => 'void',
    'settings' => 'array<array-key, mixed>',
  ),
  'swoole_async_write' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'content' => 'string',
    'offset=' => 'int',
    'callback=' => 'callable',
  ),
  'swoole_async_writefile' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'content' => 'string',
    'callback=' => 'callable',
    'flags=' => 'int',
  ),
  'swoole_clear_dns_cache' => 
  array (
    0 => 'void',
  ),
  'swoole_clear_error' => 
  array (
    0 => 'void',
  ),
  'swoole_client_select' => 
  array (
    0 => 'int',
    '&read_array' => 'array<array-key, mixed>',
    '&write_array' => 'array<array-key, mixed>',
    '&error_array' => 'array<array-key, mixed>',
    'timeout=' => 'float',
  ),
  'swoole_container_cpu_num' => 
  array (
    0 => 'mixed',
  ),
  'swoole_coroutine_create' => 
  array (
    0 => 'false|int',
    'func' => 'callable',
    '...params=' => 'mixed',
  ),
  'swoole_coroutine_defer' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'swoole_coroutine_socketpair' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'domain' => 'int',
    'type' => 'int',
    'protocol' => 'int',
  ),
  'swoole_cpu_num' => 
  array (
    0 => 'int',
  ),
  'swoole_curl_close' => 
  array (
    0 => 'void',
    'obj' => 'Swoole\\Curl\\Handler',
  ),
  'swoole_curl_errno' => 
  array (
    0 => 'int',
    'obj' => 'Swoole\\Curl\\Handler',
  ),
  'swoole_curl_error' => 
  array (
    0 => 'string',
    'obj' => 'Swoole\\Curl\\Handler',
  ),
  'swoole_curl_exec' => 
  array (
    0 => 'mixed',
    'obj' => 'Swoole\\Curl\\Handler',
  ),
  'swoole_curl_getinfo' => 
  array (
    0 => 'mixed',
    'obj' => 'Swoole\\Curl\\Handler',
    'opt=' => 'int',
  ),
  'swoole_curl_init' => 
  array (
    0 => 'Swoole\\Curl\\Handler',
    'url=' => 'string',
  ),
  'swoole_curl_multi_getcontent' => 
  array (
    0 => 'mixed',
    'obj' => 'Swoole\\Curl\\Handler',
  ),
  'swoole_curl_reset' => 
  array (
    0 => 'mixed',
    'obj' => 'Swoole\\Curl\\Handler',
  ),
  'swoole_curl_setopt' => 
  array (
    0 => 'bool',
    'obj' => 'Swoole\\Curl\\Handler',
    'opt' => 'int',
    'value' => 'mixed',
  ),
  'swoole_curl_setopt_array' => 
  array (
    0 => 'bool',
    'obj' => 'Swoole\\Curl\\Handler',
    'array' => 'mixed',
  ),
  'swoole_errno' => 
  array (
    0 => 'int',
  ),
  'swoole_error_log' => 
  array (
    0 => 'void',
    'level' => 'int',
    'msg' => 'string',
  ),
  'swoole_error_log_ex' => 
  array (
    0 => 'void',
    'level' => 'int',
    'error' => 'int',
    'msg' => 'string',
  ),
  'swoole_event_add' => 
  array (
    0 => 'int',
    'fd' => 'int',
    'read_callback=' => 'callable|null',
    'write_callback=' => 'callable|null',
    'events=' => 'int',
  ),
  'swoole_event_cycle' => 
  array (
    0 => 'bool',
    'callback' => 'callable|null',
    'before=' => 'bool',
  ),
  'swoole_event_defer' => 
  array (
    0 => 'bool',
    'callback' => 'callable',
  ),
  'swoole_event_del' => 
  array (
    0 => 'bool',
    'fd' => 'int',
  ),
  'swoole_event_dispatch' => 
  array (
    0 => 'bool',
  ),
  'swoole_event_exit' => 
  array (
    0 => 'void',
  ),
  'swoole_event_isset' => 
  array (
    0 => 'bool',
    'fd' => 'mixed',
    'events=' => 'int',
  ),
  'swoole_event_set' => 
  array (
    0 => 'bool',
    'fd' => 'int',
    'read_callback=' => 'callable|null',
    'write_callback=' => 'callable|null',
    'events=' => 'int',
  ),
  'swoole_event_wait' => 
  array (
    0 => 'void',
  ),
  'swoole_event_write' => 
  array (
    0 => 'bool',
    'fd' => 'int',
    'data' => 'string',
  ),
  'swoole_exec' => 
  array (
    0 => 'mixed',
    'command' => 'string',
    '&output=' => 'mixed',
    '&returnVar=' => 'mixed',
  ),
  'swoole_get_local_ip' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole_get_local_mac' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole_get_mime_type' => 
  array (
    0 => 'string',
    'filename' => 'string',
  ),
  'swoole_get_object_by_handle' => 
  array (
    0 => 'false|object',
    'handle' => 'int',
  ),
  'swoole_get_objects' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'swoole_get_vm_status' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole_hashcode' => 
  array (
    0 => 'false|int',
    'data' => 'string',
    'type=' => 'int',
  ),
  'swoole_ignore_error' => 
  array (
    0 => 'void',
    'error' => 'int',
  ),
  'swoole_internal_call_user_shutdown_begin' => 
  array (
    0 => 'bool',
  ),
  'swoole_is_in_container' => 
  array (
    0 => 'mixed',
  ),
  'swoole_last_error' => 
  array (
    0 => 'int',
  ),
  'swoole_library_get_option' => 
  array (
    0 => 'mixed',
    'key' => 'string',
  ),
  'swoole_library_get_options' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole_library_set_option' => 
  array (
    0 => 'void',
    'key' => 'string',
    'value' => 'mixed',
  ),
  'swoole_library_set_options' => 
  array (
    0 => 'void',
    'options' => 'array<array-key, mixed>',
  ),
  'swoole_load_module' => 
  array (
    0 => 'mixed',
    'filename' => 'string',
  ),
  'swoole_mbstring' => 
  array (
    0 => 'Swoole\\MultibyteStringObject',
    'string=' => 'string',
  ),
  'swoole_mime_type_add' => 
  array (
    0 => 'bool',
    'suffix' => 'string',
    'mime_type' => 'string',
  ),
  'swoole_mime_type_delete' => 
  array (
    0 => 'bool',
    'suffix' => 'string',
  ),
  'swoole_mime_type_exists' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'swoole_mime_type_get' => 
  array (
    0 => 'string',
    'filename' => 'string',
  ),
  'swoole_mime_type_list' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole_mime_type_set' => 
  array (
    0 => 'void',
    'suffix' => 'string',
    'mime_type' => 'string',
  ),
  'swoole_name_resolver_add' => 
  array (
    0 => 'bool',
    'ns' => 'Swoole\\NameResolver',
  ),
  'swoole_name_resolver_lookup' => 
  array (
    0 => 'string',
    'name' => 'string',
    'ctx' => 'Swoole\\NameResolver\\Context',
  ),
  'swoole_name_resolver_remove' => 
  array (
    0 => 'bool',
    'ns' => 'Swoole\\NameResolver',
  ),
  'swoole_select' => 
  array (
    0 => 'int',
    '&read_array' => 'array<array-key, mixed>',
    '&write_array' => 'array<array-key, mixed>',
    '&error_array' => 'array<array-key, mixed>',
    'timeout=' => 'float',
  ),
  'swoole_set_process_name' => 
  array (
    0 => 'bool',
    'process_name' => 'string',
  ),
  'swoole_shell_exec' => 
  array (
    0 => 'mixed',
    'cmd' => 'string',
  ),
  'swoole_socket_accept' => 
  array (
    0 => 'mixed',
    'socket' => 'Swoole\\Coroutine\\Socket',
  ),
  'swoole_socket_bind' => 
  array (
    0 => 'bool',
    'socket' => 'Swoole\\Coroutine\\Socket',
    'address' => 'string',
    'port=' => 'int',
  ),
  'swoole_socket_clear_error' => 
  array (
    0 => 'mixed',
    'socket=' => 'Swoole\\Coroutine\\Socket|null',
  ),
  'swoole_socket_close' => 
  array (
    0 => 'mixed',
    'socket' => 'Swoole\\Coroutine\\Socket',
  ),
  'swoole_socket_connect' => 
  array (
    0 => 'mixed',
    'socket' => 'Swoole\\Coroutine\\Socket',
    'address' => 'string',
    'port=' => 'int',
  ),
  'swoole_socket_create' => 
  array (
    0 => 'mixed',
    'domain' => 'int',
    'type' => 'int',
    'protocol' => 'int',
  ),
  'swoole_socket_create_listen' => 
  array (
    0 => 'mixed',
    'port' => 'int',
    'backlog=' => 'int',
  ),
  'swoole_socket_create_pair' => 
  array (
    0 => 'mixed',
    'domain' => 'int',
    'type' => 'int',
    'protocol' => 'int',
    '&pair' => 'array<array-key, mixed>',
  ),
  'swoole_socket_get_option' => 
  array (
    0 => 'mixed',
    'socket' => 'Swoole\\Coroutine\\Socket',
    'level' => 'int',
    'optname' => 'int',
  ),
  'swoole_socket_getopt' => 
  array (
    0 => 'mixed',
    'socket' => 'Swoole\\Coroutine\\Socket',
    'level' => 'int',
    'optname' => 'int',
  ),
  'swoole_socket_getpeername' => 
  array (
    0 => 'mixed',
    'socket' => 'Swoole\\Coroutine\\Socket',
    '&address' => 'mixed',
    '&port=' => 'mixed',
  ),
  'swoole_socket_getsockname' => 
  array (
    0 => 'mixed',
    'socket' => 'Swoole\\Coroutine\\Socket',
    '&address' => 'mixed',
    '&port=' => 'mixed',
  ),
  'swoole_socket_import_stream' => 
  array (
    0 => 'Swoole\\Coroutine\\Socket|false',
    'stream' => 'mixed',
  ),
  'swoole_socket_last_error' => 
  array (
    0 => 'int',
    'socket=' => 'Swoole\\Coroutine\\Socket|null',
  ),
  'swoole_socket_listen' => 
  array (
    0 => 'bool',
    'socket' => 'Swoole\\Coroutine\\Socket',
    'backlog=' => 'int',
  ),
  'swoole_socket_read' => 
  array (
    0 => 'mixed',
    'socket' => 'Swoole\\Coroutine\\Socket',
    'length' => 'int',
    'type=' => 'int',
  ),
  'swoole_socket_recv' => 
  array (
    0 => 'mixed',
    'socket' => 'Swoole\\Coroutine\\Socket',
    '&buffer' => 'mixed',
    'length' => 'int',
    'flags' => 'int',
  ),
  'swoole_socket_recvfrom' => 
  array (
    0 => 'mixed',
    'socket' => 'Swoole\\Coroutine\\Socket',
    '&buffer' => 'mixed',
    'length' => 'int',
    'flags' => 'int',
    '&name' => 'mixed',
    '&port=' => 'mixed',
  ),
  'swoole_socket_send' => 
  array (
    0 => 'mixed',
    'socket' => 'Swoole\\Coroutine\\Socket',
    'buffer' => 'string',
    'length' => 'int',
    'flags' => 'int',
  ),
  'swoole_socket_sendto' => 
  array (
    0 => 'mixed',
    'socket' => 'Swoole\\Coroutine\\Socket',
    'buffer' => 'string',
    'length' => 'int',
    'flags' => 'int',
    'addr' => 'string',
    'port=' => 'int',
  ),
  'swoole_socket_set_block' => 
  array (
    0 => 'mixed',
    'socket' => 'Swoole\\Coroutine\\Socket',
  ),
  'swoole_socket_set_nonblock' => 
  array (
    0 => 'mixed',
    'socket' => 'Swoole\\Coroutine\\Socket',
  ),
  'swoole_socket_set_option' => 
  array (
    0 => 'bool',
    'socket' => 'Swoole\\Coroutine\\Socket',
    'level' => 'int',
    'optname' => 'int',
    'optval' => 'mixed',
  ),
  'swoole_socket_setopt' => 
  array (
    0 => 'bool',
    'socket' => 'Swoole\\Coroutine\\Socket',
    'level' => 'int',
    'optname' => 'int',
    'optval' => 'mixed',
  ),
  'swoole_socket_shutdown' => 
  array (
    0 => 'bool',
    'socket' => 'Swoole\\Coroutine\\Socket',
    'how=' => 'int',
  ),
  'swoole_socket_write' => 
  array (
    0 => 'mixed',
    'socket' => 'Swoole\\Coroutine\\Socket',
    'buffer' => 'string',
    'length=' => 'int',
  ),
  'swoole_strerror' => 
  array (
    0 => 'string',
    'errno' => 'int',
    'error_type=' => 'int',
  ),
  'swoole_string' => 
  array (
    0 => 'Swoole\\StringObject',
    'string=' => 'string',
  ),
  'swoole_substr_json_decode' => 
  array (
    0 => 'mixed',
    'str' => 'string',
    'offset' => 'int',
    'length=' => 'int',
    'associative=' => 'bool',
    'depth=' => 'int',
    'flags=' => 'int',
  ),
  'swoole_substr_unserialize' => 
  array (
    0 => 'mixed',
    'str' => 'string',
    'offset' => 'int',
    'length=' => 'int',
    'options=' => 'array<array-key, mixed>',
  ),
  'swoole_table' => 
  array (
    0 => 'Swoole\\Table',
    'size' => 'int',
    'fields' => 'string',
  ),
  'swoole_test_kernel_coroutine' => 
  array (
    0 => 'void',
    'count=' => 'int',
    'sleep_time=' => 'float',
  ),
  'swoole_timer_after' => 
  array (
    0 => 'int',
    'ms' => 'int',
    'callback' => 'callable',
  ),
  'swoole_timer_clear' => 
  array (
    0 => 'bool',
    'timer_id' => 'int',
  ),
  'swoole_timer_clear_all' => 
  array (
    0 => 'bool',
  ),
  'swoole_timer_exists' => 
  array (
    0 => 'bool',
    'timer_id' => 'int',
  ),
  'swoole_timer_info' => 
  array (
    0 => 'array<array-key, mixed>|null',
    'timer_id' => 'int',
  ),
  'swoole_timer_list' => 
  array (
    0 => 'Swoole\\Timer\\Iterator',
  ),
  'swoole_timer_set' => 
  array (
    0 => 'void',
    'settings' => 'array<array-key, mixed>',
  ),
  'swoole_timer_stats' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'swoole_timer_tick' => 
  array (
    0 => 'int',
    'ms' => 'int',
    'callback' => 'callable',
  ),
  'swoole_version' => 
  array (
    0 => 'string',
  ),
  'symbolobj::__construct' => 
  array (
    0 => 'void',
    'map' => 'mapObj',
    'symbolname' => 'string',
  ),
  'symbolobj::free' => 
  array (
    0 => 'void',
  ),
  'symbolobj::getpatternarray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'symbolobj::getpointsarray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'symbolobj::ms_newsymbolobj' => 
  array (
    0 => 'int',
    'map' => 'mapObj',
    'symbolname' => 'string',
  ),
  'symbolobj::set' => 
  array (
    0 => 'int',
    'property_name' => 'string',
    'new_value' => 'mixed',
  ),
  'symbolobj::setimagepath' => 
  array (
    0 => 'int',
    'filename' => 'string',
  ),
  'symbolobj::setpattern' => 
  array (
    0 => 'int',
    'int' => 'array<array-key, mixed>',
  ),
  'symbolobj::setpoints' => 
  array (
    0 => 'int',
    'double' => 'array<array-key, mixed>',
  ),
  'symlink' => 
  array (
    0 => 'bool',
    'target' => 'string',
    'link' => 'string',
  ),
  'syncevent::__construct' => 
  array (
    0 => 'void',
    'name=' => 'string',
    'manual=' => 'bool',
  ),
  'syncevent::fire' => 
  array (
    0 => 'bool',
  ),
  'syncevent::reset' => 
  array (
    0 => 'bool',
  ),
  'syncevent::wait' => 
  array (
    0 => 'bool',
    'wait=' => 'int',
  ),
  'syncmutex::__construct' => 
  array (
    0 => 'void',
    'name=' => 'string',
  ),
  'syncmutex::lock' => 
  array (
    0 => 'bool',
    'wait=' => 'int',
  ),
  'syncmutex::unlock' => 
  array (
    0 => 'bool',
    'all=' => 'bool',
  ),
  'syncreaderwriter::__construct' => 
  array (
    0 => 'void',
    'name=' => 'string',
    'autounlock=' => 'bool',
  ),
  'syncreaderwriter::readlock' => 
  array (
    0 => 'bool',
    'wait=' => 'int',
  ),
  'syncreaderwriter::readunlock' => 
  array (
    0 => 'bool',
  ),
  'syncreaderwriter::writelock' => 
  array (
    0 => 'bool',
    'wait=' => 'int',
  ),
  'syncreaderwriter::writeunlock' => 
  array (
    0 => 'bool',
  ),
  'syncsemaphore::__construct' => 
  array (
    0 => 'void',
    'name=' => 'string',
    'initialval=' => 'int',
    'autounlock=' => 'bool',
  ),
  'syncsemaphore::lock' => 
  array (
    0 => 'bool',
    'wait=' => 'int',
  ),
  'syncsemaphore::unlock' => 
  array (
    0 => 'bool',
    '&w_prevcount=' => 'int',
  ),
  'syncsharedmemory::__construct' => 
  array (
    0 => 'void',
    'name' => 'string',
    'size' => 'int',
  ),
  'syncsharedmemory::first' => 
  array (
    0 => 'bool',
  ),
  'syncsharedmemory::read' => 
  array (
    0 => 'string',
    'start=' => 'int',
    'length=' => 'int',
  ),
  'syncsharedmemory::size' => 
  array (
    0 => 'int',
  ),
  'syncsharedmemory::write' => 
  array (
    0 => 'int',
    'string=' => 'string',
    'start=' => 'int',
  ),
  'sys_get_temp_dir' => 
  array (
    0 => 'string',
  ),
  'sys_getloadavg' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'syslog' => 
  array (
    0 => 'true',
    'priority' => 'int',
    'message' => 'string',
  ),
  'system' => 
  array (
    0 => 'false|string',
    'command' => 'string',
    '&w_result_code=' => 'int',
  ),
  'taint' => 
  array (
    0 => 'bool',
    '&rw_string' => 'string',
    '&...w_other_strings=' => 'string',
  ),
  'tan' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'tanh' => 
  array (
    0 => 'float',
    'num' => 'float',
  ),
  'tcpwrap_check' => 
  array (
    0 => 'bool',
    'daemon' => 'string',
    'address' => 'string',
    'user=' => 'string',
    'nodns=' => 'bool',
  ),
  'tempnam' => 
  array (
    0 => 'false|string',
    'directory' => 'string',
    'prefix' => 'string',
  ),
  'textdomain' => 
  array (
    0 => 'string',
    'domain' => 'null|string',
  ),
  'thread::__construct' => 
  array (
    0 => 'void',
  ),
  'thread::addref' => 
  array (
    0 => 'void',
  ),
  'thread::chunk' => 
  array (
    0 => 'array<array-key, mixed>',
    'size' => 'int',
    'preserve' => 'bool',
  ),
  'thread::count' => 
  array (
    0 => 'int',
  ),
  'thread::delref' => 
  array (
    0 => 'void',
  ),
  'thread::detach' => 
  array (
    0 => 'void',
  ),
  'thread::extend' => 
  array (
    0 => 'bool',
    'class' => 'string',
  ),
  'thread::getcreatorid' => 
  array (
    0 => 'int',
  ),
  'thread::getcurrentthread' => 
  array (
    0 => 'Thread',
  ),
  'thread::getcurrentthreadid' => 
  array (
    0 => 'int',
  ),
  'thread::getrefcount' => 
  array (
    0 => 'int',
  ),
  'thread::getterminationinfo' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'thread::getthreadid' => 
  array (
    0 => 'int',
  ),
  'thread::globally' => 
  array (
    0 => 'mixed',
  ),
  'thread::isgarbage' => 
  array (
    0 => 'bool',
  ),
  'thread::isjoined' => 
  array (
    0 => 'bool',
  ),
  'thread::isrunning' => 
  array (
    0 => 'bool',
  ),
  'thread::isstarted' => 
  array (
    0 => 'bool',
  ),
  'thread::isterminated' => 
  array (
    0 => 'bool',
  ),
  'thread::iswaiting' => 
  array (
    0 => 'bool',
  ),
  'thread::join' => 
  array (
    0 => 'bool',
  ),
  'thread::kill' => 
  array (
    0 => 'void',
  ),
  'thread::lock' => 
  array (
    0 => 'bool',
  ),
  'thread::merge' => 
  array (
    0 => 'bool',
    'from' => 'mixed',
    'overwrite=' => 'mixed',
  ),
  'thread::notify' => 
  array (
    0 => 'bool',
  ),
  'thread::notifyone' => 
  array (
    0 => 'bool',
  ),
  'thread::offsetexists' => 
  array (
    0 => 'bool',
    'offset' => 'int|string',
  ),
  'thread::offsetget' => 
  array (
    0 => 'mixed',
    'offset' => 'int|string',
  ),
  'thread::offsetset' => 
  array (
    0 => 'void',
    'offset' => 'int|null|string',
    'value' => 'mixed',
  ),
  'thread::offsetunset' => 
  array (
    0 => 'void',
    'offset' => 'int|string',
  ),
  'thread::pop' => 
  array (
    0 => 'bool',
  ),
  'thread::run' => 
  array (
    0 => 'void',
  ),
  'thread::setgarbage' => 
  array (
    0 => 'void',
  ),
  'thread::shift' => 
  array (
    0 => 'bool',
  ),
  'thread::start' => 
  array (
    0 => 'bool',
    'options=' => 'int',
  ),
  'thread::synchronized' => 
  array (
    0 => 'mixed',
    'block' => 'Closure',
    '_=' => 'mixed',
  ),
  'thread::unlock' => 
  array (
    0 => 'bool',
  ),
  'thread::wait' => 
  array (
    0 => 'bool',
    'timeout=' => 'int',
  ),
  'threaded::__construct' => 
  array (
    0 => 'void',
  ),
  'threaded::addref' => 
  array (
    0 => 'void',
  ),
  'threaded::chunk' => 
  array (
    0 => 'array<array-key, mixed>',
    'size' => 'int',
    'preserve' => 'bool',
  ),
  'threaded::count' => 
  array (
    0 => 'int',
  ),
  'threaded::delref' => 
  array (
    0 => 'void',
  ),
  'threaded::extend' => 
  array (
    0 => 'bool',
    'class' => 'string',
  ),
  'threaded::from' => 
  array (
    0 => 'Threaded',
    'run' => 'Closure',
    'construct=' => 'Closure',
    'args=' => 'array<array-key, mixed>',
  ),
  'threaded::getrefcount' => 
  array (
    0 => 'int',
  ),
  'threaded::getterminationinfo' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'threaded::isgarbage' => 
  array (
    0 => 'bool',
  ),
  'threaded::isrunning' => 
  array (
    0 => 'bool',
  ),
  'threaded::isterminated' => 
  array (
    0 => 'bool',
  ),
  'threaded::iswaiting' => 
  array (
    0 => 'bool',
  ),
  'threaded::lock' => 
  array (
    0 => 'bool',
  ),
  'threaded::merge' => 
  array (
    0 => 'bool',
    'from' => 'mixed',
    'overwrite=' => 'bool',
  ),
  'threaded::notify' => 
  array (
    0 => 'bool',
  ),
  'threaded::notifyone' => 
  array (
    0 => 'bool',
  ),
  'threaded::offsetexists' => 
  array (
    0 => 'bool',
    'offset' => 'int|string',
  ),
  'threaded::offsetget' => 
  array (
    0 => 'mixed',
    'offset' => 'int|string',
  ),
  'threaded::offsetset' => 
  array (
    0 => 'void',
    'offset' => 'int|null|string',
    'value' => 'mixed',
  ),
  'threaded::offsetunset' => 
  array (
    0 => 'void',
    'offset' => 'int|string',
  ),
  'threaded::pop' => 
  array (
    0 => 'bool',
  ),
  'threaded::run' => 
  array (
    0 => 'void',
  ),
  'threaded::setgarbage' => 
  array (
    0 => 'void',
  ),
  'threaded::shift' => 
  array (
    0 => 'mixed',
  ),
  'threaded::synchronized' => 
  array (
    0 => 'mixed',
    'block' => 'Closure',
    '...args=' => 'mixed',
  ),
  'threaded::unlock' => 
  array (
    0 => 'bool',
  ),
  'threaded::wait' => 
  array (
    0 => 'bool',
    'timeout=' => 'int',
  ),
  'throwable::__tostring' => 
  array (
    0 => 'string',
  ),
  'throwable::getcode' => 
  array (
    0 => 'int|string',
  ),
  'throwable::getfile' => 
  array (
    0 => 'string',
  ),
  'throwable::getline' => 
  array (
    0 => 'int',
  ),
  'throwable::getmessage' => 
  array (
    0 => 'string',
  ),
  'throwable::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'throwable::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'throwable::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'tidy::__construct' => 
  array (
    0 => 'void',
    'filename=' => 'null|string',
    'config=' => 'array<array-key, mixed>|null|string',
    'encoding=' => 'null|string',
    'useIncludePath=' => 'bool',
  ),
  'tidy::body' => 
  array (
    0 => 'null|tidyNode',
  ),
  'tidy::cleanrepair' => 
  array (
    0 => 'bool',
  ),
  'tidy::diagnose' => 
  array (
    0 => 'bool',
  ),
  'tidy::getconfig' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'tidy::gethtmlver' => 
  array (
    0 => 'int',
  ),
  'tidy::getopt' => 
  array (
    0 => 'bool|int|string',
    'option' => 'string',
  ),
  'tidy::getoptdoc' => 
  array (
    0 => 'string',
    'option' => 'string',
  ),
  'tidy::getrelease' => 
  array (
    0 => 'string',
  ),
  'tidy::getstatus' => 
  array (
    0 => 'int',
  ),
  'tidy::head' => 
  array (
    0 => 'null|tidyNode',
  ),
  'tidy::html' => 
  array (
    0 => 'null|tidyNode',
  ),
  'tidy::isxhtml' => 
  array (
    0 => 'bool',
  ),
  'tidy::isxml' => 
  array (
    0 => 'bool',
  ),
  'tidy::parsefile' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'config=' => 'array<array-key, mixed>|null|string',
    'encoding=' => 'null|string',
    'useIncludePath=' => 'bool',
  ),
  'tidy::parsestring' => 
  array (
    0 => 'bool',
    'string' => 'string',
    'config=' => 'array<array-key, mixed>|null|string',
    'encoding=' => 'null|string',
  ),
  'tidy::repairfile' => 
  array (
    0 => 'string',
    'filename' => 'string',
    'config=' => 'array<array-key, mixed>|null|string',
    'encoding=' => 'null|string',
    'useIncludePath=' => 'bool',
  ),
  'tidy::repairstring' => 
  array (
    0 => 'string',
    'string' => 'string',
    'config=' => 'array<array-key, mixed>|null|string',
    'encoding=' => 'null|string',
  ),
  'tidy::root' => 
  array (
    0 => 'null|tidyNode',
  ),
  'tidy_access_count' => 
  array (
    0 => 'int',
    'tidy' => 'tidy',
  ),
  'tidy_clean_repair' => 
  array (
    0 => 'bool',
    'tidy' => 'tidy',
  ),
  'tidy_config_count' => 
  array (
    0 => 'int',
    'tidy' => 'tidy',
  ),
  'tidy_diagnose' => 
  array (
    0 => 'bool',
    'tidy' => 'tidy',
  ),
  'tidy_error_count' => 
  array (
    0 => 'int',
    'tidy' => 'tidy',
  ),
  'tidy_get_body' => 
  array (
    0 => 'null|tidyNode',
    'tidy' => 'tidy',
  ),
  'tidy_get_config' => 
  array (
    0 => 'array<array-key, mixed>',
    'tidy' => 'tidy',
  ),
  'tidy_get_error_buffer' => 
  array (
    0 => 'string',
    'tidy' => 'tidy',
  ),
  'tidy_get_head' => 
  array (
    0 => 'null|tidyNode',
    'tidy' => 'tidy',
  ),
  'tidy_get_html' => 
  array (
    0 => 'null|tidyNode',
    'tidy' => 'tidy',
  ),
  'tidy_get_html_ver' => 
  array (
    0 => 'int',
    'tidy' => 'tidy',
  ),
  'tidy_get_opt_doc' => 
  array (
    0 => 'string',
    'tidy' => 'tidy',
    'option' => 'string',
  ),
  'tidy_get_output' => 
  array (
    0 => 'string',
    'tidy' => 'tidy',
  ),
  'tidy_get_release' => 
  array (
    0 => 'string',
  ),
  'tidy_get_root' => 
  array (
    0 => 'null|tidyNode',
    'tidy' => 'tidy',
  ),
  'tidy_get_status' => 
  array (
    0 => 'int',
    'tidy' => 'tidy',
  ),
  'tidy_getopt' => 
  array (
    0 => 'bool|int|string',
    'tidy' => 'tidy',
    'option' => 'string',
  ),
  'tidy_is_xhtml' => 
  array (
    0 => 'bool',
    'tidy' => 'tidy',
  ),
  'tidy_is_xml' => 
  array (
    0 => 'bool',
    'tidy' => 'tidy',
  ),
  'tidy_load_config' => 
  array (
    0 => 'void',
    'filename' => 'string',
    'encoding' => 'string',
  ),
  'tidy_parse_file' => 
  array (
    0 => 'tidy',
    'filename' => 'string',
    'config=' => 'array<array-key, mixed>|null|string',
    'encoding=' => 'null|string',
    'useIncludePath=' => 'bool',
  ),
  'tidy_parse_string' => 
  array (
    0 => 'tidy',
    'string' => 'string',
    'config=' => 'array<array-key, mixed>|null|string',
    'encoding=' => 'null|string',
  ),
  'tidy_repair_file' => 
  array (
    0 => 'string',
    'filename' => 'string',
    'config=' => 'array<array-key, mixed>|null|string',
    'encoding=' => 'null|string',
    'useIncludePath=' => 'bool',
  ),
  'tidy_repair_string' => 
  array (
    0 => 'string',
    'string' => 'string',
    'config=' => 'array<array-key, mixed>|null|string',
    'encoding=' => 'null|string',
  ),
  'tidy_reset_config' => 
  array (
    0 => 'bool',
  ),
  'tidy_save_config' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'tidy_set_encoding' => 
  array (
    0 => 'bool',
    'encoding' => 'string',
  ),
  'tidy_setopt' => 
  array (
    0 => 'bool',
    'option' => 'string',
    'value' => 'mixed',
  ),
  'tidy_warning_count' => 
  array (
    0 => 'int',
    'tidy' => 'tidy',
  ),
  'tidynode::__construct' => 
  array (
    0 => 'void',
  ),
  'tidynode::getparent' => 
  array (
    0 => 'null|tidyNode',
  ),
  'tidynode::haschildren' => 
  array (
    0 => 'bool',
  ),
  'tidynode::hassiblings' => 
  array (
    0 => 'bool',
  ),
  'tidynode::isasp' => 
  array (
    0 => 'bool',
  ),
  'tidynode::iscomment' => 
  array (
    0 => 'bool',
  ),
  'tidynode::ishtml' => 
  array (
    0 => 'bool',
  ),
  'tidynode::isjste' => 
  array (
    0 => 'bool',
  ),
  'tidynode::isphp' => 
  array (
    0 => 'bool',
  ),
  'tidynode::istext' => 
  array (
    0 => 'bool',
  ),
  'time' => 
  array (
    0 => 'int<1, max>',
  ),
  'time_nanosleep' => 
  array (
    0 => 'array{0: int<0, max>, 1: int<0, max>}|bool',
    'seconds' => 'int<1, max>',
    'nanoseconds' => 'int<1, max>',
  ),
  'time_sleep_until' => 
  array (
    0 => 'bool',
    'timestamp' => 'float',
  ),
  'timezone_abbreviations_list' => 
  array (
    0 => 'array<string, list<array{dst: bool, offset: int, timezone_id: null|string}>>',
  ),
  'timezone_identifiers_list' => 
  array (
    0 => 'list<string>',
    'timezoneGroup=' => 'int',
    'countryCode=' => 'null|string',
  ),
  'timezone_location_get' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'object' => 'DateTimeZone',
  ),
  'timezone_name_from_abbr' => 
  array (
    0 => 'false|string',
    'abbr' => 'string',
    'utcOffset=' => 'int',
    'isDST=' => 'int',
  ),
  'timezone_name_get' => 
  array (
    0 => 'string',
    'object' => 'DateTimeZone',
  ),
  'timezone_offset_get' => 
  array (
    0 => 'int',
    'object' => 'DateTimeZone',
    'datetime' => 'DateTimeInterface',
  ),
  'timezone_open' => 
  array (
    0 => 'DateTimeZone|false',
    'timezone' => 'string',
  ),
  'timezone_transitions_get' => 
  array (
    0 => 'false|list<array{abbr: string, isdst: bool, offset: int, time: string, ts: int}>',
    'object' => 'DateTimeZone',
    'timestampBegin=' => 'int',
    'timestampEnd=' => 'int',
  ),
  'timezone_version_get' => 
  array (
    0 => 'string',
  ),
  'tmpfile' => 
  array (
    0 => 'false|resource',
  ),
  'token_get_all' => 
  array (
    0 => 'list<array{0: int, 1: string, 2: int}|string>',
    'code' => 'string',
    'flags=' => 'int',
  ),
  'token_name' => 
  array (
    0 => 'string',
    'id' => 'int',
  ),
  'tokyotyrant::__construct' => 
  array (
    0 => 'void',
    'host=' => 'string',
    'port=' => 'int',
    'options=' => 'array<array-key, mixed>',
  ),
  'tokyotyrant::add' => 
  array (
    0 => 'float|int',
    'key' => 'string',
    'increment' => 'float',
    'type=' => 'int',
  ),
  'tokyotyrant::connect' => 
  array (
    0 => 'TokyoTyrant',
    'host' => 'string',
    'port=' => 'int',
    'options=' => 'array<array-key, mixed>',
  ),
  'tokyotyrant::connecturi' => 
  array (
    0 => 'TokyoTyrant',
    'uri' => 'string',
  ),
  'tokyotyrant::copy' => 
  array (
    0 => 'TokyoTyrant',
    'path' => 'string',
  ),
  'tokyotyrant::ext' => 
  array (
    0 => 'string',
    'name' => 'string',
    'options' => 'int',
    'key' => 'string',
    'value' => 'string',
  ),
  'tokyotyrant::fwmkeys' => 
  array (
    0 => 'array<array-key, mixed>',
    'prefix' => 'string',
    'max_recs' => 'int',
  ),
  'tokyotyrant::get' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'mixed',
  ),
  'tokyotyrant::getiterator' => 
  array (
    0 => 'TokyoTyrantIterator',
  ),
  'tokyotyrant::num' => 
  array (
    0 => 'int',
  ),
  'tokyotyrant::out' => 
  array (
    0 => 'string',
    'keys' => 'mixed',
  ),
  'tokyotyrant::put' => 
  array (
    0 => 'TokyoTyrant',
    'keys' => 'mixed',
    'value=' => 'string',
  ),
  'tokyotyrant::putcat' => 
  array (
    0 => 'TokyoTyrant',
    'keys' => 'mixed',
    'value=' => 'string',
  ),
  'tokyotyrant::putkeep' => 
  array (
    0 => 'TokyoTyrant',
    'keys' => 'mixed',
    'value=' => 'string',
  ),
  'tokyotyrant::putnr' => 
  array (
    0 => 'TokyoTyrant',
    'keys' => 'mixed',
    'value=' => 'string',
  ),
  'tokyotyrant::putshl' => 
  array (
    0 => 'mixed',
    'key' => 'string',
    'value' => 'string',
    'width' => 'int',
  ),
  'tokyotyrant::restore' => 
  array (
    0 => 'mixed',
    'log_dir' => 'string',
    'timestamp' => 'int',
    'check_consistency=' => 'bool',
  ),
  'tokyotyrant::setmaster' => 
  array (
    0 => 'mixed',
    'host' => 'string',
    'port' => 'int',
    'timestamp' => 'int',
    'check_consistency=' => 'bool',
  ),
  'tokyotyrant::size' => 
  array (
    0 => 'int',
    'key' => 'string',
  ),
  'tokyotyrant::stat' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'tokyotyrant::sync' => 
  array (
    0 => 'mixed',
  ),
  'tokyotyrant::tune' => 
  array (
    0 => 'TokyoTyrant',
    'timeout' => 'float',
    'options=' => 'int',
  ),
  'tokyotyrant::vanish' => 
  array (
    0 => 'mixed',
  ),
  'tokyotyrantiterator::__construct' => 
  array (
    0 => 'void',
    'object' => 'mixed',
  ),
  'tokyotyrantiterator::current' => 
  array (
    0 => 'mixed',
  ),
  'tokyotyrantiterator::key' => 
  array (
    0 => 'mixed',
  ),
  'tokyotyrantiterator::next' => 
  array (
    0 => 'mixed',
  ),
  'tokyotyrantiterator::rewind' => 
  array (
    0 => 'void',
  ),
  'tokyotyrantiterator::valid' => 
  array (
    0 => 'bool',
  ),
  'tokyotyrantquery::__construct' => 
  array (
    0 => 'void',
    'table' => 'TokyoTyrantTable',
  ),
  'tokyotyrantquery::addcond' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'op' => 'int',
    'expr' => 'string',
  ),
  'tokyotyrantquery::count' => 
  array (
    0 => 'int',
  ),
  'tokyotyrantquery::current' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'tokyotyrantquery::hint' => 
  array (
    0 => 'string',
  ),
  'tokyotyrantquery::key' => 
  array (
    0 => 'string',
  ),
  'tokyotyrantquery::metasearch' => 
  array (
    0 => 'array<array-key, mixed>',
    'queries' => 'array<array-key, mixed>',
    'type' => 'int',
  ),
  'tokyotyrantquery::next' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'tokyotyrantquery::out' => 
  array (
    0 => 'TokyoTyrantQuery',
  ),
  'tokyotyrantquery::rewind' => 
  array (
    0 => 'bool',
  ),
  'tokyotyrantquery::search' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'tokyotyrantquery::setlimit' => 
  array (
    0 => 'mixed',
    'max=' => 'int',
    'skip=' => 'int',
  ),
  'tokyotyrantquery::setorder' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'type' => 'int',
  ),
  'tokyotyrantquery::valid' => 
  array (
    0 => 'bool',
  ),
  'tokyotyranttable::add' => 
  array (
    0 => 'void',
    'key' => 'string',
    'increment' => 'mixed',
    'type=' => 'string',
  ),
  'tokyotyranttable::genuid' => 
  array (
    0 => 'int',
  ),
  'tokyotyranttable::get' => 
  array (
    0 => 'array<array-key, mixed>',
    'keys' => 'mixed',
  ),
  'tokyotyranttable::getiterator' => 
  array (
    0 => 'TokyoTyrantIterator',
  ),
  'tokyotyranttable::getquery' => 
  array (
    0 => 'TokyoTyrantQuery',
  ),
  'tokyotyranttable::out' => 
  array (
    0 => 'void',
    'keys' => 'mixed',
  ),
  'tokyotyranttable::put' => 
  array (
    0 => 'int',
    'key' => 'string',
    'columns' => 'array<array-key, mixed>',
  ),
  'tokyotyranttable::putcat' => 
  array (
    0 => 'void',
    'key' => 'string',
    'columns' => 'array<array-key, mixed>',
  ),
  'tokyotyranttable::putkeep' => 
  array (
    0 => 'void',
    'key' => 'string',
    'columns' => 'array<array-key, mixed>',
  ),
  'tokyotyranttable::putnr' => 
  array (
    0 => 'void',
    'keys' => 'mixed',
    'value=' => 'string',
  ),
  'tokyotyranttable::putshl' => 
  array (
    0 => 'void',
    'key' => 'string',
    'value' => 'string',
    'width' => 'int',
  ),
  'tokyotyranttable::setindex' => 
  array (
    0 => 'mixed',
    'column' => 'string',
    'type' => 'int',
  ),
  'touch' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'mtime=' => 'int|null',
    'atime=' => 'int|null',
  ),
  'trader_acos' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_ad' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'volume' => 'array<array-key, mixed>',
  ),
  'trader_add' => 
  array (
    0 => 'array<array-key, mixed>',
    'real0' => 'array<array-key, mixed>',
    'real1' => 'array<array-key, mixed>',
  ),
  'trader_adosc' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'volume' => 'array<array-key, mixed>',
    'fastPeriod=' => 'int',
    'slowPeriod=' => 'int',
  ),
  'trader_adx' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_adxr' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_apo' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'fastPeriod=' => 'int',
    'slowPeriod=' => 'int',
    'mAType=' => 'int',
  ),
  'trader_aroon' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_aroonosc' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_asin' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_atan' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_atr' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_avgprice' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_bbands' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
    'nbDevUp=' => 'float',
    'nbDevDn=' => 'float',
    'mAType=' => 'int',
  ),
  'trader_beta' => 
  array (
    0 => 'array<array-key, mixed>',
    'real0' => 'array<array-key, mixed>',
    'real1' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_bop' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cci' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_cdl2crows' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdl3blackcrows' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdl3inside' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdl3linestrike' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdl3outside' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdl3starsinsouth' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdl3whitesoldiers' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlabandonedbaby' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'penetration=' => 'float',
  ),
  'trader_cdladvanceblock' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlbelthold' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlbreakaway' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlclosingmarubozu' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlconcealbabyswall' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlcounterattack' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdldarkcloudcover' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'penetration=' => 'float',
  ),
  'trader_cdldoji' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdldojistar' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdldragonflydoji' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlengulfing' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdleveningdojistar' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'penetration=' => 'float',
  ),
  'trader_cdleveningstar' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'penetration=' => 'float',
  ),
  'trader_cdlgapsidesidewhite' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlgravestonedoji' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlhammer' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlhangingman' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlharami' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlharamicross' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlhighwave' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlhikkake' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlhikkakemod' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlhomingpigeon' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlidentical3crows' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlinneck' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlinvertedhammer' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlkicking' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlkickingbylength' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlladderbottom' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdllongleggeddoji' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdllongline' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlmarubozu' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlmatchinglow' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlmathold' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'penetration=' => 'float',
  ),
  'trader_cdlmorningdojistar' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'penetration=' => 'float',
  ),
  'trader_cdlmorningstar' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'penetration=' => 'float',
  ),
  'trader_cdlonneck' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlpiercing' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlrickshawman' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlrisefall3methods' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlseparatinglines' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlshootingstar' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlshortline' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlspinningtop' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlstalledpattern' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlsticksandwich' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdltakuri' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdltasukigap' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlthrusting' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdltristar' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlunique3river' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlupsidegap2crows' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_cdlxsidegap3methods' => 
  array (
    0 => 'array<array-key, mixed>',
    'open' => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_ceil' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_cmo' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_correl' => 
  array (
    0 => 'array<array-key, mixed>',
    'real0' => 'array<array-key, mixed>',
    'real1' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_cos' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_cosh' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_dema' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_div' => 
  array (
    0 => 'array<array-key, mixed>',
    'real0' => 'array<array-key, mixed>',
    'real1' => 'array<array-key, mixed>',
  ),
  'trader_dx' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_ema' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_errno' => 
  array (
    0 => 'int',
  ),
  'trader_exp' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_floor' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_get_compat' => 
  array (
    0 => 'int',
  ),
  'trader_get_unstable_period' => 
  array (
    0 => 'int',
    'functionId' => 'int',
  ),
  'trader_ht_dcperiod' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_ht_dcphase' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_ht_phasor' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_ht_sine' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_ht_trendline' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_ht_trendmode' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_kama' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_linearreg' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_linearreg_angle' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_linearreg_intercept' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_linearreg_slope' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_ln' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_log10' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_ma' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
    'mAType=' => 'int',
  ),
  'trader_macd' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'fastPeriod=' => 'int',
    'slowPeriod=' => 'int',
    'signalPeriod=' => 'int',
  ),
  'trader_macdext' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'fastPeriod=' => 'int',
    'fastMAType=' => 'int',
    'slowPeriod=' => 'int',
    'slowMAType=' => 'int',
    'signalPeriod=' => 'int',
    'signalMAType=' => 'int',
  ),
  'trader_macdfix' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'signalPeriod=' => 'int',
  ),
  'trader_mama' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'fastLimit=' => 'float',
    'slowLimit=' => 'float',
  ),
  'trader_mavp' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'periods' => 'array<array-key, mixed>',
    'minPeriod=' => 'int',
    'maxPeriod=' => 'int',
    'mAType=' => 'int',
  ),
  'trader_max' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_maxindex' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_medprice' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
  ),
  'trader_mfi' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'volume' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_midpoint' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_midprice' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_min' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_minindex' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_minmax' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_minmaxindex' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_minus_di' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_minus_dm' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_mom' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_mult' => 
  array (
    0 => 'array<array-key, mixed>',
    'real0' => 'array<array-key, mixed>',
    'real1' => 'array<array-key, mixed>',
  ),
  'trader_natr' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_obv' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'volume' => 'array<array-key, mixed>',
  ),
  'trader_plus_di' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_plus_dm' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_ppo' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'fastPeriod=' => 'int',
    'slowPeriod=' => 'int',
    'mAType=' => 'int',
  ),
  'trader_roc' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_rocp' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_rocr' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_rocr100' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_rsi' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_sar' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'acceleration=' => 'float',
    'maximum=' => 'float',
  ),
  'trader_sarext' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'startValue=' => 'float',
    'offsetOnReverse=' => 'float',
    'accelerationInitLong=' => 'float',
    'accelerationLong=' => 'float',
    'accelerationMaxLong=' => 'float',
    'accelerationInitShort=' => 'float',
    'accelerationShort=' => 'float',
    'accelerationMaxShort=' => 'float',
  ),
  'trader_set_compat' => 
  array (
    0 => 'void',
    'compatId' => 'int',
  ),
  'trader_set_unstable_period' => 
  array (
    0 => 'void',
    'functionId' => 'int',
    'timePeriod' => 'int',
  ),
  'trader_sin' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_sinh' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_sma' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_sqrt' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_stddev' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
    'nbDev=' => 'float',
  ),
  'trader_stoch' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'fastK_Period=' => 'int',
    'slowK_Period=' => 'int',
    'slowK_MAType=' => 'int',
    'slowD_Period=' => 'int',
    'slowD_MAType=' => 'int',
  ),
  'trader_stochf' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'fastK_Period=' => 'int',
    'fastD_Period=' => 'int',
    'fastD_MAType=' => 'int',
  ),
  'trader_stochrsi' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
    'fastK_Period=' => 'int',
    'fastD_Period=' => 'int',
    'fastD_MAType=' => 'int',
  ),
  'trader_sub' => 
  array (
    0 => 'array<array-key, mixed>',
    'real0' => 'array<array-key, mixed>',
    'real1' => 'array<array-key, mixed>',
  ),
  'trader_sum' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_t3' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
    'vFactor=' => 'float',
  ),
  'trader_tan' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_tanh' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
  ),
  'trader_tema' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_trange' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_trima' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_trix' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_tsf' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_typprice' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_ultosc' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'timePeriod1=' => 'int',
    'timePeriod2=' => 'int',
    'timePeriod3=' => 'int',
  ),
  'trader_var' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
    'nbDev=' => 'float',
  ),
  'trader_wclprice' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
  ),
  'trader_willr' => 
  array (
    0 => 'array<array-key, mixed>',
    'high' => 'array<array-key, mixed>',
    'low' => 'array<array-key, mixed>',
    'close' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trader_wma' => 
  array (
    0 => 'array<array-key, mixed>',
    'real' => 'array<array-key, mixed>',
    'timePeriod=' => 'int',
  ),
  'trait_exists' => 
  array (
    0 => 'bool',
    'trait' => 'string',
    'autoload=' => 'bool',
  ),
  'transliterator::__construct' => 
  array (
    0 => 'void',
  ),
  'transliterator::create' => 
  array (
    0 => 'Transliterator|null',
    'id' => 'string',
    'direction=' => 'int',
  ),
  'transliterator::createfromrules' => 
  array (
    0 => 'Transliterator|null',
    'rules' => 'string',
    'direction=' => 'int',
  ),
  'transliterator::createinverse' => 
  array (
    0 => 'Transliterator|null',
  ),
  'transliterator::geterrorcode' => 
  array (
    0 => 'int',
  ),
  'transliterator::geterrormessage' => 
  array (
    0 => 'string',
  ),
  'transliterator::listids' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'transliterator::transliterate' => 
  array (
    0 => 'false|string',
    'string' => 'string',
    'start=' => 'int',
    'end=' => 'int',
  ),
  'transliterator_create' => 
  array (
    0 => 'Transliterator|null',
    'id' => 'string',
    'direction=' => 'int',
  ),
  'transliterator_create_from_rules' => 
  array (
    0 => 'Transliterator|null',
    'rules' => 'string',
    'direction=' => 'int',
  ),
  'transliterator_create_inverse' => 
  array (
    0 => 'Transliterator|null',
    'transliterator' => 'Transliterator',
  ),
  'transliterator_get_error_code' => 
  array (
    0 => 'int',
    'transliterator' => 'Transliterator',
  ),
  'transliterator_get_error_message' => 
  array (
    0 => 'string',
    'transliterator' => 'Transliterator',
  ),
  'transliterator_list_ids' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'transliterator_transliterate' => 
  array (
    0 => 'false|string',
    'transliterator' => 'Transliterator|string',
    'string' => 'string',
    'start=' => 'int',
    'end=' => 'int',
  ),
  'trigger_error' => 
  array (
    0 => 'bool',
    'message' => 'string',
    'error_level=' => '256|512|1024|16384',
  ),
  'trim' => 
  array (
    0 => 'string',
    'string' => 'string',
    'characters=' => 'string',
  ),
  'typeerror::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'typeerror::__tostring' => 
  array (
    0 => 'string',
  ),
  'typeerror::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'typeerror::getcode' => 
  array (
    0 => 'int',
  ),
  'typeerror::getfile' => 
  array (
    0 => 'string',
  ),
  'typeerror::getline' => 
  array (
    0 => 'int',
  ),
  'typeerror::getmessage' => 
  array (
    0 => 'string',
  ),
  'typeerror::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'typeerror::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'typeerror::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'uasort' => 
  array (
    0 => 'true',
    '&array' => 'array<array-key, mixed>',
    'callback' => 'callable(mixed, mixed):int',
  ),
  'ucfirst' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'uconverter::__construct' => 
  array (
    0 => 'void',
    'destination_encoding=' => 'null|string',
    'source_encoding=' => 'null|string',
  ),
  'uconverter::convert' => 
  array (
    0 => 'string',
    'str' => 'string',
    'reverse=' => 'bool',
  ),
  'uconverter::fromucallback' => 
  array (
    0 => 'array<array-key, mixed>|int|null|string',
    'reason' => 'int',
    'source' => 'array<array-key, mixed>',
    'codePoint' => 'int',
    '&w_error' => 'int',
  ),
  'uconverter::getaliases' => 
  array (
    0 => 'array<array-key, mixed>|false|null',
    'name' => 'string',
  ),
  'uconverter::getavailable' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'uconverter::getdestinationencoding' => 
  array (
    0 => 'false|null|string',
  ),
  'uconverter::getdestinationtype' => 
  array (
    0 => 'false|int|null',
  ),
  'uconverter::geterrorcode' => 
  array (
    0 => 'int',
  ),
  'uconverter::geterrormessage' => 
  array (
    0 => 'null|string',
  ),
  'uconverter::getsourceencoding' => 
  array (
    0 => 'false|null|string',
  ),
  'uconverter::getsourcetype' => 
  array (
    0 => 'false|int|null',
  ),
  'uconverter::getstandards' => 
  array (
    0 => 'array<array-key, mixed>|null',
  ),
  'uconverter::getsubstchars' => 
  array (
    0 => 'false|null|string',
  ),
  'uconverter::reasontext' => 
  array (
    0 => 'string',
    'reason' => 'int',
  ),
  'uconverter::setdestinationencoding' => 
  array (
    0 => 'bool',
    'encoding' => 'string',
  ),
  'uconverter::setsourceencoding' => 
  array (
    0 => 'bool',
    'encoding' => 'string',
  ),
  'uconverter::setsubstchars' => 
  array (
    0 => 'bool',
    'chars' => 'string',
  ),
  'uconverter::toucallback' => 
  array (
    0 => 'array<array-key, mixed>|int|null|string',
    'reason' => 'int',
    'source' => 'string',
    'codeUnits' => 'string',
    '&w_error' => 'int',
  ),
  'uconverter::transcode' => 
  array (
    0 => 'string',
    'str' => 'string',
    'toEncoding' => 'string',
    'fromEncoding' => 'string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'ucwords' => 
  array (
    0 => 'string',
    'string' => 'string',
    'separators=' => 'string',
  ),
  'udm_add_search_limit' => 
  array (
    0 => 'bool',
    'agent' => 'resource',
    'var' => 'int',
    'value' => 'string',
  ),
  'udm_alloc_agent' => 
  array (
    0 => 'resource',
    'dbaddr' => 'string',
    'dbmode=' => 'string',
  ),
  'udm_alloc_agent_array' => 
  array (
    0 => 'resource',
    'databases' => 'array<array-key, mixed>',
  ),
  'udm_api_version' => 
  array (
    0 => 'int',
  ),
  'udm_cat_list' => 
  array (
    0 => 'array<array-key, mixed>',
    'agent' => 'resource',
    'category' => 'string',
  ),
  'udm_cat_path' => 
  array (
    0 => 'array<array-key, mixed>',
    'agent' => 'resource',
    'category' => 'string',
  ),
  'udm_check_charset' => 
  array (
    0 => 'bool',
    'agent' => 'resource',
    'charset' => 'string',
  ),
  'udm_check_stored' => 
  array (
    0 => 'int',
    'agent' => 'mixed',
    'link' => 'int',
    'doc_id' => 'string',
  ),
  'udm_clear_search_limits' => 
  array (
    0 => 'bool',
    'agent' => 'resource',
  ),
  'udm_close_stored' => 
  array (
    0 => 'int',
    'agent' => 'mixed',
    'link' => 'int',
  ),
  'udm_crc32' => 
  array (
    0 => 'int',
    'agent' => 'resource',
    'string' => 'string',
  ),
  'udm_errno' => 
  array (
    0 => 'int',
    'agent' => 'resource',
  ),
  'udm_error' => 
  array (
    0 => 'string',
    'agent' => 'resource',
  ),
  'udm_find' => 
  array (
    0 => 'resource',
    'agent' => 'resource',
    'query' => 'string',
  ),
  'udm_free_agent' => 
  array (
    0 => 'int',
    'agent' => 'resource',
  ),
  'udm_free_ispell_data' => 
  array (
    0 => 'bool',
    'agent' => 'int',
  ),
  'udm_free_res' => 
  array (
    0 => 'bool',
    'res' => 'resource',
  ),
  'udm_get_doc_count' => 
  array (
    0 => 'int',
    'agent' => 'resource',
  ),
  'udm_get_res_field' => 
  array (
    0 => 'string',
    'res' => 'resource',
    'row' => 'int',
    'field' => 'int',
  ),
  'udm_get_res_param' => 
  array (
    0 => 'string',
    'res' => 'resource',
    'param' => 'int',
  ),
  'udm_hash32' => 
  array (
    0 => 'int',
    'agent' => 'resource',
    'string' => 'string',
  ),
  'udm_load_ispell_data' => 
  array (
    0 => 'bool',
    'agent' => 'resource',
    'var' => 'int',
    'val1' => 'string',
    'val2' => 'string',
    'flag' => 'int',
  ),
  'udm_open_stored' => 
  array (
    0 => 'int',
    'agent' => 'mixed',
    'storedaddr' => 'string',
  ),
  'udm_set_agent_param' => 
  array (
    0 => 'bool',
    'agent' => 'resource',
    'var' => 'int',
    'val' => 'string',
  ),
  'ui\\area::ondraw' => 
  array (
    0 => 'mixed',
    'pen' => 'UI\\Draw\\Pen',
    'areaSize' => 'UI\\Size',
    'clipPoint' => 'UI\\Point',
    'clipSize' => 'UI\\Size',
  ),
  'ui\\area::onkey' => 
  array (
    0 => 'mixed',
    'key' => 'string',
    'ext' => 'int',
    'flags' => 'int',
  ),
  'ui\\area::onmouse' => 
  array (
    0 => 'mixed',
    'areaPoint' => 'UI\\Point',
    'areaSize' => 'UI\\Size',
    'flags' => 'int',
  ),
  'ui\\area::redraw' => 
  array (
    0 => 'mixed',
  ),
  'ui\\area::scrollto' => 
  array (
    0 => 'mixed',
    'point' => 'UI\\Point',
    'size' => 'UI\\Size',
  ),
  'ui\\area::setsize' => 
  array (
    0 => 'mixed',
    'size' => 'UI\\Size',
  ),
  'ui\\control::destroy' => 
  array (
    0 => 'mixed',
  ),
  'ui\\control::disable' => 
  array (
    0 => 'mixed',
  ),
  'ui\\control::enable' => 
  array (
    0 => 'mixed',
  ),
  'ui\\control::getparent' => 
  array (
    0 => 'UI\\Control',
  ),
  'ui\\control::gettoplevel' => 
  array (
    0 => 'int',
  ),
  'ui\\control::hide' => 
  array (
    0 => 'mixed',
  ),
  'ui\\control::isenabled' => 
  array (
    0 => 'bool',
  ),
  'ui\\control::isvisible' => 
  array (
    0 => 'bool',
  ),
  'ui\\control::setparent' => 
  array (
    0 => 'mixed',
    'parent' => 'UI\\Control',
  ),
  'ui\\control::show' => 
  array (
    0 => 'mixed',
  ),
  'ui\\controls\\box::append' => 
  array (
    0 => 'int',
    'control' => 'Control',
    'stretchy=' => 'bool',
  ),
  'ui\\controls\\box::delete' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'ui\\controls\\box::getorientation' => 
  array (
    0 => 'int',
  ),
  'ui\\controls\\box::ispadded' => 
  array (
    0 => 'bool',
  ),
  'ui\\controls\\box::setpadded' => 
  array (
    0 => 'mixed',
    'padded' => 'bool',
  ),
  'ui\\controls\\button::gettext' => 
  array (
    0 => 'string',
  ),
  'ui\\controls\\button::onclick' => 
  array (
    0 => 'mixed',
  ),
  'ui\\controls\\button::settext' => 
  array (
    0 => 'mixed',
    'text' => 'string',
  ),
  'ui\\controls\\check::gettext' => 
  array (
    0 => 'string',
  ),
  'ui\\controls\\check::ischecked' => 
  array (
    0 => 'bool',
  ),
  'ui\\controls\\check::ontoggle' => 
  array (
    0 => 'mixed',
  ),
  'ui\\controls\\check::setchecked' => 
  array (
    0 => 'mixed',
    'checked' => 'bool',
  ),
  'ui\\controls\\check::settext' => 
  array (
    0 => 'mixed',
    'text' => 'string',
  ),
  'ui\\controls\\colorbutton::getcolor' => 
  array (
    0 => 'UI\\Color',
  ),
  'ui\\controls\\colorbutton::onchange' => 
  array (
    0 => 'mixed',
  ),
  'ui\\controls\\combo::append' => 
  array (
    0 => 'mixed',
    'text' => 'string',
  ),
  'ui\\controls\\combo::getselected' => 
  array (
    0 => 'int',
  ),
  'ui\\controls\\combo::onselected' => 
  array (
    0 => 'mixed',
  ),
  'ui\\controls\\combo::setselected' => 
  array (
    0 => 'mixed',
    'index' => 'int',
  ),
  'ui\\controls\\editablecombo::append' => 
  array (
    0 => 'mixed',
    'text' => 'string',
  ),
  'ui\\controls\\editablecombo::gettext' => 
  array (
    0 => 'string',
  ),
  'ui\\controls\\editablecombo::onchange' => 
  array (
    0 => 'mixed',
  ),
  'ui\\controls\\editablecombo::settext' => 
  array (
    0 => 'mixed',
    'text' => 'string',
  ),
  'ui\\controls\\entry::gettext' => 
  array (
    0 => 'string',
  ),
  'ui\\controls\\entry::isreadonly' => 
  array (
    0 => 'bool',
  ),
  'ui\\controls\\entry::onchange' => 
  array (
    0 => 'mixed',
  ),
  'ui\\controls\\entry::setreadonly' => 
  array (
    0 => 'mixed',
    'readOnly' => 'bool',
  ),
  'ui\\controls\\entry::settext' => 
  array (
    0 => 'mixed',
    'text' => 'string',
  ),
  'ui\\controls\\form::append' => 
  array (
    0 => 'int',
    'label' => 'string',
    'control' => 'UI\\Control',
    'stretchy=' => 'bool',
  ),
  'ui\\controls\\form::delete' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'ui\\controls\\form::ispadded' => 
  array (
    0 => 'bool',
  ),
  'ui\\controls\\form::setpadded' => 
  array (
    0 => 'mixed',
    'padded' => 'bool',
  ),
  'ui\\controls\\grid::append' => 
  array (
    0 => 'mixed',
    'control' => 'UI\\Control',
    'left' => 'int',
    'top' => 'int',
    'xspan' => 'int',
    'yspan' => 'int',
    'hexpand' => 'bool',
    'halign' => 'int',
    'vexpand' => 'bool',
    'valign' => 'int',
  ),
  'ui\\controls\\grid::ispadded' => 
  array (
    0 => 'bool',
  ),
  'ui\\controls\\grid::setpadded' => 
  array (
    0 => 'mixed',
    'padding' => 'bool',
  ),
  'ui\\controls\\group::append' => 
  array (
    0 => 'mixed',
    'control' => 'UI\\Control',
  ),
  'ui\\controls\\group::gettitle' => 
  array (
    0 => 'string',
  ),
  'ui\\controls\\group::hasmargin' => 
  array (
    0 => 'bool',
  ),
  'ui\\controls\\group::setmargin' => 
  array (
    0 => 'mixed',
    'margin' => 'bool',
  ),
  'ui\\controls\\group::settitle' => 
  array (
    0 => 'mixed',
    'title' => 'string',
  ),
  'ui\\controls\\label::gettext' => 
  array (
    0 => 'string',
  ),
  'ui\\controls\\label::settext' => 
  array (
    0 => 'mixed',
    'text' => 'string',
  ),
  'ui\\controls\\multilineentry::append' => 
  array (
    0 => 'mixed',
    'text' => 'string',
  ),
  'ui\\controls\\multilineentry::gettext' => 
  array (
    0 => 'string',
  ),
  'ui\\controls\\multilineentry::isreadonly' => 
  array (
    0 => 'bool',
  ),
  'ui\\controls\\multilineentry::onchange' => 
  array (
    0 => 'mixed',
  ),
  'ui\\controls\\multilineentry::setreadonly' => 
  array (
    0 => 'mixed',
    'readOnly' => 'bool',
  ),
  'ui\\controls\\multilineentry::settext' => 
  array (
    0 => 'mixed',
    'text' => 'string',
  ),
  'ui\\controls\\progress::getvalue' => 
  array (
    0 => 'int',
  ),
  'ui\\controls\\progress::setvalue' => 
  array (
    0 => 'mixed',
    'value' => 'int',
  ),
  'ui\\controls\\radio::append' => 
  array (
    0 => 'mixed',
    'text' => 'string',
  ),
  'ui\\controls\\radio::getselected' => 
  array (
    0 => 'int',
  ),
  'ui\\controls\\radio::onselected' => 
  array (
    0 => 'mixed',
  ),
  'ui\\controls\\radio::setselected' => 
  array (
    0 => 'mixed',
    'index' => 'int',
  ),
  'ui\\controls\\slider::getvalue' => 
  array (
    0 => 'int',
  ),
  'ui\\controls\\slider::onchange' => 
  array (
    0 => 'mixed',
  ),
  'ui\\controls\\slider::setvalue' => 
  array (
    0 => 'mixed',
    'value' => 'int',
  ),
  'ui\\controls\\spin::getvalue' => 
  array (
    0 => 'int',
  ),
  'ui\\controls\\spin::onchange' => 
  array (
    0 => 'mixed',
  ),
  'ui\\controls\\spin::setvalue' => 
  array (
    0 => 'mixed',
    'value' => 'int',
  ),
  'ui\\controls\\tab::append' => 
  array (
    0 => 'int',
    'name' => 'string',
    'control' => 'UI\\Control',
  ),
  'ui\\controls\\tab::delete' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'ui\\controls\\tab::hasmargin' => 
  array (
    0 => 'bool',
    'page' => 'int',
  ),
  'ui\\controls\\tab::insertat' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'page' => 'int',
    'control' => 'UI\\Control',
  ),
  'ui\\controls\\tab::pages' => 
  array (
    0 => 'int',
  ),
  'ui\\controls\\tab::setmargin' => 
  array (
    0 => 'mixed',
    'page' => 'int',
    'margin' => 'bool',
  ),
  'ui\\draw\\brush::getcolor' => 
  array (
    0 => 'UI\\Draw\\Color',
  ),
  'ui\\draw\\brush\\gradient::delstop' => 
  array (
    0 => 'int',
    'index' => 'int',
  ),
  'ui\\draw\\color::getchannel' => 
  array (
    0 => 'float',
    'channel' => 'int',
  ),
  'ui\\draw\\color::setchannel' => 
  array (
    0 => 'void',
    'channel' => 'int',
    'value' => 'float',
  ),
  'ui\\draw\\matrix::invert' => 
  array (
    0 => 'mixed',
  ),
  'ui\\draw\\matrix::isinvertible' => 
  array (
    0 => 'bool',
  ),
  'ui\\draw\\matrix::multiply' => 
  array (
    0 => 'UI\\Draw\\Matrix',
    'matrix' => 'UI\\Draw\\Matrix',
  ),
  'ui\\draw\\matrix::rotate' => 
  array (
    0 => 'mixed',
    'point' => 'UI\\Point',
    'amount' => 'float',
  ),
  'ui\\draw\\matrix::scale' => 
  array (
    0 => 'mixed',
    'center' => 'UI\\Point',
    'point' => 'UI\\Point',
  ),
  'ui\\draw\\matrix::skew' => 
  array (
    0 => 'mixed',
    'point' => 'UI\\Point',
    'amount' => 'UI\\Point',
  ),
  'ui\\draw\\matrix::translate' => 
  array (
    0 => 'mixed',
    'point' => 'UI\\Point',
  ),
  'ui\\draw\\path::addrectangle' => 
  array (
    0 => 'mixed',
    'point' => 'UI\\Point',
    'size' => 'UI\\Size',
  ),
  'ui\\draw\\path::arcto' => 
  array (
    0 => 'mixed',
    'point' => 'UI\\Point',
    'radius' => 'float',
    'angle' => 'float',
    'sweep' => 'float',
    'negative' => 'float',
  ),
  'ui\\draw\\path::bezierto' => 
  array (
    0 => 'mixed',
    'point' => 'UI\\Point',
    'radius' => 'float',
    'angle' => 'float',
    'sweep' => 'float',
    'negative' => 'float',
  ),
  'ui\\draw\\path::closefigure' => 
  array (
    0 => 'mixed',
  ),
  'ui\\draw\\path::end' => 
  array (
    0 => 'mixed',
  ),
  'ui\\draw\\path::lineto' => 
  array (
    0 => 'mixed',
    'point' => 'UI\\Point',
    'radius' => 'float',
    'angle' => 'float',
    'sweep' => 'float',
    'negative' => 'float',
  ),
  'ui\\draw\\path::newfigure' => 
  array (
    0 => 'mixed',
    'point' => 'UI\\Point',
  ),
  'ui\\draw\\path::newfigurewitharc' => 
  array (
    0 => 'mixed',
    'point' => 'UI\\Point',
    'radius' => 'float',
    'angle' => 'float',
    'sweep' => 'float',
    'negative' => 'float',
  ),
  'ui\\draw\\pen::clip' => 
  array (
    0 => 'mixed',
    'path' => 'UI\\Draw\\Path',
  ),
  'ui\\draw\\pen::restore' => 
  array (
    0 => 'mixed',
  ),
  'ui\\draw\\pen::save' => 
  array (
    0 => 'mixed',
  ),
  'ui\\draw\\pen::transform' => 
  array (
    0 => 'mixed',
    'matrix' => 'UI\\Draw\\Matrix',
  ),
  'ui\\draw\\pen::write' => 
  array (
    0 => 'mixed',
    'point' => 'UI\\Point',
    'layout' => 'UI\\Draw\\Text\\Layout',
  ),
  'ui\\draw\\stroke::getcap' => 
  array (
    0 => 'int',
  ),
  'ui\\draw\\stroke::getjoin' => 
  array (
    0 => 'int',
  ),
  'ui\\draw\\stroke::getmiterlimit' => 
  array (
    0 => 'float',
  ),
  'ui\\draw\\stroke::getthickness' => 
  array (
    0 => 'float',
  ),
  'ui\\draw\\stroke::setcap' => 
  array (
    0 => 'mixed',
    'cap' => 'int',
  ),
  'ui\\draw\\stroke::setjoin' => 
  array (
    0 => 'mixed',
    'join' => 'int',
  ),
  'ui\\draw\\stroke::setmiterlimit' => 
  array (
    0 => 'mixed',
    'limit' => 'float',
  ),
  'ui\\draw\\stroke::setthickness' => 
  array (
    0 => 'mixed',
    'thickness' => 'float',
  ),
  'ui\\draw\\text\\font::getascent' => 
  array (
    0 => 'float',
  ),
  'ui\\draw\\text\\font::getdescent' => 
  array (
    0 => 'float',
  ),
  'ui\\draw\\text\\font::getleading' => 
  array (
    0 => 'float',
  ),
  'ui\\draw\\text\\font::getunderlineposition' => 
  array (
    0 => 'float',
  ),
  'ui\\draw\\text\\font::getunderlinethickness' => 
  array (
    0 => 'float',
  ),
  'ui\\draw\\text\\font\\descriptor::getfamily' => 
  array (
    0 => 'string',
  ),
  'ui\\draw\\text\\font\\descriptor::getitalic' => 
  array (
    0 => 'int',
  ),
  'ui\\draw\\text\\font\\descriptor::getsize' => 
  array (
    0 => 'float',
  ),
  'ui\\draw\\text\\font\\descriptor::getstretch' => 
  array (
    0 => 'int',
  ),
  'ui\\draw\\text\\font\\descriptor::getweight' => 
  array (
    0 => 'int',
  ),
  'ui\\draw\\text\\font\\fontfamilies' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'ui\\draw\\text\\layout::setwidth' => 
  array (
    0 => 'mixed',
    'width' => 'float',
  ),
  'ui\\executor::kill' => 
  array (
    0 => 'void',
  ),
  'ui\\executor::onexecute' => 
  array (
    0 => 'void',
  ),
  'ui\\menu::append' => 
  array (
    0 => 'UI\\MenuItem',
    'name' => 'string',
    'type=' => 'string',
  ),
  'ui\\menu::appendabout' => 
  array (
    0 => 'UI\\MenuItem',
    'type=' => 'string',
  ),
  'ui\\menu::appendcheck' => 
  array (
    0 => 'UI\\MenuItem',
    'name' => 'string',
    'type=' => 'string',
  ),
  'ui\\menu::appendpreferences' => 
  array (
    0 => 'UI\\MenuItem',
    'type=' => 'string',
  ),
  'ui\\menu::appendquit' => 
  array (
    0 => 'UI\\MenuItem',
    'type=' => 'string',
  ),
  'ui\\menu::appendseparator' => 
  array (
    0 => 'mixed',
  ),
  'ui\\menuitem::disable' => 
  array (
    0 => 'mixed',
  ),
  'ui\\menuitem::enable' => 
  array (
    0 => 'mixed',
  ),
  'ui\\menuitem::ischecked' => 
  array (
    0 => 'bool',
  ),
  'ui\\menuitem::onclick' => 
  array (
    0 => 'mixed',
  ),
  'ui\\menuitem::setchecked' => 
  array (
    0 => 'mixed',
    'checked' => 'bool',
  ),
  'ui\\point::getx' => 
  array (
    0 => 'float',
  ),
  'ui\\point::gety' => 
  array (
    0 => 'float',
  ),
  'ui\\point::setx' => 
  array (
    0 => 'mixed',
    'point' => 'float',
  ),
  'ui\\point::sety' => 
  array (
    0 => 'mixed',
    'point' => 'float',
  ),
  'ui\\quit' => 
  array (
    0 => 'void',
  ),
  'ui\\run' => 
  array (
    0 => 'void',
    'flags=' => 'int',
  ),
  'ui\\size::getheight' => 
  array (
    0 => 'float',
  ),
  'ui\\size::getwidth' => 
  array (
    0 => 'float',
  ),
  'ui\\size::setheight' => 
  array (
    0 => 'mixed',
    'size' => 'float',
  ),
  'ui\\size::setwidth' => 
  array (
    0 => 'mixed',
    'size' => 'float',
  ),
  'ui\\window::add' => 
  array (
    0 => 'mixed',
    'control' => 'UI\\Control',
  ),
  'ui\\window::error' => 
  array (
    0 => 'mixed',
    'title' => 'string',
    'msg' => 'string',
  ),
  'ui\\window::getsize' => 
  array (
    0 => 'UI\\Size',
  ),
  'ui\\window::gettitle' => 
  array (
    0 => 'string',
  ),
  'ui\\window::hasborders' => 
  array (
    0 => 'bool',
  ),
  'ui\\window::hasmargin' => 
  array (
    0 => 'bool',
  ),
  'ui\\window::isfullscreen' => 
  array (
    0 => 'bool',
  ),
  'ui\\window::msg' => 
  array (
    0 => 'mixed',
    'title' => 'string',
    'msg' => 'string',
  ),
  'ui\\window::onclosing' => 
  array (
    0 => 'int',
  ),
  'ui\\window::open' => 
  array (
    0 => 'string',
  ),
  'ui\\window::save' => 
  array (
    0 => 'string',
  ),
  'ui\\window::setborders' => 
  array (
    0 => 'mixed',
    'borders' => 'bool',
  ),
  'ui\\window::setfullscreen' => 
  array (
    0 => 'mixed',
    'full' => 'bool',
  ),
  'ui\\window::setmargin' => 
  array (
    0 => 'mixed',
    'margin' => 'bool',
  ),
  'ui\\window::setsize' => 
  array (
    0 => 'mixed',
    'size' => 'UI\\Size',
  ),
  'ui\\window::settitle' => 
  array (
    0 => 'mixed',
    'title' => 'string',
  ),
  'uksort' => 
  array (
    0 => 'true',
    '&array' => 'array<array-key, mixed>',
    'callback' => 'callable(mixed, mixed):int',
  ),
  'umask' => 
  array (
    0 => 'int',
    'mask=' => 'int|null',
  ),
  'underflowexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'underflowexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'underflowexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'underflowexception::getcode' => 
  array (
    0 => 'int',
  ),
  'underflowexception::getfile' => 
  array (
    0 => 'string',
  ),
  'underflowexception::getline' => 
  array (
    0 => 'int',
  ),
  'underflowexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'underflowexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'underflowexception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'underflowexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'unexpectedvalueexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'unexpectedvalueexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'unexpectedvalueexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'unexpectedvalueexception::getcode' => 
  array (
    0 => 'int',
  ),
  'unexpectedvalueexception::getfile' => 
  array (
    0 => 'string',
  ),
  'unexpectedvalueexception::getline' => 
  array (
    0 => 'int',
  ),
  'unexpectedvalueexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'unexpectedvalueexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'unexpectedvalueexception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'unexpectedvalueexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'unhandledmatcherror::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'unhandledmatcherror::__tostring' => 
  array (
    0 => 'string',
  ),
  'unhandledmatcherror::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'unhandledmatcherror::getcode' => 
  array (
    0 => 'mixed',
  ),
  'unhandledmatcherror::getfile' => 
  array (
    0 => 'string',
  ),
  'unhandledmatcherror::getline' => 
  array (
    0 => 'int',
  ),
  'unhandledmatcherror::getmessage' => 
  array (
    0 => 'string',
  ),
  'unhandledmatcherror::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'unhandledmatcherror::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'unhandledmatcherror::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'uniqid' => 
  array (
    0 => 'non-empty-string',
    'prefix=' => 'string',
    'more_entropy=' => 'bool',
  ),
  'unixtojd' => 
  array (
    0 => 'false|int',
    'timestamp=' => 'int|null',
  ),
  'unlink' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'context=' => 'resource',
  ),
  'unpack' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'format' => 'string',
    'string' => 'string',
    'offset=' => 'int',
  ),
  'unregister_tick_function' => 
  array (
    0 => 'void',
    'callback' => 'callable',
  ),
  'unserialize' => 
  array (
    0 => 'mixed',
    'data' => 'string',
    'options=' => 'array{allowed_classes?: array<array-key, class-string>|bool}',
  ),
  'unset' => 
  array (
    0 => 'void',
    'var=' => 'mixed',
    '...args=' => 'mixed',
  ),
  'untaint' => 
  array (
    0 => 'bool',
    '&rw_string' => 'string',
    '&...rw_strings=' => 'string',
  ),
  'uopz_allow_exit' => 
  array (
    0 => 'void',
    'allow' => 'bool',
  ),
  'uopz_backup' => 
  array (
    0 => 'void',
    'class' => 'string',
    'function' => 'string',
  ),
  'uopz_backup\'1' => 
  array (
    0 => 'void',
    'function' => 'string',
  ),
  'uopz_compose' => 
  array (
    0 => 'void',
    'name' => 'string',
    'classes' => 'array<array-key, mixed>',
    'methods=' => 'array<array-key, mixed>',
    'properties=' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'uopz_copy' => 
  array (
    0 => 'Closure',
    'class' => 'string',
    'function' => 'string',
  ),
  'uopz_copy\'1' => 
  array (
    0 => 'Closure',
    'function' => 'string',
  ),
  'uopz_delete' => 
  array (
    0 => 'void',
    'class' => 'string',
    'function' => 'string',
  ),
  'uopz_delete\'1' => 
  array (
    0 => 'void',
    'function' => 'string',
  ),
  'uopz_extend' => 
  array (
    0 => 'bool',
    'class' => 'string',
    'parent' => 'string',
  ),
  'uopz_flags' => 
  array (
    0 => 'int',
    'class' => 'string',
    'function' => 'string',
    'flags' => 'int',
  ),
  'uopz_flags\'1' => 
  array (
    0 => 'int',
    'function' => 'string',
    'flags' => 'int',
  ),
  'uopz_function' => 
  array (
    0 => 'void',
    'class' => 'string',
    'function' => 'string',
    'handler' => 'Closure',
    'modifiers=' => 'int',
  ),
  'uopz_function\'1' => 
  array (
    0 => 'void',
    'function' => 'string',
    'handler' => 'Closure',
    'modifiers=' => 'int',
  ),
  'uopz_get_exit_status' => 
  array (
    0 => 'int|null',
  ),
  'uopz_get_hook' => 
  array (
    0 => 'Closure|null',
    'class' => 'string',
    'function' => 'string',
  ),
  'uopz_get_hook\'1' => 
  array (
    0 => 'Closure|null',
    'function' => 'string',
  ),
  'uopz_get_mock' => 
  array (
    0 => 'null|object|string',
    'class' => 'string',
  ),
  'uopz_get_property' => 
  array (
    0 => 'mixed',
    'class' => 'object|string',
    'property' => 'string',
  ),
  'uopz_get_return' => 
  array (
    0 => 'mixed',
    'class=' => 'class-string',
    'function=' => 'string',
  ),
  'uopz_get_static' => 
  array (
    0 => 'array<array-key, mixed>|null',
    'class' => 'string',
    'function' => 'string',
  ),
  'uopz_implement' => 
  array (
    0 => 'bool',
    'class' => 'string',
    'interface' => 'string',
  ),
  'uopz_overload' => 
  array (
    0 => 'void',
    'opcode' => 'int',
    'callable' => 'callable',
  ),
  'uopz_redefine' => 
  array (
    0 => 'bool',
    'class' => 'string',
    'constant' => 'string',
    'value' => 'mixed',
  ),
  'uopz_redefine\'1' => 
  array (
    0 => 'bool',
    'constant' => 'string',
    'value' => 'mixed',
  ),
  'uopz_rename' => 
  array (
    0 => 'void',
    'class' => 'string',
    'function' => 'string',
    'rename' => 'string',
  ),
  'uopz_rename\'1' => 
  array (
    0 => 'void',
    'function' => 'string',
    'rename' => 'string',
  ),
  'uopz_restore' => 
  array (
    0 => 'void',
    'class' => 'string',
    'function' => 'string',
  ),
  'uopz_restore\'1' => 
  array (
    0 => 'void',
    'function' => 'string',
  ),
  'uopz_set_hook' => 
  array (
    0 => 'bool',
    'class' => 'string',
    'function' => 'string',
    'hook' => 'Closure',
  ),
  'uopz_set_hook\'1' => 
  array (
    0 => 'bool',
    'function' => 'string',
    'hook' => 'Closure',
  ),
  'uopz_set_mock' => 
  array (
    0 => 'void',
    'class' => 'string',
    'mock' => 'object|string',
  ),
  'uopz_set_property' => 
  array (
    0 => 'void',
    'class' => 'object|string',
    'property' => 'string',
    'value' => 'mixed',
  ),
  'uopz_set_return' => 
  array (
    0 => 'bool',
    'class' => 'string',
    'function' => 'string',
    'value' => 'mixed',
    'execute=' => 'bool',
  ),
  'uopz_set_return\'1' => 
  array (
    0 => 'bool',
    'function' => 'string',
    'value' => 'mixed',
    'execute=' => 'bool',
  ),
  'uopz_set_static' => 
  array (
    0 => 'void',
    'class' => 'string',
    'function' => 'string',
    'static' => 'array<array-key, mixed>',
  ),
  'uopz_undefine' => 
  array (
    0 => 'bool',
    'class' => 'string',
    'constant' => 'string',
  ),
  'uopz_undefine\'1' => 
  array (
    0 => 'bool',
    'constant' => 'string',
  ),
  'uopz_unset_hook' => 
  array (
    0 => 'bool',
    'class' => 'string',
    'function' => 'string',
  ),
  'uopz_unset_hook\'1' => 
  array (
    0 => 'bool',
    'function' => 'string',
  ),
  'uopz_unset_mock' => 
  array (
    0 => 'void',
    'class' => 'string',
  ),
  'uopz_unset_return' => 
  array (
    0 => 'bool',
    'class=' => 'class-string',
    'function=' => 'string',
  ),
  'uopz_unset_return\'1' => 
  array (
    0 => 'bool',
    'function' => 'string',
  ),
  'urldecode' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'urlencode' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'use_soap_error_handler' => 
  array (
    0 => 'bool',
    'enable=' => 'bool',
  ),
  'user_error' => 
  array (
    0 => 'bool',
    'message' => 'string',
    'error_level=' => 'int',
  ),
  'usleep' => 
  array (
    0 => 'void',
    'microseconds' => 'int<0, max>',
  ),
  'usort' => 
  array (
    0 => 'true',
    '&array' => 'array<array-key, mixed>',
    'callback' => 'callable(mixed, mixed):int',
  ),
  'utf8_decode' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'utf8_encode' => 
  array (
    0 => 'string',
    'string' => 'string',
  ),
  'uv_accept' => 
  array (
    0 => 'mixed',
    'server' => 'mixed',
    'client' => 'mixed',
  ),
  'uv_async_init' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'callback' => 'mixed',
  ),
  'uv_async_send' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
  ),
  'uv_chdir' => 
  array (
    0 => 'mixed',
    'dir' => 'mixed',
  ),
  'uv_check_init' => 
  array (
    0 => 'mixed',
    'loop=' => 'mixed',
  ),
  'uv_check_start' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
    'callback' => 'mixed',
  ),
  'uv_check_stop' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
  ),
  'uv_close' => 
  array (
    0 => 'mixed',
    'stream' => 'mixed',
    'callback=' => 'mixed',
  ),
  'uv_cpu_info' => 
  array (
    0 => 'mixed',
  ),
  'uv_cwd' => 
  array (
    0 => 'mixed',
  ),
  'uv_default_loop' => 
  array (
    0 => 'mixed',
  ),
  'uv_err_name' => 
  array (
    0 => 'mixed',
    'error' => 'mixed',
  ),
  'uv_exepath' => 
  array (
    0 => 'mixed',
  ),
  'uv_fs_chmod' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'path' => 'mixed',
    'mode' => 'mixed',
    'callback=' => 'mixed',
  ),
  'uv_fs_chown' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'path' => 'mixed',
    'uid' => 'mixed',
    'gid' => 'mixed',
    'callback=' => 'mixed',
  ),
  'uv_fs_close' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'fd' => 'mixed',
    'callback=' => 'mixed',
  ),
  'uv_fs_event_init' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'path' => 'mixed',
    'callback' => 'mixed',
    'flags=' => 'mixed',
  ),
  'uv_fs_fchmod' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'fd' => 'mixed',
    'mode' => 'mixed',
    'callback=' => 'mixed',
  ),
  'uv_fs_fchown' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'fd' => 'mixed',
    'uid' => 'mixed',
    'gid' => 'mixed',
    'callback=' => 'mixed',
  ),
  'uv_fs_fdatasync' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'fd' => 'mixed',
    'callback=' => 'mixed',
  ),
  'uv_fs_fstat' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'fd' => 'mixed',
    'callback=' => 'mixed',
  ),
  'uv_fs_fsync' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'fd' => 'mixed',
    'callback=' => 'mixed',
  ),
  'uv_fs_ftruncate' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'fd' => 'mixed',
    'offset' => 'mixed',
    'callback=' => 'mixed',
  ),
  'uv_fs_futime' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'fd' => 'mixed',
    'utime' => 'mixed',
    'atime' => 'mixed',
    'callback=' => 'mixed',
  ),
  'uv_fs_link' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'from' => 'mixed',
    'to' => 'mixed',
    'callback=' => 'mixed',
  ),
  'uv_fs_lstat' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'path' => 'mixed',
    'callback=' => 'mixed',
  ),
  'uv_fs_mkdir' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'path' => 'mixed',
    'mode' => 'mixed',
    'callback=' => 'mixed',
  ),
  'uv_fs_open' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'path' => 'mixed',
    'flag' => 'mixed',
    'mode' => 'mixed',
    'callback=' => 'mixed',
  ),
  'uv_fs_poll_init' => 
  array (
    0 => 'mixed',
    'loop=' => 'mixed',
  ),
  'uv_fs_poll_start' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
    'callback' => 'mixed',
    'path' => 'mixed',
    'interval' => 'mixed',
  ),
  'uv_fs_poll_stop' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
  ),
  'uv_fs_read' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'fd' => 'mixed',
    'offset=' => 'mixed',
    'size=' => 'mixed',
    'callback=' => 'mixed',
  ),
  'uv_fs_readdir' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'path' => 'mixed',
    'flags' => 'mixed',
    'callback=' => 'mixed',
  ),
  'uv_fs_readlink' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'path' => 'mixed',
    'callback=' => 'mixed',
  ),
  'uv_fs_rename' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'from' => 'mixed',
    'to' => 'mixed',
    'callback=' => 'mixed',
  ),
  'uv_fs_rmdir' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'path' => 'mixed',
    'callback=' => 'mixed',
  ),
  'uv_fs_scandir' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'path' => 'mixed',
    'flags' => 'mixed',
    'callback=' => 'mixed',
  ),
  'uv_fs_sendfile' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'in' => 'mixed',
    'out' => 'mixed',
    'offset' => 'mixed',
    'length' => 'mixed',
    'callback=' => 'mixed',
  ),
  'uv_fs_stat' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'path' => 'mixed',
    'callback=' => 'mixed',
  ),
  'uv_fs_symlink' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'from' => 'mixed',
    'to' => 'mixed',
    'callback' => 'mixed',
    'flags=' => 'mixed',
  ),
  'uv_fs_unlink' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'path' => 'mixed',
    'callback=' => 'mixed',
  ),
  'uv_fs_utime' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'path' => 'mixed',
    'utime' => 'mixed',
    'atime' => 'mixed',
    'callback=' => 'mixed',
  ),
  'uv_fs_write' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'fd' => 'mixed',
    'buffer' => 'mixed',
    'offset' => 'mixed',
    'callback=' => 'mixed',
  ),
  'uv_get_free_memory' => 
  array (
    0 => 'mixed',
  ),
  'uv_get_total_memory' => 
  array (
    0 => 'mixed',
  ),
  'uv_getaddrinfo' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'callback' => 'mixed',
    'node' => 'mixed',
    'service' => 'mixed',
    'hints=' => 'mixed',
  ),
  'uv_guess_handle' => 
  array (
    0 => 'mixed',
    'fd' => 'mixed',
  ),
  'uv_hrtime' => 
  array (
    0 => 'mixed',
  ),
  'uv_idle_init' => 
  array (
    0 => 'mixed',
    'loop=' => 'mixed',
  ),
  'uv_idle_start' => 
  array (
    0 => 'mixed',
    'timer' => 'mixed',
    'callback' => 'mixed',
  ),
  'uv_idle_stop' => 
  array (
    0 => 'mixed',
    'idle' => 'mixed',
  ),
  'uv_interface_addresses' => 
  array (
    0 => 'mixed',
  ),
  'uv_ip4_addr' => 
  array (
    0 => 'mixed',
    'address' => 'mixed',
    'port' => 'mixed',
  ),
  'uv_ip4_name' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
  ),
  'uv_ip6_addr' => 
  array (
    0 => 'mixed',
    'address' => 'mixed',
    'port' => 'mixed',
  ),
  'uv_ip6_name' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
  ),
  'uv_is_active' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
  ),
  'uv_is_closing' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
  ),
  'uv_is_readable' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
  ),
  'uv_is_writable' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
  ),
  'uv_kill' => 
  array (
    0 => 'mixed',
    'pid' => 'mixed',
    'signal' => 'mixed',
  ),
  'uv_listen' => 
  array (
    0 => 'mixed',
    'resource' => 'mixed',
    'backlog' => 'mixed',
    'callback' => 'mixed',
  ),
  'uv_loadavg' => 
  array (
    0 => 'mixed',
  ),
  'uv_loop_delete' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
  ),
  'uv_loop_new' => 
  array (
    0 => 'mixed',
  ),
  'uv_mutex_init' => 
  array (
    0 => 'mixed',
  ),
  'uv_mutex_lock' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
  ),
  'uv_mutex_trylock' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
  ),
  'uv_mutex_unlock' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
  ),
  'uv_now' => 
  array (
    0 => 'mixed',
    'loop=' => 'mixed',
  ),
  'uv_pipe_bind' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
    'name' => 'mixed',
  ),
  'uv_pipe_connect' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
    'name' => 'mixed',
    'callback' => 'mixed',
  ),
  'uv_pipe_init' => 
  array (
    0 => 'mixed',
    'file=' => 'mixed',
    'ipc=' => 'mixed',
  ),
  'uv_pipe_open' => 
  array (
    0 => 'mixed',
    'file' => 'mixed',
    'pipe' => 'mixed',
  ),
  'uv_pipe_pending_count' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
  ),
  'uv_pipe_pending_instances' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
    'count' => 'mixed',
  ),
  'uv_pipe_pending_type' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
  ),
  'uv_poll_init' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'fd' => 'mixed',
  ),
  'uv_poll_init_socket' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'fd' => 'mixed',
  ),
  'uv_poll_start' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
    'events' => 'mixed',
    'callback' => 'mixed',
  ),
  'uv_poll_stop' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
  ),
  'uv_prepare_init' => 
  array (
    0 => 'mixed',
    'loop=' => 'mixed',
  ),
  'uv_prepare_start' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
    'callback' => 'mixed',
  ),
  'uv_prepare_stop' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
  ),
  'uv_process_get_pid' => 
  array (
    0 => 'mixed',
    'process' => 'mixed',
  ),
  'uv_process_kill' => 
  array (
    0 => 'mixed',
    'process' => 'mixed',
    'signal' => 'mixed',
  ),
  'uv_read_start' => 
  array (
    0 => 'mixed',
    'server' => 'mixed',
    'callback' => 'mixed',
  ),
  'uv_read_stop' => 
  array (
    0 => 'mixed',
    'server' => 'mixed',
  ),
  'uv_ref' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
  ),
  'uv_resident_set_memory' => 
  array (
    0 => 'mixed',
  ),
  'uv_run' => 
  array (
    0 => 'mixed',
    'loop=' => 'mixed',
    'run_mode=' => 'mixed',
  ),
  'uv_rwlock_init' => 
  array (
    0 => 'mixed',
  ),
  'uv_rwlock_rdlock' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
  ),
  'uv_rwlock_rdunlock' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
  ),
  'uv_rwlock_tryrdlock' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
  ),
  'uv_rwlock_trywrlock' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
  ),
  'uv_rwlock_wrlock' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
  ),
  'uv_rwlock_wrunlock' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
  ),
  'uv_sem_init' => 
  array (
    0 => 'mixed',
    'val' => 'mixed',
  ),
  'uv_sem_post' => 
  array (
    0 => 'mixed',
    'resource' => 'mixed',
  ),
  'uv_sem_trywait' => 
  array (
    0 => 'mixed',
    'resource' => 'mixed',
  ),
  'uv_sem_wait' => 
  array (
    0 => 'mixed',
    'resource' => 'mixed',
  ),
  'uv_shutdown' => 
  array (
    0 => 'mixed',
    'stream' => 'mixed',
    'callback' => 'mixed',
  ),
  'uv_signal_init' => 
  array (
    0 => 'mixed',
    'loop=' => 'mixed',
  ),
  'uv_signal_start' => 
  array (
    0 => 'mixed',
    'sig_handle' => 'mixed',
    'sig_callback' => 'mixed',
    'sig_num' => 'mixed',
  ),
  'uv_signal_stop' => 
  array (
    0 => 'mixed',
    'sig_handle' => 'mixed',
  ),
  'uv_spawn' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'command' => 'mixed',
    'args' => 'mixed',
    'stdio' => 'mixed',
    'cwd' => 'mixed',
    'env' => 'mixed',
    'callback' => 'mixed',
    'flags=' => 'mixed',
    'options=' => 'mixed',
  ),
  'uv_stdio_new' => 
  array (
    0 => 'mixed',
  ),
  'uv_stop' => 
  array (
    0 => 'mixed',
    'loop=' => 'mixed',
  ),
  'uv_strerror' => 
  array (
    0 => 'mixed',
    'error' => 'mixed',
  ),
  'uv_tcp_bind' => 
  array (
    0 => 'mixed',
    'resource' => 'mixed',
    'address' => 'mixed',
  ),
  'uv_tcp_bind6' => 
  array (
    0 => 'mixed',
    'resource' => 'mixed',
    'address' => 'mixed',
  ),
  'uv_tcp_connect' => 
  array (
    0 => 'mixed',
    'resource' => 'mixed',
    'sock_addr' => 'mixed',
    'callback=' => 'mixed',
  ),
  'uv_tcp_connect6' => 
  array (
    0 => 'mixed',
    'resource' => 'mixed',
    'ipv6_addr' => 'mixed',
    'callback=' => 'mixed',
  ),
  'uv_tcp_getpeername' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
  ),
  'uv_tcp_getsockname' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
  ),
  'uv_tcp_init' => 
  array (
    0 => 'mixed',
    'loop=' => 'mixed',
  ),
  'uv_tcp_nodelay' => 
  array (
    0 => 'mixed',
    'tcp' => 'mixed',
    'enabled' => 'mixed',
  ),
  'uv_tcp_open' => 
  array (
    0 => 'mixed',
    'resource' => 'mixed',
    'tcpfd' => 'mixed',
  ),
  'uv_tcp_simultaneous_accepts' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
    'enable' => 'mixed',
  ),
  'uv_timer_again' => 
  array (
    0 => 'mixed',
    'timer' => 'mixed',
  ),
  'uv_timer_get_repeat' => 
  array (
    0 => 'mixed',
    'timer' => 'mixed',
  ),
  'uv_timer_init' => 
  array (
    0 => 'mixed',
    'loop=' => 'mixed',
  ),
  'uv_timer_set_repeat' => 
  array (
    0 => 'mixed',
    'timer' => 'mixed',
    'timeout' => 'mixed',
  ),
  'uv_timer_start' => 
  array (
    0 => 'mixed',
    'timer' => 'mixed',
    'timeout' => 'mixed',
    'repeat' => 'mixed',
    'callback=' => 'mixed',
  ),
  'uv_timer_stop' => 
  array (
    0 => 'mixed',
    'timer' => 'mixed',
  ),
  'uv_tty_get_winsize' => 
  array (
    0 => 'mixed',
    'tty' => 'mixed',
    '&width' => 'mixed',
    '&height' => 'mixed',
  ),
  'uv_tty_init' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'fd' => 'mixed',
    'readable' => 'mixed',
  ),
  'uv_tty_reset_mode' => 
  array (
    0 => 'mixed',
  ),
  'uv_tty_set_mode' => 
  array (
    0 => 'mixed',
  ),
  'uv_udp_bind' => 
  array (
    0 => 'mixed',
    'resource' => 'mixed',
    'address' => 'mixed',
    'flags=' => 'mixed',
  ),
  'uv_udp_bind6' => 
  array (
    0 => 'mixed',
    'resource' => 'mixed',
    'address' => 'mixed',
    'flags=' => 'mixed',
  ),
  'uv_udp_getsockname' => 
  array (
    0 => 'mixed',
    'handle' => 'mixed',
  ),
  'uv_udp_init' => 
  array (
    0 => 'mixed',
    'loop=' => 'mixed',
  ),
  'uv_udp_open' => 
  array (
    0 => 'mixed',
    'resource' => 'mixed',
    'udpfd' => 'mixed',
  ),
  'uv_udp_recv_start' => 
  array (
    0 => 'mixed',
    'server' => 'mixed',
    'callback' => 'mixed',
  ),
  'uv_udp_recv_stop' => 
  array (
    0 => 'mixed',
    'server' => 'mixed',
  ),
  'uv_udp_send' => 
  array (
    0 => 'mixed',
    'server' => 'mixed',
    'buffer' => 'mixed',
    'address' => 'mixed',
    'callback=' => 'mixed',
  ),
  'uv_udp_send6' => 
  array (
    0 => 'mixed',
    'server' => 'mixed',
    'buffer' => 'mixed',
    'address' => 'mixed',
    'callback=' => 'mixed',
  ),
  'uv_udp_set_broadcast' => 
  array (
    0 => 'mixed',
    'server' => 'mixed',
    'enabled' => 'mixed',
  ),
  'uv_udp_set_membership' => 
  array (
    0 => 'mixed',
    'client' => 'mixed',
    'multicast_addr' => 'mixed',
    'interface_addr' => 'mixed',
    'membership' => 'mixed',
  ),
  'uv_udp_set_multicast_loop' => 
  array (
    0 => 'mixed',
    'server' => 'mixed',
    'enabled' => 'mixed',
  ),
  'uv_udp_set_multicast_ttl' => 
  array (
    0 => 'mixed',
    'server' => 'mixed',
    'ttl' => 'mixed',
  ),
  'uv_unref' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
  ),
  'uv_update_time' => 
  array (
    0 => 'mixed',
    'loop=' => 'mixed',
  ),
  'uv_uptime' => 
  array (
    0 => 'mixed',
  ),
  'uv_walk' => 
  array (
    0 => 'mixed',
    'loop' => 'mixed',
    'callback' => 'mixed',
    'opaque=' => 'mixed',
  ),
  'uv_write' => 
  array (
    0 => 'mixed',
    'client' => 'mixed',
    'data' => 'mixed',
    'callback' => 'mixed',
  ),
  'uv_write2' => 
  array (
    0 => 'mixed',
    'client' => 'mixed',
    'data' => 'mixed',
    'send' => 'mixed',
    'callback' => 'mixed',
  ),
  'v8js::__construct' => 
  array (
    0 => 'void',
    'object_name=' => 'string',
    'variables=' => 'array<array-key, mixed>',
    'extensions=' => 'array<array-key, mixed>',
    'report_uncaught_exceptions=' => 'bool',
    'snapshot_blob=' => 'string',
  ),
  'v8js::clearpendingexception' => 
  array (
    0 => 'mixed',
  ),
  'v8js::compilestring' => 
  array (
    0 => 'resource',
    'script' => 'mixed',
    'identifier=' => 'string',
  ),
  'v8js::createsnapshot' => 
  array (
    0 => 'false|string',
    'embed_source' => 'string',
  ),
  'v8js::executescript' => 
  array (
    0 => 'mixed',
    'script' => 'resource',
    'flags=' => 'int',
    'time_limit=' => 'int',
    'memory_limit=' => 'int',
  ),
  'v8js::executestring' => 
  array (
    0 => 'mixed',
    'script' => 'string',
    'identifier=' => 'string',
    'flags=' => 'int',
  ),
  'v8js::getextensions' => 
  array (
    0 => 'array<array-key, string>',
  ),
  'v8js::getpendingexception' => 
  array (
    0 => 'V8JsException|null',
  ),
  'v8js::registerextension' => 
  array (
    0 => 'bool',
    'extension_name' => 'string',
    'script' => 'string',
    'dependencies=' => 'array<array-key, mixed>',
    'auto_enable=' => 'bool',
  ),
  'v8js::setaverageobjectsize' => 
  array (
    0 => 'mixed',
    'average_object_size' => 'int',
  ),
  'v8js::setmemorylimit' => 
  array (
    0 => 'mixed',
    'limit' => 'int',
  ),
  'v8js::setmoduleloader' => 
  array (
    0 => 'mixed',
    'loader' => 'callable',
  ),
  'v8js::setmodulenormaliser' => 
  array (
    0 => 'mixed',
    'normaliser' => 'callable',
  ),
  'v8js::settimelimit' => 
  array (
    0 => 'mixed',
    'limit' => 'int',
  ),
  'v8jsexception::getjsfilename' => 
  array (
    0 => 'string',
  ),
  'v8jsexception::getjslinenumber' => 
  array (
    0 => 'int',
  ),
  'v8jsexception::getjssourceline' => 
  array (
    0 => 'int',
  ),
  'v8jsexception::getjstrace' => 
  array (
    0 => 'string',
  ),
  'v8jsscriptexception::__clone' => 
  array (
    0 => 'void',
  ),
  'v8jsscriptexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Exception|Throwable|null',
  ),
  'v8jsscriptexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'v8jsscriptexception::__wakeup' => 
  array (
    0 => 'void',
  ),
  'v8jsscriptexception::getcode' => 
  array (
    0 => 'int',
  ),
  'v8jsscriptexception::getfile' => 
  array (
    0 => 'string',
  ),
  'v8jsscriptexception::getjsendcolumn' => 
  array (
    0 => 'int',
  ),
  'v8jsscriptexception::getjsfilename' => 
  array (
    0 => 'string',
  ),
  'v8jsscriptexception::getjslinenumber' => 
  array (
    0 => 'int',
  ),
  'v8jsscriptexception::getjssourceline' => 
  array (
    0 => 'string',
  ),
  'v8jsscriptexception::getjsstartcolumn' => 
  array (
    0 => 'int',
  ),
  'v8jsscriptexception::getjstrace' => 
  array (
    0 => 'string',
  ),
  'v8jsscriptexception::getline' => 
  array (
    0 => 'int',
  ),
  'v8jsscriptexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'v8jsscriptexception::getprevious' => 
  array (
    0 => 'Exception|Throwable',
  ),
  'v8jsscriptexception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'v8jsscriptexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'valueerror::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'valueerror::__tostring' => 
  array (
    0 => 'string',
  ),
  'valueerror::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'valueerror::getcode' => 
  array (
    0 => 'mixed',
  ),
  'valueerror::getfile' => 
  array (
    0 => 'string',
  ),
  'valueerror::getline' => 
  array (
    0 => 'int',
  ),
  'valueerror::getmessage' => 
  array (
    0 => 'string',
  ),
  'valueerror::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'valueerror::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'valueerror::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'var_dump' => 
  array (
    0 => 'void',
    'value' => 'mixed',
    '...values=' => 'mixed',
  ),
  'var_export' => 
  array (
    0 => 'null|string',
    'value' => 'mixed',
    'return=' => 'bool',
  ),
  'variant::__construct' => 
  array (
    0 => 'void',
    'value=' => 'mixed',
    'type=' => 'int',
    'codepage=' => 'int',
  ),
  'variant_abs' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
  ),
  'variant_add' => 
  array (
    0 => 'mixed',
    'left' => 'mixed',
    'right' => 'mixed',
  ),
  'variant_and' => 
  array (
    0 => 'mixed',
    'left' => 'mixed',
    'right' => 'mixed',
  ),
  'variant_cast' => 
  array (
    0 => 'VARIANT',
    'variant' => 'VARIANT',
    'type' => 'int',
  ),
  'variant_cat' => 
  array (
    0 => 'mixed',
    'left' => 'mixed',
    'right' => 'mixed',
  ),
  'variant_cmp' => 
  array (
    0 => 'int',
    'left' => 'mixed',
    'right' => 'mixed',
    'locale_id=' => 'int',
    'flags=' => 'int',
  ),
  'variant_date_from_timestamp' => 
  array (
    0 => 'VARIANT',
    'timestamp' => 'int',
  ),
  'variant_date_to_timestamp' => 
  array (
    0 => 'int',
    'variant' => 'VARIANT',
  ),
  'variant_div' => 
  array (
    0 => 'mixed',
    'left' => 'mixed',
    'right' => 'mixed',
  ),
  'variant_eqv' => 
  array (
    0 => 'mixed',
    'left' => 'mixed',
    'right' => 'mixed',
  ),
  'variant_fix' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
  ),
  'variant_get_type' => 
  array (
    0 => 'int',
    'variant' => 'VARIANT',
  ),
  'variant_idiv' => 
  array (
    0 => 'mixed',
    'left' => 'mixed',
    'right' => 'mixed',
  ),
  'variant_imp' => 
  array (
    0 => 'mixed',
    'left' => 'mixed',
    'right' => 'mixed',
  ),
  'variant_int' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
  ),
  'variant_mod' => 
  array (
    0 => 'mixed',
    'left' => 'mixed',
    'right' => 'mixed',
  ),
  'variant_mul' => 
  array (
    0 => 'mixed',
    'left' => 'mixed',
    'right' => 'mixed',
  ),
  'variant_neg' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
  ),
  'variant_not' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
  ),
  'variant_or' => 
  array (
    0 => 'mixed',
    'left' => 'mixed',
    'right' => 'mixed',
  ),
  'variant_pow' => 
  array (
    0 => 'mixed',
    'left' => 'mixed',
    'right' => 'mixed',
  ),
  'variant_round' => 
  array (
    0 => 'mixed',
    'value' => 'mixed',
    'decimals' => 'int',
  ),
  'variant_set' => 
  array (
    0 => 'void',
    'variant' => 'object',
    'value' => 'mixed',
  ),
  'variant_set_type' => 
  array (
    0 => 'void',
    'variant' => 'object',
    'type' => 'int',
  ),
  'variant_sub' => 
  array (
    0 => 'mixed',
    'left' => 'mixed',
    'right' => 'mixed',
  ),
  'variant_xor' => 
  array (
    0 => 'mixed',
    'left' => 'mixed',
    'right' => 'mixed',
  ),
  'varnishadmin::__construct' => 
  array (
    0 => 'void',
    'args=' => 'array<array-key, mixed>',
  ),
  'varnishadmin::auth' => 
  array (
    0 => 'bool',
  ),
  'varnishadmin::ban' => 
  array (
    0 => 'int',
    'vcl_regex' => 'string',
  ),
  'varnishadmin::banurl' => 
  array (
    0 => 'int',
    'vcl_regex' => 'string',
  ),
  'varnishadmin::clearpanic' => 
  array (
    0 => 'int',
  ),
  'varnishadmin::connect' => 
  array (
    0 => 'bool',
  ),
  'varnishadmin::disconnect' => 
  array (
    0 => 'bool',
  ),
  'varnishadmin::getpanic' => 
  array (
    0 => 'string',
  ),
  'varnishadmin::getparams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'varnishadmin::isrunning' => 
  array (
    0 => 'bool',
  ),
  'varnishadmin::setcompat' => 
  array (
    0 => 'void',
    'compat' => 'int',
  ),
  'varnishadmin::sethost' => 
  array (
    0 => 'void',
    'host' => 'string',
  ),
  'varnishadmin::setident' => 
  array (
    0 => 'void',
    'ident' => 'string',
  ),
  'varnishadmin::setparam' => 
  array (
    0 => 'int',
    'name' => 'string',
    'value' => 'int|string',
  ),
  'varnishadmin::setport' => 
  array (
    0 => 'void',
    'port' => 'int',
  ),
  'varnishadmin::setsecret' => 
  array (
    0 => 'void',
    'secret' => 'string',
  ),
  'varnishadmin::settimeout' => 
  array (
    0 => 'void',
    'timeout' => 'int',
  ),
  'varnishadmin::start' => 
  array (
    0 => 'int',
  ),
  'varnishadmin::stop' => 
  array (
    0 => 'int',
  ),
  'varnishlog::__construct' => 
  array (
    0 => 'void',
    'args=' => 'array<array-key, mixed>',
  ),
  'varnishlog::getline' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'varnishlog::gettagname' => 
  array (
    0 => 'string',
    'index' => 'int',
  ),
  'varnishstat::__construct' => 
  array (
    0 => 'void',
    'args=' => 'array<array-key, mixed>',
  ),
  'varnishstat::getsnapshot' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'version_compare' => 
  array (
    0 => 'bool',
    'version1' => 'string',
    'version2' => 'string',
    'operator' => '\'!=\'|\'<\'|\'<=\'|\'<>\'|\'=\'|\'==\'|\'>\'|\'>=\'|\'eq\'|\'ge\'|\'gt\'|\'le\'|\'lt\'|\'ne\'|null',
  ),
  'version_compare\'1' => 
  array (
    0 => 'int',
    'version1' => 'string',
    'version2' => 'string',
  ),
  'vfprintf' => 
  array (
    0 => 'int<0, max>',
    'stream' => 'resource',
    'format' => 'string',
    'values' => 'array<array-key, float|int|string>',
  ),
  'virtual' => 
  array (
    0 => 'bool',
    'uri' => 'string',
  ),
  'vpopmail_add_alias_domain' => 
  array (
    0 => 'bool',
    'domain' => 'string',
    'aliasdomain' => 'string',
  ),
  'vpopmail_add_alias_domain_ex' => 
  array (
    0 => 'bool',
    'olddomain' => 'string',
    'newdomain' => 'string',
  ),
  'vpopmail_add_domain' => 
  array (
    0 => 'bool',
    'domain' => 'string',
    'dir' => 'string',
    'uid' => 'int',
    'gid' => 'int',
  ),
  'vpopmail_add_domain_ex' => 
  array (
    0 => 'bool',
    'domain' => 'string',
    'passwd' => 'string',
    'quota=' => 'string',
    'bounce=' => 'string',
    'apop=' => 'bool',
  ),
  'vpopmail_add_user' => 
  array (
    0 => 'bool',
    'user' => 'string',
    'domain' => 'string',
    'password' => 'string',
    'gecos=' => 'string',
    'apop=' => 'bool',
  ),
  'vpopmail_alias_add' => 
  array (
    0 => 'bool',
    'user' => 'string',
    'domain' => 'string',
    'alias' => 'string',
  ),
  'vpopmail_alias_del' => 
  array (
    0 => 'bool',
    'user' => 'string',
    'domain' => 'string',
  ),
  'vpopmail_alias_del_domain' => 
  array (
    0 => 'bool',
    'domain' => 'string',
  ),
  'vpopmail_alias_get' => 
  array (
    0 => 'array<array-key, mixed>',
    'alias' => 'string',
    'domain' => 'string',
  ),
  'vpopmail_alias_get_all' => 
  array (
    0 => 'array<array-key, mixed>',
    'domain' => 'string',
  ),
  'vpopmail_auth_user' => 
  array (
    0 => 'bool',
    'user' => 'string',
    'domain' => 'string',
    'password' => 'string',
    'apop=' => 'string',
  ),
  'vpopmail_del_domain' => 
  array (
    0 => 'bool',
    'domain' => 'string',
  ),
  'vpopmail_del_domain_ex' => 
  array (
    0 => 'bool',
    'domain' => 'string',
  ),
  'vpopmail_del_user' => 
  array (
    0 => 'bool',
    'user' => 'string',
    'domain' => 'string',
  ),
  'vpopmail_error' => 
  array (
    0 => 'string',
  ),
  'vpopmail_passwd' => 
  array (
    0 => 'bool',
    'user' => 'string',
    'domain' => 'string',
    'password' => 'string',
    'apop=' => 'bool',
  ),
  'vpopmail_set_user_quota' => 
  array (
    0 => 'bool',
    'user' => 'string',
    'domain' => 'string',
    'quota' => 'string',
  ),
  'vprintf' => 
  array (
    0 => 'int<0, max>',
    'format' => 'string',
    'values' => 'array<array-key, float|int|string>',
  ),
  'vsprintf' => 
  array (
    0 => 'string',
    'format' => 'string',
    'values' => 'array<array-key, float|int|string>',
  ),
  'vtiful\\kernel\\chart::__construct' => 
  array (
    0 => 'void',
    'handle' => 'resource',
    'type' => 'int',
  ),
  'vtiful\\kernel\\chart::axisnamex' => 
  array (
    0 => 'Vtiful\\Kernel\\Chart',
    'name' => 'string',
  ),
  'vtiful\\kernel\\chart::axisnamey' => 
  array (
    0 => 'Vtiful\\Kernel\\Chart',
    'name' => 'string',
  ),
  'vtiful\\kernel\\chart::legendsetposition' => 
  array (
    0 => 'Vtiful\\Kernel\\Chart',
    'type' => 'int',
  ),
  'vtiful\\kernel\\chart::series' => 
  array (
    0 => 'Vtiful\\Kernel\\Chart',
    'value' => 'string',
    'categories=' => 'string',
  ),
  'vtiful\\kernel\\chart::seriesname' => 
  array (
    0 => 'Vtiful\\Kernel\\Chart',
    'value' => 'string',
  ),
  'vtiful\\kernel\\chart::style' => 
  array (
    0 => 'Vtiful\\Kernel\\Chart',
    'style' => 'int',
  ),
  'vtiful\\kernel\\chart::title' => 
  array (
    0 => 'Vtiful\\Kernel\\Chart',
    'title' => 'string',
  ),
  'vtiful\\kernel\\chart::toresource' => 
  array (
    0 => 'resource',
  ),
  'vtiful\\kernel\\excel::__construct' => 
  array (
    0 => 'void',
    'config' => 'array<array-key, mixed>',
  ),
  'vtiful\\kernel\\excel::activatesheet' => 
  array (
    0 => 'bool',
    'sheet_name' => 'string',
  ),
  'vtiful\\kernel\\excel::addsheet' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'sheet_name=' => 'null|string',
  ),
  'vtiful\\kernel\\excel::autofilter' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'range' => 'string',
  ),
  'vtiful\\kernel\\excel::checkoutsheet' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'sheet_name' => 'string',
  ),
  'vtiful\\kernel\\excel::close' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
  ),
  'vtiful\\kernel\\excel::columnindexfromstring' => 
  array (
    0 => 'int',
    'index' => 'string',
  ),
  'vtiful\\kernel\\excel::constmemory' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'file_name' => 'string',
    'sheet_name=' => 'null|string',
  ),
  'vtiful\\kernel\\excel::data' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'data' => 'array<array-key, mixed>',
  ),
  'vtiful\\kernel\\excel::defaultformat' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'format_handle' => 'resource',
  ),
  'vtiful\\kernel\\excel::existsheet' => 
  array (
    0 => 'bool',
    'sheet_name' => 'string',
  ),
  'vtiful\\kernel\\excel::filename' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'file_name' => 'string',
    'sheet_name=' => 'null|string',
  ),
  'vtiful\\kernel\\excel::freezepanes' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'row' => 'int',
    'column' => 'int',
  ),
  'vtiful\\kernel\\excel::gethandle' => 
  array (
    0 => 'resource',
  ),
  'vtiful\\kernel\\excel::getsheetdata' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'vtiful\\kernel\\excel::gridline' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'option=' => 'int',
  ),
  'vtiful\\kernel\\excel::header' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'header' => 'array<array-key, mixed>',
    'format_handle=' => 'null|resource',
  ),
  'vtiful\\kernel\\excel::insertchart' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'row' => 'int',
    'column' => 'int',
    'chart_resource' => 'resource',
  ),
  'vtiful\\kernel\\excel::insertcomment' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'row' => 'int',
    'column' => 'int',
    'comment' => 'string',
  ),
  'vtiful\\kernel\\excel::insertdate' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'row' => 'int',
    'column' => 'int',
    'timestamp' => 'int',
    'format=' => 'null|string',
    'format_handle=' => 'null|resource',
  ),
  'vtiful\\kernel\\excel::insertformula' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'row' => 'int',
    'column' => 'int',
    'formula' => 'string',
    'format_handle=' => 'null|resource',
  ),
  'vtiful\\kernel\\excel::insertimage' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'row' => 'int',
    'column' => 'int',
    'image' => 'string',
    'width=' => 'float|null',
    'height=' => 'float|null',
  ),
  'vtiful\\kernel\\excel::inserttext' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'row' => 'int',
    'column' => 'int',
    'data' => 'float|int|string',
    'format=' => 'null|string',
    'format_handle=' => 'null|resource',
  ),
  'vtiful\\kernel\\excel::inserturl' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'row' => 'int',
    'column' => 'int',
    'url' => 'string',
    'text=' => 'null|string',
    'tool_tip=' => 'null|string',
    'format=' => 'null|resource',
  ),
  'vtiful\\kernel\\excel::mergecells' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'range' => 'string',
    'data' => 'string',
    'format_handle=' => 'null|resource',
  ),
  'vtiful\\kernel\\excel::nextcellcallback' => 
  array (
    0 => 'void',
    'fci' => 'callable(int, int, mixed)',
    'sheet_name=' => 'null|string',
  ),
  'vtiful\\kernel\\excel::nextrow' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'zv_type_t=' => 'array<array-key, mixed>|null',
  ),
  'vtiful\\kernel\\excel::openfile' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'zs_file_name' => 'string',
  ),
  'vtiful\\kernel\\excel::opensheet' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'zs_sheet_name=' => 'null|string',
    'zl_flag=' => 'int|null',
  ),
  'vtiful\\kernel\\excel::output' => 
  array (
    0 => 'string',
  ),
  'vtiful\\kernel\\excel::protection' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'password=' => 'null|string',
  ),
  'vtiful\\kernel\\excel::putcsv' => 
  array (
    0 => 'bool',
    'fp' => 'resource',
    'delimiter_str=' => 'null|string',
    'enclosure_str=' => 'null|string',
    'escape_str=' => 'null|string',
  ),
  'vtiful\\kernel\\excel::putcsvcallback' => 
  array (
    0 => 'bool',
    'callback' => 'callable(array<array-key, mixed>):array<array-key, mixed>',
    'fp' => 'resource',
    'delimiter_str=' => 'null|string',
    'enclosure_str=' => 'null|string',
    'escape_str=' => 'null|string',
  ),
  'vtiful\\kernel\\excel::setcolumn' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'range' => 'string',
    'width' => 'float',
    'format_handle=' => 'null|resource',
  ),
  'vtiful\\kernel\\excel::setcurrentsheethide' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
  ),
  'vtiful\\kernel\\excel::setcurrentsheetisfirst' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
  ),
  'vtiful\\kernel\\excel::setglobaltype' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'zv_type_t' => 'int',
  ),
  'vtiful\\kernel\\excel::setlandscape' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
  ),
  'vtiful\\kernel\\excel::setmargins' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'left=' => 'float|null',
    'right=' => 'float|null',
    'top=' => 'float|null',
    'bottom=' => 'float|null',
  ),
  'vtiful\\kernel\\excel::setpaper' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'paper' => 'int',
  ),
  'vtiful\\kernel\\excel::setportrait' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
  ),
  'vtiful\\kernel\\excel::setrow' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'range' => 'string',
    'height' => 'float',
    'format_handle=' => 'null|resource',
  ),
  'vtiful\\kernel\\excel::setskiprows' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'zv_skip_t' => 'int',
  ),
  'vtiful\\kernel\\excel::settype' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'zv_type_t' => 'array<array-key, mixed>',
  ),
  'vtiful\\kernel\\excel::sheetlist' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'vtiful\\kernel\\excel::showcomment' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
  ),
  'vtiful\\kernel\\excel::stringfromcolumnindex' => 
  array (
    0 => 'string',
    'index' => 'int',
  ),
  'vtiful\\kernel\\excel::timestampfromdatedouble' => 
  array (
    0 => 'int',
    'index' => 'float|null',
  ),
  'vtiful\\kernel\\excel::validation' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'range' => 'string',
    'validation_resource' => 'resource',
  ),
  'vtiful\\kernel\\excel::zoom' => 
  array (
    0 => 'Vtiful\\Kernel\\Excel',
    'scale' => 'int',
  ),
  'vtiful\\kernel\\format::__construct' => 
  array (
    0 => 'void',
    'handle' => 'resource',
  ),
  'vtiful\\kernel\\format::align' => 
  array (
    0 => 'Vtiful\\Kernel\\Format',
    '...style' => 'int',
  ),
  'vtiful\\kernel\\format::background' => 
  array (
    0 => 'Vtiful\\Kernel\\Format',
    'color' => 'int',
    'pattern=' => 'int',
  ),
  'vtiful\\kernel\\format::bold' => 
  array (
    0 => 'Vtiful\\Kernel\\Format',
  ),
  'vtiful\\kernel\\format::border' => 
  array (
    0 => 'Vtiful\\Kernel\\Format',
    'style' => 'int',
  ),
  'vtiful\\kernel\\format::font' => 
  array (
    0 => 'Vtiful\\Kernel\\Format',
    'font' => 'string',
  ),
  'vtiful\\kernel\\format::fontcolor' => 
  array (
    0 => 'Vtiful\\Kernel\\Format',
    'color' => 'int',
  ),
  'vtiful\\kernel\\format::fontsize' => 
  array (
    0 => 'Vtiful\\Kernel\\Format',
    'size' => 'float',
  ),
  'vtiful\\kernel\\format::italic' => 
  array (
    0 => 'Vtiful\\Kernel\\Format',
  ),
  'vtiful\\kernel\\format::number' => 
  array (
    0 => 'Vtiful\\Kernel\\Format',
    'format' => 'string',
  ),
  'vtiful\\kernel\\format::strikeout' => 
  array (
    0 => 'Vtiful\\Kernel\\Format',
  ),
  'vtiful\\kernel\\format::toresource' => 
  array (
    0 => 'resource',
  ),
  'vtiful\\kernel\\format::underline' => 
  array (
    0 => 'Vtiful\\Kernel\\Format',
    'style' => 'int',
  ),
  'vtiful\\kernel\\format::unlocked' => 
  array (
    0 => 'Vtiful\\Kernel\\Format',
  ),
  'vtiful\\kernel\\format::wrap' => 
  array (
    0 => 'Vtiful\\Kernel\\Format',
  ),
  'vtiful\\kernel\\validation::__construct' => 
  array (
    0 => 'void',
  ),
  'vtiful\\kernel\\validation::criteriatype' => 
  array (
    0 => 'Vtiful\\Kernel\\Validation|null',
    'type' => 'int',
  ),
  'vtiful\\kernel\\validation::maximumformula' => 
  array (
    0 => 'Vtiful\\Kernel\\Validation|null',
    'maximum_formula' => 'string',
  ),
  'vtiful\\kernel\\validation::maximumnumber' => 
  array (
    0 => 'Vtiful\\Kernel\\Validation|null',
    'maximum_number' => 'float',
  ),
  'vtiful\\kernel\\validation::minimumformula' => 
  array (
    0 => 'Vtiful\\Kernel\\Validation|null',
    'minimum_formula' => 'string',
  ),
  'vtiful\\kernel\\validation::minimumnumber' => 
  array (
    0 => 'Vtiful\\Kernel\\Validation|null',
    'minimum_number' => 'float',
  ),
  'vtiful\\kernel\\validation::toresource' => 
  array (
    0 => 'resource',
  ),
  'vtiful\\kernel\\validation::validationtype' => 
  array (
    0 => 'Vtiful\\Kernel\\Validation|null',
    'type' => 'int',
  ),
  'vtiful\\kernel\\validation::valuelist' => 
  array (
    0 => 'Vtiful\\Kernel\\Validation|null',
    'value_list' => 'array<array-key, mixed>',
  ),
  'vtiful\\kernel\\validation::valuenumber' => 
  array (
    0 => 'Vtiful\\Kernel\\Validation|null',
    'value_number' => 'int',
  ),
  'w32api_deftype' => 
  array (
    0 => 'bool',
    'typename' => 'string',
    'member1_type' => 'string',
    'member1_name' => 'string',
    '...args=' => 'string',
  ),
  'w32api_init_dtype' => 
  array (
    0 => 'resource',
    'typename' => 'string',
    'value' => 'mixed',
    '...args=' => 'mixed',
  ),
  'w32api_invoke_function' => 
  array (
    0 => 'mixed',
    'funcname' => 'string',
    'argument' => 'mixed',
    '...args=' => 'mixed',
  ),
  'w32api_register_function' => 
  array (
    0 => 'bool',
    'library' => 'string',
    'function_name' => 'string',
    'return_type' => 'string',
  ),
  'w32api_set_call_method' => 
  array (
    0 => 'mixed',
    'method' => 'int',
  ),
  'wddx_add_vars' => 
  array (
    0 => 'bool',
    'packet_id' => 'resource',
    'var_names' => 'mixed',
    '...vars=' => 'mixed',
  ),
  'wddx_deserialize' => 
  array (
    0 => 'mixed',
    'packet' => 'string',
  ),
  'wddx_packet_end' => 
  array (
    0 => 'string',
    'packet_id' => 'resource',
  ),
  'wddx_packet_start' => 
  array (
    0 => 'false|resource',
    'comment=' => 'string',
  ),
  'wddx_serialize_value' => 
  array (
    0 => 'false|string',
    'value' => 'mixed',
    'comment=' => 'string',
  ),
  'wddx_serialize_vars' => 
  array (
    0 => 'false|string',
    'var_name' => 'mixed',
    '...vars=' => 'mixed',
  ),
  'weakmap::count' => 
  array (
    0 => 'int',
  ),
  'weakmap::getiterator' => 
  array (
    0 => 'Iterator',
  ),
  'weakmap::offsetexists' => 
  array (
    0 => 'bool',
    'object' => 'object',
  ),
  'weakmap::offsetget' => 
  array (
    0 => 'mixed',
    'object' => 'object',
  ),
  'weakmap::offsetset' => 
  array (
    0 => 'void',
    'object' => 'object',
    'value' => 'mixed',
  ),
  'weakmap::offsetunset' => 
  array (
    0 => 'void',
    'object' => 'object',
  ),
  'weakref::acquire' => 
  array (
    0 => 'bool',
  ),
  'weakref::get' => 
  array (
    0 => 'object',
  ),
  'weakref::release' => 
  array (
    0 => 'bool',
  ),
  'weakref::valid' => 
  array (
    0 => 'bool',
  ),
  'weakreference::__construct' => 
  array (
    0 => 'void',
  ),
  'weakreference::create' => 
  array (
    0 => 'WeakReference',
    'object' => 'object',
  ),
  'weakreference::get' => 
  array (
    0 => 'null|object',
  ),
  'webobj::converttostring' => 
  array (
    0 => 'string',
  ),
  'webobj::free' => 
  array (
    0 => 'void',
  ),
  'webobj::set' => 
  array (
    0 => 'int',
    'property_name' => 'string',
    'new_value' => 'mixed',
  ),
  'webobj::updatefromstring' => 
  array (
    0 => 'int',
    'snippet' => 'string',
  ),
  'win32_continue_service' => 
  array (
    0 => 'false|int',
    'servicename' => 'string',
    'machine=' => 'string',
  ),
  'win32_create_service' => 
  array (
    0 => 'false|int',
    'details' => 'array<array-key, mixed>',
    'machine=' => 'string',
  ),
  'win32_delete_service' => 
  array (
    0 => 'false|int',
    'servicename' => 'string',
    'machine=' => 'string',
  ),
  'win32_get_last_control_message' => 
  array (
    0 => 'int',
  ),
  'win32_pause_service' => 
  array (
    0 => 'false|int',
    'servicename' => 'string',
    'machine=' => 'string',
  ),
  'win32_ps_list_procs' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'win32_ps_stat_mem' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'win32_ps_stat_proc' => 
  array (
    0 => 'array<array-key, mixed>',
    'pid=' => 'int',
  ),
  'win32_query_service_status' => 
  array (
    0 => 'array<array-key, mixed>|false|int',
    'servicename' => 'string',
    'machine=' => 'string',
  ),
  'win32_send_custom_control' => 
  array (
    0 => 'int',
    'servicename' => 'string',
    'control' => 'int',
    'machine=' => 'string',
  ),
  'win32_set_service_exit_code' => 
  array (
    0 => 'int',
    'exitCode=' => 'int',
  ),
  'win32_set_service_exit_mode' => 
  array (
    0 => 'bool',
    'gracefulMode=' => 'bool',
  ),
  'win32_set_service_status' => 
  array (
    0 => 'bool|int',
    'status' => 'int',
    'checkpoint=' => 'int',
  ),
  'win32_start_service' => 
  array (
    0 => 'false|int',
    'servicename' => 'string',
    'machine=' => 'string',
  ),
  'win32_start_service_ctrl_dispatcher' => 
  array (
    0 => 'bool|int',
    'name' => 'string',
  ),
  'win32_stop_service' => 
  array (
    0 => 'false|int',
    'servicename' => 'string',
    'machine=' => 'string',
  ),
  'wincache_fcache_fileinfo' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'summaryonly=' => 'bool',
  ),
  'wincache_fcache_meminfo' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'wincache_lock' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'isglobal=' => 'bool',
  ),
  'wincache_ocache_fileinfo' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'summaryonly=' => 'bool',
  ),
  'wincache_ocache_meminfo' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'wincache_refresh_if_changed' => 
  array (
    0 => 'bool',
    'files=' => 'array<array-key, mixed>',
  ),
  'wincache_rplist_fileinfo' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'summaryonly=' => 'bool',
  ),
  'wincache_rplist_meminfo' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'wincache_scache_info' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'summaryonly=' => 'bool',
  ),
  'wincache_scache_meminfo' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'wincache_ucache_add' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'value' => 'mixed',
    'ttl=' => 'int',
  ),
  'wincache_ucache_add\'1' => 
  array (
    0 => 'bool',
    'values' => 'array<array-key, mixed>',
    'unused=' => 'mixed',
    'ttl=' => 'int',
  ),
  'wincache_ucache_cas' => 
  array (
    0 => 'bool',
    'key' => 'string',
    'old_value' => 'int',
    'new_value' => 'int',
  ),
  'wincache_ucache_clear' => 
  array (
    0 => 'bool',
  ),
  'wincache_ucache_dec' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'dec_by=' => 'int',
    'success=' => 'bool',
  ),
  'wincache_ucache_delete' => 
  array (
    0 => 'bool',
    'key' => 'mixed',
  ),
  'wincache_ucache_exists' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'wincache_ucache_get' => 
  array (
    0 => 'mixed',
    'key' => 'mixed',
    '&w_success=' => 'bool',
  ),
  'wincache_ucache_inc' => 
  array (
    0 => 'false|int',
    'key' => 'string',
    'inc_by=' => 'int',
    'success=' => 'bool',
  ),
  'wincache_ucache_info' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'summaryonly=' => 'bool',
    'key=' => 'string',
  ),
  'wincache_ucache_meminfo' => 
  array (
    0 => 'array<array-key, mixed>|false',
  ),
  'wincache_ucache_set' => 
  array (
    0 => 'bool',
    'key' => 'mixed',
    'value' => 'mixed',
    'ttl=' => 'int',
  ),
  'wincache_ucache_set\'1' => 
  array (
    0 => 'bool',
    'values' => 'array<array-key, mixed>',
    'unused=' => 'mixed',
    'ttl=' => 'int',
  ),
  'wincache_unlock' => 
  array (
    0 => 'bool',
    'key' => 'string',
  ),
  'wkhtmltox\\image\\converter::convert' => 
  array (
    0 => 'null|string',
  ),
  'wkhtmltox\\image\\converter::getversion' => 
  array (
    0 => 'string',
  ),
  'wkhtmltox\\pdf\\converter::add' => 
  array (
    0 => 'void',
    'object' => 'wkhtmltox\\PDF\\Object',
  ),
  'wkhtmltox\\pdf\\converter::convert' => 
  array (
    0 => 'null|string',
  ),
  'wkhtmltox\\pdf\\converter::getversion' => 
  array (
    0 => 'string',
  ),
  'wordwrap' => 
  array (
    0 => 'string',
    'string' => 'string',
    'width=' => 'int',
    'break=' => 'string',
    'cut_long_words=' => 'bool',
  ),
  'worker::__construct' => 
  array (
    0 => 'void',
  ),
  'worker::addref' => 
  array (
    0 => 'void',
  ),
  'worker::chunk' => 
  array (
    0 => 'array<array-key, mixed>',
    'size' => 'int',
    'preserve' => 'bool',
  ),
  'worker::collect' => 
  array (
    0 => 'int',
    'collector=' => 'callable',
  ),
  'worker::count' => 
  array (
    0 => 'int',
  ),
  'worker::delref' => 
  array (
    0 => 'void',
  ),
  'worker::detach' => 
  array (
    0 => 'void',
  ),
  'worker::extend' => 
  array (
    0 => 'bool',
    'class' => 'string',
  ),
  'worker::getcreatorid' => 
  array (
    0 => 'int',
  ),
  'worker::getcurrentthread' => 
  array (
    0 => 'Thread',
  ),
  'worker::getcurrentthreadid' => 
  array (
    0 => 'int',
  ),
  'worker::getrefcount' => 
  array (
    0 => 'int',
  ),
  'worker::getstacked' => 
  array (
    0 => 'int',
  ),
  'worker::getterminationinfo' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'worker::getthreadid' => 
  array (
    0 => 'int',
  ),
  'worker::globally' => 
  array (
    0 => 'mixed',
  ),
  'worker::isgarbage' => 
  array (
    0 => 'bool',
  ),
  'worker::isjoined' => 
  array (
    0 => 'bool',
  ),
  'worker::isrunning' => 
  array (
    0 => 'bool',
  ),
  'worker::isshutdown' => 
  array (
    0 => 'bool',
  ),
  'worker::isstarted' => 
  array (
    0 => 'bool',
  ),
  'worker::isterminated' => 
  array (
    0 => 'bool',
  ),
  'worker::iswaiting' => 
  array (
    0 => 'bool',
  ),
  'worker::isworking' => 
  array (
    0 => 'bool',
  ),
  'worker::join' => 
  array (
    0 => 'bool',
  ),
  'worker::kill' => 
  array (
    0 => 'bool',
  ),
  'worker::lock' => 
  array (
    0 => 'bool',
  ),
  'worker::merge' => 
  array (
    0 => 'bool',
    'from' => 'mixed',
    'overwrite=' => 'mixed',
  ),
  'worker::notify' => 
  array (
    0 => 'bool',
  ),
  'worker::notifyone' => 
  array (
    0 => 'bool',
  ),
  'worker::offsetexists' => 
  array (
    0 => 'bool',
    'offset' => 'int|string',
  ),
  'worker::offsetget' => 
  array (
    0 => 'mixed',
    'offset' => 'int|string',
  ),
  'worker::offsetset' => 
  array (
    0 => 'void',
    'offset' => 'int|null|string',
    'value' => 'mixed',
  ),
  'worker::offsetunset' => 
  array (
    0 => 'void',
    'offset' => 'int|string',
  ),
  'worker::pop' => 
  array (
    0 => 'bool',
  ),
  'worker::run' => 
  array (
    0 => 'void',
  ),
  'worker::setgarbage' => 
  array (
    0 => 'void',
  ),
  'worker::shift' => 
  array (
    0 => 'bool',
  ),
  'worker::shutdown' => 
  array (
    0 => 'bool',
  ),
  'worker::stack' => 
  array (
    0 => 'int',
    '&rw_work' => 'Threaded',
  ),
  'worker::start' => 
  array (
    0 => 'bool',
    'options=' => 'int',
  ),
  'worker::synchronized' => 
  array (
    0 => 'mixed',
    'block' => 'Closure',
    '_=' => 'mixed',
  ),
  'worker::unlock' => 
  array (
    0 => 'bool',
  ),
  'worker::unstack' => 
  array (
    0 => 'int',
    '&rw_work=' => 'Threaded',
  ),
  'worker::wait' => 
  array (
    0 => 'bool',
    'timeout=' => 'int',
  ),
  'xattr_get' => 
  array (
    0 => 'string',
    'filename' => 'string',
    'name' => 'string',
    'flags=' => 'int',
  ),
  'xattr_list' => 
  array (
    0 => 'array<array-key, mixed>',
    'filename' => 'string',
    'flags=' => 'int',
  ),
  'xattr_remove' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'name' => 'string',
    'flags=' => 'int',
  ),
  'xattr_set' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'name' => 'string',
    'value' => 'string',
    'flags=' => 'int',
  ),
  'xattr_supported' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'flags=' => 'int',
  ),
  'xcache_asm' => 
  array (
    0 => 'string',
    'filename' => 'string',
  ),
  'xcache_clear_cache' => 
  array (
    0 => 'void',
    'type' => 'int',
    'id=' => 'int',
  ),
  'xcache_coredump' => 
  array (
    0 => 'string',
    'op_type' => 'int',
  ),
  'xcache_count' => 
  array (
    0 => 'int',
    'type' => 'int',
  ),
  'xcache_coverager_decode' => 
  array (
    0 => 'array<array-key, mixed>',
    'data' => 'string',
  ),
  'xcache_coverager_get' => 
  array (
    0 => 'array<array-key, mixed>',
    'clean=' => 'bool',
  ),
  'xcache_coverager_start' => 
  array (
    0 => 'void',
    'clean=' => 'bool',
  ),
  'xcache_coverager_stop' => 
  array (
    0 => 'void',
    'clean=' => 'bool',
  ),
  'xcache_dasm_file' => 
  array (
    0 => 'string',
    'filename' => 'string',
  ),
  'xcache_dasm_string' => 
  array (
    0 => 'string',
    'code' => 'string',
  ),
  'xcache_dec' => 
  array (
    0 => 'int',
    'name' => 'string',
    'value=' => 'int|mixed',
    'ttl=' => 'int',
  ),
  'xcache_decode' => 
  array (
    0 => 'bool',
    'filename' => 'string',
  ),
  'xcache_encode' => 
  array (
    0 => 'string',
    'filename' => 'string',
  ),
  'xcache_get' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'xcache_get_data_type' => 
  array (
    0 => 'string',
    'type' => 'int',
  ),
  'xcache_get_op_spec' => 
  array (
    0 => 'string',
    'op_type' => 'int',
  ),
  'xcache_get_op_type' => 
  array (
    0 => 'string',
    'op_type' => 'int',
  ),
  'xcache_get_opcode' => 
  array (
    0 => 'string',
    'opcode' => 'int',
  ),
  'xcache_get_opcode_spec' => 
  array (
    0 => 'string',
    'opcode' => 'int',
  ),
  'xcache_inc' => 
  array (
    0 => 'int',
    'name' => 'string',
    'value=' => 'int|mixed',
    'ttl=' => 'int',
  ),
  'xcache_info' => 
  array (
    0 => 'array<array-key, mixed>',
    'type' => 'int',
    'id' => 'int',
  ),
  'xcache_is_autoglobal' => 
  array (
    0 => 'string',
    'name' => 'string',
  ),
  'xcache_isset' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'xcache_list' => 
  array (
    0 => 'array<array-key, mixed>',
    'type' => 'int',
    'id' => 'int',
  ),
  'xcache_set' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value' => 'mixed',
    'ttl=' => 'int',
  ),
  'xcache_unset' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'xcache_unset_by_prefix' => 
  array (
    0 => 'bool',
    'prefix' => 'string',
  ),
  'xcom::__construct' => 
  array (
    0 => 'void',
    'fabric_url=' => 'string',
    'fabric_token=' => 'string',
    'capability_token=' => 'string',
  ),
  'xcom::decode' => 
  array (
    0 => 'object',
    'avro_msg' => 'string',
    'json_schema' => 'string',
  ),
  'xcom::encode' => 
  array (
    0 => 'string',
    'data' => 'stdClass',
    'avro_schema' => 'string',
  ),
  'xcom::getdebugoutput' => 
  array (
    0 => 'string',
  ),
  'xcom::getlastresponse' => 
  array (
    0 => 'string',
  ),
  'xcom::getlastresponseinfo' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'xcom::getonboardingurl' => 
  array (
    0 => 'string',
    'capability_name' => 'string',
    'agreement_url' => 'string',
  ),
  'xcom::send' => 
  array (
    0 => 'int',
    'topic' => 'string',
    'data' => 'mixed',
    'json_schema=' => 'string',
    'http_headers=' => 'array<array-key, mixed>',
  ),
  'xcom::sendasync' => 
  array (
    0 => 'int',
    'topic' => 'string',
    'data' => 'mixed',
    'json_schema=' => 'string',
    'http_headers=' => 'array<array-key, mixed>',
  ),
  'xdebug_break' => 
  array (
    0 => 'bool',
  ),
  'xdebug_call_class' => 
  array (
    0 => 'string',
    'depth=' => 'int',
  ),
  'xdebug_call_file' => 
  array (
    0 => 'string',
    'depth=' => 'int',
  ),
  'xdebug_call_function' => 
  array (
    0 => 'string',
    'depth=' => 'int',
  ),
  'xdebug_call_line' => 
  array (
    0 => 'int',
    'depth=' => 'int',
  ),
  'xdebug_clear_aggr_profiling_data' => 
  array (
    0 => 'bool',
  ),
  'xdebug_code_coverage_started' => 
  array (
    0 => 'bool',
  ),
  'xdebug_debug_zval' => 
  array (
    0 => 'void',
    '...varName' => 'string',
  ),
  'xdebug_debug_zval_stdout' => 
  array (
    0 => 'void',
    '...varName' => 'string',
  ),
  'xdebug_disable' => 
  array (
    0 => 'void',
  ),
  'xdebug_dump_aggr_profiling_data' => 
  array (
    0 => 'bool',
  ),
  'xdebug_dump_superglobals' => 
  array (
    0 => 'void',
  ),
  'xdebug_enable' => 
  array (
    0 => 'void',
  ),
  'xdebug_get_code_coverage' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'xdebug_get_collected_errors' => 
  array (
    0 => 'string',
    'clean=' => 'bool',
  ),
  'xdebug_get_declared_vars' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'xdebug_get_formatted_function_stack' => 
  array (
    0 => 'mixed',
  ),
  'xdebug_get_function_count' => 
  array (
    0 => 'int',
  ),
  'xdebug_get_function_stack' => 
  array (
    0 => 'array<array-key, mixed>',
    'message=' => 'string',
    'options=' => 'int',
  ),
  'xdebug_get_headers' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'xdebug_get_monitored_functions' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'xdebug_get_profiler_filename' => 
  array (
    0 => 'false|string',
  ),
  'xdebug_get_stack_depth' => 
  array (
    0 => 'int',
  ),
  'xdebug_get_tracefile_name' => 
  array (
    0 => 'string',
  ),
  'xdebug_info' => 
  array (
    0 => 'mixed',
    'category=' => 'string',
  ),
  'xdebug_is_debugger_active' => 
  array (
    0 => 'bool',
  ),
  'xdebug_is_enabled' => 
  array (
    0 => 'bool',
  ),
  'xdebug_memory_usage' => 
  array (
    0 => 'int',
  ),
  'xdebug_peak_memory_usage' => 
  array (
    0 => 'int',
  ),
  'xdebug_print_function_stack' => 
  array (
    0 => 'array<array-key, mixed>',
    'message=' => 'string',
    'options=' => 'int',
  ),
  'xdebug_set_filter' => 
  array (
    0 => 'void',
    'group' => 'int',
    'list_type' => 'int',
    'configuration' => 'array<array-key, mixed>',
  ),
  'xdebug_start_code_coverage' => 
  array (
    0 => 'void',
    'options=' => 'int',
  ),
  'xdebug_start_error_collection' => 
  array (
    0 => 'void',
  ),
  'xdebug_start_function_monitor' => 
  array (
    0 => 'void',
    'list_of_functions_to_monitor' => 'array<array-key, string>',
  ),
  'xdebug_start_trace' => 
  array (
    0 => 'void',
    'trace_file' => 'mixed',
    'options=' => 'int|mixed',
  ),
  'xdebug_stop_code_coverage' => 
  array (
    0 => 'void',
    'cleanup=' => 'bool',
  ),
  'xdebug_stop_error_collection' => 
  array (
    0 => 'void',
  ),
  'xdebug_stop_function_monitor' => 
  array (
    0 => 'void',
  ),
  'xdebug_stop_trace' => 
  array (
    0 => 'void',
  ),
  'xdebug_time_index' => 
  array (
    0 => 'float',
  ),
  'xdebug_var_dump' => 
  array (
    0 => 'void',
    '...var' => 'mixed',
  ),
  'xdiff_file_bdiff' => 
  array (
    0 => 'bool',
    'old_file' => 'string',
    'new_file' => 'string',
    'dest' => 'string',
  ),
  'xdiff_file_bdiff_size' => 
  array (
    0 => 'int',
    'file' => 'string',
  ),
  'xdiff_file_bpatch' => 
  array (
    0 => 'bool',
    'file' => 'string',
    'patch' => 'string',
    'dest' => 'string',
  ),
  'xdiff_file_diff' => 
  array (
    0 => 'bool',
    'old_file' => 'string',
    'new_file' => 'string',
    'dest' => 'string',
    'context=' => 'int',
    'minimal=' => 'bool',
  ),
  'xdiff_file_diff_binary' => 
  array (
    0 => 'bool',
    'old_file' => 'string',
    'new_file' => 'string',
    'dest' => 'string',
  ),
  'xdiff_file_merge3' => 
  array (
    0 => 'mixed',
    'old_file' => 'string',
    'new_file1' => 'string',
    'new_file2' => 'string',
    'dest' => 'string',
  ),
  'xdiff_file_patch' => 
  array (
    0 => 'mixed',
    'file' => 'string',
    'patch' => 'string',
    'dest' => 'string',
    'flags=' => 'int',
  ),
  'xdiff_file_patch_binary' => 
  array (
    0 => 'bool',
    'file' => 'string',
    'patch' => 'string',
    'dest' => 'string',
  ),
  'xdiff_file_rabdiff' => 
  array (
    0 => 'bool',
    'old_file' => 'string',
    'new_file' => 'string',
    'dest' => 'string',
  ),
  'xdiff_string_bdiff' => 
  array (
    0 => 'string',
    'old_data' => 'string',
    'new_data' => 'string',
  ),
  'xdiff_string_bdiff_size' => 
  array (
    0 => 'int',
    'patch' => 'string',
  ),
  'xdiff_string_bpatch' => 
  array (
    0 => 'string',
    'string' => 'string',
    'patch' => 'string',
  ),
  'xdiff_string_diff' => 
  array (
    0 => 'string',
    'old_data' => 'string',
    'new_data' => 'string',
    'context=' => 'int',
    'minimal=' => 'bool',
  ),
  'xdiff_string_diff_binary' => 
  array (
    0 => 'string',
    'old_data' => 'string',
    'new_data' => 'string',
  ),
  'xdiff_string_merge3' => 
  array (
    0 => 'mixed',
    'old_data' => 'string',
    'new_data1' => 'string',
    'new_data2' => 'string',
    'error=' => 'string',
  ),
  'xdiff_string_patch' => 
  array (
    0 => 'string',
    'string' => 'string',
    'patch' => 'string',
    'flags=' => 'int',
    '&w_error=' => 'string',
  ),
  'xdiff_string_patch_binary' => 
  array (
    0 => 'string',
    'string' => 'string',
    'patch' => 'string',
  ),
  'xdiff_string_rabdiff' => 
  array (
    0 => 'string',
    'old_data' => 'string',
    'new_data' => 'string',
  ),
  'xhprof_disable' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'xhprof_enable' => 
  array (
    0 => 'void',
    'flags=' => 'int',
    'options=' => 'array<array-key, mixed>',
  ),
  'xhprof_sample_disable' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'xhprof_sample_enable' => 
  array (
    0 => 'void',
  ),
  'xlswriter_get_author' => 
  array (
    0 => 'string',
  ),
  'xlswriter_get_version' => 
  array (
    0 => 'string',
  ),
  'xml_error_string' => 
  array (
    0 => 'null|string',
    'error_code' => 'int',
  ),
  'xml_get_current_byte_index' => 
  array (
    0 => 'int',
    'parser' => 'XMLParser',
  ),
  'xml_get_current_column_number' => 
  array (
    0 => 'int',
    'parser' => 'XMLParser',
  ),
  'xml_get_current_line_number' => 
  array (
    0 => 'int',
    'parser' => 'XMLParser',
  ),
  'xml_get_error_code' => 
  array (
    0 => 'int',
    'parser' => 'XMLParser',
  ),
  'xml_parse' => 
  array (
    0 => 'int',
    'parser' => 'XMLParser',
    'data' => 'string',
    'is_final=' => 'bool',
  ),
  'xml_parse_into_struct' => 
  array (
    0 => 'int',
    'parser' => 'XMLParser',
    'data' => 'string',
    '&w_values' => 'array<array-key, mixed>',
    '&w_index=' => 'array<array-key, mixed>',
  ),
  'xml_parser_create' => 
  array (
    0 => 'XMLParser',
    'encoding=' => 'null|string',
  ),
  'xml_parser_create_ns' => 
  array (
    0 => 'XMLParser',
    'encoding=' => 'null|string',
    'separator=' => 'string',
  ),
  'xml_parser_free' => 
  array (
    0 => 'bool',
    'parser' => 'XMLParser',
  ),
  'xml_parser_get_option' => 
  array (
    0 => 'int|string',
    'parser' => 'XMLParser',
    'option' => 'int',
  ),
  'xml_parser_set_option' => 
  array (
    0 => 'bool',
    'parser' => 'XMLParser',
    'option' => 'int',
    'value' => 'mixed',
  ),
  'xml_set_character_data_handler' => 
  array (
    0 => 'true',
    'parser' => 'XMLParser',
    'handler' => 'callable',
  ),
  'xml_set_default_handler' => 
  array (
    0 => 'true',
    'parser' => 'XMLParser',
    'handler' => 'callable',
  ),
  'xml_set_element_handler' => 
  array (
    0 => 'true',
    'parser' => 'XMLParser',
    'start_handler' => 'callable',
    'end_handler' => 'callable',
  ),
  'xml_set_end_namespace_decl_handler' => 
  array (
    0 => 'true',
    'parser' => 'XMLParser',
    'handler' => 'callable',
  ),
  'xml_set_external_entity_ref_handler' => 
  array (
    0 => 'true',
    'parser' => 'XMLParser',
    'handler' => 'callable',
  ),
  'xml_set_notation_decl_handler' => 
  array (
    0 => 'true',
    'parser' => 'XMLParser',
    'handler' => 'callable',
  ),
  'xml_set_object' => 
  array (
    0 => 'true',
    'parser' => 'XMLParser',
    'object' => 'object',
  ),
  'xml_set_processing_instruction_handler' => 
  array (
    0 => 'true',
    'parser' => 'XMLParser',
    'handler' => 'callable',
  ),
  'xml_set_start_namespace_decl_handler' => 
  array (
    0 => 'true',
    'parser' => 'XMLParser',
    'handler' => 'callable',
  ),
  'xml_set_unparsed_entity_decl_handler' => 
  array (
    0 => 'true',
    'parser' => 'XMLParser',
    'handler' => 'callable',
  ),
  'xmldiff\\base::__construct' => 
  array (
    0 => 'void',
    'nsname' => 'string',
  ),
  'xmldiff\\base::diff' => 
  array (
    0 => 'mixed',
    'from' => 'mixed',
    'to' => 'mixed',
  ),
  'xmldiff\\base::merge' => 
  array (
    0 => 'mixed',
    'src' => 'mixed',
    'diff' => 'mixed',
  ),
  'xmldiff\\dom::diff' => 
  array (
    0 => 'DOMDocument',
    'from' => 'DOMDocument',
    'to' => 'DOMDocument',
  ),
  'xmldiff\\dom::merge' => 
  array (
    0 => 'DOMDocument',
    'src' => 'DOMDocument',
    'diff' => 'DOMDocument',
  ),
  'xmldiff\\file::diff' => 
  array (
    0 => 'string',
    'from' => 'string',
    'to' => 'string',
  ),
  'xmldiff\\file::merge' => 
  array (
    0 => 'string',
    'src' => 'string',
    'diff' => 'string',
  ),
  'xmldiff\\memory::diff' => 
  array (
    0 => 'string',
    'from' => 'string',
    'to' => 'string',
  ),
  'xmldiff\\memory::merge' => 
  array (
    0 => 'string',
    'src' => 'string',
    'diff' => 'string',
  ),
  'xmlreader::close' => 
  array (
    0 => 'bool',
  ),
  'xmlreader::expand' => 
  array (
    0 => 'DOMNode|false',
    'baseNode=' => 'DOMNode|null',
  ),
  'xmlreader::getattribute' => 
  array (
    0 => 'null|string',
    'name' => 'string',
  ),
  'xmlreader::getattributeno' => 
  array (
    0 => 'null|string',
    'index' => 'int',
  ),
  'xmlreader::getattributens' => 
  array (
    0 => 'null|string',
    'name' => 'string',
    'namespace' => 'string',
  ),
  'xmlreader::getparserproperty' => 
  array (
    0 => 'bool',
    'property' => 'int',
  ),
  'xmlreader::isvalid' => 
  array (
    0 => 'bool',
  ),
  'xmlreader::lookupnamespace' => 
  array (
    0 => 'null|string',
    'prefix' => 'string',
  ),
  'xmlreader::movetoattribute' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'xmlreader::movetoattributeno' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'xmlreader::movetoattributens' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'namespace' => 'string',
  ),
  'xmlreader::movetoelement' => 
  array (
    0 => 'bool',
  ),
  'xmlreader::movetofirstattribute' => 
  array (
    0 => 'bool',
  ),
  'xmlreader::movetonextattribute' => 
  array (
    0 => 'bool',
  ),
  'xmlreader::next' => 
  array (
    0 => 'bool',
    'name=' => 'null|string',
  ),
  'xmlreader::open' => 
  array (
    0 => 'XmlReader|bool',
    'uri' => 'string',
    'encoding=' => 'null|string',
    'flags=' => 'int',
  ),
  'xmlreader::read' => 
  array (
    0 => 'bool',
  ),
  'xmlreader::readinnerxml' => 
  array (
    0 => 'string',
  ),
  'xmlreader::readouterxml' => 
  array (
    0 => 'string',
  ),
  'xmlreader::readstring' => 
  array (
    0 => 'string',
  ),
  'xmlreader::setparserproperty' => 
  array (
    0 => 'bool',
    'property' => 'int',
    'value' => 'bool',
  ),
  'xmlreader::setrelaxngschema' => 
  array (
    0 => 'bool',
    'filename' => 'null|string',
  ),
  'xmlreader::setrelaxngschemasource' => 
  array (
    0 => 'bool',
    'source' => 'null|string',
  ),
  'xmlreader::setschema' => 
  array (
    0 => 'bool',
    'filename' => 'null|string',
  ),
  'xmlreader::xml' => 
  array (
    0 => 'XMLReader|bool',
    'source' => 'string',
    'encoding=' => 'null|string',
    'flags=' => 'int',
  ),
  'xmlwriter::endattribute' => 
  array (
    0 => 'bool',
  ),
  'xmlwriter::endcdata' => 
  array (
    0 => 'bool',
  ),
  'xmlwriter::endcomment' => 
  array (
    0 => 'bool',
  ),
  'xmlwriter::enddocument' => 
  array (
    0 => 'bool',
  ),
  'xmlwriter::enddtd' => 
  array (
    0 => 'bool',
  ),
  'xmlwriter::enddtdattlist' => 
  array (
    0 => 'bool',
  ),
  'xmlwriter::enddtdelement' => 
  array (
    0 => 'bool',
  ),
  'xmlwriter::enddtdentity' => 
  array (
    0 => 'bool',
  ),
  'xmlwriter::endelement' => 
  array (
    0 => 'bool',
  ),
  'xmlwriter::endpi' => 
  array (
    0 => 'bool',
  ),
  'xmlwriter::flush' => 
  array (
    0 => 'int|string',
    'empty=' => 'bool',
  ),
  'xmlwriter::fullendelement' => 
  array (
    0 => 'bool',
  ),
  'xmlwriter::openmemory' => 
  array (
    0 => 'bool',
  ),
  'xmlwriter::openuri' => 
  array (
    0 => 'bool',
    'uri' => 'string',
  ),
  'xmlwriter::outputmemory' => 
  array (
    0 => 'string',
    'flush=' => 'bool',
  ),
  'xmlwriter::setindent' => 
  array (
    0 => 'bool',
    'enable' => 'bool',
  ),
  'xmlwriter::setindentstring' => 
  array (
    0 => 'bool',
    'indentation' => 'string',
  ),
  'xmlwriter::startattribute' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'xmlwriter::startattributens' => 
  array (
    0 => 'bool',
    'prefix' => 'null|string',
    'name' => 'string',
    'namespace' => 'null|string',
  ),
  'xmlwriter::startcdata' => 
  array (
    0 => 'bool',
  ),
  'xmlwriter::startcomment' => 
  array (
    0 => 'bool',
  ),
  'xmlwriter::startdocument' => 
  array (
    0 => 'bool',
    'version=' => 'null|string',
    'encoding=' => 'null|string',
    'standalone=' => 'null|string',
  ),
  'xmlwriter::startdtd' => 
  array (
    0 => 'bool',
    'qualifiedName' => 'string',
    'publicId=' => 'null|string',
    'systemId=' => 'null|string',
  ),
  'xmlwriter::startdtdattlist' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'xmlwriter::startdtdelement' => 
  array (
    0 => 'bool',
    'qualifiedName' => 'string',
  ),
  'xmlwriter::startdtdentity' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'isParam' => 'bool',
  ),
  'xmlwriter::startelement' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'xmlwriter::startelementns' => 
  array (
    0 => 'bool',
    'prefix' => 'null|string',
    'name' => 'string',
    'namespace' => 'null|string',
  ),
  'xmlwriter::startpi' => 
  array (
    0 => 'bool',
    'target' => 'string',
  ),
  'xmlwriter::text' => 
  array (
    0 => 'bool',
    'content' => 'string',
  ),
  'xmlwriter::writeattribute' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value' => 'string',
  ),
  'xmlwriter::writeattributens' => 
  array (
    0 => 'bool',
    'prefix' => 'null|string',
    'name' => 'string',
    'namespace' => 'null|string',
    'value' => 'string',
  ),
  'xmlwriter::writecdata' => 
  array (
    0 => 'bool',
    'content' => 'string',
  ),
  'xmlwriter::writecomment' => 
  array (
    0 => 'bool',
    'content' => 'string',
  ),
  'xmlwriter::writedtd' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'publicId=' => 'null|string',
    'systemId=' => 'null|string',
    'content=' => 'null|string',
  ),
  'xmlwriter::writedtdattlist' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'content' => 'string',
  ),
  'xmlwriter::writedtdelement' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'content' => 'string',
  ),
  'xmlwriter::writedtdentity' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'content' => 'string',
    'isParam=' => 'bool',
    'publicId=' => 'null|string',
    'systemId=' => 'null|string',
    'notationData=' => 'null|string',
  ),
  'xmlwriter::writeelement' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'content=' => 'null|string',
  ),
  'xmlwriter::writeelementns' => 
  array (
    0 => 'bool',
    'prefix' => 'null|string',
    'name' => 'string',
    'namespace' => 'null|string',
    'content=' => 'null|string',
  ),
  'xmlwriter::writepi' => 
  array (
    0 => 'bool',
    'target' => 'string',
    'content' => 'string',
  ),
  'xmlwriter::writeraw' => 
  array (
    0 => 'bool',
    'content' => 'string',
  ),
  'xmlwriter_end_attribute' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
  ),
  'xmlwriter_end_cdata' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
  ),
  'xmlwriter_end_comment' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
  ),
  'xmlwriter_end_document' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
  ),
  'xmlwriter_end_dtd' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
  ),
  'xmlwriter_end_dtd_attlist' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
  ),
  'xmlwriter_end_dtd_element' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
  ),
  'xmlwriter_end_dtd_entity' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
  ),
  'xmlwriter_end_element' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
  ),
  'xmlwriter_end_pi' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
  ),
  'xmlwriter_flush' => 
  array (
    0 => 'int|string',
    'writer' => 'XMLWriter',
    'empty=' => 'bool',
  ),
  'xmlwriter_full_end_element' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
  ),
  'xmlwriter_open_memory' => 
  array (
    0 => 'XMLWriter|false',
  ),
  'xmlwriter_open_uri' => 
  array (
    0 => 'XMLWriter|false',
    'uri' => 'string',
  ),
  'xmlwriter_output_memory' => 
  array (
    0 => 'string',
    'writer' => 'XMLWriter',
    'flush=' => 'bool',
  ),
  'xmlwriter_set_indent' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'enable' => 'bool',
  ),
  'xmlwriter_set_indent_string' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'indentation' => 'string',
  ),
  'xmlwriter_start_attribute' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'name' => 'string',
  ),
  'xmlwriter_start_attribute_ns' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'prefix' => 'null|string',
    'name' => 'string',
    'namespace' => 'null|string',
  ),
  'xmlwriter_start_cdata' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
  ),
  'xmlwriter_start_comment' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
  ),
  'xmlwriter_start_document' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'version=' => 'null|string',
    'encoding=' => 'null|string',
    'standalone=' => 'null|string',
  ),
  'xmlwriter_start_dtd' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'qualifiedName' => 'string',
    'publicId=' => 'null|string',
    'systemId=' => 'null|string',
  ),
  'xmlwriter_start_dtd_attlist' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'name' => 'string',
  ),
  'xmlwriter_start_dtd_element' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'qualifiedName' => 'string',
  ),
  'xmlwriter_start_dtd_entity' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'name' => 'string',
    'isParam' => 'bool',
  ),
  'xmlwriter_start_element' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'name' => 'string',
  ),
  'xmlwriter_start_element_ns' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'prefix' => 'null|string',
    'name' => 'string',
    'namespace' => 'null|string',
  ),
  'xmlwriter_start_pi' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'target' => 'string',
  ),
  'xmlwriter_text' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'content' => 'string',
  ),
  'xmlwriter_write_attribute' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'name' => 'string',
    'value' => 'string',
  ),
  'xmlwriter_write_attribute_ns' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'prefix' => 'null|string',
    'name' => 'string',
    'namespace' => 'null|string',
    'value' => 'string',
  ),
  'xmlwriter_write_cdata' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'content' => 'string',
  ),
  'xmlwriter_write_comment' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'content' => 'string',
  ),
  'xmlwriter_write_dtd' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'name' => 'string',
    'publicId=' => 'null|string',
    'systemId=' => 'null|string',
    'content=' => 'null|string',
  ),
  'xmlwriter_write_dtd_attlist' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'name' => 'string',
    'content' => 'string',
  ),
  'xmlwriter_write_dtd_element' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'name' => 'string',
    'content' => 'string',
  ),
  'xmlwriter_write_dtd_entity' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'name' => 'string',
    'content' => 'string',
    'isParam=' => 'bool',
    'publicId=' => 'null|string',
    'systemId=' => 'null|string',
    'notationData=' => 'null|string',
  ),
  'xmlwriter_write_element' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'name' => 'string',
    'content=' => 'null|string',
  ),
  'xmlwriter_write_element_ns' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'prefix' => 'null|string',
    'name' => 'string',
    'namespace' => 'null|string',
    'content=' => 'null|string',
  ),
  'xmlwriter_write_pi' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'target' => 'string',
    'content' => 'string',
  ),
  'xmlwriter_write_raw' => 
  array (
    0 => 'bool',
    'writer' => 'XMLWriter',
    'content' => 'string',
  ),
  'xpath_new_context' => 
  array (
    0 => 'XPathContext',
    'dom_document' => 'DOMDocument',
  ),
  'xpath_register_ns' => 
  array (
    0 => 'bool',
    'xpath_context' => 'xpathcontext',
    'prefix' => 'string',
    'uri' => 'string',
  ),
  'xpath_register_ns_auto' => 
  array (
    0 => 'bool',
    'xpath_context' => 'xpathcontext',
    'context_node=' => 'object',
  ),
  'xptr_new_context' => 
  array (
    0 => 'XPathContext',
  ),
  'xsltprocessor::getparameter' => 
  array (
    0 => 'false|string',
    'namespace' => 'string',
    'name' => 'string',
  ),
  'xsltprocessor::getsecurityprefs' => 
  array (
    0 => 'int',
  ),
  'xsltprocessor::hasexsltsupport' => 
  array (
    0 => 'bool',
  ),
  'xsltprocessor::importstylesheet' => 
  array (
    0 => 'bool',
    'stylesheet' => 'object',
  ),
  'xsltprocessor::registerphpfunctions' => 
  array (
    0 => 'void',
    'functions=' => 'array<array-key, mixed>|null|string',
  ),
  'xsltprocessor::removeparameter' => 
  array (
    0 => 'bool',
    'namespace' => 'string',
    'name' => 'string',
  ),
  'xsltprocessor::setparameter' => 
  array (
    0 => 'bool',
    'namespace' => 'string',
    'name' => 'string',
    'value' => 'string',
  ),
  'xsltprocessor::setparameter\'1' => 
  array (
    0 => 'bool',
    'namespace' => 'string',
    'options' => 'array<array-key, mixed>',
  ),
  'xsltprocessor::setprofiling' => 
  array (
    0 => 'bool',
    'filename' => 'null|string',
  ),
  'xsltprocessor::setsecurityprefs' => 
  array (
    0 => 'int',
    'preferences' => 'int',
  ),
  'xsltprocessor::transformtodoc' => 
  array (
    0 => 'DOMDocument|false',
    'document' => 'DOMNode',
    'returnClass=' => 'null|string',
  ),
  'xsltprocessor::transformtouri' => 
  array (
    0 => 'int',
    'document' => 'DOMDocument',
    'uri' => 'string',
  ),
  'xsltprocessor::transformtoxml' => 
  array (
    0 => 'false|string',
    'document' => 'DOMDocument',
  ),
  'yac::__construct' => 
  array (
    0 => 'void',
    'prefix=' => 'string',
  ),
  'yac::__get' => 
  array (
    0 => 'mixed',
    'key' => 'string',
  ),
  'yac::__set' => 
  array (
    0 => 'mixed',
    'key' => 'string',
    'value' => 'mixed',
  ),
  'yac::delete' => 
  array (
    0 => 'bool',
    'keys' => 'array<array-key, mixed>|string',
    'ttl=' => 'int',
  ),
  'yac::dump' => 
  array (
    0 => 'mixed',
    'num' => 'int',
  ),
  'yac::flush' => 
  array (
    0 => 'bool',
  ),
  'yac::get' => 
  array (
    0 => 'mixed',
    'key' => 'array<array-key, mixed>|string',
    'cas=' => 'int',
  ),
  'yac::info' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'yaconf::get' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'default_value=' => 'mixed',
  ),
  'yaconf::has' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'yaf\\action_abstract::__clone' => 
  array (
    0 => 'void',
  ),
  'yaf\\action_abstract::__construct' => 
  array (
    0 => 'void',
    'request' => 'Yaf\\Request_Abstract',
    'response' => 'Yaf\\Response_Abstract',
    'view' => 'Yaf\\View_Interface',
    'invokeArgs=' => 'array<array-key, mixed>|null',
  ),
  'yaf\\action_abstract::display' => 
  array (
    0 => 'bool',
    'tpl' => 'string',
    'parameters=' => 'array<array-key, mixed>|null',
  ),
  'yaf\\action_abstract::execute' => 
  array (
    0 => 'mixed',
  ),
  'yaf\\action_abstract::forward' => 
  array (
    0 => 'bool',
    'module' => 'string',
    'controller=' => 'string',
    'action=' => 'string',
    'parameters=' => 'array<array-key, mixed>|null',
  ),
  'yaf\\action_abstract::getcontroller' => 
  array (
    0 => 'Yaf\\Controller_Abstract',
  ),
  'yaf\\action_abstract::getinvokearg' => 
  array (
    0 => 'mixed|null',
    'name' => 'string',
  ),
  'yaf\\action_abstract::getinvokeargs' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'yaf\\action_abstract::getmodulename' => 
  array (
    0 => 'string',
  ),
  'yaf\\action_abstract::getrequest' => 
  array (
    0 => 'Yaf\\Request_Abstract',
  ),
  'yaf\\action_abstract::getresponse' => 
  array (
    0 => 'Yaf\\Response_Abstract',
  ),
  'yaf\\action_abstract::getview' => 
  array (
    0 => 'Yaf\\View_Interface',
  ),
  'yaf\\action_abstract::getviewpath' => 
  array (
    0 => 'string',
  ),
  'yaf\\action_abstract::init' => 
  array (
    0 => 'mixed',
  ),
  'yaf\\action_abstract::initview' => 
  array (
    0 => 'Yaf\\Response_Abstract',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'yaf\\action_abstract::redirect' => 
  array (
    0 => 'bool',
    'url' => 'string',
  ),
  'yaf\\action_abstract::render' => 
  array (
    0 => 'string',
    'tpl' => 'string',
    'parameters=' => 'array<array-key, mixed>|null',
  ),
  'yaf\\action_abstract::setviewpath' => 
  array (
    0 => 'bool',
    'view_directory' => 'string',
  ),
  'yaf\\application::__clone' => 
  array (
    0 => 'void',
  ),
  'yaf\\application::__construct' => 
  array (
    0 => 'void',
    'config' => 'array<array-key, mixed>|string',
    'envrion=' => 'string',
  ),
  'yaf\\application::__destruct' => 
  array (
    0 => 'void',
  ),
  'yaf\\application::__sleep' => 
  array (
    0 => 'array<array-key, string>',
  ),
  'yaf\\application::__wakeup' => 
  array (
    0 => 'void',
  ),
  'yaf\\application::app' => 
  array (
    0 => 'Yaf\\Application|null',
  ),
  'yaf\\application::bootstrap' => 
  array (
    0 => 'Yaf\\Application',
    'bootstrap=' => 'Yaf\\Bootstrap_Abstract|null',
  ),
  'yaf\\application::clearlasterror' => 
  array (
    0 => 'void',
  ),
  'yaf\\application::environ' => 
  array (
    0 => 'string',
  ),
  'yaf\\application::execute' => 
  array (
    0 => 'void',
    'entry' => 'callable',
    '_=' => 'string',
  ),
  'yaf\\application::getappdirectory' => 
  array (
    0 => 'string',
  ),
  'yaf\\application::getconfig' => 
  array (
    0 => 'Yaf\\Config_Abstract',
  ),
  'yaf\\application::getdispatcher' => 
  array (
    0 => 'Yaf\\Dispatcher',
  ),
  'yaf\\application::getlasterrormsg' => 
  array (
    0 => 'string',
  ),
  'yaf\\application::getlasterrorno' => 
  array (
    0 => 'int',
  ),
  'yaf\\application::getmodules' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'yaf\\application::run' => 
  array (
    0 => 'void',
  ),
  'yaf\\application::setappdirectory' => 
  array (
    0 => 'Yaf\\Application',
    'directory' => 'string',
  ),
  'yaf\\config\\ini::__construct' => 
  array (
    0 => 'void',
    'config_file' => 'string',
    'section=' => 'string',
  ),
  'yaf\\config\\ini::__get' => 
  array (
    0 => 'mixed',
    'name=' => 'mixed',
  ),
  'yaf\\config\\ini::__isset' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'yaf\\config\\ini::__set' => 
  array (
    0 => 'void',
    'name' => 'mixed',
    'value' => 'mixed',
  ),
  'yaf\\config\\ini::count' => 
  array (
    0 => 'int',
  ),
  'yaf\\config\\ini::current' => 
  array (
    0 => 'mixed',
  ),
  'yaf\\config\\ini::get' => 
  array (
    0 => 'mixed',
    'name=' => 'mixed',
  ),
  'yaf\\config\\ini::key' => 
  array (
    0 => 'int|string',
  ),
  'yaf\\config\\ini::next' => 
  array (
    0 => 'void',
  ),
  'yaf\\config\\ini::offsetexists' => 
  array (
    0 => 'bool',
    'name' => 'int|string',
  ),
  'yaf\\config\\ini::offsetget' => 
  array (
    0 => 'mixed',
    'name' => 'int|string',
  ),
  'yaf\\config\\ini::offsetset' => 
  array (
    0 => 'void',
    'name' => 'int|null|string',
    'value' => 'mixed',
  ),
  'yaf\\config\\ini::offsetunset' => 
  array (
    0 => 'void',
    'name' => 'int|string',
  ),
  'yaf\\config\\ini::readonly' => 
  array (
    0 => 'bool',
  ),
  'yaf\\config\\ini::rewind' => 
  array (
    0 => 'void',
  ),
  'yaf\\config\\ini::set' => 
  array (
    0 => 'Yaf\\Config_Abstract',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'yaf\\config\\ini::toarray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'yaf\\config\\ini::valid' => 
  array (
    0 => 'bool',
  ),
  'yaf\\config\\simple::__construct' => 
  array (
    0 => 'void',
    'array' => 'array<array-key, mixed>',
    'readonly=' => 'string',
  ),
  'yaf\\config\\simple::__get' => 
  array (
    0 => 'mixed',
    'name=' => 'mixed',
  ),
  'yaf\\config\\simple::__isset' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'yaf\\config\\simple::__set' => 
  array (
    0 => 'void',
    'name' => 'mixed',
    'value' => 'mixed',
  ),
  'yaf\\config\\simple::count' => 
  array (
    0 => 'int',
  ),
  'yaf\\config\\simple::current' => 
  array (
    0 => 'mixed',
  ),
  'yaf\\config\\simple::get' => 
  array (
    0 => 'mixed',
    'name=' => 'mixed',
  ),
  'yaf\\config\\simple::key' => 
  array (
    0 => 'int|string',
  ),
  'yaf\\config\\simple::next' => 
  array (
    0 => 'void',
  ),
  'yaf\\config\\simple::offsetexists' => 
  array (
    0 => 'bool',
    'name' => 'int|string',
  ),
  'yaf\\config\\simple::offsetget' => 
  array (
    0 => 'mixed',
    'name' => 'int|string',
  ),
  'yaf\\config\\simple::offsetset' => 
  array (
    0 => 'void',
    'name' => 'int|null|string',
    'value' => 'mixed',
  ),
  'yaf\\config\\simple::offsetunset' => 
  array (
    0 => 'void',
    'name' => 'int|string',
  ),
  'yaf\\config\\simple::readonly' => 
  array (
    0 => 'bool',
  ),
  'yaf\\config\\simple::rewind' => 
  array (
    0 => 'void',
  ),
  'yaf\\config\\simple::set' => 
  array (
    0 => 'Yaf\\Config_Abstract',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'yaf\\config\\simple::toarray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'yaf\\config\\simple::valid' => 
  array (
    0 => 'bool',
  ),
  'yaf\\config_abstract::__construct' => 
  array (
    0 => 'void',
  ),
  'yaf\\config_abstract::get' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
  ),
  'yaf\\config_abstract::readonly' => 
  array (
    0 => 'bool',
  ),
  'yaf\\config_abstract::set' => 
  array (
    0 => 'Yaf\\Config_Abstract',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'yaf\\config_abstract::toarray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'yaf\\controller_abstract::__clone' => 
  array (
    0 => 'void',
  ),
  'yaf\\controller_abstract::__construct' => 
  array (
    0 => 'void',
    'request' => 'Yaf\\Request_Abstract',
    'response' => 'Yaf\\Response_Abstract',
    'view' => 'Yaf\\View_Interface',
    'invokeArgs=' => 'array<array-key, mixed>|null',
  ),
  'yaf\\controller_abstract::display' => 
  array (
    0 => 'bool',
    'tpl' => 'string',
    'parameters=' => 'array<array-key, mixed>|null',
  ),
  'yaf\\controller_abstract::forward' => 
  array (
    0 => 'bool',
    'module' => 'string',
    'controller=' => 'string',
    'action=' => 'string',
    'parameters=' => 'array<array-key, mixed>|null',
  ),
  'yaf\\controller_abstract::getinvokearg' => 
  array (
    0 => 'mixed|null',
    'name' => 'string',
  ),
  'yaf\\controller_abstract::getinvokeargs' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'yaf\\controller_abstract::getmodulename' => 
  array (
    0 => 'string',
  ),
  'yaf\\controller_abstract::getrequest' => 
  array (
    0 => 'Yaf\\Request_Abstract',
  ),
  'yaf\\controller_abstract::getresponse' => 
  array (
    0 => 'Yaf\\Response_Abstract',
  ),
  'yaf\\controller_abstract::getview' => 
  array (
    0 => 'Yaf\\View_Interface',
  ),
  'yaf\\controller_abstract::getviewpath' => 
  array (
    0 => 'string',
  ),
  'yaf\\controller_abstract::init' => 
  array (
    0 => 'mixed',
  ),
  'yaf\\controller_abstract::initview' => 
  array (
    0 => 'Yaf\\Response_Abstract',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'yaf\\controller_abstract::redirect' => 
  array (
    0 => 'bool',
    'url' => 'string',
  ),
  'yaf\\controller_abstract::render' => 
  array (
    0 => 'string',
    'tpl' => 'string',
    'parameters=' => 'array<array-key, mixed>|null',
  ),
  'yaf\\controller_abstract::setviewpath' => 
  array (
    0 => 'bool',
    'view_directory' => 'string',
  ),
  'yaf\\dispatcher::__clone' => 
  array (
    0 => 'void',
  ),
  'yaf\\dispatcher::__construct' => 
  array (
    0 => 'void',
  ),
  'yaf\\dispatcher::__sleep' => 
  array (
    0 => 'list<string>',
  ),
  'yaf\\dispatcher::__wakeup' => 
  array (
    0 => 'void',
  ),
  'yaf\\dispatcher::autorender' => 
  array (
    0 => 'Yaf\\Dispatcher',
    'flag=' => 'bool',
  ),
  'yaf\\dispatcher::catchexception' => 
  array (
    0 => 'Yaf\\Dispatcher',
    'flag=' => 'bool',
  ),
  'yaf\\dispatcher::disableview' => 
  array (
    0 => 'bool',
  ),
  'yaf\\dispatcher::dispatch' => 
  array (
    0 => 'Yaf\\Response_Abstract',
    'request' => 'Yaf\\Request_Abstract',
  ),
  'yaf\\dispatcher::enableview' => 
  array (
    0 => 'Yaf\\Dispatcher',
  ),
  'yaf\\dispatcher::flushinstantly' => 
  array (
    0 => 'Yaf\\Dispatcher',
    'flag=' => 'bool',
  ),
  'yaf\\dispatcher::getapplication' => 
  array (
    0 => 'Yaf\\Application',
  ),
  'yaf\\dispatcher::getinstance' => 
  array (
    0 => 'Yaf\\Dispatcher',
  ),
  'yaf\\dispatcher::getrequest' => 
  array (
    0 => 'Yaf\\Request_Abstract',
  ),
  'yaf\\dispatcher::getrouter' => 
  array (
    0 => 'Yaf\\Router',
  ),
  'yaf\\dispatcher::initview' => 
  array (
    0 => 'Yaf\\View_Interface',
    'templates_dir' => 'string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'yaf\\dispatcher::registerplugin' => 
  array (
    0 => 'Yaf\\Dispatcher',
    'plugin' => 'Yaf\\Plugin_Abstract',
  ),
  'yaf\\dispatcher::returnresponse' => 
  array (
    0 => 'Yaf\\Dispatcher',
    'flag' => 'bool',
  ),
  'yaf\\dispatcher::setdefaultaction' => 
  array (
    0 => 'Yaf\\Dispatcher',
    'action' => 'string',
  ),
  'yaf\\dispatcher::setdefaultcontroller' => 
  array (
    0 => 'Yaf\\Dispatcher',
    'controller' => 'string',
  ),
  'yaf\\dispatcher::setdefaultmodule' => 
  array (
    0 => 'Yaf\\Dispatcher',
    'module' => 'string',
  ),
  'yaf\\dispatcher::seterrorhandler' => 
  array (
    0 => 'Yaf\\Dispatcher',
    'callback' => 'callable',
    'error_types' => 'int',
  ),
  'yaf\\dispatcher::setrequest' => 
  array (
    0 => 'Yaf\\Dispatcher',
    'request' => 'Yaf\\Request_Abstract',
  ),
  'yaf\\dispatcher::setview' => 
  array (
    0 => 'Yaf\\Dispatcher',
    'view' => 'Yaf\\View_Interface',
  ),
  'yaf\\dispatcher::throwexception' => 
  array (
    0 => 'Yaf\\Dispatcher',
    'flag=' => 'bool',
  ),
  'yaf\\loader::__clone' => 
  array (
    0 => 'void',
  ),
  'yaf\\loader::__construct' => 
  array (
    0 => 'void',
  ),
  'yaf\\loader::__sleep' => 
  array (
    0 => 'list<string>',
  ),
  'yaf\\loader::__wakeup' => 
  array (
    0 => 'void',
  ),
  'yaf\\loader::autoload' => 
  array (
    0 => 'bool',
    'class_name' => 'string',
  ),
  'yaf\\loader::clearlocalnamespace' => 
  array (
    0 => 'mixed',
  ),
  'yaf\\loader::getinstance' => 
  array (
    0 => 'Yaf\\Loader',
    'local_library_path=' => 'string',
    'global_library_path=' => 'string',
  ),
  'yaf\\loader::getlibrarypath' => 
  array (
    0 => 'string',
    'is_global=' => 'bool',
  ),
  'yaf\\loader::getlocalnamespace' => 
  array (
    0 => 'string',
  ),
  'yaf\\loader::import' => 
  array (
    0 => 'bool',
    'file' => 'string',
  ),
  'yaf\\loader::islocalname' => 
  array (
    0 => 'bool',
    'class_name' => 'string',
  ),
  'yaf\\loader::registerlocalnamespace' => 
  array (
    0 => 'bool',
    'name_prefix' => 'array<array-key, string>|string',
  ),
  'yaf\\loader::setlibrarypath' => 
  array (
    0 => 'Yaf\\Loader',
    'directory' => 'string',
    'global=' => 'bool',
  ),
  'yaf\\plugin_abstract::dispatchloopshutdown' => 
  array (
    0 => 'bool',
    'request' => 'Yaf\\Request_Abstract',
    'response' => 'Yaf\\Response_Abstract',
  ),
  'yaf\\plugin_abstract::dispatchloopstartup' => 
  array (
    0 => 'bool',
    'request' => 'Yaf\\Request_Abstract',
    'response' => 'Yaf\\Response_Abstract',
  ),
  'yaf\\plugin_abstract::postdispatch' => 
  array (
    0 => 'bool',
    'request' => 'Yaf\\Request_Abstract',
    'response' => 'Yaf\\Response_Abstract',
  ),
  'yaf\\plugin_abstract::predispatch' => 
  array (
    0 => 'bool',
    'request' => 'Yaf\\Request_Abstract',
    'response' => 'Yaf\\Response_Abstract',
  ),
  'yaf\\plugin_abstract::preresponse' => 
  array (
    0 => 'bool',
    'request' => 'Yaf\\Request_Abstract',
    'response' => 'Yaf\\Response_Abstract',
  ),
  'yaf\\plugin_abstract::routershutdown' => 
  array (
    0 => 'bool',
    'request' => 'Yaf\\Request_Abstract',
    'response' => 'Yaf\\Response_Abstract',
  ),
  'yaf\\plugin_abstract::routerstartup' => 
  array (
    0 => 'bool',
    'request' => 'Yaf\\Request_Abstract',
    'response' => 'Yaf\\Response_Abstract',
  ),
  'yaf\\registry::__clone' => 
  array (
    0 => 'void',
  ),
  'yaf\\registry::__construct' => 
  array (
    0 => 'void',
  ),
  'yaf\\registry::del' => 
  array (
    0 => 'bool|null',
    'name' => 'string',
  ),
  'yaf\\registry::get' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'yaf\\registry::has' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'yaf\\registry::set' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'yaf\\request\\http::__clone' => 
  array (
    0 => 'void',
  ),
  'yaf\\request\\http::__construct' => 
  array (
    0 => 'void',
    'request_uri' => 'string',
    'base_uri' => 'string',
  ),
  'yaf\\request\\http::get' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'default=' => 'string',
  ),
  'yaf\\request\\http::getactionname' => 
  array (
    0 => 'string',
  ),
  'yaf\\request\\http::getbaseuri' => 
  array (
    0 => 'string',
  ),
  'yaf\\request\\http::getcontrollername' => 
  array (
    0 => 'string',
  ),
  'yaf\\request\\http::getcookie' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'mixed',
  ),
  'yaf\\request\\http::getenv' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'mixed',
  ),
  'yaf\\request\\http::getexception' => 
  array (
    0 => 'Yaf\\Exception',
  ),
  'yaf\\request\\http::getfiles' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'mixed',
  ),
  'yaf\\request\\http::getlanguage' => 
  array (
    0 => 'string',
  ),
  'yaf\\request\\http::getmethod' => 
  array (
    0 => 'string',
  ),
  'yaf\\request\\http::getmodulename' => 
  array (
    0 => 'string',
  ),
  'yaf\\request\\http::getparam' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'default=' => 'mixed',
  ),
  'yaf\\request\\http::getparams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'yaf\\request\\http::getpost' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'mixed',
  ),
  'yaf\\request\\http::getquery' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'mixed',
  ),
  'yaf\\request\\http::getrequest' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'mixed',
  ),
  'yaf\\request\\http::getrequesturi' => 
  array (
    0 => 'string',
  ),
  'yaf\\request\\http::getserver' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'mixed',
  ),
  'yaf\\request\\http::iscli' => 
  array (
    0 => 'bool',
  ),
  'yaf\\request\\http::isdispatched' => 
  array (
    0 => 'bool',
  ),
  'yaf\\request\\http::isget' => 
  array (
    0 => 'bool',
  ),
  'yaf\\request\\http::ishead' => 
  array (
    0 => 'bool',
  ),
  'yaf\\request\\http::isoptions' => 
  array (
    0 => 'bool',
  ),
  'yaf\\request\\http::ispost' => 
  array (
    0 => 'bool',
  ),
  'yaf\\request\\http::isput' => 
  array (
    0 => 'bool',
  ),
  'yaf\\request\\http::isrouted' => 
  array (
    0 => 'bool',
  ),
  'yaf\\request\\http::isxmlhttprequest' => 
  array (
    0 => 'bool',
  ),
  'yaf\\request\\http::setactionname' => 
  array (
    0 => 'Yaf\\Request_Abstract|bool',
    'action' => 'string',
  ),
  'yaf\\request\\http::setbaseuri' => 
  array (
    0 => 'bool',
    'uri' => 'string',
  ),
  'yaf\\request\\http::setcontrollername' => 
  array (
    0 => 'Yaf\\Request_Abstract|bool',
    'controller' => 'string',
  ),
  'yaf\\request\\http::setdispatched' => 
  array (
    0 => 'bool',
  ),
  'yaf\\request\\http::setmodulename' => 
  array (
    0 => 'Yaf\\Request_Abstract|bool',
    'module' => 'string',
  ),
  'yaf\\request\\http::setparam' => 
  array (
    0 => 'Yaf\\Request_Abstract|bool',
    'name' => 'array<array-key, mixed>|string',
    'value=' => 'string',
  ),
  'yaf\\request\\http::setrequesturi' => 
  array (
    0 => 'mixed',
    'uri' => 'string',
  ),
  'yaf\\request\\http::setrouted' => 
  array (
    0 => 'Yaf\\Request_Abstract|bool',
  ),
  'yaf\\request\\simple::__clone' => 
  array (
    0 => 'void',
  ),
  'yaf\\request\\simple::__construct' => 
  array (
    0 => 'void',
    'method' => 'string',
    'controller' => 'string',
    'action' => 'string',
    'params=' => 'string',
  ),
  'yaf\\request\\simple::get' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'default=' => 'string',
  ),
  'yaf\\request\\simple::getactionname' => 
  array (
    0 => 'string',
  ),
  'yaf\\request\\simple::getbaseuri' => 
  array (
    0 => 'string',
  ),
  'yaf\\request\\simple::getcontrollername' => 
  array (
    0 => 'string',
  ),
  'yaf\\request\\simple::getcookie' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'string',
  ),
  'yaf\\request\\simple::getenv' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'mixed',
  ),
  'yaf\\request\\simple::getexception' => 
  array (
    0 => 'Yaf\\Exception',
  ),
  'yaf\\request\\simple::getfiles' => 
  array (
    0 => 'array<array-key, mixed>',
    'name=' => 'mixed',
    'default=' => 'null',
  ),
  'yaf\\request\\simple::getlanguage' => 
  array (
    0 => 'string',
  ),
  'yaf\\request\\simple::getmethod' => 
  array (
    0 => 'string',
  ),
  'yaf\\request\\simple::getmodulename' => 
  array (
    0 => 'string',
  ),
  'yaf\\request\\simple::getparam' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'default=' => 'mixed',
  ),
  'yaf\\request\\simple::getparams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'yaf\\request\\simple::getpost' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'string',
  ),
  'yaf\\request\\simple::getquery' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'string',
  ),
  'yaf\\request\\simple::getrequest' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'string',
  ),
  'yaf\\request\\simple::getrequesturi' => 
  array (
    0 => 'string',
  ),
  'yaf\\request\\simple::getserver' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'mixed',
  ),
  'yaf\\request\\simple::iscli' => 
  array (
    0 => 'bool',
  ),
  'yaf\\request\\simple::isdispatched' => 
  array (
    0 => 'bool',
  ),
  'yaf\\request\\simple::isget' => 
  array (
    0 => 'bool',
  ),
  'yaf\\request\\simple::ishead' => 
  array (
    0 => 'bool',
  ),
  'yaf\\request\\simple::isoptions' => 
  array (
    0 => 'bool',
  ),
  'yaf\\request\\simple::ispost' => 
  array (
    0 => 'bool',
  ),
  'yaf\\request\\simple::isput' => 
  array (
    0 => 'bool',
  ),
  'yaf\\request\\simple::isrouted' => 
  array (
    0 => 'bool',
  ),
  'yaf\\request\\simple::isxmlhttprequest' => 
  array (
    0 => 'bool',
  ),
  'yaf\\request\\simple::setactionname' => 
  array (
    0 => 'Yaf\\Request_Abstract|bool',
    'action' => 'string',
  ),
  'yaf\\request\\simple::setbaseuri' => 
  array (
    0 => 'bool',
    'uri' => 'string',
  ),
  'yaf\\request\\simple::setcontrollername' => 
  array (
    0 => 'Yaf\\Request_Abstract|bool',
    'controller' => 'string',
  ),
  'yaf\\request\\simple::setdispatched' => 
  array (
    0 => 'bool',
  ),
  'yaf\\request\\simple::setmodulename' => 
  array (
    0 => 'Yaf\\Request_Abstract|bool',
    'module' => 'string',
  ),
  'yaf\\request\\simple::setparam' => 
  array (
    0 => 'Yaf\\Request_Abstract|bool',
    'name' => 'array<array-key, mixed>|string',
    'value=' => 'string',
  ),
  'yaf\\request\\simple::setrequesturi' => 
  array (
    0 => 'mixed',
    'uri' => 'string',
  ),
  'yaf\\request\\simple::setrouted' => 
  array (
    0 => 'Yaf\\Request_Abstract|bool',
  ),
  'yaf\\request_abstract::getactionname' => 
  array (
    0 => 'string',
  ),
  'yaf\\request_abstract::getbaseuri' => 
  array (
    0 => 'string',
  ),
  'yaf\\request_abstract::getcontrollername' => 
  array (
    0 => 'string',
  ),
  'yaf\\request_abstract::getenv' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'mixed',
  ),
  'yaf\\request_abstract::getexception' => 
  array (
    0 => 'Yaf\\Exception',
  ),
  'yaf\\request_abstract::getlanguage' => 
  array (
    0 => 'string',
  ),
  'yaf\\request_abstract::getmethod' => 
  array (
    0 => 'string',
  ),
  'yaf\\request_abstract::getmodulename' => 
  array (
    0 => 'string',
  ),
  'yaf\\request_abstract::getparam' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'default=' => 'mixed',
  ),
  'yaf\\request_abstract::getparams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'yaf\\request_abstract::getrequesturi' => 
  array (
    0 => 'string',
  ),
  'yaf\\request_abstract::getserver' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'mixed',
  ),
  'yaf\\request_abstract::iscli' => 
  array (
    0 => 'bool',
  ),
  'yaf\\request_abstract::isdispatched' => 
  array (
    0 => 'bool',
  ),
  'yaf\\request_abstract::isget' => 
  array (
    0 => 'bool',
  ),
  'yaf\\request_abstract::ishead' => 
  array (
    0 => 'bool',
  ),
  'yaf\\request_abstract::isoptions' => 
  array (
    0 => 'bool',
  ),
  'yaf\\request_abstract::ispost' => 
  array (
    0 => 'bool',
  ),
  'yaf\\request_abstract::isput' => 
  array (
    0 => 'bool',
  ),
  'yaf\\request_abstract::isrouted' => 
  array (
    0 => 'bool',
  ),
  'yaf\\request_abstract::isxmlhttprequest' => 
  array (
    0 => 'bool',
  ),
  'yaf\\request_abstract::setactionname' => 
  array (
    0 => 'Yaf\\Request_Abstract|bool',
    'action' => 'string',
  ),
  'yaf\\request_abstract::setbaseuri' => 
  array (
    0 => 'bool',
    'uri' => 'string',
  ),
  'yaf\\request_abstract::setcontrollername' => 
  array (
    0 => 'Yaf\\Request_Abstract|bool',
    'controller' => 'string',
  ),
  'yaf\\request_abstract::setdispatched' => 
  array (
    0 => 'bool',
  ),
  'yaf\\request_abstract::setmodulename' => 
  array (
    0 => 'Yaf\\Request_Abstract|bool',
    'module' => 'string',
  ),
  'yaf\\request_abstract::setparam' => 
  array (
    0 => 'Yaf\\Request_Abstract|bool',
    'name' => 'array<array-key, mixed>|string',
    'value=' => 'string',
  ),
  'yaf\\request_abstract::setrequesturi' => 
  array (
    0 => 'mixed',
    'uri' => 'string',
  ),
  'yaf\\request_abstract::setrouted' => 
  array (
    0 => 'Yaf\\Request_Abstract|bool',
  ),
  'yaf\\response\\cli::__clone' => 
  array (
    0 => 'void',
  ),
  'yaf\\response\\cli::__construct' => 
  array (
    0 => 'void',
  ),
  'yaf\\response\\cli::__destruct' => 
  array (
    0 => 'void',
  ),
  'yaf\\response\\cli::__tostring' => 
  array (
    0 => 'string',
  ),
  'yaf\\response\\cli::appendbody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'yaf\\response\\cli::clearbody' => 
  array (
    0 => 'bool',
    'key=' => 'string',
  ),
  'yaf\\response\\cli::getbody' => 
  array (
    0 => 'mixed',
    'key=' => 'null|string',
  ),
  'yaf\\response\\cli::prependbody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'yaf\\response\\cli::setbody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'yaf\\response\\http::__clone' => 
  array (
    0 => 'void',
  ),
  'yaf\\response\\http::__construct' => 
  array (
    0 => 'void',
  ),
  'yaf\\response\\http::__destruct' => 
  array (
    0 => 'void',
  ),
  'yaf\\response\\http::__tostring' => 
  array (
    0 => 'string',
  ),
  'yaf\\response\\http::appendbody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'yaf\\response\\http::clearbody' => 
  array (
    0 => 'bool',
    'key=' => 'string',
  ),
  'yaf\\response\\http::clearheaders' => 
  array (
    0 => 'Yaf\\Response_Abstract|false',
    'name=' => 'string',
  ),
  'yaf\\response\\http::getbody' => 
  array (
    0 => 'mixed',
    'key=' => 'null|string',
  ),
  'yaf\\response\\http::getheader' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
  ),
  'yaf\\response\\http::prependbody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'yaf\\response\\http::response' => 
  array (
    0 => 'bool',
  ),
  'yaf\\response\\http::setallheaders' => 
  array (
    0 => 'bool',
    'headers' => 'array<array-key, mixed>',
  ),
  'yaf\\response\\http::setbody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'yaf\\response\\http::setheader' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value' => 'string',
    'replace=' => 'bool',
    'response_code=' => 'int',
  ),
  'yaf\\response\\http::setredirect' => 
  array (
    0 => 'bool',
    'url' => 'string',
  ),
  'yaf\\response_abstract::__clone' => 
  array (
    0 => 'void',
  ),
  'yaf\\response_abstract::__construct' => 
  array (
    0 => 'void',
  ),
  'yaf\\response_abstract::__destruct' => 
  array (
    0 => 'void',
  ),
  'yaf\\response_abstract::__tostring' => 
  array (
    0 => 'void',
  ),
  'yaf\\response_abstract::appendbody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'yaf\\response_abstract::clearbody' => 
  array (
    0 => 'bool',
    'key=' => 'string',
  ),
  'yaf\\response_abstract::getbody' => 
  array (
    0 => 'mixed',
    'key=' => 'null|string',
  ),
  'yaf\\response_abstract::prependbody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'yaf\\response_abstract::setbody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'yaf\\route\\map::__construct' => 
  array (
    0 => 'void',
    'controller_prefer=' => 'bool',
    'delimiter=' => 'string',
  ),
  'yaf\\route\\map::assemble' => 
  array (
    0 => 'bool',
    'info' => 'array<array-key, mixed>',
    'query=' => 'array<array-key, mixed>|null',
  ),
  'yaf\\route\\map::route' => 
  array (
    0 => 'bool',
    'request' => 'Yaf\\Request_Abstract',
  ),
  'yaf\\route\\regex::__construct' => 
  array (
    0 => 'void',
    'match' => 'string',
    'route' => 'array<array-key, mixed>',
    'map=' => 'array<array-key, mixed>|null',
    'verify=' => 'array<array-key, mixed>|null',
    'reverse=' => 'string',
  ),
  'yaf\\route\\regex::addconfig' => 
  array (
    0 => 'Yaf\\Router|bool',
    'config' => 'Yaf\\Config_Abstract',
  ),
  'yaf\\route\\regex::addroute' => 
  array (
    0 => 'Yaf\\Router|bool',
    'name' => 'string',
    'route' => 'Yaf\\Route_Interface',
  ),
  'yaf\\route\\regex::assemble' => 
  array (
    0 => 'bool',
    'info' => 'array<array-key, mixed>',
    'query=' => 'array<array-key, mixed>|null',
  ),
  'yaf\\route\\regex::getcurrentroute' => 
  array (
    0 => 'string',
  ),
  'yaf\\route\\regex::getroute' => 
  array (
    0 => 'Yaf\\Route_Interface',
    'name' => 'string',
  ),
  'yaf\\route\\regex::getroutes' => 
  array (
    0 => 'array<array-key, Yaf\\Route_Interface>',
  ),
  'yaf\\route\\regex::route' => 
  array (
    0 => 'bool',
    'request' => 'Yaf\\Request_Abstract',
  ),
  'yaf\\route\\rewrite::__construct' => 
  array (
    0 => 'void',
    'match' => 'string',
    'route' => 'array<array-key, mixed>',
    'verify=' => 'array<array-key, mixed>|null',
    'reverse=' => 'string',
  ),
  'yaf\\route\\rewrite::addconfig' => 
  array (
    0 => 'Yaf\\Router|bool',
    'config' => 'Yaf\\Config_Abstract',
  ),
  'yaf\\route\\rewrite::addroute' => 
  array (
    0 => 'Yaf\\Router|bool',
    'name' => 'string',
    'route' => 'Yaf\\Route_Interface',
  ),
  'yaf\\route\\rewrite::assemble' => 
  array (
    0 => 'bool',
    'info' => 'array<array-key, mixed>',
    'query=' => 'array<array-key, mixed>|null',
  ),
  'yaf\\route\\rewrite::getcurrentroute' => 
  array (
    0 => 'string',
  ),
  'yaf\\route\\rewrite::getroute' => 
  array (
    0 => 'Yaf\\Route_Interface',
    'name' => 'string',
  ),
  'yaf\\route\\rewrite::getroutes' => 
  array (
    0 => 'array<array-key, Yaf\\Route_Interface>',
  ),
  'yaf\\route\\rewrite::route' => 
  array (
    0 => 'bool',
    'request' => 'Yaf\\Request_Abstract',
  ),
  'yaf\\route\\simple::__construct' => 
  array (
    0 => 'void',
    'module_name' => 'string',
    'controller_name' => 'string',
    'action_name' => 'string',
  ),
  'yaf\\route\\simple::assemble' => 
  array (
    0 => 'bool',
    'info' => 'array<array-key, mixed>',
    'query=' => 'array<array-key, mixed>|null',
  ),
  'yaf\\route\\simple::route' => 
  array (
    0 => 'bool',
    'request' => 'Yaf\\Request_Abstract',
  ),
  'yaf\\route\\supervar::__construct' => 
  array (
    0 => 'void',
    'supervar_name' => 'string',
  ),
  'yaf\\route\\supervar::assemble' => 
  array (
    0 => 'bool',
    'info' => 'array<array-key, mixed>',
    'query=' => 'array<array-key, mixed>|null',
  ),
  'yaf\\route\\supervar::route' => 
  array (
    0 => 'bool',
    'request' => 'Yaf\\Request_Abstract',
  ),
  'yaf\\route_interface::__construct' => 
  array (
    0 => 'Yaf\\Route_Interface',
  ),
  'yaf\\route_interface::assemble' => 
  array (
    0 => 'bool',
    'info' => 'array<array-key, mixed>',
    'query=' => 'array<array-key, mixed>|null',
  ),
  'yaf\\route_interface::route' => 
  array (
    0 => 'bool',
    'request' => 'Yaf\\Request_Abstract',
  ),
  'yaf\\route_static::assemble' => 
  array (
    0 => 'bool',
    'info' => 'array<array-key, mixed>',
    'query=' => 'array<array-key, mixed>|null',
  ),
  'yaf\\route_static::match' => 
  array (
    0 => 'bool',
    'uri' => 'string',
  ),
  'yaf\\route_static::route' => 
  array (
    0 => 'bool',
    'request' => 'Yaf\\Request_Abstract',
  ),
  'yaf\\router::__construct' => 
  array (
    0 => 'void',
  ),
  'yaf\\router::addconfig' => 
  array (
    0 => 'Yaf\\Router|false',
    'config' => 'Yaf\\Config_Abstract',
  ),
  'yaf\\router::addroute' => 
  array (
    0 => 'Yaf\\Router|false',
    'name' => 'string',
    'route' => 'Yaf\\Route_Interface',
  ),
  'yaf\\router::getcurrentroute' => 
  array (
    0 => 'string',
  ),
  'yaf\\router::getroute' => 
  array (
    0 => 'Yaf\\Route_Interface',
    'name' => 'string',
  ),
  'yaf\\router::getroutes' => 
  array (
    0 => 'array<array-key, Yaf\\Route_Interface>',
  ),
  'yaf\\router::route' => 
  array (
    0 => 'Yaf\\Router|false',
    'request' => 'Yaf\\Request_Abstract',
  ),
  'yaf\\session::__clone' => 
  array (
    0 => 'void',
  ),
  'yaf\\session::__construct' => 
  array (
    0 => 'void',
  ),
  'yaf\\session::__get' => 
  array (
    0 => 'void',
    'name' => 'mixed',
  ),
  'yaf\\session::__isset' => 
  array (
    0 => 'void',
    'name' => 'mixed',
  ),
  'yaf\\session::__set' => 
  array (
    0 => 'void',
    'name' => 'mixed',
    'value' => 'mixed',
  ),
  'yaf\\session::__sleep' => 
  array (
    0 => 'list<string>',
  ),
  'yaf\\session::__unset' => 
  array (
    0 => 'void',
    'name' => 'mixed',
  ),
  'yaf\\session::__wakeup' => 
  array (
    0 => 'void',
  ),
  'yaf\\session::count' => 
  array (
    0 => 'int',
  ),
  'yaf\\session::current' => 
  array (
    0 => 'mixed',
  ),
  'yaf\\session::del' => 
  array (
    0 => 'Yaf\\Session|false',
    'name' => 'string',
  ),
  'yaf\\session::get' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'yaf\\session::getinstance' => 
  array (
    0 => 'Yaf\\Session',
  ),
  'yaf\\session::has' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'yaf\\session::key' => 
  array (
    0 => 'int|string',
  ),
  'yaf\\session::next' => 
  array (
    0 => 'void',
  ),
  'yaf\\session::offsetexists' => 
  array (
    0 => 'bool',
    'name' => 'int|string',
  ),
  'yaf\\session::offsetget' => 
  array (
    0 => 'mixed',
    'name' => 'int|string',
  ),
  'yaf\\session::offsetset' => 
  array (
    0 => 'void',
    'name' => 'int|null|string',
    'value' => 'mixed',
  ),
  'yaf\\session::offsetunset' => 
  array (
    0 => 'void',
    'name' => 'int|string',
  ),
  'yaf\\session::rewind' => 
  array (
    0 => 'void',
  ),
  'yaf\\session::set' => 
  array (
    0 => 'Yaf\\Session|false',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'yaf\\session::start' => 
  array (
    0 => 'Yaf\\Session',
  ),
  'yaf\\session::valid' => 
  array (
    0 => 'bool',
  ),
  'yaf\\view\\simple::__construct' => 
  array (
    0 => 'void',
    'template_dir' => 'string',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'yaf\\view\\simple::__get' => 
  array (
    0 => 'mixed',
    'name=' => 'null',
  ),
  'yaf\\view\\simple::__isset' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'yaf\\view\\simple::__set' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value=' => 'mixed',
  ),
  'yaf\\view\\simple::assign' => 
  array (
    0 => 'Yaf\\View\\Simple',
    'name' => 'array<array-key, mixed>|string',
    'value=' => 'mixed',
  ),
  'yaf\\view\\simple::assignref' => 
  array (
    0 => 'Yaf\\View\\Simple',
    'name' => 'string',
    '&value' => 'mixed',
  ),
  'yaf\\view\\simple::clear' => 
  array (
    0 => 'Yaf\\View\\Simple',
    'name=' => 'string',
  ),
  'yaf\\view\\simple::display' => 
  array (
    0 => 'bool',
    'tpl' => 'string',
    'tpl_vars=' => 'array<array-key, mixed>|null',
  ),
  'yaf\\view\\simple::eval' => 
  array (
    0 => 'bool|null',
    'tpl_str' => 'string',
    'vars=' => 'array<array-key, mixed>|null',
  ),
  'yaf\\view\\simple::getscriptpath' => 
  array (
    0 => 'string',
  ),
  'yaf\\view\\simple::render' => 
  array (
    0 => 'null|string',
    'tpl' => 'string',
    'tpl_vars=' => 'array<array-key, mixed>|null',
  ),
  'yaf\\view\\simple::setscriptpath' => 
  array (
    0 => 'Yaf\\View\\Simple',
    'template_dir' => 'string',
  ),
  'yaf\\view_interface::assign' => 
  array (
    0 => 'bool',
    'name' => 'array<array-key, mixed>|string',
    'value' => 'mixed',
  ),
  'yaf\\view_interface::display' => 
  array (
    0 => 'bool',
    'tpl' => 'string',
    'tpl_vars=' => 'array<array-key, mixed>|null',
  ),
  'yaf\\view_interface::getscriptpath' => 
  array (
    0 => 'string',
  ),
  'yaf\\view_interface::render' => 
  array (
    0 => 'string',
    'tpl' => 'string',
    'tpl_vars=' => 'array<array-key, mixed>|null',
  ),
  'yaf\\view_interface::setscriptpath' => 
  array (
    0 => 'void',
    'template_dir' => 'string',
  ),
  'yaf_action_abstract::__clone' => 
  array (
    0 => 'void',
  ),
  'yaf_action_abstract::__construct' => 
  array (
    0 => 'void',
    'request' => 'Yaf_Request_Abstract',
    'response' => 'Yaf_Response_Abstract',
    'view' => 'Yaf_View_Interface',
    'invokeArgs=' => 'array<array-key, mixed>|null',
  ),
  'yaf_action_abstract::display' => 
  array (
    0 => 'bool',
    'tpl' => 'string',
    'parameters=' => 'array<array-key, mixed>|null',
  ),
  'yaf_action_abstract::execute' => 
  array (
    0 => 'mixed',
    'arg=' => 'mixed',
    '...args=' => 'mixed',
  ),
  'yaf_action_abstract::forward' => 
  array (
    0 => 'bool',
    'module' => 'string',
    'controller=' => 'string',
    'action=' => 'string',
    'parameters=' => 'array<array-key, mixed>|null',
  ),
  'yaf_action_abstract::getcontroller' => 
  array (
    0 => 'Yaf_Controller_Abstract',
  ),
  'yaf_action_abstract::getcontrollername' => 
  array (
    0 => 'string',
  ),
  'yaf_action_abstract::getinvokearg' => 
  array (
    0 => 'mixed|null',
    'name' => 'string',
  ),
  'yaf_action_abstract::getinvokeargs' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'yaf_action_abstract::getmodulename' => 
  array (
    0 => 'string',
  ),
  'yaf_action_abstract::getrequest' => 
  array (
    0 => 'Yaf_Request_Abstract',
  ),
  'yaf_action_abstract::getresponse' => 
  array (
    0 => 'Yaf_Response_Abstract',
  ),
  'yaf_action_abstract::getview' => 
  array (
    0 => 'Yaf_View_Interface',
  ),
  'yaf_action_abstract::getviewpath' => 
  array (
    0 => 'string',
  ),
  'yaf_action_abstract::init' => 
  array (
    0 => 'mixed',
  ),
  'yaf_action_abstract::initview' => 
  array (
    0 => 'Yaf_Response_Abstract',
    'options=' => 'array<array-key, mixed>|null',
  ),
  'yaf_action_abstract::redirect' => 
  array (
    0 => 'bool',
    'url' => 'string',
  ),
  'yaf_action_abstract::render' => 
  array (
    0 => 'string',
    'tpl' => 'string',
    'parameters=' => 'array<array-key, mixed>|null',
  ),
  'yaf_action_abstract::setviewpath' => 
  array (
    0 => 'bool',
    'view_directory' => 'string',
  ),
  'yaf_application::__clone' => 
  array (
    0 => 'void',
  ),
  'yaf_application::__construct' => 
  array (
    0 => 'void',
    'config' => 'mixed',
    'envrion=' => 'string',
  ),
  'yaf_application::__destruct' => 
  array (
    0 => 'void',
  ),
  'yaf_application::__sleep' => 
  array (
    0 => 'list<string>',
  ),
  'yaf_application::__wakeup' => 
  array (
    0 => 'void',
  ),
  'yaf_application::app' => 
  array (
    0 => 'Yaf_Application|null',
  ),
  'yaf_application::bootstrap' => 
  array (
    0 => 'Yaf_Application',
    'bootstrap=' => 'Yaf_Bootstrap_Abstract',
  ),
  'yaf_application::clearlasterror' => 
  array (
    0 => 'Yaf_Application',
  ),
  'yaf_application::environ' => 
  array (
    0 => 'string',
  ),
  'yaf_application::execute' => 
  array (
    0 => 'void',
    'entry' => 'callable',
    '...args' => 'string',
  ),
  'yaf_application::getappdirectory' => 
  array (
    0 => 'Yaf_Application',
  ),
  'yaf_application::getconfig' => 
  array (
    0 => 'Yaf_Config_Abstract',
  ),
  'yaf_application::getdispatcher' => 
  array (
    0 => 'Yaf_Dispatcher',
  ),
  'yaf_application::getlasterrormsg' => 
  array (
    0 => 'string',
  ),
  'yaf_application::getlasterrorno' => 
  array (
    0 => 'int',
  ),
  'yaf_application::getmodules' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'yaf_application::run' => 
  array (
    0 => 'void',
  ),
  'yaf_application::setappdirectory' => 
  array (
    0 => 'Yaf_Application',
    'directory' => 'string',
  ),
  'yaf_config_abstract::__construct' => 
  array (
    0 => 'void',
  ),
  'yaf_config_abstract::get' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'yaf_config_abstract::readonly' => 
  array (
    0 => 'bool',
  ),
  'yaf_config_abstract::set' => 
  array (
    0 => 'Yaf_Config_Abstract',
  ),
  'yaf_config_abstract::toarray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'yaf_config_ini::__construct' => 
  array (
    0 => 'void',
    'config_file' => 'string',
    'section=' => 'string',
  ),
  'yaf_config_ini::__get' => 
  array (
    0 => 'void',
    'name=' => 'string',
  ),
  'yaf_config_ini::__isset' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'yaf_config_ini::__set' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'yaf_config_ini::count' => 
  array (
    0 => 'void',
  ),
  'yaf_config_ini::current' => 
  array (
    0 => 'void',
  ),
  'yaf_config_ini::get' => 
  array (
    0 => 'mixed',
    'name=' => 'mixed',
  ),
  'yaf_config_ini::key' => 
  array (
    0 => 'void',
  ),
  'yaf_config_ini::next' => 
  array (
    0 => 'void',
  ),
  'yaf_config_ini::offsetexists' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'yaf_config_ini::offsetget' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'yaf_config_ini::offsetset' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'string',
  ),
  'yaf_config_ini::offsetunset' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'yaf_config_ini::readonly' => 
  array (
    0 => 'void',
  ),
  'yaf_config_ini::rewind' => 
  array (
    0 => 'void',
  ),
  'yaf_config_ini::set' => 
  array (
    0 => 'Yaf_Config_Abstract',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'yaf_config_ini::toarray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'yaf_config_ini::valid' => 
  array (
    0 => 'void',
  ),
  'yaf_config_simple::__construct' => 
  array (
    0 => 'void',
    'config_file' => 'string',
    'section=' => 'string',
  ),
  'yaf_config_simple::__get' => 
  array (
    0 => 'void',
    'name=' => 'string',
  ),
  'yaf_config_simple::__isset' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'yaf_config_simple::__set' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'string',
  ),
  'yaf_config_simple::count' => 
  array (
    0 => 'void',
  ),
  'yaf_config_simple::current' => 
  array (
    0 => 'void',
  ),
  'yaf_config_simple::get' => 
  array (
    0 => 'mixed',
    'name=' => 'mixed',
  ),
  'yaf_config_simple::key' => 
  array (
    0 => 'void',
  ),
  'yaf_config_simple::next' => 
  array (
    0 => 'void',
  ),
  'yaf_config_simple::offsetexists' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'yaf_config_simple::offsetget' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'yaf_config_simple::offsetset' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'string',
  ),
  'yaf_config_simple::offsetunset' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'yaf_config_simple::readonly' => 
  array (
    0 => 'void',
  ),
  'yaf_config_simple::rewind' => 
  array (
    0 => 'void',
  ),
  'yaf_config_simple::set' => 
  array (
    0 => 'Yaf_Config_Abstract',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'yaf_config_simple::toarray' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'yaf_config_simple::valid' => 
  array (
    0 => 'void',
  ),
  'yaf_controller_abstract::__clone' => 
  array (
    0 => 'void',
  ),
  'yaf_controller_abstract::__construct' => 
  array (
    0 => 'void',
  ),
  'yaf_controller_abstract::display' => 
  array (
    0 => 'bool',
    'tpl' => 'string',
    'parameters=' => 'array<array-key, mixed>',
  ),
  'yaf_controller_abstract::forward' => 
  array (
    0 => 'void',
    'action' => 'string',
    'parameters=' => 'array<array-key, mixed>',
  ),
  'yaf_controller_abstract::forward\'1' => 
  array (
    0 => 'void',
    'controller' => 'string',
    'action' => 'string',
    'parameters=' => 'array<array-key, mixed>',
  ),
  'yaf_controller_abstract::forward\'2' => 
  array (
    0 => 'void',
    'module' => 'string',
    'controller' => 'string',
    'action' => 'string',
    'parameters=' => 'array<array-key, mixed>',
  ),
  'yaf_controller_abstract::getinvokearg' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'yaf_controller_abstract::getinvokeargs' => 
  array (
    0 => 'void',
  ),
  'yaf_controller_abstract::getmodulename' => 
  array (
    0 => 'string',
  ),
  'yaf_controller_abstract::getname' => 
  array (
    0 => 'string',
  ),
  'yaf_controller_abstract::getrequest' => 
  array (
    0 => 'Yaf_Request_Abstract',
  ),
  'yaf_controller_abstract::getresponse' => 
  array (
    0 => 'Yaf_Response_Abstract',
  ),
  'yaf_controller_abstract::getview' => 
  array (
    0 => 'Yaf_View_Interface',
  ),
  'yaf_controller_abstract::getviewpath' => 
  array (
    0 => 'void',
  ),
  'yaf_controller_abstract::init' => 
  array (
    0 => 'void',
  ),
  'yaf_controller_abstract::initview' => 
  array (
    0 => 'void',
    'options=' => 'array<array-key, mixed>',
  ),
  'yaf_controller_abstract::redirect' => 
  array (
    0 => 'bool',
    'url' => 'string',
  ),
  'yaf_controller_abstract::render' => 
  array (
    0 => 'string',
    'tpl' => 'string',
    'parameters=' => 'array<array-key, mixed>',
  ),
  'yaf_controller_abstract::setviewpath' => 
  array (
    0 => 'void',
    'view_directory' => 'string',
  ),
  'yaf_dispatcher::__clone' => 
  array (
    0 => 'void',
  ),
  'yaf_dispatcher::__construct' => 
  array (
    0 => 'void',
  ),
  'yaf_dispatcher::__sleep' => 
  array (
    0 => 'list<string>',
  ),
  'yaf_dispatcher::__wakeup' => 
  array (
    0 => 'void',
  ),
  'yaf_dispatcher::autorender' => 
  array (
    0 => 'Yaf_Dispatcher',
    'flag=' => 'bool',
  ),
  'yaf_dispatcher::catchexception' => 
  array (
    0 => 'Yaf_Dispatcher',
    'flag=' => 'bool',
  ),
  'yaf_dispatcher::disableview' => 
  array (
    0 => 'bool',
  ),
  'yaf_dispatcher::dispatch' => 
  array (
    0 => 'Yaf_Response_Abstract',
    'request' => 'Yaf_Request_Abstract',
  ),
  'yaf_dispatcher::enableview' => 
  array (
    0 => 'Yaf_Dispatcher',
  ),
  'yaf_dispatcher::flushinstantly' => 
  array (
    0 => 'Yaf_Dispatcher',
    'flag=' => 'bool',
  ),
  'yaf_dispatcher::getapplication' => 
  array (
    0 => 'Yaf_Application',
  ),
  'yaf_dispatcher::getdefaultaction' => 
  array (
    0 => 'string',
  ),
  'yaf_dispatcher::getdefaultcontroller' => 
  array (
    0 => 'string',
  ),
  'yaf_dispatcher::getdefaultmodule' => 
  array (
    0 => 'string',
  ),
  'yaf_dispatcher::getinstance' => 
  array (
    0 => 'Yaf_Dispatcher',
  ),
  'yaf_dispatcher::getrequest' => 
  array (
    0 => 'Yaf_Request_Abstract',
  ),
  'yaf_dispatcher::getrouter' => 
  array (
    0 => 'Yaf_Router',
  ),
  'yaf_dispatcher::initview' => 
  array (
    0 => 'Yaf_View_Interface',
    'templates_dir' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'yaf_dispatcher::registerplugin' => 
  array (
    0 => 'Yaf_Dispatcher',
    'plugin' => 'Yaf_Plugin_Abstract',
  ),
  'yaf_dispatcher::returnresponse' => 
  array (
    0 => 'Yaf_Dispatcher',
    'flag' => 'bool',
  ),
  'yaf_dispatcher::setdefaultaction' => 
  array (
    0 => 'Yaf_Dispatcher',
    'action' => 'string',
  ),
  'yaf_dispatcher::setdefaultcontroller' => 
  array (
    0 => 'Yaf_Dispatcher',
    'controller' => 'string',
  ),
  'yaf_dispatcher::setdefaultmodule' => 
  array (
    0 => 'Yaf_Dispatcher',
    'module' => 'string',
  ),
  'yaf_dispatcher::seterrorhandler' => 
  array (
    0 => 'Yaf_Dispatcher',
    'callback' => 'callable',
    'error_types' => 'int',
  ),
  'yaf_dispatcher::setrequest' => 
  array (
    0 => 'Yaf_Dispatcher',
    'request' => 'Yaf_Request_Abstract',
  ),
  'yaf_dispatcher::setview' => 
  array (
    0 => 'Yaf_Dispatcher',
    'view' => 'Yaf_View_Interface',
  ),
  'yaf_dispatcher::throwexception' => 
  array (
    0 => 'Yaf_Dispatcher',
    'flag=' => 'bool',
  ),
  'yaf_exception::__construct' => 
  array (
    0 => 'void',
  ),
  'yaf_exception::getprevious' => 
  array (
    0 => 'void',
  ),
  'yaf_loader::__clone' => 
  array (
    0 => 'void',
  ),
  'yaf_loader::__construct' => 
  array (
    0 => 'void',
  ),
  'yaf_loader::__sleep' => 
  array (
    0 => 'list<string>',
  ),
  'yaf_loader::__wakeup' => 
  array (
    0 => 'void',
  ),
  'yaf_loader::autoload' => 
  array (
    0 => 'void',
  ),
  'yaf_loader::clearlocalnamespace' => 
  array (
    0 => 'void',
  ),
  'yaf_loader::getinstance' => 
  array (
    0 => 'Yaf_Loader',
  ),
  'yaf_loader::getlibrarypath' => 
  array (
    0 => 'Yaf_Loader',
    'is_global=' => 'bool',
  ),
  'yaf_loader::getlocalnamespace' => 
  array (
    0 => 'void',
  ),
  'yaf_loader::getnamespacepath' => 
  array (
    0 => 'string',
    'namespaces' => 'string',
  ),
  'yaf_loader::import' => 
  array (
    0 => 'bool',
  ),
  'yaf_loader::islocalname' => 
  array (
    0 => 'bool',
  ),
  'yaf_loader::registerlocalnamespace' => 
  array (
    0 => 'void',
    'prefix' => 'mixed',
  ),
  'yaf_loader::registernamespace' => 
  array (
    0 => 'bool',
    'namespaces' => 'array<array-key, mixed>|string',
    'path=' => 'string',
  ),
  'yaf_loader::setlibrarypath' => 
  array (
    0 => 'Yaf_Loader',
    'directory' => 'string',
    'is_global=' => 'bool',
  ),
  'yaf_plugin_abstract::dispatchloopshutdown' => 
  array (
    0 => 'void',
    'request' => 'Yaf_Request_Abstract',
    'response' => 'Yaf_Response_Abstract',
  ),
  'yaf_plugin_abstract::dispatchloopstartup' => 
  array (
    0 => 'void',
    'request' => 'Yaf_Request_Abstract',
    'response' => 'Yaf_Response_Abstract',
  ),
  'yaf_plugin_abstract::postdispatch' => 
  array (
    0 => 'void',
    'request' => 'Yaf_Request_Abstract',
    'response' => 'Yaf_Response_Abstract',
  ),
  'yaf_plugin_abstract::predispatch' => 
  array (
    0 => 'void',
    'request' => 'Yaf_Request_Abstract',
    'response' => 'Yaf_Response_Abstract',
  ),
  'yaf_plugin_abstract::preresponse' => 
  array (
    0 => 'void',
    'request' => 'Yaf_Request_Abstract',
    'response' => 'Yaf_Response_Abstract',
  ),
  'yaf_plugin_abstract::routershutdown' => 
  array (
    0 => 'void',
    'request' => 'Yaf_Request_Abstract',
    'response' => 'Yaf_Response_Abstract',
  ),
  'yaf_plugin_abstract::routerstartup' => 
  array (
    0 => 'void',
    'request' => 'Yaf_Request_Abstract',
    'response' => 'Yaf_Response_Abstract',
  ),
  'yaf_registry::__clone' => 
  array (
    0 => 'void',
  ),
  'yaf_registry::__construct' => 
  array (
    0 => 'void',
  ),
  'yaf_registry::del' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'yaf_registry::get' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'yaf_registry::has' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'yaf_registry::set' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value' => 'string',
  ),
  'yaf_request_abstract::clearparams' => 
  array (
    0 => 'bool',
  ),
  'yaf_request_abstract::getactionname' => 
  array (
    0 => 'void',
  ),
  'yaf_request_abstract::getbaseuri' => 
  array (
    0 => 'void',
  ),
  'yaf_request_abstract::getcontrollername' => 
  array (
    0 => 'void',
  ),
  'yaf_request_abstract::getenv' => 
  array (
    0 => 'void',
    'name' => 'string',
    'default=' => 'string',
  ),
  'yaf_request_abstract::getexception' => 
  array (
    0 => 'void',
  ),
  'yaf_request_abstract::getlanguage' => 
  array (
    0 => 'void',
  ),
  'yaf_request_abstract::getmethod' => 
  array (
    0 => 'void',
  ),
  'yaf_request_abstract::getmodulename' => 
  array (
    0 => 'void',
  ),
  'yaf_request_abstract::getparam' => 
  array (
    0 => 'void',
    'name' => 'string',
    'default=' => 'string',
  ),
  'yaf_request_abstract::getparams' => 
  array (
    0 => 'void',
  ),
  'yaf_request_abstract::getrequesturi' => 
  array (
    0 => 'void',
  ),
  'yaf_request_abstract::getserver' => 
  array (
    0 => 'void',
    'name' => 'string',
    'default=' => 'string',
  ),
  'yaf_request_abstract::iscli' => 
  array (
    0 => 'void',
  ),
  'yaf_request_abstract::isdispatched' => 
  array (
    0 => 'void',
  ),
  'yaf_request_abstract::isget' => 
  array (
    0 => 'void',
  ),
  'yaf_request_abstract::ishead' => 
  array (
    0 => 'void',
  ),
  'yaf_request_abstract::isoptions' => 
  array (
    0 => 'void',
  ),
  'yaf_request_abstract::ispost' => 
  array (
    0 => 'void',
  ),
  'yaf_request_abstract::isput' => 
  array (
    0 => 'void',
  ),
  'yaf_request_abstract::isrouted' => 
  array (
    0 => 'void',
  ),
  'yaf_request_abstract::isxmlhttprequest' => 
  array (
    0 => 'void',
  ),
  'yaf_request_abstract::setactionname' => 
  array (
    0 => 'void',
    'action' => 'string',
  ),
  'yaf_request_abstract::setbaseuri' => 
  array (
    0 => 'bool',
    'uir' => 'string',
  ),
  'yaf_request_abstract::setcontrollername' => 
  array (
    0 => 'void',
    'controller' => 'string',
  ),
  'yaf_request_abstract::setdispatched' => 
  array (
    0 => 'void',
  ),
  'yaf_request_abstract::setmodulename' => 
  array (
    0 => 'void',
    'module' => 'string',
  ),
  'yaf_request_abstract::setparam' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value=' => 'string',
  ),
  'yaf_request_abstract::setrequesturi' => 
  array (
    0 => 'void',
    'uir' => 'string',
  ),
  'yaf_request_abstract::setrouted' => 
  array (
    0 => 'void',
    'flag=' => 'string',
  ),
  'yaf_request_http::__clone' => 
  array (
    0 => 'void',
  ),
  'yaf_request_http::__construct' => 
  array (
    0 => 'void',
  ),
  'yaf_request_http::get' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'default=' => 'string',
  ),
  'yaf_request_http::getactionname' => 
  array (
    0 => 'string',
  ),
  'yaf_request_http::getbaseuri' => 
  array (
    0 => 'string',
  ),
  'yaf_request_http::getcontrollername' => 
  array (
    0 => 'string',
  ),
  'yaf_request_http::getcookie' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'default=' => 'string',
  ),
  'yaf_request_http::getenv' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'mixed',
  ),
  'yaf_request_http::getexception' => 
  array (
    0 => 'Yaf_Exception',
  ),
  'yaf_request_http::getfiles' => 
  array (
    0 => 'void',
  ),
  'yaf_request_http::getlanguage' => 
  array (
    0 => 'string',
  ),
  'yaf_request_http::getmethod' => 
  array (
    0 => 'string',
  ),
  'yaf_request_http::getmodulename' => 
  array (
    0 => 'string',
  ),
  'yaf_request_http::getparam' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'default=' => 'mixed',
  ),
  'yaf_request_http::getparams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'yaf_request_http::getpost' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'default=' => 'string',
  ),
  'yaf_request_http::getquery' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'default=' => 'string',
  ),
  'yaf_request_http::getraw' => 
  array (
    0 => 'mixed',
  ),
  'yaf_request_http::getrequest' => 
  array (
    0 => 'void',
  ),
  'yaf_request_http::getrequesturi' => 
  array (
    0 => 'string',
  ),
  'yaf_request_http::getserver' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'mixed',
  ),
  'yaf_request_http::iscli' => 
  array (
    0 => 'bool',
  ),
  'yaf_request_http::isdispatched' => 
  array (
    0 => 'bool',
  ),
  'yaf_request_http::isget' => 
  array (
    0 => 'bool',
  ),
  'yaf_request_http::ishead' => 
  array (
    0 => 'bool',
  ),
  'yaf_request_http::isoptions' => 
  array (
    0 => 'bool',
  ),
  'yaf_request_http::ispost' => 
  array (
    0 => 'bool',
  ),
  'yaf_request_http::isput' => 
  array (
    0 => 'bool',
  ),
  'yaf_request_http::isrouted' => 
  array (
    0 => 'bool',
  ),
  'yaf_request_http::isxmlhttprequest' => 
  array (
    0 => 'bool',
  ),
  'yaf_request_http::setactionname' => 
  array (
    0 => 'Yaf_Request_Abstract|bool',
    'action' => 'string',
  ),
  'yaf_request_http::setbaseuri' => 
  array (
    0 => 'bool',
    'uri' => 'string',
  ),
  'yaf_request_http::setcontrollername' => 
  array (
    0 => 'Yaf_Request_Abstract|bool',
    'controller' => 'string',
  ),
  'yaf_request_http::setdispatched' => 
  array (
    0 => 'bool',
  ),
  'yaf_request_http::setmodulename' => 
  array (
    0 => 'Yaf_Request_Abstract|bool',
    'module' => 'string',
  ),
  'yaf_request_http::setparam' => 
  array (
    0 => 'Yaf_Request_Abstract|bool',
    'name' => 'array<array-key, mixed>|string',
    'value=' => 'string',
  ),
  'yaf_request_http::setrequesturi' => 
  array (
    0 => 'mixed',
    'uri' => 'string',
  ),
  'yaf_request_http::setrouted' => 
  array (
    0 => 'Yaf_Request_Abstract|bool',
  ),
  'yaf_request_simple::__clone' => 
  array (
    0 => 'void',
  ),
  'yaf_request_simple::__construct' => 
  array (
    0 => 'void',
  ),
  'yaf_request_simple::get' => 
  array (
    0 => 'void',
  ),
  'yaf_request_simple::getactionname' => 
  array (
    0 => 'string',
  ),
  'yaf_request_simple::getbaseuri' => 
  array (
    0 => 'string',
  ),
  'yaf_request_simple::getcontrollername' => 
  array (
    0 => 'string',
  ),
  'yaf_request_simple::getcookie' => 
  array (
    0 => 'void',
  ),
  'yaf_request_simple::getenv' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'mixed',
  ),
  'yaf_request_simple::getexception' => 
  array (
    0 => 'Yaf_Exception',
  ),
  'yaf_request_simple::getfiles' => 
  array (
    0 => 'void',
  ),
  'yaf_request_simple::getlanguage' => 
  array (
    0 => 'string',
  ),
  'yaf_request_simple::getmethod' => 
  array (
    0 => 'string',
  ),
  'yaf_request_simple::getmodulename' => 
  array (
    0 => 'string',
  ),
  'yaf_request_simple::getparam' => 
  array (
    0 => 'mixed',
    'name' => 'string',
    'default=' => 'mixed',
  ),
  'yaf_request_simple::getparams' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'yaf_request_simple::getpost' => 
  array (
    0 => 'void',
  ),
  'yaf_request_simple::getquery' => 
  array (
    0 => 'void',
  ),
  'yaf_request_simple::getrequest' => 
  array (
    0 => 'void',
  ),
  'yaf_request_simple::getrequesturi' => 
  array (
    0 => 'string',
  ),
  'yaf_request_simple::getserver' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
    'default=' => 'mixed',
  ),
  'yaf_request_simple::iscli' => 
  array (
    0 => 'bool',
  ),
  'yaf_request_simple::isdispatched' => 
  array (
    0 => 'bool',
  ),
  'yaf_request_simple::isget' => 
  array (
    0 => 'bool',
  ),
  'yaf_request_simple::ishead' => 
  array (
    0 => 'bool',
  ),
  'yaf_request_simple::isoptions' => 
  array (
    0 => 'bool',
  ),
  'yaf_request_simple::ispost' => 
  array (
    0 => 'bool',
  ),
  'yaf_request_simple::isput' => 
  array (
    0 => 'bool',
  ),
  'yaf_request_simple::isrouted' => 
  array (
    0 => 'bool',
  ),
  'yaf_request_simple::isxmlhttprequest' => 
  array (
    0 => 'void',
  ),
  'yaf_request_simple::setactionname' => 
  array (
    0 => 'Yaf_Request_Abstract|bool',
    'action' => 'string',
  ),
  'yaf_request_simple::setbaseuri' => 
  array (
    0 => 'bool',
    'uri' => 'string',
  ),
  'yaf_request_simple::setcontrollername' => 
  array (
    0 => 'Yaf_Request_Abstract|bool',
    'controller' => 'string',
  ),
  'yaf_request_simple::setdispatched' => 
  array (
    0 => 'bool',
  ),
  'yaf_request_simple::setmodulename' => 
  array (
    0 => 'Yaf_Request_Abstract|bool',
    'module' => 'string',
  ),
  'yaf_request_simple::setparam' => 
  array (
    0 => 'Yaf_Request_Abstract|bool',
    'name' => 'array<array-key, mixed>|string',
    'value=' => 'string',
  ),
  'yaf_request_simple::setrequesturi' => 
  array (
    0 => 'mixed',
    'uri' => 'string',
  ),
  'yaf_request_simple::setrouted' => 
  array (
    0 => 'Yaf_Request_Abstract|bool',
  ),
  'yaf_response_abstract::__clone' => 
  array (
    0 => 'void',
  ),
  'yaf_response_abstract::__construct' => 
  array (
    0 => 'void',
  ),
  'yaf_response_abstract::__destruct' => 
  array (
    0 => 'void',
  ),
  'yaf_response_abstract::__tostring' => 
  array (
    0 => 'string',
  ),
  'yaf_response_abstract::appendbody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'yaf_response_abstract::clearbody' => 
  array (
    0 => 'bool',
    'key=' => 'string',
  ),
  'yaf_response_abstract::clearheaders' => 
  array (
    0 => 'void',
  ),
  'yaf_response_abstract::getbody' => 
  array (
    0 => 'mixed',
    'key=' => 'string',
  ),
  'yaf_response_abstract::getheader' => 
  array (
    0 => 'void',
  ),
  'yaf_response_abstract::prependbody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'yaf_response_abstract::response' => 
  array (
    0 => 'void',
  ),
  'yaf_response_abstract::setallheaders' => 
  array (
    0 => 'void',
  ),
  'yaf_response_abstract::setbody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'yaf_response_abstract::setheader' => 
  array (
    0 => 'void',
  ),
  'yaf_response_abstract::setredirect' => 
  array (
    0 => 'void',
  ),
  'yaf_response_cli::__clone' => 
  array (
    0 => 'void',
  ),
  'yaf_response_cli::__construct' => 
  array (
    0 => 'void',
  ),
  'yaf_response_cli::__destruct' => 
  array (
    0 => 'void',
  ),
  'yaf_response_cli::__tostring' => 
  array (
    0 => 'string',
  ),
  'yaf_response_cli::appendbody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'yaf_response_cli::clearbody' => 
  array (
    0 => 'bool',
    'key=' => 'string',
  ),
  'yaf_response_cli::getbody' => 
  array (
    0 => 'mixed',
    'key=' => 'null|string',
  ),
  'yaf_response_cli::prependbody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'yaf_response_cli::setbody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'yaf_response_http::__clone' => 
  array (
    0 => 'void',
  ),
  'yaf_response_http::__construct' => 
  array (
    0 => 'void',
  ),
  'yaf_response_http::__destruct' => 
  array (
    0 => 'void',
  ),
  'yaf_response_http::__tostring' => 
  array (
    0 => 'string',
  ),
  'yaf_response_http::appendbody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'yaf_response_http::clearbody' => 
  array (
    0 => 'bool',
    'key=' => 'string',
  ),
  'yaf_response_http::clearheaders' => 
  array (
    0 => 'Yaf_Response_Abstract|false',
    'name=' => 'string',
  ),
  'yaf_response_http::getbody' => 
  array (
    0 => 'mixed',
    'key=' => 'null|string',
  ),
  'yaf_response_http::getheader' => 
  array (
    0 => 'mixed',
    'name=' => 'string',
  ),
  'yaf_response_http::prependbody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'yaf_response_http::response' => 
  array (
    0 => 'bool',
  ),
  'yaf_response_http::setallheaders' => 
  array (
    0 => 'bool',
    'headers' => 'array<array-key, mixed>',
  ),
  'yaf_response_http::setbody' => 
  array (
    0 => 'bool',
    'content' => 'string',
    'key=' => 'string',
  ),
  'yaf_response_http::setheader' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value' => 'string',
    'replace=' => 'bool',
    'response_code=' => 'int',
  ),
  'yaf_response_http::setredirect' => 
  array (
    0 => 'bool',
    'url' => 'string',
  ),
  'yaf_route_interface::__construct' => 
  array (
    0 => 'void',
  ),
  'yaf_route_interface::assemble' => 
  array (
    0 => 'string',
    'info' => 'array<array-key, mixed>',
    'query=' => 'array<array-key, mixed>',
  ),
  'yaf_route_interface::route' => 
  array (
    0 => 'bool',
    'request' => 'Yaf_Request_Abstract',
  ),
  'yaf_route_map::__construct' => 
  array (
    0 => 'void',
    'controller_prefer=' => 'string',
    'delimiter=' => 'string',
  ),
  'yaf_route_map::assemble' => 
  array (
    0 => 'string',
    'info' => 'array<array-key, mixed>',
    'query=' => 'array<array-key, mixed>',
  ),
  'yaf_route_map::route' => 
  array (
    0 => 'bool',
    'request' => 'Yaf_Request_Abstract',
  ),
  'yaf_route_regex::__construct' => 
  array (
    0 => 'void',
    'match' => 'string',
    'route' => 'array<array-key, mixed>',
    'map=' => 'array<array-key, mixed>',
    'verify=' => 'array<array-key, mixed>',
    'reverse=' => 'string',
  ),
  'yaf_route_regex::addconfig' => 
  array (
    0 => 'Yaf_Router|bool',
    'config' => 'Yaf_Config_Abstract',
  ),
  'yaf_route_regex::addroute' => 
  array (
    0 => 'Yaf_Router|bool',
    'name' => 'string',
    'route' => 'Yaf_Route_Interface',
  ),
  'yaf_route_regex::assemble' => 
  array (
    0 => 'string',
    'info' => 'array<array-key, mixed>',
    'query=' => 'array<array-key, mixed>',
  ),
  'yaf_route_regex::getcurrentroute' => 
  array (
    0 => 'string',
  ),
  'yaf_route_regex::getroute' => 
  array (
    0 => 'Yaf_Route_Interface',
    'name' => 'string',
  ),
  'yaf_route_regex::getroutes' => 
  array (
    0 => 'array<array-key, Yaf_Route_Interface>',
  ),
  'yaf_route_regex::route' => 
  array (
    0 => 'bool',
    'request' => 'Yaf_Request_Abstract',
  ),
  'yaf_route_rewrite::__construct' => 
  array (
    0 => 'void',
    'match' => 'string',
    'route' => 'array<array-key, mixed>',
    'verify=' => 'array<array-key, mixed>',
  ),
  'yaf_route_rewrite::addconfig' => 
  array (
    0 => 'Yaf_Router|bool',
    'config' => 'Yaf_Config_Abstract',
  ),
  'yaf_route_rewrite::addroute' => 
  array (
    0 => 'Yaf_Router|bool',
    'name' => 'string',
    'route' => 'Yaf_Route_Interface',
  ),
  'yaf_route_rewrite::assemble' => 
  array (
    0 => 'string',
    'info' => 'array<array-key, mixed>',
    'query=' => 'array<array-key, mixed>',
  ),
  'yaf_route_rewrite::getcurrentroute' => 
  array (
    0 => 'string',
  ),
  'yaf_route_rewrite::getroute' => 
  array (
    0 => 'Yaf_Route_Interface',
    'name' => 'string',
  ),
  'yaf_route_rewrite::getroutes' => 
  array (
    0 => 'array<array-key, Yaf_Route_Interface>',
  ),
  'yaf_route_rewrite::route' => 
  array (
    0 => 'bool',
    'request' => 'Yaf_Request_Abstract',
  ),
  'yaf_route_simple::__construct' => 
  array (
    0 => 'void',
    'module_name' => 'string',
    'controller_name' => 'string',
    'action_name' => 'string',
  ),
  'yaf_route_simple::assemble' => 
  array (
    0 => 'string',
    'info' => 'array<array-key, mixed>',
    'query=' => 'array<array-key, mixed>',
  ),
  'yaf_route_simple::route' => 
  array (
    0 => 'bool',
    'request' => 'Yaf_Request_Abstract',
  ),
  'yaf_route_static::assemble' => 
  array (
    0 => 'string',
    'info' => 'array<array-key, mixed>',
    'query=' => 'array<array-key, mixed>',
  ),
  'yaf_route_static::match' => 
  array (
    0 => 'void',
    'uri' => 'string',
  ),
  'yaf_route_static::route' => 
  array (
    0 => 'bool',
    'request' => 'Yaf_Request_Abstract',
  ),
  'yaf_route_supervar::__construct' => 
  array (
    0 => 'void',
    'supervar_name' => 'string',
  ),
  'yaf_route_supervar::assemble' => 
  array (
    0 => 'string',
    'info' => 'array<array-key, mixed>',
    'query=' => 'array<array-key, mixed>',
  ),
  'yaf_route_supervar::route' => 
  array (
    0 => 'bool',
    'request' => 'Yaf_Request_Abstract',
  ),
  'yaf_router::__construct' => 
  array (
    0 => 'void',
  ),
  'yaf_router::addconfig' => 
  array (
    0 => 'bool',
    'config' => 'Yaf_Config_Abstract',
  ),
  'yaf_router::addroute' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'route' => 'Yaf_Route_Interface',
  ),
  'yaf_router::getcurrentroute' => 
  array (
    0 => 'string',
  ),
  'yaf_router::getroute' => 
  array (
    0 => 'Yaf_Route_Interface',
    'name' => 'string',
  ),
  'yaf_router::getroutes' => 
  array (
    0 => 'mixed',
  ),
  'yaf_router::route' => 
  array (
    0 => 'bool',
    'request' => 'Yaf_Request_Abstract',
  ),
  'yaf_session::__clone' => 
  array (
    0 => 'void',
  ),
  'yaf_session::__construct' => 
  array (
    0 => 'void',
  ),
  'yaf_session::__get' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'yaf_session::__isset' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'yaf_session::__set' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'string',
  ),
  'yaf_session::__sleep' => 
  array (
    0 => 'list<string>',
  ),
  'yaf_session::__unset' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'yaf_session::__wakeup' => 
  array (
    0 => 'void',
  ),
  'yaf_session::count' => 
  array (
    0 => 'void',
  ),
  'yaf_session::current' => 
  array (
    0 => 'void',
  ),
  'yaf_session::del' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'yaf_session::get' => 
  array (
    0 => 'mixed',
    'name' => 'string',
  ),
  'yaf_session::getinstance' => 
  array (
    0 => 'void',
  ),
  'yaf_session::has' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'yaf_session::key' => 
  array (
    0 => 'void',
  ),
  'yaf_session::next' => 
  array (
    0 => 'void',
  ),
  'yaf_session::offsetexists' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'yaf_session::offsetget' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'yaf_session::offsetset' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'string',
  ),
  'yaf_session::offsetunset' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'yaf_session::rewind' => 
  array (
    0 => 'void',
  ),
  'yaf_session::set' => 
  array (
    0 => 'Yaf_Session|bool',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'yaf_session::start' => 
  array (
    0 => 'void',
  ),
  'yaf_session::valid' => 
  array (
    0 => 'void',
  ),
  'yaf_view_interface::assign' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value=' => 'string',
  ),
  'yaf_view_interface::display' => 
  array (
    0 => 'bool',
    'tpl' => 'string',
    'tpl_vars=' => 'array<array-key, mixed>',
  ),
  'yaf_view_interface::getscriptpath' => 
  array (
    0 => 'string',
  ),
  'yaf_view_interface::render' => 
  array (
    0 => 'string',
    'tpl' => 'string',
    'tpl_vars=' => 'array<array-key, mixed>',
  ),
  'yaf_view_interface::setscriptpath' => 
  array (
    0 => 'void',
    'template_dir' => 'string',
  ),
  'yaf_view_simple::__construct' => 
  array (
    0 => 'void',
    'tempalte_dir' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'yaf_view_simple::__get' => 
  array (
    0 => 'void',
    'name=' => 'string',
  ),
  'yaf_view_simple::__isset' => 
  array (
    0 => 'void',
    'name' => 'string',
  ),
  'yaf_view_simple::__set' => 
  array (
    0 => 'void',
    'name' => 'string',
    'value' => 'mixed',
  ),
  'yaf_view_simple::assign' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'value=' => 'mixed',
  ),
  'yaf_view_simple::assignref' => 
  array (
    0 => 'bool',
    'name' => 'string',
    '&rw_value' => 'mixed',
  ),
  'yaf_view_simple::clear' => 
  array (
    0 => 'bool',
    'name=' => 'string',
  ),
  'yaf_view_simple::display' => 
  array (
    0 => 'bool',
    'tpl' => 'string',
    'tpl_vars=' => 'array<array-key, mixed>',
  ),
  'yaf_view_simple::eval' => 
  array (
    0 => 'string',
    'tpl_content' => 'string',
    'tpl_vars=' => 'array<array-key, mixed>',
  ),
  'yaf_view_simple::getscriptpath' => 
  array (
    0 => 'string',
  ),
  'yaf_view_simple::render' => 
  array (
    0 => 'string',
    'tpl' => 'string',
    'tpl_vars=' => 'array<array-key, mixed>',
  ),
  'yaf_view_simple::setscriptpath' => 
  array (
    0 => 'bool',
    'template_dir' => 'string',
  ),
  'yaml_emit' => 
  array (
    0 => 'string',
    'data' => 'mixed',
    'encoding=' => 'int',
    'linebreak=' => 'int',
    'callbacks=' => 'array<array-key, mixed>',
  ),
  'yaml_emit_file' => 
  array (
    0 => 'bool',
    'filename' => 'string',
    'data' => 'mixed',
    'encoding=' => 'int',
    'linebreak=' => 'int',
    'callbacks=' => 'array<array-key, mixed>',
  ),
  'yaml_parse' => 
  array (
    0 => 'false|mixed',
    'input' => 'string',
    'pos=' => 'int',
    '&w_ndocs=' => 'int',
    'callbacks=' => 'array<array-key, mixed>',
  ),
  'yaml_parse_file' => 
  array (
    0 => 'false|mixed',
    'filename' => 'string',
    'pos=' => 'int',
    '&w_ndocs=' => 'int',
    'callbacks=' => 'array<array-key, mixed>',
  ),
  'yaml_parse_url' => 
  array (
    0 => 'false|mixed',
    'url' => 'string',
    'pos=' => 'int',
    '&w_ndocs=' => 'int',
    'callbacks=' => 'array<array-key, mixed>',
  ),
  'yar_client::__call' => 
  array (
    0 => 'void',
    'method' => 'string',
    'parameters' => 'array<array-key, mixed>',
  ),
  'yar_client::__construct' => 
  array (
    0 => 'void',
    'url' => 'string',
  ),
  'yar_client::setopt' => 
  array (
    0 => 'Yar_Client|false',
    'name' => 'int',
    'value' => 'mixed',
  ),
  'yar_client_exception::__clone' => 
  array (
    0 => 'void',
  ),
  'yar_client_exception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Exception|Throwable|null',
  ),
  'yar_client_exception::__tostring' => 
  array (
    0 => 'string',
  ),
  'yar_client_exception::__wakeup' => 
  array (
    0 => 'void',
  ),
  'yar_client_exception::getcode' => 
  array (
    0 => 'int',
  ),
  'yar_client_exception::getfile' => 
  array (
    0 => 'string',
  ),
  'yar_client_exception::getline' => 
  array (
    0 => 'int',
  ),
  'yar_client_exception::getmessage' => 
  array (
    0 => 'string',
  ),
  'yar_client_exception::getprevious' => 
  array (
    0 => 'Exception|Throwable|null',
  ),
  'yar_client_exception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'yar_client_exception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'yar_client_exception::gettype' => 
  array (
    0 => 'string',
  ),
  'yar_concurrent_client::call' => 
  array (
    0 => 'int',
    'uri' => 'string',
    'method' => 'string',
    'parameters' => 'array<array-key, mixed>',
    'callback=' => 'callable',
  ),
  'yar_concurrent_client::loop' => 
  array (
    0 => 'bool',
    'callback=' => 'callable',
    'error_callback=' => 'callable',
  ),
  'yar_concurrent_client::reset' => 
  array (
    0 => 'bool',
  ),
  'yar_server::__construct' => 
  array (
    0 => 'void',
    'object' => 'object',
  ),
  'yar_server::handle' => 
  array (
    0 => 'bool',
  ),
  'yar_server_exception::__clone' => 
  array (
    0 => 'void',
  ),
  'yar_server_exception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Exception|Throwable|null',
  ),
  'yar_server_exception::__tostring' => 
  array (
    0 => 'string',
  ),
  'yar_server_exception::__wakeup' => 
  array (
    0 => 'void',
  ),
  'yar_server_exception::getcode' => 
  array (
    0 => 'int',
  ),
  'yar_server_exception::getfile' => 
  array (
    0 => 'string',
  ),
  'yar_server_exception::getline' => 
  array (
    0 => 'int',
  ),
  'yar_server_exception::getmessage' => 
  array (
    0 => 'string',
  ),
  'yar_server_exception::getprevious' => 
  array (
    0 => 'Exception|Throwable|null',
  ),
  'yar_server_exception::gettrace' => 
  array (
    0 => 'list<array{args?: array<array-key, mixed>, class?: class-string, file?: string, function: string, line?: int, type?: \'->\'|\'::\'}>',
  ),
  'yar_server_exception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'yar_server_exception::gettype' => 
  array (
    0 => 'string',
  ),
  'yaz_addinfo' => 
  array (
    0 => 'string',
    'id' => 'resource',
  ),
  'yaz_ccl_conf' => 
  array (
    0 => 'void',
    'id' => 'resource',
    'config' => 'array<array-key, mixed>',
  ),
  'yaz_ccl_parse' => 
  array (
    0 => 'bool',
    'id' => 'resource',
    'query' => 'string',
    '&w_result' => 'array<array-key, mixed>',
  ),
  'yaz_close' => 
  array (
    0 => 'bool',
    'id' => 'resource',
  ),
  'yaz_connect' => 
  array (
    0 => 'mixed',
    'zurl' => 'string',
    'options=' => 'mixed',
  ),
  'yaz_database' => 
  array (
    0 => 'bool',
    'id' => 'resource',
    'databases' => 'string',
  ),
  'yaz_element' => 
  array (
    0 => 'bool',
    'id' => 'resource',
    'elementset' => 'string',
  ),
  'yaz_errno' => 
  array (
    0 => 'int',
    'id' => 'resource',
  ),
  'yaz_error' => 
  array (
    0 => 'string',
    'id' => 'resource',
  ),
  'yaz_es' => 
  array (
    0 => 'void',
    'id' => 'resource',
    'type' => 'string',
    'args' => 'array<array-key, mixed>',
  ),
  'yaz_es_result' => 
  array (
    0 => 'array<array-key, mixed>',
    'id' => 'resource',
  ),
  'yaz_get_option' => 
  array (
    0 => 'string',
    'id' => 'resource',
    'name' => 'string',
  ),
  'yaz_hits' => 
  array (
    0 => 'int',
    'id' => 'resource',
    'searchresult=' => 'array<array-key, mixed>',
  ),
  'yaz_itemorder' => 
  array (
    0 => 'void',
    'id' => 'resource',
    'args' => 'array<array-key, mixed>',
  ),
  'yaz_present' => 
  array (
    0 => 'bool',
    'id' => 'resource',
  ),
  'yaz_range' => 
  array (
    0 => 'void',
    'id' => 'resource',
    'start' => 'int',
    'number' => 'int',
  ),
  'yaz_record' => 
  array (
    0 => 'string',
    'id' => 'resource',
    'pos' => 'int',
    'type' => 'string',
  ),
  'yaz_scan' => 
  array (
    0 => 'void',
    'id' => 'resource',
    'type' => 'string',
    'startterm' => 'string',
    'flags=' => 'array<array-key, mixed>',
  ),
  'yaz_scan_result' => 
  array (
    0 => 'array<array-key, mixed>',
    'id' => 'resource',
    'result=' => 'array<array-key, mixed>',
  ),
  'yaz_schema' => 
  array (
    0 => 'void',
    'id' => 'resource',
    'schema' => 'string',
  ),
  'yaz_search' => 
  array (
    0 => 'bool',
    'id' => 'resource',
    'type' => 'string',
    'query' => 'string',
  ),
  'yaz_set_option' => 
  array (
    0 => 'mixed',
    'id' => 'mixed',
    'name' => 'string',
    'value' => 'string',
    'options' => 'array<array-key, mixed>',
  ),
  'yaz_sort' => 
  array (
    0 => 'void',
    'id' => 'resource',
    'criteria' => 'string',
  ),
  'yaz_syntax' => 
  array (
    0 => 'void',
    'id' => 'resource',
    'syntax' => 'string',
  ),
  'yaz_wait' => 
  array (
    0 => 'mixed',
    '&rw_options=' => 'array<array-key, mixed>',
  ),
  'yp_all' => 
  array (
    0 => 'void',
    'domain' => 'string',
    'map' => 'string',
    'callback' => 'string',
  ),
  'yp_cat' => 
  array (
    0 => 'array<array-key, mixed>',
    'domain' => 'string',
    'map' => 'string',
  ),
  'yp_err_string' => 
  array (
    0 => 'string',
    'errorcode' => 'int',
  ),
  'yp_errno' => 
  array (
    0 => 'int',
  ),
  'yp_first' => 
  array (
    0 => 'array<array-key, mixed>',
    'domain' => 'string',
    'map' => 'string',
  ),
  'yp_get_default_domain' => 
  array (
    0 => 'string',
  ),
  'yp_master' => 
  array (
    0 => 'string',
    'domain' => 'string',
    'map' => 'string',
  ),
  'yp_match' => 
  array (
    0 => 'string',
    'domain' => 'string',
    'map' => 'string',
    'key' => 'string',
  ),
  'yp_next' => 
  array (
    0 => 'array<array-key, mixed>',
    'domain' => 'string',
    'map' => 'string',
    'key' => 'string',
  ),
  'yp_order' => 
  array (
    0 => 'int',
    'domain' => 'string',
    'map' => 'string',
  ),
  'zem_get_extension_info_by_id' => 
  array (
    0 => 'mixed',
  ),
  'zem_get_extension_info_by_name' => 
  array (
    0 => 'mixed',
  ),
  'zem_get_extensions_info' => 
  array (
    0 => 'mixed',
  ),
  'zem_get_license_info' => 
  array (
    0 => 'mixed',
  ),
  'zend_current_obfuscation_level' => 
  array (
    0 => 'int',
  ),
  'zend_disk_cache_clear' => 
  array (
    0 => 'bool',
    'namespace=' => 'mixed|string',
  ),
  'zend_disk_cache_delete' => 
  array (
    0 => 'mixed|null',
    'key' => 'string',
  ),
  'zend_disk_cache_fetch' => 
  array (
    0 => 'mixed|null',
    'key' => 'string',
  ),
  'zend_disk_cache_store' => 
  array (
    0 => 'bool',
    'key' => 'mixed',
    'value' => 'mixed',
    'ttl=' => 'int|mixed',
  ),
  'zend_get_id' => 
  array (
    0 => 'array<array-key, mixed>',
    'all_ids=' => 'all_ids|false',
  ),
  'zend_is_configuration_changed' => 
  array (
    0 => 'mixed',
  ),
  'zend_loader_current_file' => 
  array (
    0 => 'string',
  ),
  'zend_loader_enabled' => 
  array (
    0 => 'bool',
  ),
  'zend_loader_file_encoded' => 
  array (
    0 => 'bool',
  ),
  'zend_loader_file_licensed' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'zend_loader_install_license' => 
  array (
    0 => 'bool',
    'license_file' => 'string',
    'override' => 'bool',
  ),
  'zend_logo_guid' => 
  array (
    0 => 'string',
  ),
  'zend_obfuscate_class_name' => 
  array (
    0 => 'string',
    'class_name' => 'string',
  ),
  'zend_obfuscate_function_name' => 
  array (
    0 => 'string',
    'function_name' => 'string',
  ),
  'zend_optimizer_version' => 
  array (
    0 => 'string',
  ),
  'zend_runtime_obfuscate' => 
  array (
    0 => 'void',
  ),
  'zend_send_buffer' => 
  array (
    0 => 'false|null',
    'buffer' => 'string',
    'mime_type=' => 'string',
    'custom_headers=' => 'string',
  ),
  'zend_send_file' => 
  array (
    0 => 'false|null',
    'filename' => 'string',
    'mime_type=' => 'string',
    'custom_headers=' => 'string',
  ),
  'zend_set_configuration_changed' => 
  array (
    0 => 'mixed',
  ),
  'zend_shm_cache_clear' => 
  array (
    0 => 'bool',
    'namespace=' => 'mixed|string',
  ),
  'zend_shm_cache_delete' => 
  array (
    0 => 'mixed|null',
    'key' => 'string',
  ),
  'zend_shm_cache_fetch' => 
  array (
    0 => 'mixed|null',
    'key' => 'string',
  ),
  'zend_shm_cache_store' => 
  array (
    0 => 'bool',
    'key' => 'mixed',
    'value' => 'mixed',
    'ttl=' => 'int|mixed',
  ),
  'zend_thread_id' => 
  array (
    0 => 'int',
  ),
  'zend_version' => 
  array (
    0 => 'string',
  ),
  'zendapi_job::addjobtoqueue' => 
  array (
    0 => 'int',
    'jobqueue_url' => 'string',
    'password' => 'string',
  ),
  'zendapi_job::getapplicationid' => 
  array (
    0 => 'mixed',
  ),
  'zendapi_job::getendtime' => 
  array (
    0 => 'mixed',
  ),
  'zendapi_job::getglobalvariables' => 
  array (
    0 => 'mixed',
  ),
  'zendapi_job::gethost' => 
  array (
    0 => 'mixed',
  ),
  'zendapi_job::getid' => 
  array (
    0 => 'mixed',
  ),
  'zendapi_job::getinterval' => 
  array (
    0 => 'mixed',
  ),
  'zendapi_job::getjobdependency' => 
  array (
    0 => 'mixed',
  ),
  'zendapi_job::getjobname' => 
  array (
    0 => 'mixed',
  ),
  'zendapi_job::getjobpriority' => 
  array (
    0 => 'mixed',
  ),
  'zendapi_job::getjobstatus' => 
  array (
    0 => 'int',
  ),
  'zendapi_job::getlastperformedstatus' => 
  array (
    0 => 'int',
  ),
  'zendapi_job::getoutput' => 
  array (
    0 => 'An',
  ),
  'zendapi_job::getpreserved' => 
  array (
    0 => 'mixed',
  ),
  'zendapi_job::getproperties' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'zendapi_job::getscheduledtime' => 
  array (
    0 => 'mixed',
  ),
  'zendapi_job::getscript' => 
  array (
    0 => 'mixed',
  ),
  'zendapi_job::gettimetonextrepeat' => 
  array (
    0 => 'int',
  ),
  'zendapi_job::getuservariables' => 
  array (
    0 => 'mixed',
  ),
  'zendapi_job::setapplicationid' => 
  array (
    0 => 'mixed',
    'app_id' => 'mixed',
  ),
  'zendapi_job::setglobalvariables' => 
  array (
    0 => 'mixed',
    'vars' => 'mixed',
  ),
  'zendapi_job::setjobdependency' => 
  array (
    0 => 'mixed',
    'job_id' => 'mixed',
  ),
  'zendapi_job::setjobname' => 
  array (
    0 => 'mixed',
    'name' => 'mixed',
  ),
  'zendapi_job::setjobpriority' => 
  array (
    0 => 'mixed',
    'priority' => 'int',
  ),
  'zendapi_job::setpreserved' => 
  array (
    0 => 'mixed',
    'preserved' => 'mixed',
  ),
  'zendapi_job::setrecurrencedata' => 
  array (
    0 => 'mixed',
    'interval' => 'mixed',
    'end_time=' => 'mixed',
  ),
  'zendapi_job::setscheduledtime' => 
  array (
    0 => 'mixed',
    'timestamp' => 'mixed',
  ),
  'zendapi_job::setscript' => 
  array (
    0 => 'mixed',
    'script' => 'mixed',
  ),
  'zendapi_job::setuservariables' => 
  array (
    0 => 'mixed',
    'vars' => 'mixed',
  ),
  'zendapi_job::zendapi_job' => 
  array (
    0 => 'Job',
    'script' => 'script',
  ),
  'zendapi_queue::addjob' => 
  array (
    0 => 'int',
    '&job' => 'Job',
  ),
  'zendapi_queue::getallapplicationids' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'zendapi_queue::getallhosts' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'zendapi_queue::gethistoricjobs' => 
  array (
    0 => 'array<array-key, mixed>',
    'status' => 'int',
    'start_time' => 'mixed',
    'end_time' => 'mixed',
    'index' => 'int',
    'count' => 'int',
    '&total' => 'int',
  ),
  'zendapi_queue::getjob' => 
  array (
    0 => 'Job',
    'job_id' => 'int',
  ),
  'zendapi_queue::getjobsinqueue' => 
  array (
    0 => 'array<array-key, mixed>',
    'filter_options=' => 'array<array-key, mixed>',
    'max_jobs=' => 'int',
    'with_globals_and_output=' => 'bool',
  ),
  'zendapi_queue::getlasterror' => 
  array (
    0 => 'string',
  ),
  'zendapi_queue::getnumofjobsinqueue' => 
  array (
    0 => 'int',
    'filter_options=' => 'array<array-key, mixed>',
  ),
  'zendapi_queue::getstatistics' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'zendapi_queue::isscriptexists' => 
  array (
    0 => 'bool',
    'path' => 'string',
  ),
  'zendapi_queue::issuspend' => 
  array (
    0 => 'bool',
  ),
  'zendapi_queue::login' => 
  array (
    0 => 'bool',
    'password' => 'string',
    'application_id=' => 'int',
  ),
  'zendapi_queue::removejob' => 
  array (
    0 => 'bool',
    'job_id' => 'array<array-key, mixed>|int',
  ),
  'zendapi_queue::requeuejob' => 
  array (
    0 => 'bool',
    'job' => 'Job',
  ),
  'zendapi_queue::resumejob' => 
  array (
    0 => 'bool',
    'job_id' => 'array<array-key, mixed>|int',
  ),
  'zendapi_queue::resumequeue' => 
  array (
    0 => 'bool',
  ),
  'zendapi_queue::setmaxhistorytime' => 
  array (
    0 => 'bool',
  ),
  'zendapi_queue::suspendjob' => 
  array (
    0 => 'bool',
    'job_id' => 'array<array-key, mixed>|int',
  ),
  'zendapi_queue::suspendqueue' => 
  array (
    0 => 'bool',
  ),
  'zendapi_queue::updatejob' => 
  array (
    0 => 'int',
    '&job' => 'Job',
  ),
  'zendapi_queue::zendapi_queue' => 
  array (
    0 => 'ZendAPI_Queue',
    'queue_url' => 'string',
  ),
  'zip_close' => 
  array (
    0 => 'void',
    'zip' => 'resource',
  ),
  'zip_entry_close' => 
  array (
    0 => 'bool',
    'zip_entry' => 'resource',
  ),
  'zip_entry_compressedsize' => 
  array (
    0 => 'int',
    'zip_entry' => 'resource',
  ),
  'zip_entry_compressionmethod' => 
  array (
    0 => 'string',
    'zip_entry' => 'resource',
  ),
  'zip_entry_filesize' => 
  array (
    0 => 'int',
    'zip_entry' => 'resource',
  ),
  'zip_entry_name' => 
  array (
    0 => 'false|string',
    'zip_entry' => 'resource',
  ),
  'zip_entry_open' => 
  array (
    0 => 'bool',
    'zip_dp' => 'resource',
    'zip_entry' => 'resource',
    'mode=' => 'string',
  ),
  'zip_entry_read' => 
  array (
    0 => 'false|string',
    'zip_entry' => 'resource',
    'len=' => 'int',
  ),
  'zip_open' => 
  array (
    0 => 'false|int|resource',
    'filename' => 'string',
  ),
  'zip_read' => 
  array (
    0 => 'resource',
    'zip' => 'resource',
  ),
  'ziparchive::addemptydir' => 
  array (
    0 => 'bool',
    'dirname' => 'string',
    'flags=' => 'int',
  ),
  'ziparchive::addfile' => 
  array (
    0 => 'bool',
    'filepath' => 'string',
    'entryname=' => 'string',
    'start=' => 'int',
    'length=' => 'int',
    'flags=' => 'int',
  ),
  'ziparchive::addfromstring' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'content' => 'string',
    'flags=' => 'int',
  ),
  'ziparchive::addglob' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'pattern' => 'string',
    'flags=' => 'int',
    'options=' => 'array<array-key, mixed>',
  ),
  'ziparchive::addpattern' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'pattern' => 'string',
    'path=' => 'string',
    'options=' => 'array<array-key, mixed>',
  ),
  'ziparchive::close' => 
  array (
    0 => 'bool',
  ),
  'ziparchive::count' => 
  array (
    0 => 'int',
  ),
  'ziparchive::deleteindex' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'ziparchive::deletename' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'ziparchive::extractto' => 
  array (
    0 => 'bool',
    'pathto' => 'string',
    'files=' => 'array<array-key, string>|null|string',
  ),
  'ziparchive::getarchivecomment' => 
  array (
    0 => 'false|string',
    'flags=' => 'int',
  ),
  'ziparchive::getcommentindex' => 
  array (
    0 => 'false|string',
    'index' => 'int',
    'flags=' => 'int',
  ),
  'ziparchive::getcommentname' => 
  array (
    0 => 'false|string',
    'name' => 'string',
    'flags=' => 'int',
  ),
  'ziparchive::getexternalattributesindex' => 
  array (
    0 => 'bool',
    'index' => 'int',
    '&w_opsys' => 'int',
    '&w_attr' => 'int',
    'flags=' => 'int',
  ),
  'ziparchive::getexternalattributesname' => 
  array (
    0 => 'bool',
    'name' => 'string',
    '&w_opsys' => 'int',
    '&w_attr' => 'int',
    'flags=' => 'int',
  ),
  'ziparchive::getfromindex' => 
  array (
    0 => 'false|string',
    'index' => 'int',
    'len=' => 'int',
    'flags=' => 'int',
  ),
  'ziparchive::getfromname' => 
  array (
    0 => 'false|string',
    'name' => 'string',
    'len=' => 'int',
    'flags=' => 'int',
  ),
  'ziparchive::getnameindex' => 
  array (
    0 => 'false|string',
    'index' => 'int',
    'flags=' => 'int',
  ),
  'ziparchive::getstatusstring' => 
  array (
    0 => 'string',
  ),
  'ziparchive::getstream' => 
  array (
    0 => 'false|resource',
    'name' => 'string',
  ),
  'ziparchive::iscompressionmethodsupported' => 
  array (
    0 => 'bool',
    'method' => 'int',
    'enc=' => 'bool',
  ),
  'ziparchive::isencryptionmethodsupported' => 
  array (
    0 => 'bool',
    'method' => 'int',
    'enc=' => 'bool',
  ),
  'ziparchive::locatename' => 
  array (
    0 => 'false|int',
    'name' => 'string',
    'flags=' => 'int',
  ),
  'ziparchive::open' => 
  array (
    0 => 'bool|int',
    'filename' => 'string',
    'flags=' => 'int',
  ),
  'ziparchive::registercancelcallback' => 
  array (
    0 => 'bool',
    'callback' => 'callable',
  ),
  'ziparchive::registerprogresscallback' => 
  array (
    0 => 'bool',
    'rate' => 'float',
    'callback' => 'callable',
  ),
  'ziparchive::renameindex' => 
  array (
    0 => 'bool',
    'index' => 'int',
    'new_name' => 'string',
  ),
  'ziparchive::renamename' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'new_name' => 'string',
  ),
  'ziparchive::replacefile' => 
  array (
    0 => 'bool',
    'filepath' => 'string',
    'index' => 'int',
    'start=' => 'int',
    'length=' => 'int',
    'flags=' => 'int',
  ),
  'ziparchive::setarchivecomment' => 
  array (
    0 => 'bool',
    'comment' => 'string',
  ),
  'ziparchive::setcommentindex' => 
  array (
    0 => 'bool',
    'index' => 'int',
    'comment' => 'string',
  ),
  'ziparchive::setcommentname' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'comment' => 'string',
  ),
  'ziparchive::setcompressionindex' => 
  array (
    0 => 'bool',
    'index' => 'int',
    'method' => 'int',
    'compflags=' => 'int',
  ),
  'ziparchive::setcompressionname' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'method' => 'int',
    'compflags=' => 'int',
  ),
  'ziparchive::setencryptionindex' => 
  array (
    0 => 'bool',
    'index' => 'int',
    'method' => 'int',
    'password=' => 'null|string',
  ),
  'ziparchive::setencryptionname' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'method' => 'int',
    'password=' => 'null|string',
  ),
  'ziparchive::setexternalattributesindex' => 
  array (
    0 => 'bool',
    'index' => 'int',
    'opsys' => 'int',
    'attr' => 'int',
    'flags=' => 'int',
  ),
  'ziparchive::setexternalattributesname' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'opsys' => 'int',
    'attr' => 'int',
    'flags=' => 'int',
  ),
  'ziparchive::setmtimeindex' => 
  array (
    0 => 'bool',
    'index' => 'int',
    'timestamp' => 'int',
    'flags=' => 'int',
  ),
  'ziparchive::setmtimename' => 
  array (
    0 => 'bool',
    'name' => 'string',
    'timestamp' => 'int',
    'flags=' => 'int',
  ),
  'ziparchive::setpassword' => 
  array (
    0 => 'bool',
    'password' => 'string',
  ),
  'ziparchive::statindex' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'index' => 'int',
    'flags=' => 'int',
  ),
  'ziparchive::statname' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'name' => 'string',
    'flags=' => 'int',
  ),
  'ziparchive::unchangeall' => 
  array (
    0 => 'bool',
  ),
  'ziparchive::unchangearchive' => 
  array (
    0 => 'bool',
  ),
  'ziparchive::unchangeindex' => 
  array (
    0 => 'bool',
    'index' => 'int',
  ),
  'ziparchive::unchangename' => 
  array (
    0 => 'bool',
    'name' => 'string',
  ),
  'zlib_decode' => 
  array (
    0 => 'false|string',
    'data' => 'string',
    'max_length=' => 'int',
  ),
  'zlib_encode' => 
  array (
    0 => 'false|string',
    'data' => 'string',
    'encoding' => 'int',
    'level=' => 'int',
  ),
  'zlib_get_coding_type' => 
  array (
    0 => 'false|string',
  ),
  'zmq::__construct' => 
  array (
    0 => 'void',
  ),
  'zmq::clock' => 
  array (
    0 => 'mixed',
  ),
  'zmq::curvekeypair' => 
  array (
    0 => 'mixed',
  ),
  'zmq::z85decode' => 
  array (
    0 => 'mixed',
    'data' => 'mixed',
  ),
  'zmq::z85encode' => 
  array (
    0 => 'mixed',
    'data' => 'mixed',
  ),
  'zmqcontext::__clone' => 
  array (
    0 => 'mixed',
  ),
  'zmqcontext::__construct' => 
  array (
    0 => 'void',
    'io_threads=' => 'int',
    'persistent=' => 'bool',
  ),
  'zmqcontext::acquire' => 
  array (
    0 => 'mixed',
  ),
  'zmqcontext::getopt' => 
  array (
    0 => 'int|string',
    'option' => 'string',
  ),
  'zmqcontext::getsocket' => 
  array (
    0 => 'ZMQSocket',
    'type' => 'int',
    'dsn' => 'string',
    'on_new_socket=' => 'callable',
  ),
  'zmqcontext::getsocketcount' => 
  array (
    0 => 'mixed',
  ),
  'zmqcontext::ispersistent' => 
  array (
    0 => 'bool',
  ),
  'zmqcontext::setopt' => 
  array (
    0 => 'ZMQContext',
    'option' => 'int',
    'value' => 'mixed',
  ),
  'zmqcontextexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'zmqcontextexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'zmqcontextexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'zmqcontextexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'zmqcontextexception::getfile' => 
  array (
    0 => 'string',
  ),
  'zmqcontextexception::getline' => 
  array (
    0 => 'int',
  ),
  'zmqcontextexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'zmqcontextexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'zmqcontextexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'zmqcontextexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'zmqdevice::__clone' => 
  array (
    0 => 'mixed',
  ),
  'zmqdevice::__construct' => 
  array (
    0 => 'void',
    'frontend' => 'ZMQSocket',
    'backend' => 'ZMQSocket',
    'capture=' => 'ZMQSocket',
  ),
  'zmqdevice::getidletimeout' => 
  array (
    0 => 'ZMQDevice',
  ),
  'zmqdevice::gettimertimeout' => 
  array (
    0 => 'ZMQDevice',
  ),
  'zmqdevice::run' => 
  array (
    0 => 'void',
  ),
  'zmqdevice::setidlecallback' => 
  array (
    0 => 'ZMQDevice',
    'idle_callback' => 'callable',
    'timeout' => 'int',
    'user_data=' => 'mixed',
  ),
  'zmqdevice::setidletimeout' => 
  array (
    0 => 'ZMQDevice',
    'timeout' => 'int',
  ),
  'zmqdevice::settimercallback' => 
  array (
    0 => 'ZMQDevice',
    'idle_callback' => 'callable',
    'timeout' => 'int',
    'user_data=' => 'mixed',
  ),
  'zmqdevice::settimertimeout' => 
  array (
    0 => 'ZMQDevice',
    'timeout' => 'int',
  ),
  'zmqdeviceexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'zmqdeviceexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'zmqdeviceexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'zmqdeviceexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'zmqdeviceexception::getfile' => 
  array (
    0 => 'string',
  ),
  'zmqdeviceexception::getline' => 
  array (
    0 => 'int',
  ),
  'zmqdeviceexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'zmqdeviceexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'zmqdeviceexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'zmqdeviceexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'zmqexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'zmqexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'zmqexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'zmqexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'zmqexception::getfile' => 
  array (
    0 => 'string',
  ),
  'zmqexception::getline' => 
  array (
    0 => 'int',
  ),
  'zmqexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'zmqexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'zmqexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'zmqexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'zmqpoll::__clone' => 
  array (
    0 => 'mixed',
  ),
  'zmqpoll::add' => 
  array (
    0 => 'string',
    'entry' => 'mixed',
    'type' => 'int',
  ),
  'zmqpoll::clear' => 
  array (
    0 => 'ZMQPoll',
  ),
  'zmqpoll::count' => 
  array (
    0 => 'int',
  ),
  'zmqpoll::getlasterrors' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'zmqpoll::items' => 
  array (
    0 => 'mixed',
  ),
  'zmqpoll::poll' => 
  array (
    0 => 'int',
    '&w_readable' => 'array<array-key, mixed>',
    '&w_writable' => 'array<array-key, mixed>',
    'timeout=' => 'int',
  ),
  'zmqpoll::remove' => 
  array (
    0 => 'bool',
    'remove' => 'mixed',
  ),
  'zmqpollexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'zmqpollexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'zmqpollexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'zmqpollexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'zmqpollexception::getfile' => 
  array (
    0 => 'string',
  ),
  'zmqpollexception::getline' => 
  array (
    0 => 'int',
  ),
  'zmqpollexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'zmqpollexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'zmqpollexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'zmqpollexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'zmqsocket::__clone' => 
  array (
    0 => 'mixed',
  ),
  'zmqsocket::__construct' => 
  array (
    0 => 'void',
    'ZMQContext' => 'ZMQContext',
    'type' => 'int',
    'persistent_id=' => 'string',
    'on_new_socket=' => 'callable',
  ),
  'zmqsocket::bind' => 
  array (
    0 => 'ZMQSocket',
    'dsn' => 'string',
    'force=' => 'bool',
  ),
  'zmqsocket::connect' => 
  array (
    0 => 'ZMQSocket',
    'dsn' => 'string',
    'force=' => 'bool',
  ),
  'zmqsocket::disconnect' => 
  array (
    0 => 'ZMQSocket',
    'dsn' => 'string',
  ),
  'zmqsocket::getendpoints' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'zmqsocket::getpersistentid' => 
  array (
    0 => 'null|string',
  ),
  'zmqsocket::getsockettype' => 
  array (
    0 => 'int',
  ),
  'zmqsocket::getsockopt' => 
  array (
    0 => 'int|string',
    'key' => 'string',
  ),
  'zmqsocket::ispersistent' => 
  array (
    0 => 'bool',
  ),
  'zmqsocket::monitor' => 
  array (
    0 => 'mixed',
    'dsn' => 'mixed',
    'events=' => 'mixed',
  ),
  'zmqsocket::recv' => 
  array (
    0 => 'string',
    'mode=' => 'int',
  ),
  'zmqsocket::recvevent' => 
  array (
    0 => 'mixed',
    'flags=' => 'mixed',
  ),
  'zmqsocket::recvmsg' => 
  array (
    0 => 'mixed',
    'mode=' => 'mixed',
  ),
  'zmqsocket::recvmulti' => 
  array (
    0 => 'array<array-key, string>',
    'mode=' => 'int',
  ),
  'zmqsocket::send' => 
  array (
    0 => 'ZMQSocket',
    'message' => 'array<array-key, mixed>',
    'mode=' => 'int',
  ),
  'zmqsocket::send\'1' => 
  array (
    0 => 'ZMQSocket',
    'message' => 'string',
    'mode=' => 'int',
  ),
  'zmqsocket::sendmsg' => 
  array (
    0 => 'mixed',
    'message' => 'mixed',
    'mode=' => 'mixed',
  ),
  'zmqsocket::sendmulti' => 
  array (
    0 => 'ZMQSocket',
    'message' => 'array<array-key, mixed>',
    'mode=' => 'int',
  ),
  'zmqsocket::setsockopt' => 
  array (
    0 => 'ZMQSocket',
    'key' => 'int',
    'value' => 'mixed',
  ),
  'zmqsocket::unbind' => 
  array (
    0 => 'ZMQSocket',
    'dsn' => 'string',
  ),
  'zmqsocketexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'zmqsocketexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'zmqsocketexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'zmqsocketexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'zmqsocketexception::getfile' => 
  array (
    0 => 'string',
  ),
  'zmqsocketexception::getline' => 
  array (
    0 => 'int',
  ),
  'zmqsocketexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'zmqsocketexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'zmqsocketexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'zmqsocketexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'zookeeper::__construct' => 
  array (
    0 => 'void',
    'host=' => 'mixed',
    'watcher_cb=' => 'mixed',
    'recv_timeout=' => 'mixed',
  ),
  'zookeeper::addauth' => 
  array (
    0 => 'bool',
    'scheme' => 'string',
    'cert' => 'string',
    'completion_cb=' => 'callable',
  ),
  'zookeeper::close' => 
  array (
    0 => 'void',
  ),
  'zookeeper::connect' => 
  array (
    0 => 'void',
    'host' => 'string',
    'watcher_cb=' => 'callable',
    'recv_timeout=' => 'int',
  ),
  'zookeeper::create' => 
  array (
    0 => 'string',
    'path' => 'string',
    'value=' => 'string',
    'acl=' => 'array<array-key, mixed>',
    'flags=' => 'int',
  ),
  'zookeeper::delete' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'version=' => 'int',
  ),
  'zookeeper::dispatch' => 
  array (
    0 => 'mixed',
  ),
  'zookeeper::exists' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'watcher_cb=' => 'callable',
  ),
  'zookeeper::get' => 
  array (
    0 => 'string',
    'path' => 'string',
    'watcher_cb=' => 'callable',
    '&stat_info=' => 'array<array-key, mixed>',
    'max_size=' => 'int',
  ),
  'zookeeper::getacl' => 
  array (
    0 => 'array<array-key, mixed>',
    'path' => 'string',
  ),
  'zookeeper::getchildren' => 
  array (
    0 => 'array<array-key, mixed>|false',
    'path' => 'string',
    'watcher_cb=' => 'callable',
  ),
  'zookeeper::getclientid' => 
  array (
    0 => 'int',
  ),
  'zookeeper::getconfig' => 
  array (
    0 => 'ZookeeperConfig',
  ),
  'zookeeper::getrecvtimeout' => 
  array (
    0 => 'int',
  ),
  'zookeeper::getstate' => 
  array (
    0 => 'int',
  ),
  'zookeeper::isrecoverable' => 
  array (
    0 => 'bool',
  ),
  'zookeeper::set' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'value=' => 'string',
    'version=' => 'int',
    '&stat_info=' => 'array<array-key, mixed>',
  ),
  'zookeeper::setacl' => 
  array (
    0 => 'bool',
    'path' => 'string',
    'version' => 'int',
    'acl' => 'array<array-key, mixed>',
  ),
  'zookeeper::setdebuglevel' => 
  array (
    0 => 'bool',
    'level' => 'int',
  ),
  'zookeeper::setdeterministicconnorder' => 
  array (
    0 => 'bool',
    'trueOrFalse' => 'bool',
  ),
  'zookeeper::setlogstream' => 
  array (
    0 => 'bool',
    'stream' => 'resource',
  ),
  'zookeeper::setwatcher' => 
  array (
    0 => 'bool',
    'watcher_cb' => 'callable',
  ),
  'zookeeper_dispatch' => 
  array (
    0 => 'void',
  ),
  'zookeeperauthenticationexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'zookeeperauthenticationexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'zookeeperauthenticationexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'zookeeperauthenticationexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'zookeeperauthenticationexception::getfile' => 
  array (
    0 => 'string',
  ),
  'zookeeperauthenticationexception::getline' => 
  array (
    0 => 'int',
  ),
  'zookeeperauthenticationexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'zookeeperauthenticationexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'zookeeperauthenticationexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'zookeeperauthenticationexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'zookeeperconfig::add' => 
  array (
    0 => 'void',
    'members' => 'string',
    'version=' => 'int',
    '&stat_info=' => 'array<array-key, mixed>',
  ),
  'zookeeperconfig::get' => 
  array (
    0 => 'string',
    'watcher_cb' => 'callable',
    '&stat_info' => 'array<array-key, mixed>',
  ),
  'zookeeperconfig::remove' => 
  array (
    0 => 'void',
    'members' => 'string',
    'version=' => 'int',
    '&stat_info=' => 'array<array-key, mixed>',
  ),
  'zookeeperconfig::set' => 
  array (
    0 => 'void',
    'members' => 'string',
    'version=' => 'int',
    '&stat_info=' => 'array<array-key, mixed>',
  ),
  'zookeeperconnectionexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'zookeeperconnectionexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'zookeeperconnectionexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'zookeeperconnectionexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'zookeeperconnectionexception::getfile' => 
  array (
    0 => 'string',
  ),
  'zookeeperconnectionexception::getline' => 
  array (
    0 => 'int',
  ),
  'zookeeperconnectionexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'zookeeperconnectionexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'zookeeperconnectionexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'zookeeperconnectionexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'zookeeperexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'zookeeperexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'zookeeperexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'zookeeperexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'zookeeperexception::getfile' => 
  array (
    0 => 'string',
  ),
  'zookeeperexception::getline' => 
  array (
    0 => 'int',
  ),
  'zookeeperexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'zookeeperexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'zookeeperexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'zookeeperexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'zookeepermarshallingexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'zookeepermarshallingexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'zookeepermarshallingexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'zookeepermarshallingexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'zookeepermarshallingexception::getfile' => 
  array (
    0 => 'string',
  ),
  'zookeepermarshallingexception::getline' => 
  array (
    0 => 'int',
  ),
  'zookeepermarshallingexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'zookeepermarshallingexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'zookeepermarshallingexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'zookeepermarshallingexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'zookeepernonodeexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'zookeepernonodeexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'zookeepernonodeexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'zookeepernonodeexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'zookeepernonodeexception::getfile' => 
  array (
    0 => 'string',
  ),
  'zookeepernonodeexception::getline' => 
  array (
    0 => 'int',
  ),
  'zookeepernonodeexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'zookeepernonodeexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'zookeepernonodeexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'zookeepernonodeexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'zookeeperoperationtimeoutexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'zookeeperoperationtimeoutexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'zookeeperoperationtimeoutexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'zookeeperoperationtimeoutexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'zookeeperoperationtimeoutexception::getfile' => 
  array (
    0 => 'string',
  ),
  'zookeeperoperationtimeoutexception::getline' => 
  array (
    0 => 'int',
  ),
  'zookeeperoperationtimeoutexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'zookeeperoperationtimeoutexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'zookeeperoperationtimeoutexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'zookeeperoperationtimeoutexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
  'zookeepersessionexception::__construct' => 
  array (
    0 => 'void',
    'message=' => 'string',
    'code=' => 'int',
    'previous=' => 'Throwable|null',
  ),
  'zookeepersessionexception::__tostring' => 
  array (
    0 => 'string',
  ),
  'zookeepersessionexception::__wakeup' => 
  array (
    0 => 'mixed',
  ),
  'zookeepersessionexception::getcode' => 
  array (
    0 => 'mixed',
  ),
  'zookeepersessionexception::getfile' => 
  array (
    0 => 'string',
  ),
  'zookeepersessionexception::getline' => 
  array (
    0 => 'int',
  ),
  'zookeepersessionexception::getmessage' => 
  array (
    0 => 'string',
  ),
  'zookeepersessionexception::getprevious' => 
  array (
    0 => 'Throwable|null',
  ),
  'zookeepersessionexception::gettrace' => 
  array (
    0 => 'array<array-key, mixed>',
  ),
  'zookeepersessionexception::gettraceasstring' => 
  array (
    0 => 'string',
  ),
);